/*
** ###################################################################
**     Processors:          MIMX8MQ7CVAHZ
**                          MIMX8MQ7DVAJZ
**
**     Compilers:           GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**                          Keil ARM C/C++ Compiler
**
**     Reference manual:    IMX8MDQLQRM, Rev. 0, Jan. 2018
**     Version:             rev. 4.0, 2018-01-26
**     Build:               b190124
**
**     Abstract:
**         This header file implements peripheral memory map for MIMX8MQ7_ca53
**         processor.
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2019 NXP
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2017-01-10)
**         Initial version.
**     - rev. 2.0 (2017-04-27)
**         Rev.B Header EAR1
**     - rev. 3.0 (2017-07-19)
**         Rev.C Header EAR2
**     - rev. 4.0 (2018-01-26)
**         Rev.D Header RFP
**
** ###################################################################
*/

/*!
 * @file MIMX8MQ7_ca53.h
 * @version 4.0
 * @date 2018-01-26
 * @brief Peripheral memory map for MIMX8MQ7_ca53
 *
 * This header file implements peripheral memory map for MIMX8MQ7_ca53 processor.
 */


/* ----------------------------------------------------------------------------
   -- MCU activation
   ---------------------------------------------------------------------------- */

/* Prevention from multiple including the same memory map */
#if !defined(MCU_MIMX8MQ7_ca53)  /* Check if memory map has not been already included */
#define MCU_MIMX8MQ7_ca53

/* Check if another memory map has not been also included */
#if (defined(MCU_ACTIVE))
  #error MIMX8MQ7_ca53 memory map: There is already included another memory map. Only one memory map can be included.
#endif /* (defined(MCU_ACTIVE)) */
#define MCU_ACTIVE

#include <stdint.h>

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0400U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0000U


/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
typedef enum {
  INT_Software0_IRQn           = 0,                /**< Software Generated Interrupt 0 */
  INT_Software1_IRQn           = 1,                /**< Software Generated Interrupt 1 */
  INT_Software2_IRQn           = 2,                /**< Software Generated Interrupt 2 */
  INT_Software3_IRQn           = 3,                /**< Software Generated Interrupt 3 */
  INT_Software4_IRQn           = 4,                /**< Software Generated Interrupt 4 */
  INT_Software5_IRQn           = 5,                /**< Software Generated Interrupt 5 */
  INT_Software6_IRQn           = 6,                /**< Software Generated Interrupt 6 */
  INT_Software7_IRQn           = 7,                /**< Software Generated Interrupt 7 */
  INT_Software8_IRQn           = 8,                /**< Software Generated Interrupt 8 */
  INT_Software9_IRQn           = 9,                /**< Software Generated Interrupt 9 */
  INT_Software10_IRQn          = 10,               /**< Software Generated Interrupt 10 */
  INT_Software11_IRQn          = 11,               /**< Software Generated Interrupt 11 */
  INT_Software12_IRQn          = 12,               /**< Software Generated Interrupt 12 */
  INT_Software13_IRQn          = 13,               /**< Software Generated Interrupt 13 */
  INT_Software14_IRQn          = 14,               /**< Software Generated Interrupt 14 */
  INT_Software15_IRQn          = 15,               /**< Software Generated Interrupt 15 */
  INT_Reserved16               = 16,               /**< Reserved */
  INT_Reserved17               = 17,               /**< Reserved */
  INT_Reserved18               = 18,               /**< Reserved */
  INT_Reserved19               = 19,               /**< Reserved */
  INT_Reserved20               = 20,               /**< Reserved */
  INT_Reserved21               = 21,               /**< Reserved */
  INT_COMM_IRQn                = 22,               /**< DCC resceive or transmit interrupt */
  INT_PMU_IRQn                 = 23,               /**< PMU interrupt */
  INT_CTI_IRQn                 = 24,               /**< CTI interrupt */
  INT_VirtualMaintenance_IRQn  = 25,               /**< Virtual Maintenance Interrupt */
  INT_HypervisorTimer_IRQn     = 26,               /**< Hypervisor Timer Interrupt */
  INT_VirtualTimer_IRQn        = 27,               /**< Virtual Timer Interrupt */
  INT_Reserved28               = 28,               /**< Reserved */
  INT_SecurePhyTimer_IRQn      = 29,               /**< Secure Physical Timer Interrupt */
  INT_NonSecurePhyTimer_IRQn   = 30,               /**< Non-secure Physical Timer Interrupt */
  INT_Reserved31               = 31,               /**< Reserved */
  INT_GPR_IRQ                  = 32,               /**< GPR Interrupt. Used to notify cores on exception condition while boot. */
  INT_DAP                      = 33,               /**< DAP Interrupt */
  INT_SDMA1                    = 34,               /**< AND of all 48 SDMA interrupts (events) from all the channels */
  INT_GPU                      = 35,               /**< GPU Interrupt */
  INT_SNVS                     = 36,               /**< ON-OFF button press shorter than 5 seconds (pulse event) */
  INT_LCDIF                    = 37,               /**< LCDIF Sync Interrupt */
  INT_SPDIF1                   = 38,               /**< SPDIF1 Interrupt */
  INT_H264                     = 39,               /**< h264 Decoder Interrupt */
  INT_VPUDMA                   = 40,               /**< VPU DMA Interrupt */
  INT_QOS                      = 41,               /**< QOS interrupt */
  INT_WDOG3                    = 42,               /**< Watchdog Timer reset */
  INT_HS_CP1                   = 43,               /**< HS Interrupt Request */
  INT_APBHDMA                  = 44,               /**< GPMI operation channel 0-3 description complete interrupt */
  INT_SPDIF2                   = 45,               /**< SPDIF2 Interrupt */
  INT_BCH                      = 46,               /**< BCH operation complete interrupt */
  INT_GPMI                     = 47,               /**< GPMI operation TIMEOUT ERROR interrupt */
  INT_HDMI_IRQ0                = 48,               /**< HDMI Interrupt 0 */
  INT_HDMI_IRQ1                = 49,               /**< HDMI Interrupt 1 */
  INT_HDMI_IRQ2                = 50,               /**< HDMI Interrupt 2 */
  INT_SNVS_Consolidated        = 51,               /**< SRTC Consolidated Interrupt. Non TZ. */
  INT_SNVS_Security            = 52,               /**< SRTC Security Interrupt. TZ. */
  INT_CSU                      = 53,               /**< CSU Interrupt Request. Indicates to the processor that one or more alarm inputs were asserted. */
  INT_USDHC1                   = 54,               /**< uSDHC1 Enhanced SDHC Interrupt Request */
  INT_USDHC2                   = 55,               /**< uSDHC2 Enhanced SDHC Interrupt Request */
  INT_DDC                      = 56,               /**< DC8000 Display Controller IRQ */
  INT_DTRC                     = 57,               /**< DTRC interrupt */
  INT_UART1                    = 58,               /**< UART-1 ORed interrupt */
  INT_UART2                    = 59,               /**< UART-2 ORed interrupt */
  INT_UART3                    = 60,               /**< UART-3 ORed interrupt */
  INT_UART4                    = 61,               /**< UART-4 ORed interrupt */
  INT_VP9                      = 62,               /**< VP9 Decoder interrupt */
  INT_ECSPI1                   = 63,               /**< ECSPI1 interrupt request line to the core. */
  INT_ECSPI2                   = 64,               /**< ECSPI2 interrupt request line to the core. */
  INT_ECSPI3                   = 65,               /**< ECSPI3 interrupt request line to the core. */
  INT_MIPI_DSI                 = 66,               /**< DSI Interrupt */
  INT_I2C1                     = 67,               /**< I2C-1 Interrupt */
  INT_I2C2                     = 68,               /**< I2C-2 Interrupt */
  INT_I2C3                     = 69,               /**< I2C-3 Interrupt */
  INT_I2C4                     = 70,               /**< I2C-4 Interrupt */
  INT_RDC                      = 71,               /**< RDC interrupt */
  INT_USB1                     = 72,               /**< USB1 Interrupt */
  INT_USB2                     = 73,               /**< USB1 Interrupt */
  INT_CSI1                     = 74,               /**< CSI1 interrupt */
  INT_CSI2                     = 75,               /**< CSI2 interrupt */
  INT_MIPI_CSI1                = 76,               /**< MIPI-CSI-1 Interrupt */
  INT_MIPI_CSI2                = 77,               /**< MIPI-CSI-2 Interrupt */
  INT_GPT6                     = 78,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_SCTR_IRQ0                = 79,               /**< ISO7816IP Interrupt 0 */
  INT_SCTR_IRQ1                = 80,               /**< ISO7816IP Interrupt 1 */
  INT_TEMPMON                  = 81,               /**< TempSensor (Temperature alarm). */
  INT_I2S3                     = 82,               /**< SAI3 Receive / Transmit Interrupt */
  INT_GPT5                     = 83,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT4                     = 84,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT3                     = 85,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT2                     = 86,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT1                     = 87,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPIO1_INT7               = 88,               /**< Active HIGH Interrupt from INT7 from GPIO */
  INT_GPIO1_INT6               = 89,               /**< Active HIGH Interrupt from INT6 from GPIO */
  INT_GPIO1_INT5               = 90,               /**< Active HIGH Interrupt from INT5 from GPIO */
  INT_GPIO1_INT4               = 91,               /**< Active HIGH Interrupt from INT4 from GPIO */
  INT_GPIO1_INT3               = 92,               /**< Active HIGH Interrupt from INT3 from GPIO */
  INT_GPIO1_INT2               = 93,               /**< Active HIGH Interrupt from INT2 from GPIO */
  INT_GPIO1_INT1               = 94,               /**< Active HIGH Interrupt from INT1 from GPIO */
  INT_GPIO1_INT0               = 95,               /**< Active HIGH Interrupt from INT0 from GPIO */
  INT_GPIO1_Combined_0_15      = 96,               /**< Combined interrupt indication for GPIO1 signal 0 throughout 15 */
  INT_GPIO1_Combined_16_31     = 97,               /**< Combined interrupt indication for GPIO1 signal 16 throughout 31 */
  INT_GPIO2_Combined_0_15      = 98,               /**< Combined interrupt indication for GPIO2 signal 0 throughout 15 */
  INT_GPIO2_Combined_16_31     = 99,               /**< Combined interrupt indication for GPIO2 signal 16 throughout 31 */
  INT_GPIO3_Combined_0_15      = 100,              /**< Combined interrupt indication for GPIO3 signal 0 throughout 15 */
  INT_GPIO3_Combined_16_31     = 101,              /**< Combined interrupt indication for GPIO3 signal 16 throughout 31 */
  INT_GPIO4_Combined_0_15      = 102,              /**< Combined interrupt indication for GPIO4 signal 0 throughout 15 */
  INT_GPIO4_Combined_16_31     = 103,              /**< Combined interrupt indication for GPIO4 signal 16 throughout 31 */
  INT_GPIO5_Combined_0_15      = 104,              /**< Combined interrupt indication for GPIO5 signal 0 throughout 15 */
  INT_GPIO5_Combined_16_31     = 105,              /**< Combined interrupt indication for GPIO5 signal 16 throughout 31 */
  INT_PCIE_CTRL2_IRQ0          = 106,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL2_IRQ1          = 107,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL2_IRQ2          = 108,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL2_IRQ3          = 109,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_WDOG1                    = 110,              /**< Watchdog Timer reset */
  INT_WDOG2                    = 111,              /**< Watchdog Timer reset */
  INT_PCIE_CTRL2               = 112,              /**< Channels [63:32] interrupts requests */
  INT_PWM1                     = 113,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM2                     = 114,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM3                     = 115,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM4                     = 116,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_CCM_IRQ1                 = 117,              /**< CCM, Interrupt Request 1 */
  INT_CCM_IRQ2                 = 118,              /**< CCM, Interrupt Request 2 */
  INT_GPC                      = 119,              /**< GPC Interrupt Request 1 */
  INT_MU_A53                   = 120,              /**< Interrupt to A53 */
  INT_SRC                      = 121,              /**< SRC interrupt request */
  INT_I2S5                     = 122,              /**< SAI5/6 Receive / Transmit Interrupt */
  INT_RTIC                     = 123,              /**< RTIC Interrupt */
  INT_CPU_PerformanceUnit      = 124,              /**< Performance Unit Interrupts from Cheetah (interrnally: PMUIRQ[n] */
  INT_CPU_CTI_Trigger          = 125,              /**< CTI trigger outputs (internal: nCTIIRQ[n] */
  INT_SRC_Combined             = 126,              /**< Combined CPU wdog interrupts (4x) out of SRC. */
  INT_I2S1                     = 127,              /**< SAI1 Receive / Transmit Interrupt */
  INT_I2S2                     = 128,              /**< SAI2 Receive / Transmit Interrupt */
  INT_MU_M4                    = 129,              /**< Interrupt to M4 */
  INT_DDR_PerformanceMonitor   = 130,              /**< ddr Interrupt for performance monitor */
  INT_DDR                      = 131,              /**< ddr Interrupt */
  INT_I2S4                     = 132,              /**< SAI4 Receive / Transmit Interrupt */
  INT_CPU_Error_AXI            = 133,              /**< CPU Error indicator for AXI transaction with a write response error condition */
  INT_CPU_Error_L2RAM          = 134,              /**< CPU Error indicator for L2 RAM double-bit ECC error */
  INT_SDMA2                    = 135,              /**< AND of all 48 SDMA interrupts (events) from all the channels */
  INT_Reserved136              = 136,              /**< Reserved */
  INT_CAAM_IRQ0                = 137,              /**< CAAM interrupt queue for JQ */
  INT_CAAM_IRQ1                = 138,              /**< CAAM interrupt queue for JQ */
  INT_QSPI                     = 139,              /**< QSPI Interrupt */
  INT_TZASC                    = 140,              /**< TZASC (PL380) interrupt */
  INT_Reserved141              = 141,              /**< Reserved */
  INT_Reserved142              = 142,              /**< Reserved */
  INT_Reserved143              = 143,              /**< Reserved */
  INT_PERFMON1                 = 144,              /**< General Interrupt */
  INT_PERFMON2                 = 145,              /**< General Interrupt */
  INT_CAAM_IRQ2                = 146,              /**< CAAM interrupt queue for JQ */
  INT_CAAM_ERROR               = 147,              /**< Recoverable error interrupt */
  INT_HS_CP0                   = 148,              /**< HS Interrupt Request */
  INT_HEVC                     = 149,              /**< HEVC interrupt */
  INT_ENET_MAC0_Rx_Tx_Done1    = 150,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  INT_ENET_MAC0_Rx_Tx_Done2    = 151,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  INT_ENET                     = 152,              /**< MAC 0 IRQ */
  INT_ENET_1588                = 153,              /**< MAC 0 1588 Timer Interrupt - synchronous */
  INT_PCIE_CTRL1_IRQ0          = 154,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL1_IRQ1          = 155,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL1_IRQ2          = 156,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_PCIE_CTRL1_IRQ3          = 157,              /**< Coming from GLUE logic, of set / reset FF, driven by PCIE signals. */
  INT_Reserved158              = 158,              /**< Reserved */
  INT_PCIE_CTRL1               = 159               /**< Channels [63:32] interrupts requests */
} IRQInterruptIndex;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */


/* ----------------------------------------------------------------------------
   -- Mapping Information
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Mapping_Information Mapping Information
 * @{
 */

/** Mapping Information */
/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_MUX_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_MUX_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00 = 0U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01 = 1U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02 = 2U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 = 3U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04 = 4U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05 = 5U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06 = 6U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07 = 7U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08 = 8U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09 = 9U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10 = 10U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11 = 11U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12 = 12U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13 = 13U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO14 = 14U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO15 = 15U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDC = 16U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDIO = 17U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD3 = 18U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD2 = 19U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD1 = 20U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD0 = 21U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TX_CTL = 22U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TXC = 23U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RX_CTL = 24U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RXC = 25U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD0 = 26U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD1 = 27U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD2 = 28U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD3 = 29U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CLK  = 30U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CMD  = 31U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA0 = 32U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA1 = 33U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA2 = 34U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA3 = 35U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA4 = 36U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA5 = 37U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA6 = 38U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA7 = 39U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_RESET_B = 40U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_STROBE = 41U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CD_B = 42U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CLK  = 43U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CMD  = 44U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA0 = 45U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA1 = 46U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA2 = 47U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA3 = 48U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_RESET_B = 49U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_WP   = 50U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_ALE = 51U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B = 52U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B = 53U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE2_B = 54U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE3_B = 55U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CLE = 56U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA00 = 57U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA01 = 58U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA02 = 59U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA03 = 60U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA04 = 61U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA05 = 62U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA06 = 63U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA07 = 64U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DQS = 65U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_RE_B = 66U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_READY_B = 67U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WE_B = 68U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WP_B = 69U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXFS = 70U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXC = 71U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD0 = 72U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD1 = 73U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD2 = 74U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD3 = 75U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_MCLK = 76U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXFS = 77U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXC = 78U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD0 = 79U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD1 = 80U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD2 = 81U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD3 = 82U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD4 = 83U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD5 = 84U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD6 = 85U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_RXD7 = 86U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXFS = 87U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXC = 88U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD0 = 89U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD1 = 90U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD2 = 91U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD3 = 92U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD4 = 93U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD5 = 94U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD6 = 95U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_TXD7 = 96U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI1_MCLK = 97U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXFS = 98U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXC = 99U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXD0 = 100U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXFS = 101U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXC = 102U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXD0 = 103U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_MCLK = 104U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXFS = 105U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXC = 106U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXD = 107U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXFS = 108U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXC = 109U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXD = 110U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_MCLK = 111U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_TX = 112U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_RX = 113U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_EXT_CLK = 114U,   /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SCLK = 115U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MOSI = 116U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MISO = 117U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SS0 = 118U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SCLK = 119U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MOSI = 120U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MISO = 121U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SS0 = 122U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SCL = 123U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SDA = 124U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SCL = 125U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SDA = 126U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SCL = 127U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SDA = 128U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SCL = 129U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SDA = 130U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_RXD = 131U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_TXD = 132U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_RXD = 133U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_TXD = 134U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_RXD = 135U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_TXD = 136U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_RXD = 137U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_TXD = 138U,       /**< IOMUXC SW_MUX_CTL_PAD index */
} iomuxc_sw_mux_ctl_pad_t;

/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_PAD_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_PAD_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_TEST_MODE = 0U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE0 = 1U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE1 = 2U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_MOD = 3U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B = 4U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDI = 5U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TMS = 6U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TCK = 7U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDO = 8U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_RTC      = 9U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_STBY_REQ = 10U,    /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_ON_REQ = 11U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ONOFF    = 12U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_POR_B    = 13U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_RTC_RESET_B = 14U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00 = 15U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01 = 16U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02 = 17U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 = 18U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04 = 19U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05 = 20U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06 = 21U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07 = 22U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08 = 23U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09 = 24U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10 = 25U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11 = 26U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12 = 27U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13 = 28U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO14 = 29U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO15 = 30U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDC = 31U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDIO = 32U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD3 = 33U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD2 = 34U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD1 = 35U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD0 = 36U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TX_CTL = 37U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TXC = 38U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RX_CTL = 39U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RXC = 40U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD0 = 41U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD1 = 42U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD2 = 43U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD3 = 44U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CLK  = 45U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CMD  = 46U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA0 = 47U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA1 = 48U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA2 = 49U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA3 = 50U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA4 = 51U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA5 = 52U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA6 = 53U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA7 = 54U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_RESET_B = 55U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_STROBE = 56U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CD_B = 57U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CLK  = 58U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CMD  = 59U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA0 = 60U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA1 = 61U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA2 = 62U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA3 = 63U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_RESET_B = 64U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_WP   = 65U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_ALE = 66U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B = 67U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B = 68U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE2_B = 69U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE3_B = 70U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CLE = 71U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA00 = 72U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA01 = 73U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA02 = 74U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA03 = 75U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA04 = 76U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA05 = 77U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA06 = 78U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA07 = 79U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DQS = 80U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_RE_B = 81U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_READY_B = 82U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WE_B = 83U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WP_B = 84U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXFS = 85U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXC = 86U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD0 = 87U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD1 = 88U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD2 = 89U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD3 = 90U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_MCLK = 91U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXFS = 92U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXC = 93U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD0 = 94U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD1 = 95U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD2 = 96U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD3 = 97U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD4 = 98U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD5 = 99U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD6 = 100U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_RXD7 = 101U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXFS = 102U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXC = 103U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD0 = 104U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD1 = 105U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD2 = 106U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD3 = 107U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD4 = 108U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD5 = 109U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD6 = 110U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_TXD7 = 111U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI1_MCLK = 112U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXFS = 113U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXC = 114U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXD0 = 115U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXFS = 116U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXC = 117U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXD0 = 118U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_MCLK = 119U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXFS = 120U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXC = 121U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXD = 122U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXFS = 123U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXC = 124U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXD = 125U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_MCLK = 126U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_TX = 127U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_RX = 128U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_EXT_CLK = 129U,   /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SCLK = 130U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MOSI = 131U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MISO = 132U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SS0 = 133U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SCLK = 134U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MOSI = 135U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MISO = 136U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SS0 = 137U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SCL = 138U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SDA = 139U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SCL = 140U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SDA = 141U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SCL = 142U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SDA = 143U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SCL = 144U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SDA = 145U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_RXD = 146U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_TXD = 147U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_RXD = 148U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_TXD = 149U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_RXD = 150U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_TXD = 151U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_RXD = 152U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_TXD = 153U,       /**< IOMUXC SW_PAD_CTL_PAD index */
} iomuxc_sw_pad_ctl_pad_t;

/* @} */

/*!
 * @brief Enumeration for the IOMUXC select input
 *
 * Defines the enumeration for the IOMUXC select input collections.
 */
typedef enum _iomuxc_select_input
{
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 0U,      /**< IOMUXC select input index */
    kIOMUXC_ENET1_MDIO_SELECT_INPUT = 1U,          /**< IOMUXC select input index */
    kIOMUXC_SAI1_RX_SYNC_SELECT_INPUT = 2U,        /**< IOMUXC select input index */
    kIOMUXC_SAI1_TX_BCLK_SELECT_INPUT = 3U,        /**< IOMUXC select input index */
    kIOMUXC_SAI1_TX_SYNC_SELECT_INPUT = 4U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_BCLK_SELECT_INPUT = 5U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD0_SELECT_INPUT  = 6U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD1_SELECT_INPUT  = 7U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD2_SELECT_INPUT  = 8U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RXD3_SELECT_INPUT  = 9U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_SYNC_SELECT_INPUT = 10U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_BCLK_SELECT_INPUT = 11U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_SYNC_SELECT_INPUT = 12U,       /**< IOMUXC select input index */
    kIOMUXC_UART1_RTS_B_SELECT_INPUT = 13U,        /**< IOMUXC select input index */
    kIOMUXC_UART1_RXD_SELECT_INPUT  = 14U,         /**< IOMUXC select input index */
    kIOMUXC_UART2_RTS_B_SELECT_INPUT = 15U,        /**< IOMUXC select input index */
    kIOMUXC_UART2_RXD_SELECT_INPUT  = 16U,         /**< IOMUXC select input index */
    kIOMUXC_UART3_RTS_B_SELECT_INPUT = 17U,        /**< IOMUXC select input index */
    kIOMUXC_UART3_RXD_SELECT_INPUT  = 18U,         /**< IOMUXC select input index */
    kIOMUXC_UART4_RTS_B_SELECT_INPUT = 19U,        /**< IOMUXC select input index */
    kIOMUXC_UART4_RXD_SELECT_INPUT  = 20U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_RX_BCLK_SELECT_INPUT = 21U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_RXD0_SELECT_INPUT  = 22U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_RX_SYNC_SELECT_INPUT = 23U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_TX_BCLK_SELECT_INPUT = 24U,       /**< IOMUXC select input index */
    kIOMUXC_SAI6_TX_SYNC_SELECT_INPUT = 25U,       /**< IOMUXC select input index */
    kIOMUXC_PCIE1_CLKREQ_B_SELECT_INPUT = 26U,     /**< IOMUXC select input index */
    kIOMUXC_PCIE2_CLKREQ_B_SELECT_INPUT = 27U,     /**< IOMUXC select input index */
    kIOMUXC_SAI5_MCLK_SELECT_INPUT  = 28U,         /**< IOMUXC select input index */
    kIOMUXC_SAI6_MCLK_SELECT_INPUT  = 29U,         /**< IOMUXC select input index */
} iomuxc_select_input_t;


#define CCM_CCGR_IDX_DVFS           0
#define CCM_CCGR_IDX_ANAMIX         1
#define CCM_CCGR_IDX_CPU            2
#define CCM_CCGR_IDX_CSU            3
#define CCM_CCGR_IDX_DEBUG          4
#define CCM_CCGR_IDX_DDR1           5
#define CCM_CCGR_IDX_RESERVED       6
#define CCM_CCGR_IDX_ECSPI1         7
#define CCM_CCGR_IDX_ECSPI2         8
#define CCM_CCGR_IDX_ECSPI3         9
#define CCM_CCGR_IDX_ENET1         10
#define CCM_CCGR_IDX_GPIO1         11
#define CCM_CCGR_IDX_GPIO2         12
#define CCM_CCGR_IDX_GPIO3         13
#define CCM_CCGR_IDX_GPIO4         14
#define CCM_CCGR_IDX_GPIO5         15
#define CCM_CCGR_IDX_GPT1          16
#define CCM_CCGR_IDX_GPT2          17
#define CCM_CCGR_IDX_GPT3          18
#define CCM_CCGR_IDX_GPT4          19
#define CCM_CCGR_IDX_GPT5          20
#define CCM_CCGR_IDX_GPT6          21
#define CCM_CCGR_IDX_HS            22
#define CCM_CCGR_IDX_I2C1          23
#define CCM_CCGR_IDX_I2C2          24
#define CCM_CCGR_IDX_I2C3          25
#define CCM_CCGR_IDX_I2C4          26
#define CCM_CCGR_IDX_IOMUX         27
#define CCM_CCGR_IDX_IOMUX1        28
#define CCM_CCGR_IDX_IOMUX2        29
#define CCM_CCGR_IDX_IOMUX3        30
#define CCM_CCGR_IDX_IOMUX4        31
#define CCM_CCGR_IDX_M4            32
#define CCM_CCGR_IDX_MU            33
#define CCM_CCGR_IDX_OCOTP         34
#define CCM_CCGR_IDX_OCRAM         35
#define CCM_CCGR_IDX_OCRAM_S       36
#define CCM_CCGR_IDX_PCIE          37
#define CCM_CCGR_IDX_PERFMON1      38
#define CCM_CCGR_IDX_PERFMON2      39
#define CCM_CCGR_IDX_PWM1          40
#define CCM_CCGR_IDX_PWM2          41
#define CCM_CCGR_IDX_PWM3          42
#define CCM_CCGR_IDX_PWM4          43
#define CCM_CCGR_IDX_QOS           44
#define CCM_CCGR_IDX_DISMIX        45
#define CCM_CCGR_IDX_MEGAMIX       46
#define CCM_CCGR_IDX_QSPI          47
#define CCM_CCGR_IDX_NAND          48
#define CCM_CCGR_IDX_RDC           49
#define CCM_CCGR_IDX_ROM           50
#define CCM_CCGR_IDX_SAI1          51
#define CCM_CCGR_IDX_SAI2          52
#define CCM_CCGR_IDX_SAI3          53
#define CCM_CCGR_IDX_SAI4          54
#define CCM_CCGR_IDX_SAI5          55
#define CCM_CCGR_IDX_SAI6          56
#define CCM_CCGR_IDX_SCTR          57
#define CCM_CCGR_IDX_SDMA1         58
#define CCM_CCGR_IDX_SDMA2         59
#define CCM_CCGR_IDX_SEC_DEBUG     60
#define CCM_CCGR_IDX_SEMA1         61
#define CCM_CCGR_IDX_SEMA2         62
#define CCM_CCGR_IDX_SIM_DISPLAY   63
#define CCM_CCGR_IDX_SIM_ENET      64
#define CCM_CCGR_IDX_SIM_M         65
#define CCM_CCGR_IDX_SIM_MAIN      66
#define CCM_CCGR_IDX_SIM_S         67
#define CCM_CCGR_IDX_SIM_WAKEUP    68
#define CCM_CCGR_IDX_SIM_USB       69
#define CCM_CCGR_IDX_SIM_VPU       70
#define CCM_CCGR_IDX_SNVS          71
#define CCM_CCGR_IDX_TRACE         72
#define CCM_CCGR_IDX_UART1         73
#define CCM_CCGR_IDX_UART2         74
#define CCM_CCGR_IDX_UART3         75
#define CCM_CCGR_IDX_UART4         76
#define CCM_CCGR_IDX_USB_CTRL1     77
#define CCM_CCGR_IDX_USB_CTRL2     78
#define CCM_CCGR_IDX_USB_PHY1      79
#define CCM_CCGR_IDX_USB_PHY2      80
#define CCM_CCGR_IDX_USDHC1        81
#define CCM_CCGR_IDX_USDHC2        82
#define CCM_CCGR_IDX_WDOG1         83
#define CCM_CCGR_IDX_WDOG2         84
#define CCM_CCGR_IDX_WDOG3         85
#define CCM_CCGR_IDX_VA53          86
#define CCM_CCGR_IDX_GPU           87
#define CCM_CCGR_IDX_HEVC          88
#define CCM_CCGR_IDX_AVC           89
#define CCM_CCGR_IDX_VP9           90
#define CCM_CCGR_IDX_HEVC_INTER    91
#define CCM_CCGR_IDX_GIC           92
#define CCM_CCGR_IDX_DISPLAY       93
#define CCM_CCGR_IDX_HDMI          94
#define CCM_CCGR_IDX_HDMI_PHY      95
#define CCM_CCGR_IDX_XTALOSC       96
#define CCM_CCGR_IDX_PLL           97
#define CCM_CCGR_IDX_TEMPSENSOR    98
#define CCM_CCGR_IDX_VPU_DEC       99
#define CCM_CCGR_IDX_PCIE2        100
#define CCM_CCGR_IDX_MIPI_CSI1    101
#define CCM_CCGR_IDX_MIPI_CSI2    102

#define CCM_CCGR_DVFS         CCM_CCGR_REG(CCM_BASE_PTR,   0)
#define CCM_CCGR_ANAMIX       CCM_CCGR_REG(CCM_BASE_PTR,   1)
#define CCM_CCGR_CPU          CCM_CCGR_REG(CCM_BASE_PTR,   2)
#define CCM_CCGR_CSU          CCM_CCGR_REG(CCM_BASE_PTR,   3)
#define CCM_CCGR_DEBUG        CCM_CCGR_REG(CCM_BASE_PTR,   4)
#define CCM_CCGR_DDR1         CCM_CCGR_REG(CCM_BASE_PTR,   5)
#define CCM_CCGR_RESERVED     CCM_CCGR_REG(CCM_BASE_PTR,   6)
#define CCM_CCGR_ECSPI1       CCM_CCGR_REG(CCM_BASE_PTR,   7)
#define CCM_CCGR_ECSPI2       CCM_CCGR_REG(CCM_BASE_PTR,   8)
#define CCM_CCGR_ECSPI3       CCM_CCGR_REG(CCM_BASE_PTR,   9)
#define CCM_CCGR_ENET1        CCM_CCGR_REG(CCM_BASE_PTR,  10)
#define CCM_CCGR_GPIO1        CCM_CCGR_REG(CCM_BASE_PTR,  11)
#define CCM_CCGR_GPIO2        CCM_CCGR_REG(CCM_BASE_PTR,  12)
#define CCM_CCGR_GPIO3        CCM_CCGR_REG(CCM_BASE_PTR,  13)
#define CCM_CCGR_GPIO4        CCM_CCGR_REG(CCM_BASE_PTR,  14)
#define CCM_CCGR_GPIO5        CCM_CCGR_REG(CCM_BASE_PTR,  15)
#define CCM_CCGR_GPT1         CCM_CCGR_REG(CCM_BASE_PTR,  16)
#define CCM_CCGR_GPT2         CCM_CCGR_REG(CCM_BASE_PTR,  17)
#define CCM_CCGR_GPT3         CCM_CCGR_REG(CCM_BASE_PTR,  18)
#define CCM_CCGR_GPT4         CCM_CCGR_REG(CCM_BASE_PTR,  19)
#define CCM_CCGR_GPT5         CCM_CCGR_REG(CCM_BASE_PTR,  20)
#define CCM_CCGR_GPT6         CCM_CCGR_REG(CCM_BASE_PTR,  21)
#define CCM_CCGR_HS           CCM_CCGR_REG(CCM_BASE_PTR,  22)
#define CCM_CCGR_I2C1         CCM_CCGR_REG(CCM_BASE_PTR,  23)
#define CCM_CCGR_I2C2         CCM_CCGR_REG(CCM_BASE_PTR,  24)
#define CCM_CCGR_I2C3         CCM_CCGR_REG(CCM_BASE_PTR,  25)
#define CCM_CCGR_I2C4         CCM_CCGR_REG(CCM_BASE_PTR,  26)
#define CCM_CCGR_IOMUX        CCM_CCGR_REG(CCM_BASE_PTR,  27)
#define CCM_CCGR_IOMUX1       CCM_CCGR_REG(CCM_BASE_PTR,  28)
#define CCM_CCGR_IOMUX2       CCM_CCGR_REG(CCM_BASE_PTR,  29)
#define CCM_CCGR_IOMUX3       CCM_CCGR_REG(CCM_BASE_PTR,  30)
#define CCM_CCGR_IOMUX4       CCM_CCGR_REG(CCM_BASE_PTR,  31)
#define CCM_CCGR_M4           CCM_CCGR_REG(CCM_BASE_PTR,  32)
#define CCM_CCGR_MU           CCM_CCGR_REG(CCM_BASE_PTR,  33)
#define CCM_CCGR_OCOTP        CCM_CCGR_REG(CCM_BASE_PTR,  34)
#define CCM_CCGR_OCRAM        CCM_CCGR_REG(CCM_BASE_PTR,  35)
#define CCM_CCGR_OCRAM_S      CCM_CCGR_REG(CCM_BASE_PTR,  36)
#define CCM_CCGR_PCIE         CCM_CCGR_REG(CCM_BASE_PTR,  37)
#define CCM_CCGR_PERFMON1     CCM_CCGR_REG(CCM_BASE_PTR,  38)
#define CCM_CCGR_PERFMON2     CCM_CCGR_REG(CCM_BASE_PTR,  39)
#define CCM_CCGR_PWM1         CCM_CCGR_REG(CCM_BASE_PTR,  40)
#define CCM_CCGR_PWM2         CCM_CCGR_REG(CCM_BASE_PTR,  41)
#define CCM_CCGR_PWM3         CCM_CCGR_REG(CCM_BASE_PTR,  42)
#define CCM_CCGR_PWM4         CCM_CCGR_REG(CCM_BASE_PTR,  43)
#define CCM_CCGR_QOS          CCM_CCGR_REG(CCM_BASE_PTR,  44)
#define CCM_CCGR_DISMIX       CCM_CCGR_REG(CCM_BASE_PTR,  45)
#define CCM_CCGR_MEGAMIX      CCM_CCGR_REG(CCM_BASE_PTR,  46)
#define CCM_CCGR_QSPI         CCM_CCGR_REG(CCM_BASE_PTR,  47)
#define CCM_CCGR_NAND         CCM_CCGR_REG(CCM_BASE_PTR,  48)
#define CCM_CCGR_RDC          CCM_CCGR_REG(CCM_BASE_PTR,  49)
#define CCM_CCGR_ROM          CCM_CCGR_REG(CCM_BASE_PTR,  50)
#define CCM_CCGR_SAI1         CCM_CCGR_REG(CCM_BASE_PTR,  51)
#define CCM_CCGR_SAI2         CCM_CCGR_REG(CCM_BASE_PTR,  52)
#define CCM_CCGR_SAI3         CCM_CCGR_REG(CCM_BASE_PTR,  53)
#define CCM_CCGR_SAI4         CCM_CCGR_REG(CCM_BASE_PTR,  54)
#define CCM_CCGR_SAI5         CCM_CCGR_REG(CCM_BASE_PTR,  55)
#define CCM_CCGR_SAI6         CCM_CCGR_REG(CCM_BASE_PTR,  56)
#define CCM_CCGR_SCTR         CCM_CCGR_REG(CCM_BASE_PTR,  57)
#define CCM_CCGR_SDMA1        CCM_CCGR_REG(CCM_BASE_PTR,  58)
#define CCM_CCGR_SDMA2        CCM_CCGR_REG(CCM_BASE_PTR,  59)
#define CCM_CCGR_SEC_DEBUG    CCM_CCGR_REG(CCM_BASE_PTR,  60)
#define CCM_CCGR_SEMA1        CCM_CCGR_REG(CCM_BASE_PTR,  61)
#define CCM_CCGR_SEMA2        CCM_CCGR_REG(CCM_BASE_PTR,  62)
#define CCM_CCGR_SIM_DISPLAY  CCM_CCGR_REG(CCM_BASE_PTR,  63)
#define CCM_CCGR_SIM_ENET     CCM_CCGR_REG(CCM_BASE_PTR,  64)
#define CCM_CCGR_SIM_M        CCM_CCGR_REG(CCM_BASE_PTR,  65)
#define CCM_CCGR_SIM_MAIN     CCM_CCGR_REG(CCM_BASE_PTR,  66)
#define CCM_CCGR_SIM_S        CCM_CCGR_REG(CCM_BASE_PTR,  67)
#define CCM_CCGR_SIM_WAKEUP   CCM_CCGR_REG(CCM_BASE_PTR,  68)
#define CCM_CCGR_SIM_USB      CCM_CCGR_REG(CCM_BASE_PTR,  69)
#define CCM_CCGR_SIM_VPU      CCM_CCGR_REG(CCM_BASE_PTR,  70)
#define CCM_CCGR_SNVS         CCM_CCGR_REG(CCM_BASE_PTR,  71)
#define CCM_CCGR_TRACE        CCM_CCGR_REG(CCM_BASE_PTR,  72)
#define CCM_CCGR_UART1        CCM_CCGR_REG(CCM_BASE_PTR,  73)
#define CCM_CCGR_UART2        CCM_CCGR_REG(CCM_BASE_PTR,  74)
#define CCM_CCGR_UART3        CCM_CCGR_REG(CCM_BASE_PTR,  75)
#define CCM_CCGR_UART4        CCM_CCGR_REG(CCM_BASE_PTR,  76)
#define CCM_CCGR_USB_CTRL1    CCM_CCGR_REG(CCM_BASE_PTR,  77)
#define CCM_CCGR_USB_CTRL2    CCM_CCGR_REG(CCM_BASE_PTR,  78)
#define CCM_CCGR_USB_PHY1     CCM_CCGR_REG(CCM_BASE_PTR,  79)
#define CCM_CCGR_USB_PHY2     CCM_CCGR_REG(CCM_BASE_PTR,  80)
#define CCM_CCGR_USDHC1       CCM_CCGR_REG(CCM_BASE_PTR,  81)
#define CCM_CCGR_USDHC2       CCM_CCGR_REG(CCM_BASE_PTR,  82)
#define CCM_CCGR_WDOG1        CCM_CCGR_REG(CCM_BASE_PTR,  83)
#define CCM_CCGR_WDOG2        CCM_CCGR_REG(CCM_BASE_PTR,  84)
#define CCM_CCGR_WDOG3        CCM_CCGR_REG(CCM_BASE_PTR,  85)
#define CCM_CCGR_VA53         CCM_CCGR_REG(CCM_BASE_PTR,  86)
#define CCM_CCGR_GPU          CCM_CCGR_REG(CCM_BASE_PTR,  87)
#define CCM_CCGR_HEVC         CCM_CCGR_REG(CCM_BASE_PTR,  88)
#define CCM_CCGR_AVC          CCM_CCGR_REG(CCM_BASE_PTR,  89)
#define CCM_CCGR_VP9          CCM_CCGR_REG(CCM_BASE_PTR,  90)
#define CCM_CCGR_HEVC_INTER   CCM_CCGR_REG(CCM_BASE_PTR,  91)
#define CCM_CCGR_GIC          CCM_CCGR_REG(CCM_BASE_PTR,  92)
#define CCM_CCGR_DISPLAY      CCM_CCGR_REG(CCM_BASE_PTR,  93)
#define CCM_CCGR_HDMI         CCM_CCGR_REG(CCM_BASE_PTR,  94)
#define CCM_CCGR_HDMI_PHY     CCM_CCGR_REG(CCM_BASE_PTR,  95)
#define CCM_CCGR_XTALOSC      CCM_CCGR_REG(CCM_BASE_PTR,  96)
#define CCM_CCGR_PLL          CCM_CCGR_REG(CCM_BASE_PTR,  97)
#define CCM_CCGR_TEMPSENSOR   CCM_CCGR_REG(CCM_BASE_PTR,  98)
#define CCM_CCGR_VPU_DEC      CCM_CCGR_REG(CCM_BASE_PTR,  99)
#define CCM_CCGR_PCIE2        CCM_CCGR_REG(CCM_BASE_PTR, 100)
#define CCM_CCGR_MIPI_CSI1    CCM_CCGR_REG(CCM_BASE_PTR, 101)
#define CCM_CCGR_MIPI_CSI2    CCM_CCGR_REG(CCM_BASE_PTR, 102)



#define CCM_TARGET_ROOT_ARM_A53              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   0)
#define CCM_TARGET_ROOT_ARM_M4               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   1)
#define CCM_TARGET_ROOT_VPU_A53              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   2)
#define CCM_TARGET_ROOT_GPU_CORE             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   3)
#define CCM_TARGET_ROOT_GPU_SHADER           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   4)
#define CCM_TARGET_ROOT_MAIN_AXI             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  16)
#define CCM_TARGET_ROOT_ENET_AXI             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  17)
#define CCM_TARGET_ROOT_NAND_USDHC_BUS       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  18)
#define CCM_TARGET_ROOT_VPU_BUS              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  19)
#define CCM_TARGET_ROOT_DISPLAY_AXI          CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  20)
#define CCM_TARGET_ROOT_DISPLAY_APB          CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  21)
#define CCM_TARGET_ROOT_DISPLAY_RTRM         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  22)
#define CCM_TARGET_ROOT_USB_BUS              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  23)
#define CCM_TARGET_ROOT_GPU_AXI              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  24)
#define CCM_TARGET_ROOT_GPU_AHB              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  25)
#define CCM_TARGET_ROOT_NOC                  CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  26)
#define CCM_TARGET_ROOT_NOC_APB              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  27)
#define CCM_TARGET_ROOT_AHB                  CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  32)
#define CCM_TARGET_ROOT_IPG                  CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  33)
#define CCM_TARGET_ROOT_AUDIO_AHB            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  34)
#define CCM_TARGET_ROOT_MIPI_DSI_ESC_RX      CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  36)
#define CCM_TARGET_ROOT_DRAM_SEL_CFG         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  48)
#define CCM_TARGET_ROOT_CORE_SEL_CFG         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  49)
#define CCM_TARGET_ROOT_DRAM_ALT             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  64)
#define CCM_TARGET_ROOT_DRAM_APB             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  65)
#define CCM_TARGET_ROOT_VPU_G1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  66)
#define CCM_TARGET_ROOT_VPU_G2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  67)
#define CCM_TARGET_ROOT_DISPLAY_DTRC         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  68)
#define CCM_TARGET_ROOT_DISPLAY_DC8000       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  69)
#define CCM_TARGET_ROOT_PCIE_CTRL            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  70)
#define CCM_TARGET_ROOT_PCIE_PHY             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  71)
#define CCM_TARGET_ROOT_PCIE_AUX             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  72)
#define CCM_TARGET_ROOT_DC_PIXEL             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  73)
#define CCM_TARGET_ROOT_LCDIF_PIXEL          CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  74)
#define CCM_TARGET_ROOT_SAI1                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  75)
#define CCM_TARGET_ROOT_SAI2                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  76)
#define CCM_TARGET_ROOT_SAI3                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  77)
#define CCM_TARGET_ROOT_SAI4                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  78)
#define CCM_TARGET_ROOT_SAI5                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  79)
#define CCM_TARGET_ROOT_SAI6                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  80)
#define CCM_TARGET_ROOT_SPDIF1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  81)
#define CCM_TARGET_ROOT_SPDIF2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  82)
#define CCM_TARGET_ROOT_ENET_REF             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  83)
#define CCM_TARGET_ROOT_ENET_TIMER           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  84)
#define CCM_TARGET_ROOT_ENET_PHY_REF         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  85)
#define CCM_TARGET_ROOT_NAND                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  86)
#define CCM_TARGET_ROOT_QSPI                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  87)
#define CCM_TARGET_ROOT_USDHC1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  88)
#define CCM_TARGET_ROOT_USDHC2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  89)
#define CCM_TARGET_ROOT_I2C1                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  90)
#define CCM_TARGET_ROOT_I2C2                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  91)
#define CCM_TARGET_ROOT_I2C3                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  92)
#define CCM_TARGET_ROOT_I2C4                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  93)
#define CCM_TARGET_ROOT_UART1                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  94)
#define CCM_TARGET_ROOT_UART2                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  95)
#define CCM_TARGET_ROOT_UART3                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  96)
#define CCM_TARGET_ROOT_UART4                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  97)
#define CCM_TARGET_ROOT_USB_CORE_REF         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  98)
#define CCM_TARGET_ROOT_USB_PHY_REF          CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  99)
#define CCM_TARGET_ROOT_GIC                  CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 100)
#define CCM_TARGET_ROOT_ECSPI1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 101)
#define CCM_TARGET_ROOT_ECSPI2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 102)
#define CCM_TARGET_ROOT_PWM1                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 103)
#define CCM_TARGET_ROOT_PWM2                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 104)
#define CCM_TARGET_ROOT_PWM3                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 105)
#define CCM_TARGET_ROOT_PWM4                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 106)
#define CCM_TARGET_ROOT_GPT1                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 107)
#define CCM_TARGET_ROOT_GPT2                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 108)
#define CCM_TARGET_ROOT_GPT3                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 109)
#define CCM_TARGET_ROOT_GPT4                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 110)
#define CCM_TARGET_ROOT_GPT5                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 111)
#define CCM_TARGET_ROOT_GPT6                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 112)
#define CCM_TARGET_ROOT_TRACE                CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 113)
#define CCM_TARGET_ROOT_WDOG                 CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 114)
#define CCM_TARGET_ROOT_WRCLK                CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 115)
#define CCM_TARGET_ROOT_IPP_DO_CLKO1         CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 116)
#define CCM_TARGET_ROOT_IPP_DO_CLKO2         CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 117)
#define CCM_TARGET_ROOT_MIPI_DSI_CORE        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 118)
#define CCM_TARGET_ROOT_MIPI_DSI_PHY_REF     CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 119)
#define CCM_TARGET_ROOT_MIPI_DSI_DBI         CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 120)
#define CCM_TARGET_ROOT_OLD_MIPI_DSI_ESC     CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 121)
#define CCM_TARGET_ROOT_MIPI_CSI1_CORE       CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 122)
#define CCM_TARGET_ROOT_MIPI_CSI1_PHY_REF    CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 123)
#define CCM_TARGET_ROOT_MIPI_CSI1_ESC        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 124)
#define CCM_TARGET_ROOT_MIPI_CSI2_CORE       CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 125)
#define CCM_TARGET_ROOT_MIPI_CSI2_PHY_REF    CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 126)
#define CCM_TARGET_ROOT_MIPI_CSI2_ESC        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 127)
#define CCM_TARGET_ROOT_PCIE2_CTRL           CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 128)
#define CCM_TARGET_ROOT_PCIE2_PHY            CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 129)
#define CCM_TARGET_ROOT_PCIE2_AUX            CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 130)
#define CCM_TARGET_ROOT_ECSPI3               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 131)
#define CCM_TARGET_ROOT_OLD_MIPI_DSI_ESC_RX  CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 132)
#define CCM_TARGET_ROOT_DISPLAY_HDMI         CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 133)
#define CCM_TARGET_ROOT_RESERVED_CLK0        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 134)
#define CCM_TARGET_ROOT_RESERVED_CLK1        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 135)
#define CCM_TARGET_ROOT_RESERVED_CLK2        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 136)
#define CCM_TARGET_ROOT_RESERVED_CLK3        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 137)
#define CCM_TARGET_ROOT_RESERVED_CLK4        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 138)
#define CCM_TARGET_ROOT_RESERVED_CLK5        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 139)
#define CCM_TARGET_ROOT_RESERVED_CLK6        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 140)
#define CCM_TARGET_ROOT_RESERVED_CLK7        CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 141)


/*!
 * @}
 */ /* end of group Mapping_Information */


/* ----------------------------------------------------------------------------
   -- Peripheral type defines
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_defines Peripheral type defines
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- AIPSTZ
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Peripheral AIPSTZ
 * @{
 */

/** AIPSTZ - Peripheral register structure */
typedef struct AIPSTZ_MemMap {
  uint32_t MPR;                                    /**< MPR, offset: 0x0 */
  uint8_t RESERVED_0[60];
  uint32_t OPACR;                                  /**< OPACR, offset: 0x40 */
  uint32_t OPACR1;                                 /**< OPACR1, offset: 0x44 */
  uint32_t OPACR2;                                 /**< OPACR2, offset: 0x48 */
  uint32_t OPACR3;                                 /**< OPACR3, offset: 0x4C */
  uint32_t OPACR4;                                 /**< OPACR4, offset: 0x50 */
} volatile *AIPSTZ_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register accessors */
#define AIPSTZ_MPR_REG(base)                     ((base)->MPR)
#define AIPSTZ_OPACR_REG(base)                   ((base)->OPACR)
#define AIPSTZ_OPACR1_REG(base)                  ((base)->OPACR1)
#define AIPSTZ_OPACR2_REG(base)                  ((base)->OPACR2)
#define AIPSTZ_OPACR3_REG(base)                  ((base)->OPACR3)
#define AIPSTZ_OPACR4_REG(base)                  ((base)->OPACR4)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AIPSTZ Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Masks AIPSTZ Register Masks
 * @{
 */

/*! @name MPR - MPR */
/*! @{ */
#define AIPSTZ_MPR_MPROT5_MASK                   (0xF00U)
#define AIPSTZ_MPR_MPROT5_SHIFT                  (8U)
#define AIPSTZ_MPR_MPROT5(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT5_SHIFT)) & AIPSTZ_MPR_MPROT5_MASK)
#define AIPSTZ_MPR_MPROT3_MASK                   (0xF0000U)
#define AIPSTZ_MPR_MPROT3_SHIFT                  (16U)
#define AIPSTZ_MPR_MPROT3(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT3_SHIFT)) & AIPSTZ_MPR_MPROT3_MASK)
#define AIPSTZ_MPR_MPROT2_MASK                   (0xF00000U)
#define AIPSTZ_MPR_MPROT2_SHIFT                  (20U)
#define AIPSTZ_MPR_MPROT2(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT2_SHIFT)) & AIPSTZ_MPR_MPROT2_MASK)
#define AIPSTZ_MPR_MPROT1_MASK                   (0xF000000U)
#define AIPSTZ_MPR_MPROT1_SHIFT                  (24U)
#define AIPSTZ_MPR_MPROT1(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT1_SHIFT)) & AIPSTZ_MPR_MPROT1_MASK)
#define AIPSTZ_MPR_MPROT0_MASK                   (0xF0000000U)
#define AIPSTZ_MPR_MPROT0_SHIFT                  (28U)
#define AIPSTZ_MPR_MPROT0(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT0_SHIFT)) & AIPSTZ_MPR_MPROT0_MASK)
/*! @} */

/*! @name OPACR - OPACR */
/*! @{ */
#define AIPSTZ_OPACR_OPAC7_MASK                  (0xFU)
#define AIPSTZ_OPACR_OPAC7_SHIFT                 (0U)
#define AIPSTZ_OPACR_OPAC7(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC7_SHIFT)) & AIPSTZ_OPACR_OPAC7_MASK)
#define AIPSTZ_OPACR_OPAC6_MASK                  (0xF0U)
#define AIPSTZ_OPACR_OPAC6_SHIFT                 (4U)
#define AIPSTZ_OPACR_OPAC6(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC6_SHIFT)) & AIPSTZ_OPACR_OPAC6_MASK)
#define AIPSTZ_OPACR_OPAC5_MASK                  (0xF00U)
#define AIPSTZ_OPACR_OPAC5_SHIFT                 (8U)
#define AIPSTZ_OPACR_OPAC5(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC5_SHIFT)) & AIPSTZ_OPACR_OPAC5_MASK)
#define AIPSTZ_OPACR_OPAC4_MASK                  (0xF000U)
#define AIPSTZ_OPACR_OPAC4_SHIFT                 (12U)
#define AIPSTZ_OPACR_OPAC4(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC4_SHIFT)) & AIPSTZ_OPACR_OPAC4_MASK)
#define AIPSTZ_OPACR_OPAC3_MASK                  (0xF0000U)
#define AIPSTZ_OPACR_OPAC3_SHIFT                 (16U)
#define AIPSTZ_OPACR_OPAC3(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC3_SHIFT)) & AIPSTZ_OPACR_OPAC3_MASK)
#define AIPSTZ_OPACR_OPAC2_MASK                  (0xF00000U)
#define AIPSTZ_OPACR_OPAC2_SHIFT                 (20U)
#define AIPSTZ_OPACR_OPAC2(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC2_SHIFT)) & AIPSTZ_OPACR_OPAC2_MASK)
#define AIPSTZ_OPACR_OPAC1_MASK                  (0xF000000U)
#define AIPSTZ_OPACR_OPAC1_SHIFT                 (24U)
#define AIPSTZ_OPACR_OPAC1(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC1_SHIFT)) & AIPSTZ_OPACR_OPAC1_MASK)
#define AIPSTZ_OPACR_OPAC0_MASK                  (0xF0000000U)
#define AIPSTZ_OPACR_OPAC0_SHIFT                 (28U)
#define AIPSTZ_OPACR_OPAC0(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC0_SHIFT)) & AIPSTZ_OPACR_OPAC0_MASK)
/*! @} */

/*! @name OPACR1 - OPACR1 */
/*! @{ */
#define AIPSTZ_OPACR1_OPAC15_MASK                (0xFU)
#define AIPSTZ_OPACR1_OPAC15_SHIFT               (0U)
#define AIPSTZ_OPACR1_OPAC15(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC15_SHIFT)) & AIPSTZ_OPACR1_OPAC15_MASK)
#define AIPSTZ_OPACR1_OPAC14_MASK                (0xF0U)
#define AIPSTZ_OPACR1_OPAC14_SHIFT               (4U)
#define AIPSTZ_OPACR1_OPAC14(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC14_SHIFT)) & AIPSTZ_OPACR1_OPAC14_MASK)
#define AIPSTZ_OPACR1_OPAC13_MASK                (0xF00U)
#define AIPSTZ_OPACR1_OPAC13_SHIFT               (8U)
#define AIPSTZ_OPACR1_OPAC13(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC13_SHIFT)) & AIPSTZ_OPACR1_OPAC13_MASK)
#define AIPSTZ_OPACR1_OPAC12_MASK                (0xF000U)
#define AIPSTZ_OPACR1_OPAC12_SHIFT               (12U)
#define AIPSTZ_OPACR1_OPAC12(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC12_SHIFT)) & AIPSTZ_OPACR1_OPAC12_MASK)
#define AIPSTZ_OPACR1_OPAC11_MASK                (0xF0000U)
#define AIPSTZ_OPACR1_OPAC11_SHIFT               (16U)
#define AIPSTZ_OPACR1_OPAC11(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC11_SHIFT)) & AIPSTZ_OPACR1_OPAC11_MASK)
#define AIPSTZ_OPACR1_OPAC10_MASK                (0xF00000U)
#define AIPSTZ_OPACR1_OPAC10_SHIFT               (20U)
#define AIPSTZ_OPACR1_OPAC10(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC10_SHIFT)) & AIPSTZ_OPACR1_OPAC10_MASK)
#define AIPSTZ_OPACR1_OPAC9_MASK                 (0xF000000U)
#define AIPSTZ_OPACR1_OPAC9_SHIFT                (24U)
#define AIPSTZ_OPACR1_OPAC9(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC9_SHIFT)) & AIPSTZ_OPACR1_OPAC9_MASK)
#define AIPSTZ_OPACR1_OPAC8_MASK                 (0xF0000000U)
#define AIPSTZ_OPACR1_OPAC8_SHIFT                (28U)
#define AIPSTZ_OPACR1_OPAC8(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC8_SHIFT)) & AIPSTZ_OPACR1_OPAC8_MASK)
/*! @} */

/*! @name OPACR2 - OPACR2 */
/*! @{ */
#define AIPSTZ_OPACR2_OPAC23_MASK                (0xFU)
#define AIPSTZ_OPACR2_OPAC23_SHIFT               (0U)
#define AIPSTZ_OPACR2_OPAC23(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC23_SHIFT)) & AIPSTZ_OPACR2_OPAC23_MASK)
#define AIPSTZ_OPACR2_OPAC22_MASK                (0xF0U)
#define AIPSTZ_OPACR2_OPAC22_SHIFT               (4U)
#define AIPSTZ_OPACR2_OPAC22(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC22_SHIFT)) & AIPSTZ_OPACR2_OPAC22_MASK)
#define AIPSTZ_OPACR2_OPAC21_MASK                (0xF00U)
#define AIPSTZ_OPACR2_OPAC21_SHIFT               (8U)
#define AIPSTZ_OPACR2_OPAC21(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC21_SHIFT)) & AIPSTZ_OPACR2_OPAC21_MASK)
#define AIPSTZ_OPACR2_OPAC20_MASK                (0xF000U)
#define AIPSTZ_OPACR2_OPAC20_SHIFT               (12U)
#define AIPSTZ_OPACR2_OPAC20(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC20_SHIFT)) & AIPSTZ_OPACR2_OPAC20_MASK)
#define AIPSTZ_OPACR2_OPAC19_MASK                (0xF0000U)
#define AIPSTZ_OPACR2_OPAC19_SHIFT               (16U)
#define AIPSTZ_OPACR2_OPAC19(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC19_SHIFT)) & AIPSTZ_OPACR2_OPAC19_MASK)
#define AIPSTZ_OPACR2_OPAC18_MASK                (0xF00000U)
#define AIPSTZ_OPACR2_OPAC18_SHIFT               (20U)
#define AIPSTZ_OPACR2_OPAC18(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC18_SHIFT)) & AIPSTZ_OPACR2_OPAC18_MASK)
#define AIPSTZ_OPACR2_OPAC17_MASK                (0xF000000U)
#define AIPSTZ_OPACR2_OPAC17_SHIFT               (24U)
#define AIPSTZ_OPACR2_OPAC17(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC17_SHIFT)) & AIPSTZ_OPACR2_OPAC17_MASK)
#define AIPSTZ_OPACR2_OPAC16_MASK                (0xF0000000U)
#define AIPSTZ_OPACR2_OPAC16_SHIFT               (28U)
#define AIPSTZ_OPACR2_OPAC16(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC16_SHIFT)) & AIPSTZ_OPACR2_OPAC16_MASK)
/*! @} */

/*! @name OPACR3 - OPACR3 */
/*! @{ */
#define AIPSTZ_OPACR3_OPAC31_MASK                (0xFU)
#define AIPSTZ_OPACR3_OPAC31_SHIFT               (0U)
#define AIPSTZ_OPACR3_OPAC31(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC31_SHIFT)) & AIPSTZ_OPACR3_OPAC31_MASK)
#define AIPSTZ_OPACR3_OPAC30_MASK                (0xF0U)
#define AIPSTZ_OPACR3_OPAC30_SHIFT               (4U)
#define AIPSTZ_OPACR3_OPAC30(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC30_SHIFT)) & AIPSTZ_OPACR3_OPAC30_MASK)
#define AIPSTZ_OPACR3_OPAC29_MASK                (0xF00U)
#define AIPSTZ_OPACR3_OPAC29_SHIFT               (8U)
#define AIPSTZ_OPACR3_OPAC29(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC29_SHIFT)) & AIPSTZ_OPACR3_OPAC29_MASK)
#define AIPSTZ_OPACR3_OPAC28_MASK                (0xF000U)
#define AIPSTZ_OPACR3_OPAC28_SHIFT               (12U)
#define AIPSTZ_OPACR3_OPAC28(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC28_SHIFT)) & AIPSTZ_OPACR3_OPAC28_MASK)
#define AIPSTZ_OPACR3_OPAC27_MASK                (0xF0000U)
#define AIPSTZ_OPACR3_OPAC27_SHIFT               (16U)
#define AIPSTZ_OPACR3_OPAC27(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC27_SHIFT)) & AIPSTZ_OPACR3_OPAC27_MASK)
#define AIPSTZ_OPACR3_OPAC26_MASK                (0xF00000U)
#define AIPSTZ_OPACR3_OPAC26_SHIFT               (20U)
#define AIPSTZ_OPACR3_OPAC26(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC26_SHIFT)) & AIPSTZ_OPACR3_OPAC26_MASK)
#define AIPSTZ_OPACR3_OPAC25_MASK                (0xF000000U)
#define AIPSTZ_OPACR3_OPAC25_SHIFT               (24U)
#define AIPSTZ_OPACR3_OPAC25(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC25_SHIFT)) & AIPSTZ_OPACR3_OPAC25_MASK)
#define AIPSTZ_OPACR3_OPAC24_MASK                (0xF0000000U)
#define AIPSTZ_OPACR3_OPAC24_SHIFT               (28U)
#define AIPSTZ_OPACR3_OPAC24(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC24_SHIFT)) & AIPSTZ_OPACR3_OPAC24_MASK)
/*! @} */

/*! @name OPACR4 - OPACR4 */
/*! @{ */
#define AIPSTZ_OPACR4_OPAC33_MASK                (0xF000000U)
#define AIPSTZ_OPACR4_OPAC33_SHIFT               (24U)
#define AIPSTZ_OPACR4_OPAC33(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC33_SHIFT)) & AIPSTZ_OPACR4_OPAC33_MASK)
#define AIPSTZ_OPACR4_OPAC32_MASK                (0xF0000000U)
#define AIPSTZ_OPACR4_OPAC32_SHIFT               (28U)
#define AIPSTZ_OPACR4_OPAC32(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC32_SHIFT)) & AIPSTZ_OPACR4_OPAC32_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group AIPSTZ_Register_Masks */


/* AIPSTZ - Peripheral instance base addresses */
/** Peripheral AIPSTZ1 base pointer */
#define AIPSTZ1_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x301F0000u)
/** Peripheral AIPSTZ2 base pointer */
#define AIPSTZ2_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x305F0000u)
/** Peripheral AIPSTZ3 base pointer */
#define AIPSTZ3_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x309F0000u)
/** Peripheral AIPSTZ4 base pointer */
#define AIPSTZ4_BASE_PTR                         ((AIPSTZ_MemMapPtr)0x32DF0000u)
/** Array initializer of AIPSTZ peripheral base pointers */
#define AIPSTZ_BASE_PTRS                         { AIPSTZ1_BASE_PTR, AIPSTZ2_BASE_PTR, AIPSTZ3_BASE_PTR, AIPSTZ4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register instance definitions */
/* AIPSTZ1 */
#define AIPSTZ1_MPR                              AIPSTZ_MPR_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ1_BASE_PTR)
#define AIPSTZ1_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ1_BASE_PTR)
/* AIPSTZ2 */
#define AIPSTZ2_MPR                              AIPSTZ_MPR_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ2_BASE_PTR)
#define AIPSTZ2_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ2_BASE_PTR)
/* AIPSTZ3 */
#define AIPSTZ3_MPR                              AIPSTZ_MPR_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ3_BASE_PTR)
#define AIPSTZ3_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ3_BASE_PTR)
/* AIPSTZ4 */
#define AIPSTZ4_MPR                              AIPSTZ_MPR_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR                            AIPSTZ_OPACR_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR1                           AIPSTZ_OPACR1_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR2                           AIPSTZ_OPACR2_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR3                           AIPSTZ_OPACR3_REG(AIPSTZ4_BASE_PTR)
#define AIPSTZ4_OPACR4                           AIPSTZ_OPACR4_REG(AIPSTZ4_BASE_PTR)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AIPSTZ_Peripheral */


/* ----------------------------------------------------------------------------
   -- APBH
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Peripheral APBH
 * @{
 */

/** APBH - Peripheral register structure */
typedef struct APBH_MemMap {
  uint32_t CTRL0;                                  /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x0 */
  uint32_t CTRL0_SET;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x4 */
  uint32_t CTRL0_CLR;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x8 */
  uint32_t CTRL0_TOG;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0xC */
  uint32_t CTRL1;                                  /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x10 */
  uint32_t CTRL1_SET;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x14 */
  uint32_t CTRL1_CLR;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x18 */
  uint32_t CTRL1_TOG;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x1C */
  uint32_t CTRL2;                                  /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x20 */
  uint32_t CTRL2_SET;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x24 */
  uint32_t CTRL2_CLR;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x28 */
  uint32_t CTRL2_TOG;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x2C */
  uint32_t CHANNEL_CTRL;                           /**< AHB to APBH Bridge Channel Register, offset: 0x30 */
  uint32_t CHANNEL_CTRL_SET;                       /**< AHB to APBH Bridge Channel Register, offset: 0x34 */
  uint32_t CHANNEL_CTRL_CLR;                       /**< AHB to APBH Bridge Channel Register, offset: 0x38 */
  uint32_t CHANNEL_CTRL_TOG;                       /**< AHB to APBH Bridge Channel Register, offset: 0x3C */
  uint32_t DEVSEL;                                 /**< AHB to APBH DMA Device Assignment Register, offset: 0x40 */
  uint8_t RESERVED_0[12];
  uint32_t DMA_BURST_SIZE;                         /**< AHB to APBH DMA burst size, offset: 0x50 */
  uint8_t RESERVED_1[12];
  uint32_t DEBUG;                                  /**< AHB to APBH DMA Debug Register, offset: 0x60 */
  uint8_t RESERVED_2[156];
  uint32_t CH0_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x100 */
  uint8_t RESERVED_3[12];
  uint32_t CH0_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x110 */
  uint8_t RESERVED_4[12];
  uint32_t CH0_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x120 */
  uint8_t RESERVED_5[12];
  uint32_t CH0_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x130 */
  uint8_t RESERVED_6[12];
  uint32_t CH0_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x140 */
  uint8_t RESERVED_7[12];
  uint32_t CH0_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x150 */
  uint8_t RESERVED_8[12];
  uint32_t CH0_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x160 */
  uint8_t RESERVED_9[12];
  uint32_t CH1_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x170 */
  uint8_t RESERVED_10[12];
  uint32_t CH1_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x180 */
  uint8_t RESERVED_11[12];
  uint32_t CH1_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x190 */
  uint8_t RESERVED_12[12];
  uint32_t CH1_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x1A0 */
  uint8_t RESERVED_13[12];
  uint32_t CH1_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x1B0 */
  uint8_t RESERVED_14[12];
  uint32_t CH1_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x1C0 */
  uint8_t RESERVED_15[12];
  uint32_t CH1_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x1D0 */
  uint8_t RESERVED_16[12];
  uint32_t CH2_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x1E0 */
  uint8_t RESERVED_17[12];
  uint32_t CH2_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x1F0 */
  uint8_t RESERVED_18[12];
  uint32_t CH2_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x200 */
  uint8_t RESERVED_19[12];
  uint32_t CH2_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x210 */
  uint8_t RESERVED_20[12];
  uint32_t CH2_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x220 */
  uint8_t RESERVED_21[12];
  uint32_t CH2_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x230 */
  uint8_t RESERVED_22[12];
  uint32_t CH2_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x240 */
  uint8_t RESERVED_23[12];
  uint32_t CH3_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x250 */
  uint8_t RESERVED_24[12];
  uint32_t CH3_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x260 */
  uint8_t RESERVED_25[12];
  uint32_t CH3_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x270 */
  uint8_t RESERVED_26[12];
  uint32_t CH3_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x280 */
  uint8_t RESERVED_27[12];
  uint32_t CH3_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x290 */
  uint8_t RESERVED_28[12];
  uint32_t CH3_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x2A0 */
  uint8_t RESERVED_29[12];
  uint32_t CH3_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x2B0 */
  uint8_t RESERVED_30[12];
  uint32_t CH4_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x2C0 */
  uint8_t RESERVED_31[12];
  uint32_t CH4_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x2D0 */
  uint8_t RESERVED_32[12];
  uint32_t CH4_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x2E0 */
  uint8_t RESERVED_33[12];
  uint32_t CH4_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x2F0 */
  uint8_t RESERVED_34[12];
  uint32_t CH4_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x300 */
  uint8_t RESERVED_35[12];
  uint32_t CH4_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x310 */
  uint8_t RESERVED_36[12];
  uint32_t CH4_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x320 */
  uint8_t RESERVED_37[12];
  uint32_t CH5_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x330 */
  uint8_t RESERVED_38[12];
  uint32_t CH5_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x340 */
  uint8_t RESERVED_39[12];
  uint32_t CH5_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x350 */
  uint8_t RESERVED_40[12];
  uint32_t CH5_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x360 */
  uint8_t RESERVED_41[12];
  uint32_t CH5_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x370 */
  uint8_t RESERVED_42[12];
  uint32_t CH5_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x380 */
  uint8_t RESERVED_43[12];
  uint32_t CH5_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x390 */
  uint8_t RESERVED_44[12];
  uint32_t CH6_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x3A0 */
  uint8_t RESERVED_45[12];
  uint32_t CH6_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x3B0 */
  uint8_t RESERVED_46[12];
  uint32_t CH6_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x3C0 */
  uint8_t RESERVED_47[12];
  uint32_t CH6_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x3D0 */
  uint8_t RESERVED_48[12];
  uint32_t CH6_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x3E0 */
  uint8_t RESERVED_49[12];
  uint32_t CH6_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x3F0 */
  uint8_t RESERVED_50[12];
  uint32_t CH6_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x400 */
  uint8_t RESERVED_51[12];
  uint32_t CH7_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x410 */
  uint8_t RESERVED_52[12];
  uint32_t CH7_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x420 */
  uint8_t RESERVED_53[12];
  uint32_t CH7_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x430 */
  uint8_t RESERVED_54[12];
  uint32_t CH7_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x440 */
  uint8_t RESERVED_55[12];
  uint32_t CH7_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x450 */
  uint8_t RESERVED_56[12];
  uint32_t CH7_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x460 */
  uint8_t RESERVED_57[12];
  uint32_t CH7_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x470 */
  uint8_t RESERVED_58[12];
  uint32_t CH8_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x480 */
  uint8_t RESERVED_59[12];
  uint32_t CH8_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x490 */
  uint8_t RESERVED_60[12];
  uint32_t CH8_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x4A0 */
  uint8_t RESERVED_61[12];
  uint32_t CH8_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x4B0 */
  uint8_t RESERVED_62[12];
  uint32_t CH8_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x4C0 */
  uint8_t RESERVED_63[12];
  uint32_t CH8_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x4D0 */
  uint8_t RESERVED_64[12];
  uint32_t CH8_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x4E0 */
  uint8_t RESERVED_65[12];
  uint32_t CH9_CURCMDAR;                           /**< APBH DMA Channel n Current Command Address Register, offset: 0x4F0 */
  uint8_t RESERVED_66[12];
  uint32_t CH9_NXTCMDAR;                           /**< APBH DMA Channel n Next Command Address Register, offset: 0x500 */
  uint8_t RESERVED_67[12];
  uint32_t CH9_CMD;                                /**< APBH DMA Channel n Command Register, offset: 0x510 */
  uint8_t RESERVED_68[12];
  uint32_t CH9_BAR;                                /**< APBH DMA Channel n Buffer Address Register, offset: 0x520 */
  uint8_t RESERVED_69[12];
  uint32_t CH9_SEMA;                               /**< APBH DMA Channel n Semaphore Register, offset: 0x530 */
  uint8_t RESERVED_70[12];
  uint32_t CH9_DEBUG1;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x540 */
  uint8_t RESERVED_71[12];
  uint32_t CH9_DEBUG2;                             /**< AHB to APBH DMA Channel n Debug Information, offset: 0x550 */
  uint8_t RESERVED_72[12];
  uint32_t CH10_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x560 */
  uint8_t RESERVED_73[12];
  uint32_t CH10_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x570 */
  uint8_t RESERVED_74[12];
  uint32_t CH10_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x580 */
  uint8_t RESERVED_75[12];
  uint32_t CH10_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x590 */
  uint8_t RESERVED_76[12];
  uint32_t CH10_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x5A0 */
  uint8_t RESERVED_77[12];
  uint32_t CH10_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x5B0 */
  uint8_t RESERVED_78[12];
  uint32_t CH10_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x5C0 */
  uint8_t RESERVED_79[12];
  uint32_t CH11_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x5D0 */
  uint8_t RESERVED_80[12];
  uint32_t CH11_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x5E0 */
  uint8_t RESERVED_81[12];
  uint32_t CH11_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x5F0 */
  uint8_t RESERVED_82[12];
  uint32_t CH11_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x600 */
  uint8_t RESERVED_83[12];
  uint32_t CH11_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x610 */
  uint8_t RESERVED_84[12];
  uint32_t CH11_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x620 */
  uint8_t RESERVED_85[12];
  uint32_t CH11_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x630 */
  uint8_t RESERVED_86[12];
  uint32_t CH12_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x640 */
  uint8_t RESERVED_87[12];
  uint32_t CH12_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x650 */
  uint8_t RESERVED_88[12];
  uint32_t CH12_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x660 */
  uint8_t RESERVED_89[12];
  uint32_t CH12_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x670 */
  uint8_t RESERVED_90[12];
  uint32_t CH12_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x680 */
  uint8_t RESERVED_91[12];
  uint32_t CH12_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x690 */
  uint8_t RESERVED_92[12];
  uint32_t CH12_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x6A0 */
  uint8_t RESERVED_93[12];
  uint32_t CH13_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x6B0 */
  uint8_t RESERVED_94[12];
  uint32_t CH13_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x6C0 */
  uint8_t RESERVED_95[12];
  uint32_t CH13_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x6D0 */
  uint8_t RESERVED_96[12];
  uint32_t CH13_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x6E0 */
  uint8_t RESERVED_97[12];
  uint32_t CH13_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x6F0 */
  uint8_t RESERVED_98[12];
  uint32_t CH13_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x700 */
  uint8_t RESERVED_99[12];
  uint32_t CH13_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x710 */
  uint8_t RESERVED_100[12];
  uint32_t CH14_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x720 */
  uint8_t RESERVED_101[12];
  uint32_t CH14_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x730 */
  uint8_t RESERVED_102[12];
  uint32_t CH14_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x740 */
  uint8_t RESERVED_103[12];
  uint32_t CH14_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x750 */
  uint8_t RESERVED_104[12];
  uint32_t CH14_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x760 */
  uint8_t RESERVED_105[12];
  uint32_t CH14_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x770 */
  uint8_t RESERVED_106[12];
  uint32_t CH14_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x780 */
  uint8_t RESERVED_107[12];
  uint32_t CH15_CURCMDAR;                          /**< APBH DMA Channel n Current Command Address Register, offset: 0x790 */
  uint8_t RESERVED_108[12];
  uint32_t CH15_NXTCMDAR;                          /**< APBH DMA Channel n Next Command Address Register, offset: 0x7A0 */
  uint8_t RESERVED_109[12];
  uint32_t CH15_CMD;                               /**< APBH DMA Channel n Command Register, offset: 0x7B0 */
  uint8_t RESERVED_110[12];
  uint32_t CH15_BAR;                               /**< APBH DMA Channel n Buffer Address Register, offset: 0x7C0 */
  uint8_t RESERVED_111[12];
  uint32_t CH15_SEMA;                              /**< APBH DMA Channel n Semaphore Register, offset: 0x7D0 */
  uint8_t RESERVED_112[12];
  uint32_t CH15_DEBUG1;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x7E0 */
  uint8_t RESERVED_113[12];
  uint32_t CH15_DEBUG2;                            /**< AHB to APBH DMA Channel n Debug Information, offset: 0x7F0 */
  uint8_t RESERVED_114[12];
  uint32_t VERSION;                                /**< APBH Bridge Version Register, offset: 0x800 */
} volatile *APBH_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- APBH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Accessor_Macros APBH - Register accessor macros
 * @{
 */


/* APBH - Register accessors */
#define APBH_CTRL0_REG(base)                     ((base)->CTRL0)
#define APBH_CTRL0_SET_REG(base)                 ((base)->CTRL0_SET)
#define APBH_CTRL0_CLR_REG(base)                 ((base)->CTRL0_CLR)
#define APBH_CTRL0_TOG_REG(base)                 ((base)->CTRL0_TOG)
#define APBH_CTRL1_REG(base)                     ((base)->CTRL1)
#define APBH_CTRL1_SET_REG(base)                 ((base)->CTRL1_SET)
#define APBH_CTRL1_CLR_REG(base)                 ((base)->CTRL1_CLR)
#define APBH_CTRL1_TOG_REG(base)                 ((base)->CTRL1_TOG)
#define APBH_CTRL2_REG(base)                     ((base)->CTRL2)
#define APBH_CTRL2_SET_REG(base)                 ((base)->CTRL2_SET)
#define APBH_CTRL2_CLR_REG(base)                 ((base)->CTRL2_CLR)
#define APBH_CTRL2_TOG_REG(base)                 ((base)->CTRL2_TOG)
#define APBH_CHANNEL_CTRL_REG(base)              ((base)->CHANNEL_CTRL)
#define APBH_CHANNEL_CTRL_SET_REG(base)          ((base)->CHANNEL_CTRL_SET)
#define APBH_CHANNEL_CTRL_CLR_REG(base)          ((base)->CHANNEL_CTRL_CLR)
#define APBH_CHANNEL_CTRL_TOG_REG(base)          ((base)->CHANNEL_CTRL_TOG)
#define APBH_DEVSEL_REG(base)                    ((base)->DEVSEL)
#define APBH_DMA_BURST_SIZE_REG(base)            ((base)->DMA_BURST_SIZE)
#define APBH_DEBUG_REG(base)                     ((base)->DEBUG)
#define APBH_CH0_CURCMDAR_REG(base)              ((base)->CH0_CURCMDAR)
#define APBH_CH0_NXTCMDAR_REG(base)              ((base)->CH0_NXTCMDAR)
#define APBH_CH0_CMD_REG(base)                   ((base)->CH0_CMD)
#define APBH_CH0_BAR_REG(base)                   ((base)->CH0_BAR)
#define APBH_CH0_SEMA_REG(base)                  ((base)->CH0_SEMA)
#define APBH_CH0_DEBUG1_REG(base)                ((base)->CH0_DEBUG1)
#define APBH_CH0_DEBUG2_REG(base)                ((base)->CH0_DEBUG2)
#define APBH_CH1_CURCMDAR_REG(base)              ((base)->CH1_CURCMDAR)
#define APBH_CH1_NXTCMDAR_REG(base)              ((base)->CH1_NXTCMDAR)
#define APBH_CH1_CMD_REG(base)                   ((base)->CH1_CMD)
#define APBH_CH1_BAR_REG(base)                   ((base)->CH1_BAR)
#define APBH_CH1_SEMA_REG(base)                  ((base)->CH1_SEMA)
#define APBH_CH1_DEBUG1_REG(base)                ((base)->CH1_DEBUG1)
#define APBH_CH1_DEBUG2_REG(base)                ((base)->CH1_DEBUG2)
#define APBH_CH2_CURCMDAR_REG(base)              ((base)->CH2_CURCMDAR)
#define APBH_CH2_NXTCMDAR_REG(base)              ((base)->CH2_NXTCMDAR)
#define APBH_CH2_CMD_REG(base)                   ((base)->CH2_CMD)
#define APBH_CH2_BAR_REG(base)                   ((base)->CH2_BAR)
#define APBH_CH2_SEMA_REG(base)                  ((base)->CH2_SEMA)
#define APBH_CH2_DEBUG1_REG(base)                ((base)->CH2_DEBUG1)
#define APBH_CH2_DEBUG2_REG(base)                ((base)->CH2_DEBUG2)
#define APBH_CH3_CURCMDAR_REG(base)              ((base)->CH3_CURCMDAR)
#define APBH_CH3_NXTCMDAR_REG(base)              ((base)->CH3_NXTCMDAR)
#define APBH_CH3_CMD_REG(base)                   ((base)->CH3_CMD)
#define APBH_CH3_BAR_REG(base)                   ((base)->CH3_BAR)
#define APBH_CH3_SEMA_REG(base)                  ((base)->CH3_SEMA)
#define APBH_CH3_DEBUG1_REG(base)                ((base)->CH3_DEBUG1)
#define APBH_CH3_DEBUG2_REG(base)                ((base)->CH3_DEBUG2)
#define APBH_CH4_CURCMDAR_REG(base)              ((base)->CH4_CURCMDAR)
#define APBH_CH4_NXTCMDAR_REG(base)              ((base)->CH4_NXTCMDAR)
#define APBH_CH4_CMD_REG(base)                   ((base)->CH4_CMD)
#define APBH_CH4_BAR_REG(base)                   ((base)->CH4_BAR)
#define APBH_CH4_SEMA_REG(base)                  ((base)->CH4_SEMA)
#define APBH_CH4_DEBUG1_REG(base)                ((base)->CH4_DEBUG1)
#define APBH_CH4_DEBUG2_REG(base)                ((base)->CH4_DEBUG2)
#define APBH_CH5_CURCMDAR_REG(base)              ((base)->CH5_CURCMDAR)
#define APBH_CH5_NXTCMDAR_REG(base)              ((base)->CH5_NXTCMDAR)
#define APBH_CH5_CMD_REG(base)                   ((base)->CH5_CMD)
#define APBH_CH5_BAR_REG(base)                   ((base)->CH5_BAR)
#define APBH_CH5_SEMA_REG(base)                  ((base)->CH5_SEMA)
#define APBH_CH5_DEBUG1_REG(base)                ((base)->CH5_DEBUG1)
#define APBH_CH5_DEBUG2_REG(base)                ((base)->CH5_DEBUG2)
#define APBH_CH6_CURCMDAR_REG(base)              ((base)->CH6_CURCMDAR)
#define APBH_CH6_NXTCMDAR_REG(base)              ((base)->CH6_NXTCMDAR)
#define APBH_CH6_CMD_REG(base)                   ((base)->CH6_CMD)
#define APBH_CH6_BAR_REG(base)                   ((base)->CH6_BAR)
#define APBH_CH6_SEMA_REG(base)                  ((base)->CH6_SEMA)
#define APBH_CH6_DEBUG1_REG(base)                ((base)->CH6_DEBUG1)
#define APBH_CH6_DEBUG2_REG(base)                ((base)->CH6_DEBUG2)
#define APBH_CH7_CURCMDAR_REG(base)              ((base)->CH7_CURCMDAR)
#define APBH_CH7_NXTCMDAR_REG(base)              ((base)->CH7_NXTCMDAR)
#define APBH_CH7_CMD_REG(base)                   ((base)->CH7_CMD)
#define APBH_CH7_BAR_REG(base)                   ((base)->CH7_BAR)
#define APBH_CH7_SEMA_REG(base)                  ((base)->CH7_SEMA)
#define APBH_CH7_DEBUG1_REG(base)                ((base)->CH7_DEBUG1)
#define APBH_CH7_DEBUG2_REG(base)                ((base)->CH7_DEBUG2)
#define APBH_CH8_CURCMDAR_REG(base)              ((base)->CH8_CURCMDAR)
#define APBH_CH8_NXTCMDAR_REG(base)              ((base)->CH8_NXTCMDAR)
#define APBH_CH8_CMD_REG(base)                   ((base)->CH8_CMD)
#define APBH_CH8_BAR_REG(base)                   ((base)->CH8_BAR)
#define APBH_CH8_SEMA_REG(base)                  ((base)->CH8_SEMA)
#define APBH_CH8_DEBUG1_REG(base)                ((base)->CH8_DEBUG1)
#define APBH_CH8_DEBUG2_REG(base)                ((base)->CH8_DEBUG2)
#define APBH_CH9_CURCMDAR_REG(base)              ((base)->CH9_CURCMDAR)
#define APBH_CH9_NXTCMDAR_REG(base)              ((base)->CH9_NXTCMDAR)
#define APBH_CH9_CMD_REG(base)                   ((base)->CH9_CMD)
#define APBH_CH9_BAR_REG(base)                   ((base)->CH9_BAR)
#define APBH_CH9_SEMA_REG(base)                  ((base)->CH9_SEMA)
#define APBH_CH9_DEBUG1_REG(base)                ((base)->CH9_DEBUG1)
#define APBH_CH9_DEBUG2_REG(base)                ((base)->CH9_DEBUG2)
#define APBH_CH10_CURCMDAR_REG(base)             ((base)->CH10_CURCMDAR)
#define APBH_CH10_NXTCMDAR_REG(base)             ((base)->CH10_NXTCMDAR)
#define APBH_CH10_CMD_REG(base)                  ((base)->CH10_CMD)
#define APBH_CH10_BAR_REG(base)                  ((base)->CH10_BAR)
#define APBH_CH10_SEMA_REG(base)                 ((base)->CH10_SEMA)
#define APBH_CH10_DEBUG1_REG(base)               ((base)->CH10_DEBUG1)
#define APBH_CH10_DEBUG2_REG(base)               ((base)->CH10_DEBUG2)
#define APBH_CH11_CURCMDAR_REG(base)             ((base)->CH11_CURCMDAR)
#define APBH_CH11_NXTCMDAR_REG(base)             ((base)->CH11_NXTCMDAR)
#define APBH_CH11_CMD_REG(base)                  ((base)->CH11_CMD)
#define APBH_CH11_BAR_REG(base)                  ((base)->CH11_BAR)
#define APBH_CH11_SEMA_REG(base)                 ((base)->CH11_SEMA)
#define APBH_CH11_DEBUG1_REG(base)               ((base)->CH11_DEBUG1)
#define APBH_CH11_DEBUG2_REG(base)               ((base)->CH11_DEBUG2)
#define APBH_CH12_CURCMDAR_REG(base)             ((base)->CH12_CURCMDAR)
#define APBH_CH12_NXTCMDAR_REG(base)             ((base)->CH12_NXTCMDAR)
#define APBH_CH12_CMD_REG(base)                  ((base)->CH12_CMD)
#define APBH_CH12_BAR_REG(base)                  ((base)->CH12_BAR)
#define APBH_CH12_SEMA_REG(base)                 ((base)->CH12_SEMA)
#define APBH_CH12_DEBUG1_REG(base)               ((base)->CH12_DEBUG1)
#define APBH_CH12_DEBUG2_REG(base)               ((base)->CH12_DEBUG2)
#define APBH_CH13_CURCMDAR_REG(base)             ((base)->CH13_CURCMDAR)
#define APBH_CH13_NXTCMDAR_REG(base)             ((base)->CH13_NXTCMDAR)
#define APBH_CH13_CMD_REG(base)                  ((base)->CH13_CMD)
#define APBH_CH13_BAR_REG(base)                  ((base)->CH13_BAR)
#define APBH_CH13_SEMA_REG(base)                 ((base)->CH13_SEMA)
#define APBH_CH13_DEBUG1_REG(base)               ((base)->CH13_DEBUG1)
#define APBH_CH13_DEBUG2_REG(base)               ((base)->CH13_DEBUG2)
#define APBH_CH14_CURCMDAR_REG(base)             ((base)->CH14_CURCMDAR)
#define APBH_CH14_NXTCMDAR_REG(base)             ((base)->CH14_NXTCMDAR)
#define APBH_CH14_CMD_REG(base)                  ((base)->CH14_CMD)
#define APBH_CH14_BAR_REG(base)                  ((base)->CH14_BAR)
#define APBH_CH14_SEMA_REG(base)                 ((base)->CH14_SEMA)
#define APBH_CH14_DEBUG1_REG(base)               ((base)->CH14_DEBUG1)
#define APBH_CH14_DEBUG2_REG(base)               ((base)->CH14_DEBUG2)
#define APBH_CH15_CURCMDAR_REG(base)             ((base)->CH15_CURCMDAR)
#define APBH_CH15_NXTCMDAR_REG(base)             ((base)->CH15_NXTCMDAR)
#define APBH_CH15_CMD_REG(base)                  ((base)->CH15_CMD)
#define APBH_CH15_BAR_REG(base)                  ((base)->CH15_BAR)
#define APBH_CH15_SEMA_REG(base)                 ((base)->CH15_SEMA)
#define APBH_CH15_DEBUG1_REG(base)               ((base)->CH15_DEBUG1)
#define APBH_CH15_DEBUG2_REG(base)               ((base)->CH15_DEBUG2)
#define APBH_VERSION_REG(base)                   ((base)->VERSION)

/*!
 * @}
 */ /* end of group APBH_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- APBH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Masks APBH Register Masks
 * @{
 */

/*! @name CTRL0 - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_CLKGATE_CHANNEL_MASK          (0xFFFFU)
#define APBH_CTRL0_CLKGATE_CHANNEL_SHIFT         (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_CLKGATE_CHANNEL(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_RSVD0_MASK                    (0xFFF0000U)
#define APBH_CTRL0_RSVD0_SHIFT                   (16U)
#define APBH_CTRL0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_RSVD0_SHIFT)) & APBH_CTRL0_RSVD0_MASK)
#define APBH_CTRL0_APB_BURST_EN_MASK             (0x10000000U)
#define APBH_CTRL0_APB_BURST_EN_SHIFT            (28U)
#define APBH_CTRL0_AHB_BURST8_EN_MASK            (0x20000000U)
#define APBH_CTRL0_AHB_BURST8_EN_SHIFT           (29U)
#define APBH_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define APBH_CTRL0_CLKGATE_SHIFT                 (30U)
#define APBH_CTRL0_SFTRST_MASK                   (0x80000000U)
#define APBH_CTRL0_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL0_SET - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_SET_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_SET_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_SET_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_RSVD0_SHIFT)) & APBH_CTRL0_SET_RSVD0_MASK)
#define APBH_CTRL0_SET_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_SET_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_SET_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_SET_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_CLR - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_CLR_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_CLR_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_RSVD0_SHIFT)) & APBH_CTRL0_CLR_RSVD0_MASK)
#define APBH_CTRL0_CLR_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_CLR_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_TOG - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_TOG_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_TOG_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_RSVD0_SHIFT)) & APBH_CTRL0_TOG_RSVD0_MASK)
#define APBH_CTRL0_TOG_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_TOG_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL1 - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_MASK         (0x1U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_SHIFT        (0U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_MASK         (0x2U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_SHIFT        (1U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_MASK         (0x4U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_SHIFT        (2U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_MASK         (0x8U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_SHIFT        (3U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_MASK         (0x10U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_SHIFT        (4U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_MASK         (0x20U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_SHIFT        (5U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_MASK         (0x40U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_SHIFT        (6U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_MASK         (0x80U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_SHIFT        (7U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_MASK         (0x100U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_SHIFT        (8U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_MASK         (0x200U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_SHIFT        (9U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_MASK        (0x400U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_SHIFT       (10U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_MASK        (0x800U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_SHIFT       (11U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_MASK        (0x1000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_SHIFT       (12U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_MASK        (0x2000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_SHIFT       (13U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_MASK        (0x4000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_SHIFT       (14U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_MASK        (0x8000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_SHIFT       (15U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_MASK      (0x10000U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_SHIFT     (16U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_MASK      (0x20000U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_SHIFT     (17U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_MASK      (0x40000U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_SHIFT     (18U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_MASK      (0x80000U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_SHIFT     (19U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_MASK      (0x100000U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_SHIFT     (20U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_MASK      (0x200000U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_SHIFT     (21U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_MASK      (0x400000U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_SHIFT     (22U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_MASK      (0x800000U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_SHIFT     (23U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_MASK      (0x1000000U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_SHIFT     (24U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_MASK      (0x2000000U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_SHIFT     (25U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_MASK     (0x4000000U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_SHIFT    (26U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_MASK     (0x8000000U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_SHIFT    (27U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_MASK     (0x10000000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_SHIFT    (28U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_MASK     (0x20000000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_SHIFT    (29U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_MASK     (0x40000000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_SHIFT    (30U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_MASK     (0x80000000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_SHIFT    (31U)
/*! @} */

/*! @name CTRL1_SET - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL1_CLR - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL1_TOG - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL2 - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_CH0_ERROR_IRQ_MASK            (0x1U)
#define APBH_CTRL2_CH0_ERROR_IRQ_SHIFT           (0U)
#define APBH_CTRL2_CH1_ERROR_IRQ_MASK            (0x2U)
#define APBH_CTRL2_CH1_ERROR_IRQ_SHIFT           (1U)
#define APBH_CTRL2_CH2_ERROR_IRQ_MASK            (0x4U)
#define APBH_CTRL2_CH2_ERROR_IRQ_SHIFT           (2U)
#define APBH_CTRL2_CH3_ERROR_IRQ_MASK            (0x8U)
#define APBH_CTRL2_CH3_ERROR_IRQ_SHIFT           (3U)
#define APBH_CTRL2_CH4_ERROR_IRQ_MASK            (0x10U)
#define APBH_CTRL2_CH4_ERROR_IRQ_SHIFT           (4U)
#define APBH_CTRL2_CH5_ERROR_IRQ_MASK            (0x20U)
#define APBH_CTRL2_CH5_ERROR_IRQ_SHIFT           (5U)
#define APBH_CTRL2_CH6_ERROR_IRQ_MASK            (0x40U)
#define APBH_CTRL2_CH6_ERROR_IRQ_SHIFT           (6U)
#define APBH_CTRL2_CH7_ERROR_IRQ_MASK            (0x80U)
#define APBH_CTRL2_CH7_ERROR_IRQ_SHIFT           (7U)
#define APBH_CTRL2_CH8_ERROR_IRQ_MASK            (0x100U)
#define APBH_CTRL2_CH8_ERROR_IRQ_SHIFT           (8U)
#define APBH_CTRL2_CH9_ERROR_IRQ_MASK            (0x200U)
#define APBH_CTRL2_CH9_ERROR_IRQ_SHIFT           (9U)
#define APBH_CTRL2_CH10_ERROR_IRQ_MASK           (0x400U)
#define APBH_CTRL2_CH10_ERROR_IRQ_SHIFT          (10U)
#define APBH_CTRL2_CH11_ERROR_IRQ_MASK           (0x800U)
#define APBH_CTRL2_CH11_ERROR_IRQ_SHIFT          (11U)
#define APBH_CTRL2_CH12_ERROR_IRQ_MASK           (0x1000U)
#define APBH_CTRL2_CH12_ERROR_IRQ_SHIFT          (12U)
#define APBH_CTRL2_CH13_ERROR_IRQ_MASK           (0x2000U)
#define APBH_CTRL2_CH13_ERROR_IRQ_SHIFT          (13U)
#define APBH_CTRL2_CH14_ERROR_IRQ_MASK           (0x4000U)
#define APBH_CTRL2_CH14_ERROR_IRQ_SHIFT          (14U)
#define APBH_CTRL2_CH15_ERROR_IRQ_MASK           (0x8000U)
#define APBH_CTRL2_CH15_ERROR_IRQ_SHIFT          (15U)
#define APBH_CTRL2_CH0_ERROR_STATUS_MASK         (0x10000U)
#define APBH_CTRL2_CH0_ERROR_STATUS_SHIFT        (16U)
#define APBH_CTRL2_CH1_ERROR_STATUS_MASK         (0x20000U)
#define APBH_CTRL2_CH1_ERROR_STATUS_SHIFT        (17U)
#define APBH_CTRL2_CH2_ERROR_STATUS_MASK         (0x40000U)
#define APBH_CTRL2_CH2_ERROR_STATUS_SHIFT        (18U)
#define APBH_CTRL2_CH3_ERROR_STATUS_MASK         (0x80000U)
#define APBH_CTRL2_CH3_ERROR_STATUS_SHIFT        (19U)
#define APBH_CTRL2_CH4_ERROR_STATUS_MASK         (0x100000U)
#define APBH_CTRL2_CH4_ERROR_STATUS_SHIFT        (20U)
#define APBH_CTRL2_CH5_ERROR_STATUS_MASK         (0x200000U)
#define APBH_CTRL2_CH5_ERROR_STATUS_SHIFT        (21U)
#define APBH_CTRL2_CH6_ERROR_STATUS_MASK         (0x400000U)
#define APBH_CTRL2_CH6_ERROR_STATUS_SHIFT        (22U)
#define APBH_CTRL2_CH7_ERROR_STATUS_MASK         (0x800000U)
#define APBH_CTRL2_CH7_ERROR_STATUS_SHIFT        (23U)
#define APBH_CTRL2_CH8_ERROR_STATUS_MASK         (0x1000000U)
#define APBH_CTRL2_CH8_ERROR_STATUS_SHIFT        (24U)
#define APBH_CTRL2_CH9_ERROR_STATUS_MASK         (0x2000000U)
#define APBH_CTRL2_CH9_ERROR_STATUS_SHIFT        (25U)
#define APBH_CTRL2_CH10_ERROR_STATUS_MASK        (0x4000000U)
#define APBH_CTRL2_CH10_ERROR_STATUS_SHIFT       (26U)
#define APBH_CTRL2_CH11_ERROR_STATUS_MASK        (0x8000000U)
#define APBH_CTRL2_CH11_ERROR_STATUS_SHIFT       (27U)
#define APBH_CTRL2_CH12_ERROR_STATUS_MASK        (0x10000000U)
#define APBH_CTRL2_CH12_ERROR_STATUS_SHIFT       (28U)
#define APBH_CTRL2_CH13_ERROR_STATUS_MASK        (0x20000000U)
#define APBH_CTRL2_CH13_ERROR_STATUS_SHIFT       (29U)
#define APBH_CTRL2_CH14_ERROR_STATUS_MASK        (0x40000000U)
#define APBH_CTRL2_CH14_ERROR_STATUS_SHIFT       (30U)
#define APBH_CTRL2_CH15_ERROR_STATUS_MASK        (0x80000000U)
#define APBH_CTRL2_CH15_ERROR_STATUS_SHIFT       (31U)
/*! @} */

/*! @name CTRL2_SET - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CTRL2_CLR - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CTRL2_TOG - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CHANNEL_CTRL - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK    (0xFFFFU)
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT   (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK     (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT    (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_RESET_CHANNEL(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_SET - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_CLR - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_TOG - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK)
/*! @} */

/*! @name DEVSEL - AHB to APBH DMA Device Assignment Register */
/*! @{ */
#define APBH_DEVSEL_CH0_MASK                     (0x3U)
#define APBH_DEVSEL_CH0_SHIFT                    (0U)
#define APBH_DEVSEL_CH0(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH0_SHIFT)) & APBH_DEVSEL_CH0_MASK)
#define APBH_DEVSEL_CH1_MASK                     (0xCU)
#define APBH_DEVSEL_CH1_SHIFT                    (2U)
#define APBH_DEVSEL_CH1(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH1_SHIFT)) & APBH_DEVSEL_CH1_MASK)
#define APBH_DEVSEL_CH2_MASK                     (0x30U)
#define APBH_DEVSEL_CH2_SHIFT                    (4U)
#define APBH_DEVSEL_CH2(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH2_SHIFT)) & APBH_DEVSEL_CH2_MASK)
#define APBH_DEVSEL_CH3_MASK                     (0xC0U)
#define APBH_DEVSEL_CH3_SHIFT                    (6U)
#define APBH_DEVSEL_CH3(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH3_SHIFT)) & APBH_DEVSEL_CH3_MASK)
#define APBH_DEVSEL_CH4_MASK                     (0x300U)
#define APBH_DEVSEL_CH4_SHIFT                    (8U)
#define APBH_DEVSEL_CH4(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH4_SHIFT)) & APBH_DEVSEL_CH4_MASK)
#define APBH_DEVSEL_CH5_MASK                     (0xC00U)
#define APBH_DEVSEL_CH5_SHIFT                    (10U)
#define APBH_DEVSEL_CH5(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH5_SHIFT)) & APBH_DEVSEL_CH5_MASK)
#define APBH_DEVSEL_CH6_MASK                     (0x3000U)
#define APBH_DEVSEL_CH6_SHIFT                    (12U)
#define APBH_DEVSEL_CH6(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH6_SHIFT)) & APBH_DEVSEL_CH6_MASK)
#define APBH_DEVSEL_CH7_MASK                     (0xC000U)
#define APBH_DEVSEL_CH7_SHIFT                    (14U)
#define APBH_DEVSEL_CH7(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH7_SHIFT)) & APBH_DEVSEL_CH7_MASK)
#define APBH_DEVSEL_CH8_MASK                     (0x30000U)
#define APBH_DEVSEL_CH8_SHIFT                    (16U)
#define APBH_DEVSEL_CH8(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH8_SHIFT)) & APBH_DEVSEL_CH8_MASK)
#define APBH_DEVSEL_CH9_MASK                     (0xC0000U)
#define APBH_DEVSEL_CH9_SHIFT                    (18U)
#define APBH_DEVSEL_CH9(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH9_SHIFT)) & APBH_DEVSEL_CH9_MASK)
#define APBH_DEVSEL_CH10_MASK                    (0x300000U)
#define APBH_DEVSEL_CH10_SHIFT                   (20U)
#define APBH_DEVSEL_CH10(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH10_SHIFT)) & APBH_DEVSEL_CH10_MASK)
#define APBH_DEVSEL_CH11_MASK                    (0xC00000U)
#define APBH_DEVSEL_CH11_SHIFT                   (22U)
#define APBH_DEVSEL_CH11(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH11_SHIFT)) & APBH_DEVSEL_CH11_MASK)
#define APBH_DEVSEL_CH12_MASK                    (0x3000000U)
#define APBH_DEVSEL_CH12_SHIFT                   (24U)
#define APBH_DEVSEL_CH12(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH12_SHIFT)) & APBH_DEVSEL_CH12_MASK)
#define APBH_DEVSEL_CH13_MASK                    (0xC000000U)
#define APBH_DEVSEL_CH13_SHIFT                   (26U)
#define APBH_DEVSEL_CH13(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH13_SHIFT)) & APBH_DEVSEL_CH13_MASK)
#define APBH_DEVSEL_CH14_MASK                    (0x30000000U)
#define APBH_DEVSEL_CH14_SHIFT                   (28U)
#define APBH_DEVSEL_CH14(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH14_SHIFT)) & APBH_DEVSEL_CH14_MASK)
#define APBH_DEVSEL_CH15_MASK                    (0xC0000000U)
#define APBH_DEVSEL_CH15_SHIFT                   (30U)
#define APBH_DEVSEL_CH15(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH15_SHIFT)) & APBH_DEVSEL_CH15_MASK)
/*! @} */

/*! @name DMA_BURST_SIZE - AHB to APBH DMA burst size */
/*! @{ */
#define APBH_DMA_BURST_SIZE_CH0_MASK             (0x3U)
#define APBH_DMA_BURST_SIZE_CH0_SHIFT            (0U)
#define APBH_DMA_BURST_SIZE_CH0(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH0_SHIFT)) & APBH_DMA_BURST_SIZE_CH0_MASK)
#define APBH_DMA_BURST_SIZE_CH1_MASK             (0xCU)
#define APBH_DMA_BURST_SIZE_CH1_SHIFT            (2U)
#define APBH_DMA_BURST_SIZE_CH1(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH1_SHIFT)) & APBH_DMA_BURST_SIZE_CH1_MASK)
#define APBH_DMA_BURST_SIZE_CH2_MASK             (0x30U)
#define APBH_DMA_BURST_SIZE_CH2_SHIFT            (4U)
#define APBH_DMA_BURST_SIZE_CH2(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH2_SHIFT)) & APBH_DMA_BURST_SIZE_CH2_MASK)
#define APBH_DMA_BURST_SIZE_CH3_MASK             (0xC0U)
#define APBH_DMA_BURST_SIZE_CH3_SHIFT            (6U)
#define APBH_DMA_BURST_SIZE_CH3(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH3_SHIFT)) & APBH_DMA_BURST_SIZE_CH3_MASK)
#define APBH_DMA_BURST_SIZE_CH4_MASK             (0x300U)
#define APBH_DMA_BURST_SIZE_CH4_SHIFT            (8U)
#define APBH_DMA_BURST_SIZE_CH4(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH4_SHIFT)) & APBH_DMA_BURST_SIZE_CH4_MASK)
#define APBH_DMA_BURST_SIZE_CH5_MASK             (0xC00U)
#define APBH_DMA_BURST_SIZE_CH5_SHIFT            (10U)
#define APBH_DMA_BURST_SIZE_CH5(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH5_SHIFT)) & APBH_DMA_BURST_SIZE_CH5_MASK)
#define APBH_DMA_BURST_SIZE_CH6_MASK             (0x3000U)
#define APBH_DMA_BURST_SIZE_CH6_SHIFT            (12U)
#define APBH_DMA_BURST_SIZE_CH6(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH6_SHIFT)) & APBH_DMA_BURST_SIZE_CH6_MASK)
#define APBH_DMA_BURST_SIZE_CH7_MASK             (0xC000U)
#define APBH_DMA_BURST_SIZE_CH7_SHIFT            (14U)
#define APBH_DMA_BURST_SIZE_CH7(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH7_SHIFT)) & APBH_DMA_BURST_SIZE_CH7_MASK)
#define APBH_DMA_BURST_SIZE_CH8_MASK             (0x30000U)
#define APBH_DMA_BURST_SIZE_CH8_SHIFT            (16U)
/*! CH8
 *  0b00..BURST0
 *  0b01..BURST4
 *  0b10..BURST8
 */
#define APBH_DMA_BURST_SIZE_CH8(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH8_SHIFT)) & APBH_DMA_BURST_SIZE_CH8_MASK)
#define APBH_DMA_BURST_SIZE_CH9_MASK             (0xC0000U)
#define APBH_DMA_BURST_SIZE_CH9_SHIFT            (18U)
#define APBH_DMA_BURST_SIZE_CH9(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH9_SHIFT)) & APBH_DMA_BURST_SIZE_CH9_MASK)
#define APBH_DMA_BURST_SIZE_CH10_MASK            (0x300000U)
#define APBH_DMA_BURST_SIZE_CH10_SHIFT           (20U)
#define APBH_DMA_BURST_SIZE_CH10(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH10_SHIFT)) & APBH_DMA_BURST_SIZE_CH10_MASK)
#define APBH_DMA_BURST_SIZE_CH11_MASK            (0xC00000U)
#define APBH_DMA_BURST_SIZE_CH11_SHIFT           (22U)
#define APBH_DMA_BURST_SIZE_CH11(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH11_SHIFT)) & APBH_DMA_BURST_SIZE_CH11_MASK)
#define APBH_DMA_BURST_SIZE_CH12_MASK            (0x3000000U)
#define APBH_DMA_BURST_SIZE_CH12_SHIFT           (24U)
#define APBH_DMA_BURST_SIZE_CH12(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH12_SHIFT)) & APBH_DMA_BURST_SIZE_CH12_MASK)
#define APBH_DMA_BURST_SIZE_CH13_MASK            (0xC000000U)
#define APBH_DMA_BURST_SIZE_CH13_SHIFT           (26U)
#define APBH_DMA_BURST_SIZE_CH13(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH13_SHIFT)) & APBH_DMA_BURST_SIZE_CH13_MASK)
#define APBH_DMA_BURST_SIZE_CH14_MASK            (0x30000000U)
#define APBH_DMA_BURST_SIZE_CH14_SHIFT           (28U)
#define APBH_DMA_BURST_SIZE_CH14(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH14_SHIFT)) & APBH_DMA_BURST_SIZE_CH14_MASK)
#define APBH_DMA_BURST_SIZE_CH15_MASK            (0xC0000000U)
#define APBH_DMA_BURST_SIZE_CH15_SHIFT           (30U)
#define APBH_DMA_BURST_SIZE_CH15(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH15_SHIFT)) & APBH_DMA_BURST_SIZE_CH15_MASK)
/*! @} */

/*! @name DEBUG - AHB to APBH DMA Debug Register */
/*! @{ */
#define APBH_DEBUG_GPMI_ONE_FIFO_MASK            (0x1U)
#define APBH_DEBUG_GPMI_ONE_FIFO_SHIFT           (0U)
/*! @} */

/*! @name CH0_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH0_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH0_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH0_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH0_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH0_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH0_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH0_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH0_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH0_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH0_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH0_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH0_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH0_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH0_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_COMMAND_SHIFT)) & APBH_CH0_CMD_COMMAND_MASK)
#define APBH_CH0_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH0_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH0_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH0_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH0_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH0_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH0_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH0_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH0_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH0_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH0_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH0_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH0_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH0_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH0_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH0_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH0_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_CMDWORDS_SHIFT)) & APBH_CH0_CMD_CMDWORDS_MASK)
#define APBH_CH0_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH0_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH0_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH0_CMD_XFER_COUNT_SHIFT)) & APBH_CH0_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH0_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH0_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH0_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH0_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH0_BAR_ADDRESS_SHIFT)) & APBH_CH0_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH0_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH0_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH0_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH0_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH0_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH0_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH0_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH0_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH0_SEMA_PHORE_SHIFT)) & APBH_CH0_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH0_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH0_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH0_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH0_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH0_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH0_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH0_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH0_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG1_RSVD1_SHIFT)) & APBH_CH0_DEBUG1_RSVD1_MASK)
#define APBH_CH0_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH0_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH0_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH0_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH0_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH0_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH0_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH0_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH0_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH0_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH0_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH0_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH0_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH0_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH0_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH0_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH0_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH0_DEBUG1_END_SHIFT                (28U)
#define APBH_CH0_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH0_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH0_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH0_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH0_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH0_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH0_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH0_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH0_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH0_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH0_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH0_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH0_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH0_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH0_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH0_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH1_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH1_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH1_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH1_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH1_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH1_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH1_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH1_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH1_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH1_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH1_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH1_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH1_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH1_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH1_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_COMMAND_SHIFT)) & APBH_CH1_CMD_COMMAND_MASK)
#define APBH_CH1_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH1_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH1_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH1_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH1_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH1_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH1_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH1_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH1_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH1_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH1_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH1_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH1_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH1_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH1_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH1_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH1_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_CMDWORDS_SHIFT)) & APBH_CH1_CMD_CMDWORDS_MASK)
#define APBH_CH1_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH1_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH1_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH1_CMD_XFER_COUNT_SHIFT)) & APBH_CH1_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH1_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH1_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH1_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH1_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH1_BAR_ADDRESS_SHIFT)) & APBH_CH1_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH1_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH1_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH1_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH1_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH1_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH1_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH1_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH1_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH1_SEMA_PHORE_SHIFT)) & APBH_CH1_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH1_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH1_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH1_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH1_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH1_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH1_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH1_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH1_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG1_RSVD1_SHIFT)) & APBH_CH1_DEBUG1_RSVD1_MASK)
#define APBH_CH1_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH1_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH1_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH1_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH1_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH1_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH1_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH1_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH1_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH1_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH1_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH1_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH1_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH1_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH1_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH1_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH1_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH1_DEBUG1_END_SHIFT                (28U)
#define APBH_CH1_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH1_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH1_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH1_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH1_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH1_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH1_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH1_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH1_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH1_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH1_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH1_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH1_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH1_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH1_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH1_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH2_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH2_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH2_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH2_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH2_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH2_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH2_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH2_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH2_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH2_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH2_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH2_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH2_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH2_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH2_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_COMMAND_SHIFT)) & APBH_CH2_CMD_COMMAND_MASK)
#define APBH_CH2_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH2_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH2_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH2_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH2_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH2_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH2_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH2_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH2_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH2_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH2_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH2_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH2_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH2_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH2_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH2_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH2_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_CMDWORDS_SHIFT)) & APBH_CH2_CMD_CMDWORDS_MASK)
#define APBH_CH2_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH2_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH2_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH2_CMD_XFER_COUNT_SHIFT)) & APBH_CH2_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH2_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH2_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH2_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH2_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH2_BAR_ADDRESS_SHIFT)) & APBH_CH2_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH2_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH2_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH2_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH2_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH2_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH2_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH2_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH2_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH2_SEMA_PHORE_SHIFT)) & APBH_CH2_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH2_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH2_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH2_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH2_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH2_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH2_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH2_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH2_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG1_RSVD1_SHIFT)) & APBH_CH2_DEBUG1_RSVD1_MASK)
#define APBH_CH2_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH2_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH2_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH2_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH2_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH2_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH2_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH2_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH2_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH2_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH2_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH2_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH2_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH2_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH2_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH2_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH2_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH2_DEBUG1_END_SHIFT                (28U)
#define APBH_CH2_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH2_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH2_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH2_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH2_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH2_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH2_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH2_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH2_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH2_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH2_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH2_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH2_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH2_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH2_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH2_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH3_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH3_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH3_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH3_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH3_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH3_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH3_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH3_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH3_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH3_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH3_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH3_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH3_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH3_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH3_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_COMMAND_SHIFT)) & APBH_CH3_CMD_COMMAND_MASK)
#define APBH_CH3_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH3_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH3_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH3_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH3_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH3_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH3_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH3_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH3_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH3_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH3_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH3_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH3_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH3_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH3_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH3_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH3_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_CMDWORDS_SHIFT)) & APBH_CH3_CMD_CMDWORDS_MASK)
#define APBH_CH3_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH3_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH3_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH3_CMD_XFER_COUNT_SHIFT)) & APBH_CH3_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH3_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH3_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH3_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH3_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH3_BAR_ADDRESS_SHIFT)) & APBH_CH3_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH3_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH3_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH3_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH3_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH3_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH3_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH3_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH3_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH3_SEMA_PHORE_SHIFT)) & APBH_CH3_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH3_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH3_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH3_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH3_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH3_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH3_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH3_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH3_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG1_RSVD1_SHIFT)) & APBH_CH3_DEBUG1_RSVD1_MASK)
#define APBH_CH3_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH3_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH3_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH3_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH3_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH3_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH3_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH3_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH3_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH3_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH3_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH3_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH3_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH3_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH3_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH3_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH3_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH3_DEBUG1_END_SHIFT                (28U)
#define APBH_CH3_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH3_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH3_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH3_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH3_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH3_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH3_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH3_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH3_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH3_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH3_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH3_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH3_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH3_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH3_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH3_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH4_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH4_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH4_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH4_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH4_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH4_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH4_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH4_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH4_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH4_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH4_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH4_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH4_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH4_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH4_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_COMMAND_SHIFT)) & APBH_CH4_CMD_COMMAND_MASK)
#define APBH_CH4_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH4_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH4_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH4_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH4_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH4_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH4_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH4_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH4_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH4_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH4_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH4_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH4_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH4_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH4_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH4_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH4_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_CMDWORDS_SHIFT)) & APBH_CH4_CMD_CMDWORDS_MASK)
#define APBH_CH4_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH4_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH4_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH4_CMD_XFER_COUNT_SHIFT)) & APBH_CH4_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH4_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH4_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH4_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH4_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH4_BAR_ADDRESS_SHIFT)) & APBH_CH4_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH4_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH4_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH4_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH4_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH4_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH4_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH4_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH4_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH4_SEMA_PHORE_SHIFT)) & APBH_CH4_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH4_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH4_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH4_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH4_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH4_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH4_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH4_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH4_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG1_RSVD1_SHIFT)) & APBH_CH4_DEBUG1_RSVD1_MASK)
#define APBH_CH4_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH4_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH4_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH4_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH4_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH4_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH4_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH4_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH4_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH4_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH4_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH4_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH4_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH4_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH4_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH4_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH4_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH4_DEBUG1_END_SHIFT                (28U)
#define APBH_CH4_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH4_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH4_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH4_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH4_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH4_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH4_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH4_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH4_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH4_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH4_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH4_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH4_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH4_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH4_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH4_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH5_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH5_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH5_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH5_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH5_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH5_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH5_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH5_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH5_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH5_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH5_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH5_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH5_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH5_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH5_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_COMMAND_SHIFT)) & APBH_CH5_CMD_COMMAND_MASK)
#define APBH_CH5_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH5_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH5_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH5_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH5_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH5_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH5_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH5_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH5_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH5_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH5_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH5_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH5_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH5_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH5_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH5_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH5_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_CMDWORDS_SHIFT)) & APBH_CH5_CMD_CMDWORDS_MASK)
#define APBH_CH5_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH5_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH5_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH5_CMD_XFER_COUNT_SHIFT)) & APBH_CH5_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH5_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH5_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH5_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH5_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH5_BAR_ADDRESS_SHIFT)) & APBH_CH5_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH5_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH5_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH5_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH5_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH5_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH5_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH5_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH5_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH5_SEMA_PHORE_SHIFT)) & APBH_CH5_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH5_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH5_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH5_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH5_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH5_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH5_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH5_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH5_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG1_RSVD1_SHIFT)) & APBH_CH5_DEBUG1_RSVD1_MASK)
#define APBH_CH5_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH5_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH5_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH5_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH5_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH5_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH5_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH5_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH5_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH5_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH5_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH5_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH5_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH5_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH5_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH5_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH5_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH5_DEBUG1_END_SHIFT                (28U)
#define APBH_CH5_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH5_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH5_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH5_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH5_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH5_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH5_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH5_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH5_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH5_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH5_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH5_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH5_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH5_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH5_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH5_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH6_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH6_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH6_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH6_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH6_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH6_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH6_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH6_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH6_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH6_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH6_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH6_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH6_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH6_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH6_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_COMMAND_SHIFT)) & APBH_CH6_CMD_COMMAND_MASK)
#define APBH_CH6_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH6_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH6_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH6_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH6_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH6_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH6_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH6_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH6_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH6_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH6_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH6_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH6_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH6_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH6_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH6_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH6_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_CMDWORDS_SHIFT)) & APBH_CH6_CMD_CMDWORDS_MASK)
#define APBH_CH6_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH6_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH6_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH6_CMD_XFER_COUNT_SHIFT)) & APBH_CH6_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH6_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH6_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH6_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH6_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH6_BAR_ADDRESS_SHIFT)) & APBH_CH6_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH6_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH6_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH6_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH6_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH6_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH6_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH6_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH6_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH6_SEMA_PHORE_SHIFT)) & APBH_CH6_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH6_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH6_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH6_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH6_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH6_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH6_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH6_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH6_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG1_RSVD1_SHIFT)) & APBH_CH6_DEBUG1_RSVD1_MASK)
#define APBH_CH6_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH6_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH6_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH6_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH6_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH6_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH6_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH6_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH6_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH6_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH6_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH6_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH6_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH6_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH6_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH6_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH6_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH6_DEBUG1_END_SHIFT                (28U)
#define APBH_CH6_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH6_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH6_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH6_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH6_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH6_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH6_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH6_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH6_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH6_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH6_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH6_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH6_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH6_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH6_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH6_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH7_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH7_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH7_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH7_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH7_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH7_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH7_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH7_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH7_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH7_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH7_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH7_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH7_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH7_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH7_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_COMMAND_SHIFT)) & APBH_CH7_CMD_COMMAND_MASK)
#define APBH_CH7_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH7_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH7_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH7_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH7_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH7_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH7_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH7_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH7_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH7_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH7_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH7_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH7_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH7_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH7_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH7_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH7_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_CMDWORDS_SHIFT)) & APBH_CH7_CMD_CMDWORDS_MASK)
#define APBH_CH7_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH7_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH7_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH7_CMD_XFER_COUNT_SHIFT)) & APBH_CH7_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH7_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH7_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH7_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH7_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH7_BAR_ADDRESS_SHIFT)) & APBH_CH7_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH7_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH7_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH7_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH7_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH7_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH7_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH7_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH7_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH7_SEMA_PHORE_SHIFT)) & APBH_CH7_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH7_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH7_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH7_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH7_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH7_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH7_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH7_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH7_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG1_RSVD1_SHIFT)) & APBH_CH7_DEBUG1_RSVD1_MASK)
#define APBH_CH7_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH7_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH7_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH7_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH7_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH7_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH7_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH7_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH7_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH7_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH7_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH7_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH7_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH7_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH7_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH7_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH7_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH7_DEBUG1_END_SHIFT                (28U)
#define APBH_CH7_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH7_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH7_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH7_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH7_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH7_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH7_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH7_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH7_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH7_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH7_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH7_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH7_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH7_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH7_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH7_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH8_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH8_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH8_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH8_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH8_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH8_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH8_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH8_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH8_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH8_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH8_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH8_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH8_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH8_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH8_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_COMMAND_SHIFT)) & APBH_CH8_CMD_COMMAND_MASK)
#define APBH_CH8_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH8_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH8_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH8_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH8_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH8_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH8_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH8_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH8_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH8_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH8_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH8_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH8_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH8_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH8_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH8_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH8_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_CMDWORDS_SHIFT)) & APBH_CH8_CMD_CMDWORDS_MASK)
#define APBH_CH8_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH8_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH8_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH8_CMD_XFER_COUNT_SHIFT)) & APBH_CH8_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH8_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH8_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH8_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH8_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH8_BAR_ADDRESS_SHIFT)) & APBH_CH8_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH8_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH8_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH8_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH8_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH8_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH8_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH8_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH8_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH8_SEMA_PHORE_SHIFT)) & APBH_CH8_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH8_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH8_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH8_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH8_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH8_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH8_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH8_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH8_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG1_RSVD1_SHIFT)) & APBH_CH8_DEBUG1_RSVD1_MASK)
#define APBH_CH8_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH8_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH8_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH8_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH8_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH8_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH8_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH8_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH8_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH8_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH8_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH8_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH8_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH8_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH8_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH8_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH8_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH8_DEBUG1_END_SHIFT                (28U)
#define APBH_CH8_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH8_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH8_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH8_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH8_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH8_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH8_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH8_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH8_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH8_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH8_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH8_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH8_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH8_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH8_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH8_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH9_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH9_CURCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH9_CURCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH9_CURCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH9_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH9_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH9_NXTCMDAR_CMD_ADDR_MASK          (0xFFFFFFFFU)
#define APBH_CH9_NXTCMDAR_CMD_ADDR_SHIFT         (0U)
#define APBH_CH9_NXTCMDAR_CMD_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH9_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH9_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH9_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH9_CMD_COMMAND_MASK                (0x3U)
#define APBH_CH9_CMD_COMMAND_SHIFT               (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH9_CMD_COMMAND(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_COMMAND_SHIFT)) & APBH_CH9_CMD_COMMAND_MASK)
#define APBH_CH9_CMD_CHAIN_MASK                  (0x4U)
#define APBH_CH9_CMD_CHAIN_SHIFT                 (2U)
#define APBH_CH9_CMD_IRQONCMPLT_MASK             (0x8U)
#define APBH_CH9_CMD_IRQONCMPLT_SHIFT            (3U)
#define APBH_CH9_CMD_NANDLOCK_MASK               (0x10U)
#define APBH_CH9_CMD_NANDLOCK_SHIFT              (4U)
#define APBH_CH9_CMD_NANDWAIT4READY_MASK         (0x20U)
#define APBH_CH9_CMD_NANDWAIT4READY_SHIFT        (5U)
#define APBH_CH9_CMD_SEMAPHORE_MASK              (0x40U)
#define APBH_CH9_CMD_SEMAPHORE_SHIFT             (6U)
#define APBH_CH9_CMD_WAIT4ENDCMD_MASK            (0x80U)
#define APBH_CH9_CMD_WAIT4ENDCMD_SHIFT           (7U)
#define APBH_CH9_CMD_HALTONTERMINATE_MASK        (0x100U)
#define APBH_CH9_CMD_HALTONTERMINATE_SHIFT       (8U)
#define APBH_CH9_CMD_CMDWORDS_MASK               (0xF000U)
#define APBH_CH9_CMD_CMDWORDS_SHIFT              (12U)
#define APBH_CH9_CMD_CMDWORDS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_CMDWORDS_SHIFT)) & APBH_CH9_CMD_CMDWORDS_MASK)
#define APBH_CH9_CMD_XFER_COUNT_MASK             (0xFFFF0000U)
#define APBH_CH9_CMD_XFER_COUNT_SHIFT            (16U)
#define APBH_CH9_CMD_XFER_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << APBH_CH9_CMD_XFER_COUNT_SHIFT)) & APBH_CH9_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH9_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH9_BAR_ADDRESS_MASK                (0xFFFFFFFFU)
#define APBH_CH9_BAR_ADDRESS_SHIFT               (0U)
#define APBH_CH9_BAR_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH9_BAR_ADDRESS_SHIFT)) & APBH_CH9_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH9_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH9_SEMA_INCREMENT_SEMA_MASK        (0xFFU)
#define APBH_CH9_SEMA_INCREMENT_SEMA_SHIFT       (0U)
#define APBH_CH9_SEMA_INCREMENT_SEMA(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH9_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH9_SEMA_PHORE_MASK                 (0xFF0000U)
#define APBH_CH9_SEMA_PHORE_SHIFT                (16U)
#define APBH_CH9_SEMA_PHORE(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH9_SEMA_PHORE_SHIFT)) & APBH_CH9_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH9_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH9_DEBUG1_STATEMACHINE_MASK        (0x1FU)
#define APBH_CH9_DEBUG1_STATEMACHINE_SHIFT       (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH9_DEBUG1_STATEMACHINE(x)          (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH9_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH9_DEBUG1_RSVD1_MASK               (0xFFFE0U)
#define APBH_CH9_DEBUG1_RSVD1_SHIFT              (5U)
#define APBH_CH9_DEBUG1_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG1_RSVD1_SHIFT)) & APBH_CH9_DEBUG1_RSVD1_MASK)
#define APBH_CH9_DEBUG1_WR_FIFO_FULL_MASK        (0x100000U)
#define APBH_CH9_DEBUG1_WR_FIFO_FULL_SHIFT       (20U)
#define APBH_CH9_DEBUG1_WR_FIFO_EMPTY_MASK       (0x200000U)
#define APBH_CH9_DEBUG1_WR_FIFO_EMPTY_SHIFT      (21U)
#define APBH_CH9_DEBUG1_RD_FIFO_FULL_MASK        (0x400000U)
#define APBH_CH9_DEBUG1_RD_FIFO_FULL_SHIFT       (22U)
#define APBH_CH9_DEBUG1_RD_FIFO_EMPTY_MASK       (0x800000U)
#define APBH_CH9_DEBUG1_RD_FIFO_EMPTY_SHIFT      (23U)
#define APBH_CH9_DEBUG1_NEXTCMDADDRVALID_MASK    (0x1000000U)
#define APBH_CH9_DEBUG1_NEXTCMDADDRVALID_SHIFT   (24U)
#define APBH_CH9_DEBUG1_LOCK_MASK                (0x2000000U)
#define APBH_CH9_DEBUG1_LOCK_SHIFT               (25U)
#define APBH_CH9_DEBUG1_READY_MASK               (0x4000000U)
#define APBH_CH9_DEBUG1_READY_SHIFT              (26U)
#define APBH_CH9_DEBUG1_SENSE_MASK               (0x8000000U)
#define APBH_CH9_DEBUG1_SENSE_SHIFT              (27U)
#define APBH_CH9_DEBUG1_END_MASK                 (0x10000000U)
#define APBH_CH9_DEBUG1_END_SHIFT                (28U)
#define APBH_CH9_DEBUG1_KICK_MASK                (0x20000000U)
#define APBH_CH9_DEBUG1_KICK_SHIFT               (29U)
#define APBH_CH9_DEBUG1_BURST_MASK               (0x40000000U)
#define APBH_CH9_DEBUG1_BURST_SHIFT              (30U)
#define APBH_CH9_DEBUG1_REQ_MASK                 (0x80000000U)
#define APBH_CH9_DEBUG1_REQ_SHIFT                (31U)
/*! @} */

/*! @name CH9_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH9_DEBUG2_AHB_BYTES_MASK           (0xFFFFU)
#define APBH_CH9_DEBUG2_AHB_BYTES_SHIFT          (0U)
#define APBH_CH9_DEBUG2_AHB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH9_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH9_DEBUG2_APB_BYTES_MASK           (0xFFFF0000U)
#define APBH_CH9_DEBUG2_APB_BYTES_SHIFT          (16U)
#define APBH_CH9_DEBUG2_APB_BYTES(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH9_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH9_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH10_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH10_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH10_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH10_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH10_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH10_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH10_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH10_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH10_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH10_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH10_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH10_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH10_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH10_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH10_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_COMMAND_SHIFT)) & APBH_CH10_CMD_COMMAND_MASK)
#define APBH_CH10_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH10_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH10_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH10_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH10_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH10_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH10_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH10_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH10_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH10_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH10_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH10_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH10_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH10_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH10_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH10_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH10_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_CMDWORDS_SHIFT)) & APBH_CH10_CMD_CMDWORDS_MASK)
#define APBH_CH10_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH10_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH10_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH10_CMD_XFER_COUNT_SHIFT)) & APBH_CH10_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH10_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH10_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH10_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH10_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH10_BAR_ADDRESS_SHIFT)) & APBH_CH10_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH10_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH10_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH10_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH10_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH10_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH10_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH10_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH10_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH10_SEMA_PHORE_SHIFT)) & APBH_CH10_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH10_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH10_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH10_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH10_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH10_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH10_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH10_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH10_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG1_RSVD1_SHIFT)) & APBH_CH10_DEBUG1_RSVD1_MASK)
#define APBH_CH10_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH10_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH10_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH10_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH10_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH10_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH10_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH10_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH10_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH10_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH10_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH10_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH10_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH10_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH10_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH10_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH10_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH10_DEBUG1_END_SHIFT               (28U)
#define APBH_CH10_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH10_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH10_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH10_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH10_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH10_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH10_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH10_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH10_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH10_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH10_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH10_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH10_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH10_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH10_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH10_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH11_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH11_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH11_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH11_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH11_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH11_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH11_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH11_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH11_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH11_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH11_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH11_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH11_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH11_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH11_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_COMMAND_SHIFT)) & APBH_CH11_CMD_COMMAND_MASK)
#define APBH_CH11_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH11_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH11_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH11_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH11_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH11_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH11_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH11_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH11_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH11_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH11_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH11_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH11_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH11_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH11_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH11_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH11_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_CMDWORDS_SHIFT)) & APBH_CH11_CMD_CMDWORDS_MASK)
#define APBH_CH11_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH11_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH11_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH11_CMD_XFER_COUNT_SHIFT)) & APBH_CH11_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH11_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH11_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH11_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH11_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH11_BAR_ADDRESS_SHIFT)) & APBH_CH11_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH11_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH11_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH11_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH11_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH11_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH11_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH11_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH11_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH11_SEMA_PHORE_SHIFT)) & APBH_CH11_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH11_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH11_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH11_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH11_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH11_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH11_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH11_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH11_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG1_RSVD1_SHIFT)) & APBH_CH11_DEBUG1_RSVD1_MASK)
#define APBH_CH11_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH11_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH11_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH11_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH11_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH11_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH11_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH11_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH11_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH11_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH11_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH11_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH11_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH11_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH11_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH11_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH11_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH11_DEBUG1_END_SHIFT               (28U)
#define APBH_CH11_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH11_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH11_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH11_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH11_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH11_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH11_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH11_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH11_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH11_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH11_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH11_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH11_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH11_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH11_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH11_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH12_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH12_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH12_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH12_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH12_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH12_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH12_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH12_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH12_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH12_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH12_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH12_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH12_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH12_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH12_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_COMMAND_SHIFT)) & APBH_CH12_CMD_COMMAND_MASK)
#define APBH_CH12_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH12_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH12_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH12_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH12_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH12_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH12_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH12_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH12_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH12_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH12_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH12_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH12_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH12_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH12_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH12_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH12_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_CMDWORDS_SHIFT)) & APBH_CH12_CMD_CMDWORDS_MASK)
#define APBH_CH12_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH12_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH12_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH12_CMD_XFER_COUNT_SHIFT)) & APBH_CH12_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH12_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH12_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH12_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH12_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH12_BAR_ADDRESS_SHIFT)) & APBH_CH12_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH12_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH12_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH12_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH12_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH12_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH12_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH12_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH12_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH12_SEMA_PHORE_SHIFT)) & APBH_CH12_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH12_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH12_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH12_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH12_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH12_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH12_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH12_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH12_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG1_RSVD1_SHIFT)) & APBH_CH12_DEBUG1_RSVD1_MASK)
#define APBH_CH12_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH12_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH12_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH12_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH12_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH12_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH12_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH12_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH12_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH12_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH12_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH12_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH12_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH12_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH12_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH12_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH12_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH12_DEBUG1_END_SHIFT               (28U)
#define APBH_CH12_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH12_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH12_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH12_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH12_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH12_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH12_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH12_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH12_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH12_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH12_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH12_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH12_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH12_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH12_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH12_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH13_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH13_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH13_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH13_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH13_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH13_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH13_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH13_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH13_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH13_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH13_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH13_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH13_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH13_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH13_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_COMMAND_SHIFT)) & APBH_CH13_CMD_COMMAND_MASK)
#define APBH_CH13_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH13_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH13_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH13_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH13_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH13_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH13_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH13_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH13_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH13_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH13_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH13_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH13_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH13_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH13_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH13_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH13_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_CMDWORDS_SHIFT)) & APBH_CH13_CMD_CMDWORDS_MASK)
#define APBH_CH13_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH13_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH13_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH13_CMD_XFER_COUNT_SHIFT)) & APBH_CH13_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH13_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH13_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH13_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH13_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH13_BAR_ADDRESS_SHIFT)) & APBH_CH13_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH13_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH13_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH13_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH13_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH13_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH13_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH13_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH13_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH13_SEMA_PHORE_SHIFT)) & APBH_CH13_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH13_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH13_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH13_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH13_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH13_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH13_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH13_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH13_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG1_RSVD1_SHIFT)) & APBH_CH13_DEBUG1_RSVD1_MASK)
#define APBH_CH13_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH13_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH13_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH13_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH13_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH13_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH13_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH13_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH13_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH13_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH13_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH13_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH13_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH13_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH13_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH13_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH13_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH13_DEBUG1_END_SHIFT               (28U)
#define APBH_CH13_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH13_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH13_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH13_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH13_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH13_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH13_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH13_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH13_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH13_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH13_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH13_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH13_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH13_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH13_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH13_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH14_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH14_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH14_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH14_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH14_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH14_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH14_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH14_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH14_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH14_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH14_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH14_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH14_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH14_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH14_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_COMMAND_SHIFT)) & APBH_CH14_CMD_COMMAND_MASK)
#define APBH_CH14_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH14_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH14_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH14_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH14_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH14_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH14_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH14_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH14_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH14_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH14_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH14_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH14_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH14_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH14_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH14_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH14_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_CMDWORDS_SHIFT)) & APBH_CH14_CMD_CMDWORDS_MASK)
#define APBH_CH14_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH14_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH14_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH14_CMD_XFER_COUNT_SHIFT)) & APBH_CH14_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH14_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH14_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH14_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH14_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH14_BAR_ADDRESS_SHIFT)) & APBH_CH14_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH14_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH14_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH14_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH14_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH14_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH14_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH14_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH14_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH14_SEMA_PHORE_SHIFT)) & APBH_CH14_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH14_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH14_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH14_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH14_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH14_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH14_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH14_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH14_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG1_RSVD1_SHIFT)) & APBH_CH14_DEBUG1_RSVD1_MASK)
#define APBH_CH14_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH14_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH14_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH14_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH14_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH14_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH14_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH14_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH14_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH14_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH14_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH14_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH14_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH14_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH14_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH14_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH14_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH14_DEBUG1_END_SHIFT               (28U)
#define APBH_CH14_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH14_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH14_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH14_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH14_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH14_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH14_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH14_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH14_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH14_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH14_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH14_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH14_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH14_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH14_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH14_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name CH15_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH15_CURCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH15_CURCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH15_CURCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH15_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH15_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH15_NXTCMDAR_CMD_ADDR_MASK         (0xFFFFFFFFU)
#define APBH_CH15_NXTCMDAR_CMD_ADDR_SHIFT        (0U)
#define APBH_CH15_NXTCMDAR_CMD_ADDR(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH15_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH15_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/*! @name CH15_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH15_CMD_COMMAND_MASK               (0x3U)
#define APBH_CH15_CMD_COMMAND_SHIFT              (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH15_CMD_COMMAND(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_COMMAND_SHIFT)) & APBH_CH15_CMD_COMMAND_MASK)
#define APBH_CH15_CMD_CHAIN_MASK                 (0x4U)
#define APBH_CH15_CMD_CHAIN_SHIFT                (2U)
#define APBH_CH15_CMD_IRQONCMPLT_MASK            (0x8U)
#define APBH_CH15_CMD_IRQONCMPLT_SHIFT           (3U)
#define APBH_CH15_CMD_NANDLOCK_MASK              (0x10U)
#define APBH_CH15_CMD_NANDLOCK_SHIFT             (4U)
#define APBH_CH15_CMD_NANDWAIT4READY_MASK        (0x20U)
#define APBH_CH15_CMD_NANDWAIT4READY_SHIFT       (5U)
#define APBH_CH15_CMD_SEMAPHORE_MASK             (0x40U)
#define APBH_CH15_CMD_SEMAPHORE_SHIFT            (6U)
#define APBH_CH15_CMD_WAIT4ENDCMD_MASK           (0x80U)
#define APBH_CH15_CMD_WAIT4ENDCMD_SHIFT          (7U)
#define APBH_CH15_CMD_HALTONTERMINATE_MASK       (0x100U)
#define APBH_CH15_CMD_HALTONTERMINATE_SHIFT      (8U)
#define APBH_CH15_CMD_CMDWORDS_MASK              (0xF000U)
#define APBH_CH15_CMD_CMDWORDS_SHIFT             (12U)
#define APBH_CH15_CMD_CMDWORDS(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_CMDWORDS_SHIFT)) & APBH_CH15_CMD_CMDWORDS_MASK)
#define APBH_CH15_CMD_XFER_COUNT_MASK            (0xFFFF0000U)
#define APBH_CH15_CMD_XFER_COUNT_SHIFT           (16U)
#define APBH_CH15_CMD_XFER_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH15_CMD_XFER_COUNT_SHIFT)) & APBH_CH15_CMD_XFER_COUNT_MASK)
/*! @} */

/*! @name CH15_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH15_BAR_ADDRESS_MASK               (0xFFFFFFFFU)
#define APBH_CH15_BAR_ADDRESS_SHIFT              (0U)
#define APBH_CH15_BAR_ADDRESS(x)                 (((uint32_t)(((uint32_t)(x)) << APBH_CH15_BAR_ADDRESS_SHIFT)) & APBH_CH15_BAR_ADDRESS_MASK)
/*! @} */

/*! @name CH15_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH15_SEMA_INCREMENT_SEMA_MASK       (0xFFU)
#define APBH_CH15_SEMA_INCREMENT_SEMA_SHIFT      (0U)
#define APBH_CH15_SEMA_INCREMENT_SEMA(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH15_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH15_SEMA_PHORE_MASK                (0xFF0000U)
#define APBH_CH15_SEMA_PHORE_SHIFT               (16U)
#define APBH_CH15_SEMA_PHORE(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH15_SEMA_PHORE_SHIFT)) & APBH_CH15_SEMA_PHORE_MASK)
/*! @} */

/*! @name CH15_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH15_DEBUG1_STATEMACHINE_MASK       (0x1FU)
#define APBH_CH15_DEBUG1_STATEMACHINE_SHIFT      (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH15_DEBUG1_STATEMACHINE(x)         (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH15_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH15_DEBUG1_RSVD1_MASK              (0xFFFE0U)
#define APBH_CH15_DEBUG1_RSVD1_SHIFT             (5U)
#define APBH_CH15_DEBUG1_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG1_RSVD1_SHIFT)) & APBH_CH15_DEBUG1_RSVD1_MASK)
#define APBH_CH15_DEBUG1_WR_FIFO_FULL_MASK       (0x100000U)
#define APBH_CH15_DEBUG1_WR_FIFO_FULL_SHIFT      (20U)
#define APBH_CH15_DEBUG1_WR_FIFO_EMPTY_MASK      (0x200000U)
#define APBH_CH15_DEBUG1_WR_FIFO_EMPTY_SHIFT     (21U)
#define APBH_CH15_DEBUG1_RD_FIFO_FULL_MASK       (0x400000U)
#define APBH_CH15_DEBUG1_RD_FIFO_FULL_SHIFT      (22U)
#define APBH_CH15_DEBUG1_RD_FIFO_EMPTY_MASK      (0x800000U)
#define APBH_CH15_DEBUG1_RD_FIFO_EMPTY_SHIFT     (23U)
#define APBH_CH15_DEBUG1_NEXTCMDADDRVALID_MASK   (0x1000000U)
#define APBH_CH15_DEBUG1_NEXTCMDADDRVALID_SHIFT  (24U)
#define APBH_CH15_DEBUG1_LOCK_MASK               (0x2000000U)
#define APBH_CH15_DEBUG1_LOCK_SHIFT              (25U)
#define APBH_CH15_DEBUG1_READY_MASK              (0x4000000U)
#define APBH_CH15_DEBUG1_READY_SHIFT             (26U)
#define APBH_CH15_DEBUG1_SENSE_MASK              (0x8000000U)
#define APBH_CH15_DEBUG1_SENSE_SHIFT             (27U)
#define APBH_CH15_DEBUG1_END_MASK                (0x10000000U)
#define APBH_CH15_DEBUG1_END_SHIFT               (28U)
#define APBH_CH15_DEBUG1_KICK_MASK               (0x20000000U)
#define APBH_CH15_DEBUG1_KICK_SHIFT              (29U)
#define APBH_CH15_DEBUG1_BURST_MASK              (0x40000000U)
#define APBH_CH15_DEBUG1_BURST_SHIFT             (30U)
#define APBH_CH15_DEBUG1_REQ_MASK                (0x80000000U)
#define APBH_CH15_DEBUG1_REQ_SHIFT               (31U)
/*! @} */

/*! @name CH15_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH15_DEBUG2_AHB_BYTES_MASK          (0xFFFFU)
#define APBH_CH15_DEBUG2_AHB_BYTES_SHIFT         (0U)
#define APBH_CH15_DEBUG2_AHB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH15_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH15_DEBUG2_APB_BYTES_MASK          (0xFFFF0000U)
#define APBH_CH15_DEBUG2_APB_BYTES_SHIFT         (16U)
#define APBH_CH15_DEBUG2_APB_BYTES(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CH15_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH15_DEBUG2_APB_BYTES_MASK)
/*! @} */

/*! @name VERSION - APBH Bridge Version Register */
/*! @{ */
#define APBH_VERSION_STEP_MASK                   (0xFFFFU)
#define APBH_VERSION_STEP_SHIFT                  (0U)
#define APBH_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_STEP_SHIFT)) & APBH_VERSION_STEP_MASK)
#define APBH_VERSION_MINOR_MASK                  (0xFF0000U)
#define APBH_VERSION_MINOR_SHIFT                 (16U)
#define APBH_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MINOR_SHIFT)) & APBH_VERSION_MINOR_MASK)
#define APBH_VERSION_MAJOR_MASK                  (0xFF000000U)
#define APBH_VERSION_MAJOR_SHIFT                 (24U)
#define APBH_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MAJOR_SHIFT)) & APBH_VERSION_MAJOR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group APBH_Register_Masks */


/* APBH - Peripheral instance base addresses */
/** Peripheral APBH base pointer */
#define APBH_BASE_PTR                            ((APBH_MemMapPtr)0x33000000u)
/** Array initializer of APBH peripheral base pointers */
#define APBH_BASE_PTRS                           { APBH_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- APBH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Accessor_Macros APBH - Register accessor macros
 * @{
 */


/* APBH - Register instance definitions */
/* APBH */
#define APBH_CTRL0                               APBH_CTRL0_REG(APBH_BASE_PTR)
#define APBH_CTRL0_SET                           APBH_CTRL0_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL0_CLR                           APBH_CTRL0_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL0_TOG                           APBH_CTRL0_TOG_REG(APBH_BASE_PTR)
#define APBH_CTRL1                               APBH_CTRL1_REG(APBH_BASE_PTR)
#define APBH_CTRL1_SET                           APBH_CTRL1_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL1_CLR                           APBH_CTRL1_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL1_TOG                           APBH_CTRL1_TOG_REG(APBH_BASE_PTR)
#define APBH_CTRL2                               APBH_CTRL2_REG(APBH_BASE_PTR)
#define APBH_CTRL2_SET                           APBH_CTRL2_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL2_CLR                           APBH_CTRL2_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL2_TOG                           APBH_CTRL2_TOG_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL                        APBH_CHANNEL_CTRL_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_SET                    APBH_CHANNEL_CTRL_SET_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_CLR                    APBH_CHANNEL_CTRL_CLR_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_TOG                    APBH_CHANNEL_CTRL_TOG_REG(APBH_BASE_PTR)
#define APBH_DEVSEL                              APBH_DEVSEL_REG(APBH_BASE_PTR)
#define APBH_DMA_BURST_SIZE                      APBH_DMA_BURST_SIZE_REG(APBH_BASE_PTR)
#define APBH_DEBUG                               APBH_DEBUG_REG(APBH_BASE_PTR)
#define APBH_CH0_CURCMDAR                        APBH_CH0_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH0_NXTCMDAR                        APBH_CH0_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH0_CMD                             APBH_CH0_CMD_REG(APBH_BASE_PTR)
#define APBH_CH0_BAR                             APBH_CH0_BAR_REG(APBH_BASE_PTR)
#define APBH_CH0_SEMA                            APBH_CH0_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH0_DEBUG1                          APBH_CH0_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH0_DEBUG2                          APBH_CH0_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH1_CURCMDAR                        APBH_CH1_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH1_NXTCMDAR                        APBH_CH1_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH1_CMD                             APBH_CH1_CMD_REG(APBH_BASE_PTR)
#define APBH_CH1_BAR                             APBH_CH1_BAR_REG(APBH_BASE_PTR)
#define APBH_CH1_SEMA                            APBH_CH1_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH1_DEBUG1                          APBH_CH1_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH1_DEBUG2                          APBH_CH1_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH2_CURCMDAR                        APBH_CH2_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH2_NXTCMDAR                        APBH_CH2_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH2_CMD                             APBH_CH2_CMD_REG(APBH_BASE_PTR)
#define APBH_CH2_BAR                             APBH_CH2_BAR_REG(APBH_BASE_PTR)
#define APBH_CH2_SEMA                            APBH_CH2_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH2_DEBUG1                          APBH_CH2_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH2_DEBUG2                          APBH_CH2_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH3_CURCMDAR                        APBH_CH3_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH3_NXTCMDAR                        APBH_CH3_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH3_CMD                             APBH_CH3_CMD_REG(APBH_BASE_PTR)
#define APBH_CH3_BAR                             APBH_CH3_BAR_REG(APBH_BASE_PTR)
#define APBH_CH3_SEMA                            APBH_CH3_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH3_DEBUG1                          APBH_CH3_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH3_DEBUG2                          APBH_CH3_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH4_CURCMDAR                        APBH_CH4_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH4_NXTCMDAR                        APBH_CH4_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH4_CMD                             APBH_CH4_CMD_REG(APBH_BASE_PTR)
#define APBH_CH4_BAR                             APBH_CH4_BAR_REG(APBH_BASE_PTR)
#define APBH_CH4_SEMA                            APBH_CH4_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH4_DEBUG1                          APBH_CH4_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH4_DEBUG2                          APBH_CH4_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH5_CURCMDAR                        APBH_CH5_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH5_NXTCMDAR                        APBH_CH5_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH5_CMD                             APBH_CH5_CMD_REG(APBH_BASE_PTR)
#define APBH_CH5_BAR                             APBH_CH5_BAR_REG(APBH_BASE_PTR)
#define APBH_CH5_SEMA                            APBH_CH5_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH5_DEBUG1                          APBH_CH5_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH5_DEBUG2                          APBH_CH5_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH6_CURCMDAR                        APBH_CH6_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH6_NXTCMDAR                        APBH_CH6_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH6_CMD                             APBH_CH6_CMD_REG(APBH_BASE_PTR)
#define APBH_CH6_BAR                             APBH_CH6_BAR_REG(APBH_BASE_PTR)
#define APBH_CH6_SEMA                            APBH_CH6_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH6_DEBUG1                          APBH_CH6_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH6_DEBUG2                          APBH_CH6_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH7_CURCMDAR                        APBH_CH7_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH7_NXTCMDAR                        APBH_CH7_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH7_CMD                             APBH_CH7_CMD_REG(APBH_BASE_PTR)
#define APBH_CH7_BAR                             APBH_CH7_BAR_REG(APBH_BASE_PTR)
#define APBH_CH7_SEMA                            APBH_CH7_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH7_DEBUG1                          APBH_CH7_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH7_DEBUG2                          APBH_CH7_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH8_CURCMDAR                        APBH_CH8_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH8_NXTCMDAR                        APBH_CH8_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH8_CMD                             APBH_CH8_CMD_REG(APBH_BASE_PTR)
#define APBH_CH8_BAR                             APBH_CH8_BAR_REG(APBH_BASE_PTR)
#define APBH_CH8_SEMA                            APBH_CH8_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH8_DEBUG1                          APBH_CH8_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH8_DEBUG2                          APBH_CH8_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH9_CURCMDAR                        APBH_CH9_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH9_NXTCMDAR                        APBH_CH9_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH9_CMD                             APBH_CH9_CMD_REG(APBH_BASE_PTR)
#define APBH_CH9_BAR                             APBH_CH9_BAR_REG(APBH_BASE_PTR)
#define APBH_CH9_SEMA                            APBH_CH9_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH9_DEBUG1                          APBH_CH9_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH9_DEBUG2                          APBH_CH9_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH10_CURCMDAR                       APBH_CH10_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH10_NXTCMDAR                       APBH_CH10_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH10_CMD                            APBH_CH10_CMD_REG(APBH_BASE_PTR)
#define APBH_CH10_BAR                            APBH_CH10_BAR_REG(APBH_BASE_PTR)
#define APBH_CH10_SEMA                           APBH_CH10_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH10_DEBUG1                         APBH_CH10_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH10_DEBUG2                         APBH_CH10_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH11_CURCMDAR                       APBH_CH11_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH11_NXTCMDAR                       APBH_CH11_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH11_CMD                            APBH_CH11_CMD_REG(APBH_BASE_PTR)
#define APBH_CH11_BAR                            APBH_CH11_BAR_REG(APBH_BASE_PTR)
#define APBH_CH11_SEMA                           APBH_CH11_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH11_DEBUG1                         APBH_CH11_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH11_DEBUG2                         APBH_CH11_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH12_CURCMDAR                       APBH_CH12_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH12_NXTCMDAR                       APBH_CH12_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH12_CMD                            APBH_CH12_CMD_REG(APBH_BASE_PTR)
#define APBH_CH12_BAR                            APBH_CH12_BAR_REG(APBH_BASE_PTR)
#define APBH_CH12_SEMA                           APBH_CH12_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH12_DEBUG1                         APBH_CH12_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH12_DEBUG2                         APBH_CH12_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH13_CURCMDAR                       APBH_CH13_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH13_NXTCMDAR                       APBH_CH13_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH13_CMD                            APBH_CH13_CMD_REG(APBH_BASE_PTR)
#define APBH_CH13_BAR                            APBH_CH13_BAR_REG(APBH_BASE_PTR)
#define APBH_CH13_SEMA                           APBH_CH13_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH13_DEBUG1                         APBH_CH13_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH13_DEBUG2                         APBH_CH13_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH14_CURCMDAR                       APBH_CH14_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH14_NXTCMDAR                       APBH_CH14_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH14_CMD                            APBH_CH14_CMD_REG(APBH_BASE_PTR)
#define APBH_CH14_BAR                            APBH_CH14_BAR_REG(APBH_BASE_PTR)
#define APBH_CH14_SEMA                           APBH_CH14_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH14_DEBUG1                         APBH_CH14_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH14_DEBUG2                         APBH_CH14_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_CH15_CURCMDAR                       APBH_CH15_CURCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH15_NXTCMDAR                       APBH_CH15_NXTCMDAR_REG(APBH_BASE_PTR)
#define APBH_CH15_CMD                            APBH_CH15_CMD_REG(APBH_BASE_PTR)
#define APBH_CH15_BAR                            APBH_CH15_BAR_REG(APBH_BASE_PTR)
#define APBH_CH15_SEMA                           APBH_CH15_SEMA_REG(APBH_BASE_PTR)
#define APBH_CH15_DEBUG1                         APBH_CH15_DEBUG1_REG(APBH_BASE_PTR)
#define APBH_CH15_DEBUG2                         APBH_CH15_DEBUG2_REG(APBH_BASE_PTR)
#define APBH_VERSION                             APBH_VERSION_REG(APBH_BASE_PTR)

/*!
 * @}
 */ /* end of group APBH_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group APBH_Peripheral */


/* ----------------------------------------------------------------------------
   -- BCH
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Peripheral BCH
 * @{
 */

/** BCH - Peripheral register structure */
typedef struct BCH_MemMap {
  uint32_t CTRL;                                   /**< Hardware BCH ECC Accelerator Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0xC */
  uint32_t STATUS0;                                /**< Hardware ECC Accelerator Status Register 0, offset: 0x10 */
  uint32_t STATUS0_SET;                            /**< Hardware ECC Accelerator Status Register 0, offset: 0x14 */
  uint32_t STATUS0_CLR;                            /**< Hardware ECC Accelerator Status Register 0, offset: 0x18 */
  uint32_t STATUS0_TOG;                            /**< Hardware ECC Accelerator Status Register 0, offset: 0x1C */
  uint32_t MODE;                                   /**< Hardware ECC Accelerator Mode Register, offset: 0x20 */
  uint32_t MODE_SET;                               /**< Hardware ECC Accelerator Mode Register, offset: 0x24 */
  uint32_t MODE_CLR;                               /**< Hardware ECC Accelerator Mode Register, offset: 0x28 */
  uint32_t MODE_TOG;                               /**< Hardware ECC Accelerator Mode Register, offset: 0x2C */
  uint32_t ENCODEPTR;                              /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x30 */
  uint32_t ENCODEPTR_SET;                          /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x34 */
  uint32_t ENCODEPTR_CLR;                          /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x38 */
  uint32_t ENCODEPTR_TOG;                          /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x3C */
  uint32_t DATAPTR;                                /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x40 */
  uint32_t DATAPTR_SET;                            /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x44 */
  uint32_t DATAPTR_CLR;                            /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x48 */
  uint32_t DATAPTR_TOG;                            /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x4C */
  uint32_t METAPTR;                                /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x50 */
  uint32_t METAPTR_SET;                            /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x54 */
  uint32_t METAPTR_CLR;                            /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x58 */
  uint32_t METAPTR_TOG;                            /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x5C */
  uint8_t RESERVED_0[16];
  uint32_t LAYOUTSELECT;                           /**< Hardware ECC Accelerator Layout Select Register, offset: 0x70 */
  uint32_t LAYOUTSELECT_SET;                       /**< Hardware ECC Accelerator Layout Select Register, offset: 0x74 */
  uint32_t LAYOUTSELECT_CLR;                       /**< Hardware ECC Accelerator Layout Select Register, offset: 0x78 */
  uint32_t LAYOUTSELECT_TOG;                       /**< Hardware ECC Accelerator Layout Select Register, offset: 0x7C */
  uint32_t FLASH0LAYOUT0;                          /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x80 */
  uint32_t FLASH0LAYOUT0_SET;                      /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x84 */
  uint32_t FLASH0LAYOUT0_CLR;                      /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x88 */
  uint32_t FLASH0LAYOUT0_TOG;                      /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x8C */
  uint32_t FLASH0LAYOUT1;                          /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x90 */
  uint32_t FLASH0LAYOUT1_SET;                      /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x94 */
  uint32_t FLASH0LAYOUT1_CLR;                      /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x98 */
  uint32_t FLASH0LAYOUT1_TOG;                      /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x9C */
  uint32_t FLASH1LAYOUT0;                          /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA0 */
  uint32_t FLASH1LAYOUT0_SET;                      /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA4 */
  uint32_t FLASH1LAYOUT0_CLR;                      /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA8 */
  uint32_t FLASH1LAYOUT0_TOG;                      /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xAC */
  uint32_t FLASH1LAYOUT1;                          /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB0 */
  uint32_t FLASH1LAYOUT1_SET;                      /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB4 */
  uint32_t FLASH1LAYOUT1_CLR;                      /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB8 */
  uint32_t FLASH1LAYOUT1_TOG;                      /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xBC */
  uint32_t FLASH2LAYOUT0;                          /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC0 */
  uint32_t FLASH2LAYOUT0_SET;                      /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC4 */
  uint32_t FLASH2LAYOUT0_CLR;                      /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC8 */
  uint32_t FLASH2LAYOUT0_TOG;                      /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xCC */
  uint32_t FLASH2LAYOUT1;                          /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD0 */
  uint32_t FLASH2LAYOUT1_SET;                      /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD4 */
  uint32_t FLASH2LAYOUT1_CLR;                      /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD8 */
  uint32_t FLASH2LAYOUT1_TOG;                      /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xDC */
  uint32_t FLASH3LAYOUT0;                          /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE0 */
  uint32_t FLASH3LAYOUT0_SET;                      /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE4 */
  uint32_t FLASH3LAYOUT0_CLR;                      /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE8 */
  uint32_t FLASH3LAYOUT0_TOG;                      /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xEC */
  uint32_t FLASH3LAYOUT1;                          /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF0 */
  uint32_t FLASH3LAYOUT1_SET;                      /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF4 */
  uint32_t FLASH3LAYOUT1_CLR;                      /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF8 */
  uint32_t FLASH3LAYOUT1_TOG;                      /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xFC */
  uint32_t DEBUG0;                                 /**< Hardware BCH ECC Debug Register0, offset: 0x100 */
  uint32_t DEBUG0_SET;                             /**< Hardware BCH ECC Debug Register0, offset: 0x104 */
  uint32_t DEBUG0_CLR;                             /**< Hardware BCH ECC Debug Register0, offset: 0x108 */
  uint32_t DEBUG0_TOG;                             /**< Hardware BCH ECC Debug Register0, offset: 0x10C */
  uint32_t DBGKESREAD;                             /**< KES Debug Read Register, offset: 0x110 */
  uint32_t DBGKESREAD_SET;                         /**< KES Debug Read Register, offset: 0x114 */
  uint32_t DBGKESREAD_CLR;                         /**< KES Debug Read Register, offset: 0x118 */
  uint32_t DBGKESREAD_TOG;                         /**< KES Debug Read Register, offset: 0x11C */
  uint32_t DBGCSFEREAD;                            /**< Chien Search Debug Read Register, offset: 0x120 */
  uint32_t DBGCSFEREAD_SET;                        /**< Chien Search Debug Read Register, offset: 0x124 */
  uint32_t DBGCSFEREAD_CLR;                        /**< Chien Search Debug Read Register, offset: 0x128 */
  uint32_t DBGCSFEREAD_TOG;                        /**< Chien Search Debug Read Register, offset: 0x12C */
  uint32_t DBGSYNDGENREAD;                         /**< Syndrome Generator Debug Read Register, offset: 0x130 */
  uint32_t DBGSYNDGENREAD_SET;                     /**< Syndrome Generator Debug Read Register, offset: 0x134 */
  uint32_t DBGSYNDGENREAD_CLR;                     /**< Syndrome Generator Debug Read Register, offset: 0x138 */
  uint32_t DBGSYNDGENREAD_TOG;                     /**< Syndrome Generator Debug Read Register, offset: 0x13C */
  uint32_t DBGAHBMREAD;                            /**< Bus Master and ECC Controller Debug Read Register, offset: 0x140 */
  uint32_t DBGAHBMREAD_SET;                        /**< Bus Master and ECC Controller Debug Read Register, offset: 0x144 */
  uint32_t DBGAHBMREAD_CLR;                        /**< Bus Master and ECC Controller Debug Read Register, offset: 0x148 */
  uint32_t DBGAHBMREAD_TOG;                        /**< Bus Master and ECC Controller Debug Read Register, offset: 0x14C */
  uint32_t BLOCKNAME;                              /**< Block Name Register, offset: 0x150 */
  uint32_t BLOCKNAME_SET;                          /**< Block Name Register, offset: 0x154 */
  uint32_t BLOCKNAME_CLR;                          /**< Block Name Register, offset: 0x158 */
  uint32_t BLOCKNAME_TOG;                          /**< Block Name Register, offset: 0x15C */
  uint32_t VERSION;                                /**< BCH Version Register, offset: 0x160 */
  uint32_t VERSION_SET;                            /**< BCH Version Register, offset: 0x164 */
  uint32_t VERSION_CLR;                            /**< BCH Version Register, offset: 0x168 */
  uint32_t VERSION_TOG;                            /**< BCH Version Register, offset: 0x16C */
  uint32_t DEBUG1;                                 /**< Hardware BCH ECC Debug Register 1, offset: 0x170 */
  uint32_t DEBUG1_SET;                             /**< Hardware BCH ECC Debug Register 1, offset: 0x174 */
  uint32_t DEBUG1_CLR;                             /**< Hardware BCH ECC Debug Register 1, offset: 0x178 */
  uint32_t DEBUG1_TOG;                             /**< Hardware BCH ECC Debug Register 1, offset: 0x17C */
} volatile *BCH_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- BCH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Accessor_Macros BCH - Register accessor macros
 * @{
 */


/* BCH - Register accessors */
#define BCH_CTRL_REG(base)                       ((base)->CTRL)
#define BCH_CTRL_SET_REG(base)                   ((base)->CTRL_SET)
#define BCH_CTRL_CLR_REG(base)                   ((base)->CTRL_CLR)
#define BCH_CTRL_TOG_REG(base)                   ((base)->CTRL_TOG)
#define BCH_STATUS0_REG(base)                    ((base)->STATUS0)
#define BCH_STATUS0_SET_REG(base)                ((base)->STATUS0_SET)
#define BCH_STATUS0_CLR_REG(base)                ((base)->STATUS0_CLR)
#define BCH_STATUS0_TOG_REG(base)                ((base)->STATUS0_TOG)
#define BCH_MODE_REG(base)                       ((base)->MODE)
#define BCH_MODE_SET_REG(base)                   ((base)->MODE_SET)
#define BCH_MODE_CLR_REG(base)                   ((base)->MODE_CLR)
#define BCH_MODE_TOG_REG(base)                   ((base)->MODE_TOG)
#define BCH_ENCODEPTR_REG(base)                  ((base)->ENCODEPTR)
#define BCH_ENCODEPTR_SET_REG(base)              ((base)->ENCODEPTR_SET)
#define BCH_ENCODEPTR_CLR_REG(base)              ((base)->ENCODEPTR_CLR)
#define BCH_ENCODEPTR_TOG_REG(base)              ((base)->ENCODEPTR_TOG)
#define BCH_DATAPTR_REG(base)                    ((base)->DATAPTR)
#define BCH_DATAPTR_SET_REG(base)                ((base)->DATAPTR_SET)
#define BCH_DATAPTR_CLR_REG(base)                ((base)->DATAPTR_CLR)
#define BCH_DATAPTR_TOG_REG(base)                ((base)->DATAPTR_TOG)
#define BCH_METAPTR_REG(base)                    ((base)->METAPTR)
#define BCH_METAPTR_SET_REG(base)                ((base)->METAPTR_SET)
#define BCH_METAPTR_CLR_REG(base)                ((base)->METAPTR_CLR)
#define BCH_METAPTR_TOG_REG(base)                ((base)->METAPTR_TOG)
#define BCH_LAYOUTSELECT_REG(base)               ((base)->LAYOUTSELECT)
#define BCH_LAYOUTSELECT_SET_REG(base)           ((base)->LAYOUTSELECT_SET)
#define BCH_LAYOUTSELECT_CLR_REG(base)           ((base)->LAYOUTSELECT_CLR)
#define BCH_LAYOUTSELECT_TOG_REG(base)           ((base)->LAYOUTSELECT_TOG)
#define BCH_FLASH0LAYOUT0_REG(base)              ((base)->FLASH0LAYOUT0)
#define BCH_FLASH0LAYOUT0_SET_REG(base)          ((base)->FLASH0LAYOUT0_SET)
#define BCH_FLASH0LAYOUT0_CLR_REG(base)          ((base)->FLASH0LAYOUT0_CLR)
#define BCH_FLASH0LAYOUT0_TOG_REG(base)          ((base)->FLASH0LAYOUT0_TOG)
#define BCH_FLASH0LAYOUT1_REG(base)              ((base)->FLASH0LAYOUT1)
#define BCH_FLASH0LAYOUT1_SET_REG(base)          ((base)->FLASH0LAYOUT1_SET)
#define BCH_FLASH0LAYOUT1_CLR_REG(base)          ((base)->FLASH0LAYOUT1_CLR)
#define BCH_FLASH0LAYOUT1_TOG_REG(base)          ((base)->FLASH0LAYOUT1_TOG)
#define BCH_FLASH1LAYOUT0_REG(base)              ((base)->FLASH1LAYOUT0)
#define BCH_FLASH1LAYOUT0_SET_REG(base)          ((base)->FLASH1LAYOUT0_SET)
#define BCH_FLASH1LAYOUT0_CLR_REG(base)          ((base)->FLASH1LAYOUT0_CLR)
#define BCH_FLASH1LAYOUT0_TOG_REG(base)          ((base)->FLASH1LAYOUT0_TOG)
#define BCH_FLASH1LAYOUT1_REG(base)              ((base)->FLASH1LAYOUT1)
#define BCH_FLASH1LAYOUT1_SET_REG(base)          ((base)->FLASH1LAYOUT1_SET)
#define BCH_FLASH1LAYOUT1_CLR_REG(base)          ((base)->FLASH1LAYOUT1_CLR)
#define BCH_FLASH1LAYOUT1_TOG_REG(base)          ((base)->FLASH1LAYOUT1_TOG)
#define BCH_FLASH2LAYOUT0_REG(base)              ((base)->FLASH2LAYOUT0)
#define BCH_FLASH2LAYOUT0_SET_REG(base)          ((base)->FLASH2LAYOUT0_SET)
#define BCH_FLASH2LAYOUT0_CLR_REG(base)          ((base)->FLASH2LAYOUT0_CLR)
#define BCH_FLASH2LAYOUT0_TOG_REG(base)          ((base)->FLASH2LAYOUT0_TOG)
#define BCH_FLASH2LAYOUT1_REG(base)              ((base)->FLASH2LAYOUT1)
#define BCH_FLASH2LAYOUT1_SET_REG(base)          ((base)->FLASH2LAYOUT1_SET)
#define BCH_FLASH2LAYOUT1_CLR_REG(base)          ((base)->FLASH2LAYOUT1_CLR)
#define BCH_FLASH2LAYOUT1_TOG_REG(base)          ((base)->FLASH2LAYOUT1_TOG)
#define BCH_FLASH3LAYOUT0_REG(base)              ((base)->FLASH3LAYOUT0)
#define BCH_FLASH3LAYOUT0_SET_REG(base)          ((base)->FLASH3LAYOUT0_SET)
#define BCH_FLASH3LAYOUT0_CLR_REG(base)          ((base)->FLASH3LAYOUT0_CLR)
#define BCH_FLASH3LAYOUT0_TOG_REG(base)          ((base)->FLASH3LAYOUT0_TOG)
#define BCH_FLASH3LAYOUT1_REG(base)              ((base)->FLASH3LAYOUT1)
#define BCH_FLASH3LAYOUT1_SET_REG(base)          ((base)->FLASH3LAYOUT1_SET)
#define BCH_FLASH3LAYOUT1_CLR_REG(base)          ((base)->FLASH3LAYOUT1_CLR)
#define BCH_FLASH3LAYOUT1_TOG_REG(base)          ((base)->FLASH3LAYOUT1_TOG)
#define BCH_DEBUG0_REG(base)                     ((base)->DEBUG0)
#define BCH_DEBUG0_SET_REG(base)                 ((base)->DEBUG0_SET)
#define BCH_DEBUG0_CLR_REG(base)                 ((base)->DEBUG0_CLR)
#define BCH_DEBUG0_TOG_REG(base)                 ((base)->DEBUG0_TOG)
#define BCH_DBGKESREAD_REG(base)                 ((base)->DBGKESREAD)
#define BCH_DBGKESREAD_SET_REG(base)             ((base)->DBGKESREAD_SET)
#define BCH_DBGKESREAD_CLR_REG(base)             ((base)->DBGKESREAD_CLR)
#define BCH_DBGKESREAD_TOG_REG(base)             ((base)->DBGKESREAD_TOG)
#define BCH_DBGCSFEREAD_REG(base)                ((base)->DBGCSFEREAD)
#define BCH_DBGCSFEREAD_SET_REG(base)            ((base)->DBGCSFEREAD_SET)
#define BCH_DBGCSFEREAD_CLR_REG(base)            ((base)->DBGCSFEREAD_CLR)
#define BCH_DBGCSFEREAD_TOG_REG(base)            ((base)->DBGCSFEREAD_TOG)
#define BCH_DBGSYNDGENREAD_REG(base)             ((base)->DBGSYNDGENREAD)
#define BCH_DBGSYNDGENREAD_SET_REG(base)         ((base)->DBGSYNDGENREAD_SET)
#define BCH_DBGSYNDGENREAD_CLR_REG(base)         ((base)->DBGSYNDGENREAD_CLR)
#define BCH_DBGSYNDGENREAD_TOG_REG(base)         ((base)->DBGSYNDGENREAD_TOG)
#define BCH_DBGAHBMREAD_REG(base)                ((base)->DBGAHBMREAD)
#define BCH_DBGAHBMREAD_SET_REG(base)            ((base)->DBGAHBMREAD_SET)
#define BCH_DBGAHBMREAD_CLR_REG(base)            ((base)->DBGAHBMREAD_CLR)
#define BCH_DBGAHBMREAD_TOG_REG(base)            ((base)->DBGAHBMREAD_TOG)
#define BCH_BLOCKNAME_REG(base)                  ((base)->BLOCKNAME)
#define BCH_BLOCKNAME_SET_REG(base)              ((base)->BLOCKNAME_SET)
#define BCH_BLOCKNAME_CLR_REG(base)              ((base)->BLOCKNAME_CLR)
#define BCH_BLOCKNAME_TOG_REG(base)              ((base)->BLOCKNAME_TOG)
#define BCH_VERSION_REG(base)                    ((base)->VERSION)
#define BCH_VERSION_SET_REG(base)                ((base)->VERSION_SET)
#define BCH_VERSION_CLR_REG(base)                ((base)->VERSION_CLR)
#define BCH_VERSION_TOG_REG(base)                ((base)->VERSION_TOG)
#define BCH_DEBUG1_REG(base)                     ((base)->DEBUG1)
#define BCH_DEBUG1_SET_REG(base)                 ((base)->DEBUG1_SET)
#define BCH_DEBUG1_CLR_REG(base)                 ((base)->DEBUG1_CLR)
#define BCH_DEBUG1_TOG_REG(base)                 ((base)->DEBUG1_TOG)

/*!
 * @}
 */ /* end of group BCH_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- BCH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Masks BCH Register Masks
 * @{
 */

/*! @name CTRL - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_COMPLETE_IRQ_MASK               (0x1U)
#define BCH_CTRL_COMPLETE_IRQ_SHIFT              (0U)
#define BCH_CTRL_RSVD0_MASK                      (0x2U)
#define BCH_CTRL_RSVD0_SHIFT                     (1U)
#define BCH_CTRL_DEBUG_STALL_IRQ_MASK            (0x4U)
#define BCH_CTRL_DEBUG_STALL_IRQ_SHIFT           (2U)
#define BCH_CTRL_BM_ERROR_IRQ_MASK               (0x8U)
#define BCH_CTRL_BM_ERROR_IRQ_SHIFT              (3U)
#define BCH_CTRL_RSVD1_MASK                      (0xF0U)
#define BCH_CTRL_RSVD1_SHIFT                     (4U)
#define BCH_CTRL_RSVD1(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD1_SHIFT)) & BCH_CTRL_RSVD1_MASK)
#define BCH_CTRL_COMPLETE_IRQ_EN_MASK            (0x100U)
#define BCH_CTRL_COMPLETE_IRQ_EN_SHIFT           (8U)
#define BCH_CTRL_RSVD2_MASK                      (0x200U)
#define BCH_CTRL_RSVD2_SHIFT                     (9U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_MASK         (0x400U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_SHIFT        (10U)
#define BCH_CTRL_RSVD3_MASK                      (0xF800U)
#define BCH_CTRL_RSVD3_SHIFT                     (11U)
#define BCH_CTRL_RSVD3(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD3_SHIFT)) & BCH_CTRL_RSVD3_MASK)
#define BCH_CTRL_M2M_ENABLE_MASK                 (0x10000U)
#define BCH_CTRL_M2M_ENABLE_SHIFT                (16U)
#define BCH_CTRL_M2M_ENCODE_MASK                 (0x20000U)
#define BCH_CTRL_M2M_ENCODE_SHIFT                (17U)
#define BCH_CTRL_M2M_LAYOUT_MASK                 (0xC0000U)
#define BCH_CTRL_M2M_LAYOUT_SHIFT                (18U)
#define BCH_CTRL_M2M_LAYOUT(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_M2M_LAYOUT_SHIFT)) & BCH_CTRL_M2M_LAYOUT_MASK)
#define BCH_CTRL_RSVD4_MASK                      (0x300000U)
#define BCH_CTRL_RSVD4_SHIFT                     (20U)
#define BCH_CTRL_RSVD4(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD4_SHIFT)) & BCH_CTRL_RSVD4_MASK)
#define BCH_CTRL_DEBUGSYNDROME_MASK              (0x400000U)
#define BCH_CTRL_DEBUGSYNDROME_SHIFT             (22U)
#define BCH_CTRL_RSVD5_MASK                      (0x3F800000U)
#define BCH_CTRL_RSVD5_SHIFT                     (23U)
#define BCH_CTRL_RSVD5(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD5_SHIFT)) & BCH_CTRL_RSVD5_MASK)
#define BCH_CTRL_CLKGATE_MASK                    (0x40000000U)
#define BCH_CTRL_CLKGATE_SHIFT                   (30U)
#define BCH_CTRL_SFTRST_MASK                     (0x80000000U)
#define BCH_CTRL_SFTRST_SHIFT                    (31U)
/*! @} */

/*! @name CTRL_SET - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_SET_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_SET_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_SET_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_SET_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_SET_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_SET_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_SET_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_SET_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_SET_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD1_SHIFT)) & BCH_CTRL_SET_RSVD1_MASK)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_SET_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_SET_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_SET_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_SET_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_SET_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD3_SHIFT)) & BCH_CTRL_SET_RSVD3_MASK)
#define BCH_CTRL_SET_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_SET_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_SET_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_SET_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_SET_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_SET_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_SET_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_M2M_LAYOUT_SHIFT)) & BCH_CTRL_SET_M2M_LAYOUT_MASK)
#define BCH_CTRL_SET_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_SET_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_SET_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD4_SHIFT)) & BCH_CTRL_SET_RSVD4_MASK)
#define BCH_CTRL_SET_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_SET_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_SET_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_SET_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_SET_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD5_SHIFT)) & BCH_CTRL_SET_RSVD5_MASK)
#define BCH_CTRL_SET_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_SET_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_SET_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_SET_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name CTRL_CLR - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_CLR_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_CLR_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_CLR_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_CLR_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_CLR_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_CLR_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD1_SHIFT)) & BCH_CTRL_CLR_RSVD1_MASK)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_CLR_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_CLR_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_CLR_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_CLR_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_CLR_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD3_SHIFT)) & BCH_CTRL_CLR_RSVD3_MASK)
#define BCH_CTRL_CLR_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_CLR_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_CLR_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_CLR_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_CLR_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_CLR_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_CLR_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_M2M_LAYOUT_SHIFT)) & BCH_CTRL_CLR_M2M_LAYOUT_MASK)
#define BCH_CTRL_CLR_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_CLR_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_CLR_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD4_SHIFT)) & BCH_CTRL_CLR_RSVD4_MASK)
#define BCH_CTRL_CLR_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_CLR_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_CLR_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_CLR_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_CLR_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD5_SHIFT)) & BCH_CTRL_CLR_RSVD5_MASK)
#define BCH_CTRL_CLR_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_CLR_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_CLR_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_CLR_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name CTRL_TOG - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_TOG_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_TOG_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_TOG_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_TOG_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_TOG_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_TOG_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD1_SHIFT)) & BCH_CTRL_TOG_RSVD1_MASK)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_TOG_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_TOG_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_TOG_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_TOG_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_TOG_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD3_SHIFT)) & BCH_CTRL_TOG_RSVD3_MASK)
#define BCH_CTRL_TOG_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_TOG_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_TOG_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_TOG_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_TOG_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_TOG_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_TOG_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_M2M_LAYOUT_SHIFT)) & BCH_CTRL_TOG_M2M_LAYOUT_MASK)
#define BCH_CTRL_TOG_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_TOG_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_TOG_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD4_SHIFT)) & BCH_CTRL_TOG_RSVD4_MASK)
#define BCH_CTRL_TOG_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_TOG_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_TOG_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_TOG_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_TOG_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD5_SHIFT)) & BCH_CTRL_TOG_RSVD5_MASK)
#define BCH_CTRL_TOG_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_TOG_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_TOG_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_TOG_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name STATUS0 - Hardware ECC Accelerator Status Register 0 */
/*! @{ */
#define BCH_STATUS0_RSVD0_MASK                   (0x3U)
#define BCH_STATUS0_RSVD0_SHIFT                  (0U)
#define BCH_STATUS0_RSVD0(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD0_SHIFT)) & BCH_STATUS0_RSVD0_MASK)
#define BCH_STATUS0_UNCORRECTABLE_MASK           (0x4U)
#define BCH_STATUS0_UNCORRECTABLE_SHIFT          (2U)
#define BCH_STATUS0_CORRECTED_MASK               (0x8U)
#define BCH_STATUS0_CORRECTED_SHIFT              (3U)
#define BCH_STATUS0_ALLONES_MASK                 (0x10U)
#define BCH_STATUS0_ALLONES_SHIFT                (4U)
#define BCH_STATUS0_RSVD1_MASK                   (0xE0U)
#define BCH_STATUS0_RSVD1_SHIFT                  (5U)
#define BCH_STATUS0_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD1_SHIFT)) & BCH_STATUS0_RSVD1_MASK)
#define BCH_STATUS0_STATUS_BLK0_MASK             (0xFF00U)
#define BCH_STATUS0_STATUS_BLK0_SHIFT            (8U)
/*! STATUS_BLK0
 *  0b00000000..No errors found on block.
 *  0b00000001..One error found on block.
 *  0b00000010..One errors found on block.
 *  0b00000011..One errors found on block.
 *  0b00000100..One errors found on block.
 *  0b11111110..Block exhibited uncorrectable errors.
 *  0b11111111..Page is erased.
 */
#define BCH_STATUS0_STATUS_BLK0(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_STATUS_BLK0_SHIFT)) & BCH_STATUS0_STATUS_BLK0_MASK)
#define BCH_STATUS0_COMPLETED_CE_MASK            (0xF0000U)
#define BCH_STATUS0_COMPLETED_CE_SHIFT           (16U)
#define BCH_STATUS0_COMPLETED_CE(x)              (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_COMPLETED_CE_SHIFT)) & BCH_STATUS0_COMPLETED_CE_MASK)
#define BCH_STATUS0_HANDLE_MASK                  (0xFFF00000U)
#define BCH_STATUS0_HANDLE_SHIFT                 (20U)
#define BCH_STATUS0_HANDLE(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_HANDLE_SHIFT)) & BCH_STATUS0_HANDLE_MASK)
/*! @} */

/*! @name STATUS0_SET - Hardware ECC Accelerator Status Register 0 */
/*! @{ */
#define BCH_STATUS0_SET_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_SET_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_SET_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_RSVD0_SHIFT)) & BCH_STATUS0_SET_RSVD0_MASK)
#define BCH_STATUS0_SET_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_SET_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_SET_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_SET_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_SET_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_SET_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_SET_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_SET_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_SET_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_RSVD1_SHIFT)) & BCH_STATUS0_SET_RSVD1_MASK)
#define BCH_STATUS0_SET_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_SET_STATUS_BLK0_SHIFT        (8U)
/*! STATUS_BLK0
 *  0b00000000..No errors found on block.
 *  0b00000001..One error found on block.
 *  0b00000010..One errors found on block.
 *  0b00000011..One errors found on block.
 *  0b00000100..One errors found on block.
 *  0b11111110..Block exhibited uncorrectable errors.
 *  0b11111111..Page is erased.
 */
#define BCH_STATUS0_SET_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_STATUS_BLK0_SHIFT)) & BCH_STATUS0_SET_STATUS_BLK0_MASK)
#define BCH_STATUS0_SET_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_SET_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_SET_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_COMPLETED_CE_SHIFT)) & BCH_STATUS0_SET_COMPLETED_CE_MASK)
#define BCH_STATUS0_SET_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_SET_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_SET_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_SET_HANDLE_SHIFT)) & BCH_STATUS0_SET_HANDLE_MASK)
/*! @} */

/*! @name STATUS0_CLR - Hardware ECC Accelerator Status Register 0 */
/*! @{ */
#define BCH_STATUS0_CLR_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_CLR_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_CLR_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_RSVD0_SHIFT)) & BCH_STATUS0_CLR_RSVD0_MASK)
#define BCH_STATUS0_CLR_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_CLR_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_CLR_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_CLR_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_CLR_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_CLR_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_CLR_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_CLR_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_CLR_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_RSVD1_SHIFT)) & BCH_STATUS0_CLR_RSVD1_MASK)
#define BCH_STATUS0_CLR_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_CLR_STATUS_BLK0_SHIFT        (8U)
/*! STATUS_BLK0
 *  0b00000000..No errors found on block.
 *  0b00000001..One error found on block.
 *  0b00000010..One errors found on block.
 *  0b00000011..One errors found on block.
 *  0b00000100..One errors found on block.
 *  0b11111110..Block exhibited uncorrectable errors.
 *  0b11111111..Page is erased.
 */
#define BCH_STATUS0_CLR_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_STATUS_BLK0_SHIFT)) & BCH_STATUS0_CLR_STATUS_BLK0_MASK)
#define BCH_STATUS0_CLR_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_CLR_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_CLR_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_COMPLETED_CE_SHIFT)) & BCH_STATUS0_CLR_COMPLETED_CE_MASK)
#define BCH_STATUS0_CLR_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_CLR_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_CLR_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_CLR_HANDLE_SHIFT)) & BCH_STATUS0_CLR_HANDLE_MASK)
/*! @} */

/*! @name STATUS0_TOG - Hardware ECC Accelerator Status Register 0 */
/*! @{ */
#define BCH_STATUS0_TOG_RSVD0_MASK               (0x3U)
#define BCH_STATUS0_TOG_RSVD0_SHIFT              (0U)
#define BCH_STATUS0_TOG_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_RSVD0_SHIFT)) & BCH_STATUS0_TOG_RSVD0_MASK)
#define BCH_STATUS0_TOG_UNCORRECTABLE_MASK       (0x4U)
#define BCH_STATUS0_TOG_UNCORRECTABLE_SHIFT      (2U)
#define BCH_STATUS0_TOG_CORRECTED_MASK           (0x8U)
#define BCH_STATUS0_TOG_CORRECTED_SHIFT          (3U)
#define BCH_STATUS0_TOG_ALLONES_MASK             (0x10U)
#define BCH_STATUS0_TOG_ALLONES_SHIFT            (4U)
#define BCH_STATUS0_TOG_RSVD1_MASK               (0xE0U)
#define BCH_STATUS0_TOG_RSVD1_SHIFT              (5U)
#define BCH_STATUS0_TOG_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_RSVD1_SHIFT)) & BCH_STATUS0_TOG_RSVD1_MASK)
#define BCH_STATUS0_TOG_STATUS_BLK0_MASK         (0xFF00U)
#define BCH_STATUS0_TOG_STATUS_BLK0_SHIFT        (8U)
/*! STATUS_BLK0
 *  0b00000000..No errors found on block.
 *  0b00000001..One error found on block.
 *  0b00000010..One errors found on block.
 *  0b00000011..One errors found on block.
 *  0b00000100..One errors found on block.
 *  0b11111110..Block exhibited uncorrectable errors.
 *  0b11111111..Page is erased.
 */
#define BCH_STATUS0_TOG_STATUS_BLK0(x)           (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_STATUS_BLK0_SHIFT)) & BCH_STATUS0_TOG_STATUS_BLK0_MASK)
#define BCH_STATUS0_TOG_COMPLETED_CE_MASK        (0xF0000U)
#define BCH_STATUS0_TOG_COMPLETED_CE_SHIFT       (16U)
#define BCH_STATUS0_TOG_COMPLETED_CE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_COMPLETED_CE_SHIFT)) & BCH_STATUS0_TOG_COMPLETED_CE_MASK)
#define BCH_STATUS0_TOG_HANDLE_MASK              (0xFFF00000U)
#define BCH_STATUS0_TOG_HANDLE_SHIFT             (20U)
#define BCH_STATUS0_TOG_HANDLE(x)                (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_TOG_HANDLE_SHIFT)) & BCH_STATUS0_TOG_HANDLE_MASK)
/*! @} */

/*! @name MODE - Hardware ECC Accelerator Mode Register */
/*! @{ */
#define BCH_MODE_ERASE_THRESHOLD_MASK            (0xFFU)
#define BCH_MODE_ERASE_THRESHOLD_SHIFT           (0U)
#define BCH_MODE_ERASE_THRESHOLD(x)              (((uint32_t)(((uint32_t)(x)) << BCH_MODE_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_ERASE_THRESHOLD_MASK)
#define BCH_MODE_RSVD_MASK                       (0xFFFFFF00U)
#define BCH_MODE_RSVD_SHIFT                      (8U)
#define BCH_MODE_RSVD(x)                         (((uint32_t)(((uint32_t)(x)) << BCH_MODE_RSVD_SHIFT)) & BCH_MODE_RSVD_MASK)
/*! @} */

/*! @name MODE_SET - Hardware ECC Accelerator Mode Register */
/*! @{ */
#define BCH_MODE_SET_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_SET_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_SET_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_SET_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_SET_ERASE_THRESHOLD_MASK)
#define BCH_MODE_SET_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_SET_RSVD_SHIFT                  (8U)
#define BCH_MODE_SET_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_SET_RSVD_SHIFT)) & BCH_MODE_SET_RSVD_MASK)
/*! @} */

/*! @name MODE_CLR - Hardware ECC Accelerator Mode Register */
/*! @{ */
#define BCH_MODE_CLR_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_CLR_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_CLR_ERASE_THRESHOLD_MASK)
#define BCH_MODE_CLR_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_CLR_RSVD_SHIFT                  (8U)
#define BCH_MODE_CLR_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_CLR_RSVD_SHIFT)) & BCH_MODE_CLR_RSVD_MASK)
/*! @} */

/*! @name MODE_TOG - Hardware ECC Accelerator Mode Register */
/*! @{ */
#define BCH_MODE_TOG_ERASE_THRESHOLD_MASK        (0xFFU)
#define BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT       (0U)
#define BCH_MODE_TOG_ERASE_THRESHOLD(x)          (((uint32_t)(((uint32_t)(x)) << BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_TOG_ERASE_THRESHOLD_MASK)
#define BCH_MODE_TOG_RSVD_MASK                   (0xFFFFFF00U)
#define BCH_MODE_TOG_RSVD_SHIFT                  (8U)
#define BCH_MODE_TOG_RSVD(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_MODE_TOG_RSVD_SHIFT)) & BCH_MODE_TOG_RSVD_MASK)
/*! @} */

/*! @name ENCODEPTR - Hardware BCH ECC Loopback Encode Buffer Register */
/*! @{ */
#define BCH_ENCODEPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define BCH_ENCODEPTR_ADDR_SHIFT                 (0U)
#define BCH_ENCODEPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_ADDR_SHIFT)) & BCH_ENCODEPTR_ADDR_MASK)
/*! @} */

/*! @name ENCODEPTR_SET - Hardware BCH ECC Loopback Encode Buffer Register */
/*! @{ */
#define BCH_ENCODEPTR_SET_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_SET_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_SET_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_SET_ADDR_SHIFT)) & BCH_ENCODEPTR_SET_ADDR_MASK)
/*! @} */

/*! @name ENCODEPTR_CLR - Hardware BCH ECC Loopback Encode Buffer Register */
/*! @{ */
#define BCH_ENCODEPTR_CLR_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_CLR_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_CLR_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_CLR_ADDR_SHIFT)) & BCH_ENCODEPTR_CLR_ADDR_MASK)
/*! @} */

/*! @name ENCODEPTR_TOG - Hardware BCH ECC Loopback Encode Buffer Register */
/*! @{ */
#define BCH_ENCODEPTR_TOG_ADDR_MASK              (0xFFFFFFFFU)
#define BCH_ENCODEPTR_TOG_ADDR_SHIFT             (0U)
#define BCH_ENCODEPTR_TOG_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_TOG_ADDR_SHIFT)) & BCH_ENCODEPTR_TOG_ADDR_MASK)
/*! @} */

/*! @name DATAPTR - Hardware BCH ECC Loopback Data Buffer Register */
/*! @{ */
#define BCH_DATAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_DATAPTR_ADDR_SHIFT                   (0U)
#define BCH_DATAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_ADDR_SHIFT)) & BCH_DATAPTR_ADDR_MASK)
/*! @} */

/*! @name DATAPTR_SET - Hardware BCH ECC Loopback Data Buffer Register */
/*! @{ */
#define BCH_DATAPTR_SET_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_SET_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_SET_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_SET_ADDR_SHIFT)) & BCH_DATAPTR_SET_ADDR_MASK)
/*! @} */

/*! @name DATAPTR_CLR - Hardware BCH ECC Loopback Data Buffer Register */
/*! @{ */
#define BCH_DATAPTR_CLR_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_CLR_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_CLR_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_CLR_ADDR_SHIFT)) & BCH_DATAPTR_CLR_ADDR_MASK)
/*! @} */

/*! @name DATAPTR_TOG - Hardware BCH ECC Loopback Data Buffer Register */
/*! @{ */
#define BCH_DATAPTR_TOG_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_DATAPTR_TOG_ADDR_SHIFT               (0U)
#define BCH_DATAPTR_TOG_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_TOG_ADDR_SHIFT)) & BCH_DATAPTR_TOG_ADDR_MASK)
/*! @} */

/*! @name METAPTR - Hardware BCH ECC Loopback Metadata Buffer Register */
/*! @{ */
#define BCH_METAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_METAPTR_ADDR_SHIFT                   (0U)
#define BCH_METAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_ADDR_SHIFT)) & BCH_METAPTR_ADDR_MASK)
/*! @} */

/*! @name METAPTR_SET - Hardware BCH ECC Loopback Metadata Buffer Register */
/*! @{ */
#define BCH_METAPTR_SET_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_SET_ADDR_SHIFT               (0U)
#define BCH_METAPTR_SET_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_SET_ADDR_SHIFT)) & BCH_METAPTR_SET_ADDR_MASK)
/*! @} */

/*! @name METAPTR_CLR - Hardware BCH ECC Loopback Metadata Buffer Register */
/*! @{ */
#define BCH_METAPTR_CLR_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_CLR_ADDR_SHIFT               (0U)
#define BCH_METAPTR_CLR_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_CLR_ADDR_SHIFT)) & BCH_METAPTR_CLR_ADDR_MASK)
/*! @} */

/*! @name METAPTR_TOG - Hardware BCH ECC Loopback Metadata Buffer Register */
/*! @{ */
#define BCH_METAPTR_TOG_ADDR_MASK                (0xFFFFFFFFU)
#define BCH_METAPTR_TOG_ADDR_SHIFT               (0U)
#define BCH_METAPTR_TOG_ADDR(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_TOG_ADDR_SHIFT)) & BCH_METAPTR_TOG_ADDR_MASK)
/*! @} */

/*! @name LAYOUTSELECT - Hardware ECC Accelerator Layout Select Register */
/*! @{ */
#define BCH_LAYOUTSELECT_CS0_SELECT_MASK         (0x3U)
#define BCH_LAYOUTSELECT_CS0_SELECT_SHIFT        (0U)
#define BCH_LAYOUTSELECT_CS0_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS1_SELECT_MASK         (0xCU)
#define BCH_LAYOUTSELECT_CS1_SELECT_SHIFT        (2U)
#define BCH_LAYOUTSELECT_CS1_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS2_SELECT_MASK         (0x30U)
#define BCH_LAYOUTSELECT_CS2_SELECT_SHIFT        (4U)
#define BCH_LAYOUTSELECT_CS2_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS3_SELECT_MASK         (0xC0U)
#define BCH_LAYOUTSELECT_CS3_SELECT_SHIFT        (6U)
#define BCH_LAYOUTSELECT_CS3_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS4_SELECT_MASK         (0x300U)
#define BCH_LAYOUTSELECT_CS4_SELECT_SHIFT        (8U)
#define BCH_LAYOUTSELECT_CS4_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS5_SELECT_MASK         (0xC00U)
#define BCH_LAYOUTSELECT_CS5_SELECT_SHIFT        (10U)
#define BCH_LAYOUTSELECT_CS5_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS6_SELECT_MASK         (0x3000U)
#define BCH_LAYOUTSELECT_CS6_SELECT_SHIFT        (12U)
#define BCH_LAYOUTSELECT_CS6_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS7_SELECT_MASK         (0xC000U)
#define BCH_LAYOUTSELECT_CS7_SELECT_SHIFT        (14U)
#define BCH_LAYOUTSELECT_CS7_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS8_SELECT_MASK         (0x30000U)
#define BCH_LAYOUTSELECT_CS8_SELECT_SHIFT        (16U)
#define BCH_LAYOUTSELECT_CS8_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS9_SELECT_MASK         (0xC0000U)
#define BCH_LAYOUTSELECT_CS9_SELECT_SHIFT        (18U)
#define BCH_LAYOUTSELECT_CS9_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS10_SELECT_MASK        (0x300000U)
#define BCH_LAYOUTSELECT_CS10_SELECT_SHIFT       (20U)
#define BCH_LAYOUTSELECT_CS10_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS11_SELECT_MASK        (0xC00000U)
#define BCH_LAYOUTSELECT_CS11_SELECT_SHIFT       (22U)
#define BCH_LAYOUTSELECT_CS11_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS12_SELECT_MASK        (0x3000000U)
#define BCH_LAYOUTSELECT_CS12_SELECT_SHIFT       (24U)
#define BCH_LAYOUTSELECT_CS12_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS13_SELECT_MASK        (0xC000000U)
#define BCH_LAYOUTSELECT_CS13_SELECT_SHIFT       (26U)
#define BCH_LAYOUTSELECT_CS13_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS14_SELECT_MASK        (0x30000000U)
#define BCH_LAYOUTSELECT_CS14_SELECT_SHIFT       (28U)
#define BCH_LAYOUTSELECT_CS14_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS15_SELECT_MASK        (0xC0000000U)
#define BCH_LAYOUTSELECT_CS15_SELECT_SHIFT       (30U)
#define BCH_LAYOUTSELECT_CS15_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS15_SELECT_MASK)
/*! @} */

/*! @name LAYOUTSELECT_SET - Hardware ECC Accelerator Layout Select Register */
/*! @{ */
#define BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_SET_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_SET_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_SET_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_SET_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_SET_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_SET_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_SET_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_SET_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_SET_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_SET_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_SET_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_SET_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_SET_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_SET_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_SET_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_SET_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK)
/*! @} */

/*! @name LAYOUTSELECT_CLR - Hardware ECC Accelerator Layout Select Register */
/*! @{ */
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_CLR_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_CLR_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_CLR_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_CLR_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_CLR_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_CLR_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_CLR_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_CLR_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_CLR_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_CLR_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_CLR_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_CLR_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_CLR_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_CLR_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_CLR_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_CLR_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK)
/*! @} */

/*! @name LAYOUTSELECT_TOG - Hardware ECC Accelerator Layout Select Register */
/*! @{ */
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK     (0x3U)
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT    (0U)
#define BCH_LAYOUTSELECT_TOG_CS0_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK     (0xCU)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT    (2U)
#define BCH_LAYOUTSELECT_TOG_CS1_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK     (0x30U)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT    (4U)
#define BCH_LAYOUTSELECT_TOG_CS2_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK     (0xC0U)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT    (6U)
#define BCH_LAYOUTSELECT_TOG_CS3_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK     (0x300U)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT    (8U)
#define BCH_LAYOUTSELECT_TOG_CS4_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK     (0xC00U)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT    (10U)
#define BCH_LAYOUTSELECT_TOG_CS5_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK     (0x3000U)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT    (12U)
#define BCH_LAYOUTSELECT_TOG_CS6_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK     (0xC000U)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT    (14U)
#define BCH_LAYOUTSELECT_TOG_CS7_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK     (0x30000U)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT    (16U)
#define BCH_LAYOUTSELECT_TOG_CS8_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK     (0xC0000U)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT    (18U)
#define BCH_LAYOUTSELECT_TOG_CS9_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK    (0x300000U)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT   (20U)
#define BCH_LAYOUTSELECT_TOG_CS10_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK    (0xC00000U)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT   (22U)
#define BCH_LAYOUTSELECT_TOG_CS11_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK    (0x3000000U)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT   (24U)
#define BCH_LAYOUTSELECT_TOG_CS12_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK    (0xC000000U)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT   (26U)
#define BCH_LAYOUTSELECT_TOG_CS13_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK    (0x30000000U)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT   (28U)
#define BCH_LAYOUTSELECT_TOG_CS14_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK    (0xC0000000U)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT   (30U)
#define BCH_LAYOUTSELECT_TOG_CS15_SELECT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK)
/*! @} */

/*! @name FLASH0LAYOUT0 - Hardware BCH ECC Flash 0 Layout 0 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH0LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH0LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH0LAYOUT0_SET - Hardware BCH ECC Flash 0 Layout 0 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH0LAYOUT0_CLR - Hardware BCH ECC Flash 0 Layout 0 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH0LAYOUT0_TOG - Hardware BCH ECC Flash 0 Layout 0 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH0LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH0LAYOUT1 - Hardware BCH ECC Flash 0 Layout 1 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH0LAYOUT1_SET - Hardware BCH ECC Flash 0 Layout 1 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH0LAYOUT1_CLR - Hardware BCH ECC Flash 0 Layout 1 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH0LAYOUT1_TOG - Hardware BCH ECC Flash 0 Layout 1 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH0LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH1LAYOUT0 - Hardware BCH ECC Flash 1 Layout 0 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH1LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH1LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH1LAYOUT0_SET - Hardware BCH ECC Flash 1 Layout 0 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH1LAYOUT0_CLR - Hardware BCH ECC Flash 1 Layout 0 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH1LAYOUT0_TOG - Hardware BCH ECC Flash 1 Layout 0 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH1LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH1LAYOUT1 - Hardware BCH ECC Flash 1 Layout 1 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH1LAYOUT1_SET - Hardware BCH ECC Flash 1 Layout 1 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH1LAYOUT1_CLR - Hardware BCH ECC Flash 1 Layout 1 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH1LAYOUT1_TOG - Hardware BCH ECC Flash 1 Layout 1 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH1LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH2LAYOUT0 - Hardware BCH ECC Flash 2 Layout 0 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH2LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH2LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH2LAYOUT0_SET - Hardware BCH ECC Flash 2 Layout 0 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH2LAYOUT0_CLR - Hardware BCH ECC Flash 2 Layout 0 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH2LAYOUT0_TOG - Hardware BCH ECC Flash 2 Layout 0 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH2LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH2LAYOUT1 - Hardware BCH ECC Flash 2 Layout 1 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH2LAYOUT1_SET - Hardware BCH ECC Flash 2 Layout 1 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH2LAYOUT1_CLR - Hardware BCH ECC Flash 2 Layout 1 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH2LAYOUT1_TOG - Hardware BCH ECC Flash 2 Layout 1 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH2LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH3LAYOUT0 - Hardware BCH ECC Flash 3 Layout 0 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH3LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH3LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH3LAYOUT0_SET - Hardware BCH ECC Flash 3 Layout 0 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_SET_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_SET_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT0_SET_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_SET_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_SET_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_SET_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH3LAYOUT0_CLR - Hardware BCH ECC Flash 3 Layout 0 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_CLR_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT0_CLR_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_CLR_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_CLR_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH3LAYOUT0_TOG - Hardware BCH ECC Flash 3 Layout 0 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT0_TOG_ECC0_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT         (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT0_TOG_ECC0(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK     (0xFF0000U)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT0_TOG_META_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK       (0xFF000000U)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT      (24U)
#define BCH_FLASH3LAYOUT0_TOG_NBLOCKS(x)         (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH3LAYOUT1 - Hardware BCH ECC Flash 3 Layout 1 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH3LAYOUT1_SET - Hardware BCH ECC Flash 3 Layout 1 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_SET_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_SET_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT1_SET_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_SET_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_SET_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH3LAYOUT1_CLR - Hardware BCH ECC Flash 3 Layout 1 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_CLR_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT1_CLR_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH3LAYOUT1_TOG - Hardware BCH ECC Flash 3 Layout 1 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK    (0x3FFU)
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT   (0U)
#define BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE(x)      (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_MASK (0x400U)
#define BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_SHIFT (10U)
#define BCH_FLASH3LAYOUT1_TOG_ECCN_MASK          (0xF800U)
#define BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT         (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT1_TOG_ECCN(x)            (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK     (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT    (16U)
#define BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE(x)       (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK)
/*! @} */

/*! @name DEBUG0 - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_DEBUG_REG_SELECT_MASK         (0x3FU)
#define BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT        (0U)
#define BCH_DEBUG0_DEBUG_REG_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_RSVD0_MASK                    (0xC0U)
#define BCH_DEBUG0_RSVD0_SHIFT                   (6U)
#define BCH_DEBUG0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD0_SHIFT)) & BCH_DEBUG0_RSVD0_MASK)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_MASK       (0x100U)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_SHIFT      (8U)
#define BCH_DEBUG0_KES_DEBUG_STALL_MASK          (0x200U)
#define BCH_DEBUG0_KES_DEBUG_STALL_SHIFT         (9U)
#define BCH_DEBUG0_KES_DEBUG_STEP_MASK           (0x400U)
#define BCH_DEBUG0_KES_DEBUG_STEP_SHIFT          (10U)
#define BCH_DEBUG0_KES_STANDALONE_MASK           (0x800U)
#define BCH_DEBUG0_KES_STANDALONE_SHIFT          (11U)
#define BCH_DEBUG0_KES_DEBUG_KICK_MASK           (0x1000U)
#define BCH_DEBUG0_KES_DEBUG_KICK_SHIFT          (12U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_MASK         (0x2000U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_SHIFT        (13U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_MASK   (0x4000U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_SHIFT  (14U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_MASK     (0x8000U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_SHIFT    (15U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL(x)  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_RSVD1_MASK                    (0xFE000000U)
#define BCH_DEBUG0_RSVD1_SHIFT                   (25U)
#define BCH_DEBUG0_RSVD1(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD1_SHIFT)) & BCH_DEBUG0_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_SET - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_SET_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_SET_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD0_SHIFT)) & BCH_DEBUG0_SET_RSVD0_MASK)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_SET_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_SET_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_SET_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_SET_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_SET_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD1_SHIFT)) & BCH_DEBUG0_SET_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_CLR - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_CLR_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_CLR_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD0_SHIFT)) & BCH_DEBUG0_CLR_RSVD0_MASK)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_CLR_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_CLR_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_CLR_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_CLR_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_CLR_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD1_SHIFT)) & BCH_DEBUG0_CLR_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_TOG - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_TOG_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_TOG_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD0_SHIFT)) & BCH_DEBUG0_TOG_RSVD0_MASK)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_TOG_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_TOG_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_TOG_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_TOG_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_TOG_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD1_SHIFT)) & BCH_DEBUG0_TOG_RSVD1_MASK)
/*! @} */

/*! @name DBGKESREAD - KES Debug Read Register */
/*! @{ */
#define BCH_DBGKESREAD_VALUES_MASK               (0xFFFFFFFFU)
#define BCH_DBGKESREAD_VALUES_SHIFT              (0U)
#define BCH_DBGKESREAD_VALUES(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_VALUES_SHIFT)) & BCH_DBGKESREAD_VALUES_MASK)
/*! @} */

/*! @name DBGKESREAD_SET - KES Debug Read Register */
/*! @{ */
#define BCH_DBGKESREAD_SET_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_SET_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_SET_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_SET_VALUES_SHIFT)) & BCH_DBGKESREAD_SET_VALUES_MASK)
/*! @} */

/*! @name DBGKESREAD_CLR - KES Debug Read Register */
/*! @{ */
#define BCH_DBGKESREAD_CLR_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_CLR_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_CLR_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_CLR_VALUES_SHIFT)) & BCH_DBGKESREAD_CLR_VALUES_MASK)
/*! @} */

/*! @name DBGKESREAD_TOG - KES Debug Read Register */
/*! @{ */
#define BCH_DBGKESREAD_TOG_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGKESREAD_TOG_VALUES_SHIFT          (0U)
#define BCH_DBGKESREAD_TOG_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_TOG_VALUES_SHIFT)) & BCH_DBGKESREAD_TOG_VALUES_MASK)
/*! @} */

/*! @name DBGCSFEREAD - Chien Search Debug Read Register */
/*! @{ */
#define BCH_DBGCSFEREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_VALUES_SHIFT             (0U)
#define BCH_DBGCSFEREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_VALUES_SHIFT)) & BCH_DBGCSFEREAD_VALUES_MASK)
/*! @} */

/*! @name DBGCSFEREAD_SET - Chien Search Debug Read Register */
/*! @{ */
#define BCH_DBGCSFEREAD_SET_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_SET_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_SET_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_SET_VALUES_SHIFT)) & BCH_DBGCSFEREAD_SET_VALUES_MASK)
/*! @} */

/*! @name DBGCSFEREAD_CLR - Chien Search Debug Read Register */
/*! @{ */
#define BCH_DBGCSFEREAD_CLR_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_CLR_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_CLR_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_CLR_VALUES_SHIFT)) & BCH_DBGCSFEREAD_CLR_VALUES_MASK)
/*! @} */

/*! @name DBGCSFEREAD_TOG - Chien Search Debug Read Register */
/*! @{ */
#define BCH_DBGCSFEREAD_TOG_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_TOG_VALUES_SHIFT         (0U)
#define BCH_DBGCSFEREAD_TOG_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_TOG_VALUES_SHIFT)) & BCH_DBGCSFEREAD_TOG_VALUES_MASK)
/*! @} */

/*! @name DBGSYNDGENREAD - Syndrome Generator Debug Read Register */
/*! @{ */
#define BCH_DBGSYNDGENREAD_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_VALUES_SHIFT          (0U)
#define BCH_DBGSYNDGENREAD_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_VALUES_MASK)
/*! @} */

/*! @name DBGSYNDGENREAD_SET - Syndrome Generator Debug Read Register */
/*! @{ */
#define BCH_DBGSYNDGENREAD_SET_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_SET_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_SET_VALUES_MASK)
/*! @} */

/*! @name DBGSYNDGENREAD_CLR - Syndrome Generator Debug Read Register */
/*! @{ */
#define BCH_DBGSYNDGENREAD_CLR_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_CLR_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_CLR_VALUES_MASK)
/*! @} */

/*! @name DBGSYNDGENREAD_TOG - Syndrome Generator Debug Read Register */
/*! @{ */
#define BCH_DBGSYNDGENREAD_TOG_VALUES_MASK       (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT      (0U)
#define BCH_DBGSYNDGENREAD_TOG_VALUES(x)         (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_TOG_VALUES_MASK)
/*! @} */

/*! @name DBGAHBMREAD - Bus Master and ECC Controller Debug Read Register */
/*! @{ */
#define BCH_DBGAHBMREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_VALUES_SHIFT             (0U)
#define BCH_DBGAHBMREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_VALUES_SHIFT)) & BCH_DBGAHBMREAD_VALUES_MASK)
/*! @} */

/*! @name DBGAHBMREAD_SET - Bus Master and ECC Controller Debug Read Register */
/*! @{ */
#define BCH_DBGAHBMREAD_SET_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_SET_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_SET_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_SET_VALUES_SHIFT)) & BCH_DBGAHBMREAD_SET_VALUES_MASK)
/*! @} */

/*! @name DBGAHBMREAD_CLR - Bus Master and ECC Controller Debug Read Register */
/*! @{ */
#define BCH_DBGAHBMREAD_CLR_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_CLR_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_CLR_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_CLR_VALUES_SHIFT)) & BCH_DBGAHBMREAD_CLR_VALUES_MASK)
/*! @} */

/*! @name DBGAHBMREAD_TOG - Bus Master and ECC Controller Debug Read Register */
/*! @{ */
#define BCH_DBGAHBMREAD_TOG_VALUES_MASK          (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_TOG_VALUES_SHIFT         (0U)
#define BCH_DBGAHBMREAD_TOG_VALUES(x)            (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_TOG_VALUES_SHIFT)) & BCH_DBGAHBMREAD_TOG_VALUES_MASK)
/*! @} */

/*! @name BLOCKNAME - Block Name Register */
/*! @{ */
#define BCH_BLOCKNAME_NAME_MASK                  (0xFFFFFFFFU)
#define BCH_BLOCKNAME_NAME_SHIFT                 (0U)
#define BCH_BLOCKNAME_NAME(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_NAME_SHIFT)) & BCH_BLOCKNAME_NAME_MASK)
/*! @} */

/*! @name BLOCKNAME_SET - Block Name Register */
/*! @{ */
#define BCH_BLOCKNAME_SET_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_SET_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_SET_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_SET_NAME_SHIFT)) & BCH_BLOCKNAME_SET_NAME_MASK)
/*! @} */

/*! @name BLOCKNAME_CLR - Block Name Register */
/*! @{ */
#define BCH_BLOCKNAME_CLR_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_CLR_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_CLR_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_CLR_NAME_SHIFT)) & BCH_BLOCKNAME_CLR_NAME_MASK)
/*! @} */

/*! @name BLOCKNAME_TOG - Block Name Register */
/*! @{ */
#define BCH_BLOCKNAME_TOG_NAME_MASK              (0xFFFFFFFFU)
#define BCH_BLOCKNAME_TOG_NAME_SHIFT             (0U)
#define BCH_BLOCKNAME_TOG_NAME(x)                (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_TOG_NAME_SHIFT)) & BCH_BLOCKNAME_TOG_NAME_MASK)
/*! @} */

/*! @name VERSION - BCH Version Register */
/*! @{ */
#define BCH_VERSION_STEP_MASK                    (0xFFFFU)
#define BCH_VERSION_STEP_SHIFT                   (0U)
#define BCH_VERSION_STEP(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_STEP_SHIFT)) & BCH_VERSION_STEP_MASK)
#define BCH_VERSION_MINOR_MASK                   (0xFF0000U)
#define BCH_VERSION_MINOR_SHIFT                  (16U)
#define BCH_VERSION_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MINOR_SHIFT)) & BCH_VERSION_MINOR_MASK)
#define BCH_VERSION_MAJOR_MASK                   (0xFF000000U)
#define BCH_VERSION_MAJOR_SHIFT                  (24U)
#define BCH_VERSION_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MAJOR_SHIFT)) & BCH_VERSION_MAJOR_MASK)
/*! @} */

/*! @name VERSION_SET - BCH Version Register */
/*! @{ */
#define BCH_VERSION_SET_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_SET_STEP_SHIFT               (0U)
#define BCH_VERSION_SET_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_STEP_SHIFT)) & BCH_VERSION_SET_STEP_MASK)
#define BCH_VERSION_SET_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_SET_MINOR_SHIFT              (16U)
#define BCH_VERSION_SET_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_MINOR_SHIFT)) & BCH_VERSION_SET_MINOR_MASK)
#define BCH_VERSION_SET_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_SET_MAJOR_SHIFT              (24U)
#define BCH_VERSION_SET_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_SET_MAJOR_SHIFT)) & BCH_VERSION_SET_MAJOR_MASK)
/*! @} */

/*! @name VERSION_CLR - BCH Version Register */
/*! @{ */
#define BCH_VERSION_CLR_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_CLR_STEP_SHIFT               (0U)
#define BCH_VERSION_CLR_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_STEP_SHIFT)) & BCH_VERSION_CLR_STEP_MASK)
#define BCH_VERSION_CLR_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_CLR_MINOR_SHIFT              (16U)
#define BCH_VERSION_CLR_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_MINOR_SHIFT)) & BCH_VERSION_CLR_MINOR_MASK)
#define BCH_VERSION_CLR_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_CLR_MAJOR_SHIFT              (24U)
#define BCH_VERSION_CLR_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_CLR_MAJOR_SHIFT)) & BCH_VERSION_CLR_MAJOR_MASK)
/*! @} */

/*! @name VERSION_TOG - BCH Version Register */
/*! @{ */
#define BCH_VERSION_TOG_STEP_MASK                (0xFFFFU)
#define BCH_VERSION_TOG_STEP_SHIFT               (0U)
#define BCH_VERSION_TOG_STEP(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_STEP_SHIFT)) & BCH_VERSION_TOG_STEP_MASK)
#define BCH_VERSION_TOG_MINOR_MASK               (0xFF0000U)
#define BCH_VERSION_TOG_MINOR_SHIFT              (16U)
#define BCH_VERSION_TOG_MINOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_MINOR_SHIFT)) & BCH_VERSION_TOG_MINOR_MASK)
#define BCH_VERSION_TOG_MAJOR_MASK               (0xFF000000U)
#define BCH_VERSION_TOG_MAJOR_SHIFT              (24U)
#define BCH_VERSION_TOG_MAJOR(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_TOG_MAJOR_SHIFT)) & BCH_VERSION_TOG_MAJOR_MASK)
/*! @} */

/*! @name DEBUG1 - Hardware BCH ECC Debug Register 1 */
/*! @{ */
#define BCH_DEBUG1_ERASED_ZERO_COUNT_MASK        (0x1FFU)
#define BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT       (0U)
#define BCH_DEBUG1_ERASED_ZERO_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_RSVD_MASK                     (0x7FFFFE00U)
#define BCH_DEBUG1_RSVD_SHIFT                    (9U)
#define BCH_DEBUG1_RSVD(x)                       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_RSVD_SHIFT)) & BCH_DEBUG1_RSVD_MASK)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_MASK       (0x80000000U)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_SHIFT      (31U)
/*! @} */

/*! @name DEBUG1_SET - Hardware BCH ECC Debug Register 1 */
/*! @{ */
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_SET_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_SET_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_SET_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_SET_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_SET_RSVD_SHIFT)) & BCH_DEBUG1_SET_RSVD_MASK)
#define BCH_DEBUG1_SET_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_SET_DEBUG1_PREERASECHK_SHIFT  (31U)
/*! @} */

/*! @name DEBUG1_CLR - Hardware BCH ECC Debug Register 1 */
/*! @{ */
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_CLR_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_CLR_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_CLR_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_CLR_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_CLR_RSVD_SHIFT)) & BCH_DEBUG1_CLR_RSVD_MASK)
#define BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_SHIFT  (31U)
/*! @} */

/*! @name DEBUG1_TOG - Hardware BCH ECC Debug Register 1 */
/*! @{ */
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK    (0x1FFU)
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT   (0U)
#define BCH_DEBUG1_TOG_ERASED_ZERO_COUNT(x)      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_TOG_RSVD_MASK                 (0x7FFFFE00U)
#define BCH_DEBUG1_TOG_RSVD_SHIFT                (9U)
#define BCH_DEBUG1_TOG_RSVD(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_TOG_RSVD_SHIFT)) & BCH_DEBUG1_TOG_RSVD_MASK)
#define BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_MASK   (0x80000000U)
#define BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_SHIFT  (31U)
/*! @} */


/*!
 * @}
 */ /* end of group BCH_Register_Masks */


/* BCH - Peripheral instance base addresses */
/** Peripheral BCH base pointer */
#define BCH_BASE_PTR                             ((BCH_MemMapPtr)0x33004000u)
/** Array initializer of BCH peripheral base pointers */
#define BCH_BASE_PTRS                            { BCH_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- BCH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Accessor_Macros BCH - Register accessor macros
 * @{
 */


/* BCH - Register instance definitions */
/* BCH */
#define BCH_CTRL                                 BCH_CTRL_REG(BCH_BASE_PTR)
#define BCH_CTRL_SET                             BCH_CTRL_SET_REG(BCH_BASE_PTR)
#define BCH_CTRL_CLR                             BCH_CTRL_CLR_REG(BCH_BASE_PTR)
#define BCH_CTRL_TOG                             BCH_CTRL_TOG_REG(BCH_BASE_PTR)
#define BCH_STATUS0                              BCH_STATUS0_REG(BCH_BASE_PTR)
#define BCH_STATUS0_SET                          BCH_STATUS0_SET_REG(BCH_BASE_PTR)
#define BCH_STATUS0_CLR                          BCH_STATUS0_CLR_REG(BCH_BASE_PTR)
#define BCH_STATUS0_TOG                          BCH_STATUS0_TOG_REG(BCH_BASE_PTR)
#define BCH_MODE                                 BCH_MODE_REG(BCH_BASE_PTR)
#define BCH_MODE_SET                             BCH_MODE_SET_REG(BCH_BASE_PTR)
#define BCH_MODE_CLR                             BCH_MODE_CLR_REG(BCH_BASE_PTR)
#define BCH_MODE_TOG                             BCH_MODE_TOG_REG(BCH_BASE_PTR)
#define BCH_ENCODEPTR                            BCH_ENCODEPTR_REG(BCH_BASE_PTR)
#define BCH_ENCODEPTR_SET                        BCH_ENCODEPTR_SET_REG(BCH_BASE_PTR)
#define BCH_ENCODEPTR_CLR                        BCH_ENCODEPTR_CLR_REG(BCH_BASE_PTR)
#define BCH_ENCODEPTR_TOG                        BCH_ENCODEPTR_TOG_REG(BCH_BASE_PTR)
#define BCH_DATAPTR                              BCH_DATAPTR_REG(BCH_BASE_PTR)
#define BCH_DATAPTR_SET                          BCH_DATAPTR_SET_REG(BCH_BASE_PTR)
#define BCH_DATAPTR_CLR                          BCH_DATAPTR_CLR_REG(BCH_BASE_PTR)
#define BCH_DATAPTR_TOG                          BCH_DATAPTR_TOG_REG(BCH_BASE_PTR)
#define BCH_METAPTR                              BCH_METAPTR_REG(BCH_BASE_PTR)
#define BCH_METAPTR_SET                          BCH_METAPTR_SET_REG(BCH_BASE_PTR)
#define BCH_METAPTR_CLR                          BCH_METAPTR_CLR_REG(BCH_BASE_PTR)
#define BCH_METAPTR_TOG                          BCH_METAPTR_TOG_REG(BCH_BASE_PTR)
#define BCH_LAYOUTSELECT                         BCH_LAYOUTSELECT_REG(BCH_BASE_PTR)
#define BCH_LAYOUTSELECT_SET                     BCH_LAYOUTSELECT_SET_REG(BCH_BASE_PTR)
#define BCH_LAYOUTSELECT_CLR                     BCH_LAYOUTSELECT_CLR_REG(BCH_BASE_PTR)
#define BCH_LAYOUTSELECT_TOG                     BCH_LAYOUTSELECT_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT0                        BCH_FLASH0LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT0_SET                    BCH_FLASH0LAYOUT0_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT0_CLR                    BCH_FLASH0LAYOUT0_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT0_TOG                    BCH_FLASH0LAYOUT0_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT1                        BCH_FLASH0LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT1_SET                    BCH_FLASH0LAYOUT1_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT1_CLR                    BCH_FLASH0LAYOUT1_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT1_TOG                    BCH_FLASH0LAYOUT1_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT0                        BCH_FLASH1LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT0_SET                    BCH_FLASH1LAYOUT0_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT0_CLR                    BCH_FLASH1LAYOUT0_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT0_TOG                    BCH_FLASH1LAYOUT0_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT1                        BCH_FLASH1LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT1_SET                    BCH_FLASH1LAYOUT1_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT1_CLR                    BCH_FLASH1LAYOUT1_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT1_TOG                    BCH_FLASH1LAYOUT1_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT0                        BCH_FLASH2LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT0_SET                    BCH_FLASH2LAYOUT0_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT0_CLR                    BCH_FLASH2LAYOUT0_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT0_TOG                    BCH_FLASH2LAYOUT0_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT1                        BCH_FLASH2LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT1_SET                    BCH_FLASH2LAYOUT1_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT1_CLR                    BCH_FLASH2LAYOUT1_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT1_TOG                    BCH_FLASH2LAYOUT1_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT0                        BCH_FLASH3LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT0_SET                    BCH_FLASH3LAYOUT0_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT0_CLR                    BCH_FLASH3LAYOUT0_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT0_TOG                    BCH_FLASH3LAYOUT0_TOG_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT1                        BCH_FLASH3LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT1_SET                    BCH_FLASH3LAYOUT1_SET_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT1_CLR                    BCH_FLASH3LAYOUT1_CLR_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT1_TOG                    BCH_FLASH3LAYOUT1_TOG_REG(BCH_BASE_PTR)
#define BCH_DEBUG0                               BCH_DEBUG0_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_SET                           BCH_DEBUG0_SET_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_CLR                           BCH_DEBUG0_CLR_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_TOG                           BCH_DEBUG0_TOG_REG(BCH_BASE_PTR)
#define BCH_DBGKESREAD                           BCH_DBGKESREAD_REG(BCH_BASE_PTR)
#define BCH_DBGKESREAD_SET                       BCH_DBGKESREAD_SET_REG(BCH_BASE_PTR)
#define BCH_DBGKESREAD_CLR                       BCH_DBGKESREAD_CLR_REG(BCH_BASE_PTR)
#define BCH_DBGKESREAD_TOG                       BCH_DBGKESREAD_TOG_REG(BCH_BASE_PTR)
#define BCH_DBGCSFEREAD                          BCH_DBGCSFEREAD_REG(BCH_BASE_PTR)
#define BCH_DBGCSFEREAD_SET                      BCH_DBGCSFEREAD_SET_REG(BCH_BASE_PTR)
#define BCH_DBGCSFEREAD_CLR                      BCH_DBGCSFEREAD_CLR_REG(BCH_BASE_PTR)
#define BCH_DBGCSFEREAD_TOG                      BCH_DBGCSFEREAD_TOG_REG(BCH_BASE_PTR)
#define BCH_DBGSYNDGENREAD                       BCH_DBGSYNDGENREAD_REG(BCH_BASE_PTR)
#define BCH_DBGSYNDGENREAD_SET                   BCH_DBGSYNDGENREAD_SET_REG(BCH_BASE_PTR)
#define BCH_DBGSYNDGENREAD_CLR                   BCH_DBGSYNDGENREAD_CLR_REG(BCH_BASE_PTR)
#define BCH_DBGSYNDGENREAD_TOG                   BCH_DBGSYNDGENREAD_TOG_REG(BCH_BASE_PTR)
#define BCH_DBGAHBMREAD                          BCH_DBGAHBMREAD_REG(BCH_BASE_PTR)
#define BCH_DBGAHBMREAD_SET                      BCH_DBGAHBMREAD_SET_REG(BCH_BASE_PTR)
#define BCH_DBGAHBMREAD_CLR                      BCH_DBGAHBMREAD_CLR_REG(BCH_BASE_PTR)
#define BCH_DBGAHBMREAD_TOG                      BCH_DBGAHBMREAD_TOG_REG(BCH_BASE_PTR)
#define BCH_BLOCKNAME                            BCH_BLOCKNAME_REG(BCH_BASE_PTR)
#define BCH_BLOCKNAME_SET                        BCH_BLOCKNAME_SET_REG(BCH_BASE_PTR)
#define BCH_BLOCKNAME_CLR                        BCH_BLOCKNAME_CLR_REG(BCH_BASE_PTR)
#define BCH_BLOCKNAME_TOG                        BCH_BLOCKNAME_TOG_REG(BCH_BASE_PTR)
#define BCH_VERSION                              BCH_VERSION_REG(BCH_BASE_PTR)
#define BCH_VERSION_SET                          BCH_VERSION_SET_REG(BCH_BASE_PTR)
#define BCH_VERSION_CLR                          BCH_VERSION_CLR_REG(BCH_BASE_PTR)
#define BCH_VERSION_TOG                          BCH_VERSION_TOG_REG(BCH_BASE_PTR)
#define BCH_DEBUG1                               BCH_DEBUG1_REG(BCH_BASE_PTR)
#define BCH_DEBUG1_SET                           BCH_DEBUG1_SET_REG(BCH_BASE_PTR)
#define BCH_DEBUG1_CLR                           BCH_DEBUG1_CLR_REG(BCH_BASE_PTR)
#define BCH_DEBUG1_TOG                           BCH_DEBUG1_TOG_REG(BCH_BASE_PTR)

/*!
 * @}
 */ /* end of group BCH_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group BCH_Peripheral */


/* ----------------------------------------------------------------------------
   -- BLK_CTL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BLK_CTL_Peripheral BLK_CTL
 * @{
 */

/** BLK_CTL - Peripheral register structure */
typedef struct BLK_CTL_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< Reset Control, offset: 0x0 */
    uint32_t SET;                                    /**< Reset Control, offset: 0x4 */
    uint32_t CLR;                                    /**< Reset Control, offset: 0x8 */
    uint32_t TOG;                                    /**< Reset Control, offset: 0xC */
  } RESET_CTRL;
  struct {                                         /* offset: 0x10 */
    uint32_t RW;                                     /**< Control, offset: 0x10 */
    uint32_t SET;                                    /**< Control, offset: 0x14 */
    uint32_t CLR;                                    /**< Control, offset: 0x18 */
    uint32_t TOG;                                    /**< Control, offset: 0x1C */
  } CONTROL0;
  struct {                                         /* offset: 0x20 */
    uint32_t RW;                                     /**< Spare Control0, offset: 0x20 */
    uint32_t SET;                                    /**< Spare Control0, offset: 0x24 */
    uint32_t CLR;                                    /**< Spare Control0, offset: 0x28 */
    uint32_t TOG;                                    /**< Spare Control0, offset: 0x2C */
  } SPARE_CTRL0;
  struct {                                         /* offset: 0x30 */
    uint32_t RW;                                     /**< Spare Control1, offset: 0x30 */
    uint32_t SET;                                    /**< Spare Control1, offset: 0x34 */
    uint32_t CLR;                                    /**< Spare Control1, offset: 0x38 */
    uint32_t TOG;                                    /**< Spare Control1, offset: 0x3C */
  } SPARE_CTRL1;
  struct {                                         /* offset: 0x40 */
    uint32_t RW;                                     /**< Spare Status0, offset: 0x40 */
    uint32_t SET;                                    /**< Spare Status0, offset: 0x44 */
    uint32_t CLR;                                    /**< Spare Status0, offset: 0x48 */
    uint32_t TOG;                                    /**< Spare Status0, offset: 0x4C */
  } SPARE_STATUS0;
} volatile *BLK_CTL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- BLK_CTL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BLK_CTL_Register_Accessor_Macros BLK_CTL - Register accessor macros
 * @{
 */


/* BLK_CTL - Register accessors */
#define BLK_CTL_RESET_CTRL_REG(base)             ((base)->RESET_CTRL.RW)
#define BLK_CTL_RESET_CTRL_SET_REG(base)         ((base)->RESET_CTRL.SET)
#define BLK_CTL_RESET_CTRL_CLR_REG(base)         ((base)->RESET_CTRL.CLR)
#define BLK_CTL_RESET_CTRL_TOG_REG(base)         ((base)->RESET_CTRL.TOG)
#define BLK_CTL_CONTROL0_REG(base)               ((base)->CONTROL0.RW)
#define BLK_CTL_CONTROL0_SET_REG(base)           ((base)->CONTROL0.SET)
#define BLK_CTL_CONTROL0_CLR_REG(base)           ((base)->CONTROL0.CLR)
#define BLK_CTL_CONTROL0_TOG_REG(base)           ((base)->CONTROL0.TOG)
#define BLK_CTL_SPARE_CTRL0_REG(base)            ((base)->SPARE_CTRL0.RW)
#define BLK_CTL_SPARE_CTRL0_SET_REG(base)        ((base)->SPARE_CTRL0.SET)
#define BLK_CTL_SPARE_CTRL0_CLR_REG(base)        ((base)->SPARE_CTRL0.CLR)
#define BLK_CTL_SPARE_CTRL0_TOG_REG(base)        ((base)->SPARE_CTRL0.TOG)
#define BLK_CTL_SPARE_CTRL1_REG(base)            ((base)->SPARE_CTRL1.RW)
#define BLK_CTL_SPARE_CTRL1_SET_REG(base)        ((base)->SPARE_CTRL1.SET)
#define BLK_CTL_SPARE_CTRL1_CLR_REG(base)        ((base)->SPARE_CTRL1.CLR)
#define BLK_CTL_SPARE_CTRL1_TOG_REG(base)        ((base)->SPARE_CTRL1.TOG)
#define BLK_CTL_SPARE_STATUS0_REG(base)          ((base)->SPARE_STATUS0.RW)
#define BLK_CTL_SPARE_STATUS0_SET_REG(base)      ((base)->SPARE_STATUS0.SET)
#define BLK_CTL_SPARE_STATUS0_CLR_REG(base)      ((base)->SPARE_STATUS0.CLR)
#define BLK_CTL_SPARE_STATUS0_TOG_REG(base)      ((base)->SPARE_STATUS0.TOG)

/*!
 * @}
 */ /* end of group BLK_CTL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- BLK_CTL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BLK_CTL_Register_Masks BLK_CTL Register Masks
 * @{
 */

/*! @name RESET_CTRL - Reset Control */
/*! @{ */
#define BLK_CTL_RESET_CTRL_B_CLK_RESETN_MASK     (0x1U)
#define BLK_CTL_RESET_CTRL_B_CLK_RESETN_SHIFT    (0U)
#define BLK_CTL_RESET_CTRL_APB_CLK_RESETN_MASK   (0x2U)
#define BLK_CTL_RESET_CTRL_APB_CLK_RESETN_SHIFT  (1U)
#define BLK_CTL_RESET_CTRL_P_CLK_RESETN_MASK     (0x4U)
#define BLK_CTL_RESET_CTRL_P_CLK_RESETN_SHIFT    (2U)
#define BLK_CTL_RESET_CTRL_RTR_CLK_RESETN_MASK   (0x8U)
#define BLK_CTL_RESET_CTRL_RTR_CLK_RESETN_SHIFT  (3U)
#define BLK_CTL_RESET_CTRL_SPARE_CLK_RESETN_MASK (0xFF0000U)
#define BLK_CTL_RESET_CTRL_SPARE_CLK_RESETN_SHIFT (16U)
#define BLK_CTL_RESET_CTRL_SPARE_CLK_RESETN(x)   (((uint32_t)(((uint32_t)(x)) << BLK_CTL_RESET_CTRL_SPARE_CLK_RESETN_SHIFT)) & BLK_CTL_RESET_CTRL_SPARE_CLK_RESETN_MASK)
/*! @} */

/*! @name CONTROL0 - Control */
/*! @{ */
#define BLK_CTL_CONTROL0_DISPMIX_REFCLK_SEL_MASK (0x30U)
#define BLK_CTL_CONTROL0_DISPMIX_REFCLK_SEL_SHIFT (4U)
#define BLK_CTL_CONTROL0_DISPMIX_REFCLK_SEL(x)   (((uint32_t)(((uint32_t)(x)) << BLK_CTL_CONTROL0_DISPMIX_REFCLK_SEL_SHIFT)) & BLK_CTL_CONTROL0_DISPMIX_REFCLK_SEL_MASK)
#define BLK_CTL_CONTROL0_DISPMIX_PIXCLK_SEL_MASK (0x100U)
#define BLK_CTL_CONTROL0_DISPMIX_PIXCLK_SEL_SHIFT (8U)
/*! @} */

/*! @name SPARE_CTRL0 - Spare Control0 */
/*! @{ */
#define BLK_CTL_SPARE_CTRL0_SPARE_CTRL_MASK      (0xFFFFFFFFU)
#define BLK_CTL_SPARE_CTRL0_SPARE_CTRL_SHIFT     (0U)
#define BLK_CTL_SPARE_CTRL0_SPARE_CTRL(x)        (((uint32_t)(((uint32_t)(x)) << BLK_CTL_SPARE_CTRL0_SPARE_CTRL_SHIFT)) & BLK_CTL_SPARE_CTRL0_SPARE_CTRL_MASK)
/*! @} */

/*! @name SPARE_CTRL1 - Spare Control1 */
/*! @{ */
#define BLK_CTL_SPARE_CTRL1_SPARE_CTRL_MASK      (0xFFFFFFFFU)
#define BLK_CTL_SPARE_CTRL1_SPARE_CTRL_SHIFT     (0U)
#define BLK_CTL_SPARE_CTRL1_SPARE_CTRL(x)        (((uint32_t)(((uint32_t)(x)) << BLK_CTL_SPARE_CTRL1_SPARE_CTRL_SHIFT)) & BLK_CTL_SPARE_CTRL1_SPARE_CTRL_MASK)
/*! @} */

/*! @name SPARE_STATUS0 - Spare Status0 */
/*! @{ */
#define BLK_CTL_SPARE_STATUS0_SPARE_STATUS_MASK  (0xFFFFFFFFU)
#define BLK_CTL_SPARE_STATUS0_SPARE_STATUS_SHIFT (0U)
#define BLK_CTL_SPARE_STATUS0_SPARE_STATUS(x)    (((uint32_t)(((uint32_t)(x)) << BLK_CTL_SPARE_STATUS0_SPARE_STATUS_SHIFT)) & BLK_CTL_SPARE_STATUS0_SPARE_STATUS_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group BLK_CTL_Register_Masks */


/* BLK_CTL - Peripheral instance base addresses */
/** Peripheral DCSS__BLK_CTL base pointer */
#define DCSS__BLK_CTL_BASE_PTR                   ((BLK_CTL_MemMapPtr)0x32E2F000u)
/** Array initializer of BLK_CTL peripheral base pointers */
#define BLK_CTL_BASE_PTRS                        { DCSS__BLK_CTL_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- BLK_CTL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BLK_CTL_Register_Accessor_Macros BLK_CTL - Register accessor macros
 * @{
 */


/* BLK_CTL - Register instance definitions */
/* DCSS__BLK_CTL */
#define DCSS__BLK_CTL_RESET_CTRL                 BLK_CTL_RESET_CTRL_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_RESET_CTRL_SET             BLK_CTL_RESET_CTRL_SET_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_RESET_CTRL_CLR             BLK_CTL_RESET_CTRL_CLR_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_RESET_CTRL_TOG             BLK_CTL_RESET_CTRL_TOG_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_CONTROL0                   BLK_CTL_CONTROL0_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_CONTROL0_SET               BLK_CTL_CONTROL0_SET_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_CONTROL0_CLR               BLK_CTL_CONTROL0_CLR_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_CONTROL0_TOG               BLK_CTL_CONTROL0_TOG_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL0                BLK_CTL_SPARE_CTRL0_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL0_SET            BLK_CTL_SPARE_CTRL0_SET_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL0_CLR            BLK_CTL_SPARE_CTRL0_CLR_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL0_TOG            BLK_CTL_SPARE_CTRL0_TOG_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL1                BLK_CTL_SPARE_CTRL1_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL1_SET            BLK_CTL_SPARE_CTRL1_SET_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL1_CLR            BLK_CTL_SPARE_CTRL1_CLR_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_CTRL1_TOG            BLK_CTL_SPARE_CTRL1_TOG_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_STATUS0              BLK_CTL_SPARE_STATUS0_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_STATUS0_SET          BLK_CTL_SPARE_STATUS0_SET_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_STATUS0_CLR          BLK_CTL_SPARE_STATUS0_CLR_REG(DCSS__BLK_CTL_BASE_PTR)
#define DCSS__BLK_CTL_SPARE_STATUS0_TOG          BLK_CTL_SPARE_STATUS0_TOG_REG(DCSS__BLK_CTL_BASE_PTR)

/*!
 * @}
 */ /* end of group BLK_CTL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group BLK_CTL_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Peripheral CCM
 * @{
 */

/** CCM - Peripheral register structure */
typedef struct CCM_MemMap {
  uint32_t GPR0;                                   /**< General Purpose Register, offset: 0x0 */
  uint32_t GPR0_SET;                               /**< General Purpose Register, offset: 0x4 */
  uint32_t GPR0_CLR;                               /**< General Purpose Register, offset: 0x8 */
  uint32_t GPR0_TOG;                               /**< General Purpose Register, offset: 0xC */
  uint8_t RESERVED_0[2032];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    uint32_t PLL_CTRL;                               /**< CCM PLL Control Register, array offset: 0x800, array step: 0x10 */
    uint32_t PLL_CTRL_SET;                           /**< CCM PLL Control Register, array offset: 0x804, array step: 0x10 */
    uint32_t PLL_CTRL_CLR;                           /**< CCM PLL Control Register, array offset: 0x808, array step: 0x10 */
    uint32_t PLL_CTRL_TOG;                           /**< CCM PLL Control Register, array offset: 0x80C, array step: 0x10 */
  } PLL_CTRL[39];
  uint8_t RESERVED_1[13712];
  struct {                                         /* offset: 0x4000, array step: 0x10 */
    uint32_t CCGR;                                   /**< CCM Clock Gating Register, array offset: 0x4000, array step: 0x10 */
    uint32_t CCGR_SET;                               /**< CCM Clock Gating Register, array offset: 0x4004, array step: 0x10 */
    uint32_t CCGR_CLR;                               /**< CCM Clock Gating Register, array offset: 0x4008, array step: 0x10 */
    uint32_t CCGR_TOG;                               /**< CCM Clock Gating Register, array offset: 0x400C, array step: 0x10 */
  } CCGR[191];
  uint8_t RESERVED_2[13328];
  struct {                                         /* offset: 0x8000, array step: 0x80 */
    uint32_t TARGET_ROOT;                            /**< Target Register, array offset: 0x8000, array step: 0x80 */
    uint32_t TARGET_ROOT_SET;                        /**< Target Register, array offset: 0x8004, array step: 0x80 */
    uint32_t TARGET_ROOT_CLR;                        /**< Target Register, array offset: 0x8008, array step: 0x80 */
    uint32_t TARGET_ROOT_TOG;                        /**< Target Register, array offset: 0x800C, array step: 0x80 */
    uint32_t MISC;                                   /**< Miscellaneous Register, array offset: 0x8010, array step: 0x80 */
    uint32_t MISC_ROOT_SET;                          /**< Miscellaneous Register, array offset: 0x8014, array step: 0x80 */
    uint32_t MISC_ROOT_CLR;                          /**< Miscellaneous Register, array offset: 0x8018, array step: 0x80 */
    uint32_t MISC_ROOT_TOG;                          /**< Miscellaneous Register, array offset: 0x801C, array step: 0x80 */
    uint32_t POST;                                   /**< Post Divider Register, array offset: 0x8020, array step: 0x80 */
    uint32_t POST_ROOT_SET;                          /**< Post Divider Register, array offset: 0x8024, array step: 0x80 */
    uint32_t POST_ROOT_CLR;                          /**< Post Divider Register, array offset: 0x8028, array step: 0x80 */
    uint32_t POST_ROOT_TOG;                          /**< Post Divider Register, array offset: 0x802C, array step: 0x80 */
    uint32_t PRE;                                    /**< Pre Divider Register, array offset: 0x8030, array step: 0x80 */
    uint32_t PRE_ROOT_SET;                           /**< Pre Divider Register, array offset: 0x8034, array step: 0x80 */
    uint32_t PRE_ROOT_CLR;                           /**< Pre Divider Register, array offset: 0x8038, array step: 0x80 */
    uint32_t PRE_ROOT_TOG;                           /**< Pre Divider Register, array offset: 0x803C, array step: 0x80 */
    uint8_t RESERVED_0[48];
    uint32_t ACCESS_CTRL;                            /**< Access Control Register, array offset: 0x8070, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_SET;                   /**< Access Control Register, array offset: 0x8074, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_CLR;                   /**< Access Control Register, array offset: 0x8078, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_TOG;                   /**< Access Control Register, array offset: 0x807C, array step: 0x80 */
  } ROOT[142];
} volatile *CCM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register accessors */
#define CCM_GPR0_REG(base)                       ((base)->GPR0)
#define CCM_GPR0_SET_REG(base)                   ((base)->GPR0_SET)
#define CCM_GPR0_CLR_REG(base)                   ((base)->GPR0_CLR)
#define CCM_GPR0_TOG_REG(base)                   ((base)->GPR0_TOG)
#define CCM_PLL_CTRL_REG(base,index)             ((base)->PLL_CTRL[index].PLL_CTRL)
#define CCM_PLL_CTRL_SET_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_SET)
#define CCM_PLL_CTRL_CLR_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_CLR)
#define CCM_PLL_CTRL_TOG_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_TOG)
#define CCM_CCGR_REG(base,index)                 ((base)->CCGR[index].CCGR)
#define CCM_CCGR_SET_REG(base,index)             ((base)->CCGR[index].CCGR_SET)
#define CCM_CCGR_CLR_REG(base,index)             ((base)->CCGR[index].CCGR_CLR)
#define CCM_CCGR_TOG_REG(base,index)             ((base)->CCGR[index].CCGR_TOG)
#define CCM_TARGET_ROOT_REG(base,index)          ((base)->ROOT[index].TARGET_ROOT)
#define CCM_TARGET_ROOT_SET_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_SET)
#define CCM_TARGET_ROOT_CLR_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_CLR)
#define CCM_TARGET_ROOT_TOG_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_TOG)
#define CCM_MISC_REG(base,index)                 ((base)->ROOT[index].MISC)
#define CCM_MISC_ROOT_SET_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_SET)
#define CCM_MISC_ROOT_CLR_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_CLR)
#define CCM_MISC_ROOT_TOG_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_TOG)
#define CCM_POST_REG(base,index)                 ((base)->ROOT[index].POST)
#define CCM_POST_ROOT_SET_REG(base,index)        ((base)->ROOT[index].POST_ROOT_SET)
#define CCM_POST_ROOT_CLR_REG(base,index)        ((base)->ROOT[index].POST_ROOT_CLR)
#define CCM_POST_ROOT_TOG_REG(base,index)        ((base)->ROOT[index].POST_ROOT_TOG)
#define CCM_PRE_REG(base,index)                  ((base)->ROOT[index].PRE)
#define CCM_PRE_ROOT_SET_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_SET)
#define CCM_PRE_ROOT_CLR_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_CLR)
#define CCM_PRE_ROOT_TOG_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_TOG)
#define CCM_ACCESS_CTRL_REG(base,index)          ((base)->ROOT[index].ACCESS_CTRL)
#define CCM_ACCESS_CTRL_ROOT_SET_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_SET)
#define CCM_ACCESS_CTRL_ROOT_CLR_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_CLR)
#define CCM_ACCESS_CTRL_ROOT_TOG_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_TOG)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Masks CCM Register Masks
 * @{
 */

/*! @name GPR0 - General Purpose Register */
/*! @{ */
#define CCM_GPR0_GP0_MASK                        (0xFFFFFFFFU)
#define CCM_GPR0_GP0_SHIFT                       (0U)
#define CCM_GPR0_GP0(x)                          (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_GP0_SHIFT)) & CCM_GPR0_GP0_MASK)
/*! @} */

/*! @name GPR0_SET - General Purpose Register */
/*! @{ */
#define CCM_GPR0_SET_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_SET_GP0_SHIFT                   (0U)
#define CCM_GPR0_SET_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_SET_GP0_SHIFT)) & CCM_GPR0_SET_GP0_MASK)
/*! @} */

/*! @name GPR0_CLR - General Purpose Register */
/*! @{ */
#define CCM_GPR0_CLR_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_CLR_GP0_SHIFT                   (0U)
#define CCM_GPR0_CLR_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_CLR_GP0_SHIFT)) & CCM_GPR0_CLR_GP0_MASK)
/*! @} */

/*! @name GPR0_TOG - General Purpose Register */
/*! @{ */
#define CCM_GPR0_TOG_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_TOG_GP0_SHIFT                   (0U)
#define CCM_GPR0_TOG_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_TOG_GP0_SHIFT)) & CCM_GPR0_TOG_GP0_MASK)
/*! @} */

/*! @name PLL_CTRL - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_SETTING0_MASK               (0x3U)
#define CCM_PLL_CTRL_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING0_SHIFT)) & CCM_PLL_CTRL_SETTING0_MASK)
#define CCM_PLL_CTRL_SETTING1_MASK               (0x30U)
#define CCM_PLL_CTRL_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING1_SHIFT)) & CCM_PLL_CTRL_SETTING1_MASK)
#define CCM_PLL_CTRL_SETTING2_MASK               (0x300U)
#define CCM_PLL_CTRL_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING2_SHIFT)) & CCM_PLL_CTRL_SETTING2_MASK)
#define CCM_PLL_CTRL_SETTING3_MASK               (0x3000U)
#define CCM_PLL_CTRL_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING3_SHIFT)) & CCM_PLL_CTRL_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL */
#define CCM_PLL_CTRL_COUNT                       (39U)

/*! @name PLL_CTRL_SET - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_SET_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_SET_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING0_SHIFT)) & CCM_PLL_CTRL_SET_SETTING0_MASK)
#define CCM_PLL_CTRL_SET_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_SET_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING1_SHIFT)) & CCM_PLL_CTRL_SET_SETTING1_MASK)
#define CCM_PLL_CTRL_SET_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_SET_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING2_SHIFT)) & CCM_PLL_CTRL_SET_SETTING2_MASK)
#define CCM_PLL_CTRL_SET_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_SET_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING3_SHIFT)) & CCM_PLL_CTRL_SET_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_SET */
#define CCM_PLL_CTRL_SET_COUNT                   (39U)

/*! @name PLL_CTRL_CLR - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_CLR_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_CLR_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING0_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING0_MASK)
#define CCM_PLL_CTRL_CLR_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_CLR_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING1_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING1_MASK)
#define CCM_PLL_CTRL_CLR_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_CLR_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING2_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING2_MASK)
#define CCM_PLL_CTRL_CLR_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_CLR_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING3_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_CLR */
#define CCM_PLL_CTRL_CLR_COUNT                   (39U)

/*! @name PLL_CTRL_TOG - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_TOG_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_TOG_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING0_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING0_MASK)
#define CCM_PLL_CTRL_TOG_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_TOG_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING1_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING1_MASK)
#define CCM_PLL_CTRL_TOG_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_TOG_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING2_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING2_MASK)
#define CCM_PLL_CTRL_TOG_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_TOG_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING3_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_TOG */
#define CCM_PLL_CTRL_TOG_COUNT                   (39U)

/*! @name CCGR - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_SETTING0_MASK                   (0x3U)
#define CCM_CCGR_SETTING0_SHIFT                  (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING0(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING0_SHIFT)) & CCM_CCGR_SETTING0_MASK)
#define CCM_CCGR_SETTING1_MASK                   (0x30U)
#define CCM_CCGR_SETTING1_SHIFT                  (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING1(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING1_SHIFT)) & CCM_CCGR_SETTING1_MASK)
#define CCM_CCGR_SETTING2_MASK                   (0x300U)
#define CCM_CCGR_SETTING2_SHIFT                  (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING2(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING2_SHIFT)) & CCM_CCGR_SETTING2_MASK)
#define CCM_CCGR_SETTING3_MASK                   (0x3000U)
#define CCM_CCGR_SETTING3_SHIFT                  (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING3(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING3_SHIFT)) & CCM_CCGR_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR */
#define CCM_CCGR_COUNT                           (191U)

/*! @name CCGR_SET - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_SET_SETTING0_MASK               (0x3U)
#define CCM_CCGR_SET_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING0_SHIFT)) & CCM_CCGR_SET_SETTING0_MASK)
#define CCM_CCGR_SET_SETTING1_MASK               (0x30U)
#define CCM_CCGR_SET_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING1_SHIFT)) & CCM_CCGR_SET_SETTING1_MASK)
#define CCM_CCGR_SET_SETTING2_MASK               (0x300U)
#define CCM_CCGR_SET_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING2_SHIFT)) & CCM_CCGR_SET_SETTING2_MASK)
#define CCM_CCGR_SET_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_SET_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING3_SHIFT)) & CCM_CCGR_SET_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_SET */
#define CCM_CCGR_SET_COUNT                       (191U)

/*! @name CCGR_CLR - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_CLR_SETTING0_MASK               (0x3U)
#define CCM_CCGR_CLR_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING0_SHIFT)) & CCM_CCGR_CLR_SETTING0_MASK)
#define CCM_CCGR_CLR_SETTING1_MASK               (0x30U)
#define CCM_CCGR_CLR_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING1_SHIFT)) & CCM_CCGR_CLR_SETTING1_MASK)
#define CCM_CCGR_CLR_SETTING2_MASK               (0x300U)
#define CCM_CCGR_CLR_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING2_SHIFT)) & CCM_CCGR_CLR_SETTING2_MASK)
#define CCM_CCGR_CLR_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_CLR_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING3_SHIFT)) & CCM_CCGR_CLR_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_CLR */
#define CCM_CCGR_CLR_COUNT                       (191U)

/*! @name CCGR_TOG - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_TOG_SETTING0_MASK               (0x3U)
#define CCM_CCGR_TOG_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING0_SHIFT)) & CCM_CCGR_TOG_SETTING0_MASK)
#define CCM_CCGR_TOG_SETTING1_MASK               (0x30U)
#define CCM_CCGR_TOG_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING1_SHIFT)) & CCM_CCGR_TOG_SETTING1_MASK)
#define CCM_CCGR_TOG_SETTING2_MASK               (0x300U)
#define CCM_CCGR_TOG_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING2_SHIFT)) & CCM_CCGR_TOG_SETTING2_MASK)
#define CCM_CCGR_TOG_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_TOG_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING3_SHIFT)) & CCM_CCGR_TOG_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_TOG */
#define CCM_CCGR_TOG_COUNT                       (191U)

/*! @name TARGET_ROOT - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_POST_PODF_MASK           (0x3FU)
#define CCM_TARGET_ROOT_POST_PODF_SHIFT          (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_POST_PODF(x)             (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_POST_PODF_MASK)
#define CCM_TARGET_ROOT_PRE_PODF_MASK            (0x70000U)
#define CCM_TARGET_ROOT_PRE_PODF_SHIFT           (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_PRE_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_MUX_MASK                 (0x7000000U)
#define CCM_TARGET_ROOT_MUX_SHIFT                (24U)
#define CCM_TARGET_ROOT_MUX(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_MUX_SHIFT)) & CCM_TARGET_ROOT_MUX_MASK)
#define CCM_TARGET_ROOT_ENABLE_MASK              (0x10000000U)
#define CCM_TARGET_ROOT_ENABLE_SHIFT             (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT */
#define CCM_TARGET_ROOT_COUNT                    (142U)

/*! @name TARGET_ROOT_SET - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_SET_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_SET_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_SET_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_POST_PODF_MASK)
#define CCM_TARGET_ROOT_SET_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_SET_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_SET_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_SET_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_SET_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_MUX_SHIFT)) & CCM_TARGET_ROOT_SET_MUX_MASK)
#define CCM_TARGET_ROOT_SET_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_SET_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_SET */
#define CCM_TARGET_ROOT_SET_COUNT                (142U)

/*! @name TARGET_ROOT_CLR - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_CLR_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_CLR_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_POST_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_CLR_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_CLR_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_CLR_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_MUX_SHIFT)) & CCM_TARGET_ROOT_CLR_MUX_MASK)
#define CCM_TARGET_ROOT_CLR_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_CLR_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_CLR */
#define CCM_TARGET_ROOT_CLR_COUNT                (142U)

/*! @name TARGET_ROOT_TOG - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_TOG_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_TOG_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_POST_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_TOG_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_TOG_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_TOG_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_MUX_SHIFT)) & CCM_TARGET_ROOT_TOG_MUX_MASK)
#define CCM_TARGET_ROOT_TOG_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_TOG_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_TOG */
#define CCM_TARGET_ROOT_TOG_COUNT                (142U)

/*! @name MISC - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_AUTHEN_FAIL_MASK                (0x1U)
#define CCM_MISC_AUTHEN_FAIL_SHIFT               (0U)
#define CCM_MISC_TIMEOUT_MASK                    (0x10U)
#define CCM_MISC_TIMEOUT_SHIFT                   (4U)
#define CCM_MISC_VIOLATE_MASK                    (0x100U)
#define CCM_MISC_VIOLATE_SHIFT                   (8U)
/*! @} */

/* The count of CCM_MISC */
#define CCM_MISC_COUNT                           (142U)

/*! @name MISC_ROOT_SET - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_SET_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_SET_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_SET_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_SET_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_SET */
#define CCM_MISC_ROOT_SET_COUNT                  (142U)

/*! @name MISC_ROOT_CLR - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_CLR_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_CLR_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_CLR_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_CLR_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_CLR */
#define CCM_MISC_ROOT_CLR_COUNT                  (142U)

/*! @name MISC_ROOT_TOG - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_TOG_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_TOG_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_TOG_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_TOG_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_TOG */
#define CCM_MISC_ROOT_TOG_COUNT                  (142U)

/*! @name POST - Post Divider Register */
/*! @{ */
#define CCM_POST_POST_PODF_MASK                  (0x3FU)
#define CCM_POST_POST_PODF_SHIFT                 (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_POST_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_POST_POST_PODF_SHIFT)) & CCM_POST_POST_PODF_MASK)
#define CCM_POST_BUSY1_MASK                      (0x80U)
#define CCM_POST_BUSY1_SHIFT                     (7U)
#define CCM_POST_SELECT_MASK                     (0x10000000U)
#define CCM_POST_SELECT_SHIFT                    (28U)
#define CCM_POST_BUSY2_MASK                      (0x80000000U)
#define CCM_POST_BUSY2_SHIFT                     (31U)
/*! @} */

/* The count of CCM_POST */
#define CCM_POST_COUNT                           (142U)

/*! @name POST_ROOT_SET - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_SET_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_SET_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_SET_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_POST_PODF_SHIFT)) & CCM_POST_ROOT_SET_POST_PODF_MASK)
#define CCM_POST_ROOT_SET_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_SET_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_SET_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_SET_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_SET_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_SET_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_SET */
#define CCM_POST_ROOT_SET_COUNT                  (142U)

/*! @name POST_ROOT_CLR - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_CLR_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_CLR_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_CLR_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_POST_PODF_SHIFT)) & CCM_POST_ROOT_CLR_POST_PODF_MASK)
#define CCM_POST_ROOT_CLR_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_CLR_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_CLR_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_CLR_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_CLR_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_CLR_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_CLR */
#define CCM_POST_ROOT_CLR_COUNT                  (142U)

/*! @name POST_ROOT_TOG - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_TOG_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_TOG_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_TOG_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_POST_PODF_SHIFT)) & CCM_POST_ROOT_TOG_POST_PODF_MASK)
#define CCM_POST_ROOT_TOG_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_TOG_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_TOG_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_TOG_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_TOG_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_TOG_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_TOG */
#define CCM_POST_ROOT_TOG_COUNT                  (142U)

/*! @name PRE - Pre Divider Register */
/*! @{ */
#define CCM_PRE_PRE_PODF_B_MASK                  (0x7U)
#define CCM_PRE_PRE_PODF_B_SHIFT                 (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_PRE_PODF_B(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_B_SHIFT)) & CCM_PRE_PRE_PODF_B_MASK)
#define CCM_PRE_BUSY0_MASK                       (0x8U)
#define CCM_PRE_BUSY0_SHIFT                      (3U)
#define CCM_PRE_MUX_B_MASK                       (0x700U)
#define CCM_PRE_MUX_B_SHIFT                      (8U)
#define CCM_PRE_MUX_B(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_B_SHIFT)) & CCM_PRE_MUX_B_MASK)
#define CCM_PRE_EN_B_MASK                        (0x1000U)
#define CCM_PRE_EN_B_SHIFT                       (12U)
#define CCM_PRE_BUSY1_MASK                       (0x8000U)
#define CCM_PRE_BUSY1_SHIFT                      (15U)
#define CCM_PRE_PRE_PODF_A_MASK                  (0x70000U)
#define CCM_PRE_PRE_PODF_A_SHIFT                 (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_PRE_PODF_A(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_A_SHIFT)) & CCM_PRE_PRE_PODF_A_MASK)
#define CCM_PRE_BUSY3_MASK                       (0x80000U)
#define CCM_PRE_BUSY3_SHIFT                      (19U)
#define CCM_PRE_MUX_A_MASK                       (0x7000000U)
#define CCM_PRE_MUX_A_SHIFT                      (24U)
#define CCM_PRE_MUX_A(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_A_SHIFT)) & CCM_PRE_MUX_A_MASK)
#define CCM_PRE_EN_A_MASK                        (0x10000000U)
#define CCM_PRE_EN_A_SHIFT                       (28U)
#define CCM_PRE_BUSY4_MASK                       (0x80000000U)
#define CCM_PRE_BUSY4_SHIFT                      (31U)
/*! @} */

/* The count of CCM_PRE */
#define CCM_PRE_COUNT                            (142U)

/*! @name PRE_ROOT_SET - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_SET_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_SET_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_SET_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_SET_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_SET_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_SET_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_SET_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_B_SHIFT)) & CCM_PRE_ROOT_SET_MUX_B_MASK)
#define CCM_PRE_ROOT_SET_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_SET_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_SET_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_SET_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_SET_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_SET_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_SET_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_SET_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_SET_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_SET_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_A_SHIFT)) & CCM_PRE_ROOT_SET_MUX_A_MASK)
#define CCM_PRE_ROOT_SET_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_SET_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_SET_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_SET_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_SET */
#define CCM_PRE_ROOT_SET_COUNT                   (142U)

/*! @name PRE_ROOT_CLR - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_CLR_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_CLR_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_CLR_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_CLR_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_CLR_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_CLR_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_B_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_B_MASK)
#define CCM_PRE_ROOT_CLR_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_CLR_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_CLR_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_CLR_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_CLR_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_CLR_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_CLR_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_CLR_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_CLR_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_CLR_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_A_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_A_MASK)
#define CCM_PRE_ROOT_CLR_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_CLR_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_CLR_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_CLR_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_CLR */
#define CCM_PRE_ROOT_CLR_COUNT                   (142U)

/*! @name PRE_ROOT_TOG - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_TOG_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_TOG_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_TOG_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_TOG_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_TOG_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_TOG_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_B_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_B_MASK)
#define CCM_PRE_ROOT_TOG_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_TOG_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_TOG_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_TOG_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_TOG_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_TOG_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_TOG_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_TOG_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_TOG_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_TOG_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_A_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_A_MASK)
#define CCM_PRE_ROOT_TOG_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_TOG_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_TOG_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_TOG_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_TOG */
#define CCM_PRE_ROOT_TOG_COUNT                   (142U)

/*! @name ACCESS_CTRL - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK        (0xFU)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT       (0U)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK        (0xF0U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT       (4U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK        (0xF00U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT       (8U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK        (0xF000U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT       (12U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_OWNER_ID_MASK            (0x30000U)
#define CCM_ACCESS_CTRL_OWNER_ID_SHIFT           (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_OWNER_ID(x)              (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_MUTEX_MASK               (0x100000U)
#define CCM_ACCESS_CTRL_MUTEX_SHIFT              (20U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_MASK   (0x1000000U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_SHIFT  (24U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_MASK   (0x2000000U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_SHIFT  (25U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_MASK   (0x4000000U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_SHIFT  (26U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_MASK   (0x8000000U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_SHIFT  (27U)
#define CCM_ACCESS_CTRL_SEMA_EN_MASK             (0x10000000U)
#define CCM_ACCESS_CTRL_SEMA_EN_SHIFT            (28U)
#define CCM_ACCESS_CTRL_LOCK_MASK                (0x80000000U)
#define CCM_ACCESS_CTRL_LOCK_SHIFT               (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL */
#define CCM_ACCESS_CTRL_COUNT                    (142U)

/*! @name ACCESS_CTRL_ROOT_SET - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_SET */
#define CCM_ACCESS_CTRL_ROOT_SET_COUNT           (142U)

/*! @name ACCESS_CTRL_ROOT_CLR - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_CLR */
#define CCM_ACCESS_CTRL_ROOT_CLR_COUNT           (142U)

/*! @name ACCESS_CTRL_ROOT_TOG - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_TOG */
#define CCM_ACCESS_CTRL_ROOT_TOG_COUNT           (142U)


/*!
 * @}
 */ /* end of group CCM_Register_Masks */


/* CCM - Peripheral instance base addresses */
/** Peripheral CCM base pointer */
#define CCM_BASE_PTR                             ((CCM_MemMapPtr)0x30380000u)
/** Array initializer of CCM peripheral base pointers */
#define CCM_BASE_PTRS                            { CCM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register instance definitions */
/* CCM */
#define CCM_GPR0                                 CCM_GPR0_REG(CCM_BASE_PTR)
#define CCM_GPR0_SET                             CCM_GPR0_SET_REG(CCM_BASE_PTR)
#define CCM_GPR0_CLR                             CCM_GPR0_CLR_REG(CCM_BASE_PTR)
#define CCM_GPR0_TOG                             CCM_GPR0_TOG_REG(CCM_BASE_PTR)
#define CCM_PLL_CTRL0                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL1                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL2                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL3                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL4                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL5                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL6                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL7                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL8                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL9                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL10                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL11                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL12                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL13                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL14                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL15                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL16                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL17                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL18                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL19                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL20                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL21                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL22                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL23                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL24                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL25                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL26                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL27                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL28                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL29                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL30                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL31                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL32                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL33                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL34                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL35                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL36                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL37                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL38                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,38)
#define CCM_CCGR0                                CCM_CCGR_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,0)
#define CCM_CCGR1                                CCM_CCGR_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,1)
#define CCM_CCGR2                                CCM_CCGR_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,2)
#define CCM_CCGR3                                CCM_CCGR_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,3)
#define CCM_CCGR4                                CCM_CCGR_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,4)
#define CCM_CCGR5                                CCM_CCGR_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,5)
#define CCM_CCGR6                                CCM_CCGR_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,6)
#define CCM_CCGR7                                CCM_CCGR_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,7)
#define CCM_CCGR8                                CCM_CCGR_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,8)
#define CCM_CCGR9                                CCM_CCGR_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,9)
#define CCM_CCGR10                               CCM_CCGR_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,10)
#define CCM_CCGR11                               CCM_CCGR_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,11)
#define CCM_CCGR12                               CCM_CCGR_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,12)
#define CCM_CCGR13                               CCM_CCGR_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,13)
#define CCM_CCGR14                               CCM_CCGR_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,14)
#define CCM_CCGR15                               CCM_CCGR_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,15)
#define CCM_CCGR16                               CCM_CCGR_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,16)
#define CCM_CCGR17                               CCM_CCGR_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,17)
#define CCM_CCGR18                               CCM_CCGR_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,18)
#define CCM_CCGR19                               CCM_CCGR_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,19)
#define CCM_CCGR20                               CCM_CCGR_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,20)
#define CCM_CCGR21                               CCM_CCGR_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,21)
#define CCM_CCGR22                               CCM_CCGR_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,22)
#define CCM_CCGR23                               CCM_CCGR_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,23)
#define CCM_CCGR24                               CCM_CCGR_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,24)
#define CCM_CCGR25                               CCM_CCGR_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,25)
#define CCM_CCGR26                               CCM_CCGR_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,26)
#define CCM_CCGR27                               CCM_CCGR_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,27)
#define CCM_CCGR28                               CCM_CCGR_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,28)
#define CCM_CCGR29                               CCM_CCGR_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,29)
#define CCM_CCGR30                               CCM_CCGR_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,30)
#define CCM_CCGR31                               CCM_CCGR_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,31)
#define CCM_CCGR32                               CCM_CCGR_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,32)
#define CCM_CCGR33                               CCM_CCGR_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,33)
#define CCM_CCGR34                               CCM_CCGR_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,34)
#define CCM_CCGR35                               CCM_CCGR_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,35)
#define CCM_CCGR36                               CCM_CCGR_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,36)
#define CCM_CCGR37                               CCM_CCGR_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,37)
#define CCM_CCGR38                               CCM_CCGR_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,38)
#define CCM_CCGR39                               CCM_CCGR_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,39)
#define CCM_CCGR40                               CCM_CCGR_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,40)
#define CCM_CCGR41                               CCM_CCGR_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,41)
#define CCM_CCGR42                               CCM_CCGR_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,42)
#define CCM_CCGR43                               CCM_CCGR_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,43)
#define CCM_CCGR44                               CCM_CCGR_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,44)
#define CCM_CCGR45                               CCM_CCGR_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,45)
#define CCM_CCGR46                               CCM_CCGR_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,46)
#define CCM_CCGR47                               CCM_CCGR_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,47)
#define CCM_CCGR48                               CCM_CCGR_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,48)
#define CCM_CCGR49                               CCM_CCGR_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,49)
#define CCM_CCGR50                               CCM_CCGR_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,50)
#define CCM_CCGR51                               CCM_CCGR_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,51)
#define CCM_CCGR52                               CCM_CCGR_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,52)
#define CCM_CCGR53                               CCM_CCGR_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,53)
#define CCM_CCGR54                               CCM_CCGR_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,54)
#define CCM_CCGR55                               CCM_CCGR_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,55)
#define CCM_CCGR56                               CCM_CCGR_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,56)
#define CCM_CCGR57                               CCM_CCGR_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,57)
#define CCM_CCGR58                               CCM_CCGR_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,58)
#define CCM_CCGR59                               CCM_CCGR_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,59)
#define CCM_CCGR60                               CCM_CCGR_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,60)
#define CCM_CCGR61                               CCM_CCGR_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,61)
#define CCM_CCGR62                               CCM_CCGR_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,62)
#define CCM_CCGR63                               CCM_CCGR_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,63)
#define CCM_CCGR64                               CCM_CCGR_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,64)
#define CCM_CCGR65                               CCM_CCGR_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,65)
#define CCM_CCGR66                               CCM_CCGR_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,66)
#define CCM_CCGR67                               CCM_CCGR_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,67)
#define CCM_CCGR68                               CCM_CCGR_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,68)
#define CCM_CCGR69                               CCM_CCGR_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,69)
#define CCM_CCGR70                               CCM_CCGR_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,70)
#define CCM_CCGR71                               CCM_CCGR_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,71)
#define CCM_CCGR72                               CCM_CCGR_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,72)
#define CCM_CCGR73                               CCM_CCGR_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,73)
#define CCM_CCGR74                               CCM_CCGR_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,74)
#define CCM_CCGR75                               CCM_CCGR_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,75)
#define CCM_CCGR76                               CCM_CCGR_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,76)
#define CCM_CCGR77                               CCM_CCGR_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,77)
#define CCM_CCGR78                               CCM_CCGR_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,78)
#define CCM_CCGR79                               CCM_CCGR_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,79)
#define CCM_CCGR80                               CCM_CCGR_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,80)
#define CCM_CCGR81                               CCM_CCGR_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,81)
#define CCM_CCGR82                               CCM_CCGR_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,82)
#define CCM_CCGR83                               CCM_CCGR_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,83)
#define CCM_CCGR84                               CCM_CCGR_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,84)
#define CCM_CCGR85                               CCM_CCGR_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,85)
#define CCM_CCGR86                               CCM_CCGR_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,86)
#define CCM_CCGR87                               CCM_CCGR_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,87)
#define CCM_CCGR88                               CCM_CCGR_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,88)
#define CCM_CCGR89                               CCM_CCGR_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,89)
#define CCM_CCGR90                               CCM_CCGR_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,90)
#define CCM_CCGR91                               CCM_CCGR_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,91)
#define CCM_CCGR92                               CCM_CCGR_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,92)
#define CCM_CCGR93                               CCM_CCGR_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,93)
#define CCM_CCGR94                               CCM_CCGR_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,94)
#define CCM_CCGR95                               CCM_CCGR_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,95)
#define CCM_CCGR96                               CCM_CCGR_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,96)
#define CCM_CCGR97                               CCM_CCGR_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,97)
#define CCM_CCGR98                               CCM_CCGR_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,98)
#define CCM_CCGR99                               CCM_CCGR_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,99)
#define CCM_CCGR100                              CCM_CCGR_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,100)
#define CCM_CCGR101                              CCM_CCGR_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,101)
#define CCM_CCGR102                              CCM_CCGR_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,102)
#define CCM_CCGR103                              CCM_CCGR_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,103)
#define CCM_CCGR104                              CCM_CCGR_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,104)
#define CCM_CCGR105                              CCM_CCGR_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,105)
#define CCM_CCGR106                              CCM_CCGR_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,106)
#define CCM_CCGR107                              CCM_CCGR_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,107)
#define CCM_CCGR108                              CCM_CCGR_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,108)
#define CCM_CCGR109                              CCM_CCGR_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,109)
#define CCM_CCGR110                              CCM_CCGR_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,110)
#define CCM_CCGR111                              CCM_CCGR_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,111)
#define CCM_CCGR112                              CCM_CCGR_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,112)
#define CCM_CCGR113                              CCM_CCGR_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,113)
#define CCM_CCGR114                              CCM_CCGR_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,114)
#define CCM_CCGR115                              CCM_CCGR_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,115)
#define CCM_CCGR116                              CCM_CCGR_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,116)
#define CCM_CCGR117                              CCM_CCGR_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,117)
#define CCM_CCGR118                              CCM_CCGR_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,118)
#define CCM_CCGR119                              CCM_CCGR_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,119)
#define CCM_CCGR120                              CCM_CCGR_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,120)
#define CCM_CCGR121                              CCM_CCGR_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,121)
#define CCM_CCGR122                              CCM_CCGR_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,122)
#define CCM_CCGR123                              CCM_CCGR_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,123)
#define CCM_CCGR124                              CCM_CCGR_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,124)
#define CCM_CCGR125                              CCM_CCGR_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,125)
#define CCM_CCGR126                              CCM_CCGR_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,126)
#define CCM_CCGR127                              CCM_CCGR_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,127)
#define CCM_CCGR128                              CCM_CCGR_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,128)
#define CCM_CCGR129                              CCM_CCGR_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,129)
#define CCM_CCGR130                              CCM_CCGR_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,130)
#define CCM_CCGR131                              CCM_CCGR_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,131)
#define CCM_CCGR132                              CCM_CCGR_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,132)
#define CCM_CCGR133                              CCM_CCGR_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,133)
#define CCM_CCGR134                              CCM_CCGR_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,134)
#define CCM_CCGR135                              CCM_CCGR_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,135)
#define CCM_CCGR136                              CCM_CCGR_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,136)
#define CCM_CCGR137                              CCM_CCGR_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,137)
#define CCM_CCGR138                              CCM_CCGR_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,138)
#define CCM_CCGR139                              CCM_CCGR_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,139)
#define CCM_CCGR140                              CCM_CCGR_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,140)
#define CCM_CCGR141                              CCM_CCGR_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,141)
#define CCM_CCGR142                              CCM_CCGR_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,142)
#define CCM_CCGR143                              CCM_CCGR_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,143)
#define CCM_CCGR144                              CCM_CCGR_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,144)
#define CCM_CCGR145                              CCM_CCGR_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,145)
#define CCM_CCGR146                              CCM_CCGR_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,146)
#define CCM_CCGR147                              CCM_CCGR_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,147)
#define CCM_CCGR148                              CCM_CCGR_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,148)
#define CCM_CCGR149                              CCM_CCGR_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,149)
#define CCM_CCGR150                              CCM_CCGR_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,150)
#define CCM_CCGR151                              CCM_CCGR_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,151)
#define CCM_CCGR152                              CCM_CCGR_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,152)
#define CCM_CCGR153                              CCM_CCGR_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,153)
#define CCM_CCGR154                              CCM_CCGR_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,154)
#define CCM_CCGR155                              CCM_CCGR_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,155)
#define CCM_CCGR156                              CCM_CCGR_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,156)
#define CCM_CCGR157                              CCM_CCGR_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,157)
#define CCM_CCGR158                              CCM_CCGR_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,158)
#define CCM_CCGR159                              CCM_CCGR_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,159)
#define CCM_CCGR160                              CCM_CCGR_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,160)
#define CCM_CCGR161                              CCM_CCGR_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,161)
#define CCM_CCGR162                              CCM_CCGR_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,162)
#define CCM_CCGR163                              CCM_CCGR_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,163)
#define CCM_CCGR164                              CCM_CCGR_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,164)
#define CCM_CCGR165                              CCM_CCGR_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,165)
#define CCM_CCGR166                              CCM_CCGR_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,166)
#define CCM_CCGR167                              CCM_CCGR_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,167)
#define CCM_CCGR168                              CCM_CCGR_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,168)
#define CCM_CCGR169                              CCM_CCGR_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,169)
#define CCM_CCGR170                              CCM_CCGR_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,170)
#define CCM_CCGR171                              CCM_CCGR_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,171)
#define CCM_CCGR172                              CCM_CCGR_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,172)
#define CCM_CCGR173                              CCM_CCGR_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,173)
#define CCM_CCGR174                              CCM_CCGR_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,174)
#define CCM_CCGR175                              CCM_CCGR_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,175)
#define CCM_CCGR176                              CCM_CCGR_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,176)
#define CCM_CCGR177                              CCM_CCGR_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,177)
#define CCM_CCGR178                              CCM_CCGR_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,178)
#define CCM_CCGR179                              CCM_CCGR_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,179)
#define CCM_CCGR180                              CCM_CCGR_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,180)
#define CCM_CCGR181                              CCM_CCGR_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,181)
#define CCM_CCGR182                              CCM_CCGR_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,182)
#define CCM_CCGR183                              CCM_CCGR_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,183)
#define CCM_CCGR184                              CCM_CCGR_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,184)
#define CCM_CCGR185                              CCM_CCGR_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,185)
#define CCM_CCGR186                              CCM_CCGR_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,186)
#define CCM_CCGR187                              CCM_CCGR_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,187)
#define CCM_CCGR188                              CCM_CCGR_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,188)
#define CCM_CCGR189                              CCM_CCGR_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,189)
#define CCM_CCGR190                              CCM_CCGR_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,190)
#define CCM_TARGET_ROOT0                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_MISC0                                CCM_MISC_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_POST0                                CCM_POST_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_PRE0                                 CCM_PRE_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL0                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT1                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_MISC1                                CCM_MISC_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_POST1                                CCM_POST_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_PRE1                                 CCM_PRE_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL1                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT2                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_MISC2                                CCM_MISC_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_POST2                                CCM_POST_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_PRE2                                 CCM_PRE_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL2                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT3                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_MISC3                                CCM_MISC_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_POST3                                CCM_POST_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_PRE3                                 CCM_PRE_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL3                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT4                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_MISC4                                CCM_MISC_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_POST4                                CCM_POST_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_PRE4                                 CCM_PRE_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL4                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT16                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_MISC16                               CCM_MISC_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_POST16                               CCM_POST_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_PRE16                                CCM_PRE_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL16                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT17                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_MISC17                               CCM_MISC_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_POST17                               CCM_POST_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_PRE17                                CCM_PRE_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL17                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT18                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_MISC18                               CCM_MISC_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_POST18                               CCM_POST_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_PRE18                                CCM_PRE_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL18                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT19                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_MISC19                               CCM_MISC_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_POST19                               CCM_POST_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_PRE19                                CCM_PRE_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL19                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT20                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_MISC20                               CCM_MISC_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_POST20                               CCM_POST_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_PRE20                                CCM_PRE_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL20                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT21                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_MISC21                               CCM_MISC_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_POST21                               CCM_POST_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_PRE21                                CCM_PRE_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL21                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT22                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_MISC22                               CCM_MISC_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_POST22                               CCM_POST_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_PRE22                                CCM_PRE_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL22                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT23                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_MISC23                               CCM_MISC_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_POST23                               CCM_POST_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_PRE23                                CCM_PRE_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL23                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT24                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_MISC24                               CCM_MISC_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_POST24                               CCM_POST_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_PRE24                                CCM_PRE_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL24                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT25                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_MISC25                               CCM_MISC_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_POST25                               CCM_POST_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_PRE25                                CCM_PRE_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL25                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT26                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_MISC26                               CCM_MISC_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_POST26                               CCM_POST_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_PRE26                                CCM_PRE_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL26                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT27                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_MISC27                               CCM_MISC_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_POST27                               CCM_POST_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_PRE27                                CCM_PRE_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL27                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT32                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_MISC32                               CCM_MISC_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_POST32                               CCM_POST_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_PRE32                                CCM_PRE_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL32                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT33                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_MISC33                               CCM_MISC_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_POST33                               CCM_POST_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_PRE33                                CCM_PRE_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL33                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT34                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_MISC34                               CCM_MISC_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_POST34                               CCM_POST_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_PRE34                                CCM_PRE_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL34                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT35                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_MISC35                               CCM_MISC_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_POST35                               CCM_POST_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_PRE35                                CCM_PRE_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL35                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT36                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_MISC36                               CCM_MISC_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_POST36                               CCM_POST_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_PRE36                                CCM_PRE_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL36                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT37                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_MISC37                               CCM_MISC_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_POST37                               CCM_POST_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_PRE37                                CCM_PRE_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL37                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT48                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_MISC48                               CCM_MISC_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_POST48                               CCM_POST_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_PRE48                                CCM_PRE_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL48                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT49                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_MISC49                               CCM_MISC_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_POST49                               CCM_POST_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_PRE49                                CCM_PRE_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL49                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT64                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_MISC64                               CCM_MISC_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_POST64                               CCM_POST_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_PRE64                                CCM_PRE_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL64                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT65                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_MISC65                               CCM_MISC_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_POST65                               CCM_POST_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_PRE65                                CCM_PRE_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL65                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT66                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_MISC66                               CCM_MISC_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_POST66                               CCM_POST_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_PRE66                                CCM_PRE_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL66                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT67                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_MISC67                               CCM_MISC_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_POST67                               CCM_POST_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_PRE67                                CCM_PRE_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL67                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT68                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_MISC68                               CCM_MISC_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_POST68                               CCM_POST_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_PRE68                                CCM_PRE_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL68                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT69                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_MISC69                               CCM_MISC_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_POST69                               CCM_POST_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_PRE69                                CCM_PRE_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL69                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT70                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_MISC70                               CCM_MISC_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_POST70                               CCM_POST_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_PRE70                                CCM_PRE_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL70                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT71                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_MISC71                               CCM_MISC_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_POST71                               CCM_POST_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_PRE71                                CCM_PRE_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL71                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT72                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_MISC72                               CCM_MISC_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_POST72                               CCM_POST_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_PRE72                                CCM_PRE_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL72                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT73                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_MISC73                               CCM_MISC_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_POST73                               CCM_POST_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_PRE73                                CCM_PRE_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL73                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT74                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_MISC74                               CCM_MISC_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_POST74                               CCM_POST_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_PRE74                                CCM_PRE_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL74                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT75                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_MISC75                               CCM_MISC_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_POST75                               CCM_POST_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_PRE75                                CCM_PRE_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL75                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT76                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_MISC76                               CCM_MISC_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_POST76                               CCM_POST_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_PRE76                                CCM_PRE_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL76                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT77                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_MISC77                               CCM_MISC_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_POST77                               CCM_POST_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_PRE77                                CCM_PRE_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL77                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT78                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_MISC78                               CCM_MISC_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_POST78                               CCM_POST_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_PRE78                                CCM_PRE_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL78                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT79                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_MISC79                               CCM_MISC_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_POST79                               CCM_POST_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_PRE79                                CCM_PRE_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL79                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT80                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_MISC80                               CCM_MISC_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_POST80                               CCM_POST_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_PRE80                                CCM_PRE_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL80                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT81                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_MISC81                               CCM_MISC_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_POST81                               CCM_POST_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_PRE81                                CCM_PRE_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL81                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT82                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_MISC82                               CCM_MISC_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_POST82                               CCM_POST_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_PRE82                                CCM_PRE_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL82                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT83                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_MISC83                               CCM_MISC_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_POST83                               CCM_POST_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_PRE83                                CCM_PRE_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL83                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT84                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_MISC84                               CCM_MISC_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_POST84                               CCM_POST_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_PRE84                                CCM_PRE_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL84                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT85                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_MISC85                               CCM_MISC_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_POST85                               CCM_POST_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_PRE85                                CCM_PRE_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL85                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT86                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_MISC86                               CCM_MISC_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_POST86                               CCM_POST_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_PRE86                                CCM_PRE_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL86                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT87                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_MISC87                               CCM_MISC_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_POST87                               CCM_POST_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_PRE87                                CCM_PRE_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL87                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT88                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_MISC88                               CCM_MISC_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_POST88                               CCM_POST_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_PRE88                                CCM_PRE_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL88                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT89                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_MISC89                               CCM_MISC_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_POST89                               CCM_POST_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_PRE89                                CCM_PRE_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL89                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT90                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_MISC90                               CCM_MISC_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_POST90                               CCM_POST_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_PRE90                                CCM_PRE_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL90                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT91                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_MISC91                               CCM_MISC_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_POST91                               CCM_POST_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_PRE91                                CCM_PRE_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL91                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT92                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_MISC92                               CCM_MISC_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_POST92                               CCM_POST_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_PRE92                                CCM_PRE_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL92                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT93                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_MISC93                               CCM_MISC_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_POST93                               CCM_POST_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_PRE93                                CCM_PRE_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL93                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT94                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_MISC94                               CCM_MISC_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_POST94                               CCM_POST_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_PRE94                                CCM_PRE_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL94                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT95                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_MISC95                               CCM_MISC_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_POST95                               CCM_POST_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_PRE95                                CCM_PRE_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL95                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT96                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_MISC96                               CCM_MISC_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_POST96                               CCM_POST_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_PRE96                                CCM_PRE_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL96                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT97                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_MISC97                               CCM_MISC_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_POST97                               CCM_POST_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_PRE97                                CCM_PRE_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL97                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT98                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_MISC98                               CCM_MISC_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_POST98                               CCM_POST_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_PRE98                                CCM_PRE_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL98                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT99                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_MISC99                               CCM_MISC_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_POST99                               CCM_POST_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_PRE99                                CCM_PRE_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL99                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT100                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_MISC100                              CCM_MISC_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_POST100                              CCM_POST_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_PRE100                               CCM_PRE_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL100                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT101                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_MISC101                              CCM_MISC_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_POST101                              CCM_POST_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_PRE101                               CCM_PRE_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL101                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT102                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_MISC102                              CCM_MISC_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_POST102                              CCM_POST_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_PRE102                               CCM_PRE_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL102                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT103                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_MISC103                              CCM_MISC_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_POST103                              CCM_POST_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_PRE103                               CCM_PRE_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL103                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT104                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_MISC104                              CCM_MISC_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_POST104                              CCM_POST_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_PRE104                               CCM_PRE_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL104                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT105                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_MISC105                              CCM_MISC_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_POST105                              CCM_POST_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_PRE105                               CCM_PRE_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL105                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT106                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_MISC106                              CCM_MISC_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_POST106                              CCM_POST_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_PRE106                               CCM_PRE_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL106                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT107                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_MISC107                              CCM_MISC_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_POST107                              CCM_POST_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_PRE107                               CCM_PRE_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL107                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT108                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_MISC108                              CCM_MISC_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_POST108                              CCM_POST_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_PRE108                               CCM_PRE_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL108                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT109                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_MISC109                              CCM_MISC_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_POST109                              CCM_POST_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_PRE109                               CCM_PRE_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL109                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT110                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_MISC110                              CCM_MISC_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_POST110                              CCM_POST_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_PRE110                               CCM_PRE_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL110                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT111                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_MISC111                              CCM_MISC_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_POST111                              CCM_POST_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_PRE111                               CCM_PRE_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL111                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT112                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_MISC112                              CCM_MISC_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_POST112                              CCM_POST_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_PRE112                               CCM_PRE_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL112                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT113                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_MISC113                              CCM_MISC_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_POST113                              CCM_POST_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_PRE113                               CCM_PRE_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL113                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT114                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_MISC114                              CCM_MISC_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_POST114                              CCM_POST_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_PRE114                               CCM_PRE_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL114                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT115                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_MISC115                              CCM_MISC_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_POST115                              CCM_POST_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_PRE115                               CCM_PRE_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL115                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT116                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_MISC116                              CCM_MISC_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_POST116                              CCM_POST_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_PRE116                               CCM_PRE_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL116                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT117                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_MISC117                              CCM_MISC_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_POST117                              CCM_POST_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_PRE117                               CCM_PRE_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL117                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT118                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_MISC118                              CCM_MISC_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_POST118                              CCM_POST_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_PRE118                               CCM_PRE_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL118                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT119                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_MISC119                              CCM_MISC_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_POST119                              CCM_POST_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_PRE119                               CCM_PRE_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL119                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT120                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_MISC120                              CCM_MISC_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_POST120                              CCM_POST_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_PRE120                               CCM_PRE_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL120                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT121                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_MISC121                              CCM_MISC_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_POST121                              CCM_POST_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_PRE121                               CCM_PRE_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL121                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT122                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_MISC122                              CCM_MISC_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_POST122                              CCM_POST_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_PRE122                               CCM_PRE_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL122                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT123                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_MISC123                              CCM_MISC_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_POST123                              CCM_POST_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_PRE123                               CCM_PRE_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL123                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT124                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_MISC124                              CCM_MISC_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_POST124                              CCM_POST_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_PRE124                               CCM_PRE_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL124                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT125                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_MISC125                              CCM_MISC_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_POST125                              CCM_POST_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_PRE125                               CCM_PRE_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL125                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT126                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_MISC126                              CCM_MISC_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_POST126                              CCM_POST_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_PRE126                               CCM_PRE_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL126                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT127                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_MISC127                              CCM_MISC_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_POST127                              CCM_POST_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_PRE127                               CCM_PRE_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL127                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT128                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_MISC128                              CCM_MISC_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_POST128                              CCM_POST_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_PRE128                               CCM_PRE_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL128                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT129                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_MISC129                              CCM_MISC_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_POST129                              CCM_POST_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_PRE129                               CCM_PRE_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL129                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT130                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_MISC130                              CCM_MISC_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_POST130                              CCM_POST_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_PRE130                               CCM_PRE_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL130                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT131                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_MISC131                              CCM_MISC_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_POST131                              CCM_POST_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_PRE131                               CCM_PRE_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL131                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT132                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_MISC132                              CCM_MISC_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_POST132                              CCM_POST_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_PRE132                               CCM_PRE_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL132                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT133                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_MISC133                              CCM_MISC_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_POST133                              CCM_POST_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_PRE133                               CCM_PRE_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL133                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT134                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_MISC134                              CCM_MISC_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_POST134                              CCM_POST_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_PRE134                               CCM_PRE_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL134                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT135                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_MISC135                              CCM_MISC_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_POST135                              CCM_POST_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_PRE135                               CCM_PRE_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL135                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT136                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_MISC136                              CCM_MISC_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_POST136                              CCM_POST_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_PRE136                               CCM_PRE_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL136                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT137                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_MISC137                              CCM_MISC_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_POST137                              CCM_POST_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_PRE137                               CCM_PRE_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL137                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT138                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_MISC138                              CCM_MISC_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_POST138                              CCM_POST_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_PRE138                               CCM_PRE_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL138                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT139                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_MISC139                              CCM_MISC_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_POST139                              CCM_POST_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_PRE139                               CCM_PRE_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL139                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT140                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_MISC140                              CCM_MISC_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_POST140                              CCM_POST_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_PRE140                               CCM_PRE_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL140                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT141                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_MISC141                              CCM_MISC_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_POST141                              CCM_POST_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_PRE141                               CCM_PRE_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL141                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,141)

/* CCM - Register array accessors */
#define CCM_PLL_CTRL(index)                      CCM_PLL_CTRL_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_SET(index)                  CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_CLR(index)                  CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_TOG(index)                  CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,index)
#define CCM_CCGR(index)                          CCM_CCGR_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_SET(index)                      CCM_CCGR_SET_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_CLR(index)                      CCM_CCGR_CLR_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_TOG(index)                      CCM_CCGR_TOG_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT(index)                   CCM_TARGET_ROOT_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_SET(index)               CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_CLR(index)               CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_TOG(index)               CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_MISC(index)                          CCM_MISC_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_SET(index)                 CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_CLR(index)                 CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_TOG(index)                 CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_POST(index)                          CCM_POST_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_SET(index)                 CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_CLR(index)                 CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_TOG(index)                 CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_PRE(index)                           CCM_PRE_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_SET(index)                  CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_CLR(index)                  CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_TOG(index)                  CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL(index)                   CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_SET(index)          CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_CLR(index)          CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_TOG(index)          CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Peripheral CCM_ANALOG
 * @{
 */

/** CCM_ANALOG - Peripheral register structure */
typedef struct CCM_ANALOG_MemMap {
  uint32_t AUDIO_PLL1_CFG0;                        /**< AUDIO PLL1 Configuration 0 Register, offset: 0x0 */
  uint32_t AUDIO_PLL1_CFG1;                        /**< AUDIO PLL1 Configuration 1 Register, offset: 0x4 */
  uint32_t AUDIO_PLL2_CFG0;                        /**< AUDIO PLL2 Configuration 0 Register, offset: 0x8 */
  uint32_t AUDIO_PLL2_CFG1;                        /**< AUDIO PLL2 Configuration 1 Register, offset: 0xC */
  uint32_t VIDEO_PLL1_CFG0;                        /**< VIDEO PLL Configuration 0 Register, offset: 0x10 */
  uint32_t VIDEO_PLL1_CFG1;                        /**< VIDEO PLL Configuration 1 Register, offset: 0x14 */
  uint32_t GPU_PLL_CFG0;                           /**< GPU PLL Configuration 0 Register, offset: 0x18 */
  uint32_t GPU_PLL_CFG1;                           /**< GPU PLL Configuration 1 Register, offset: 0x1C */
  uint32_t VPU_PLL_CFG0;                           /**< VPU PLL Configuration 0 Register, offset: 0x20 */
  uint32_t VPU_PLL_CFG1;                           /**< VPU PLL Configuration 1 Register, offset: 0x24 */
  uint32_t ARM_PLL_CFG0;                           /**< ARM PLL Configuration 0 Register, offset: 0x28 */
  uint32_t ARM_PLL_CFG1;                           /**< ARM PLL Configuration 1 Register, offset: 0x2C */
  uint32_t SYS_PLL1_CFG0;                          /**< System PLL Configuration 0 Register, offset: 0x30 */
  uint32_t SYS_PLL1_CFG1;                          /**< System_PLL Configuration 1 Register, offset: 0x34 */
  uint32_t SYS_PLL1_CFG2;                          /**< System_PLL Configuration 2 Register, offset: 0x38 */
  uint32_t SYS_PLL2_CFG0;                          /**< System PLL Configuration 0 Register, offset: 0x3C */
  uint32_t SYS_PLL2_CFG1;                          /**< System_PLL Configuration 1 Register, offset: 0x40 */
  uint32_t SYS_PLL2_CFG2;                          /**< System_PLL Configuration 2 Register, offset: 0x44 */
  uint32_t SYS_PLL3_CFG0;                          /**< System PLL Configuration 0 Register, offset: 0x48 */
  uint32_t SYS_PLL3_CFG1;                          /**< System_PLL Configuration 1 Register, offset: 0x4C */
  uint32_t SYS_PLL3_CFG2;                          /**< System_PLL Configuration 2 Register, offset: 0x50 */
  uint32_t VIDEO_PLL2_CFG0;                        /**< VIDEO PLL2 Configuration 0 Register, offset: 0x54 */
  uint32_t VIDEO_PLL2_CFG1;                        /**< VIDEO PLL2 Configuration 1 Register, offset: 0x58 */
  uint32_t VIDEO_PLL2_CFG2;                        /**< VIDEO PLL2 Configuration 2 Register, offset: 0x5C */
  uint32_t DRAM_PLL_CFG0;                          /**< DRAM PLL Configuration 0 Register, offset: 0x60 */
  uint32_t DRAM_PLL_CFG1;                          /**< DRAM PLL Configuration 1 Register, offset: 0x64 */
  uint32_t DRAM_PLL_CFG2;                          /**< DRAM PLL Configuration 2 Register, offset: 0x68 */
  uint32_t DIGPROG;                                /**< DIGPROG Register, offset: 0x6C */
  uint32_t OSC_MISC_CFG;                           /**< Osc Misc Configuration Register, offset: 0x70 */
  uint32_t PLLOUT_MONITOR_CFG;                     /**< PLLOUT Monitor Configuration Register, offset: 0x74 */
  uint32_t FRAC_PLLOUT_DIV_CFG;                    /**< Fractional PLLOUT Divider Configuration Register, offset: 0x78 */
  uint32_t SCCG_PLLOUT_DIV_CFG;                    /**< SCCG PLLOUT Divider Configuration Register, offset: 0x7C */
} volatile *CCM_ANALOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register accessors */
#define CCM_ANALOG_AUDIO_PLL1_CFG0_REG(base)     ((base)->AUDIO_PLL1_CFG0)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_REG(base)     ((base)->AUDIO_PLL1_CFG1)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_REG(base)     ((base)->AUDIO_PLL2_CFG0)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_REG(base)     ((base)->AUDIO_PLL2_CFG1)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_REG(base)     ((base)->VIDEO_PLL1_CFG0)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_REG(base)     ((base)->VIDEO_PLL1_CFG1)
#define CCM_ANALOG_GPU_PLL_CFG0_REG(base)        ((base)->GPU_PLL_CFG0)
#define CCM_ANALOG_GPU_PLL_CFG1_REG(base)        ((base)->GPU_PLL_CFG1)
#define CCM_ANALOG_VPU_PLL_CFG0_REG(base)        ((base)->VPU_PLL_CFG0)
#define CCM_ANALOG_VPU_PLL_CFG1_REG(base)        ((base)->VPU_PLL_CFG1)
#define CCM_ANALOG_ARM_PLL_CFG0_REG(base)        ((base)->ARM_PLL_CFG0)
#define CCM_ANALOG_ARM_PLL_CFG1_REG(base)        ((base)->ARM_PLL_CFG1)
#define CCM_ANALOG_SYS_PLL1_CFG0_REG(base)       ((base)->SYS_PLL1_CFG0)
#define CCM_ANALOG_SYS_PLL1_CFG1_REG(base)       ((base)->SYS_PLL1_CFG1)
#define CCM_ANALOG_SYS_PLL1_CFG2_REG(base)       ((base)->SYS_PLL1_CFG2)
#define CCM_ANALOG_SYS_PLL2_CFG0_REG(base)       ((base)->SYS_PLL2_CFG0)
#define CCM_ANALOG_SYS_PLL2_CFG1_REG(base)       ((base)->SYS_PLL2_CFG1)
#define CCM_ANALOG_SYS_PLL2_CFG2_REG(base)       ((base)->SYS_PLL2_CFG2)
#define CCM_ANALOG_SYS_PLL3_CFG0_REG(base)       ((base)->SYS_PLL3_CFG0)
#define CCM_ANALOG_SYS_PLL3_CFG1_REG(base)       ((base)->SYS_PLL3_CFG1)
#define CCM_ANALOG_SYS_PLL3_CFG2_REG(base)       ((base)->SYS_PLL3_CFG2)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_REG(base)     ((base)->VIDEO_PLL2_CFG0)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_REG(base)     ((base)->VIDEO_PLL2_CFG1)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_REG(base)     ((base)->VIDEO_PLL2_CFG2)
#define CCM_ANALOG_DRAM_PLL_CFG0_REG(base)       ((base)->DRAM_PLL_CFG0)
#define CCM_ANALOG_DRAM_PLL_CFG1_REG(base)       ((base)->DRAM_PLL_CFG1)
#define CCM_ANALOG_DRAM_PLL_CFG2_REG(base)       ((base)->DRAM_PLL_CFG2)
#define CCM_ANALOG_DIGPROG_REG(base)             ((base)->DIGPROG)
#define CCM_ANALOG_OSC_MISC_CFG_REG(base)        ((base)->OSC_MISC_CFG)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_REG(base)  ((base)->PLLOUT_MONITOR_CFG)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_REG(base) ((base)->FRAC_PLLOUT_DIV_CFG)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_REG(base) ((base)->SCCG_PLLOUT_DIV_CFG)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Masks CCM_ANALOG Register Masks
 * @{
 */

/*! @name AUDIO_PLL1_CFG0 - AUDIO PLL1 Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_MASK   (0x80000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_PD_SHIFT  (19U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_MASK (0x200000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL1_CFG0_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL1_CFG1 - AUDIO PLL1 Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name AUDIO_PLL2_CFG0 - AUDIO PLL2 Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_MASK   (0x80000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_PD_SHIFT  (19U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_MASK (0x200000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL2_CFG0_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL2_CFG1 - AUDIO PLL2 Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name VIDEO_PLL1_CFG0 - VIDEO PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_BYPASS_MASK (0x4000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_PD_MASK   (0x80000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_PD_SHIFT  (19U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_CLKE_MASK (0x200000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_CLKE_SHIFT (21U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL1_CFG0_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name VIDEO_PLL1_CFG1 - VIDEO PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name GPU_PLL_CFG0 - GPU PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_GPU_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
/*! @} */

/*! @name GPU_PLL_CFG1 - GPU PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_GPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name VPU_PLL_CFG0 - VPU PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_VPU_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
/*! @} */

/*! @name VPU_PLL_CFG1 - VPU PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_VPU_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name ARM_PLL_CFG0 - ARM PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK (0x1FU)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK (0x7E0U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT (5U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_DIV_VAL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_MASK (0x800U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_ACK_SHIFT (11U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_MASK (0x1000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_NEWDIV_VAL_SHIFT (12U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x2000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (13U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_MASK  (0x4000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_BYPASS_SHIFT (14U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SEL_SHIFT (15U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x30000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (16U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_MASK      (0x80000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_PD_SHIFT     (19U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_MASK    (0x200000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_CLKE_SHIFT   (21U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_MASK    (0x80000000U)
#define CCM_ANALOG_ARM_PLL_CFG0_PLL_LOCK_SHIFT   (31U)
/*! @} */

/*! @name ARM_PLL_CFG1 - ARM PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_MASK (0x7FU)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG1_PLL_INT_DIV_CTL_MASK)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK (0x7FFFFF80U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT (7U)
#define CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_SHIFT)) & CCM_ANALOG_ARM_PLL_CFG1_PLL_FRAC_DIV_CTL_MASK)
/*! @} */

/*! @name SYS_PLL1_CFG0 - System PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_CLKE_MASK   (0x2000000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_CLKE_SHIFT  (25U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_SYS_PLL1_CFG0_PLL_LOCK_SHIFT  (31U)
/*! @} */

/*! @name SYS_PLL1_CFG1 - System_PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMD_SHIFT  (5U)
/*! PLL_SSMD
 *  0b000..0.25
 *  0b001..0.5
 *  0b010..0.75
 *  0b011..1.0
 *  0b100..1.5
 *  0b101..2.0
 *  0b110..3.0
 *  0b111..4.0
 */
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_SYS_PLL1_CFG1_PLL_SSDS_SHIFT  (8U)
/*! @} */

/*! @name SYS_PLL1_CFG2 - System_PLL Configuration 2 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL1_CFG2_PLL_REF_DIVR1_MASK)
/*! @} */

/*! @name SYS_PLL2_CFG0 - System PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_MASK   (0x2000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_CLKE_SHIFT  (25U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_SYS_PLL2_CFG0_PLL_LOCK_SHIFT  (31U)
/*! @} */

/*! @name SYS_PLL2_CFG1 - System_PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_SHIFT  (5U)
/*! PLL_SSMD
 *  0b000..0.25
 *  0b001..0.5
 *  0b010..0.75
 *  0b011..1.0
 *  0b100..1.5
 *  0b101..2.0
 *  0b110..3.0
 *  0b111..4.0
 */
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_SYS_PLL2_CFG1_PLL_SSDS_SHIFT  (8U)
/*! @} */

/*! @name SYS_PLL2_CFG2 - System_PLL Configuration 2 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL2_CFG2_PLL_REF_DIVR1_MASK)
/*! @} */

/*! @name SYS_PLL3_CFG0 - System PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV20_CLKE_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV10_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV8_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV6_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV5_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV4_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV3_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_DIV2_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_MASK   (0x2000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_CLKE_SHIFT  (25U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_SYS_PLL3_CFG0_PLL_LOCK_SHIFT  (31U)
/*! @} */

/*! @name SYS_PLL3_CFG1 - System_PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_SHIFT  (5U)
/*! PLL_SSMD
 *  0b000..0.25
 *  0b001..0.5
 *  0b010..0.75
 *  0b011..1.0
 *  0b100..1.5
 *  0b101..2.0
 *  0b110..3.0
 *  0b111..4.0
 */
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_SYS_PLL3_CFG1_PLL_SSDS_SHIFT  (8U)
/*! @} */

/*! @name SYS_PLL3_CFG2 - System_PLL Configuration 2 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_SYS_PLL3_CFG2_PLL_REF_DIVR1_MASK)
/*! @} */

/*! @name VIDEO_PLL2_CFG0 - VIDEO PLL2 Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_MASK   (0x80U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_PD_SHIFT  (7U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_MASK (0x200U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_CLKE_SHIFT (9U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG0_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name VIDEO_PLL2_CFG1 - VIDEO PLL2 Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_MASK  (0x1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSE_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_MASK (0x1EU)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_SHIFT (1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_MASK (0xE0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_SHIFT (5U)
/*! PLL_SSMD
 *  0b000..0.25
 *  0b001..0.5
 *  0b010..0.75
 *  0b011..1.0
 *  0b100..1.5
 *  0b101..2.0
 *  0b110..3.0
 *  0b111..4.0
 */
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_MASK (0x100U)
#define CCM_ANALOG_VIDEO_PLL2_CFG1_PLL_SSDS_SHIFT (8U)
/*! @} */

/*! @name VIDEO_PLL2_CFG2 - VIDEO PLL2 Configuration 2 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_VIDEO_PLL2_CFG2_PLL_REF_DIVR1_MASK)
/*! @} */

/*! @name DRAM_PLL_CFG0 - DRAM PLL Configuration 0 Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_MASK (0x3U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT (0U)
/*! PLL_REFCLK_SEL
 *  0b00..25M_REF_CLK
 *  0b01..27M_REF_CLK
 *  0b10..HDMI_PHY_27M_CLK
 *  0b11..CLK_P_N
 */
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG0_PLL_REFCLK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_MASK (0x4U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_COUNTCLK_SEL_SHIFT (2U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_MASK (0x8U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SEL_SHIFT (3U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_MASK (0x10U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS2_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_MASK (0x20U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_BYPASS1_SHIFT (5U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_MASK (0x40U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_OVERRIDE_SHIFT (6U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_MASK     (0x80U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_PD_SHIFT    (7U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_MASK   (0x200U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_CLKE_SHIFT  (9U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_MASK   (0x80000000U)
#define CCM_ANALOG_DRAM_PLL_CFG0_PLL_LOCK_SHIFT  (31U)
/*! @} */

/*! @name DRAM_PLL_CFG1 - DRAM PLL Configuration 1 Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_MASK    (0x1U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSE_SHIFT   (0U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_MASK   (0x1EU)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_SHIFT  (1U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMF_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_MASK   (0xE0U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_SHIFT  (5U)
/*! PLL_SSMD
 *  0b000..0.25
 *  0b001..0.5
 *  0b010..0.75
 *  0b011..1.0
 *  0b100..1.5
 *  0b101..2.0
 *  0b110..3.0
 *  0b111..4.0
 */
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSMD_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_MASK   (0x100U)
#define CCM_ANALOG_DRAM_PLL_CFG1_PLL_SSDS_SHIFT  (8U)
/*! @} */

/*! @name DRAM_PLL_CFG2 - DRAM PLL Configuration 2 Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_MASK (0x1U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FILTER_RANGE_SHIFT (0U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK (0x7EU)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT (1U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK (0x1F80U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT (7U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF2_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK (0x7E000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT (13U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_FEEDBACK_DIVF1_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_MASK (0x1F80000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_SHIFT (19U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR2_MASK)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_MASK (0xE000000U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_SHIFT (25U)
#define CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_SHIFT)) & CCM_ANALOG_DRAM_PLL_CFG2_PLL_REF_DIVR1_MASK)
/*! @} */

/*! @name DIGPROG - DIGPROG Register */
/*! @{ */
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK    (0xFFU)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT   (0U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK (0xFF00U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT (8U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK (0xFF0000U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT (16U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK)
/*! @} */

/*! @name OSC_MISC_CFG - Osc Misc Configuration Register */
/*! @{ */
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_MASK (0x1U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_SHIFT (0U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_MASK (0x2U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_OVERRIDE_SHIFT (1U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_MASK (0x4U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_25M_CLKE_SHIFT (2U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_MASK (0x8U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_OVERRIDE_SHIFT (3U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_MASK (0x10U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_27M_CLKE_SHIFT (4U)
/*! @} */

/*! @name PLLOUT_MONITOR_CFG - PLLOUT Monitor Configuration Register */
/*! @{ */
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_MASK (0xFU)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_SHIFT (0U)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_SHIFT)) & CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CLK_SEL_MASK)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_MASK (0x10U)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG_PLLOUT_MONITOR_CKE_SHIFT (4U)
/*! @} */

/*! @name FRAC_PLLOUT_DIV_CFG - Fractional PLLOUT Divider Configuration Register */
/*! @{ */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_MASK (0x7U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_SHIFT (0U)
/*! AUDIO_PLL1_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_MASK (0x70U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_SHIFT (4U)
/*! AUDIO_PLL2_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_AUDIO_PLL2_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_MASK (0x700U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_SHIFT (8U)
/*! VIDEO_PLL1_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VIDEO_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_MASK (0x7000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_SHIFT (12U)
/*! GPU_PLL_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_GPU_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_MASK (0x70000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_SHIFT (16U)
/*! VPU_PLL_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_VPU_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_MASK (0x700000U)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_SHIFT (20U)
/*! ARM_PLL_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_ARM_PLL_DIV_VAL_MASK)
/*! @} */

/*! @name SCCG_PLLOUT_DIV_CFG - SCCG PLLOUT Divider Configuration Register */
/*! @{ */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_MASK (0x7U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_SHIFT (0U)
/*! SYSTEM_PLL1_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL1_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_MASK (0x70U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_SHIFT (4U)
/*! SYSTEM_PLL2_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL2_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_MASK (0x700U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_SHIFT (8U)
/*! SYSTEM_PLL3_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_SYSTEM_PLL3_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_MASK (0x7000U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_SHIFT (12U)
/*! DRAM_PLL_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_DRAM_PLL_DIV_VAL_MASK)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_MASK (0x70000U)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_SHIFT (16U)
/*! VIDEO_PLL2_DIV_VAL
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_SHIFT)) & CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_VIDEO_PLL2_DIV_VAL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Masks */


/* CCM_ANALOG - Peripheral instance base addresses */
/** Peripheral CCM_ANALOG base pointer */
#define CCM_ANALOG_BASE_PTR                      ((CCM_ANALOG_MemMapPtr)0x30360000u)
/** Array initializer of CCM_ANALOG peripheral base pointers */
#define CCM_ANALOG_BASE_PTRS                     { CCM_ANALOG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register instance definitions */
/* CCM_ANALOG */
#define CCM_ANALOG_AUDIO_PLL1_CFG0               CCM_ANALOG_AUDIO_PLL1_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL1_CFG1               CCM_ANALOG_AUDIO_PLL1_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_CFG0               CCM_ANALOG_AUDIO_PLL2_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_CFG1               CCM_ANALOG_AUDIO_PLL2_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_CFG0               CCM_ANALOG_VIDEO_PLL1_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_CFG1               CCM_ANALOG_VIDEO_PLL1_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_CFG0                  CCM_ANALOG_GPU_PLL_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_CFG1                  CCM_ANALOG_GPU_PLL_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VPU_PLL_CFG0                  CCM_ANALOG_VPU_PLL_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VPU_PLL_CFG1                  CCM_ANALOG_VPU_PLL_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_CFG0                  CCM_ANALOG_ARM_PLL_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_CFG1                  CCM_ANALOG_ARM_PLL_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_CFG0                 CCM_ANALOG_SYS_PLL1_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_CFG1                 CCM_ANALOG_SYS_PLL1_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_CFG2                 CCM_ANALOG_SYS_PLL1_CFG2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_CFG0                 CCM_ANALOG_SYS_PLL2_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_CFG1                 CCM_ANALOG_SYS_PLL2_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_CFG2                 CCM_ANALOG_SYS_PLL2_CFG2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_CFG0                 CCM_ANALOG_SYS_PLL3_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_CFG1                 CCM_ANALOG_SYS_PLL3_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_CFG2                 CCM_ANALOG_SYS_PLL3_CFG2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL2_CFG0               CCM_ANALOG_VIDEO_PLL2_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL2_CFG1               CCM_ANALOG_VIDEO_PLL2_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL2_CFG2               CCM_ANALOG_VIDEO_PLL2_CFG2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_CFG0                 CCM_ANALOG_DRAM_PLL_CFG0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_CFG1                 CCM_ANALOG_DRAM_PLL_CFG1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_CFG2                 CCM_ANALOG_DRAM_PLL_CFG2_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DIGPROG                       CCM_ANALOG_DIGPROG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_OSC_MISC_CFG                  CCM_ANALOG_OSC_MISC_CFG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_PLLOUT_MONITOR_CFG            CCM_ANALOG_PLLOUT_MONITOR_CFG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_FRAC_PLLOUT_DIV_CFG           CCM_ANALOG_FRAC_PLLOUT_DIV_CFG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SCCG_PLLOUT_DIV_CFG           CCM_ANALOG_SCCG_PLLOUT_DIV_CFG_REG(CCM_ANALOG_BASE_PTR)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_ANALOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- CTX_LD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTX_LD_Peripheral CTX_LD
 * @{
 */

/** CTX_LD - Peripheral register structure */
typedef struct CTX_LD_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< Control status register for Context Loader., offset: 0x0 */
    uint32_t SET;                                    /**< Control status register for Context Loader., offset: 0x4 */
    uint32_t CLR;                                    /**< Control status register for Context Loader., offset: 0x8 */
    uint32_t TOG;                                    /**< Control status register for Context Loader., offset: 0xC */
  } CTRL_STATUS;
  uint32_t DB_BASE_ADDR;                           /**< DRAM addr for double buffered register fetch., offset: 0x10 */
  uint32_t DB_COUNT;                               /**< Double buffer register count, offset: 0x14 */
  uint32_t SB_BASE_ADDR;                           /**< DRAM addr for single buffered registers., offset: 0x18 */
  uint32_t SB_COUNT;                               /**< Single buffer register count, offset: 0x1C */
  uint32_t AHB_ERR_ADDR;                           /**< AHB address with error response., offset: 0x20 */
} volatile *CTX_LD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CTX_LD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTX_LD_Register_Accessor_Macros CTX_LD - Register accessor macros
 * @{
 */


/* CTX_LD - Register accessors */
#define CTX_LD_CTRL_STATUS_REG(base)             ((base)->CTRL_STATUS.RW)
#define CTX_LD_CTRL_STATUS_SET_REG(base)         ((base)->CTRL_STATUS.SET)
#define CTX_LD_CTRL_STATUS_CLR_REG(base)         ((base)->CTRL_STATUS.CLR)
#define CTX_LD_CTRL_STATUS_TOG_REG(base)         ((base)->CTRL_STATUS.TOG)
#define CTX_LD_DB_BASE_ADDR_REG(base)            ((base)->DB_BASE_ADDR)
#define CTX_LD_DB_COUNT_REG(base)                ((base)->DB_COUNT)
#define CTX_LD_SB_BASE_ADDR_REG(base)            ((base)->SB_BASE_ADDR)
#define CTX_LD_SB_COUNT_REG(base)                ((base)->SB_COUNT)
#define CTX_LD_AHB_ERR_ADDR_REG(base)            ((base)->AHB_ERR_ADDR)

/*!
 * @}
 */ /* end of group CTX_LD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CTX_LD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTX_LD_Register_Masks CTX_LD Register Masks
 * @{
 */

/*! @name CTRL_STATUS - Control status register for Context Loader. */
/*! @{ */
#define CTX_LD_CTRL_STATUS_ENABLE_MASK           (0x1U)
#define CTX_LD_CTRL_STATUS_ENABLE_SHIFT          (0U)
#define CTX_LD_CTRL_STATUS_ARB_SEL_MASK          (0x2U)
#define CTX_LD_CTRL_STATUS_ARB_SEL_SHIFT         (1U)
#define CTX_LD_CTRL_STATUS_RD_ERR_EN_MASK        (0x4U)
#define CTX_LD_CTRL_STATUS_RD_ERR_EN_SHIFT       (2U)
#define CTX_LD_CTRL_STATUS_DB_COMP_EN_MASK       (0x8U)
#define CTX_LD_CTRL_STATUS_DB_COMP_EN_SHIFT      (3U)
#define CTX_LD_CTRL_STATUS_SB_HP_COMP_EN_MASK    (0x10U)
#define CTX_LD_CTRL_STATUS_SB_HP_COMP_EN_SHIFT   (4U)
#define CTX_LD_CTRL_STATUS_SB_LP_COMP_EN_MASK    (0x20U)
#define CTX_LD_CTRL_STATUS_SB_LP_COMP_EN_SHIFT   (5U)
#define CTX_LD_CTRL_STATUS_DB_PEND_SB_REC_EN_MASK (0x40U)
#define CTX_LD_CTRL_STATUS_DB_PEND_SB_REC_EN_SHIFT (6U)
#define CTX_LD_CTRL_STATUS_SB_PEND_DISP_ACTIVE_EN_MASK (0x80U)
#define CTX_LD_CTRL_STATUS_SB_PEND_DISP_ACTIVE_EN_SHIFT (7U)
#define CTX_LD_CTRL_STATUS_AHB_ERR_EN_MASK       (0x100U)
#define CTX_LD_CTRL_STATUS_AHB_ERR_EN_SHIFT      (8U)
#define CTX_LD_CTRL_STATUS_RD_ERR_MASK           (0x10000U)
#define CTX_LD_CTRL_STATUS_RD_ERR_SHIFT          (16U)
#define CTX_LD_CTRL_STATUS_DB_COMP_MASK          (0x20000U)
#define CTX_LD_CTRL_STATUS_DB_COMP_SHIFT         (17U)
#define CTX_LD_CTRL_STATUS_SB_HP_COMP_MASK       (0x40000U)
#define CTX_LD_CTRL_STATUS_SB_HP_COMP_SHIFT      (18U)
#define CTX_LD_CTRL_STATUS_SB_LP_COMP_MASK       (0x80000U)
#define CTX_LD_CTRL_STATUS_SB_LP_COMP_SHIFT      (19U)
#define CTX_LD_CTRL_STATUS_DB_PEND_SB_REC_MASK   (0x100000U)
#define CTX_LD_CTRL_STATUS_DB_PEND_SB_REC_SHIFT  (20U)
#define CTX_LD_CTRL_STATUS_SB_PEND_DISP_ACTIVE_MASK (0x200000U)
#define CTX_LD_CTRL_STATUS_SB_PEND_DISP_ACTIVE_SHIFT (21U)
#define CTX_LD_CTRL_STATUS_AHB_ERR_MASK          (0x400000U)
#define CTX_LD_CTRL_STATUS_AHB_ERR_SHIFT         (22U)
/*! @} */

/*! @name DB_BASE_ADDR - DRAM addr for double buffered register fetch. */
/*! @{ */
#define CTX_LD_DB_BASE_ADDR_DB_BASE_ADDR_MASK    (0xFFFFFFFFU)
#define CTX_LD_DB_BASE_ADDR_DB_BASE_ADDR_SHIFT   (0U)
#define CTX_LD_DB_BASE_ADDR_DB_BASE_ADDR(x)      (((uint32_t)(((uint32_t)(x)) << CTX_LD_DB_BASE_ADDR_DB_BASE_ADDR_SHIFT)) & CTX_LD_DB_BASE_ADDR_DB_BASE_ADDR_MASK)
/*! @} */

/*! @name DB_COUNT - Double buffer register count */
/*! @{ */
#define CTX_LD_DB_COUNT_DB_COUNT_MASK            (0xFFFFU)
#define CTX_LD_DB_COUNT_DB_COUNT_SHIFT           (0U)
#define CTX_LD_DB_COUNT_DB_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << CTX_LD_DB_COUNT_DB_COUNT_SHIFT)) & CTX_LD_DB_COUNT_DB_COUNT_MASK)
/*! @} */

/*! @name SB_BASE_ADDR - DRAM addr for single buffered registers. */
/*! @{ */
#define CTX_LD_SB_BASE_ADDR_SB_BASE_ADDR_MASK    (0xFFFFFFFFU)
#define CTX_LD_SB_BASE_ADDR_SB_BASE_ADDR_SHIFT   (0U)
#define CTX_LD_SB_BASE_ADDR_SB_BASE_ADDR(x)      (((uint32_t)(((uint32_t)(x)) << CTX_LD_SB_BASE_ADDR_SB_BASE_ADDR_SHIFT)) & CTX_LD_SB_BASE_ADDR_SB_BASE_ADDR_MASK)
/*! @} */

/*! @name SB_COUNT - Single buffer register count */
/*! @{ */
#define CTX_LD_SB_COUNT_HP_COUNT_MASK            (0xFFFFU)
#define CTX_LD_SB_COUNT_HP_COUNT_SHIFT           (0U)
#define CTX_LD_SB_COUNT_HP_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << CTX_LD_SB_COUNT_HP_COUNT_SHIFT)) & CTX_LD_SB_COUNT_HP_COUNT_MASK)
#define CTX_LD_SB_COUNT_LP_COUNT_MASK            (0xFFFF0000U)
#define CTX_LD_SB_COUNT_LP_COUNT_SHIFT           (16U)
#define CTX_LD_SB_COUNT_LP_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << CTX_LD_SB_COUNT_LP_COUNT_SHIFT)) & CTX_LD_SB_COUNT_LP_COUNT_MASK)
/*! @} */

/*! @name AHB_ERR_ADDR - AHB address with error response. */
/*! @{ */
#define CTX_LD_AHB_ERR_ADDR_AHB_ERR_ADDR_MASK    (0xFFFFFFFFU)
#define CTX_LD_AHB_ERR_ADDR_AHB_ERR_ADDR_SHIFT   (0U)
#define CTX_LD_AHB_ERR_ADDR_AHB_ERR_ADDR(x)      (((uint32_t)(((uint32_t)(x)) << CTX_LD_AHB_ERR_ADDR_AHB_ERR_ADDR_SHIFT)) & CTX_LD_AHB_ERR_ADDR_AHB_ERR_ADDR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CTX_LD_Register_Masks */


/* CTX_LD - Peripheral instance base addresses */
/** Peripheral DCSS__CTX_LD base pointer */
#define DCSS__CTX_LD_BASE_PTR                    ((CTX_LD_MemMapPtr)0x32E23000u)
/** Array initializer of CTX_LD peripheral base pointers */
#define CTX_LD_BASE_PTRS                         { DCSS__CTX_LD_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CTX_LD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CTX_LD_Register_Accessor_Macros CTX_LD - Register accessor macros
 * @{
 */


/* CTX_LD - Register instance definitions */
/* DCSS__CTX_LD */
#define DCSS__CTX_LD_CTRL_STATUS                 CTX_LD_CTRL_STATUS_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_CTRL_STATUS_SET             CTX_LD_CTRL_STATUS_SET_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_CTRL_STATUS_CLR             CTX_LD_CTRL_STATUS_CLR_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_CTRL_STATUS_TOG             CTX_LD_CTRL_STATUS_TOG_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_DB_BASE_ADDR                CTX_LD_DB_BASE_ADDR_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_DB_COUNT                    CTX_LD_DB_COUNT_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_SB_BASE_ADDR                CTX_LD_SB_BASE_ADDR_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_SB_COUNT                    CTX_LD_SB_COUNT_REG(DCSS__CTX_LD_BASE_PTR)
#define DCSS__CTX_LD_AHB_ERR_ADDR                CTX_LD_AHB_ERR_ADDR_REG(DCSS__CTX_LD_BASE_PTR)

/*!
 * @}
 */ /* end of group CTX_LD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CTX_LD_Peripheral */


/* ----------------------------------------------------------------------------
   -- DDRC_REGS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_REGS_Peripheral DDRC_REGS
 * @{
 */

/** DDRC_REGS - Peripheral register structure */
typedef struct DDRC_REGS_MemMap {
  uint32_t MSTR;                                   /**< Master Register0, offset: 0x0 */
  uint32_t STAT;                                   /**< Operating Mode Status Register, offset: 0x4 */
  uint8_t RESERVED_0[8];
  uint32_t MRCTRL0;                                /**< Mode Register Read/Write Control Register 0., offset: 0x10 */
  uint32_t MRCTRL1;                                /**< Mode Register Read/Write Control Register 1, offset: 0x14 */
  uint32_t MRSTAT;                                 /**< Mode Register Read/Write Status Register, offset: 0x18 */
  uint32_t MRCTRL2;                                /**< Mode Register Read/Write Control Register 2, offset: 0x1C */
  uint32_t DERATEEN;                               /**< Temperature Derate Enable Register, offset: 0x20 */
  uint32_t DERATEINT;                              /**< Temperature Derate Interval Register, offset: 0x24 */
  uint8_t RESERVED_1[8];
  uint32_t PWRCTL;                                 /**< Low Power Control Register, offset: 0x30 */
  uint32_t PWRTMG;                                 /**< Low Power Timing Register, offset: 0x34 */
  uint32_t HWLPCTL;                                /**< Hardware Low Power Control Register, offset: 0x38 */
  uint8_t RESERVED_2[20];
  uint32_t RFSHCTL0;                               /**< Refresh Control Register 0, offset: 0x50 */
  uint32_t RFSHCTL1;                               /**< Refresh Control Register 1, offset: 0x54 */
  uint8_t RESERVED_3[8];
  uint32_t RFSHCTL3;                               /**< Refresh Control Register 3, offset: 0x60 */
  uint32_t RFSHTMG;                                /**< Refresh Timing Register, offset: 0x64 */
  uint8_t RESERVED_4[88];
  uint32_t CRCPARCTL0;                             /**< CRC Parity Control Register0, offset: 0xC0 */
  uint32_t CRCPARCTL1;                             /**< CRC Parity Control Register1, offset: 0xC4 */
  uint8_t RESERVED_5[4];
  uint32_t CRCPARSTAT;                             /**< CRC Parity Status Register, offset: 0xCC */
  uint32_t INIT0;                                  /**< SDRAM Initialization Register 0, offset: 0xD0 */
  uint32_t INIT1;                                  /**< SDRAM Initialization Register 1, offset: 0xD4 */
  uint32_t INIT2;                                  /**< SDRAM Initialization Register 2, offset: 0xD8 */
  uint32_t INIT3;                                  /**< SDRAM Initialization Register 3, offset: 0xDC */
  uint32_t INIT4;                                  /**< SDRAM Initialization Register 4, offset: 0xE0 */
  uint32_t INIT5;                                  /**< SDRAM Initialization Register 5, offset: 0xE4 */
  uint32_t INIT6;                                  /**< SDRAM Initialization Register 6, offset: 0xE8 */
  uint32_t INIT7;                                  /**< SDRAM Initialization Register 7, offset: 0xEC */
  uint32_t DIMMCTL;                                /**< DIMM Control Register, offset: 0xF0 */
  uint32_t RANKCTL;                                /**< Rank Control Register, offset: 0xF4 */
  uint8_t RESERVED_6[8];
  uint32_t DRAMTMG0;                               /**< SDRAM Timing Register 0, offset: 0x100 */
  uint32_t DRAMTMG1;                               /**< SDRAM Timing Register 1, offset: 0x104 */
  uint32_t DRAMTMG2;                               /**< SDRAM Timing Register 2, offset: 0x108 */
  uint32_t DRAMTMG3;                               /**< SDRAM Timing Register 3, offset: 0x10C */
  uint32_t DRAMTMG4;                               /**< SDRAM Timing Register 4, offset: 0x110 */
  uint32_t DRAMTMG5;                               /**< SDRAM Timing Register 5, offset: 0x114 */
  uint32_t DRAMTMG6;                               /**< SDRAM Timing Register 6, offset: 0x118 */
  uint32_t DRAMTMG7;                               /**< SDRAM Timing Register 7, offset: 0x11C */
  uint32_t DRAMTMG8;                               /**< SDRAM Timing Register 8, offset: 0x120 */
  uint32_t DRAMTMG9;                               /**< SDRAM Timing Register 9, offset: 0x124 */
  uint32_t DRAMTMG10;                              /**< SDRAM Timing Register 10, offset: 0x128 */
  uint32_t DRAMTMG11;                              /**< SDRAM Timing Register 11, offset: 0x12C */
  uint32_t DRAMTMG12;                              /**< SDRAM Timing Register 12, offset: 0x130 */
  uint32_t DRAMTMG13;                              /**< SDRAM Timing Register 13, offset: 0x134 */
  uint32_t DRAMTMG14;                              /**< SDRAM Timing Register 14, offset: 0x138 */
  uint32_t DRAMTMG15;                              /**< SDRAM Timing Register 15, offset: 0x13C */
  uint8_t RESERVED_7[64];
  uint32_t ZQCTL0;                                 /**< ZQ Control Register 0, offset: 0x180 */
  uint32_t ZQCTL1;                                 /**< ZQ Control Register 1, offset: 0x184 */
  uint32_t ZQCTL2;                                 /**< ZQ Control Register 2, offset: 0x188 */
  uint32_t ZQSTAT;                                 /**< ZQ Status Register, offset: 0x18C */
  uint32_t DFITMG0;                                /**< DFI Timing Register 0, offset: 0x190 */
  uint32_t DFITMG1;                                /**< DFI Timing Register 1, offset: 0x194 */
  uint32_t DFILPCFG0;                              /**< DFI Low Power Configuration Register 0, offset: 0x198 */
  uint32_t DFILPCFG1;                              /**< DFI Low Power Configuration Register 1, offset: 0x19C */
  uint32_t DFIUPD0;                                /**< DFI Update Register 0, offset: 0x1A0 */
  uint32_t DFIUPD1;                                /**< DFI Update Register 1, offset: 0x1A4 */
  uint32_t DFIUPD2;                                /**< DFI Update Register 2, offset: 0x1A8 */
  uint8_t RESERVED_8[4];
  uint32_t DFIMISC;                                /**< DFI Miscellaneous Control Register, offset: 0x1B0 */
  uint32_t DFITMG2;                                /**< DFI Timing Register 2, offset: 0x1B4 */
  uint32_t DFITMG3;                                /**< DFI Timing Register 3, offset: 0x1B8 */
  uint32_t DFISTAT;                                /**< DFI Status Register, offset: 0x1BC */
  uint32_t DBICTL;                                 /**< DM/DBI Control Register, offset: 0x1C0 */
  uint8_t RESERVED_9[60];
  uint32_t ADDRMAP0;                               /**< Address Map Register 0, offset: 0x200 */
  uint32_t ADDRMAP1;                               /**< Address Map Register 1, offset: 0x204 */
  uint32_t ADDRMAP2;                               /**< Address Map Register 2, offset: 0x208 */
  uint32_t ADDRMAP3;                               /**< Address Map Register 3, offset: 0x20C */
  uint32_t ADDRMAP4;                               /**< Address Map Register 4, offset: 0x210 */
  uint32_t ADDRMAP5;                               /**< Address Map Register 5, offset: 0x214 */
  uint32_t ADDRMAP6;                               /**< Address Map Register 6, offset: 0x218 */
  uint32_t ADDRMAP7;                               /**< Address Map Register 7, offset: 0x21C */
  uint32_t ADDRMAP8;                               /**< Address Map Register 8, offset: 0x220 */
  uint32_t ADDRMAP9;                               /**< Address Map Register 9, offset: 0x224 */
  uint32_t ADDRMAP10;                              /**< Address Map Register 10, offset: 0x228 */
  uint32_t ADDRMAP11;                              /**< Address Map Register 11, offset: 0x22C */
  uint8_t RESERVED_10[16];
  uint32_t ODTCFG;                                 /**< ODT Configuration Register, offset: 0x240 */
  uint32_t ODTMAP;                                 /**< ODT/Rank Map Register, offset: 0x244 */
  uint8_t RESERVED_11[8];
  uint32_t SCHED;                                  /**< Scheduler Control Register, offset: 0x250 */
  uint32_t SCHED1;                                 /**< Scheduler Control Register 1, offset: 0x254 */
  uint8_t RESERVED_12[4];
  uint32_t PERFHPR1;                               /**< High Priority Read CAM Register 1, offset: 0x25C */
  uint8_t RESERVED_13[4];
  uint32_t PERFLPR1;                               /**< Low Priority Read CAM Register 1, offset: 0x264 */
  uint8_t RESERVED_14[4];
  uint32_t PERFWR1;                                /**< Write CAM Register 1, offset: 0x26C */
  uint8_t RESERVED_15[144];
  uint32_t DBG0;                                   /**< Debug Register 0, offset: 0x300 */
  uint32_t DBG1;                                   /**< Debug Register 1, offset: 0x304 */
  uint32_t DBGCAM;                                 /**< CAM Debug Register, offset: 0x308 */
  uint32_t DBGCMD;                                 /**< Command Debug Register, offset: 0x30C */
  uint32_t DBGSTAT;                                /**< Status Debug Register, offset: 0x310 */
  uint8_t RESERVED_16[12];
  uint32_t SWCTL;                                  /**< Software Register Programming Control Enable, offset: 0x320 */
  uint32_t SWSTAT;                                 /**< Software Register Programming Control Status, offset: 0x324 */
  uint8_t RESERVED_17[68];
  uint32_t POISONCFG;                              /**< AXI Poison Configuration Register., offset: 0x36C */
  uint32_t POISONSTAT;                             /**< AXI Poison Status Register, offset: 0x370 */
  uint8_t RESERVED_18[136];
  uint32_t PSTAT;                                  /**< Port Status Register, offset: 0x3FC */
  uint32_t PCCFG;                                  /**< Port Common Configuration Register, offset: 0x400 */
  uint32_t PCFGR_0;                                /**< Port n Configuration Read Register, offset: 0x404 */
  uint32_t PCFGW_0;                                /**< Port n Configuration Write Register, offset: 0x408 */
  uint8_t RESERVED_19[132];
  uint32_t PCTRL_0;                                /**< Port n Control Register, offset: 0x490 */
  uint32_t PCFGQOS0_0;                             /**< Port n Read QoS Configuration Register 0, offset: 0x494 */
  uint32_t PCFGQOS1_0;                             /**< Port n Read QoS Configuration Register 1, offset: 0x498 */
  uint32_t PCFGWQOS0_0;                            /**< Port n Write QoS Configuration Register 0, offset: 0x49C */
  uint32_t PCFGWQOS1_0;                            /**< Port n Write QoS Configuration Register 1, offset: 0x4A0 */
  uint8_t RESERVED_20[7036];
  uint32_t DERATEEN_SHADOW;                        /**< [SHADOW] Temperature Derate Enable Register, offset: 0x2020 */
  uint32_t DERATEINT_SHADOW;                       /**< [SHADOW] Temperature Derate Interval Register, offset: 0x2024 */
  uint8_t RESERVED_21[40];
  uint32_t RFSHCTL0_SHADOW;                        /**< [SHADOW] Refresh Control Register 0, offset: 0x2050 */
  uint8_t RESERVED_22[16];
  uint32_t RFSHTMG_SHADOW;                         /**< [SHADOW] Refresh Timing Register, offset: 0x2064 */
  uint8_t RESERVED_23[116];
  uint32_t INIT3_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 3, offset: 0x20DC */
  uint32_t INIT4_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 4, offset: 0x20E0 */
  uint8_t RESERVED_24[4];
  uint32_t INIT6_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 6, offset: 0x20E8 */
  uint32_t INIT7_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 7, offset: 0x20EC */
  uint8_t RESERVED_25[16];
  uint32_t DRAMTMG0_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 0, offset: 0x2100 */
  uint32_t DRAMTMG1_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 1, offset: 0x2104 */
  uint32_t DRAMTMG2_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 2, offset: 0x2108 */
  uint32_t DRAMTMG3_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 3, offset: 0x210C */
  uint32_t DRAMTMG4_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 4, offset: 0x2110 */
  uint32_t DRAMTMG5_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 5, offset: 0x2114 */
  uint32_t DRAMTMG6_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 6, offset: 0x2118 */
  uint32_t DRAMTMG7_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 7, offset: 0x211C */
  uint32_t DRAMTMG8_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 8, offset: 0x2120 */
  uint32_t DRAMTMG9_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 9, offset: 0x2124 */
  uint32_t DRAMTMG10_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 10, offset: 0x2128 */
  uint32_t DRAMTMG11_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 11, offset: 0x212C */
  uint32_t DRAMTMG12_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 12, offset: 0x2130 */
  uint32_t DRAMTMG13_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 13, offset: 0x2134 */
  uint32_t DRAMTMG14_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 14, offset: 0x2138 */
  uint32_t DRAMTMG15_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 15, offset: 0x213C */
  uint8_t RESERVED_26[64];
  uint32_t ZQCTL0_SHADOW;                          /**< [SHADOW] ZQ Control Register 0, offset: 0x2180 */
  uint8_t RESERVED_27[12];
  uint32_t DFITMG0_SHADOW;                         /**< [SHADOW] DFI Timing Register 0, offset: 0x2190 */
  uint32_t DFITMG1_SHADOW;                         /**< [SHADOW] DFI Timing Register 1, offset: 0x2194 */
  uint8_t RESERVED_28[28];
  uint32_t DFITMG2_SHADOW;                         /**< [SHADOW] DFI Timing Register 2, offset: 0x21B4 */
  uint32_t DFITMG3_SHADOW;                         /**< [SHADOW] DFI Timing Register 3, offset: 0x21B8 */
  uint8_t RESERVED_29[132];
  uint32_t ODTCFG_SHADOW;                          /**< [SHADOW] ODT Configuration Register, offset: 0x2240 */
} volatile *DDRC_REGS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DDRC_REGS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_REGS_Register_Accessor_Macros DDRC_REGS - Register accessor macros
 * @{
 */


/* DDRC_REGS - Register accessors */
#define DDRC_REGS_MSTR_REG(base)                 ((base)->MSTR)
#define DDRC_REGS_STAT_REG(base)                 ((base)->STAT)
#define DDRC_REGS_MRCTRL0_REG(base)              ((base)->MRCTRL0)
#define DDRC_REGS_MRCTRL1_REG(base)              ((base)->MRCTRL1)
#define DDRC_REGS_MRSTAT_REG(base)               ((base)->MRSTAT)
#define DDRC_REGS_MRCTRL2_REG(base)              ((base)->MRCTRL2)
#define DDRC_REGS_DERATEEN_REG(base)             ((base)->DERATEEN)
#define DDRC_REGS_DERATEINT_REG(base)            ((base)->DERATEINT)
#define DDRC_REGS_PWRCTL_REG(base)               ((base)->PWRCTL)
#define DDRC_REGS_PWRTMG_REG(base)               ((base)->PWRTMG)
#define DDRC_REGS_HWLPCTL_REG(base)              ((base)->HWLPCTL)
#define DDRC_REGS_RFSHCTL0_REG(base)             ((base)->RFSHCTL0)
#define DDRC_REGS_RFSHCTL1_REG(base)             ((base)->RFSHCTL1)
#define DDRC_REGS_RFSHCTL3_REG(base)             ((base)->RFSHCTL3)
#define DDRC_REGS_RFSHTMG_REG(base)              ((base)->RFSHTMG)
#define DDRC_REGS_CRCPARCTL0_REG(base)           ((base)->CRCPARCTL0)
#define DDRC_REGS_CRCPARCTL1_REG(base)           ((base)->CRCPARCTL1)
#define DDRC_REGS_CRCPARSTAT_REG(base)           ((base)->CRCPARSTAT)
#define DDRC_REGS_INIT0_REG(base)                ((base)->INIT0)
#define DDRC_REGS_INIT1_REG(base)                ((base)->INIT1)
#define DDRC_REGS_INIT2_REG(base)                ((base)->INIT2)
#define DDRC_REGS_INIT3_REG(base)                ((base)->INIT3)
#define DDRC_REGS_INIT4_REG(base)                ((base)->INIT4)
#define DDRC_REGS_INIT5_REG(base)                ((base)->INIT5)
#define DDRC_REGS_INIT6_REG(base)                ((base)->INIT6)
#define DDRC_REGS_INIT7_REG(base)                ((base)->INIT7)
#define DDRC_REGS_DIMMCTL_REG(base)              ((base)->DIMMCTL)
#define DDRC_REGS_RANKCTL_REG(base)              ((base)->RANKCTL)
#define DDRC_REGS_DRAMTMG0_REG(base)             ((base)->DRAMTMG0)
#define DDRC_REGS_DRAMTMG1_REG(base)             ((base)->DRAMTMG1)
#define DDRC_REGS_DRAMTMG2_REG(base)             ((base)->DRAMTMG2)
#define DDRC_REGS_DRAMTMG3_REG(base)             ((base)->DRAMTMG3)
#define DDRC_REGS_DRAMTMG4_REG(base)             ((base)->DRAMTMG4)
#define DDRC_REGS_DRAMTMG5_REG(base)             ((base)->DRAMTMG5)
#define DDRC_REGS_DRAMTMG6_REG(base)             ((base)->DRAMTMG6)
#define DDRC_REGS_DRAMTMG7_REG(base)             ((base)->DRAMTMG7)
#define DDRC_REGS_DRAMTMG8_REG(base)             ((base)->DRAMTMG8)
#define DDRC_REGS_DRAMTMG9_REG(base)             ((base)->DRAMTMG9)
#define DDRC_REGS_DRAMTMG10_REG(base)            ((base)->DRAMTMG10)
#define DDRC_REGS_DRAMTMG11_REG(base)            ((base)->DRAMTMG11)
#define DDRC_REGS_DRAMTMG12_REG(base)            ((base)->DRAMTMG12)
#define DDRC_REGS_DRAMTMG13_REG(base)            ((base)->DRAMTMG13)
#define DDRC_REGS_DRAMTMG14_REG(base)            ((base)->DRAMTMG14)
#define DDRC_REGS_DRAMTMG15_REG(base)            ((base)->DRAMTMG15)
#define DDRC_REGS_ZQCTL0_REG(base)               ((base)->ZQCTL0)
#define DDRC_REGS_ZQCTL1_REG(base)               ((base)->ZQCTL1)
#define DDRC_REGS_ZQCTL2_REG(base)               ((base)->ZQCTL2)
#define DDRC_REGS_ZQSTAT_REG(base)               ((base)->ZQSTAT)
#define DDRC_REGS_DFITMG0_REG(base)              ((base)->DFITMG0)
#define DDRC_REGS_DFITMG1_REG(base)              ((base)->DFITMG1)
#define DDRC_REGS_DFILPCFG0_REG(base)            ((base)->DFILPCFG0)
#define DDRC_REGS_DFILPCFG1_REG(base)            ((base)->DFILPCFG1)
#define DDRC_REGS_DFIUPD0_REG(base)              ((base)->DFIUPD0)
#define DDRC_REGS_DFIUPD1_REG(base)              ((base)->DFIUPD1)
#define DDRC_REGS_DFIUPD2_REG(base)              ((base)->DFIUPD2)
#define DDRC_REGS_DFIMISC_REG(base)              ((base)->DFIMISC)
#define DDRC_REGS_DFITMG2_REG(base)              ((base)->DFITMG2)
#define DDRC_REGS_DFITMG3_REG(base)              ((base)->DFITMG3)
#define DDRC_REGS_DFISTAT_REG(base)              ((base)->DFISTAT)
#define DDRC_REGS_DBICTL_REG(base)               ((base)->DBICTL)
#define DDRC_REGS_ADDRMAP0_REG(base)             ((base)->ADDRMAP0)
#define DDRC_REGS_ADDRMAP1_REG(base)             ((base)->ADDRMAP1)
#define DDRC_REGS_ADDRMAP2_REG(base)             ((base)->ADDRMAP2)
#define DDRC_REGS_ADDRMAP3_REG(base)             ((base)->ADDRMAP3)
#define DDRC_REGS_ADDRMAP4_REG(base)             ((base)->ADDRMAP4)
#define DDRC_REGS_ADDRMAP5_REG(base)             ((base)->ADDRMAP5)
#define DDRC_REGS_ADDRMAP6_REG(base)             ((base)->ADDRMAP6)
#define DDRC_REGS_ADDRMAP7_REG(base)             ((base)->ADDRMAP7)
#define DDRC_REGS_ADDRMAP8_REG(base)             ((base)->ADDRMAP8)
#define DDRC_REGS_ADDRMAP9_REG(base)             ((base)->ADDRMAP9)
#define DDRC_REGS_ADDRMAP10_REG(base)            ((base)->ADDRMAP10)
#define DDRC_REGS_ADDRMAP11_REG(base)            ((base)->ADDRMAP11)
#define DDRC_REGS_ODTCFG_REG(base)               ((base)->ODTCFG)
#define DDRC_REGS_ODTMAP_REG(base)               ((base)->ODTMAP)
#define DDRC_REGS_SCHED_REG(base)                ((base)->SCHED)
#define DDRC_REGS_SCHED1_REG(base)               ((base)->SCHED1)
#define DDRC_REGS_PERFHPR1_REG(base)             ((base)->PERFHPR1)
#define DDRC_REGS_PERFLPR1_REG(base)             ((base)->PERFLPR1)
#define DDRC_REGS_PERFWR1_REG(base)              ((base)->PERFWR1)
#define DDRC_REGS_DBG0_REG(base)                 ((base)->DBG0)
#define DDRC_REGS_DBG1_REG(base)                 ((base)->DBG1)
#define DDRC_REGS_DBGCAM_REG(base)               ((base)->DBGCAM)
#define DDRC_REGS_DBGCMD_REG(base)               ((base)->DBGCMD)
#define DDRC_REGS_DBGSTAT_REG(base)              ((base)->DBGSTAT)
#define DDRC_REGS_SWCTL_REG(base)                ((base)->SWCTL)
#define DDRC_REGS_SWSTAT_REG(base)               ((base)->SWSTAT)
#define DDRC_REGS_POISONCFG_REG(base)            ((base)->POISONCFG)
#define DDRC_REGS_POISONSTAT_REG(base)           ((base)->POISONSTAT)
#define DDRC_REGS_PSTAT_REG(base)                ((base)->PSTAT)
#define DDRC_REGS_PCCFG_REG(base)                ((base)->PCCFG)
#define DDRC_REGS_PCFGR_0_REG(base)              ((base)->PCFGR_0)
#define DDRC_REGS_PCFGW_0_REG(base)              ((base)->PCFGW_0)
#define DDRC_REGS_PCTRL_0_REG(base)              ((base)->PCTRL_0)
#define DDRC_REGS_PCFGQOS0_0_REG(base)           ((base)->PCFGQOS0_0)
#define DDRC_REGS_PCFGQOS1_0_REG(base)           ((base)->PCFGQOS1_0)
#define DDRC_REGS_PCFGWQOS0_0_REG(base)          ((base)->PCFGWQOS0_0)
#define DDRC_REGS_PCFGWQOS1_0_REG(base)          ((base)->PCFGWQOS1_0)
#define DDRC_REGS_DERATEEN_SHADOW_REG(base)      ((base)->DERATEEN_SHADOW)
#define DDRC_REGS_DERATEINT_SHADOW_REG(base)     ((base)->DERATEINT_SHADOW)
#define DDRC_REGS_RFSHCTL0_SHADOW_REG(base)      ((base)->RFSHCTL0_SHADOW)
#define DDRC_REGS_RFSHTMG_SHADOW_REG(base)       ((base)->RFSHTMG_SHADOW)
#define DDRC_REGS_INIT3_SHADOW_REG(base)         ((base)->INIT3_SHADOW)
#define DDRC_REGS_INIT4_SHADOW_REG(base)         ((base)->INIT4_SHADOW)
#define DDRC_REGS_INIT6_SHADOW_REG(base)         ((base)->INIT6_SHADOW)
#define DDRC_REGS_INIT7_SHADOW_REG(base)         ((base)->INIT7_SHADOW)
#define DDRC_REGS_DRAMTMG0_SHADOW_REG(base)      ((base)->DRAMTMG0_SHADOW)
#define DDRC_REGS_DRAMTMG1_SHADOW_REG(base)      ((base)->DRAMTMG1_SHADOW)
#define DDRC_REGS_DRAMTMG2_SHADOW_REG(base)      ((base)->DRAMTMG2_SHADOW)
#define DDRC_REGS_DRAMTMG3_SHADOW_REG(base)      ((base)->DRAMTMG3_SHADOW)
#define DDRC_REGS_DRAMTMG4_SHADOW_REG(base)      ((base)->DRAMTMG4_SHADOW)
#define DDRC_REGS_DRAMTMG5_SHADOW_REG(base)      ((base)->DRAMTMG5_SHADOW)
#define DDRC_REGS_DRAMTMG6_SHADOW_REG(base)      ((base)->DRAMTMG6_SHADOW)
#define DDRC_REGS_DRAMTMG7_SHADOW_REG(base)      ((base)->DRAMTMG7_SHADOW)
#define DDRC_REGS_DRAMTMG8_SHADOW_REG(base)      ((base)->DRAMTMG8_SHADOW)
#define DDRC_REGS_DRAMTMG9_SHADOW_REG(base)      ((base)->DRAMTMG9_SHADOW)
#define DDRC_REGS_DRAMTMG10_SHADOW_REG(base)     ((base)->DRAMTMG10_SHADOW)
#define DDRC_REGS_DRAMTMG11_SHADOW_REG(base)     ((base)->DRAMTMG11_SHADOW)
#define DDRC_REGS_DRAMTMG12_SHADOW_REG(base)     ((base)->DRAMTMG12_SHADOW)
#define DDRC_REGS_DRAMTMG13_SHADOW_REG(base)     ((base)->DRAMTMG13_SHADOW)
#define DDRC_REGS_DRAMTMG14_SHADOW_REG(base)     ((base)->DRAMTMG14_SHADOW)
#define DDRC_REGS_DRAMTMG15_SHADOW_REG(base)     ((base)->DRAMTMG15_SHADOW)
#define DDRC_REGS_ZQCTL0_SHADOW_REG(base)        ((base)->ZQCTL0_SHADOW)
#define DDRC_REGS_DFITMG0_SHADOW_REG(base)       ((base)->DFITMG0_SHADOW)
#define DDRC_REGS_DFITMG1_SHADOW_REG(base)       ((base)->DFITMG1_SHADOW)
#define DDRC_REGS_DFITMG2_SHADOW_REG(base)       ((base)->DFITMG2_SHADOW)
#define DDRC_REGS_DFITMG3_SHADOW_REG(base)       ((base)->DFITMG3_SHADOW)
#define DDRC_REGS_ODTCFG_SHADOW_REG(base)        ((base)->ODTCFG_SHADOW)

/*!
 * @}
 */ /* end of group DDRC_REGS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DDRC_REGS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_REGS_Register_Masks DDRC_REGS Register Masks
 * @{
 */

/*! @name MSTR - Master Register0 */
/*! @{ */
#define DDRC_REGS_MSTR_ddr3_MASK                 (0x1U)
#define DDRC_REGS_MSTR_ddr3_SHIFT                (0U)
#define DDRC_REGS_MSTR_lpddr2_MASK               (0x4U)
#define DDRC_REGS_MSTR_lpddr2_SHIFT              (2U)
#define DDRC_REGS_MSTR_lpddr3_MASK               (0x8U)
#define DDRC_REGS_MSTR_lpddr3_SHIFT              (3U)
#define DDRC_REGS_MSTR_ddr4_MASK                 (0x10U)
#define DDRC_REGS_MSTR_ddr4_SHIFT                (4U)
#define DDRC_REGS_MSTR_lpddr4_MASK               (0x20U)
#define DDRC_REGS_MSTR_lpddr4_SHIFT              (5U)
#define DDRC_REGS_MSTR_burstchop_MASK            (0x200U)
#define DDRC_REGS_MSTR_burstchop_SHIFT           (9U)
#define DDRC_REGS_MSTR_en_2t_timing_mode_MASK    (0x400U)
#define DDRC_REGS_MSTR_en_2t_timing_mode_SHIFT   (10U)
#define DDRC_REGS_MSTR_geardown_mode_MASK        (0x800U)
#define DDRC_REGS_MSTR_geardown_mode_SHIFT       (11U)
#define DDRC_REGS_MSTR_data_bus_width_MASK       (0x3000U)
#define DDRC_REGS_MSTR_data_bus_width_SHIFT      (12U)
#define DDRC_REGS_MSTR_data_bus_width(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MSTR_data_bus_width_SHIFT)) & DDRC_REGS_MSTR_data_bus_width_MASK)
#define DDRC_REGS_MSTR_dll_off_mode_MASK         (0x8000U)
#define DDRC_REGS_MSTR_dll_off_mode_SHIFT        (15U)
#define DDRC_REGS_MSTR_burst_rdwr_MASK           (0xF0000U)
#define DDRC_REGS_MSTR_burst_rdwr_SHIFT          (16U)
/*! burst_rdwr - SDRAM burst length used
 *  0b0001..Burst length of 2 (only supported for mDDR)
 *  0b0010..Burst length of 4
 *  0b0100..Burst length of 8
 *  0b1000..Burst length of 16 (only supported for mDDR, LPDDR2, and LPDDR4)
 */
#define DDRC_REGS_MSTR_burst_rdwr(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MSTR_burst_rdwr_SHIFT)) & DDRC_REGS_MSTR_burst_rdwr_MASK)
#define DDRC_REGS_MSTR_frequency_ratio_MASK      (0x400000U)
#define DDRC_REGS_MSTR_frequency_ratio_SHIFT     (22U)
#define DDRC_REGS_MSTR_active_ranks_MASK         (0x3000000U)
#define DDRC_REGS_MSTR_active_ranks_SHIFT        (24U)
#define DDRC_REGS_MSTR_active_ranks(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MSTR_active_ranks_SHIFT)) & DDRC_REGS_MSTR_active_ranks_MASK)
#define DDRC_REGS_MSTR_frequency_mode_MASK       (0x20000000U)
#define DDRC_REGS_MSTR_frequency_mode_SHIFT      (29U)
#define DDRC_REGS_MSTR_device_config_MASK        (0xC0000000U)
#define DDRC_REGS_MSTR_device_config_SHIFT       (30U)
/*! device_config - Indicates the configuration of the device used in the system.
 *  0b00..x4 device
 *  0b01..x8 device
 *  0b10..x16 device
 *  0b11..x32 device
 */
#define DDRC_REGS_MSTR_device_config(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MSTR_device_config_SHIFT)) & DDRC_REGS_MSTR_device_config_MASK)
/*! @} */

/*! @name STAT - Operating Mode Status Register */
/*! @{ */
#define DDRC_REGS_STAT_operating_mode_MASK       (0x7U)
#define DDRC_REGS_STAT_operating_mode_SHIFT      (0U)
#define DDRC_REGS_STAT_operating_mode(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_STAT_operating_mode_SHIFT)) & DDRC_REGS_STAT_operating_mode_MASK)
#define DDRC_REGS_STAT_selfref_type_MASK         (0x30U)
#define DDRC_REGS_STAT_selfref_type_SHIFT        (4U)
/*! selfref_type - Flags if Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4) is entered and if
 *    it was under Automatic Self Refresh control only or not.
 *  0b00..SDRAM is not in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4). If retry is enabled by
 *        CRCPARCTRL1.crc_parity_retry_enable, this also indicates SRE command is still in parity error window or retry is
 *        in-progress.
 *  0b11..SDRAM is in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4), which was caused by Automatic Self
 *        Refresh only. If retry is enabled, this guarantees SRE command is executed correctly without parity error.
 *  0b10..SDRAM is in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4), which was not caused solely under
 *        Automatic Self Refresh control. It could have been caused by Hardware Low Power Interface and/or Software
 *        (reg_ddrc_selfref_sw). If retry is enabled, this guarantees SRE command is executed correctly without parity
 */
#define DDRC_REGS_STAT_selfref_type(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_STAT_selfref_type_SHIFT)) & DDRC_REGS_STAT_selfref_type_MASK)
#define DDRC_REGS_STAT_selfref_state_MASK        (0x300U)
#define DDRC_REGS_STAT_selfref_state_SHIFT       (8U)
/*! selfref_state - Self refresh state. This indicates self refresh or self refresh power down state
 *    for LPDDR4. This register is used for frequency change and MRR/MRW access during self refresh.
 *  0b00..SDRAM is not in Self Refresh.
 *  0b01..Self refresh 1
 *  0b10..Self refresh power down
 *  0b11..Self refresh
 */
#define DDRC_REGS_STAT_selfref_state(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_STAT_selfref_state_SHIFT)) & DDRC_REGS_STAT_selfref_state_MASK)
/*! @} */

/*! @name MRCTRL0 - Mode Register Read/Write Control Register 0. */
/*! @{ */
#define DDRC_REGS_MRCTRL0_mr_type_MASK           (0x1U)
#define DDRC_REGS_MRCTRL0_mr_type_SHIFT          (0U)
#define DDRC_REGS_MRCTRL0_mpr_en_MASK            (0x2U)
#define DDRC_REGS_MRCTRL0_mpr_en_SHIFT           (1U)
#define DDRC_REGS_MRCTRL0_pda_en_MASK            (0x4U)
#define DDRC_REGS_MRCTRL0_pda_en_SHIFT           (2U)
#define DDRC_REGS_MRCTRL0_sw_init_int_MASK       (0x8U)
#define DDRC_REGS_MRCTRL0_sw_init_int_SHIFT      (3U)
#define DDRC_REGS_MRCTRL0_mr_rank_MASK           (0x30U)
#define DDRC_REGS_MRCTRL0_mr_rank_SHIFT          (4U)
#define DDRC_REGS_MRCTRL0_mr_rank(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MRCTRL0_mr_rank_SHIFT)) & DDRC_REGS_MRCTRL0_mr_rank_MASK)
#define DDRC_REGS_MRCTRL0_mr_addr_MASK           (0xF000U)
#define DDRC_REGS_MRCTRL0_mr_addr_SHIFT          (12U)
/*! mr_addr - Address of the mode register that is to be written to.
 *  0b0000..MR0
 *  0b0001..MR1
 *  0b0010..MR2
 *  0b0011..MR3
 *  0b0100..MR4
 *  0b0101..MR5
 *  0b0110..MR6
 *  0b0111..MR7
 */
#define DDRC_REGS_MRCTRL0_mr_addr(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MRCTRL0_mr_addr_SHIFT)) & DDRC_REGS_MRCTRL0_mr_addr_MASK)
#define DDRC_REGS_MRCTRL0_pba_mode_MASK          (0x40000000U)
#define DDRC_REGS_MRCTRL0_pba_mode_SHIFT         (30U)
#define DDRC_REGS_MRCTRL0_mr_wr_MASK             (0x80000000U)
#define DDRC_REGS_MRCTRL0_mr_wr_SHIFT            (31U)
/*! @} */

/*! @name MRCTRL1 - Mode Register Read/Write Control Register 1 */
/*! @{ */
#define DDRC_REGS_MRCTRL1_mr_data_MASK           (0x3FFFFU)
#define DDRC_REGS_MRCTRL1_mr_data_SHIFT          (0U)
#define DDRC_REGS_MRCTRL1_mr_data(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MRCTRL1_mr_data_SHIFT)) & DDRC_REGS_MRCTRL1_mr_data_MASK)
/*! @} */

/*! @name MRSTAT - Mode Register Read/Write Status Register */
/*! @{ */
#define DDRC_REGS_MRSTAT_mr_wr_busy_MASK         (0x1U)
#define DDRC_REGS_MRSTAT_mr_wr_busy_SHIFT        (0U)
#define DDRC_REGS_MRSTAT_pda_done_MASK           (0x100U)
#define DDRC_REGS_MRSTAT_pda_done_SHIFT          (8U)
/*! @} */

/*! @name MRCTRL2 - Mode Register Read/Write Control Register 2 */
/*! @{ */
#define DDRC_REGS_MRCTRL2_mr_device_sel_MASK     (0xFFFFFFFFU)
#define DDRC_REGS_MRCTRL2_mr_device_sel_SHIFT    (0U)
#define DDRC_REGS_MRCTRL2_mr_device_sel(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_MRCTRL2_mr_device_sel_SHIFT)) & DDRC_REGS_MRCTRL2_mr_device_sel_MASK)
/*! @} */

/*! @name DERATEEN - Temperature Derate Enable Register */
/*! @{ */
#define DDRC_REGS_DERATEEN_derate_enable_MASK    (0x1U)
#define DDRC_REGS_DERATEEN_derate_enable_SHIFT   (0U)
#define DDRC_REGS_DERATEEN_derate_value_MASK     (0x2U)
#define DDRC_REGS_DERATEEN_derate_value_SHIFT    (1U)
#define DDRC_REGS_DERATEEN_derate_byte_MASK      (0xF0U)
#define DDRC_REGS_DERATEEN_derate_byte_SHIFT     (4U)
#define DDRC_REGS_DERATEEN_derate_byte(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEEN_derate_byte_SHIFT)) & DDRC_REGS_DERATEEN_derate_byte_MASK)
#define DDRC_REGS_DERATEEN_rc_derate_value_MASK  (0x300U)
#define DDRC_REGS_DERATEEN_rc_derate_value_SHIFT (8U)
/*! rc_derate_value - Derate value of tRC for LPDDR4. Present only in designs configured to support
 *    LPDDR4. The required number of cycles for derating can be determined by dividing 3.75ns by the
 *    core_ddrc_core_clk period, and rounding up the next integer.
 *  0b00..Derating uses +1
 *  0b01..Derating uses +2
 *  0b10..Derating uses +3
 *  0b11..Derating uses +4
 */
#define DDRC_REGS_DERATEEN_rc_derate_value(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEEN_rc_derate_value_SHIFT)) & DDRC_REGS_DERATEEN_rc_derate_value_MASK)
/*! @} */

/*! @name DERATEINT - Temperature Derate Interval Register */
/*! @{ */
#define DDRC_REGS_DERATEINT_mr4_read_interval_MASK (0xFFFFFFFFU)
#define DDRC_REGS_DERATEINT_mr4_read_interval_SHIFT (0U)
#define DDRC_REGS_DERATEINT_mr4_read_interval(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEINT_mr4_read_interval_SHIFT)) & DDRC_REGS_DERATEINT_mr4_read_interval_MASK)
/*! @} */

/*! @name PWRCTL - Low Power Control Register */
/*! @{ */
#define DDRC_REGS_PWRCTL_selfref_en_MASK         (0x1U)
#define DDRC_REGS_PWRCTL_selfref_en_SHIFT        (0U)
#define DDRC_REGS_PWRCTL_powerdown_en_MASK       (0x2U)
#define DDRC_REGS_PWRCTL_powerdown_en_SHIFT      (1U)
#define DDRC_REGS_PWRCTL_deeppowerdown_en_MASK   (0x4U)
#define DDRC_REGS_PWRCTL_deeppowerdown_en_SHIFT  (2U)
#define DDRC_REGS_PWRCTL_en_dfi_dram_clk_disable_MASK (0x8U)
#define DDRC_REGS_PWRCTL_en_dfi_dram_clk_disable_SHIFT (3U)
#define DDRC_REGS_PWRCTL_mpsm_en_MASK            (0x10U)
#define DDRC_REGS_PWRCTL_mpsm_en_SHIFT           (4U)
#define DDRC_REGS_PWRCTL_selfref_sw_MASK         (0x20U)
#define DDRC_REGS_PWRCTL_selfref_sw_SHIFT        (5U)
#define DDRC_REGS_PWRCTL_stay_in_selfref_MASK    (0x40U)
#define DDRC_REGS_PWRCTL_stay_in_selfref_SHIFT   (6U)
/*! @} */

/*! @name PWRTMG - Low Power Timing Register */
/*! @{ */
#define DDRC_REGS_PWRTMG_powerdown_to_x32_MASK   (0x1FU)
#define DDRC_REGS_PWRTMG_powerdown_to_x32_SHIFT  (0U)
#define DDRC_REGS_PWRTMG_powerdown_to_x32(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PWRTMG_powerdown_to_x32_SHIFT)) & DDRC_REGS_PWRTMG_powerdown_to_x32_MASK)
#define DDRC_REGS_PWRTMG_t_dpd_x4096_MASK        (0xFF00U)
#define DDRC_REGS_PWRTMG_t_dpd_x4096_SHIFT       (8U)
#define DDRC_REGS_PWRTMG_t_dpd_x4096(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PWRTMG_t_dpd_x4096_SHIFT)) & DDRC_REGS_PWRTMG_t_dpd_x4096_MASK)
#define DDRC_REGS_PWRTMG_selfref_to_x32_MASK     (0xFF0000U)
#define DDRC_REGS_PWRTMG_selfref_to_x32_SHIFT    (16U)
#define DDRC_REGS_PWRTMG_selfref_to_x32(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PWRTMG_selfref_to_x32_SHIFT)) & DDRC_REGS_PWRTMG_selfref_to_x32_MASK)
/*! @} */

/*! @name HWLPCTL - Hardware Low Power Control Register */
/*! @{ */
#define DDRC_REGS_HWLPCTL_hw_lp_en_MASK          (0x1U)
#define DDRC_REGS_HWLPCTL_hw_lp_en_SHIFT         (0U)
#define DDRC_REGS_HWLPCTL_hw_lp_exit_idle_en_MASK (0x2U)
#define DDRC_REGS_HWLPCTL_hw_lp_exit_idle_en_SHIFT (1U)
#define DDRC_REGS_HWLPCTL_hw_lp_idle_x32_MASK    (0xFFF0000U)
#define DDRC_REGS_HWLPCTL_hw_lp_idle_x32_SHIFT   (16U)
#define DDRC_REGS_HWLPCTL_hw_lp_idle_x32(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_HWLPCTL_hw_lp_idle_x32_SHIFT)) & DDRC_REGS_HWLPCTL_hw_lp_idle_x32_MASK)
/*! @} */

/*! @name RFSHCTL0 - Refresh Control Register 0 */
/*! @{ */
#define DDRC_REGS_RFSHCTL0_per_bank_refresh_MASK (0x4U)
#define DDRC_REGS_RFSHCTL0_per_bank_refresh_SHIFT (2U)
#define DDRC_REGS_RFSHCTL0_refresh_burst_MASK    (0x1F0U)
#define DDRC_REGS_RFSHCTL0_refresh_burst_SHIFT   (4U)
#define DDRC_REGS_RFSHCTL0_refresh_burst(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_refresh_burst_SHIFT)) & DDRC_REGS_RFSHCTL0_refresh_burst_MASK)
#define DDRC_REGS_RFSHCTL0_refresh_to_x32_MASK   (0x1F000U)
#define DDRC_REGS_RFSHCTL0_refresh_to_x32_SHIFT  (12U)
#define DDRC_REGS_RFSHCTL0_refresh_to_x32(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_refresh_to_x32_SHIFT)) & DDRC_REGS_RFSHCTL0_refresh_to_x32_MASK)
#define DDRC_REGS_RFSHCTL0_refresh_margin_MASK   (0xF00000U)
#define DDRC_REGS_RFSHCTL0_refresh_margin_SHIFT  (20U)
#define DDRC_REGS_RFSHCTL0_refresh_margin(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_refresh_margin_SHIFT)) & DDRC_REGS_RFSHCTL0_refresh_margin_MASK)
/*! @} */

/*! @name RFSHCTL1 - Refresh Control Register 1 */
/*! @{ */
#define DDRC_REGS_RFSHCTL1_refresh_timer0_start_value_x32_MASK (0xFFFU)
#define DDRC_REGS_RFSHCTL1_refresh_timer0_start_value_x32_SHIFT (0U)
#define DDRC_REGS_RFSHCTL1_refresh_timer0_start_value_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL1_refresh_timer0_start_value_x32_SHIFT)) & DDRC_REGS_RFSHCTL1_refresh_timer0_start_value_x32_MASK)
#define DDRC_REGS_RFSHCTL1_refresh_timer1_start_value_x32_MASK (0xFFF0000U)
#define DDRC_REGS_RFSHCTL1_refresh_timer1_start_value_x32_SHIFT (16U)
#define DDRC_REGS_RFSHCTL1_refresh_timer1_start_value_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL1_refresh_timer1_start_value_x32_SHIFT)) & DDRC_REGS_RFSHCTL1_refresh_timer1_start_value_x32_MASK)
/*! @} */

/*! @name RFSHCTL3 - Refresh Control Register 3 */
/*! @{ */
#define DDRC_REGS_RFSHCTL3_dis_auto_refresh_MASK (0x1U)
#define DDRC_REGS_RFSHCTL3_dis_auto_refresh_SHIFT (0U)
#define DDRC_REGS_RFSHCTL3_refresh_update_level_MASK (0x2U)
#define DDRC_REGS_RFSHCTL3_refresh_update_level_SHIFT (1U)
#define DDRC_REGS_RFSHCTL3_refresh_mode_MASK     (0x70U)
#define DDRC_REGS_RFSHCTL3_refresh_mode_SHIFT    (4U)
#define DDRC_REGS_RFSHCTL3_refresh_mode(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL3_refresh_mode_SHIFT)) & DDRC_REGS_RFSHCTL3_refresh_mode_MASK)
/*! @} */

/*! @name RFSHTMG - Refresh Timing Register */
/*! @{ */
#define DDRC_REGS_RFSHTMG_t_rfc_min_MASK         (0x3FFU)
#define DDRC_REGS_RFSHTMG_t_rfc_min_SHIFT        (0U)
#define DDRC_REGS_RFSHTMG_t_rfc_min(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHTMG_t_rfc_min_SHIFT)) & DDRC_REGS_RFSHTMG_t_rfc_min_MASK)
#define DDRC_REGS_RFSHTMG_lpddr3_trefbw_en_MASK  (0x8000U)
#define DDRC_REGS_RFSHTMG_lpddr3_trefbw_en_SHIFT (15U)
#define DDRC_REGS_RFSHTMG_t_rfc_nom_x32_MASK     (0xFFF0000U)
#define DDRC_REGS_RFSHTMG_t_rfc_nom_x32_SHIFT    (16U)
#define DDRC_REGS_RFSHTMG_t_rfc_nom_x32(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHTMG_t_rfc_nom_x32_SHIFT)) & DDRC_REGS_RFSHTMG_t_rfc_nom_x32_MASK)
/*! @} */

/*! @name CRCPARCTL0 - CRC Parity Control Register0 */
/*! @{ */
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_int_en_MASK (0x1U)
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_int_en_SHIFT (0U)
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_int_clr_MASK (0x2U)
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_int_clr_SHIFT (1U)
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_cnt_clr_MASK (0x4U)
#define DDRC_REGS_CRCPARCTL0_dfi_alert_err_cnt_clr_SHIFT (2U)
/*! @} */

/*! @name CRCPARCTL1 - CRC Parity Control Register1 */
/*! @{ */
#define DDRC_REGS_CRCPARCTL1_parity_enable_MASK  (0x1U)
#define DDRC_REGS_CRCPARCTL1_parity_enable_SHIFT (0U)
#define DDRC_REGS_CRCPARCTL1_crc_enable_MASK     (0x10U)
#define DDRC_REGS_CRCPARCTL1_crc_enable_SHIFT    (4U)
#define DDRC_REGS_CRCPARCTL1_crc_inc_dm_MASK     (0x80U)
#define DDRC_REGS_CRCPARCTL1_crc_inc_dm_SHIFT    (7U)
#define DDRC_REGS_CRCPARCTL1_caparity_disable_before_sr_MASK (0x1000U)
#define DDRC_REGS_CRCPARCTL1_caparity_disable_before_sr_SHIFT (12U)
/*! @} */

/*! @name CRCPARSTAT - CRC Parity Status Register */
/*! @{ */
#define DDRC_REGS_CRCPARSTAT_dfi_alert_err_cnt_MASK (0xFFFFU)
#define DDRC_REGS_CRCPARSTAT_dfi_alert_err_cnt_SHIFT (0U)
#define DDRC_REGS_CRCPARSTAT_dfi_alert_err_cnt(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_CRCPARSTAT_dfi_alert_err_cnt_SHIFT)) & DDRC_REGS_CRCPARSTAT_dfi_alert_err_cnt_MASK)
#define DDRC_REGS_CRCPARSTAT_dfi_alert_err_int_MASK (0x10000U)
#define DDRC_REGS_CRCPARSTAT_dfi_alert_err_int_SHIFT (16U)
/*! @} */

/*! @name INIT0 - SDRAM Initialization Register 0 */
/*! @{ */
#define DDRC_REGS_INIT0_pre_cke_x1024_MASK       (0xFFFU)
#define DDRC_REGS_INIT0_pre_cke_x1024_SHIFT      (0U)
#define DDRC_REGS_INIT0_pre_cke_x1024(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT0_pre_cke_x1024_SHIFT)) & DDRC_REGS_INIT0_pre_cke_x1024_MASK)
#define DDRC_REGS_INIT0_post_cke_x1024_MASK      (0x3FF0000U)
#define DDRC_REGS_INIT0_post_cke_x1024_SHIFT     (16U)
#define DDRC_REGS_INIT0_post_cke_x1024(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT0_post_cke_x1024_SHIFT)) & DDRC_REGS_INIT0_post_cke_x1024_MASK)
#define DDRC_REGS_INIT0_skip_dram_init_MASK      (0xC0000000U)
#define DDRC_REGS_INIT0_skip_dram_init_SHIFT     (30U)
/*! skip_dram_init - If lower bit is enabled the SDRAM initialization routine is skipped. The upper
 *    bit decides what state the controller starts up in when reset is removed - 00 - SDRAM
 *    Intialization routine is run after power-up - 01 - SDRAM Initialization routine is skipped after
 *    power-up. Controller starts up in Normal Mode - 11 - SDRAM Initialization routine is skipped after
 *    power-up. Controller starts up in Self-refresh Mode - 10 - SDRAM Initialization routine is run
 *    after power-up.
 *  0b00..SDRAM Initialization routine is run after power-up
 *  0b01..SDRAM Initialization routine is skipped after power-up
 *  0b10..SDRAM Initialization routine is run after power-up
 *  0b11..SDRAM Initialization routine is skipped after power-up
 */
#define DDRC_REGS_INIT0_skip_dram_init(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT0_skip_dram_init_SHIFT)) & DDRC_REGS_INIT0_skip_dram_init_MASK)
/*! @} */

/*! @name INIT1 - SDRAM Initialization Register 1 */
/*! @{ */
#define DDRC_REGS_INIT1_pre_ocd_x32_MASK         (0xFU)
#define DDRC_REGS_INIT1_pre_ocd_x32_SHIFT        (0U)
#define DDRC_REGS_INIT1_pre_ocd_x32(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT1_pre_ocd_x32_SHIFT)) & DDRC_REGS_INIT1_pre_ocd_x32_MASK)
#define DDRC_REGS_INIT1_dram_rstn_x1024_MASK     (0x1FF0000U)
#define DDRC_REGS_INIT1_dram_rstn_x1024_SHIFT    (16U)
#define DDRC_REGS_INIT1_dram_rstn_x1024(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT1_dram_rstn_x1024_SHIFT)) & DDRC_REGS_INIT1_dram_rstn_x1024_MASK)
/*! @} */

/*! @name INIT2 - SDRAM Initialization Register 2 */
/*! @{ */
#define DDRC_REGS_INIT2_min_stable_clock_x1_MASK (0xFU)
#define DDRC_REGS_INIT2_min_stable_clock_x1_SHIFT (0U)
#define DDRC_REGS_INIT2_min_stable_clock_x1(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT2_min_stable_clock_x1_SHIFT)) & DDRC_REGS_INIT2_min_stable_clock_x1_MASK)
#define DDRC_REGS_INIT2_idle_after_reset_x32_MASK (0xFF00U)
#define DDRC_REGS_INIT2_idle_after_reset_x32_SHIFT (8U)
#define DDRC_REGS_INIT2_idle_after_reset_x32(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT2_idle_after_reset_x32_SHIFT)) & DDRC_REGS_INIT2_idle_after_reset_x32_MASK)
/*! @} */

/*! @name INIT3 - SDRAM Initialization Register 3 */
/*! @{ */
#define DDRC_REGS_INIT3_emr_MASK                 (0xFFFFU)
#define DDRC_REGS_INIT3_emr_SHIFT                (0U)
#define DDRC_REGS_INIT3_emr(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT3_emr_SHIFT)) & DDRC_REGS_INIT3_emr_MASK)
#define DDRC_REGS_INIT3_mr_MASK                  (0xFFFF0000U)
#define DDRC_REGS_INIT3_mr_SHIFT                 (16U)
#define DDRC_REGS_INIT3_mr(x)                    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT3_mr_SHIFT)) & DDRC_REGS_INIT3_mr_MASK)
/*! @} */

/*! @name INIT4 - SDRAM Initialization Register 4 */
/*! @{ */
#define DDRC_REGS_INIT4_emr3_MASK                (0xFFFFU)
#define DDRC_REGS_INIT4_emr3_SHIFT               (0U)
#define DDRC_REGS_INIT4_emr3(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT4_emr3_SHIFT)) & DDRC_REGS_INIT4_emr3_MASK)
#define DDRC_REGS_INIT4_emr2_MASK                (0xFFFF0000U)
#define DDRC_REGS_INIT4_emr2_SHIFT               (16U)
#define DDRC_REGS_INIT4_emr2(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT4_emr2_SHIFT)) & DDRC_REGS_INIT4_emr2_MASK)
/*! @} */

/*! @name INIT5 - SDRAM Initialization Register 5 */
/*! @{ */
#define DDRC_REGS_INIT5_max_auto_init_x1024_MASK (0x3FFU)
#define DDRC_REGS_INIT5_max_auto_init_x1024_SHIFT (0U)
#define DDRC_REGS_INIT5_max_auto_init_x1024(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT5_max_auto_init_x1024_SHIFT)) & DDRC_REGS_INIT5_max_auto_init_x1024_MASK)
#define DDRC_REGS_INIT5_dev_zqinit_x32_MASK      (0xFF0000U)
#define DDRC_REGS_INIT5_dev_zqinit_x32_SHIFT     (16U)
#define DDRC_REGS_INIT5_dev_zqinit_x32(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT5_dev_zqinit_x32_SHIFT)) & DDRC_REGS_INIT5_dev_zqinit_x32_MASK)
/*! @} */

/*! @name INIT6 - SDRAM Initialization Register 6 */
/*! @{ */
#define DDRC_REGS_INIT6_mr5_MASK                 (0xFFFFU)
#define DDRC_REGS_INIT6_mr5_SHIFT                (0U)
#define DDRC_REGS_INIT6_mr5(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT6_mr5_SHIFT)) & DDRC_REGS_INIT6_mr5_MASK)
#define DDRC_REGS_INIT6_mr4_MASK                 (0xFFFF0000U)
#define DDRC_REGS_INIT6_mr4_SHIFT                (16U)
#define DDRC_REGS_INIT6_mr4(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT6_mr4_SHIFT)) & DDRC_REGS_INIT6_mr4_MASK)
/*! @} */

/*! @name INIT7 - SDRAM Initialization Register 7 */
/*! @{ */
#define DDRC_REGS_INIT7_mr6_MASK                 (0xFFFF0000U)
#define DDRC_REGS_INIT7_mr6_SHIFT                (16U)
#define DDRC_REGS_INIT7_mr6(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT7_mr6_SHIFT)) & DDRC_REGS_INIT7_mr6_MASK)
/*! @} */

/*! @name DIMMCTL - DIMM Control Register */
/*! @{ */
#define DDRC_REGS_DIMMCTL_dimm_stagger_cs_en_MASK (0x1U)
#define DDRC_REGS_DIMMCTL_dimm_stagger_cs_en_SHIFT (0U)
#define DDRC_REGS_DIMMCTL_dimm_addr_mirr_en_MASK (0x2U)
#define DDRC_REGS_DIMMCTL_dimm_addr_mirr_en_SHIFT (1U)
#define DDRC_REGS_DIMMCTL_dimm_output_inv_en_MASK (0x4U)
#define DDRC_REGS_DIMMCTL_dimm_output_inv_en_SHIFT (2U)
#define DDRC_REGS_DIMMCTL_mrs_a17_en_MASK        (0x8U)
#define DDRC_REGS_DIMMCTL_mrs_a17_en_SHIFT       (3U)
#define DDRC_REGS_DIMMCTL_mrs_bg1_en_MASK        (0x10U)
#define DDRC_REGS_DIMMCTL_mrs_bg1_en_SHIFT       (4U)
#define DDRC_REGS_DIMMCTL_dimm_dis_bg_mirroring_MASK (0x20U)
#define DDRC_REGS_DIMMCTL_dimm_dis_bg_mirroring_SHIFT (5U)
#define DDRC_REGS_DIMMCTL_lrdimm_bcom_cmd_prot_MASK (0x40U)
#define DDRC_REGS_DIMMCTL_lrdimm_bcom_cmd_prot_SHIFT (6U)
/*! @} */

/*! @name RANKCTL - Rank Control Register */
/*! @{ */
#define DDRC_REGS_RANKCTL_max_rank_rd_MASK       (0xFU)
#define DDRC_REGS_RANKCTL_max_rank_rd_SHIFT      (0U)
#define DDRC_REGS_RANKCTL_max_rank_rd(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RANKCTL_max_rank_rd_SHIFT)) & DDRC_REGS_RANKCTL_max_rank_rd_MASK)
#define DDRC_REGS_RANKCTL_diff_rank_rd_gap_MASK  (0xF0U)
#define DDRC_REGS_RANKCTL_diff_rank_rd_gap_SHIFT (4U)
#define DDRC_REGS_RANKCTL_diff_rank_rd_gap(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RANKCTL_diff_rank_rd_gap_SHIFT)) & DDRC_REGS_RANKCTL_diff_rank_rd_gap_MASK)
#define DDRC_REGS_RANKCTL_diff_rank_wr_gap_MASK  (0xF00U)
#define DDRC_REGS_RANKCTL_diff_rank_wr_gap_SHIFT (8U)
#define DDRC_REGS_RANKCTL_diff_rank_wr_gap(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RANKCTL_diff_rank_wr_gap_SHIFT)) & DDRC_REGS_RANKCTL_diff_rank_wr_gap_MASK)
/*! @} */

/*! @name DRAMTMG0 - SDRAM Timing Register 0 */
/*! @{ */
#define DDRC_REGS_DRAMTMG0_t_ras_min_MASK        (0x3FU)
#define DDRC_REGS_DRAMTMG0_t_ras_min_SHIFT       (0U)
#define DDRC_REGS_DRAMTMG0_t_ras_min(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_t_ras_min_SHIFT)) & DDRC_REGS_DRAMTMG0_t_ras_min_MASK)
#define DDRC_REGS_DRAMTMG0_t_ras_max_MASK        (0x7F00U)
#define DDRC_REGS_DRAMTMG0_t_ras_max_SHIFT       (8U)
#define DDRC_REGS_DRAMTMG0_t_ras_max(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_t_ras_max_SHIFT)) & DDRC_REGS_DRAMTMG0_t_ras_max_MASK)
#define DDRC_REGS_DRAMTMG0_t_faw_MASK            (0x3F0000U)
#define DDRC_REGS_DRAMTMG0_t_faw_SHIFT           (16U)
#define DDRC_REGS_DRAMTMG0_t_faw(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_t_faw_SHIFT)) & DDRC_REGS_DRAMTMG0_t_faw_MASK)
#define DDRC_REGS_DRAMTMG0_wr2pre_MASK           (0x7F000000U)
#define DDRC_REGS_DRAMTMG0_wr2pre_SHIFT          (24U)
#define DDRC_REGS_DRAMTMG0_wr2pre(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_wr2pre_SHIFT)) & DDRC_REGS_DRAMTMG0_wr2pre_MASK)
/*! @} */

/*! @name DRAMTMG1 - SDRAM Timing Register 1 */
/*! @{ */
#define DDRC_REGS_DRAMTMG1_t_rc_MASK             (0x7FU)
#define DDRC_REGS_DRAMTMG1_t_rc_SHIFT            (0U)
#define DDRC_REGS_DRAMTMG1_t_rc(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_t_rc_SHIFT)) & DDRC_REGS_DRAMTMG1_t_rc_MASK)
#define DDRC_REGS_DRAMTMG1_rd2pre_MASK           (0x3F00U)
#define DDRC_REGS_DRAMTMG1_rd2pre_SHIFT          (8U)
#define DDRC_REGS_DRAMTMG1_rd2pre(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_rd2pre_SHIFT)) & DDRC_REGS_DRAMTMG1_rd2pre_MASK)
#define DDRC_REGS_DRAMTMG1_t_xp_MASK             (0x1F0000U)
#define DDRC_REGS_DRAMTMG1_t_xp_SHIFT            (16U)
#define DDRC_REGS_DRAMTMG1_t_xp(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_t_xp_SHIFT)) & DDRC_REGS_DRAMTMG1_t_xp_MASK)
/*! @} */

/*! @name DRAMTMG2 - SDRAM Timing Register 2 */
/*! @{ */
#define DDRC_REGS_DRAMTMG2_wr2rd_MASK            (0x3FU)
#define DDRC_REGS_DRAMTMG2_wr2rd_SHIFT           (0U)
#define DDRC_REGS_DRAMTMG2_wr2rd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_wr2rd_SHIFT)) & DDRC_REGS_DRAMTMG2_wr2rd_MASK)
#define DDRC_REGS_DRAMTMG2_rd2wr_MASK            (0x3F00U)
#define DDRC_REGS_DRAMTMG2_rd2wr_SHIFT           (8U)
#define DDRC_REGS_DRAMTMG2_rd2wr(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_rd2wr_SHIFT)) & DDRC_REGS_DRAMTMG2_rd2wr_MASK)
#define DDRC_REGS_DRAMTMG2_read_latency_MASK     (0x3F0000U)
#define DDRC_REGS_DRAMTMG2_read_latency_SHIFT    (16U)
#define DDRC_REGS_DRAMTMG2_read_latency(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_read_latency_SHIFT)) & DDRC_REGS_DRAMTMG2_read_latency_MASK)
#define DDRC_REGS_DRAMTMG2_write_latency_MASK    (0x3F000000U)
#define DDRC_REGS_DRAMTMG2_write_latency_SHIFT   (24U)
#define DDRC_REGS_DRAMTMG2_write_latency(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_write_latency_SHIFT)) & DDRC_REGS_DRAMTMG2_write_latency_MASK)
/*! @} */

/*! @name DRAMTMG3 - SDRAM Timing Register 3 */
/*! @{ */
#define DDRC_REGS_DRAMTMG3_t_mod_MASK            (0x3FFU)
#define DDRC_REGS_DRAMTMG3_t_mod_SHIFT           (0U)
#define DDRC_REGS_DRAMTMG3_t_mod(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_t_mod_SHIFT)) & DDRC_REGS_DRAMTMG3_t_mod_MASK)
#define DDRC_REGS_DRAMTMG3_t_mrd_MASK            (0x3F000U)
#define DDRC_REGS_DRAMTMG3_t_mrd_SHIFT           (12U)
#define DDRC_REGS_DRAMTMG3_t_mrd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_t_mrd_SHIFT)) & DDRC_REGS_DRAMTMG3_t_mrd_MASK)
#define DDRC_REGS_DRAMTMG3_t_mrw_MASK            (0x3FF00000U)
#define DDRC_REGS_DRAMTMG3_t_mrw_SHIFT           (20U)
#define DDRC_REGS_DRAMTMG3_t_mrw(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_t_mrw_SHIFT)) & DDRC_REGS_DRAMTMG3_t_mrw_MASK)
/*! @} */

/*! @name DRAMTMG4 - SDRAM Timing Register 4 */
/*! @{ */
#define DDRC_REGS_DRAMTMG4_t_rp_MASK             (0x1FU)
#define DDRC_REGS_DRAMTMG4_t_rp_SHIFT            (0U)
#define DDRC_REGS_DRAMTMG4_t_rp(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_t_rp_SHIFT)) & DDRC_REGS_DRAMTMG4_t_rp_MASK)
#define DDRC_REGS_DRAMTMG4_t_rrd_MASK            (0xF00U)
#define DDRC_REGS_DRAMTMG4_t_rrd_SHIFT           (8U)
#define DDRC_REGS_DRAMTMG4_t_rrd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_t_rrd_SHIFT)) & DDRC_REGS_DRAMTMG4_t_rrd_MASK)
#define DDRC_REGS_DRAMTMG4_t_ccd_MASK            (0xF0000U)
#define DDRC_REGS_DRAMTMG4_t_ccd_SHIFT           (16U)
#define DDRC_REGS_DRAMTMG4_t_ccd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_t_ccd_SHIFT)) & DDRC_REGS_DRAMTMG4_t_ccd_MASK)
#define DDRC_REGS_DRAMTMG4_t_rcd_MASK            (0x1F000000U)
#define DDRC_REGS_DRAMTMG4_t_rcd_SHIFT           (24U)
#define DDRC_REGS_DRAMTMG4_t_rcd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_t_rcd_SHIFT)) & DDRC_REGS_DRAMTMG4_t_rcd_MASK)
/*! @} */

/*! @name DRAMTMG5 - SDRAM Timing Register 5 */
/*! @{ */
#define DDRC_REGS_DRAMTMG5_t_cke_MASK            (0x1FU)
#define DDRC_REGS_DRAMTMG5_t_cke_SHIFT           (0U)
#define DDRC_REGS_DRAMTMG5_t_cke(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_t_cke_SHIFT)) & DDRC_REGS_DRAMTMG5_t_cke_MASK)
#define DDRC_REGS_DRAMTMG5_t_ckesr_MASK          (0x3F00U)
#define DDRC_REGS_DRAMTMG5_t_ckesr_SHIFT         (8U)
#define DDRC_REGS_DRAMTMG5_t_ckesr(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_t_ckesr_SHIFT)) & DDRC_REGS_DRAMTMG5_t_ckesr_MASK)
#define DDRC_REGS_DRAMTMG5_t_cksre_MASK          (0xF0000U)
#define DDRC_REGS_DRAMTMG5_t_cksre_SHIFT         (16U)
#define DDRC_REGS_DRAMTMG5_t_cksre(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_t_cksre_SHIFT)) & DDRC_REGS_DRAMTMG5_t_cksre_MASK)
#define DDRC_REGS_DRAMTMG5_t_cksrx_MASK          (0xF000000U)
#define DDRC_REGS_DRAMTMG5_t_cksrx_SHIFT         (24U)
#define DDRC_REGS_DRAMTMG5_t_cksrx(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_t_cksrx_SHIFT)) & DDRC_REGS_DRAMTMG5_t_cksrx_MASK)
/*! @} */

/*! @name DRAMTMG6 - SDRAM Timing Register 6 */
/*! @{ */
#define DDRC_REGS_DRAMTMG6_t_ckcsx_MASK          (0xFU)
#define DDRC_REGS_DRAMTMG6_t_ckcsx_SHIFT         (0U)
#define DDRC_REGS_DRAMTMG6_t_ckcsx(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_t_ckcsx_SHIFT)) & DDRC_REGS_DRAMTMG6_t_ckcsx_MASK)
#define DDRC_REGS_DRAMTMG6_t_ckdpdx_MASK         (0xF0000U)
#define DDRC_REGS_DRAMTMG6_t_ckdpdx_SHIFT        (16U)
#define DDRC_REGS_DRAMTMG6_t_ckdpdx(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_t_ckdpdx_SHIFT)) & DDRC_REGS_DRAMTMG6_t_ckdpdx_MASK)
#define DDRC_REGS_DRAMTMG6_t_ckdpde_MASK         (0xF000000U)
#define DDRC_REGS_DRAMTMG6_t_ckdpde_SHIFT        (24U)
#define DDRC_REGS_DRAMTMG6_t_ckdpde(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_t_ckdpde_SHIFT)) & DDRC_REGS_DRAMTMG6_t_ckdpde_MASK)
/*! @} */

/*! @name DRAMTMG7 - SDRAM Timing Register 7 */
/*! @{ */
#define DDRC_REGS_DRAMTMG7_t_ckpdx_MASK          (0xFU)
#define DDRC_REGS_DRAMTMG7_t_ckpdx_SHIFT         (0U)
#define DDRC_REGS_DRAMTMG7_t_ckpdx(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG7_t_ckpdx_SHIFT)) & DDRC_REGS_DRAMTMG7_t_ckpdx_MASK)
#define DDRC_REGS_DRAMTMG7_t_ckpde_MASK          (0xF00U)
#define DDRC_REGS_DRAMTMG7_t_ckpde_SHIFT         (8U)
#define DDRC_REGS_DRAMTMG7_t_ckpde(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG7_t_ckpde_SHIFT)) & DDRC_REGS_DRAMTMG7_t_ckpde_MASK)
/*! @} */

/*! @name DRAMTMG8 - SDRAM Timing Register 8 */
/*! @{ */
#define DDRC_REGS_DRAMTMG8_t_xs_x32_MASK         (0x7FU)
#define DDRC_REGS_DRAMTMG8_t_xs_x32_SHIFT        (0U)
#define DDRC_REGS_DRAMTMG8_t_xs_x32(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_t_xs_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_t_xs_x32_MASK)
#define DDRC_REGS_DRAMTMG8_t_xs_dll_x32_MASK     (0x7F00U)
#define DDRC_REGS_DRAMTMG8_t_xs_dll_x32_SHIFT    (8U)
#define DDRC_REGS_DRAMTMG8_t_xs_dll_x32(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_t_xs_dll_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_t_xs_dll_x32_MASK)
#define DDRC_REGS_DRAMTMG8_t_xs_abort_x32_MASK   (0x7F0000U)
#define DDRC_REGS_DRAMTMG8_t_xs_abort_x32_SHIFT  (16U)
#define DDRC_REGS_DRAMTMG8_t_xs_abort_x32(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_t_xs_abort_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_t_xs_abort_x32_MASK)
#define DDRC_REGS_DRAMTMG8_t_xs_fast_x32_MASK    (0x7F000000U)
#define DDRC_REGS_DRAMTMG8_t_xs_fast_x32_SHIFT   (24U)
#define DDRC_REGS_DRAMTMG8_t_xs_fast_x32(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_t_xs_fast_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_t_xs_fast_x32_MASK)
/*! @} */

/*! @name DRAMTMG9 - SDRAM Timing Register 9 */
/*! @{ */
#define DDRC_REGS_DRAMTMG9_wr2rd_s_MASK          (0x3FU)
#define DDRC_REGS_DRAMTMG9_wr2rd_s_SHIFT         (0U)
#define DDRC_REGS_DRAMTMG9_wr2rd_s(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_wr2rd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_wr2rd_s_MASK)
#define DDRC_REGS_DRAMTMG9_t_rrd_s_MASK          (0xF00U)
#define DDRC_REGS_DRAMTMG9_t_rrd_s_SHIFT         (8U)
#define DDRC_REGS_DRAMTMG9_t_rrd_s(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_t_rrd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_t_rrd_s_MASK)
#define DDRC_REGS_DRAMTMG9_t_ccd_s_MASK          (0x70000U)
#define DDRC_REGS_DRAMTMG9_t_ccd_s_SHIFT         (16U)
#define DDRC_REGS_DRAMTMG9_t_ccd_s(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_t_ccd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_t_ccd_s_MASK)
#define DDRC_REGS_DRAMTMG9_ddr4_wr_preamble_MASK (0x40000000U)
#define DDRC_REGS_DRAMTMG9_ddr4_wr_preamble_SHIFT (30U)
/*! @} */

/*! @name DRAMTMG10 - SDRAM Timing Register 10 */
/*! @{ */
#define DDRC_REGS_DRAMTMG10_t_gear_hold_MASK     (0x3U)
#define DDRC_REGS_DRAMTMG10_t_gear_hold_SHIFT    (0U)
#define DDRC_REGS_DRAMTMG10_t_gear_hold(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_t_gear_hold_SHIFT)) & DDRC_REGS_DRAMTMG10_t_gear_hold_MASK)
#define DDRC_REGS_DRAMTMG10_t_gear_setup_MASK    (0xCU)
#define DDRC_REGS_DRAMTMG10_t_gear_setup_SHIFT   (2U)
#define DDRC_REGS_DRAMTMG10_t_gear_setup(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_t_gear_setup_SHIFT)) & DDRC_REGS_DRAMTMG10_t_gear_setup_MASK)
#define DDRC_REGS_DRAMTMG10_t_cmd_gear_MASK      (0x1F00U)
#define DDRC_REGS_DRAMTMG10_t_cmd_gear_SHIFT     (8U)
#define DDRC_REGS_DRAMTMG10_t_cmd_gear(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_t_cmd_gear_SHIFT)) & DDRC_REGS_DRAMTMG10_t_cmd_gear_MASK)
#define DDRC_REGS_DRAMTMG10_t_sync_gear_MASK     (0x1F0000U)
#define DDRC_REGS_DRAMTMG10_t_sync_gear_SHIFT    (16U)
#define DDRC_REGS_DRAMTMG10_t_sync_gear(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_t_sync_gear_SHIFT)) & DDRC_REGS_DRAMTMG10_t_sync_gear_MASK)
/*! @} */

/*! @name DRAMTMG11 - SDRAM Timing Register 11 */
/*! @{ */
#define DDRC_REGS_DRAMTMG11_t_ckmpe_MASK         (0x1FU)
#define DDRC_REGS_DRAMTMG11_t_ckmpe_SHIFT        (0U)
#define DDRC_REGS_DRAMTMG11_t_ckmpe(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_t_ckmpe_SHIFT)) & DDRC_REGS_DRAMTMG11_t_ckmpe_MASK)
#define DDRC_REGS_DRAMTMG11_t_mpx_s_MASK         (0x300U)
#define DDRC_REGS_DRAMTMG11_t_mpx_s_SHIFT        (8U)
#define DDRC_REGS_DRAMTMG11_t_mpx_s(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_t_mpx_s_SHIFT)) & DDRC_REGS_DRAMTMG11_t_mpx_s_MASK)
#define DDRC_REGS_DRAMTMG11_t_mpx_lh_MASK        (0x1F0000U)
#define DDRC_REGS_DRAMTMG11_t_mpx_lh_SHIFT       (16U)
#define DDRC_REGS_DRAMTMG11_t_mpx_lh(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_t_mpx_lh_SHIFT)) & DDRC_REGS_DRAMTMG11_t_mpx_lh_MASK)
#define DDRC_REGS_DRAMTMG11_post_mpsm_gap_x32_MASK (0x7F000000U)
#define DDRC_REGS_DRAMTMG11_post_mpsm_gap_x32_SHIFT (24U)
#define DDRC_REGS_DRAMTMG11_post_mpsm_gap_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_post_mpsm_gap_x32_SHIFT)) & DDRC_REGS_DRAMTMG11_post_mpsm_gap_x32_MASK)
/*! @} */

/*! @name DRAMTMG12 - SDRAM Timing Register 12 */
/*! @{ */
#define DDRC_REGS_DRAMTMG12_t_mrd_pda_MASK       (0x1FU)
#define DDRC_REGS_DRAMTMG12_t_mrd_pda_SHIFT      (0U)
#define DDRC_REGS_DRAMTMG12_t_mrd_pda(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_t_mrd_pda_SHIFT)) & DDRC_REGS_DRAMTMG12_t_mrd_pda_MASK)
#define DDRC_REGS_DRAMTMG12_t_ckehcmd_MASK       (0xF00U)
#define DDRC_REGS_DRAMTMG12_t_ckehcmd_SHIFT      (8U)
#define DDRC_REGS_DRAMTMG12_t_ckehcmd(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_t_ckehcmd_SHIFT)) & DDRC_REGS_DRAMTMG12_t_ckehcmd_MASK)
#define DDRC_REGS_DRAMTMG12_t_cmdcke_MASK        (0x30000U)
#define DDRC_REGS_DRAMTMG12_t_cmdcke_SHIFT       (16U)
#define DDRC_REGS_DRAMTMG12_t_cmdcke(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_t_cmdcke_SHIFT)) & DDRC_REGS_DRAMTMG12_t_cmdcke_MASK)
/*! @} */

/*! @name DRAMTMG13 - SDRAM Timing Register 13 */
/*! @{ */
#define DDRC_REGS_DRAMTMG13_t_ppd_MASK           (0x7U)
#define DDRC_REGS_DRAMTMG13_t_ppd_SHIFT          (0U)
#define DDRC_REGS_DRAMTMG13_t_ppd(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_t_ppd_SHIFT)) & DDRC_REGS_DRAMTMG13_t_ppd_MASK)
#define DDRC_REGS_DRAMTMG13_t_ccd_mw_MASK        (0x3F0000U)
#define DDRC_REGS_DRAMTMG13_t_ccd_mw_SHIFT       (16U)
#define DDRC_REGS_DRAMTMG13_t_ccd_mw(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_t_ccd_mw_SHIFT)) & DDRC_REGS_DRAMTMG13_t_ccd_mw_MASK)
#define DDRC_REGS_DRAMTMG13_odtloff_MASK         (0x7F000000U)
#define DDRC_REGS_DRAMTMG13_odtloff_SHIFT        (24U)
#define DDRC_REGS_DRAMTMG13_odtloff(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_odtloff_SHIFT)) & DDRC_REGS_DRAMTMG13_odtloff_MASK)
/*! @} */

/*! @name DRAMTMG14 - SDRAM Timing Register 14 */
/*! @{ */
#define DDRC_REGS_DRAMTMG14_t_xsr_MASK           (0xFFFU)
#define DDRC_REGS_DRAMTMG14_t_xsr_SHIFT          (0U)
#define DDRC_REGS_DRAMTMG14_t_xsr(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG14_t_xsr_SHIFT)) & DDRC_REGS_DRAMTMG14_t_xsr_MASK)
/*! @} */

/*! @name DRAMTMG15 - SDRAM Timing Register 15 */
/*! @{ */
#define DDRC_REGS_DRAMTMG15_t_stab_x32_MASK      (0xFFU)
#define DDRC_REGS_DRAMTMG15_t_stab_x32_SHIFT     (0U)
#define DDRC_REGS_DRAMTMG15_t_stab_x32(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG15_t_stab_x32_SHIFT)) & DDRC_REGS_DRAMTMG15_t_stab_x32_MASK)
#define DDRC_REGS_DRAMTMG15_en_dfi_lp_t_stab_MASK (0x80000000U)
#define DDRC_REGS_DRAMTMG15_en_dfi_lp_t_stab_SHIFT (31U)
/*! @} */

/*! @name ZQCTL0 - ZQ Control Register 0 */
/*! @{ */
#define DDRC_REGS_ZQCTL0_t_zq_short_nop_MASK     (0x3FFU)
#define DDRC_REGS_ZQCTL0_t_zq_short_nop_SHIFT    (0U)
#define DDRC_REGS_ZQCTL0_t_zq_short_nop(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL0_t_zq_short_nop_SHIFT)) & DDRC_REGS_ZQCTL0_t_zq_short_nop_MASK)
#define DDRC_REGS_ZQCTL0_t_zq_long_nop_MASK      (0x7FF0000U)
#define DDRC_REGS_ZQCTL0_t_zq_long_nop_SHIFT     (16U)
#define DDRC_REGS_ZQCTL0_t_zq_long_nop(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL0_t_zq_long_nop_SHIFT)) & DDRC_REGS_ZQCTL0_t_zq_long_nop_MASK)
#define DDRC_REGS_ZQCTL0_dis_mpsmx_zqcl_MASK     (0x10000000U)
#define DDRC_REGS_ZQCTL0_dis_mpsmx_zqcl_SHIFT    (28U)
#define DDRC_REGS_ZQCTL0_zq_resistor_shared_MASK (0x20000000U)
#define DDRC_REGS_ZQCTL0_zq_resistor_shared_SHIFT (29U)
#define DDRC_REGS_ZQCTL0_dis_srx_zqcl_MASK       (0x40000000U)
#define DDRC_REGS_ZQCTL0_dis_srx_zqcl_SHIFT      (30U)
#define DDRC_REGS_ZQCTL0_dis_auto_zq_MASK        (0x80000000U)
#define DDRC_REGS_ZQCTL0_dis_auto_zq_SHIFT       (31U)
/*! @} */

/*! @name ZQCTL1 - ZQ Control Register 1 */
/*! @{ */
#define DDRC_REGS_ZQCTL1_t_zq_short_interval_x1024_MASK (0xFFFFFU)
#define DDRC_REGS_ZQCTL1_t_zq_short_interval_x1024_SHIFT (0U)
#define DDRC_REGS_ZQCTL1_t_zq_short_interval_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL1_t_zq_short_interval_x1024_SHIFT)) & DDRC_REGS_ZQCTL1_t_zq_short_interval_x1024_MASK)
#define DDRC_REGS_ZQCTL1_t_zq_reset_nop_MASK     (0x3FF00000U)
#define DDRC_REGS_ZQCTL1_t_zq_reset_nop_SHIFT    (20U)
#define DDRC_REGS_ZQCTL1_t_zq_reset_nop(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL1_t_zq_reset_nop_SHIFT)) & DDRC_REGS_ZQCTL1_t_zq_reset_nop_MASK)
/*! @} */

/*! @name ZQCTL2 - ZQ Control Register 2 */
/*! @{ */
#define DDRC_REGS_ZQCTL2_zq_reset_MASK           (0x1U)
#define DDRC_REGS_ZQCTL2_zq_reset_SHIFT          (0U)
/*! @} */

/*! @name ZQSTAT - ZQ Status Register */
/*! @{ */
#define DDRC_REGS_ZQSTAT_zq_reset_busy_MASK      (0x1U)
#define DDRC_REGS_ZQSTAT_zq_reset_busy_SHIFT     (0U)
/*! @} */

/*! @name DFITMG0 - DFI Timing Register 0 */
/*! @{ */
#define DDRC_REGS_DFITMG0_dfi_tphy_wrlat_MASK    (0x3FU)
#define DDRC_REGS_DFITMG0_dfi_tphy_wrlat_SHIFT   (0U)
#define DDRC_REGS_DFITMG0_dfi_tphy_wrlat(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_dfi_tphy_wrlat_SHIFT)) & DDRC_REGS_DFITMG0_dfi_tphy_wrlat_MASK)
#define DDRC_REGS_DFITMG0_dfi_tphy_wrdata_MASK   (0x3F00U)
#define DDRC_REGS_DFITMG0_dfi_tphy_wrdata_SHIFT  (8U)
#define DDRC_REGS_DFITMG0_dfi_tphy_wrdata(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_dfi_tphy_wrdata_SHIFT)) & DDRC_REGS_DFITMG0_dfi_tphy_wrdata_MASK)
#define DDRC_REGS_DFITMG0_dfi_wrdata_use_sdr_MASK (0x8000U)
#define DDRC_REGS_DFITMG0_dfi_wrdata_use_sdr_SHIFT (15U)
#define DDRC_REGS_DFITMG0_dfi_t_rddata_en_MASK   (0x7F0000U)
#define DDRC_REGS_DFITMG0_dfi_t_rddata_en_SHIFT  (16U)
#define DDRC_REGS_DFITMG0_dfi_t_rddata_en(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_dfi_t_rddata_en_SHIFT)) & DDRC_REGS_DFITMG0_dfi_t_rddata_en_MASK)
#define DDRC_REGS_DFITMG0_dfi_rddata_use_sdr_MASK (0x800000U)
#define DDRC_REGS_DFITMG0_dfi_rddata_use_sdr_SHIFT (23U)
#define DDRC_REGS_DFITMG0_dfi_t_ctrl_delay_MASK  (0x1F000000U)
#define DDRC_REGS_DFITMG0_dfi_t_ctrl_delay_SHIFT (24U)
#define DDRC_REGS_DFITMG0_dfi_t_ctrl_delay(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_dfi_t_ctrl_delay_SHIFT)) & DDRC_REGS_DFITMG0_dfi_t_ctrl_delay_MASK)
/*! @} */

/*! @name DFITMG1 - DFI Timing Register 1 */
/*! @{ */
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_enable_MASK (0x1FU)
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_enable_SHIFT (0U)
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_enable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_dfi_t_dram_clk_enable_SHIFT)) & DDRC_REGS_DFITMG1_dfi_t_dram_clk_enable_MASK)
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_disable_MASK (0x1F00U)
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_disable_SHIFT (8U)
#define DDRC_REGS_DFITMG1_dfi_t_dram_clk_disable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_dfi_t_dram_clk_disable_SHIFT)) & DDRC_REGS_DFITMG1_dfi_t_dram_clk_disable_MASK)
#define DDRC_REGS_DFITMG1_dfi_t_wrdata_delay_MASK (0x1F0000U)
#define DDRC_REGS_DFITMG1_dfi_t_wrdata_delay_SHIFT (16U)
#define DDRC_REGS_DFITMG1_dfi_t_wrdata_delay(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_dfi_t_wrdata_delay_SHIFT)) & DDRC_REGS_DFITMG1_dfi_t_wrdata_delay_MASK)
#define DDRC_REGS_DFITMG1_dfi_t_parin_lat_MASK   (0x3000000U)
#define DDRC_REGS_DFITMG1_dfi_t_parin_lat_SHIFT  (24U)
#define DDRC_REGS_DFITMG1_dfi_t_parin_lat(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_dfi_t_parin_lat_SHIFT)) & DDRC_REGS_DFITMG1_dfi_t_parin_lat_MASK)
#define DDRC_REGS_DFITMG1_dfi_t_cmd_lat_MASK     (0xF0000000U)
#define DDRC_REGS_DFITMG1_dfi_t_cmd_lat_SHIFT    (28U)
#define DDRC_REGS_DFITMG1_dfi_t_cmd_lat(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_dfi_t_cmd_lat_SHIFT)) & DDRC_REGS_DFITMG1_dfi_t_cmd_lat_MASK)
/*! @} */

/*! @name DFILPCFG0 - DFI Low Power Configuration Register 0 */
/*! @{ */
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_pd_MASK    (0x1U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_pd_SHIFT   (0U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_pd_MASK (0xF0U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_pd_SHIFT (4U)
/*! dfi_lp_wakeup_pd - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Power Down
 *    mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_pd(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_pd_SHIFT)) & DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_pd_MASK)
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_sr_MASK    (0x100U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_sr_SHIFT   (8U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_sr_MASK (0xF000U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_sr_SHIFT (12U)
/*! dfi_lp_wakeup_sr - Value in DFI clpck cycles to drive on dfi_lp_wakeup signal when Self Refresh
 *    mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_sr(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_sr_SHIFT)) & DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_sr_MASK)
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_dpd_MASK   (0x10000U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_en_dpd_SHIFT  (16U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_dpd_MASK (0xF00000U)
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_dpd_SHIFT (20U)
/*! dfi_lp_wakeup_dpd - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Deep Power
 *    Down mode is entered. Determines the DFI's tlp_wakeup time: This is only present for designs
 *    supporting mDDR or LPDDR2/LPDDR3 devices.
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_dpd(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_dpd_SHIFT)) & DDRC_REGS_DFILPCFG0_dfi_lp_wakeup_dpd_MASK)
#define DDRC_REGS_DFILPCFG0_dfi_tlp_resp_MASK    (0x1F000000U)
#define DDRC_REGS_DFILPCFG0_dfi_tlp_resp_SHIFT   (24U)
#define DDRC_REGS_DFILPCFG0_dfi_tlp_resp(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFILPCFG0_dfi_tlp_resp_SHIFT)) & DDRC_REGS_DFILPCFG0_dfi_tlp_resp_MASK)
/*! @} */

/*! @name DFILPCFG1 - DFI Low Power Configuration Register 1 */
/*! @{ */
#define DDRC_REGS_DFILPCFG1_dfi_lp_en_mpsm_MASK  (0x1U)
#define DDRC_REGS_DFILPCFG1_dfi_lp_en_mpsm_SHIFT (0U)
#define DDRC_REGS_DFILPCFG1_dfi_lp_wakeup_mpsm_MASK (0xF0U)
#define DDRC_REGS_DFILPCFG1_dfi_lp_wakeup_mpsm_SHIFT (4U)
/*! dfi_lp_wakeup_mpsm - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Maximum
 *    Power Saving Mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_REGS_DFILPCFG1_dfi_lp_wakeup_mpsm(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFILPCFG1_dfi_lp_wakeup_mpsm_SHIFT)) & DDRC_REGS_DFILPCFG1_dfi_lp_wakeup_mpsm_MASK)
/*! @} */

/*! @name DFIUPD0 - DFI Update Register 0 */
/*! @{ */
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_min_MASK  (0x3FFU)
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_min_SHIFT (0U)
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_min(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFIUPD0_dfi_t_ctrlup_min_SHIFT)) & DDRC_REGS_DFIUPD0_dfi_t_ctrlup_min_MASK)
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_max_MASK  (0x3FF0000U)
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_max_SHIFT (16U)
#define DDRC_REGS_DFIUPD0_dfi_t_ctrlup_max(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFIUPD0_dfi_t_ctrlup_max_SHIFT)) & DDRC_REGS_DFIUPD0_dfi_t_ctrlup_max_MASK)
#define DDRC_REGS_DFIUPD0_ctrlupd_pre_srx_MASK   (0x20000000U)
#define DDRC_REGS_DFIUPD0_ctrlupd_pre_srx_SHIFT  (29U)
#define DDRC_REGS_DFIUPD0_dis_auto_ctrlupd_srx_MASK (0x40000000U)
#define DDRC_REGS_DFIUPD0_dis_auto_ctrlupd_srx_SHIFT (30U)
#define DDRC_REGS_DFIUPD0_dis_auto_ctrlupd_MASK  (0x80000000U)
#define DDRC_REGS_DFIUPD0_dis_auto_ctrlupd_SHIFT (31U)
/*! @} */

/*! @name DFIUPD1 - DFI Update Register 1 */
/*! @{ */
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_MASK (0xFFU)
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_SHIFT (0U)
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_SHIFT)) & DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_MASK)
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_MASK (0xFF0000U)
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_SHIFT (16U)
#define DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_SHIFT)) & DDRC_REGS_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_MASK)
/*! @} */

/*! @name DFIUPD2 - DFI Update Register 2 */
/*! @{ */
#define DDRC_REGS_DFIUPD2_dfi_phyupd_en_MASK     (0x80000000U)
#define DDRC_REGS_DFIUPD2_dfi_phyupd_en_SHIFT    (31U)
/*! @} */

/*! @name DFIMISC - DFI Miscellaneous Control Register */
/*! @{ */
#define DDRC_REGS_DFIMISC_dfi_init_complete_en_MASK (0x1U)
#define DDRC_REGS_DFIMISC_dfi_init_complete_en_SHIFT (0U)
#define DDRC_REGS_DFIMISC_phy_dbi_mode_MASK      (0x2U)
#define DDRC_REGS_DFIMISC_phy_dbi_mode_SHIFT     (1U)
#define DDRC_REGS_DFIMISC_dfi_data_cs_polarity_MASK (0x4U)
#define DDRC_REGS_DFIMISC_dfi_data_cs_polarity_SHIFT (2U)
#define DDRC_REGS_DFIMISC_ctl_idle_en_MASK       (0x10U)
#define DDRC_REGS_DFIMISC_ctl_idle_en_SHIFT      (4U)
#define DDRC_REGS_DFIMISC_dfi_init_start_MASK    (0x20U)
#define DDRC_REGS_DFIMISC_dfi_init_start_SHIFT   (5U)
#define DDRC_REGS_DFIMISC_dfi_frequency_MASK     (0x1F00U)
#define DDRC_REGS_DFIMISC_dfi_frequency_SHIFT    (8U)
#define DDRC_REGS_DFIMISC_dfi_frequency(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFIMISC_dfi_frequency_SHIFT)) & DDRC_REGS_DFIMISC_dfi_frequency_MASK)
/*! @} */

/*! @name DFITMG2 - DFI Timing Register 2 */
/*! @{ */
#define DDRC_REGS_DFITMG2_dfi_tphy_wrcslat_MASK  (0x3FU)
#define DDRC_REGS_DFITMG2_dfi_tphy_wrcslat_SHIFT (0U)
#define DDRC_REGS_DFITMG2_dfi_tphy_wrcslat(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG2_dfi_tphy_wrcslat_SHIFT)) & DDRC_REGS_DFITMG2_dfi_tphy_wrcslat_MASK)
#define DDRC_REGS_DFITMG2_dfi_tphy_rdcslat_MASK  (0x7F00U)
#define DDRC_REGS_DFITMG2_dfi_tphy_rdcslat_SHIFT (8U)
#define DDRC_REGS_DFITMG2_dfi_tphy_rdcslat(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG2_dfi_tphy_rdcslat_SHIFT)) & DDRC_REGS_DFITMG2_dfi_tphy_rdcslat_MASK)
/*! @} */

/*! @name DFITMG3 - DFI Timing Register 3 */
/*! @{ */
#define DDRC_REGS_DFITMG3_dfi_t_geardown_delay_MASK (0x1FU)
#define DDRC_REGS_DFITMG3_dfi_t_geardown_delay_SHIFT (0U)
#define DDRC_REGS_DFITMG3_dfi_t_geardown_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG3_dfi_t_geardown_delay_SHIFT)) & DDRC_REGS_DFITMG3_dfi_t_geardown_delay_MASK)
/*! @} */

/*! @name DFISTAT - DFI Status Register */
/*! @{ */
#define DDRC_REGS_DFISTAT_dfi_init_complete_MASK (0x1U)
#define DDRC_REGS_DFISTAT_dfi_init_complete_SHIFT (0U)
#define DDRC_REGS_DFISTAT_dfi_lp_ack_MASK        (0x2U)
#define DDRC_REGS_DFISTAT_dfi_lp_ack_SHIFT       (1U)
/*! @} */

/*! @name DBICTL - DM/DBI Control Register */
/*! @{ */
#define DDRC_REGS_DBICTL_dm_en_MASK              (0x1U)
#define DDRC_REGS_DBICTL_dm_en_SHIFT             (0U)
#define DDRC_REGS_DBICTL_wr_dbi_en_MASK          (0x2U)
#define DDRC_REGS_DBICTL_wr_dbi_en_SHIFT         (1U)
#define DDRC_REGS_DBICTL_rd_dbi_en_MASK          (0x4U)
#define DDRC_REGS_DBICTL_rd_dbi_en_SHIFT         (2U)
/*! @} */

/*! @name ADDRMAP0 - Address Map Register 0 */
/*! @{ */
#define DDRC_REGS_ADDRMAP0_addrmap_cs_bit0_MASK  (0x1FU)
#define DDRC_REGS_ADDRMAP0_addrmap_cs_bit0_SHIFT (0U)
#define DDRC_REGS_ADDRMAP0_addrmap_cs_bit0(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP0_addrmap_cs_bit0_SHIFT)) & DDRC_REGS_ADDRMAP0_addrmap_cs_bit0_MASK)
/*! @} */

/*! @name ADDRMAP1 - Address Map Register 1 */
/*! @{ */
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b0_MASK  (0x1FU)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b0_SHIFT (0U)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b0(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP1_addrmap_bank_b0_SHIFT)) & DDRC_REGS_ADDRMAP1_addrmap_bank_b0_MASK)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b1_MASK  (0x1F00U)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b1_SHIFT (8U)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b1(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP1_addrmap_bank_b1_SHIFT)) & DDRC_REGS_ADDRMAP1_addrmap_bank_b1_MASK)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b2_MASK  (0x1F0000U)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b2_SHIFT (16U)
#define DDRC_REGS_ADDRMAP1_addrmap_bank_b2(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP1_addrmap_bank_b2_SHIFT)) & DDRC_REGS_ADDRMAP1_addrmap_bank_b2_MASK)
/*! @} */

/*! @name ADDRMAP2 - Address Map Register 2 */
/*! @{ */
#define DDRC_REGS_ADDRMAP2_addrmap_col_b2_MASK   (0xFU)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b2_SHIFT  (0U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b2(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP2_addrmap_col_b2_SHIFT)) & DDRC_REGS_ADDRMAP2_addrmap_col_b2_MASK)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b3_MASK   (0xF00U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b3_SHIFT  (8U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b3(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP2_addrmap_col_b3_SHIFT)) & DDRC_REGS_ADDRMAP2_addrmap_col_b3_MASK)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b4_MASK   (0xF0000U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b4_SHIFT  (16U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b4(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP2_addrmap_col_b4_SHIFT)) & DDRC_REGS_ADDRMAP2_addrmap_col_b4_MASK)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b5_MASK   (0xF000000U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b5_SHIFT  (24U)
#define DDRC_REGS_ADDRMAP2_addrmap_col_b5(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP2_addrmap_col_b5_SHIFT)) & DDRC_REGS_ADDRMAP2_addrmap_col_b5_MASK)
/*! @} */

/*! @name ADDRMAP3 - Address Map Register 3 */
/*! @{ */
#define DDRC_REGS_ADDRMAP3_addrmap_col_b6_MASK   (0xFU)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b6_SHIFT  (0U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b6(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP3_addrmap_col_b6_SHIFT)) & DDRC_REGS_ADDRMAP3_addrmap_col_b6_MASK)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b7_MASK   (0xF00U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b7_SHIFT  (8U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b7(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP3_addrmap_col_b7_SHIFT)) & DDRC_REGS_ADDRMAP3_addrmap_col_b7_MASK)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b8_MASK   (0xF0000U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b8_SHIFT  (16U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b8(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP3_addrmap_col_b8_SHIFT)) & DDRC_REGS_ADDRMAP3_addrmap_col_b8_MASK)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b9_MASK   (0xF000000U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b9_SHIFT  (24U)
#define DDRC_REGS_ADDRMAP3_addrmap_col_b9(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP3_addrmap_col_b9_SHIFT)) & DDRC_REGS_ADDRMAP3_addrmap_col_b9_MASK)
/*! @} */

/*! @name ADDRMAP4 - Address Map Register 4 */
/*! @{ */
#define DDRC_REGS_ADDRMAP4_addrmap_col_b10_MASK  (0xFU)
#define DDRC_REGS_ADDRMAP4_addrmap_col_b10_SHIFT (0U)
#define DDRC_REGS_ADDRMAP4_addrmap_col_b10(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP4_addrmap_col_b10_SHIFT)) & DDRC_REGS_ADDRMAP4_addrmap_col_b10_MASK)
#define DDRC_REGS_ADDRMAP4_addrmap_col_b11_MASK  (0xF00U)
#define DDRC_REGS_ADDRMAP4_addrmap_col_b11_SHIFT (8U)
#define DDRC_REGS_ADDRMAP4_addrmap_col_b11(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP4_addrmap_col_b11_SHIFT)) & DDRC_REGS_ADDRMAP4_addrmap_col_b11_MASK)
/*! @} */

/*! @name ADDRMAP5 - Address Map Register 5 */
/*! @{ */
#define DDRC_REGS_ADDRMAP5_addrmap_row_b0_MASK   (0xFU)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b0_SHIFT  (0U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b0(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP5_addrmap_row_b0_SHIFT)) & DDRC_REGS_ADDRMAP5_addrmap_row_b0_MASK)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b1_MASK   (0xF00U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b1_SHIFT  (8U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b1(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP5_addrmap_row_b1_SHIFT)) & DDRC_REGS_ADDRMAP5_addrmap_row_b1_MASK)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b2_10_MASK (0xF0000U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b2_10_SHIFT (16U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b2_10(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP5_addrmap_row_b2_10_SHIFT)) & DDRC_REGS_ADDRMAP5_addrmap_row_b2_10_MASK)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b11_MASK  (0xF000000U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b11_SHIFT (24U)
#define DDRC_REGS_ADDRMAP5_addrmap_row_b11(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP5_addrmap_row_b11_SHIFT)) & DDRC_REGS_ADDRMAP5_addrmap_row_b11_MASK)
/*! @} */

/*! @name ADDRMAP6 - Address Map Register 6 */
/*! @{ */
#define DDRC_REGS_ADDRMAP6_addrmap_row_b12_MASK  (0xFU)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b12_SHIFT (0U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b12(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP6_addrmap_row_b12_SHIFT)) & DDRC_REGS_ADDRMAP6_addrmap_row_b12_MASK)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b13_MASK  (0xF00U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b13_SHIFT (8U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b13(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP6_addrmap_row_b13_SHIFT)) & DDRC_REGS_ADDRMAP6_addrmap_row_b13_MASK)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b14_MASK  (0xF0000U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b14_SHIFT (16U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b14(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP6_addrmap_row_b14_SHIFT)) & DDRC_REGS_ADDRMAP6_addrmap_row_b14_MASK)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b15_MASK  (0xF000000U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b15_SHIFT (24U)
#define DDRC_REGS_ADDRMAP6_addrmap_row_b15(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP6_addrmap_row_b15_SHIFT)) & DDRC_REGS_ADDRMAP6_addrmap_row_b15_MASK)
#define DDRC_REGS_ADDRMAP6_lpddr3_6gb_12gb_MASK  (0x80000000U)
#define DDRC_REGS_ADDRMAP6_lpddr3_6gb_12gb_SHIFT (31U)
/*! @} */

/*! @name ADDRMAP7 - Address Map Register 7 */
/*! @{ */
#define DDRC_REGS_ADDRMAP7_addrmap_row_b16_MASK  (0xFU)
#define DDRC_REGS_ADDRMAP7_addrmap_row_b16_SHIFT (0U)
#define DDRC_REGS_ADDRMAP7_addrmap_row_b16(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP7_addrmap_row_b16_SHIFT)) & DDRC_REGS_ADDRMAP7_addrmap_row_b16_MASK)
#define DDRC_REGS_ADDRMAP7_addrmap_row_b17_MASK  (0xF00U)
#define DDRC_REGS_ADDRMAP7_addrmap_row_b17_SHIFT (8U)
#define DDRC_REGS_ADDRMAP7_addrmap_row_b17(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP7_addrmap_row_b17_SHIFT)) & DDRC_REGS_ADDRMAP7_addrmap_row_b17_MASK)
/*! @} */

/*! @name ADDRMAP8 - Address Map Register 8 */
/*! @{ */
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b0_MASK    (0x1FU)
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b0_SHIFT   (0U)
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b0(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP8_addrmap_bg_b0_SHIFT)) & DDRC_REGS_ADDRMAP8_addrmap_bg_b0_MASK)
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b1_MASK    (0x3F00U)
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b1_SHIFT   (8U)
#define DDRC_REGS_ADDRMAP8_addrmap_bg_b1(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP8_addrmap_bg_b1_SHIFT)) & DDRC_REGS_ADDRMAP8_addrmap_bg_b1_MASK)
/*! @} */

/*! @name ADDRMAP9 - Address Map Register 9 */
/*! @{ */
#define DDRC_REGS_ADDRMAP9_addrmap_row_b2_MASK   (0xFU)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b2_SHIFT  (0U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b2(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP9_addrmap_row_b2_SHIFT)) & DDRC_REGS_ADDRMAP9_addrmap_row_b2_MASK)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b3_MASK   (0xF00U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b3_SHIFT  (8U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b3(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP9_addrmap_row_b3_SHIFT)) & DDRC_REGS_ADDRMAP9_addrmap_row_b3_MASK)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b4_MASK   (0xF0000U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b4_SHIFT  (16U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b4(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP9_addrmap_row_b4_SHIFT)) & DDRC_REGS_ADDRMAP9_addrmap_row_b4_MASK)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b5_MASK   (0xF000000U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b5_SHIFT  (24U)
#define DDRC_REGS_ADDRMAP9_addrmap_row_b5(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP9_addrmap_row_b5_SHIFT)) & DDRC_REGS_ADDRMAP9_addrmap_row_b5_MASK)
/*! @} */

/*! @name ADDRMAP10 - Address Map Register 10 */
/*! @{ */
#define DDRC_REGS_ADDRMAP10_addrmap_row_b6_MASK  (0xFU)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b6_SHIFT (0U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b6(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP10_addrmap_row_b6_SHIFT)) & DDRC_REGS_ADDRMAP10_addrmap_row_b6_MASK)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b7_MASK  (0xF00U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b7_SHIFT (8U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b7(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP10_addrmap_row_b7_SHIFT)) & DDRC_REGS_ADDRMAP10_addrmap_row_b7_MASK)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b8_MASK  (0xF0000U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b8_SHIFT (16U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b8(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP10_addrmap_row_b8_SHIFT)) & DDRC_REGS_ADDRMAP10_addrmap_row_b8_MASK)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b9_MASK  (0xF000000U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b9_SHIFT (24U)
#define DDRC_REGS_ADDRMAP10_addrmap_row_b9(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP10_addrmap_row_b9_SHIFT)) & DDRC_REGS_ADDRMAP10_addrmap_row_b9_MASK)
/*! @} */

/*! @name ADDRMAP11 - Address Map Register 11 */
/*! @{ */
#define DDRC_REGS_ADDRMAP11_addrmap_row_b10_MASK (0xFU)
#define DDRC_REGS_ADDRMAP11_addrmap_row_b10_SHIFT (0U)
#define DDRC_REGS_ADDRMAP11_addrmap_row_b10(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ADDRMAP11_addrmap_row_b10_SHIFT)) & DDRC_REGS_ADDRMAP11_addrmap_row_b10_MASK)
/*! @} */

/*! @name ODTCFG - ODT Configuration Register */
/*! @{ */
#define DDRC_REGS_ODTCFG_rd_odt_delay_MASK       (0x7CU)
#define DDRC_REGS_ODTCFG_rd_odt_delay_SHIFT      (2U)
#define DDRC_REGS_ODTCFG_rd_odt_delay(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_rd_odt_delay_SHIFT)) & DDRC_REGS_ODTCFG_rd_odt_delay_MASK)
#define DDRC_REGS_ODTCFG_rd_odt_hold_MASK        (0xF00U)
#define DDRC_REGS_ODTCFG_rd_odt_hold_SHIFT       (8U)
#define DDRC_REGS_ODTCFG_rd_odt_hold(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_rd_odt_hold_SHIFT)) & DDRC_REGS_ODTCFG_rd_odt_hold_MASK)
#define DDRC_REGS_ODTCFG_wr_odt_delay_MASK       (0x1F0000U)
#define DDRC_REGS_ODTCFG_wr_odt_delay_SHIFT      (16U)
#define DDRC_REGS_ODTCFG_wr_odt_delay(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_wr_odt_delay_SHIFT)) & DDRC_REGS_ODTCFG_wr_odt_delay_MASK)
#define DDRC_REGS_ODTCFG_wr_odt_hold_MASK        (0xF000000U)
#define DDRC_REGS_ODTCFG_wr_odt_hold_SHIFT       (24U)
#define DDRC_REGS_ODTCFG_wr_odt_hold(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_wr_odt_hold_SHIFT)) & DDRC_REGS_ODTCFG_wr_odt_hold_MASK)
/*! @} */

/*! @name ODTMAP - ODT/Rank Map Register */
/*! @{ */
#define DDRC_REGS_ODTMAP_rank0_wr_odt_MASK       (0x3U)
#define DDRC_REGS_ODTMAP_rank0_wr_odt_SHIFT      (0U)
#define DDRC_REGS_ODTMAP_rank0_wr_odt(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTMAP_rank0_wr_odt_SHIFT)) & DDRC_REGS_ODTMAP_rank0_wr_odt_MASK)
#define DDRC_REGS_ODTMAP_rank0_rd_odt_MASK       (0x30U)
#define DDRC_REGS_ODTMAP_rank0_rd_odt_SHIFT      (4U)
#define DDRC_REGS_ODTMAP_rank0_rd_odt(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTMAP_rank0_rd_odt_SHIFT)) & DDRC_REGS_ODTMAP_rank0_rd_odt_MASK)
#define DDRC_REGS_ODTMAP_rank1_wr_odt_MASK       (0x300U)
#define DDRC_REGS_ODTMAP_rank1_wr_odt_SHIFT      (8U)
#define DDRC_REGS_ODTMAP_rank1_wr_odt(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTMAP_rank1_wr_odt_SHIFT)) & DDRC_REGS_ODTMAP_rank1_wr_odt_MASK)
#define DDRC_REGS_ODTMAP_rank1_rd_odt_MASK       (0x3000U)
#define DDRC_REGS_ODTMAP_rank1_rd_odt_SHIFT      (12U)
#define DDRC_REGS_ODTMAP_rank1_rd_odt(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTMAP_rank1_rd_odt_SHIFT)) & DDRC_REGS_ODTMAP_rank1_rd_odt_MASK)
/*! @} */

/*! @name SCHED - Scheduler Control Register */
/*! @{ */
#define DDRC_REGS_SCHED_force_low_pri_n_MASK     (0x1U)
#define DDRC_REGS_SCHED_force_low_pri_n_SHIFT    (0U)
#define DDRC_REGS_SCHED_prefer_write_MASK        (0x2U)
#define DDRC_REGS_SCHED_prefer_write_SHIFT       (1U)
#define DDRC_REGS_SCHED_pageclose_MASK           (0x4U)
#define DDRC_REGS_SCHED_pageclose_SHIFT          (2U)
#define DDRC_REGS_SCHED_lpr_num_entries_MASK     (0x1F00U)
#define DDRC_REGS_SCHED_lpr_num_entries_SHIFT    (8U)
#define DDRC_REGS_SCHED_lpr_num_entries(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_SCHED_lpr_num_entries_SHIFT)) & DDRC_REGS_SCHED_lpr_num_entries_MASK)
#define DDRC_REGS_SCHED_go2critical_hysteresis_MASK (0xFF0000U)
#define DDRC_REGS_SCHED_go2critical_hysteresis_SHIFT (16U)
#define DDRC_REGS_SCHED_go2critical_hysteresis(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_SCHED_go2critical_hysteresis_SHIFT)) & DDRC_REGS_SCHED_go2critical_hysteresis_MASK)
#define DDRC_REGS_SCHED_rdwr_idle_gap_MASK       (0x7F000000U)
#define DDRC_REGS_SCHED_rdwr_idle_gap_SHIFT      (24U)
#define DDRC_REGS_SCHED_rdwr_idle_gap(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_SCHED_rdwr_idle_gap_SHIFT)) & DDRC_REGS_SCHED_rdwr_idle_gap_MASK)
/*! @} */

/*! @name SCHED1 - Scheduler Control Register 1 */
/*! @{ */
#define DDRC_REGS_SCHED1_pageclose_timer_MASK    (0xFFU)
#define DDRC_REGS_SCHED1_pageclose_timer_SHIFT   (0U)
#define DDRC_REGS_SCHED1_pageclose_timer(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_SCHED1_pageclose_timer_SHIFT)) & DDRC_REGS_SCHED1_pageclose_timer_MASK)
/*! @} */

/*! @name PERFHPR1 - High Priority Read CAM Register 1 */
/*! @{ */
#define DDRC_REGS_PERFHPR1_hpr_max_starve_MASK   (0xFFFFU)
#define DDRC_REGS_PERFHPR1_hpr_max_starve_SHIFT  (0U)
#define DDRC_REGS_PERFHPR1_hpr_max_starve(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFHPR1_hpr_max_starve_SHIFT)) & DDRC_REGS_PERFHPR1_hpr_max_starve_MASK)
#define DDRC_REGS_PERFHPR1_hpr_xact_run_length_MASK (0xFF000000U)
#define DDRC_REGS_PERFHPR1_hpr_xact_run_length_SHIFT (24U)
#define DDRC_REGS_PERFHPR1_hpr_xact_run_length(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFHPR1_hpr_xact_run_length_SHIFT)) & DDRC_REGS_PERFHPR1_hpr_xact_run_length_MASK)
/*! @} */

/*! @name PERFLPR1 - Low Priority Read CAM Register 1 */
/*! @{ */
#define DDRC_REGS_PERFLPR1_lpr_max_starve_MASK   (0xFFFFU)
#define DDRC_REGS_PERFLPR1_lpr_max_starve_SHIFT  (0U)
#define DDRC_REGS_PERFLPR1_lpr_max_starve(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFLPR1_lpr_max_starve_SHIFT)) & DDRC_REGS_PERFLPR1_lpr_max_starve_MASK)
#define DDRC_REGS_PERFLPR1_lpr_xact_run_length_MASK (0xFF000000U)
#define DDRC_REGS_PERFLPR1_lpr_xact_run_length_SHIFT (24U)
#define DDRC_REGS_PERFLPR1_lpr_xact_run_length(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFLPR1_lpr_xact_run_length_SHIFT)) & DDRC_REGS_PERFLPR1_lpr_xact_run_length_MASK)
/*! @} */

/*! @name PERFWR1 - Write CAM Register 1 */
/*! @{ */
#define DDRC_REGS_PERFWR1_w_max_starve_MASK      (0xFFFFU)
#define DDRC_REGS_PERFWR1_w_max_starve_SHIFT     (0U)
#define DDRC_REGS_PERFWR1_w_max_starve(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFWR1_w_max_starve_SHIFT)) & DDRC_REGS_PERFWR1_w_max_starve_MASK)
#define DDRC_REGS_PERFWR1_w_xact_run_length_MASK (0xFF000000U)
#define DDRC_REGS_PERFWR1_w_xact_run_length_SHIFT (24U)
#define DDRC_REGS_PERFWR1_w_xact_run_length(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PERFWR1_w_xact_run_length_SHIFT)) & DDRC_REGS_PERFWR1_w_xact_run_length_MASK)
/*! @} */

/*! @name DBG0 - Debug Register 0 */
/*! @{ */
#define DDRC_REGS_DBG0_dis_wc_MASK               (0x1U)
#define DDRC_REGS_DBG0_dis_wc_SHIFT              (0U)
#define DDRC_REGS_DBG0_dis_rd_bypass_MASK        (0x2U)
#define DDRC_REGS_DBG0_dis_rd_bypass_SHIFT       (1U)
#define DDRC_REGS_DBG0_dis_act_bypass_MASK       (0x4U)
#define DDRC_REGS_DBG0_dis_act_bypass_SHIFT      (2U)
#define DDRC_REGS_DBG0_dis_collision_page_opt_MASK (0x10U)
#define DDRC_REGS_DBG0_dis_collision_page_opt_SHIFT (4U)
/*! @} */

/*! @name DBG1 - Debug Register 1 */
/*! @{ */
#define DDRC_REGS_DBG1_dis_dq_MASK               (0x1U)
#define DDRC_REGS_DBG1_dis_dq_SHIFT              (0U)
#define DDRC_REGS_DBG1_dis_hif_MASK              (0x2U)
#define DDRC_REGS_DBG1_dis_hif_SHIFT             (1U)
/*! @} */

/*! @name DBGCAM - CAM Debug Register */
/*! @{ */
#define DDRC_REGS_DBGCAM_dbg_hpr_q_depth_MASK    (0x3FU)
#define DDRC_REGS_DBGCAM_dbg_hpr_q_depth_SHIFT   (0U)
#define DDRC_REGS_DBGCAM_dbg_hpr_q_depth(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DBGCAM_dbg_hpr_q_depth_SHIFT)) & DDRC_REGS_DBGCAM_dbg_hpr_q_depth_MASK)
#define DDRC_REGS_DBGCAM_dbg_lpr_q_depth_MASK    (0x3F00U)
#define DDRC_REGS_DBGCAM_dbg_lpr_q_depth_SHIFT   (8U)
#define DDRC_REGS_DBGCAM_dbg_lpr_q_depth(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DBGCAM_dbg_lpr_q_depth_SHIFT)) & DDRC_REGS_DBGCAM_dbg_lpr_q_depth_MASK)
#define DDRC_REGS_DBGCAM_dbg_w_q_depth_MASK      (0x3F0000U)
#define DDRC_REGS_DBGCAM_dbg_w_q_depth_SHIFT     (16U)
#define DDRC_REGS_DBGCAM_dbg_w_q_depth(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DBGCAM_dbg_w_q_depth_SHIFT)) & DDRC_REGS_DBGCAM_dbg_w_q_depth_MASK)
#define DDRC_REGS_DBGCAM_dbg_stall_MASK          (0x1000000U)
#define DDRC_REGS_DBGCAM_dbg_stall_SHIFT         (24U)
#define DDRC_REGS_DBGCAM_dbg_rd_q_empty_MASK     (0x2000000U)
#define DDRC_REGS_DBGCAM_dbg_rd_q_empty_SHIFT    (25U)
#define DDRC_REGS_DBGCAM_dbg_wr_q_empty_MASK     (0x4000000U)
#define DDRC_REGS_DBGCAM_dbg_wr_q_empty_SHIFT    (26U)
#define DDRC_REGS_DBGCAM_rd_data_pipeline_empty_MASK (0x10000000U)
#define DDRC_REGS_DBGCAM_rd_data_pipeline_empty_SHIFT (28U)
#define DDRC_REGS_DBGCAM_wr_data_pipeline_empty_MASK (0x20000000U)
#define DDRC_REGS_DBGCAM_wr_data_pipeline_empty_SHIFT (29U)
#define DDRC_REGS_DBGCAM_dbg_stall_wr_MASK       (0x40000000U)
#define DDRC_REGS_DBGCAM_dbg_stall_wr_SHIFT      (30U)
#define DDRC_REGS_DBGCAM_dbg_stall_rd_MASK       (0x80000000U)
#define DDRC_REGS_DBGCAM_dbg_stall_rd_SHIFT      (31U)
/*! @} */

/*! @name DBGCMD - Command Debug Register */
/*! @{ */
#define DDRC_REGS_DBGCMD_rank0_refresh_MASK      (0x1U)
#define DDRC_REGS_DBGCMD_rank0_refresh_SHIFT     (0U)
#define DDRC_REGS_DBGCMD_rank1_refresh_MASK      (0x2U)
#define DDRC_REGS_DBGCMD_rank1_refresh_SHIFT     (1U)
#define DDRC_REGS_DBGCMD_zq_calib_short_MASK     (0x10U)
#define DDRC_REGS_DBGCMD_zq_calib_short_SHIFT    (4U)
#define DDRC_REGS_DBGCMD_ctrlupd_MASK            (0x20U)
#define DDRC_REGS_DBGCMD_ctrlupd_SHIFT           (5U)
/*! @} */

/*! @name DBGSTAT - Status Debug Register */
/*! @{ */
#define DDRC_REGS_DBGSTAT_rank0_refresh_busy_MASK (0x1U)
#define DDRC_REGS_DBGSTAT_rank0_refresh_busy_SHIFT (0U)
#define DDRC_REGS_DBGSTAT_rank1_refresh_busy_MASK (0x2U)
#define DDRC_REGS_DBGSTAT_rank1_refresh_busy_SHIFT (1U)
#define DDRC_REGS_DBGSTAT_zq_calib_short_busy_MASK (0x10U)
#define DDRC_REGS_DBGSTAT_zq_calib_short_busy_SHIFT (4U)
#define DDRC_REGS_DBGSTAT_ctrlupd_busy_MASK      (0x20U)
#define DDRC_REGS_DBGSTAT_ctrlupd_busy_SHIFT     (5U)
/*! @} */

/*! @name SWCTL - Software Register Programming Control Enable */
/*! @{ */
#define DDRC_REGS_SWCTL_sw_done_MASK             (0x1U)
#define DDRC_REGS_SWCTL_sw_done_SHIFT            (0U)
/*! @} */

/*! @name SWSTAT - Software Register Programming Control Status */
/*! @{ */
#define DDRC_REGS_SWSTAT_sw_done_ack_MASK        (0x1U)
#define DDRC_REGS_SWSTAT_sw_done_ack_SHIFT       (0U)
/*! @} */

/*! @name POISONCFG - AXI Poison Configuration Register. */
/*! @{ */
#define DDRC_REGS_POISONCFG_wr_poison_slverr_en_MASK (0x1U)
#define DDRC_REGS_POISONCFG_wr_poison_slverr_en_SHIFT (0U)
#define DDRC_REGS_POISONCFG_wr_poison_intr_en_MASK (0x10U)
#define DDRC_REGS_POISONCFG_wr_poison_intr_en_SHIFT (4U)
#define DDRC_REGS_POISONCFG_wr_poison_intr_clr_MASK (0x100U)
#define DDRC_REGS_POISONCFG_wr_poison_intr_clr_SHIFT (8U)
#define DDRC_REGS_POISONCFG_rd_poison_slverr_en_MASK (0x10000U)
#define DDRC_REGS_POISONCFG_rd_poison_slverr_en_SHIFT (16U)
#define DDRC_REGS_POISONCFG_rd_poison_intr_en_MASK (0x100000U)
#define DDRC_REGS_POISONCFG_rd_poison_intr_en_SHIFT (20U)
#define DDRC_REGS_POISONCFG_rd_poison_intr_clr_MASK (0x1000000U)
#define DDRC_REGS_POISONCFG_rd_poison_intr_clr_SHIFT (24U)
/*! @} */

/*! @name POISONSTAT - AXI Poison Status Register */
/*! @{ */
#define DDRC_REGS_POISONSTAT_wr_poison_intr_0_MASK (0x1U)
#define DDRC_REGS_POISONSTAT_wr_poison_intr_0_SHIFT (0U)
#define DDRC_REGS_POISONSTAT_rd_poison_intr_0_MASK (0x10000U)
#define DDRC_REGS_POISONSTAT_rd_poison_intr_0_SHIFT (16U)
/*! @} */

/*! @name PSTAT - Port Status Register */
/*! @{ */
#define DDRC_REGS_PSTAT_rd_port_busy_0_MASK      (0x1U)
#define DDRC_REGS_PSTAT_rd_port_busy_0_SHIFT     (0U)
#define DDRC_REGS_PSTAT_wr_port_busy_0_MASK      (0x10000U)
#define DDRC_REGS_PSTAT_wr_port_busy_0_SHIFT     (16U)
/*! @} */

/*! @name PCCFG - Port Common Configuration Register */
/*! @{ */
#define DDRC_REGS_PCCFG_go2critical_en_MASK      (0x1U)
#define DDRC_REGS_PCCFG_go2critical_en_SHIFT     (0U)
#define DDRC_REGS_PCCFG_pagematch_limit_MASK     (0x10U)
#define DDRC_REGS_PCCFG_pagematch_limit_SHIFT    (4U)
#define DDRC_REGS_PCCFG_bl_exp_mode_MASK         (0x100U)
#define DDRC_REGS_PCCFG_bl_exp_mode_SHIFT        (8U)
/*! @} */

/*! @name PCFGR_0 - Port n Configuration Read Register */
/*! @{ */
#define DDRC_REGS_PCFGR_0_rd_port_priority_MASK  (0x3FFU)
#define DDRC_REGS_PCFGR_0_rd_port_priority_SHIFT (0U)
#define DDRC_REGS_PCFGR_0_rd_port_priority(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGR_0_rd_port_priority_SHIFT)) & DDRC_REGS_PCFGR_0_rd_port_priority_MASK)
#define DDRC_REGS_PCFGR_0_rd_port_aging_en_MASK  (0x1000U)
#define DDRC_REGS_PCFGR_0_rd_port_aging_en_SHIFT (12U)
#define DDRC_REGS_PCFGR_0_rd_port_urgent_en_MASK (0x2000U)
#define DDRC_REGS_PCFGR_0_rd_port_urgent_en_SHIFT (13U)
#define DDRC_REGS_PCFGR_0_rd_port_pagematch_en_MASK (0x4000U)
#define DDRC_REGS_PCFGR_0_rd_port_pagematch_en_SHIFT (14U)
#define DDRC_REGS_PCFGR_0_rdwr_ordered_en_MASK   (0x10000U)
#define DDRC_REGS_PCFGR_0_rdwr_ordered_en_SHIFT  (16U)
/*! @} */

/*! @name PCFGW_0 - Port n Configuration Write Register */
/*! @{ */
#define DDRC_REGS_PCFGW_0_wr_port_priority_MASK  (0x3FFU)
#define DDRC_REGS_PCFGW_0_wr_port_priority_SHIFT (0U)
#define DDRC_REGS_PCFGW_0_wr_port_priority(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGW_0_wr_port_priority_SHIFT)) & DDRC_REGS_PCFGW_0_wr_port_priority_MASK)
#define DDRC_REGS_PCFGW_0_wr_port_aging_en_MASK  (0x1000U)
#define DDRC_REGS_PCFGW_0_wr_port_aging_en_SHIFT (12U)
#define DDRC_REGS_PCFGW_0_wr_port_urgent_en_MASK (0x2000U)
#define DDRC_REGS_PCFGW_0_wr_port_urgent_en_SHIFT (13U)
#define DDRC_REGS_PCFGW_0_wr_port_pagematch_en_MASK (0x4000U)
#define DDRC_REGS_PCFGW_0_wr_port_pagematch_en_SHIFT (14U)
/*! @} */

/*! @name PCTRL_0 - Port n Control Register */
/*! @{ */
#define DDRC_REGS_PCTRL_0_port_en_MASK           (0x1U)
#define DDRC_REGS_PCTRL_0_port_en_SHIFT          (0U)
/*! @} */

/*! @name PCFGQOS0_0 - Port n Read QoS Configuration Register 0 */
/*! @{ */
#define DDRC_REGS_PCFGQOS0_0_rqos_map_level1_MASK (0xFU)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_level1_SHIFT (0U)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_level1(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGQOS0_0_rqos_map_level1_SHIFT)) & DDRC_REGS_PCFGQOS0_0_rqos_map_level1_MASK)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region0_MASK (0x30000U)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region0_SHIFT (16U)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region0(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGQOS0_0_rqos_map_region0_SHIFT)) & DDRC_REGS_PCFGQOS0_0_rqos_map_region0_MASK)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region1_MASK (0x300000U)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region1_SHIFT (20U)
#define DDRC_REGS_PCFGQOS0_0_rqos_map_region1(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGQOS0_0_rqos_map_region1_SHIFT)) & DDRC_REGS_PCFGQOS0_0_rqos_map_region1_MASK)
/*! @} */

/*! @name PCFGQOS1_0 - Port n Read QoS Configuration Register 1 */
/*! @{ */
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutb_MASK (0x7FFU)
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutb_SHIFT (0U)
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutb(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutb_SHIFT)) & DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutb_MASK)
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutr_MASK (0x7FF0000U)
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutr_SHIFT (16U)
#define DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutr(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutr_SHIFT)) & DDRC_REGS_PCFGQOS1_0_rqos_map_timeoutr_MASK)
/*! @} */

/*! @name PCFGWQOS0_0 - Port n Write QoS Configuration Register 0 */
/*! @{ */
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_level_MASK (0xFU)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_level_SHIFT (0U)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_level(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGWQOS0_0_wqos_map_level_SHIFT)) & DDRC_REGS_PCFGWQOS0_0_wqos_map_level_MASK)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region0_MASK (0x30000U)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region0_SHIFT (16U)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region0(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGWQOS0_0_wqos_map_region0_SHIFT)) & DDRC_REGS_PCFGWQOS0_0_wqos_map_region0_MASK)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region1_MASK (0x300000U)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region1_SHIFT (20U)
#define DDRC_REGS_PCFGWQOS0_0_wqos_map_region1(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGWQOS0_0_wqos_map_region1_SHIFT)) & DDRC_REGS_PCFGWQOS0_0_wqos_map_region1_MASK)
/*! @} */

/*! @name PCFGWQOS1_0 - Port n Write QoS Configuration Register 1 */
/*! @{ */
#define DDRC_REGS_PCFGWQOS1_0_wqos_map_timeout_MASK (0x7FFU)
#define DDRC_REGS_PCFGWQOS1_0_wqos_map_timeout_SHIFT (0U)
#define DDRC_REGS_PCFGWQOS1_0_wqos_map_timeout(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_PCFGWQOS1_0_wqos_map_timeout_SHIFT)) & DDRC_REGS_PCFGWQOS1_0_wqos_map_timeout_MASK)
/*! @} */

/*! @name DERATEEN_SHADOW - [SHADOW] Temperature Derate Enable Register */
/*! @{ */
#define DDRC_REGS_DERATEEN_SHADOW_derate_enable_MASK (0x1U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_enable_SHIFT (0U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_value_MASK (0x2U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_value_SHIFT (1U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_byte_MASK (0xF0U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_byte_SHIFT (4U)
#define DDRC_REGS_DERATEEN_SHADOW_derate_byte(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEEN_SHADOW_derate_byte_SHIFT)) & DDRC_REGS_DERATEEN_SHADOW_derate_byte_MASK)
#define DDRC_REGS_DERATEEN_SHADOW_rc_derate_value_MASK (0x300U)
#define DDRC_REGS_DERATEEN_SHADOW_rc_derate_value_SHIFT (8U)
#define DDRC_REGS_DERATEEN_SHADOW_rc_derate_value(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEEN_SHADOW_rc_derate_value_SHIFT)) & DDRC_REGS_DERATEEN_SHADOW_rc_derate_value_MASK)
/*! @} */

/*! @name DERATEINT_SHADOW - [SHADOW] Temperature Derate Interval Register */
/*! @{ */
#define DDRC_REGS_DERATEINT_SHADOW_mr4_read_interval_MASK (0xFFFFFFFFU)
#define DDRC_REGS_DERATEINT_SHADOW_mr4_read_interval_SHIFT (0U)
#define DDRC_REGS_DERATEINT_SHADOW_mr4_read_interval(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DERATEINT_SHADOW_mr4_read_interval_SHIFT)) & DDRC_REGS_DERATEINT_SHADOW_mr4_read_interval_MASK)
/*! @} */

/*! @name RFSHCTL0_SHADOW - [SHADOW] Refresh Control Register 0 */
/*! @{ */
#define DDRC_REGS_RFSHCTL0_SHADOW_per_bank_refresh_MASK (0x4U)
#define DDRC_REGS_RFSHCTL0_SHADOW_per_bank_refresh_SHIFT (2U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_burst_MASK (0x1F0U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_burst_SHIFT (4U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_burst(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_SHADOW_refresh_burst_SHIFT)) & DDRC_REGS_RFSHCTL0_SHADOW_refresh_burst_MASK)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_to_x32_MASK (0x1F000U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_to_x32_SHIFT (12U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_to_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_SHADOW_refresh_to_x32_SHIFT)) & DDRC_REGS_RFSHCTL0_SHADOW_refresh_to_x32_MASK)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_margin_MASK (0xF00000U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_margin_SHIFT (20U)
#define DDRC_REGS_RFSHCTL0_SHADOW_refresh_margin(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHCTL0_SHADOW_refresh_margin_SHIFT)) & DDRC_REGS_RFSHCTL0_SHADOW_refresh_margin_MASK)
/*! @} */

/*! @name RFSHTMG_SHADOW - [SHADOW] Refresh Timing Register */
/*! @{ */
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_min_MASK  (0x3FFU)
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_min_SHIFT (0U)
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_min(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHTMG_SHADOW_t_rfc_min_SHIFT)) & DDRC_REGS_RFSHTMG_SHADOW_t_rfc_min_MASK)
#define DDRC_REGS_RFSHTMG_SHADOW_lpddr3_trefbw_en_MASK (0x8000U)
#define DDRC_REGS_RFSHTMG_SHADOW_lpddr3_trefbw_en_SHIFT (15U)
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_nom_x32_MASK (0xFFF0000U)
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_nom_x32_SHIFT (16U)
#define DDRC_REGS_RFSHTMG_SHADOW_t_rfc_nom_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_RFSHTMG_SHADOW_t_rfc_nom_x32_SHIFT)) & DDRC_REGS_RFSHTMG_SHADOW_t_rfc_nom_x32_MASK)
/*! @} */

/*! @name INIT3_SHADOW - [SHADOW] SDRAM Initialization Register 3 */
/*! @{ */
#define DDRC_REGS_INIT3_SHADOW_emr_MASK          (0xFFFFU)
#define DDRC_REGS_INIT3_SHADOW_emr_SHIFT         (0U)
#define DDRC_REGS_INIT3_SHADOW_emr(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT3_SHADOW_emr_SHIFT)) & DDRC_REGS_INIT3_SHADOW_emr_MASK)
#define DDRC_REGS_INIT3_SHADOW_mr_MASK           (0xFFFF0000U)
#define DDRC_REGS_INIT3_SHADOW_mr_SHIFT          (16U)
#define DDRC_REGS_INIT3_SHADOW_mr(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT3_SHADOW_mr_SHIFT)) & DDRC_REGS_INIT3_SHADOW_mr_MASK)
/*! @} */

/*! @name INIT4_SHADOW - [SHADOW] SDRAM Initialization Register 4 */
/*! @{ */
#define DDRC_REGS_INIT4_SHADOW_emr3_MASK         (0xFFFFU)
#define DDRC_REGS_INIT4_SHADOW_emr3_SHIFT        (0U)
#define DDRC_REGS_INIT4_SHADOW_emr3(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT4_SHADOW_emr3_SHIFT)) & DDRC_REGS_INIT4_SHADOW_emr3_MASK)
#define DDRC_REGS_INIT4_SHADOW_emr2_MASK         (0xFFFF0000U)
#define DDRC_REGS_INIT4_SHADOW_emr2_SHIFT        (16U)
#define DDRC_REGS_INIT4_SHADOW_emr2(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT4_SHADOW_emr2_SHIFT)) & DDRC_REGS_INIT4_SHADOW_emr2_MASK)
/*! @} */

/*! @name INIT6_SHADOW - [SHADOW] SDRAM Initialization Register 6 */
/*! @{ */
#define DDRC_REGS_INIT6_SHADOW_mr5_MASK          (0xFFFFU)
#define DDRC_REGS_INIT6_SHADOW_mr5_SHIFT         (0U)
#define DDRC_REGS_INIT6_SHADOW_mr5(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT6_SHADOW_mr5_SHIFT)) & DDRC_REGS_INIT6_SHADOW_mr5_MASK)
#define DDRC_REGS_INIT6_SHADOW_mr4_MASK          (0xFFFF0000U)
#define DDRC_REGS_INIT6_SHADOW_mr4_SHIFT         (16U)
#define DDRC_REGS_INIT6_SHADOW_mr4(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT6_SHADOW_mr4_SHIFT)) & DDRC_REGS_INIT6_SHADOW_mr4_MASK)
/*! @} */

/*! @name INIT7_SHADOW - [SHADOW] SDRAM Initialization Register 7 */
/*! @{ */
#define DDRC_REGS_INIT7_SHADOW_mr6_MASK          (0xFFFF0000U)
#define DDRC_REGS_INIT7_SHADOW_mr6_SHIFT         (16U)
#define DDRC_REGS_INIT7_SHADOW_mr6(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_INIT7_SHADOW_mr6_SHIFT)) & DDRC_REGS_INIT7_SHADOW_mr6_MASK)
/*! @} */

/*! @name DRAMTMG0_SHADOW - [SHADOW] SDRAM Timing Register 0 */
/*! @{ */
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_min_MASK (0x3FU)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_min_SHIFT (0U)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_min(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_SHADOW_t_ras_min_SHIFT)) & DDRC_REGS_DRAMTMG0_SHADOW_t_ras_min_MASK)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_max_MASK (0x7F00U)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_max_SHIFT (8U)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_ras_max(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_SHADOW_t_ras_max_SHIFT)) & DDRC_REGS_DRAMTMG0_SHADOW_t_ras_max_MASK)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_faw_MASK     (0x3F0000U)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_faw_SHIFT    (16U)
#define DDRC_REGS_DRAMTMG0_SHADOW_t_faw(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_SHADOW_t_faw_SHIFT)) & DDRC_REGS_DRAMTMG0_SHADOW_t_faw_MASK)
#define DDRC_REGS_DRAMTMG0_SHADOW_wr2pre_MASK    (0x7F000000U)
#define DDRC_REGS_DRAMTMG0_SHADOW_wr2pre_SHIFT   (24U)
#define DDRC_REGS_DRAMTMG0_SHADOW_wr2pre(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG0_SHADOW_wr2pre_SHIFT)) & DDRC_REGS_DRAMTMG0_SHADOW_wr2pre_MASK)
/*! @} */

/*! @name DRAMTMG1_SHADOW - [SHADOW] SDRAM Timing Register 1 */
/*! @{ */
#define DDRC_REGS_DRAMTMG1_SHADOW_t_rc_MASK      (0x7FU)
#define DDRC_REGS_DRAMTMG1_SHADOW_t_rc_SHIFT     (0U)
#define DDRC_REGS_DRAMTMG1_SHADOW_t_rc(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_SHADOW_t_rc_SHIFT)) & DDRC_REGS_DRAMTMG1_SHADOW_t_rc_MASK)
#define DDRC_REGS_DRAMTMG1_SHADOW_rd2pre_MASK    (0x3F00U)
#define DDRC_REGS_DRAMTMG1_SHADOW_rd2pre_SHIFT   (8U)
#define DDRC_REGS_DRAMTMG1_SHADOW_rd2pre(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_SHADOW_rd2pre_SHIFT)) & DDRC_REGS_DRAMTMG1_SHADOW_rd2pre_MASK)
#define DDRC_REGS_DRAMTMG1_SHADOW_t_xp_MASK      (0x1F0000U)
#define DDRC_REGS_DRAMTMG1_SHADOW_t_xp_SHIFT     (16U)
#define DDRC_REGS_DRAMTMG1_SHADOW_t_xp(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG1_SHADOW_t_xp_SHIFT)) & DDRC_REGS_DRAMTMG1_SHADOW_t_xp_MASK)
/*! @} */

/*! @name DRAMTMG2_SHADOW - [SHADOW] SDRAM Timing Register 2 */
/*! @{ */
#define DDRC_REGS_DRAMTMG2_SHADOW_wr2rd_MASK     (0x3FU)
#define DDRC_REGS_DRAMTMG2_SHADOW_wr2rd_SHIFT    (0U)
#define DDRC_REGS_DRAMTMG2_SHADOW_wr2rd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_SHADOW_wr2rd_SHIFT)) & DDRC_REGS_DRAMTMG2_SHADOW_wr2rd_MASK)
#define DDRC_REGS_DRAMTMG2_SHADOW_rd2wr_MASK     (0x3F00U)
#define DDRC_REGS_DRAMTMG2_SHADOW_rd2wr_SHIFT    (8U)
#define DDRC_REGS_DRAMTMG2_SHADOW_rd2wr(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_SHADOW_rd2wr_SHIFT)) & DDRC_REGS_DRAMTMG2_SHADOW_rd2wr_MASK)
#define DDRC_REGS_DRAMTMG2_SHADOW_read_latency_MASK (0x3F0000U)
#define DDRC_REGS_DRAMTMG2_SHADOW_read_latency_SHIFT (16U)
#define DDRC_REGS_DRAMTMG2_SHADOW_read_latency(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_SHADOW_read_latency_SHIFT)) & DDRC_REGS_DRAMTMG2_SHADOW_read_latency_MASK)
#define DDRC_REGS_DRAMTMG2_SHADOW_write_latency_MASK (0x3F000000U)
#define DDRC_REGS_DRAMTMG2_SHADOW_write_latency_SHIFT (24U)
#define DDRC_REGS_DRAMTMG2_SHADOW_write_latency(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG2_SHADOW_write_latency_SHIFT)) & DDRC_REGS_DRAMTMG2_SHADOW_write_latency_MASK)
/*! @} */

/*! @name DRAMTMG3_SHADOW - [SHADOW] SDRAM Timing Register 3 */
/*! @{ */
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mod_MASK     (0x3FFU)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mod_SHIFT    (0U)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mod(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_SHADOW_t_mod_SHIFT)) & DDRC_REGS_DRAMTMG3_SHADOW_t_mod_MASK)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrd_MASK     (0x3F000U)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrd_SHIFT    (12U)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_SHADOW_t_mrd_SHIFT)) & DDRC_REGS_DRAMTMG3_SHADOW_t_mrd_MASK)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrw_MASK     (0x3FF00000U)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrw_SHIFT    (20U)
#define DDRC_REGS_DRAMTMG3_SHADOW_t_mrw(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG3_SHADOW_t_mrw_SHIFT)) & DDRC_REGS_DRAMTMG3_SHADOW_t_mrw_MASK)
/*! @} */

/*! @name DRAMTMG4_SHADOW - [SHADOW] SDRAM Timing Register 4 */
/*! @{ */
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rp_MASK      (0x1FU)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rp_SHIFT     (0U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rp(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_SHADOW_t_rp_SHIFT)) & DDRC_REGS_DRAMTMG4_SHADOW_t_rp_MASK)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rrd_MASK     (0xF00U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rrd_SHIFT    (8U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rrd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_SHADOW_t_rrd_SHIFT)) & DDRC_REGS_DRAMTMG4_SHADOW_t_rrd_MASK)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_ccd_MASK     (0xF0000U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_ccd_SHIFT    (16U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_ccd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_SHADOW_t_ccd_SHIFT)) & DDRC_REGS_DRAMTMG4_SHADOW_t_ccd_MASK)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rcd_MASK     (0x1F000000U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rcd_SHIFT    (24U)
#define DDRC_REGS_DRAMTMG4_SHADOW_t_rcd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG4_SHADOW_t_rcd_SHIFT)) & DDRC_REGS_DRAMTMG4_SHADOW_t_rcd_MASK)
/*! @} */

/*! @name DRAMTMG5_SHADOW - [SHADOW] SDRAM Timing Register 5 */
/*! @{ */
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cke_MASK     (0x1FU)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cke_SHIFT    (0U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cke(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_SHADOW_t_cke_SHIFT)) & DDRC_REGS_DRAMTMG5_SHADOW_t_cke_MASK)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_ckesr_MASK   (0x3F00U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_ckesr_SHIFT  (8U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_ckesr(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_SHADOW_t_ckesr_SHIFT)) & DDRC_REGS_DRAMTMG5_SHADOW_t_ckesr_MASK)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksre_MASK   (0xF0000U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksre_SHIFT  (16U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksre(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_SHADOW_t_cksre_SHIFT)) & DDRC_REGS_DRAMTMG5_SHADOW_t_cksre_MASK)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksrx_MASK   (0xF000000U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksrx_SHIFT  (24U)
#define DDRC_REGS_DRAMTMG5_SHADOW_t_cksrx(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG5_SHADOW_t_cksrx_SHIFT)) & DDRC_REGS_DRAMTMG5_SHADOW_t_cksrx_MASK)
/*! @} */

/*! @name DRAMTMG6_SHADOW - [SHADOW] SDRAM Timing Register 6 */
/*! @{ */
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckcsx_MASK   (0xFU)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckcsx_SHIFT  (0U)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckcsx(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_SHADOW_t_ckcsx_SHIFT)) & DDRC_REGS_DRAMTMG6_SHADOW_t_ckcsx_MASK)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpdx_MASK  (0xF0000U)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpdx_SHIFT (16U)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpdx(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpdx_SHIFT)) & DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpdx_MASK)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpde_MASK  (0xF000000U)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpde_SHIFT (24U)
#define DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpde(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpde_SHIFT)) & DDRC_REGS_DRAMTMG6_SHADOW_t_ckdpde_MASK)
/*! @} */

/*! @name DRAMTMG7_SHADOW - [SHADOW] SDRAM Timing Register 7 */
/*! @{ */
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpdx_MASK   (0xFU)
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpdx_SHIFT  (0U)
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpdx(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG7_SHADOW_t_ckpdx_SHIFT)) & DDRC_REGS_DRAMTMG7_SHADOW_t_ckpdx_MASK)
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpde_MASK   (0xF00U)
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpde_SHIFT  (8U)
#define DDRC_REGS_DRAMTMG7_SHADOW_t_ckpde(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG7_SHADOW_t_ckpde_SHIFT)) & DDRC_REGS_DRAMTMG7_SHADOW_t_ckpde_MASK)
/*! @} */

/*! @name DRAMTMG8_SHADOW - [SHADOW] SDRAM Timing Register 8 */
/*! @{ */
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_x32_MASK  (0x7FU)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_x32_SHIFT (0U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_x32(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_SHADOW_t_xs_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_SHADOW_t_xs_x32_MASK)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_dll_x32_MASK (0x7F00U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_dll_x32_SHIFT (8U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_dll_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_SHADOW_t_xs_dll_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_SHADOW_t_xs_dll_x32_MASK)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_abort_x32_MASK (0x7F0000U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_abort_x32_SHIFT (16U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_abort_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_SHADOW_t_xs_abort_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_SHADOW_t_xs_abort_x32_MASK)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_fast_x32_MASK (0x7F000000U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_fast_x32_SHIFT (24U)
#define DDRC_REGS_DRAMTMG8_SHADOW_t_xs_fast_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG8_SHADOW_t_xs_fast_x32_SHIFT)) & DDRC_REGS_DRAMTMG8_SHADOW_t_xs_fast_x32_MASK)
/*! @} */

/*! @name DRAMTMG9_SHADOW - [SHADOW] SDRAM Timing Register 9 */
/*! @{ */
#define DDRC_REGS_DRAMTMG9_SHADOW_wr2rd_s_MASK   (0x3FU)
#define DDRC_REGS_DRAMTMG9_SHADOW_wr2rd_s_SHIFT  (0U)
#define DDRC_REGS_DRAMTMG9_SHADOW_wr2rd_s(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_SHADOW_wr2rd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_SHADOW_wr2rd_s_MASK)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_rrd_s_MASK   (0xF00U)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_rrd_s_SHIFT  (8U)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_rrd_s(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_SHADOW_t_rrd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_SHADOW_t_rrd_s_MASK)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_ccd_s_MASK   (0x70000U)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_ccd_s_SHIFT  (16U)
#define DDRC_REGS_DRAMTMG9_SHADOW_t_ccd_s(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG9_SHADOW_t_ccd_s_SHIFT)) & DDRC_REGS_DRAMTMG9_SHADOW_t_ccd_s_MASK)
#define DDRC_REGS_DRAMTMG9_SHADOW_ddr4_wr_preamble_MASK (0x40000000U)
#define DDRC_REGS_DRAMTMG9_SHADOW_ddr4_wr_preamble_SHIFT (30U)
/*! @} */

/*! @name DRAMTMG10_SHADOW - [SHADOW] SDRAM Timing Register 10 */
/*! @{ */
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_hold_MASK (0x3U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_hold_SHIFT (0U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_hold(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_SHADOW_t_gear_hold_SHIFT)) & DDRC_REGS_DRAMTMG10_SHADOW_t_gear_hold_MASK)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_setup_MASK (0xCU)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_setup_SHIFT (2U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_gear_setup(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_SHADOW_t_gear_setup_SHIFT)) & DDRC_REGS_DRAMTMG10_SHADOW_t_gear_setup_MASK)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_cmd_gear_MASK (0x1F00U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_cmd_gear_SHIFT (8U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_cmd_gear(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_SHADOW_t_cmd_gear_SHIFT)) & DDRC_REGS_DRAMTMG10_SHADOW_t_cmd_gear_MASK)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_sync_gear_MASK (0x1F0000U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_sync_gear_SHIFT (16U)
#define DDRC_REGS_DRAMTMG10_SHADOW_t_sync_gear(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG10_SHADOW_t_sync_gear_SHIFT)) & DDRC_REGS_DRAMTMG10_SHADOW_t_sync_gear_MASK)
/*! @} */

/*! @name DRAMTMG11_SHADOW - [SHADOW] SDRAM Timing Register 11 */
/*! @{ */
#define DDRC_REGS_DRAMTMG11_SHADOW_t_ckmpe_MASK  (0x1FU)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_ckmpe_SHIFT (0U)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_ckmpe(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_SHADOW_t_ckmpe_SHIFT)) & DDRC_REGS_DRAMTMG11_SHADOW_t_ckmpe_MASK)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_s_MASK  (0x300U)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_s_SHIFT (8U)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_s(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_s_SHIFT)) & DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_s_MASK)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_lh_MASK (0x1F0000U)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_lh_SHIFT (16U)
#define DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_lh(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_lh_SHIFT)) & DDRC_REGS_DRAMTMG11_SHADOW_t_mpx_lh_MASK)
#define DDRC_REGS_DRAMTMG11_SHADOW_post_mpsm_gap_x32_MASK (0x7F000000U)
#define DDRC_REGS_DRAMTMG11_SHADOW_post_mpsm_gap_x32_SHIFT (24U)
#define DDRC_REGS_DRAMTMG11_SHADOW_post_mpsm_gap_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG11_SHADOW_post_mpsm_gap_x32_SHIFT)) & DDRC_REGS_DRAMTMG11_SHADOW_post_mpsm_gap_x32_MASK)
/*! @} */

/*! @name DRAMTMG12_SHADOW - [SHADOW] SDRAM Timing Register 12 */
/*! @{ */
#define DDRC_REGS_DRAMTMG12_SHADOW_t_mrd_pda_MASK (0x1FU)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_mrd_pda_SHIFT (0U)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_mrd_pda(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_SHADOW_t_mrd_pda_SHIFT)) & DDRC_REGS_DRAMTMG12_SHADOW_t_mrd_pda_MASK)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_ckehcmd_MASK (0xF00U)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_ckehcmd_SHIFT (8U)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_ckehcmd(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_SHADOW_t_ckehcmd_SHIFT)) & DDRC_REGS_DRAMTMG12_SHADOW_t_ckehcmd_MASK)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_cmdcke_MASK (0x30000U)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_cmdcke_SHIFT (16U)
#define DDRC_REGS_DRAMTMG12_SHADOW_t_cmdcke(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG12_SHADOW_t_cmdcke_SHIFT)) & DDRC_REGS_DRAMTMG12_SHADOW_t_cmdcke_MASK)
/*! @} */

/*! @name DRAMTMG13_SHADOW - [SHADOW] SDRAM Timing Register 13 */
/*! @{ */
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ppd_MASK    (0x7U)
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ppd_SHIFT   (0U)
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ppd(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_SHADOW_t_ppd_SHIFT)) & DDRC_REGS_DRAMTMG13_SHADOW_t_ppd_MASK)
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ccd_mw_MASK (0x3F0000U)
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ccd_mw_SHIFT (16U)
#define DDRC_REGS_DRAMTMG13_SHADOW_t_ccd_mw(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_SHADOW_t_ccd_mw_SHIFT)) & DDRC_REGS_DRAMTMG13_SHADOW_t_ccd_mw_MASK)
#define DDRC_REGS_DRAMTMG13_SHADOW_odtloff_MASK  (0x7F000000U)
#define DDRC_REGS_DRAMTMG13_SHADOW_odtloff_SHIFT (24U)
#define DDRC_REGS_DRAMTMG13_SHADOW_odtloff(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG13_SHADOW_odtloff_SHIFT)) & DDRC_REGS_DRAMTMG13_SHADOW_odtloff_MASK)
/*! @} */

/*! @name DRAMTMG14_SHADOW - [SHADOW] SDRAM Timing Register 14 */
/*! @{ */
#define DDRC_REGS_DRAMTMG14_SHADOW_t_xsr_MASK    (0xFFFU)
#define DDRC_REGS_DRAMTMG14_SHADOW_t_xsr_SHIFT   (0U)
#define DDRC_REGS_DRAMTMG14_SHADOW_t_xsr(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG14_SHADOW_t_xsr_SHIFT)) & DDRC_REGS_DRAMTMG14_SHADOW_t_xsr_MASK)
/*! @} */

/*! @name DRAMTMG15_SHADOW - [SHADOW] SDRAM Timing Register 15 */
/*! @{ */
#define DDRC_REGS_DRAMTMG15_SHADOW_t_stab_x32_MASK (0xFFU)
#define DDRC_REGS_DRAMTMG15_SHADOW_t_stab_x32_SHIFT (0U)
#define DDRC_REGS_DRAMTMG15_SHADOW_t_stab_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DRAMTMG15_SHADOW_t_stab_x32_SHIFT)) & DDRC_REGS_DRAMTMG15_SHADOW_t_stab_x32_MASK)
#define DDRC_REGS_DRAMTMG15_SHADOW_en_dfi_lp_t_stab_MASK (0x80000000U)
#define DDRC_REGS_DRAMTMG15_SHADOW_en_dfi_lp_t_stab_SHIFT (31U)
/*! @} */

/*! @name ZQCTL0_SHADOW - [SHADOW] ZQ Control Register 0 */
/*! @{ */
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_short_nop_MASK (0x3FFU)
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_short_nop_SHIFT (0U)
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_short_nop(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL0_SHADOW_t_zq_short_nop_SHIFT)) & DDRC_REGS_ZQCTL0_SHADOW_t_zq_short_nop_MASK)
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_long_nop_MASK (0x7FF0000U)
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_long_nop_SHIFT (16U)
#define DDRC_REGS_ZQCTL0_SHADOW_t_zq_long_nop(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ZQCTL0_SHADOW_t_zq_long_nop_SHIFT)) & DDRC_REGS_ZQCTL0_SHADOW_t_zq_long_nop_MASK)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_mpsmx_zqcl_MASK (0x10000000U)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_mpsmx_zqcl_SHIFT (28U)
#define DDRC_REGS_ZQCTL0_SHADOW_zq_resistor_shared_MASK (0x20000000U)
#define DDRC_REGS_ZQCTL0_SHADOW_zq_resistor_shared_SHIFT (29U)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_srx_zqcl_MASK (0x40000000U)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_srx_zqcl_SHIFT (30U)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_auto_zq_MASK (0x80000000U)
#define DDRC_REGS_ZQCTL0_SHADOW_dis_auto_zq_SHIFT (31U)
/*! @} */

/*! @name DFITMG0_SHADOW - [SHADOW] DFI Timing Register 0 */
/*! @{ */
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrlat_MASK (0x3FU)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrlat_SHIFT (0U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrlat(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrlat_SHIFT)) & DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrlat_MASK)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrdata_MASK (0x3F00U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrdata_SHIFT (8U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrdata(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrdata_SHIFT)) & DDRC_REGS_DFITMG0_SHADOW_dfi_tphy_wrdata_MASK)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_wrdata_use_sdr_MASK (0x8000U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_wrdata_use_sdr_SHIFT (15U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_rddata_en_MASK (0x7F0000U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_rddata_en_SHIFT (16U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_rddata_en(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_SHADOW_dfi_t_rddata_en_SHIFT)) & DDRC_REGS_DFITMG0_SHADOW_dfi_t_rddata_en_MASK)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_rddata_use_sdr_MASK (0x800000U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_rddata_use_sdr_SHIFT (23U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_ctrl_delay_MASK (0x1F000000U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_ctrl_delay_SHIFT (24U)
#define DDRC_REGS_DFITMG0_SHADOW_dfi_t_ctrl_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG0_SHADOW_dfi_t_ctrl_delay_SHIFT)) & DDRC_REGS_DFITMG0_SHADOW_dfi_t_ctrl_delay_MASK)
/*! @} */

/*! @name DFITMG1_SHADOW - [SHADOW] DFI Timing Register 1 */
/*! @{ */
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_enable_MASK (0x1FU)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_enable_SHIFT (0U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_enable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_enable_SHIFT)) & DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_enable_MASK)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_disable_MASK (0x1F00U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_disable_SHIFT (8U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_disable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_disable_SHIFT)) & DDRC_REGS_DFITMG1_SHADOW_dfi_t_dram_clk_disable_MASK)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_wrdata_delay_MASK (0x1F0000U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_wrdata_delay_SHIFT (16U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_wrdata_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_SHADOW_dfi_t_wrdata_delay_SHIFT)) & DDRC_REGS_DFITMG1_SHADOW_dfi_t_wrdata_delay_MASK)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_parin_lat_MASK (0x3000000U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_parin_lat_SHIFT (24U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_parin_lat(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_SHADOW_dfi_t_parin_lat_SHIFT)) & DDRC_REGS_DFITMG1_SHADOW_dfi_t_parin_lat_MASK)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_cmd_lat_MASK (0xF0000000U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_cmd_lat_SHIFT (28U)
#define DDRC_REGS_DFITMG1_SHADOW_dfi_t_cmd_lat(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG1_SHADOW_dfi_t_cmd_lat_SHIFT)) & DDRC_REGS_DFITMG1_SHADOW_dfi_t_cmd_lat_MASK)
/*! @} */

/*! @name DFITMG2_SHADOW - [SHADOW] DFI Timing Register 2 */
/*! @{ */
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_wrcslat_MASK (0x3FU)
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_wrcslat_SHIFT (0U)
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_wrcslat(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_wrcslat_SHIFT)) & DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_wrcslat_MASK)
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_rdcslat_MASK (0x7F00U)
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_rdcslat_SHIFT (8U)
#define DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_rdcslat(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_rdcslat_SHIFT)) & DDRC_REGS_DFITMG2_SHADOW_dfi_tphy_rdcslat_MASK)
/*! @} */

/*! @name DFITMG3_SHADOW - [SHADOW] DFI Timing Register 3 */
/*! @{ */
#define DDRC_REGS_DFITMG3_SHADOW_dfi_t_geardown_delay_MASK (0x1FU)
#define DDRC_REGS_DFITMG3_SHADOW_dfi_t_geardown_delay_SHIFT (0U)
#define DDRC_REGS_DFITMG3_SHADOW_dfi_t_geardown_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_DFITMG3_SHADOW_dfi_t_geardown_delay_SHIFT)) & DDRC_REGS_DFITMG3_SHADOW_dfi_t_geardown_delay_MASK)
/*! @} */

/*! @name ODTCFG_SHADOW - [SHADOW] ODT Configuration Register */
/*! @{ */
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_delay_MASK (0x7CU)
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_delay_SHIFT (2U)
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_delay(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_SHADOW_rd_odt_delay_SHIFT)) & DDRC_REGS_ODTCFG_SHADOW_rd_odt_delay_MASK)
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_hold_MASK (0xF00U)
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_hold_SHIFT (8U)
#define DDRC_REGS_ODTCFG_SHADOW_rd_odt_hold(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_SHADOW_rd_odt_hold_SHIFT)) & DDRC_REGS_ODTCFG_SHADOW_rd_odt_hold_MASK)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_delay_MASK (0x1F0000U)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_delay_SHIFT (16U)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_delay(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_SHADOW_wr_odt_delay_SHIFT)) & DDRC_REGS_ODTCFG_SHADOW_wr_odt_delay_MASK)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_hold_MASK (0xF000000U)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_hold_SHIFT (24U)
#define DDRC_REGS_ODTCFG_SHADOW_wr_odt_hold(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_REGS_ODTCFG_SHADOW_wr_odt_hold_SHIFT)) & DDRC_REGS_ODTCFG_SHADOW_wr_odt_hold_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DDRC_REGS_Register_Masks */


/* DDRC_REGS - Peripheral instance base addresses */
/** Peripheral DDRC base pointer */
#define DDRC_BASE_PTR                            ((DDRC_REGS_MemMapPtr)0x3D400000u)
/** Array initializer of DDRC_REGS peripheral base pointers */
#define DDRC_REGS_BASE_PTRS                      { DDRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DDRC_REGS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_REGS_Register_Accessor_Macros DDRC_REGS - Register accessor macros
 * @{
 */


/* DDRC_REGS - Register instance definitions */
/* DDRC */
#define DDRC_MSTR                                DDRC_REGS_MSTR_REG(DDRC_BASE_PTR)
#define DDRC_STAT                                DDRC_REGS_STAT_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL0                             DDRC_REGS_MRCTRL0_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL1                             DDRC_REGS_MRCTRL1_REG(DDRC_BASE_PTR)
#define DDRC_MRSTAT                              DDRC_REGS_MRSTAT_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL2                             DDRC_REGS_MRCTRL2_REG(DDRC_BASE_PTR)
#define DDRC_DERATEEN                            DDRC_REGS_DERATEEN_REG(DDRC_BASE_PTR)
#define DDRC_DERATEINT                           DDRC_REGS_DERATEINT_REG(DDRC_BASE_PTR)
#define DDRC_PWRCTL                              DDRC_REGS_PWRCTL_REG(DDRC_BASE_PTR)
#define DDRC_PWRTMG                              DDRC_REGS_PWRTMG_REG(DDRC_BASE_PTR)
#define DDRC_HWLPCTL                             DDRC_REGS_HWLPCTL_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL0                            DDRC_REGS_RFSHCTL0_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL1                            DDRC_REGS_RFSHCTL1_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL3                            DDRC_REGS_RFSHCTL3_REG(DDRC_BASE_PTR)
#define DDRC_RFSHTMG                             DDRC_REGS_RFSHTMG_REG(DDRC_BASE_PTR)
#define DDRC_CRCPARCTL0                          DDRC_REGS_CRCPARCTL0_REG(DDRC_BASE_PTR)
#define DDRC_CRCPARCTL1                          DDRC_REGS_CRCPARCTL1_REG(DDRC_BASE_PTR)
#define DDRC_CRCPARSTAT                          DDRC_REGS_CRCPARSTAT_REG(DDRC_BASE_PTR)
#define DDRC_INIT0                               DDRC_REGS_INIT0_REG(DDRC_BASE_PTR)
#define DDRC_INIT1                               DDRC_REGS_INIT1_REG(DDRC_BASE_PTR)
#define DDRC_INIT2                               DDRC_REGS_INIT2_REG(DDRC_BASE_PTR)
#define DDRC_INIT3                               DDRC_REGS_INIT3_REG(DDRC_BASE_PTR)
#define DDRC_INIT4                               DDRC_REGS_INIT4_REG(DDRC_BASE_PTR)
#define DDRC_INIT5                               DDRC_REGS_INIT5_REG(DDRC_BASE_PTR)
#define DDRC_INIT6                               DDRC_REGS_INIT6_REG(DDRC_BASE_PTR)
#define DDRC_INIT7                               DDRC_REGS_INIT7_REG(DDRC_BASE_PTR)
#define DDRC_DIMMCTL                             DDRC_REGS_DIMMCTL_REG(DDRC_BASE_PTR)
#define DDRC_RANKCTL                             DDRC_REGS_RANKCTL_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG0                            DDRC_REGS_DRAMTMG0_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG1                            DDRC_REGS_DRAMTMG1_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG2                            DDRC_REGS_DRAMTMG2_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG3                            DDRC_REGS_DRAMTMG3_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG4                            DDRC_REGS_DRAMTMG4_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG5                            DDRC_REGS_DRAMTMG5_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG6                            DDRC_REGS_DRAMTMG6_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG7                            DDRC_REGS_DRAMTMG7_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG8                            DDRC_REGS_DRAMTMG8_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG9                            DDRC_REGS_DRAMTMG9_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG10                           DDRC_REGS_DRAMTMG10_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG11                           DDRC_REGS_DRAMTMG11_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG12                           DDRC_REGS_DRAMTMG12_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG13                           DDRC_REGS_DRAMTMG13_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG14                           DDRC_REGS_DRAMTMG14_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG15                           DDRC_REGS_DRAMTMG15_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL0                              DDRC_REGS_ZQCTL0_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL1                              DDRC_REGS_ZQCTL1_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL2                              DDRC_REGS_ZQCTL2_REG(DDRC_BASE_PTR)
#define DDRC_ZQSTAT                              DDRC_REGS_ZQSTAT_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG0                             DDRC_REGS_DFITMG0_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG1                             DDRC_REGS_DFITMG1_REG(DDRC_BASE_PTR)
#define DDRC_DFILPCFG0                           DDRC_REGS_DFILPCFG0_REG(DDRC_BASE_PTR)
#define DDRC_DFILPCFG1                           DDRC_REGS_DFILPCFG1_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD0                             DDRC_REGS_DFIUPD0_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD1                             DDRC_REGS_DFIUPD1_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD2                             DDRC_REGS_DFIUPD2_REG(DDRC_BASE_PTR)
#define DDRC_DFIMISC                             DDRC_REGS_DFIMISC_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG2                             DDRC_REGS_DFITMG2_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG3                             DDRC_REGS_DFITMG3_REG(DDRC_BASE_PTR)
#define DDRC_DFISTAT                             DDRC_REGS_DFISTAT_REG(DDRC_BASE_PTR)
#define DDRC_DBICTL                              DDRC_REGS_DBICTL_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP0                            DDRC_REGS_ADDRMAP0_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP1                            DDRC_REGS_ADDRMAP1_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP2                            DDRC_REGS_ADDRMAP2_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP3                            DDRC_REGS_ADDRMAP3_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP4                            DDRC_REGS_ADDRMAP4_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP5                            DDRC_REGS_ADDRMAP5_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP6                            DDRC_REGS_ADDRMAP6_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP7                            DDRC_REGS_ADDRMAP7_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP8                            DDRC_REGS_ADDRMAP8_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP9                            DDRC_REGS_ADDRMAP9_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP10                           DDRC_REGS_ADDRMAP10_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP11                           DDRC_REGS_ADDRMAP11_REG(DDRC_BASE_PTR)
#define DDRC_ODTCFG                              DDRC_REGS_ODTCFG_REG(DDRC_BASE_PTR)
#define DDRC_ODTMAP                              DDRC_REGS_ODTMAP_REG(DDRC_BASE_PTR)
#define DDRC_SCHED                               DDRC_REGS_SCHED_REG(DDRC_BASE_PTR)
#define DDRC_SCHED1                              DDRC_REGS_SCHED1_REG(DDRC_BASE_PTR)
#define DDRC_PERFHPR1                            DDRC_REGS_PERFHPR1_REG(DDRC_BASE_PTR)
#define DDRC_PERFLPR1                            DDRC_REGS_PERFLPR1_REG(DDRC_BASE_PTR)
#define DDRC_PERFWR1                             DDRC_REGS_PERFWR1_REG(DDRC_BASE_PTR)
#define DDRC_DBG0                                DDRC_REGS_DBG0_REG(DDRC_BASE_PTR)
#define DDRC_DBG1                                DDRC_REGS_DBG1_REG(DDRC_BASE_PTR)
#define DDRC_DBGCAM                              DDRC_REGS_DBGCAM_REG(DDRC_BASE_PTR)
#define DDRC_DBGCMD                              DDRC_REGS_DBGCMD_REG(DDRC_BASE_PTR)
#define DDRC_DBGSTAT                             DDRC_REGS_DBGSTAT_REG(DDRC_BASE_PTR)
#define DDRC_SWCTL                               DDRC_REGS_SWCTL_REG(DDRC_BASE_PTR)
#define DDRC_SWSTAT                              DDRC_REGS_SWSTAT_REG(DDRC_BASE_PTR)
#define DDRC_POISONCFG                           DDRC_REGS_POISONCFG_REG(DDRC_BASE_PTR)
#define DDRC_POISONSTAT                          DDRC_REGS_POISONSTAT_REG(DDRC_BASE_PTR)
#define DDRC_PSTAT                               DDRC_REGS_PSTAT_REG(DDRC_BASE_PTR)
#define DDRC_PCCFG                               DDRC_REGS_PCCFG_REG(DDRC_BASE_PTR)
#define DDRC_PCFGR_0                             DDRC_REGS_PCFGR_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGW_0                             DDRC_REGS_PCFGW_0_REG(DDRC_BASE_PTR)
#define DDRC_PCTRL_0                             DDRC_REGS_PCTRL_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGQOS0_0                          DDRC_REGS_PCFGQOS0_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGQOS1_0                          DDRC_REGS_PCFGQOS1_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGWQOS0_0                         DDRC_REGS_PCFGWQOS0_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGWQOS1_0                         DDRC_REGS_PCFGWQOS1_0_REG(DDRC_BASE_PTR)
#define DDRC_DERATEEN_SHADOW                     DDRC_REGS_DERATEEN_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DERATEINT_SHADOW                    DDRC_REGS_DERATEINT_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL0_SHADOW                     DDRC_REGS_RFSHCTL0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_RFSHTMG_SHADOW                      DDRC_REGS_RFSHTMG_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT3_SHADOW                        DDRC_REGS_INIT3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT4_SHADOW                        DDRC_REGS_INIT4_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT6_SHADOW                        DDRC_REGS_INIT6_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT7_SHADOW                        DDRC_REGS_INIT7_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG0_SHADOW                     DDRC_REGS_DRAMTMG0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG1_SHADOW                     DDRC_REGS_DRAMTMG1_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG2_SHADOW                     DDRC_REGS_DRAMTMG2_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG3_SHADOW                     DDRC_REGS_DRAMTMG3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG4_SHADOW                     DDRC_REGS_DRAMTMG4_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG5_SHADOW                     DDRC_REGS_DRAMTMG5_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG6_SHADOW                     DDRC_REGS_DRAMTMG6_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG7_SHADOW                     DDRC_REGS_DRAMTMG7_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG8_SHADOW                     DDRC_REGS_DRAMTMG8_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG9_SHADOW                     DDRC_REGS_DRAMTMG9_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG10_SHADOW                    DDRC_REGS_DRAMTMG10_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG11_SHADOW                    DDRC_REGS_DRAMTMG11_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG12_SHADOW                    DDRC_REGS_DRAMTMG12_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG13_SHADOW                    DDRC_REGS_DRAMTMG13_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG14_SHADOW                    DDRC_REGS_DRAMTMG14_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG15_SHADOW                    DDRC_REGS_DRAMTMG15_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL0_SHADOW                       DDRC_REGS_ZQCTL0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG0_SHADOW                      DDRC_REGS_DFITMG0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG1_SHADOW                      DDRC_REGS_DFITMG1_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG2_SHADOW                      DDRC_REGS_DFITMG2_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG3_SHADOW                      DDRC_REGS_DFITMG3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_ODTCFG_SHADOW                       DDRC_REGS_ODTCFG_SHADOW_REG(DDRC_BASE_PTR)

/*!
 * @}
 */ /* end of group DDRC_REGS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DDRC_REGS_Peripheral */


/* ----------------------------------------------------------------------------
   -- DEC400D
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEC400D_Peripheral DEC400D
 * @{
 */

/** DEC400D - Peripheral register structure */
typedef struct DEC400D_MemMap {
  uint8_t RESERVED_0[36];
  uint32_t GCCHIPREV;                              /**< Revision ID, offset: 0x24 */
  uint32_t GCCHIPDATE;                             /**< Release Date, offset: 0x28 */
  uint8_t RESERVED_1[108];
  uint32_t GCREGHICHIPPATCHREV;                    /**< Patch Revision, offset: 0x98 */
  uint8_t RESERVED_2[12];
  uint32_t GCPRODUCTID;                            /**< Product ID, offset: 0xA8 */
  uint8_t RESERVED_3[1876];
  uint32_t GCREGAHBDECREADCONFIG[32];              /**< Decode Read Configuration, array offset: 0x800, array step: 0x4 */
  uint8_t RESERVED_4[128];
  uint32_t GCREGAHBDECREADBUFFERBASE[32];          /**< Decode Read Buffer Base, array offset: 0x900, array step: 0x4 */
  uint32_t GCREGAHBDECREADCACHEBASE[32];           /**< Decode Read Cache Base, array offset: 0x980, array step: 0x4 */
  uint8_t RESERVED_5[256];
  uint32_t GCREGAHBDECCONTROL;                     /**< Dec400D Control, offset: 0xB00 */
  uint32_t GCREGAHBDECINTRACKNOWLEDGE;             /**< Interrupt Acknowledge, offset: 0xB04 */
  uint32_t GCREGAHBDECINTRENBL;                    /**< Interrupt Enable, offset: 0xB08 */
  uint32_t GCREGAHBDECTILESTATUSDEBUG;             /**< Tile Status Module Debug, offset: 0xB0C */
  uint8_t RESERVED_6[4];
  uint32_t GCREGAHBDECDECODERDEBUG;                /**< Decompression Module Debug, offset: 0xB14 */
  uint32_t GCREGAHBDECTOTALREADSIN;                /**< Total Reads In, offset: 0xB18 */
  uint8_t RESERVED_7[4];
  uint32_t GCREGAHBDECTOTALREADBURSTSIN;           /**< Total Read Data Count, offset: 0xB20 */
  uint8_t RESERVED_8[4];
  uint32_t GCREGAHBDECTOTALREADREQIN;              /**< Total Read Request In, offset: 0xB28 */
  uint8_t RESERVED_9[4];
  uint32_t GCREGAHBDECTOTALREADLASTSIN;            /**< Total Input Read Last Number, offset: 0xB30 */
  uint8_t RESERVED_10[4];
  uint32_t GCREGAHBDECTOTALREADSOUT;               /**< Total Reads Out, offset: 0xB38 */
  uint8_t RESERVED_11[4];
  uint32_t GCREGAHBDECTOTALREADBURSTSOUT;          /**< Total Read Bursts Out, offset: 0xB40 */
  uint8_t RESERVED_12[4];
  uint32_t GCREGAHBDECTOTALREADREQOUT;             /**< Total Read Request Out, offset: 0xB48 */
  uint8_t RESERVED_13[4];
  uint32_t GCREGAHBDECTOTALREADLASTSOUT;           /**< Total Read Last Out, offset: 0xB50 */
  uint8_t RESERVED_14[4];
  uint32_t GCREGAHBDECDEBUG0;                      /**< Debug Register 0, offset: 0xB58 */
  uint32_t GCREGAHBDECDEBUG1;                      /**< Debug Register 1, offset: 0xB5C */
  uint32_t GCREGAHBDECDEBUG2;                      /**< Debug register 2, offset: 0xB60 */
  uint32_t GCREGAHBDECDEBUG3;                      /**< Debug Register 3, offset: 0xB64 */
  uint32_t GCREGAHBDECCONTROLEX;                   /**< GCREGAHBDECCONTROLEX, offset: 0xB68 */
  uint32_t GCREGAHBDECSTATECOMMIT;                 /**< GCREGAHBDECSTATECOMMIT, offset: 0xB6C */
  uint32_t GCREGAHBDECSTATELOCK;                   /**< GCREGAHBDECSTATELOCK, offset: 0xB70 */
  uint8_t RESERVED_15[140];
  uint32_t GCREGAHBDECREADEXCONFIG[32];            /**< Decode Read Extra Configuration, array offset: 0xC00, array step: 0x4 */
  uint32_t GCREGAHBDECREADSTRIDE[32];              /**< Decoder Read Stride, array offset: 0xC80, array step: 0x4 */
  uint8_t RESERVED_16[256];
  uint32_t GCREGAHBDECREADBUFFEREND[32];           /**< Decoder Read Buffer End, array offset: 0xE00, array step: 0x4 */
} volatile *DEC400D_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DEC400D - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEC400D_Register_Accessor_Macros DEC400D - Register accessor macros
 * @{
 */


/* DEC400D - Register accessors */
#define DEC400D_GCCHIPREV_REG(base)              ((base)->GCCHIPREV)
#define DEC400D_GCCHIPDATE_REG(base)             ((base)->GCCHIPDATE)
#define DEC400D_GCREGHICHIPPATCHREV_REG(base)    ((base)->GCREGHICHIPPATCHREV)
#define DEC400D_GCPRODUCTID_REG(base)            ((base)->GCPRODUCTID)
#define DEC400D_GCREGAHBDECREADCONFIG_REG(base,index) ((base)->GCREGAHBDECREADCONFIG[index])
#define DEC400D_GCREGAHBDECREADBUFFERBASE_REG(base,index) ((base)->GCREGAHBDECREADBUFFERBASE[index])
#define DEC400D_GCREGAHBDECREADCACHEBASE_REG(base,index) ((base)->GCREGAHBDECREADCACHEBASE[index])
#define DEC400D_GCREGAHBDECCONTROL_REG(base)     ((base)->GCREGAHBDECCONTROL)
#define DEC400D_GCREGAHBDECINTRACKNOWLEDGE_REG(base) ((base)->GCREGAHBDECINTRACKNOWLEDGE)
#define DEC400D_GCREGAHBDECINTRENBL_REG(base)    ((base)->GCREGAHBDECINTRENBL)
#define DEC400D_GCREGAHBDECTILESTATUSDEBUG_REG(base) ((base)->GCREGAHBDECTILESTATUSDEBUG)
#define DEC400D_GCREGAHBDECDECODERDEBUG_REG(base) ((base)->GCREGAHBDECDECODERDEBUG)
#define DEC400D_GCREGAHBDECTOTALREADSIN_REG(base) ((base)->GCREGAHBDECTOTALREADSIN)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSIN_REG(base) ((base)->GCREGAHBDECTOTALREADBURSTSIN)
#define DEC400D_GCREGAHBDECTOTALREADREQIN_REG(base) ((base)->GCREGAHBDECTOTALREADREQIN)
#define DEC400D_GCREGAHBDECTOTALREADLASTSIN_REG(base) ((base)->GCREGAHBDECTOTALREADLASTSIN)
#define DEC400D_GCREGAHBDECTOTALREADSOUT_REG(base) ((base)->GCREGAHBDECTOTALREADSOUT)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_REG(base) ((base)->GCREGAHBDECTOTALREADBURSTSOUT)
#define DEC400D_GCREGAHBDECTOTALREADREQOUT_REG(base) ((base)->GCREGAHBDECTOTALREADREQOUT)
#define DEC400D_GCREGAHBDECTOTALREADLASTSOUT_REG(base) ((base)->GCREGAHBDECTOTALREADLASTSOUT)
#define DEC400D_GCREGAHBDECDEBUG0_REG(base)      ((base)->GCREGAHBDECDEBUG0)
#define DEC400D_GCREGAHBDECDEBUG1_REG(base)      ((base)->GCREGAHBDECDEBUG1)
#define DEC400D_GCREGAHBDECDEBUG2_REG(base)      ((base)->GCREGAHBDECDEBUG2)
#define DEC400D_GCREGAHBDECDEBUG3_REG(base)      ((base)->GCREGAHBDECDEBUG3)
#define DEC400D_GCREGAHBDECCONTROLEX_REG(base)   ((base)->GCREGAHBDECCONTROLEX)
#define DEC400D_GCREGAHBDECSTATECOMMIT_REG(base) ((base)->GCREGAHBDECSTATECOMMIT)
#define DEC400D_GCREGAHBDECSTATELOCK_REG(base)   ((base)->GCREGAHBDECSTATELOCK)
#define DEC400D_GCREGAHBDECREADEXCONFIG_REG(base,index) ((base)->GCREGAHBDECREADEXCONFIG[index])
#define DEC400D_GCREGAHBDECREADSTRIDE_REG(base,index) ((base)->GCREGAHBDECREADSTRIDE[index])
#define DEC400D_GCREGAHBDECREADBUFFEREND_REG(base,index) ((base)->GCREGAHBDECREADBUFFEREND[index])

/*!
 * @}
 */ /* end of group DEC400D_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DEC400D Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEC400D_Register_Masks DEC400D Register Masks
 * @{
 */

/*! @name GCCHIPREV - Revision ID */
/*! @{ */
#define DEC400D_GCCHIPREV_GCCHIPREV_MASK         (0xFFFFFFFFU)
#define DEC400D_GCCHIPREV_GCCHIPREV_SHIFT        (0U)
#define DEC400D_GCCHIPREV_GCCHIPREV(x)           (((uint32_t)(((uint32_t)(x)) << DEC400D_GCCHIPREV_GCCHIPREV_SHIFT)) & DEC400D_GCCHIPREV_GCCHIPREV_MASK)
/*! @} */

/*! @name GCCHIPDATE - Release Date */
/*! @{ */
#define DEC400D_GCCHIPDATE_GCCHIPDATE_MASK       (0xFFFFFFFFU)
#define DEC400D_GCCHIPDATE_GCCHIPDATE_SHIFT      (0U)
#define DEC400D_GCCHIPDATE_GCCHIPDATE(x)         (((uint32_t)(((uint32_t)(x)) << DEC400D_GCCHIPDATE_GCCHIPDATE_SHIFT)) & DEC400D_GCCHIPDATE_GCCHIPDATE_MASK)
/*! @} */

/*! @name GCREGHICHIPPATCHREV - Patch Revision */
/*! @{ */
#define DEC400D_GCREGHICHIPPATCHREV_GCREGHICHIPPATCHREV_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGHICHIPPATCHREV_GCREGHICHIPPATCHREV_SHIFT (0U)
#define DEC400D_GCREGHICHIPPATCHREV_GCREGHICHIPPATCHREV(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGHICHIPPATCHREV_GCREGHICHIPPATCHREV_SHIFT)) & DEC400D_GCREGHICHIPPATCHREV_GCREGHICHIPPATCHREV_MASK)
/*! @} */

/*! @name GCPRODUCTID - Product ID */
/*! @{ */
#define DEC400D_GCPRODUCTID_GCPRODUCTID_MASK     (0xFFFFFFFFU)
#define DEC400D_GCPRODUCTID_GCPRODUCTID_SHIFT    (0U)
#define DEC400D_GCPRODUCTID_GCPRODUCTID(x)       (((uint32_t)(((uint32_t)(x)) << DEC400D_GCPRODUCTID_GCPRODUCTID_SHIFT)) & DEC400D_GCPRODUCTID_GCPRODUCTID_MASK)
/*! @} */

/*! @name GCREGAHBDECREADCONFIG - Decode Read Configuration */
/*! @{ */
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ENABLE_MASK (0x1U)
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ENABLE_SHIFT (0U)
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_FORMAT_MASK (0xF8U)
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_FORMAT_SHIFT (3U)
/*! COMPRESSION_FORMAT - Compression Format
 *  0b00000..ARGB8
 */
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_FORMAT_SHIFT)) & DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_FORMAT_MASK)
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ALIGN_MODE_MASK (0x30000U)
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ALIGN_MODE_SHIFT (16U)
/*! COMPRESSION_ALIGN_MODE - Compression Align Mode
 *  0b00..ALIGN1_BYTE
 *  0b01..ALIGN16_BYTE
 *  0b10..ALIGN32_BYTE
 *  0b11..ALIGN64_BYTE
 */
#define DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ALIGN_MODE(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ALIGN_MODE_SHIFT)) & DEC400D_GCREGAHBDECREADCONFIG_COMPRESSION_ALIGN_MODE_MASK)
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_ALIGN_MODE_MASK (0x1C00000U)
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_ALIGN_MODE_SHIFT (22U)
/*! TILE_ALIGN_MODE - Tile Align Mode
 *  0b000..TILE1_ALIGN
 *  0b001..TILE2_ALIGN
 *  0b010..TILE4_ALIGN
 *  0b011..CBSR_ALIGN
 */
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_ALIGN_MODE(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADCONFIG_TILE_ALIGN_MODE_SHIFT)) & DEC400D_GCREGAHBDECREADCONFIG_TILE_ALIGN_MODE_MASK)
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_MODE_MASK (0x3E000000U)
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_MODE_SHIFT (25U)
/*! TILE_MODE - Tile Mode
 *  0b00000..TILE8X8_XMAJOR
 *  0b00001..TILE8X8_YMAJOR
 *  0b00010..TILE16X4
 *  0b00011..TILE8X4
 *  0b00100..TILE4X8
 *  0b00101..TILE4X4
 *  0b00110..RASTER16X4
 *  0b00111..TILE64X4
 *  0b01000..TILE32X4
 *  0b01001..RASTER256X1
 *  0b01010..RASTER128X1
 *  0b01011..RASTER64X4
 *  0b01100..RASTER256X2
 *  0b01101..RASTER128X2
 *  0b01110..RASTER128X4
 *  0b01111..RASTER64X1
 */
#define DEC400D_GCREGAHBDECREADCONFIG_TILE_MODE(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADCONFIG_TILE_MODE_SHIFT)) & DEC400D_GCREGAHBDECREADCONFIG_TILE_MODE_MASK)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADCONFIG */
#define DEC400D_GCREGAHBDECREADCONFIG_COUNT      (32U)

/*! @name GCREGAHBDECREADBUFFERBASE - Decode Read Buffer Base */
/*! @{ */
#define DEC400D_GCREGAHBDECREADBUFFERBASE_BUFFER_ADDRESS_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECREADBUFFERBASE_BUFFER_ADDRESS_SHIFT (0U)
#define DEC400D_GCREGAHBDECREADBUFFERBASE_BUFFER_ADDRESS(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADBUFFERBASE_BUFFER_ADDRESS_SHIFT)) & DEC400D_GCREGAHBDECREADBUFFERBASE_BUFFER_ADDRESS_MASK)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADBUFFERBASE */
#define DEC400D_GCREGAHBDECREADBUFFERBASE_COUNT  (32U)

/*! @name GCREGAHBDECREADCACHEBASE - Decode Read Cache Base */
/*! @{ */
#define DEC400D_GCREGAHBDECREADCACHEBASE_CACHE_ADDRESS_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECREADCACHEBASE_CACHE_ADDRESS_SHIFT (0U)
#define DEC400D_GCREGAHBDECREADCACHEBASE_CACHE_ADDRESS(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADCACHEBASE_CACHE_ADDRESS_SHIFT)) & DEC400D_GCREGAHBDECREADCACHEBASE_CACHE_ADDRESS_MASK)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADCACHEBASE */
#define DEC400D_GCREGAHBDECREADCACHEBASE_COUNT   (32U)

/*! @name GCREGAHBDECCONTROL - Dec400D Control */
/*! @{ */
#define DEC400D_GCREGAHBDECCONTROL_FLUSH_MASK    (0x1U)
#define DEC400D_GCREGAHBDECCONTROL_FLUSH_SHIFT   (0U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_COMPRESSION_MASK (0x2U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_COMPRESSION_SHIFT (1U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_RAM_CLOCK_GATING_MASK (0x4U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_RAM_CLOCK_GATING_SHIFT (2U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_DEBUG_REGISTERS_MASK (0x8U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_DEBUG_REGISTERS_SHIFT (3U)
#define DEC400D_GCREGAHBDECCONTROL_SOFT_RESET_MASK (0x10U)
#define DEC400D_GCREGAHBDECCONTROL_SOFT_RESET_SHIFT (4U)
#define DEC400D_GCREGAHBDECCONTROL_TILE_STATUS_READ_ID_MASK (0x7C0U)
#define DEC400D_GCREGAHBDECCONTROL_TILE_STATUS_READ_ID_SHIFT (6U)
#define DEC400D_GCREGAHBDECCONTROL_TILE_STATUS_READ_ID(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECCONTROL_TILE_STATUS_READ_ID_SHIFT)) & DEC400D_GCREGAHBDECCONTROL_TILE_STATUS_READ_ID_MASK)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_HW_FLUSH_MASK (0x10000U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_HW_FLUSH_SHIFT (16U)
#define DEC400D_GCREGAHBDECCONTROL_CLK_DIS_MASK  (0x20000U)
#define DEC400D_GCREGAHBDECCONTROL_CLK_DIS_SHIFT (17U)
#define DEC400D_GCREGAHBDECCONTROL_SW_FLUSH_ID_MASK (0xFC0000U)
#define DEC400D_GCREGAHBDECCONTROL_SW_FLUSH_ID_SHIFT (18U)
#define DEC400D_GCREGAHBDECCONTROL_SW_FLUSH_ID(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECCONTROL_SW_FLUSH_ID_SHIFT)) & DEC400D_GCREGAHBDECCONTROL_SW_FLUSH_ID_MASK)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_MODULE_CLOCK_GATING_MASK (0x40000000U)
#define DEC400D_GCREGAHBDECCONTROL_DISABLE_MODULE_CLOCK_GATING_SHIFT (30U)
/*! @} */

/*! @name GCREGAHBDECINTRACKNOWLEDGE - Interrupt Acknowledge */
/*! @{ */
#define DEC400D_GCREGAHBDECINTRACKNOWLEDGE_INTR_VEC_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECINTRACKNOWLEDGE_INTR_VEC_SHIFT (0U)
#define DEC400D_GCREGAHBDECINTRACKNOWLEDGE_INTR_VEC(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECINTRACKNOWLEDGE_INTR_VEC_SHIFT)) & DEC400D_GCREGAHBDECINTRACKNOWLEDGE_INTR_VEC_MASK)
/*! @} */

/*! @name GCREGAHBDECINTRENBL - Interrupt Enable */
/*! @{ */
#define DEC400D_GCREGAHBDECINTRENBL_INTR_ENBL_VEC_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECINTRENBL_INTR_ENBL_VEC_SHIFT (0U)
#define DEC400D_GCREGAHBDECINTRENBL_INTR_ENBL_VEC(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECINTRENBL_INTR_ENBL_VEC_SHIFT)) & DEC400D_GCREGAHBDECINTRENBL_INTR_ENBL_VEC_MASK)
/*! @} */

/*! @name GCREGAHBDECTILESTATUSDEBUG - Tile Status Module Debug */
/*! @{ */
#define DEC400D_GCREGAHBDECTILESTATUSDEBUG_TILE_DEBUG_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTILESTATUSDEBUG_TILE_DEBUG_SHIFT (0U)
#define DEC400D_GCREGAHBDECTILESTATUSDEBUG_TILE_DEBUG(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTILESTATUSDEBUG_TILE_DEBUG_SHIFT)) & DEC400D_GCREGAHBDECTILESTATUSDEBUG_TILE_DEBUG_MASK)
/*! @} */

/*! @name GCREGAHBDECDECODERDEBUG - Decompression Module Debug */
/*! @{ */
#define DEC400D_GCREGAHBDECDECODERDEBUG_DEC_DEBUG_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECDECODERDEBUG_DEC_DEBUG_SHIFT (0U)
#define DEC400D_GCREGAHBDECDECODERDEBUG_DEC_DEBUG(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECDECODERDEBUG_DEC_DEBUG_SHIFT)) & DEC400D_GCREGAHBDECDECODERDEBUG_DEC_DEBUG_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADSIN - Total Reads In */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADSIN_RDIN_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADSIN_RDIN_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADSIN_RDIN_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADSIN_RDIN_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADSIN_RDIN_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADBURSTSIN - Total Read Data Count */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADBURSTSIN_RDIN_BURST_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSIN_RDIN_BURST_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSIN_RDIN_BURST_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADBURSTSIN_RDIN_BURST_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADBURSTSIN_RDIN_BURST_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADREQIN - Total Read Request In */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADREQIN_RDIN_REQ_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADREQIN_RDIN_REQ_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADREQIN_RDIN_REQ_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADREQIN_RDIN_REQ_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADREQIN_RDIN_REQ_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADLASTSIN - Total Input Read Last Number */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADLASTSIN_RDIN_LAST_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADLASTSIN_RDIN_LAST_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADLASTSIN_RDIN_LAST_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADLASTSIN_RDIN_LAST_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADLASTSIN_RDIN_LAST_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADSOUT - Total Reads Out */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADSOUT_RDOUT_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADSOUT_RDOUT_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADSOUT_RDOUT_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADSOUT_RDOUT_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADSOUT_RDOUT_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADBURSTSOUT - Total Read Bursts Out */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_RDOUT_BURST_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_RDOUT_BURST_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_RDOUT_BURST_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_RDOUT_BURST_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_RDOUT_BURST_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADREQOUT - Total Read Request Out */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADREQOUT_RDOUT_REQ_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADREQOUT_RDOUT_REQ_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADREQOUT_RDOUT_REQ_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADREQOUT_RDOUT_REQ_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADREQOUT_RDOUT_REQ_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECTOTALREADLASTSOUT - Total Read Last Out */
/*! @{ */
#define DEC400D_GCREGAHBDECTOTALREADLASTSOUT_RDOUT_LAST_COUNT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECTOTALREADLASTSOUT_RDOUT_LAST_COUNT_SHIFT (0U)
#define DEC400D_GCREGAHBDECTOTALREADLASTSOUT_RDOUT_LAST_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECTOTALREADLASTSOUT_RDOUT_LAST_COUNT_SHIFT)) & DEC400D_GCREGAHBDECTOTALREADLASTSOUT_RDOUT_LAST_COUNT_MASK)
/*! @} */

/*! @name GCREGAHBDECDEBUG0 - Debug Register 0 */
/*! @{ */
#define DEC400D_GCREGAHBDECDEBUG0_DEBUG0_MASK    (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECDEBUG0_DEBUG0_SHIFT   (0U)
#define DEC400D_GCREGAHBDECDEBUG0_DEBUG0(x)      (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECDEBUG0_DEBUG0_SHIFT)) & DEC400D_GCREGAHBDECDEBUG0_DEBUG0_MASK)
/*! @} */

/*! @name GCREGAHBDECDEBUG1 - Debug Register 1 */
/*! @{ */
#define DEC400D_GCREGAHBDECDEBUG1_DEBUG1_MASK    (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECDEBUG1_DEBUG1_SHIFT   (0U)
#define DEC400D_GCREGAHBDECDEBUG1_DEBUG1(x)      (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECDEBUG1_DEBUG1_SHIFT)) & DEC400D_GCREGAHBDECDEBUG1_DEBUG1_MASK)
/*! @} */

/*! @name GCREGAHBDECDEBUG2 - Debug register 2 */
/*! @{ */
#define DEC400D_GCREGAHBDECDEBUG2_DEBUG2_MASK    (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECDEBUG2_DEBUG2_SHIFT   (0U)
#define DEC400D_GCREGAHBDECDEBUG2_DEBUG2(x)      (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECDEBUG2_DEBUG2_SHIFT)) & DEC400D_GCREGAHBDECDEBUG2_DEBUG2_MASK)
/*! @} */

/*! @name GCREGAHBDECDEBUG3 - Debug Register 3 */
/*! @{ */
#define DEC400D_GCREGAHBDECDEBUG3_DEBUG3_MASK    (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECDEBUG3_DEBUG3_SHIFT   (0U)
#define DEC400D_GCREGAHBDECDEBUG3_DEBUG3(x)      (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECDEBUG3_DEBUG3_SHIFT)) & DEC400D_GCREGAHBDECDEBUG3_DEBUG3_MASK)
/*! @} */

/*! @name GCREGAHBDECCONTROLEX - GCREGAHBDECCONTROLEX */
/*! @{ */
#define DEC400D_GCREGAHBDECCONTROLEX_GCREGAHBDECCONTROLEX_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECCONTROLEX_GCREGAHBDECCONTROLEX_SHIFT (0U)
#define DEC400D_GCREGAHBDECCONTROLEX_GCREGAHBDECCONTROLEX(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECCONTROLEX_GCREGAHBDECCONTROLEX_SHIFT)) & DEC400D_GCREGAHBDECCONTROLEX_GCREGAHBDECCONTROLEX_MASK)
/*! @} */

/*! @name GCREGAHBDECSTATECOMMIT - GCREGAHBDECSTATECOMMIT */
/*! @{ */
#define DEC400D_GCREGAHBDECSTATECOMMIT_GCREGAHBDECSTATECOMMIT_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECSTATECOMMIT_GCREGAHBDECSTATECOMMIT_SHIFT (0U)
#define DEC400D_GCREGAHBDECSTATECOMMIT_GCREGAHBDECSTATECOMMIT(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECSTATECOMMIT_GCREGAHBDECSTATECOMMIT_SHIFT)) & DEC400D_GCREGAHBDECSTATECOMMIT_GCREGAHBDECSTATECOMMIT_MASK)
/*! @} */

/*! @name GCREGAHBDECSTATELOCK - GCREGAHBDECSTATELOCK */
/*! @{ */
#define DEC400D_GCREGAHBDECSTATELOCK_GCREGAHBDECSTATELOCK_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECSTATELOCK_GCREGAHBDECSTATELOCK_SHIFT (0U)
#define DEC400D_GCREGAHBDECSTATELOCK_GCREGAHBDECSTATELOCK(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECSTATELOCK_GCREGAHBDECSTATELOCK_SHIFT)) & DEC400D_GCREGAHBDECSTATELOCK_GCREGAHBDECSTATELOCK_MASK)
/*! @} */

/*! @name GCREGAHBDECREADEXCONFIG - Decode Read Extra Configuration */
/*! @{ */
#define DEC400D_GCREGAHBDECREADEXCONFIG_CBSR_WIDTH_MASK (0xFFF8U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_CBSR_WIDTH_SHIFT (3U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_CBSR_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADEXCONFIG_CBSR_WIDTH_SHIFT)) & DEC400D_GCREGAHBDECREADEXCONFIG_CBSR_WIDTH_MASK)
#define DEC400D_GCREGAHBDECREADEXCONFIG_BIT_DEPTH_MASK (0x70000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_BIT_DEPTH_SHIFT (16U)
/*! BIT_DEPTH - Bit depth
 *  0b000..8 bit
 *  0b001..10 bit
 *  0b010..12 bit
 *  0b011..16 bit
 */
#define DEC400D_GCREGAHBDECREADEXCONFIG_BIT_DEPTH(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADEXCONFIG_BIT_DEPTH_SHIFT)) & DEC400D_GCREGAHBDECREADEXCONFIG_BIT_DEPTH_MASK)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TILE_Y_MASK (0x80000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TILE_Y_SHIFT (19U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_STREAM_MODE_MASK (0x1F00000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_STREAM_MODE_SHIFT (20U)
/*! STREAM_MODE - Stream mode
 *  0b00000..Default
 *  0b00001..ISA_STREAM0
 *  0b00010..ISA_STREAM1
 *  0b00011..ISA_STREAM2
 *  0b00100..ISA_STREAM3
 *  0b00101..TNR_STREAM_Y
 *  0b00110..TNR_STREAM_UV
 *  0b00111..GDC_STREAM_Y
 *  0b01000..GDC_STREAM_U
 *  0b01001..GDC_STREAM_V
 *  0b01010..VPU_SRC_Y
 *  0b01011..VPR_SRC_UV
 *  0b01100..VPU_REF_Y
 *  0b01101..VPU_REF_UV
 *  0b01110..XYZ_STREAM_AY
 *  0b01111..XYZ_STREAM_AU
 *  0b10000..XYZ_STREAM_AV
 *  0b10001..XYZ_STREAM_BY
 *  0b10010..XYZ_STREAM_BU
 *  0b10011..XYZ_STREAM_BV
 */
#define DEC400D_GCREGAHBDECREADEXCONFIG_STREAM_MODE(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADEXCONFIG_STREAM_MODE_SHIFT)) & DEC400D_GCREGAHBDECREADEXCONFIG_STREAM_MODE_MASK)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TS_CACHE_READ_MODE_MASK (0x4000000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TS_CACHE_READ_MODE_SHIFT (26U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_PIXEL_CACHE_REPLACEMENT_MASK (0x8000000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_PIXEL_CACHE_REPLACEMENT_SHIFT (27U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_INTEL_P010_MASK (0x10000000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_INTEL_P010_SHIFT (28U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TS_CACHE_REPLACEMENT_MASK (0x20000000U)
#define DEC400D_GCREGAHBDECREADEXCONFIG_TS_CACHE_REPLACEMENT_SHIFT (29U)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADEXCONFIG */
#define DEC400D_GCREGAHBDECREADEXCONFIG_COUNT    (32U)

/*! @name GCREGAHBDECREADSTRIDE - Decoder Read Stride */
/*! @{ */
#define DEC400D_GCREGAHBDECREADSTRIDE_STRIDE_MASK (0x3FFFFU)
#define DEC400D_GCREGAHBDECREADSTRIDE_STRIDE_SHIFT (0U)
#define DEC400D_GCREGAHBDECREADSTRIDE_STRIDE(x)  (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADSTRIDE_STRIDE_SHIFT)) & DEC400D_GCREGAHBDECREADSTRIDE_STRIDE_MASK)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADSTRIDE */
#define DEC400D_GCREGAHBDECREADSTRIDE_COUNT      (32U)

/*! @name GCREGAHBDECREADBUFFEREND - Decoder Read Buffer End */
/*! @{ */
#define DEC400D_GCREGAHBDECREADBUFFEREND_RD_BUFF_END_MASK (0xFFFFFFFFU)
#define DEC400D_GCREGAHBDECREADBUFFEREND_RD_BUFF_END_SHIFT (0U)
#define DEC400D_GCREGAHBDECREADBUFFEREND_RD_BUFF_END(x) (((uint32_t)(((uint32_t)(x)) << DEC400D_GCREGAHBDECREADBUFFEREND_RD_BUFF_END_SHIFT)) & DEC400D_GCREGAHBDECREADBUFFEREND_RD_BUFF_END_MASK)
/*! @} */

/* The count of DEC400D_GCREGAHBDECREADBUFFEREND */
#define DEC400D_GCREGAHBDECREADBUFFEREND_COUNT   (32U)


/*!
 * @}
 */ /* end of group DEC400D_Register_Masks */


/* DEC400D - Peripheral instance base addresses */
/** Peripheral DCSS__DEC400D base pointer */
#define DCSS__DEC400D_BASE_PTR                   ((DEC400D_MemMapPtr)0x32E15000u)
/** Array initializer of DEC400D peripheral base pointers */
#define DEC400D_BASE_PTRS                        { DCSS__DEC400D_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DEC400D - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DEC400D_Register_Accessor_Macros DEC400D - Register accessor macros
 * @{
 */


/* DEC400D - Register instance definitions */
/* DCSS__DEC400D */
#define DCSS__DEC400D_GCCHIPREV                  DEC400D_GCCHIPREV_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCCHIPDATE                 DEC400D_GCCHIPDATE_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGHICHIPPATCHREV        DEC400D_GCREGHICHIPPATCHREV_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCPRODUCTID                DEC400D_GCPRODUCTID_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG0     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG1     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG2     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG3     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG4     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG5     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG6     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG7     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG8     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG9     DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG10    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG11    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG12    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG13    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG14    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG15    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG16    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG17    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG18    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG19    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG20    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG21    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG22    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG23    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG24    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG25    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG26    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG27    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG28    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG29    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG30    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG31    DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,31)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE0 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE1 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE2 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE3 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE4 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE5 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE6 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE7 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE8 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE9 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE10 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE11 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE12 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE13 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE14 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE15 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE16 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE17 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE18 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE19 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE20 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE21 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE22 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE23 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE24 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE25 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE26 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE27 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE28 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE29 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE30 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE31 DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,31)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE0  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE1  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE2  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE3  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE4  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE5  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE6  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE7  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE8  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE9  DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE10 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE11 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE12 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE13 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE14 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE15 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE16 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE17 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE18 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE19 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE20 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE21 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE22 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE23 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE24 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE25 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE26 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE27 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE28 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE29 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE30 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE31 DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,31)
#define DCSS__DEC400D_GCREGAHBDECCONTROL         DEC400D_GCREGAHBDECCONTROL_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECINTRACKNOWLEDGE DEC400D_GCREGAHBDECINTRACKNOWLEDGE_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECINTRENBL        DEC400D_GCREGAHBDECINTRENBL_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTILESTATUSDEBUG DEC400D_GCREGAHBDECTILESTATUSDEBUG_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECDECODERDEBUG    DEC400D_GCREGAHBDECDECODERDEBUG_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADSIN    DEC400D_GCREGAHBDECTOTALREADSIN_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADBURSTSIN DEC400D_GCREGAHBDECTOTALREADBURSTSIN_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADREQIN  DEC400D_GCREGAHBDECTOTALREADREQIN_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADLASTSIN DEC400D_GCREGAHBDECTOTALREADLASTSIN_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADSOUT   DEC400D_GCREGAHBDECTOTALREADSOUT_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADBURSTSOUT DEC400D_GCREGAHBDECTOTALREADBURSTSOUT_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADREQOUT DEC400D_GCREGAHBDECTOTALREADREQOUT_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECTOTALREADLASTSOUT DEC400D_GCREGAHBDECTOTALREADLASTSOUT_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECDEBUG0          DEC400D_GCREGAHBDECDEBUG0_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECDEBUG1          DEC400D_GCREGAHBDECDEBUG1_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECDEBUG2          DEC400D_GCREGAHBDECDEBUG2_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECDEBUG3          DEC400D_GCREGAHBDECDEBUG3_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECCONTROLEX       DEC400D_GCREGAHBDECCONTROLEX_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECSTATECOMMIT     DEC400D_GCREGAHBDECSTATECOMMIT_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECSTATELOCK       DEC400D_GCREGAHBDECSTATELOCK_REG(DCSS__DEC400D_BASE_PTR)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG0   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG1   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG2   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG3   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG4   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG5   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG6   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG7   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG8   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG9   DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG10  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG11  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG12  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG13  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG14  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG15  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG16  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG17  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG18  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG19  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG20  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG21  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG22  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG23  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG24  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG25  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG26  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG27  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG28  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG29  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG30  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG31  DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,31)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE0     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE1     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE2     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE3     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE4     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE5     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE6     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE7     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE8     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE9     DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE10    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE11    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE12    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE13    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE14    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE15    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE16    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE17    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE18    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE19    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE20    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE21    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE22    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE23    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE24    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE25    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE26    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE27    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE28    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE29    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE30    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE31    DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,31)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND0  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,0)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND1  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,1)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND2  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,2)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND3  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,3)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND4  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,4)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND5  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,5)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND6  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,6)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND7  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,7)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND8  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,8)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND9  DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,9)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND10 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,10)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND11 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,11)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND12 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,12)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND13 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,13)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND14 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,14)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND15 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,15)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND16 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,16)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND17 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,17)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND18 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,18)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND19 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,19)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND20 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,20)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND21 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,21)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND22 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,22)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND23 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,23)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND24 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,24)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND25 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,25)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND26 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,26)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND27 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,27)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND28 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,28)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND29 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,29)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND30 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,30)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND31 DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,31)

/* DEC400D - Register array accessors */
#define DCSS__DEC400D_GCREGAHBDECREADCONFIG(index) DEC400D_GCREGAHBDECREADCONFIG_REG(DCSS__DEC400D_BASE_PTR,index)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFERBASE(index) DEC400D_GCREGAHBDECREADBUFFERBASE_REG(DCSS__DEC400D_BASE_PTR,index)
#define DCSS__DEC400D_GCREGAHBDECREADCACHEBASE(index) DEC400D_GCREGAHBDECREADCACHEBASE_REG(DCSS__DEC400D_BASE_PTR,index)
#define DCSS__DEC400D_GCREGAHBDECREADEXCONFIG(index) DEC400D_GCREGAHBDECREADEXCONFIG_REG(DCSS__DEC400D_BASE_PTR,index)
#define DCSS__DEC400D_GCREGAHBDECREADSTRIDE(index) DEC400D_GCREGAHBDECREADSTRIDE_REG(DCSS__DEC400D_BASE_PTR,index)
#define DCSS__DEC400D_GCREGAHBDECREADBUFFEREND(index) DEC400D_GCREGAHBDECREADBUFFEREND_REG(DCSS__DEC400D_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DEC400D_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DEC400D_Peripheral */


/* ----------------------------------------------------------------------------
   -- DPR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DPR_Peripheral DPR
 * @{
 */

/** DPR - Peripheral register structure */
typedef struct DPR_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< System Control 0, offset: 0x0 */
    uint32_t SET;                                    /**< System Control 0, offset: 0x4 */
    uint32_t CLR;                                    /**< System Control 0, offset: 0x8 */
    uint32_t TOG;                                    /**< System Control 0, offset: 0xC */
  } SYSTEM_CTRL0;
  uint8_t RESERVED_0[16];
  struct {                                         /* offset: 0x20 */
    uint32_t RW;                                     /**< Interrupt Mask, offset: 0x20 */
    uint32_t SET;                                    /**< Interrupt Mask, offset: 0x24 */
    uint32_t CLR;                                    /**< Interrupt Mask, offset: 0x28 */
    uint32_t TOG;                                    /**< Interrupt Mask, offset: 0x2C */
  } IRQ_MASK;
  struct {                                         /* offset: 0x30 */
    uint32_t RW;                                     /**< Status Register of Masked IRQ, offset: 0x30 */
    uint32_t SET;                                    /**< Status Register of Masked IRQ, offset: 0x34 */
    uint32_t CLR;                                    /**< Status Register of Masked IRQ, offset: 0x38 */
    uint32_t TOG;                                    /**< Status Register of Masked IRQ, offset: 0x3C */
  } IRQ_MASK_STATUS;
  struct {                                         /* offset: 0x40 */
    uint32_t RW;                                     /**< Status of Non-Masked IRQ, offset: 0x40 */
    uint32_t SET;                                    /**< Status of Non-Masked IRQ, offset: 0x44 */
    uint32_t CLR;                                    /**< Status of Non-Masked IRQ, offset: 0x48 */
    uint32_t TOG;                                    /**< Status of Non-Masked IRQ, offset: 0x4C */
  } IRQ_NONMASK_STATUS;
  struct {                                         /* offset: 0x50 */
    uint32_t RW;                                     /**< Mode Control 0, offset: 0x50 */
    uint32_t SET;                                    /**< Mode Control 0, offset: 0x54 */
    uint32_t CLR;                                    /**< Mode Control 0, offset: 0x58 */
    uint32_t TOG;                                    /**< Mode Control 0, offset: 0x5C */
  } MODE_CTRL0;
  uint8_t RESERVED_1[16];
  struct {                                         /* offset: 0x70 */
    uint32_t RW;                                     /**< Frame Control 0, offset: 0x70 */
    uint32_t SET;                                    /**< Frame Control 0, offset: 0x74 */
    uint32_t CLR;                                    /**< Frame Control 0, offset: 0x78 */
    uint32_t TOG;                                    /**< Frame Control 0, offset: 0x7C */
  } FRAME_CTRL0;
  uint8_t RESERVED_2[16];
  struct {                                         /* offset: 0x90 */
    uint32_t RW;                                     /**< Frame 1-Plane Control 0, offset: 0x90 */
    uint32_t SET;                                    /**< Frame 1-Plane Control 0, offset: 0x94 */
    uint32_t CLR;                                    /**< Frame 1-Plane Control 0, offset: 0x98 */
    uint32_t TOG;                                    /**< Frame 1-Plane Control 0, offset: 0x9C */
  } FRAME_1P_CTRL0;
  struct {                                         /* offset: 0xA0 */
    uint32_t RW;                                     /**< Frame 1-Plane Pix X Control, offset: 0xA0 */
    uint32_t SET;                                    /**< Frame 1-Plane Pix X Control, offset: 0xA4 */
    uint32_t CLR;                                    /**< Frame 1-Plane Pix X Control, offset: 0xA8 */
    uint32_t TOG;                                    /**< Frame 1-Plane Pix X Control, offset: 0xAC */
  } FRAME_1P_PIX_X_CTRL;
  struct {                                         /* offset: 0xB0 */
    uint32_t RW;                                     /**< Frame 1-Plane Pix Y Control, offset: 0xB0 */
    uint32_t SET;                                    /**< Frame 1-Plane Pix Y Control, offset: 0xB4 */
    uint32_t CLR;                                    /**< Frame 1-Plane Pix Y Control, offset: 0xB8 */
    uint32_t TOG;                                    /**< Frame 1-Plane Pix Y Control, offset: 0xBC */
  } FRAME_1P_PIX_Y_CTRL;
  struct {                                         /* offset: 0xC0 */
    uint32_t RW;                                     /**< Frame 1-Plane Base Address Control 0, offset: 0xC0 */
    uint32_t SET;                                    /**< Frame 1-Plane Base Address Control 0, offset: 0xC4 */
    uint32_t CLR;                                    /**< Frame 1-Plane Base Address Control 0, offset: 0xC8 */
    uint32_t TOG;                                    /**< Frame 1-Plane Base Address Control 0, offset: 0xCC */
  } FRAME_1P_BASE_ADDR_CTRL0;
  uint8_t RESERVED_3[16];
  struct {                                         /* offset: 0xE0 */
    uint32_t RW;                                     /**< Frame 2-Plane Control 0, offset: 0xE0 */
    uint32_t SET;                                    /**< Frame 2-Plane Control 0, offset: 0xE4 */
    uint32_t CLR;                                    /**< Frame 2-Plane Control 0, offset: 0xE8 */
    uint32_t TOG;                                    /**< Frame 2-Plane Control 0, offset: 0xEC */
  } FRAME_2P_CTRL0;
  struct {                                         /* offset: 0xF0 */
    uint32_t RW;                                     /**< Frame 2-Plane Pix X Control, offset: 0xF0 */
    uint32_t SET;                                    /**< Frame 2-Plane Pix X Control, offset: 0xF4 */
    uint32_t CLR;                                    /**< Frame 2-Plane Pix X Control, offset: 0xF8 */
    uint32_t TOG;                                    /**< Frame 2-Plane Pix X Control, offset: 0xFC */
  } FRAME_2P_PIX_X_CTRL;
  struct {                                         /* offset: 0x100 */
    uint32_t RW;                                     /**< Frame 2-Plane Pix Y Control, offset: 0x100 */
    uint32_t SET;                                    /**< Frame 2-Plane Pix Y Control, offset: 0x104 */
    uint32_t CLR;                                    /**< Frame 2-Plane Pix Y Control, offset: 0x108 */
    uint32_t TOG;                                    /**< Frame 2-Plane Pix Y Control, offset: 0x10C */
  } FRAME_2P_PIX_Y_CTRL;
  struct {                                         /* offset: 0x110 */
    uint32_t RW;                                     /**< Frame 2-Plane Base Address Control 0, offset: 0x110 */
    uint32_t SET;                                    /**< Frame 2-Plane Base Address Control 0, offset: 0x114 */
    uint32_t CLR;                                    /**< Frame 2-Plane Base Address Control 0, offset: 0x118 */
    uint32_t TOG;                                    /**< Frame 2-Plane Base Address Control 0, offset: 0x11C */
  } FRAME_2P_BASE_ADDR_CTRL0;
  uint8_t RESERVED_4[224];
  struct {                                         /* offset: 0x200 */
    uint32_t RW;                                     /**< RTRAM Control 0, offset: 0x200 */
    uint32_t SET;                                    /**< RTRAM Control 0, offset: 0x204 */
    uint32_t CLR;                                    /**< RTRAM Control 0, offset: 0x208 */
    uint32_t TOG;                                    /**< RTRAM Control 0, offset: 0x20C */
  } RTRAM_CTRL0;
} volatile *DPR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DPR_Register_Accessor_Macros DPR - Register accessor macros
 * @{
 */


/* DPR - Register accessors */
#define DPR_SYSTEM_CTRL0_REG(base)               ((base)->SYSTEM_CTRL0.RW)
#define DPR_SYSTEM_CTRL0_SET_REG(base)           ((base)->SYSTEM_CTRL0.SET)
#define DPR_SYSTEM_CTRL0_CLR_REG(base)           ((base)->SYSTEM_CTRL0.CLR)
#define DPR_SYSTEM_CTRL0_TOG_REG(base)           ((base)->SYSTEM_CTRL0.TOG)
#define DPR_IRQ_MASK_REG(base)                   ((base)->IRQ_MASK.RW)
#define DPR_IRQ_MASK_SET_REG(base)               ((base)->IRQ_MASK.SET)
#define DPR_IRQ_MASK_CLR_REG(base)               ((base)->IRQ_MASK.CLR)
#define DPR_IRQ_MASK_TOG_REG(base)               ((base)->IRQ_MASK.TOG)
#define DPR_IRQ_MASK_STATUS_REG(base)            ((base)->IRQ_MASK_STATUS.RW)
#define DPR_IRQ_MASK_STATUS_SET_REG(base)        ((base)->IRQ_MASK_STATUS.SET)
#define DPR_IRQ_MASK_STATUS_CLR_REG(base)        ((base)->IRQ_MASK_STATUS.CLR)
#define DPR_IRQ_MASK_STATUS_TOG_REG(base)        ((base)->IRQ_MASK_STATUS.TOG)
#define DPR_IRQ_NONMASK_STATUS_REG(base)         ((base)->IRQ_NONMASK_STATUS.RW)
#define DPR_IRQ_NONMASK_STATUS_SET_REG(base)     ((base)->IRQ_NONMASK_STATUS.SET)
#define DPR_IRQ_NONMASK_STATUS_CLR_REG(base)     ((base)->IRQ_NONMASK_STATUS.CLR)
#define DPR_IRQ_NONMASK_STATUS_TOG_REG(base)     ((base)->IRQ_NONMASK_STATUS.TOG)
#define DPR_MODE_CTRL0_REG(base)                 ((base)->MODE_CTRL0.RW)
#define DPR_MODE_CTRL0_SET_REG(base)             ((base)->MODE_CTRL0.SET)
#define DPR_MODE_CTRL0_CLR_REG(base)             ((base)->MODE_CTRL0.CLR)
#define DPR_MODE_CTRL0_TOG_REG(base)             ((base)->MODE_CTRL0.TOG)
#define DPR_FRAME_CTRL0_REG(base)                ((base)->FRAME_CTRL0.RW)
#define DPR_FRAME_CTRL0_SET_REG(base)            ((base)->FRAME_CTRL0.SET)
#define DPR_FRAME_CTRL0_CLR_REG(base)            ((base)->FRAME_CTRL0.CLR)
#define DPR_FRAME_CTRL0_TOG_REG(base)            ((base)->FRAME_CTRL0.TOG)
#define DPR_FRAME_1P_CTRL0_REG(base)             ((base)->FRAME_1P_CTRL0.RW)
#define DPR_FRAME_1P_CTRL0_SET_REG(base)         ((base)->FRAME_1P_CTRL0.SET)
#define DPR_FRAME_1P_CTRL0_CLR_REG(base)         ((base)->FRAME_1P_CTRL0.CLR)
#define DPR_FRAME_1P_CTRL0_TOG_REG(base)         ((base)->FRAME_1P_CTRL0.TOG)
#define DPR_FRAME_1P_PIX_X_CTRL_REG(base)        ((base)->FRAME_1P_PIX_X_CTRL.RW)
#define DPR_FRAME_1P_PIX_X_CTRL_SET_REG(base)    ((base)->FRAME_1P_PIX_X_CTRL.SET)
#define DPR_FRAME_1P_PIX_X_CTRL_CLR_REG(base)    ((base)->FRAME_1P_PIX_X_CTRL.CLR)
#define DPR_FRAME_1P_PIX_X_CTRL_TOG_REG(base)    ((base)->FRAME_1P_PIX_X_CTRL.TOG)
#define DPR_FRAME_1P_PIX_Y_CTRL_REG(base)        ((base)->FRAME_1P_PIX_Y_CTRL.RW)
#define DPR_FRAME_1P_PIX_Y_CTRL_SET_REG(base)    ((base)->FRAME_1P_PIX_Y_CTRL.SET)
#define DPR_FRAME_1P_PIX_Y_CTRL_CLR_REG(base)    ((base)->FRAME_1P_PIX_Y_CTRL.CLR)
#define DPR_FRAME_1P_PIX_Y_CTRL_TOG_REG(base)    ((base)->FRAME_1P_PIX_Y_CTRL.TOG)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_REG(base)   ((base)->FRAME_1P_BASE_ADDR_CTRL0.RW)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_SET_REG(base) ((base)->FRAME_1P_BASE_ADDR_CTRL0.SET)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_CLR_REG(base) ((base)->FRAME_1P_BASE_ADDR_CTRL0.CLR)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_TOG_REG(base) ((base)->FRAME_1P_BASE_ADDR_CTRL0.TOG)
#define DPR_FRAME_2P_CTRL0_REG(base)             ((base)->FRAME_2P_CTRL0.RW)
#define DPR_FRAME_2P_CTRL0_SET_REG(base)         ((base)->FRAME_2P_CTRL0.SET)
#define DPR_FRAME_2P_CTRL0_CLR_REG(base)         ((base)->FRAME_2P_CTRL0.CLR)
#define DPR_FRAME_2P_CTRL0_TOG_REG(base)         ((base)->FRAME_2P_CTRL0.TOG)
#define DPR_FRAME_2P_PIX_X_CTRL_REG(base)        ((base)->FRAME_2P_PIX_X_CTRL.RW)
#define DPR_FRAME_2P_PIX_X_CTRL_SET_REG(base)    ((base)->FRAME_2P_PIX_X_CTRL.SET)
#define DPR_FRAME_2P_PIX_X_CTRL_CLR_REG(base)    ((base)->FRAME_2P_PIX_X_CTRL.CLR)
#define DPR_FRAME_2P_PIX_X_CTRL_TOG_REG(base)    ((base)->FRAME_2P_PIX_X_CTRL.TOG)
#define DPR_FRAME_2P_PIX_Y_CTRL_REG(base)        ((base)->FRAME_2P_PIX_Y_CTRL.RW)
#define DPR_FRAME_2P_PIX_Y_CTRL_SET_REG(base)    ((base)->FRAME_2P_PIX_Y_CTRL.SET)
#define DPR_FRAME_2P_PIX_Y_CTRL_CLR_REG(base)    ((base)->FRAME_2P_PIX_Y_CTRL.CLR)
#define DPR_FRAME_2P_PIX_Y_CTRL_TOG_REG(base)    ((base)->FRAME_2P_PIX_Y_CTRL.TOG)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_REG(base)   ((base)->FRAME_2P_BASE_ADDR_CTRL0.RW)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_SET_REG(base) ((base)->FRAME_2P_BASE_ADDR_CTRL0.SET)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_CLR_REG(base) ((base)->FRAME_2P_BASE_ADDR_CTRL0.CLR)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_TOG_REG(base) ((base)->FRAME_2P_BASE_ADDR_CTRL0.TOG)
#define DPR_RTRAM_CTRL0_REG(base)                ((base)->RTRAM_CTRL0.RW)
#define DPR_RTRAM_CTRL0_SET_REG(base)            ((base)->RTRAM_CTRL0.SET)
#define DPR_RTRAM_CTRL0_CLR_REG(base)            ((base)->RTRAM_CTRL0.CLR)
#define DPR_RTRAM_CTRL0_TOG_REG(base)            ((base)->RTRAM_CTRL0.TOG)

/*!
 * @}
 */ /* end of group DPR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DPR_Register_Masks DPR Register Masks
 * @{
 */

/*! @name SYSTEM_CTRL0 - System Control 0 */
/*! @{ */
#define DPR_SYSTEM_CTRL0_RUN_EN_MASK             (0x1U)
#define DPR_SYSTEM_CTRL0_RUN_EN_SHIFT            (0U)
#define DPR_SYSTEM_CTRL0_SOFT_RESET_MASK         (0x2U)
#define DPR_SYSTEM_CTRL0_SOFT_RESET_SHIFT        (1U)
#define DPR_SYSTEM_CTRL0_REPEAT_EN_MASK          (0x4U)
#define DPR_SYSTEM_CTRL0_REPEAT_EN_SHIFT         (2U)
#define DPR_SYSTEM_CTRL0_SHADOW_LOAD_EN_MASK     (0x8U)
#define DPR_SYSTEM_CTRL0_SHADOW_LOAD_EN_SHIFT    (3U)
#define DPR_SYSTEM_CTRL0_SW_SHADOW_LOAD_SEL_MASK (0x10U)
#define DPR_SYSTEM_CTRL0_SW_SHADOW_LOAD_SEL_SHIFT (4U)
#define DPR_SYSTEM_CTRL0_BCMD2AXI_MSTR_ID_CTRL_MASK (0x10000U)
#define DPR_SYSTEM_CTRL0_BCMD2AXI_MSTR_ID_CTRL_SHIFT (16U)
/*! @} */

/*! @name IRQ_MASK - Interrupt Mask */
/*! @{ */
#define DPR_IRQ_MASK_IRQ_DPR_CTRL_DONE_MASK      (0x1U)
#define DPR_IRQ_MASK_IRQ_DPR_CTRL_DONE_SHIFT     (0U)
#define DPR_IRQ_MASK_IRQ_DPR_RUN_MASK            (0x2U)
#define DPR_IRQ_MASK_IRQ_DPR_RUN_SHIFT           (1U)
#define DPR_IRQ_MASK_IRQ_DPR_SHADOW_LOADED_MASK_MASK (0x4U)
#define DPR_IRQ_MASK_IRQ_DPR_SHADOW_LOADED_MASK_SHIFT (2U)
#define DPR_IRQ_MASK_IRQ_AXI_READ_ERROR_MASK     (0x8U)
#define DPR_IRQ_MASK_IRQ_AXI_READ_ERROR_SHIFT    (3U)
#define DPR_IRQ_MASK_DPR2RTR_YRGB_FIFO_OVFL_MASK (0x10U)
#define DPR_IRQ_MASK_DPR2RTR_YRGB_FIFO_OVFL_SHIFT (4U)
#define DPR_IRQ_MASK_DPR2RTR_UV_FIFO_OVFL_MASK   (0x20U)
#define DPR_IRQ_MASK_DPR2RTR_UV_FIFO_OVFL_SHIFT  (5U)
#define DPR_IRQ_MASK_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_MASK (0x40U)
#define DPR_IRQ_MASK_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_SHIFT (6U)
#define DPR_IRQ_MASK_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_MASK (0x80U)
#define DPR_IRQ_MASK_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_SHIFT (7U)
/*! @} */

/*! @name IRQ_MASK_STATUS - Status Register of Masked IRQ */
/*! @{ */
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_CTRL_DONE_MASK (0x1U)
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_CTRL_DONE_SHIFT (0U)
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_RUN_MASK     (0x2U)
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_RUN_SHIFT    (1U)
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_SHADOW_LOADED_MASK (0x4U)
#define DPR_IRQ_MASK_STATUS_IRQ_DPR_SHADOW_LOADED_SHIFT (2U)
#define DPR_IRQ_MASK_STATUS_IRQ_AXI_READ_ERROR_MASK (0x8U)
#define DPR_IRQ_MASK_STATUS_IRQ_AXI_READ_ERROR_SHIFT (3U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_YRGB_FIFO_OVFL_MASK (0x10U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_YRGB_FIFO_OVFL_SHIFT (4U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_UV_FIFO_OVFL_MASK (0x20U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_UV_FIFO_OVFL_SHIFT (5U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_MASK (0x40U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_SHIFT (6U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_MASK (0x80U)
#define DPR_IRQ_MASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_SHIFT (7U)
/*! @} */

/*! @name IRQ_NONMASK_STATUS - Status of Non-Masked IRQ */
/*! @{ */
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_CTRL_DONE_MASK (0x1U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_CTRL_DONE_SHIFT (0U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_RUN_MASK  (0x2U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_RUN_SHIFT (1U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_SHADOW_LOADED_NMSTAT_MASK (0x4U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_DPR_SHADOW_LOADED_NMSTAT_SHIFT (2U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_AXI_READ_ERROR_MASK (0x8U)
#define DPR_IRQ_NONMASK_STATUS_IRQ_AXI_READ_ERROR_SHIFT (3U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_YRGB_FIFO_OVFL_MASK (0x10U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_YRGB_FIFO_OVFL_SHIFT (4U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_UV_FIFO_OVFL_MASK (0x20U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_UV_FIFO_OVFL_SHIFT (5U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_MASK (0x40U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_YRGB_ERROR_SHIFT (6U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_MASK (0x80U)
#define DPR_IRQ_NONMASK_STATUS_DPR2RTR_FIFO_LOAD_BUF_RDY_UV_ERROR_SHIFT (7U)
/*! @} */

/*! @name MODE_CTRL0 - Mode Control 0 */
/*! @{ */
#define DPR_MODE_CTRL0_RTR_3BUF_EN_MASK          (0x1U)
#define DPR_MODE_CTRL0_RTR_3BUF_EN_SHIFT         (0U)
#define DPR_MODE_CTRL0_RTR_4LINE_BUF_EN_MASK     (0x2U)
#define DPR_MODE_CTRL0_RTR_4LINE_BUF_EN_SHIFT    (1U)
#define DPR_MODE_CTRL0_TILE_TYPE_MASK            (0x1CU)
#define DPR_MODE_CTRL0_TILE_TYPE_SHIFT           (2U)
#define DPR_MODE_CTRL0_TILE_TYPE(x)              (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_TILE_TYPE_SHIFT)) & DPR_MODE_CTRL0_TILE_TYPE_MASK)
#define DPR_MODE_CTRL0_YUV_EN_MASK               (0x40U)
#define DPR_MODE_CTRL0_YUV_EN_SHIFT              (6U)
#define DPR_MODE_CTRL0_COMP_2PLANE_EN_MASK       (0x80U)
#define DPR_MODE_CTRL0_COMP_2PLANE_EN_SHIFT      (7U)
#define DPR_MODE_CTRL0_PIX_SIZE_MASK             (0x300U)
#define DPR_MODE_CTRL0_PIX_SIZE_SHIFT            (8U)
#define DPR_MODE_CTRL0_PIX_SIZE(x)               (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_PIX_SIZE_SHIFT)) & DPR_MODE_CTRL0_PIX_SIZE_MASK)
#define DPR_MODE_CTRL0_PIX_LUMA_UV_SWAP_MASK     (0x400U)
#define DPR_MODE_CTRL0_PIX_LUMA_UV_SWAP_SHIFT    (10U)
#define DPR_MODE_CTRL0_PIX_UV_SWAP_MASK          (0x800U)
#define DPR_MODE_CTRL0_PIX_UV_SWAP_SHIFT         (11U)
#define DPR_MODE_CTRL0_B_COMP_SEL_MASK           (0x3000U)
#define DPR_MODE_CTRL0_B_COMP_SEL_SHIFT          (12U)
#define DPR_MODE_CTRL0_B_COMP_SEL(x)             (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_B_COMP_SEL_SHIFT)) & DPR_MODE_CTRL0_B_COMP_SEL_MASK)
#define DPR_MODE_CTRL0_G_COMP_SEL_MASK           (0xC000U)
#define DPR_MODE_CTRL0_G_COMP_SEL_SHIFT          (14U)
#define DPR_MODE_CTRL0_G_COMP_SEL(x)             (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_G_COMP_SEL_SHIFT)) & DPR_MODE_CTRL0_G_COMP_SEL_MASK)
#define DPR_MODE_CTRL0_R_COMP_SEL_MASK           (0x30000U)
#define DPR_MODE_CTRL0_R_COMP_SEL_SHIFT          (16U)
#define DPR_MODE_CTRL0_R_COMP_SEL(x)             (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_R_COMP_SEL_SHIFT)) & DPR_MODE_CTRL0_R_COMP_SEL_MASK)
#define DPR_MODE_CTRL0_A_COMP_SEL_MASK           (0xC0000U)
#define DPR_MODE_CTRL0_A_COMP_SEL_SHIFT          (18U)
#define DPR_MODE_CTRL0_A_COMP_SEL(x)             (((uint32_t)(((uint32_t)(x)) << DPR_MODE_CTRL0_A_COMP_SEL_SHIFT)) & DPR_MODE_CTRL0_A_COMP_SEL_MASK)
/*! @} */

/*! @name FRAME_CTRL0 - Frame Control 0 */
/*! @{ */
#define DPR_FRAME_CTRL0_HFLIP_EN_MASK            (0x1U)
#define DPR_FRAME_CTRL0_HFLIP_EN_SHIFT           (0U)
#define DPR_FRAME_CTRL0_VFLIP_EN_MASK            (0x2U)
#define DPR_FRAME_CTRL0_VFLIP_EN_SHIFT           (1U)
#define DPR_FRAME_CTRL0_ROT_ENC_MASK             (0xCU)
#define DPR_FRAME_CTRL0_ROT_ENC_SHIFT            (2U)
#define DPR_FRAME_CTRL0_ROT_ENC(x)               (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_CTRL0_ROT_ENC_SHIFT)) & DPR_FRAME_CTRL0_ROT_ENC_MASK)
#define DPR_FRAME_CTRL0_ROT_FLIP_ORDER_EN_MASK   (0x10U)
#define DPR_FRAME_CTRL0_ROT_FLIP_ORDER_EN_SHIFT  (4U)
#define DPR_FRAME_CTRL0_PITCH_MASK               (0xFFFF0000U)
#define DPR_FRAME_CTRL0_PITCH_SHIFT              (16U)
#define DPR_FRAME_CTRL0_PITCH(x)                 (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_CTRL0_PITCH_SHIFT)) & DPR_FRAME_CTRL0_PITCH_MASK)
/*! @} */

/*! @name FRAME_1P_CTRL0 - Frame 1-Plane Control 0 */
/*! @{ */
#define DPR_FRAME_1P_CTRL0_MAX_BYTES_PREQ_MASK   (0x7U)
#define DPR_FRAME_1P_CTRL0_MAX_BYTES_PREQ_SHIFT  (0U)
#define DPR_FRAME_1P_CTRL0_MAX_BYTES_PREQ(x)     (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_CTRL0_MAX_BYTES_PREQ_SHIFT)) & DPR_FRAME_1P_CTRL0_MAX_BYTES_PREQ_MASK)
/*! @} */

/*! @name FRAME_1P_PIX_X_CTRL - Frame 1-Plane Pix X Control */
/*! @{ */
#define DPR_FRAME_1P_PIX_X_CTRL_NUM_X_PIX_WIDE_MASK (0xFFFFU)
#define DPR_FRAME_1P_PIX_X_CTRL_NUM_X_PIX_WIDE_SHIFT (0U)
#define DPR_FRAME_1P_PIX_X_CTRL_NUM_X_PIX_WIDE(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_PIX_X_CTRL_NUM_X_PIX_WIDE_SHIFT)) & DPR_FRAME_1P_PIX_X_CTRL_NUM_X_PIX_WIDE_MASK)
#define DPR_FRAME_1P_PIX_X_CTRL_CROP_ULC_X_MASK  (0xFFFF0000U)
#define DPR_FRAME_1P_PIX_X_CTRL_CROP_ULC_X_SHIFT (16U)
#define DPR_FRAME_1P_PIX_X_CTRL_CROP_ULC_X(x)    (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_PIX_X_CTRL_CROP_ULC_X_SHIFT)) & DPR_FRAME_1P_PIX_X_CTRL_CROP_ULC_X_MASK)
/*! @} */

/*! @name FRAME_1P_PIX_Y_CTRL - Frame 1-Plane Pix Y Control */
/*! @{ */
#define DPR_FRAME_1P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_MASK (0xFFFFU)
#define DPR_FRAME_1P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_SHIFT (0U)
#define DPR_FRAME_1P_PIX_Y_CTRL_NUM_Y_PIX_HIGH(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_SHIFT)) & DPR_FRAME_1P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_MASK)
#define DPR_FRAME_1P_PIX_Y_CTRL_CROP_ULC_Y_MASK  (0xFFFF0000U)
#define DPR_FRAME_1P_PIX_Y_CTRL_CROP_ULC_Y_SHIFT (16U)
#define DPR_FRAME_1P_PIX_Y_CTRL_CROP_ULC_Y(x)    (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_PIX_Y_CTRL_CROP_ULC_Y_SHIFT)) & DPR_FRAME_1P_PIX_Y_CTRL_CROP_ULC_Y_MASK)
/*! @} */

/*! @name FRAME_1P_BASE_ADDR_CTRL0 - Frame 1-Plane Base Address Control 0 */
/*! @{ */
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_BASE_ADDR_MASK (0xFFFFFFFFU)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_BASE_ADDR_SHIFT (0U)
#define DPR_FRAME_1P_BASE_ADDR_CTRL0_BASE_ADDR(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_1P_BASE_ADDR_CTRL0_BASE_ADDR_SHIFT)) & DPR_FRAME_1P_BASE_ADDR_CTRL0_BASE_ADDR_MASK)
/*! @} */

/*! @name FRAME_2P_CTRL0 - Frame 2-Plane Control 0 */
/*! @{ */
#define DPR_FRAME_2P_CTRL0_MAX_BYTES_PREQ_MASK   (0x7U)
#define DPR_FRAME_2P_CTRL0_MAX_BYTES_PREQ_SHIFT  (0U)
#define DPR_FRAME_2P_CTRL0_MAX_BYTES_PREQ(x)     (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_CTRL0_MAX_BYTES_PREQ_SHIFT)) & DPR_FRAME_2P_CTRL0_MAX_BYTES_PREQ_MASK)
/*! @} */

/*! @name FRAME_2P_PIX_X_CTRL - Frame 2-Plane Pix X Control */
/*! @{ */
#define DPR_FRAME_2P_PIX_X_CTRL_NUM_X_PIX_WIDE_MASK (0xFFFFU)
#define DPR_FRAME_2P_PIX_X_CTRL_NUM_X_PIX_WIDE_SHIFT (0U)
#define DPR_FRAME_2P_PIX_X_CTRL_NUM_X_PIX_WIDE(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_PIX_X_CTRL_NUM_X_PIX_WIDE_SHIFT)) & DPR_FRAME_2P_PIX_X_CTRL_NUM_X_PIX_WIDE_MASK)
#define DPR_FRAME_2P_PIX_X_CTRL_CROP_ULC_X_MASK  (0xFFFF0000U)
#define DPR_FRAME_2P_PIX_X_CTRL_CROP_ULC_X_SHIFT (16U)
#define DPR_FRAME_2P_PIX_X_CTRL_CROP_ULC_X(x)    (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_PIX_X_CTRL_CROP_ULC_X_SHIFT)) & DPR_FRAME_2P_PIX_X_CTRL_CROP_ULC_X_MASK)
/*! @} */

/*! @name FRAME_2P_PIX_Y_CTRL - Frame 2-Plane Pix Y Control */
/*! @{ */
#define DPR_FRAME_2P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_MASK (0xFFFFU)
#define DPR_FRAME_2P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_SHIFT (0U)
#define DPR_FRAME_2P_PIX_Y_CTRL_NUM_Y_PIX_HIGH(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_SHIFT)) & DPR_FRAME_2P_PIX_Y_CTRL_NUM_Y_PIX_HIGH_MASK)
#define DPR_FRAME_2P_PIX_Y_CTRL_CROP_ULC_Y_MASK  (0xFFFF0000U)
#define DPR_FRAME_2P_PIX_Y_CTRL_CROP_ULC_Y_SHIFT (16U)
#define DPR_FRAME_2P_PIX_Y_CTRL_CROP_ULC_Y(x)    (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_PIX_Y_CTRL_CROP_ULC_Y_SHIFT)) & DPR_FRAME_2P_PIX_Y_CTRL_CROP_ULC_Y_MASK)
/*! @} */

/*! @name FRAME_2P_BASE_ADDR_CTRL0 - Frame 2-Plane Base Address Control 0 */
/*! @{ */
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_BASE_ADDR_MASK (0xFFFFFFFFU)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_BASE_ADDR_SHIFT (0U)
#define DPR_FRAME_2P_BASE_ADDR_CTRL0_BASE_ADDR(x) (((uint32_t)(((uint32_t)(x)) << DPR_FRAME_2P_BASE_ADDR_CTRL0_BASE_ADDR_SHIFT)) & DPR_FRAME_2P_BASE_ADDR_CTRL0_BASE_ADDR_MASK)
/*! @} */

/*! @name RTRAM_CTRL0 - RTRAM Control 0 */
/*! @{ */
#define DPR_RTRAM_CTRL0_NUM_ROWS_ACTIVE_MASK     (0x1U)
#define DPR_RTRAM_CTRL0_NUM_ROWS_ACTIVE_SHIFT    (0U)
#define DPR_RTRAM_CTRL0_THRES_HIGH_MASK          (0xEU)
#define DPR_RTRAM_CTRL0_THRES_HIGH_SHIFT         (1U)
#define DPR_RTRAM_CTRL0_THRES_HIGH(x)            (((uint32_t)(((uint32_t)(x)) << DPR_RTRAM_CTRL0_THRES_HIGH_SHIFT)) & DPR_RTRAM_CTRL0_THRES_HIGH_MASK)
#define DPR_RTRAM_CTRL0_THRES_LOW_MASK           (0x70U)
#define DPR_RTRAM_CTRL0_THRES_LOW_SHIFT          (4U)
#define DPR_RTRAM_CTRL0_THRES_LOW(x)             (((uint32_t)(((uint32_t)(x)) << DPR_RTRAM_CTRL0_THRES_LOW_SHIFT)) & DPR_RTRAM_CTRL0_THRES_LOW_MASK)
#define DPR_RTRAM_CTRL0_ABORT_SEL_MASK           (0x80U)
#define DPR_RTRAM_CTRL0_ABORT_SEL_SHIFT          (7U)
/*! @} */


/*!
 * @}
 */ /* end of group DPR_Register_Masks */


/* DPR - Peripheral instance base addresses */
/** Peripheral DCSS__DPR1 base pointer */
#define DCSS__DPR1_BASE_PTR                      ((DPR_MemMapPtr)0x32E18000u)
/** Peripheral DCSS__DPR2 base pointer */
#define DCSS__DPR2_BASE_PTR                      ((DPR_MemMapPtr)0x32E19000u)
/** Peripheral DCSS__DPR3 base pointer */
#define DCSS__DPR3_BASE_PTR                      ((DPR_MemMapPtr)0x32E1A000u)
/** Array initializer of DPR peripheral base pointers */
#define DPR_BASE_PTRS                            { DCSS__DPR1_BASE_PTR, DCSS__DPR2_BASE_PTR, DCSS__DPR3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DPR_Register_Accessor_Macros DPR - Register accessor macros
 * @{
 */


/* DPR - Register instance definitions */
/* DCSS__DPR1 */
#define DCSS__DPR1_SYSTEM_CTRL0                  DPR_SYSTEM_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_SYSTEM_CTRL0_SET              DPR_SYSTEM_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_SYSTEM_CTRL0_CLR              DPR_SYSTEM_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_SYSTEM_CTRL0_TOG              DPR_SYSTEM_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK                      DPR_IRQ_MASK_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_SET                  DPR_IRQ_MASK_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_CLR                  DPR_IRQ_MASK_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_TOG                  DPR_IRQ_MASK_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_STATUS               DPR_IRQ_MASK_STATUS_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_STATUS_SET           DPR_IRQ_MASK_STATUS_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_STATUS_CLR           DPR_IRQ_MASK_STATUS_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_MASK_STATUS_TOG           DPR_IRQ_MASK_STATUS_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_NONMASK_STATUS            DPR_IRQ_NONMASK_STATUS_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_NONMASK_STATUS_SET        DPR_IRQ_NONMASK_STATUS_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_NONMASK_STATUS_CLR        DPR_IRQ_NONMASK_STATUS_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_IRQ_NONMASK_STATUS_TOG        DPR_IRQ_NONMASK_STATUS_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_MODE_CTRL0                    DPR_MODE_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_MODE_CTRL0_SET                DPR_MODE_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_MODE_CTRL0_CLR                DPR_MODE_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_MODE_CTRL0_TOG                DPR_MODE_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_CTRL0                   DPR_FRAME_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_CTRL0_SET               DPR_FRAME_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_CTRL0_CLR               DPR_FRAME_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_CTRL0_TOG               DPR_FRAME_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_CTRL0                DPR_FRAME_1P_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_CTRL0_SET            DPR_FRAME_1P_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_CTRL0_CLR            DPR_FRAME_1P_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_CTRL0_TOG            DPR_FRAME_1P_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_X_CTRL           DPR_FRAME_1P_PIX_X_CTRL_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_X_CTRL_SET       DPR_FRAME_1P_PIX_X_CTRL_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_X_CTRL_CLR       DPR_FRAME_1P_PIX_X_CTRL_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_X_CTRL_TOG       DPR_FRAME_1P_PIX_X_CTRL_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_Y_CTRL           DPR_FRAME_1P_PIX_Y_CTRL_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_Y_CTRL_SET       DPR_FRAME_1P_PIX_Y_CTRL_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_Y_CTRL_CLR       DPR_FRAME_1P_PIX_Y_CTRL_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_PIX_Y_CTRL_TOG       DPR_FRAME_1P_PIX_Y_CTRL_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_BASE_ADDR_CTRL0      DPR_FRAME_1P_BASE_ADDR_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_BASE_ADDR_CTRL0_SET  DPR_FRAME_1P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_1P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_1P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_1P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_CTRL0                DPR_FRAME_2P_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_CTRL0_SET            DPR_FRAME_2P_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_CTRL0_CLR            DPR_FRAME_2P_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_CTRL0_TOG            DPR_FRAME_2P_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_X_CTRL           DPR_FRAME_2P_PIX_X_CTRL_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_X_CTRL_SET       DPR_FRAME_2P_PIX_X_CTRL_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_X_CTRL_CLR       DPR_FRAME_2P_PIX_X_CTRL_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_X_CTRL_TOG       DPR_FRAME_2P_PIX_X_CTRL_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_Y_CTRL           DPR_FRAME_2P_PIX_Y_CTRL_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_Y_CTRL_SET       DPR_FRAME_2P_PIX_Y_CTRL_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_Y_CTRL_CLR       DPR_FRAME_2P_PIX_Y_CTRL_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_PIX_Y_CTRL_TOG       DPR_FRAME_2P_PIX_Y_CTRL_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_BASE_ADDR_CTRL0      DPR_FRAME_2P_BASE_ADDR_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_BASE_ADDR_CTRL0_SET  DPR_FRAME_2P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_2P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_FRAME_2P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_2P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_RTRAM_CTRL0                   DPR_RTRAM_CTRL0_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_RTRAM_CTRL0_SET               DPR_RTRAM_CTRL0_SET_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_RTRAM_CTRL0_CLR               DPR_RTRAM_CTRL0_CLR_REG(DCSS__DPR1_BASE_PTR)
#define DCSS__DPR1_RTRAM_CTRL0_TOG               DPR_RTRAM_CTRL0_TOG_REG(DCSS__DPR1_BASE_PTR)
/* DCSS__DPR2 */
#define DCSS__DPR2_SYSTEM_CTRL0                  DPR_SYSTEM_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_SYSTEM_CTRL0_SET              DPR_SYSTEM_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_SYSTEM_CTRL0_CLR              DPR_SYSTEM_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_SYSTEM_CTRL0_TOG              DPR_SYSTEM_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK                      DPR_IRQ_MASK_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_SET                  DPR_IRQ_MASK_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_CLR                  DPR_IRQ_MASK_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_TOG                  DPR_IRQ_MASK_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_STATUS               DPR_IRQ_MASK_STATUS_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_STATUS_SET           DPR_IRQ_MASK_STATUS_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_STATUS_CLR           DPR_IRQ_MASK_STATUS_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_MASK_STATUS_TOG           DPR_IRQ_MASK_STATUS_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_NONMASK_STATUS            DPR_IRQ_NONMASK_STATUS_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_NONMASK_STATUS_SET        DPR_IRQ_NONMASK_STATUS_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_NONMASK_STATUS_CLR        DPR_IRQ_NONMASK_STATUS_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_IRQ_NONMASK_STATUS_TOG        DPR_IRQ_NONMASK_STATUS_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_MODE_CTRL0                    DPR_MODE_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_MODE_CTRL0_SET                DPR_MODE_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_MODE_CTRL0_CLR                DPR_MODE_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_MODE_CTRL0_TOG                DPR_MODE_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_CTRL0                   DPR_FRAME_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_CTRL0_SET               DPR_FRAME_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_CTRL0_CLR               DPR_FRAME_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_CTRL0_TOG               DPR_FRAME_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_CTRL0                DPR_FRAME_1P_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_CTRL0_SET            DPR_FRAME_1P_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_CTRL0_CLR            DPR_FRAME_1P_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_CTRL0_TOG            DPR_FRAME_1P_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_X_CTRL           DPR_FRAME_1P_PIX_X_CTRL_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_X_CTRL_SET       DPR_FRAME_1P_PIX_X_CTRL_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_X_CTRL_CLR       DPR_FRAME_1P_PIX_X_CTRL_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_X_CTRL_TOG       DPR_FRAME_1P_PIX_X_CTRL_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_Y_CTRL           DPR_FRAME_1P_PIX_Y_CTRL_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_Y_CTRL_SET       DPR_FRAME_1P_PIX_Y_CTRL_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_Y_CTRL_CLR       DPR_FRAME_1P_PIX_Y_CTRL_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_PIX_Y_CTRL_TOG       DPR_FRAME_1P_PIX_Y_CTRL_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_BASE_ADDR_CTRL0      DPR_FRAME_1P_BASE_ADDR_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_BASE_ADDR_CTRL0_SET  DPR_FRAME_1P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_1P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_1P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_1P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_CTRL0                DPR_FRAME_2P_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_CTRL0_SET            DPR_FRAME_2P_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_CTRL0_CLR            DPR_FRAME_2P_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_CTRL0_TOG            DPR_FRAME_2P_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_X_CTRL           DPR_FRAME_2P_PIX_X_CTRL_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_X_CTRL_SET       DPR_FRAME_2P_PIX_X_CTRL_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_X_CTRL_CLR       DPR_FRAME_2P_PIX_X_CTRL_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_X_CTRL_TOG       DPR_FRAME_2P_PIX_X_CTRL_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_Y_CTRL           DPR_FRAME_2P_PIX_Y_CTRL_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_Y_CTRL_SET       DPR_FRAME_2P_PIX_Y_CTRL_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_Y_CTRL_CLR       DPR_FRAME_2P_PIX_Y_CTRL_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_PIX_Y_CTRL_TOG       DPR_FRAME_2P_PIX_Y_CTRL_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_BASE_ADDR_CTRL0      DPR_FRAME_2P_BASE_ADDR_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_BASE_ADDR_CTRL0_SET  DPR_FRAME_2P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_2P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_FRAME_2P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_2P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_RTRAM_CTRL0                   DPR_RTRAM_CTRL0_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_RTRAM_CTRL0_SET               DPR_RTRAM_CTRL0_SET_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_RTRAM_CTRL0_CLR               DPR_RTRAM_CTRL0_CLR_REG(DCSS__DPR2_BASE_PTR)
#define DCSS__DPR2_RTRAM_CTRL0_TOG               DPR_RTRAM_CTRL0_TOG_REG(DCSS__DPR2_BASE_PTR)
/* DCSS__DPR3 */
#define DCSS__DPR3_SYSTEM_CTRL0                  DPR_SYSTEM_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_SYSTEM_CTRL0_SET              DPR_SYSTEM_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_SYSTEM_CTRL0_CLR              DPR_SYSTEM_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_SYSTEM_CTRL0_TOG              DPR_SYSTEM_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK                      DPR_IRQ_MASK_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_SET                  DPR_IRQ_MASK_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_CLR                  DPR_IRQ_MASK_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_TOG                  DPR_IRQ_MASK_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_STATUS               DPR_IRQ_MASK_STATUS_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_STATUS_SET           DPR_IRQ_MASK_STATUS_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_STATUS_CLR           DPR_IRQ_MASK_STATUS_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_MASK_STATUS_TOG           DPR_IRQ_MASK_STATUS_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_NONMASK_STATUS            DPR_IRQ_NONMASK_STATUS_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_NONMASK_STATUS_SET        DPR_IRQ_NONMASK_STATUS_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_NONMASK_STATUS_CLR        DPR_IRQ_NONMASK_STATUS_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_IRQ_NONMASK_STATUS_TOG        DPR_IRQ_NONMASK_STATUS_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_MODE_CTRL0                    DPR_MODE_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_MODE_CTRL0_SET                DPR_MODE_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_MODE_CTRL0_CLR                DPR_MODE_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_MODE_CTRL0_TOG                DPR_MODE_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_CTRL0                   DPR_FRAME_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_CTRL0_SET               DPR_FRAME_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_CTRL0_CLR               DPR_FRAME_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_CTRL0_TOG               DPR_FRAME_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_CTRL0                DPR_FRAME_1P_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_CTRL0_SET            DPR_FRAME_1P_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_CTRL0_CLR            DPR_FRAME_1P_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_CTRL0_TOG            DPR_FRAME_1P_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_X_CTRL           DPR_FRAME_1P_PIX_X_CTRL_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_X_CTRL_SET       DPR_FRAME_1P_PIX_X_CTRL_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_X_CTRL_CLR       DPR_FRAME_1P_PIX_X_CTRL_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_X_CTRL_TOG       DPR_FRAME_1P_PIX_X_CTRL_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_Y_CTRL           DPR_FRAME_1P_PIX_Y_CTRL_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_Y_CTRL_SET       DPR_FRAME_1P_PIX_Y_CTRL_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_Y_CTRL_CLR       DPR_FRAME_1P_PIX_Y_CTRL_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_PIX_Y_CTRL_TOG       DPR_FRAME_1P_PIX_Y_CTRL_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_BASE_ADDR_CTRL0      DPR_FRAME_1P_BASE_ADDR_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_BASE_ADDR_CTRL0_SET  DPR_FRAME_1P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_1P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_1P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_1P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_CTRL0                DPR_FRAME_2P_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_CTRL0_SET            DPR_FRAME_2P_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_CTRL0_CLR            DPR_FRAME_2P_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_CTRL0_TOG            DPR_FRAME_2P_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_X_CTRL           DPR_FRAME_2P_PIX_X_CTRL_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_X_CTRL_SET       DPR_FRAME_2P_PIX_X_CTRL_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_X_CTRL_CLR       DPR_FRAME_2P_PIX_X_CTRL_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_X_CTRL_TOG       DPR_FRAME_2P_PIX_X_CTRL_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_Y_CTRL           DPR_FRAME_2P_PIX_Y_CTRL_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_Y_CTRL_SET       DPR_FRAME_2P_PIX_Y_CTRL_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_Y_CTRL_CLR       DPR_FRAME_2P_PIX_Y_CTRL_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_PIX_Y_CTRL_TOG       DPR_FRAME_2P_PIX_Y_CTRL_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_BASE_ADDR_CTRL0      DPR_FRAME_2P_BASE_ADDR_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_BASE_ADDR_CTRL0_SET  DPR_FRAME_2P_BASE_ADDR_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_BASE_ADDR_CTRL0_CLR  DPR_FRAME_2P_BASE_ADDR_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_FRAME_2P_BASE_ADDR_CTRL0_TOG  DPR_FRAME_2P_BASE_ADDR_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_RTRAM_CTRL0                   DPR_RTRAM_CTRL0_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_RTRAM_CTRL0_SET               DPR_RTRAM_CTRL0_SET_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_RTRAM_CTRL0_CLR               DPR_RTRAM_CTRL0_CLR_REG(DCSS__DPR3_BASE_PTR)
#define DCSS__DPR3_RTRAM_CTRL0_TOG               DPR_RTRAM_CTRL0_TOG_REG(DCSS__DPR3_BASE_PTR)

/*!
 * @}
 */ /* end of group DPR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DPR_Peripheral */


/* ----------------------------------------------------------------------------
   -- DTG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTG_Peripheral DTG
 * @{
 */

/** DTG - Peripheral register structure */
typedef struct DTG_MemMap {
  uint32_t TC_CONTROL_STATUS;                      /**< Timing Controller Control Register, offset: 0x0 */
  uint32_t TC_DTG_REG1;                            /**< DTG lower right corner locations, offset: 0x4 */
  uint32_t TC_DISPLAY_REG2;                        /**< Display Register: TOP Window Coordinates for Active display area, offset: 0x8 */
  uint32_t TC_DISPLAY_REG3;                        /**< Display Register: BOTTOM Window Coordinates for Active display area, offset: 0xC */
  uint32_t TC_CH1_REG4;                            /**< Channel 1 window Register: TOP Window Coordinates for channel1, offset: 0x10 */
  uint32_t TC_CH1_REG5;                            /**< Channel_1 window Register: BOTTOM Window Coordinates for channel_1 window, offset: 0x14 */
  uint32_t TC_CH2_REG6;                            /**< Channel 2 window Register: TOP Window Coordinates for channel_2, offset: 0x18 */
  uint32_t TC_CH2_REG7;                            /**< Channel_2 window Register: BOTTOM Window Coordinates for channel_2 pixel window, offset: 0x1C */
  uint32_t TC_CH3_REG8;                            /**< Channel 3 window Register: TOP Window Coordinates for channel_3, offset: 0x20 */
  uint32_t TC_CH3_REG9;                            /**< Channel_3 window Register: BOTTOM Window Coordinates for channel_3 pixel window, offset: 0x24 */
  uint32_t TC_CTX_LD_REG10;                        /**< Context Loader Register: Coordinates in the raster table where the context loader is started., offset: 0x28 */
  uint32_t TC_CH1_BKRND_REG11;                     /**< Channel_1 background pixel color., offset: 0x2C */
  uint32_t TC_CH2_BKRND_REG12;                     /**< Channel_2 background pixel color., offset: 0x30 */
  uint8_t RESERVED_0[4];
  uint32_t BLENDER_DBY_EOTF_RANGEINV;              /**< DBY MODE Blender control., offset: 0x38 */
  uint32_t BLENDER_DBY_EOTF_RANGEMIN;              /**< DBY MODE Blender control., offset: 0x3C */
  uint32_t BLENDER_DBY_BDP;                        /**< DBY MODE blender control., offset: 0x40 */
  uint32_t BLENDER_BKRND_I_GRAPHICS;               /**< Backgound pixel color component sent to blender. Used when no valid pixels, offset: 0x44 */
  uint32_t BLENDER_BKRND_P_GRAPHICS;               /**< Backgound pixel color component sent to blender. Used when no valid pixels, offset: 0x48 */
  uint32_t BLENDER_BKRND_T_GRAPHICS;               /**< Backgound pixel color component sent to blender. Used when no valid pixels, offset: 0x4C */
  uint32_t TC_LINE1_INT_REG13;                     /**< LINE1 interrupt control: Coordinate where line1 interrupt is asserted, offset: 0x50 */
  uint32_t TC_LINE2_INT_REG14;                     /**< LINE2 interrupt control: Coordinate where line2 interrupt is asserted, offset: 0x54 */
  uint32_t TC_ALPHA_DEFAULT_REG15;                 /**< default alpha, offset: 0x58 */
  uint32_t TC_INTERRUPT_STATUS;                    /**< Timing Controller interrupt status, offset: 0x5C */
  uint32_t TC_INTRERRUPT_CONTROL_REG17;            /**< Timing Controller interrupt control., offset: 0x60 */
  uint32_t TC_CH3_BKRND_REG18;                     /**< Channel_3 background pixel color., offset: 0x64 */
  uint32_t TC_INTRERRUPT_MASK;                     /**< Timing Controller interrupt masks, offset: 0x68 */
  uint32_t TC_LINE3_INT_REG;                       /**< LINE3 interrupt control: Coordinate where line3 interrupt is asserted, offset: 0x6C */
  uint32_t TC_LINE4_INT_REG;                       /**< LINE4 interrupt control: Coordinate where line4 interrupt is asserted, offset: 0x70 */
  uint32_t TC_OL_DE_CONTROL_REG;                   /**< For DBY Mode: Controls the assertion and de-assertion DE signal (Overlay channel)., offset: 0x74 */
  uint32_t TC_BL_DE_CONTROL_REG;                   /**< For DBY Mode: Controls the assertion and de-assertion DE signal (Base layer (BL) channel)., offset: 0x78 */
  uint32_t TC_EL_DE_CONTROL_REG;                   /**< For DBY Mode: Controls the assertion and de-assertion DE signal (Enhancement layer (EL) channel)., offset: 0x7C */
} volatile *DTG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DTG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTG_Register_Accessor_Macros DTG - Register accessor macros
 * @{
 */


/* DTG - Register accessors */
#define DTG_TC_CONTROL_STATUS_REG(base)          ((base)->TC_CONTROL_STATUS)
#define DTG_TC_DTG_REG1_REG(base)                ((base)->TC_DTG_REG1)
#define DTG_TC_DISPLAY_REG2_REG(base)            ((base)->TC_DISPLAY_REG2)
#define DTG_TC_DISPLAY_REG3_REG(base)            ((base)->TC_DISPLAY_REG3)
#define DTG_TC_CH1_REG4_REG(base)                ((base)->TC_CH1_REG4)
#define DTG_TC_CH1_REG5_REG(base)                ((base)->TC_CH1_REG5)
#define DTG_TC_CH2_REG6_REG(base)                ((base)->TC_CH2_REG6)
#define DTG_TC_CH2_REG7_REG(base)                ((base)->TC_CH2_REG7)
#define DTG_TC_CH3_REG8_REG(base)                ((base)->TC_CH3_REG8)
#define DTG_TC_CH3_REG9_REG(base)                ((base)->TC_CH3_REG9)
#define DTG_TC_CTX_LD_REG10_REG(base)            ((base)->TC_CTX_LD_REG10)
#define DTG_TC_CH1_BKRND_REG11_REG(base)         ((base)->TC_CH1_BKRND_REG11)
#define DTG_TC_CH2_BKRND_REG12_REG(base)         ((base)->TC_CH2_BKRND_REG12)
#define DTG_BLENDER_DBY_EOTF_RANGEINV_REG(base)  ((base)->BLENDER_DBY_EOTF_RANGEINV)
#define DTG_BLENDER_DBY_EOTF_RANGEMIN_REG(base)  ((base)->BLENDER_DBY_EOTF_RANGEMIN)
#define DTG_BLENDER_DBY_BDP_REG(base)            ((base)->BLENDER_DBY_BDP)
#define DTG_BLENDER_BKRND_I_GRAPHICS_REG(base)   ((base)->BLENDER_BKRND_I_GRAPHICS)
#define DTG_BLENDER_BKRND_P_GRAPHICS_REG(base)   ((base)->BLENDER_BKRND_P_GRAPHICS)
#define DTG_BLENDER_BKRND_T_GRAPHICS_REG(base)   ((base)->BLENDER_BKRND_T_GRAPHICS)
#define DTG_TC_LINE1_INT_REG13_REG(base)         ((base)->TC_LINE1_INT_REG13)
#define DTG_TC_LINE2_INT_REG14_REG(base)         ((base)->TC_LINE2_INT_REG14)
#define DTG_TC_ALPHA_DEFAULT_REG15_REG(base)     ((base)->TC_ALPHA_DEFAULT_REG15)
#define DTG_TC_INTERRUPT_STATUS_REG(base)        ((base)->TC_INTERRUPT_STATUS)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_REG(base) ((base)->TC_INTRERRUPT_CONTROL_REG17)
#define DTG_TC_CH3_BKRND_REG18_REG(base)         ((base)->TC_CH3_BKRND_REG18)
#define DTG_TC_INTRERRUPT_MASK_REG(base)         ((base)->TC_INTRERRUPT_MASK)
#define DTG_TC_LINE3_INT_REG_REG(base)           ((base)->TC_LINE3_INT_REG)
#define DTG_TC_LINE4_INT_REG_REG(base)           ((base)->TC_LINE4_INT_REG)
#define DTG_TC_OL_DE_CONTROL_REG_REG(base)       ((base)->TC_OL_DE_CONTROL_REG)
#define DTG_TC_BL_DE_CONTROL_REG_REG(base)       ((base)->TC_BL_DE_CONTROL_REG)
#define DTG_TC_EL_DE_CONTROL_REG_REG(base)       ((base)->TC_EL_DE_CONTROL_REG)

/*!
 * @}
 */ /* end of group DTG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DTG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTG_Register_Masks DTG Register Masks
 * @{
 */

/*! @name TC_CONTROL_STATUS - Timing Controller Control Register */
/*! @{ */
#define DTG_TC_CONTROL_STATUS_TC_VIDEO_BASE_PATH_ENABLE_MASK (0x1U)
#define DTG_TC_CONTROL_STATUS_TC_VIDEO_BASE_PATH_ENABLE_SHIFT (0U)
#define DTG_TC_CONTROL_STATUS_TC_VIDEO_ENH_PATH_ENABLE_MASK (0x2U)
#define DTG_TC_CONTROL_STATUS_TC_VIDEO_ENH_PATH_ENABLE_SHIFT (1U)
#define DTG_TC_CONTROL_STATUS_TC_OVERLAY_PATH_ENABLE_MASK (0x4U)
#define DTG_TC_CONTROL_STATUS_TC_OVERLAY_PATH_ENABLE_SHIFT (2U)
#define DTG_TC_CONTROL_STATUS_TC_OVERLAY_FIFO_DATA_MODE_MASK (0x8U)
#define DTG_TC_CONTROL_STATUS_TC_OVERLAY_FIFO_DATA_MODE_SHIFT (3U)
#define DTG_TC_CONTROL_STATUS_TC_BLENDER_VIDEO_ALPHA_SELECT_MASK (0x80U)
#define DTG_TC_CONTROL_STATUS_TC_BLENDER_VIDEO_ALPHA_SELECT_SHIFT (7U)
#define DTG_TC_CONTROL_STATUS_TC_GO_MASK         (0x100U)
#define DTG_TC_CONTROL_STATUS_TC_GO_SHIFT        (8U)
#define DTG_TC_CONTROL_STATUS_TC_DOLBY_MODE_MASK (0x200U)
#define DTG_TC_CONTROL_STATUS_TC_DOLBY_MODE_SHIFT (9U)
#define DTG_TC_CONTROL_STATUS_TC_CH1_PER_PEL_ALPHA_SEL_MASK (0x400U)
#define DTG_TC_CONTROL_STATUS_TC_CH1_PER_PEL_ALPHA_SEL_SHIFT (10U)
#define DTG_TC_CONTROL_STATUS_TC_CSS_PIX_COMP_SWAP_MASK (0x7000U)
#define DTG_TC_CONTROL_STATUS_TC_CSS_PIX_COMP_SWAP_SHIFT (12U)
#define DTG_TC_CONTROL_STATUS_TC_CSS_PIX_COMP_SWAP(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CONTROL_STATUS_TC_CSS_PIX_COMP_SWAP_SHIFT)) & DTG_TC_CONTROL_STATUS_TC_CSS_PIX_COMP_SWAP_MASK)
#define DTG_TC_CONTROL_STATUS_TC_DEFAULT_OVERLAY_ALPHA_MASK (0xFF000000U)
#define DTG_TC_CONTROL_STATUS_TC_DEFAULT_OVERLAY_ALPHA_SHIFT (24U)
#define DTG_TC_CONTROL_STATUS_TC_DEFAULT_OVERLAY_ALPHA(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CONTROL_STATUS_TC_DEFAULT_OVERLAY_ALPHA_SHIFT)) & DTG_TC_CONTROL_STATUS_TC_DEFAULT_OVERLAY_ALPHA_MASK)
/*! @} */

/*! @name TC_DTG_REG1 - DTG lower right corner locations */
/*! @{ */
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_X_MASK (0x1FFFU)
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_X_SHIFT (0U)
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_X(x)  (((uint32_t)(((uint32_t)(x)) << DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_X_SHIFT)) & DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_X_MASK)
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_Y_MASK (0x1FFF0000U)
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_Y_SHIFT (16U)
#define DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_Y(x)  (((uint32_t)(((uint32_t)(x)) << DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_Y_SHIFT)) & DTG_TC_DTG_REG1_TC_DTG_LOWER_RIGHT_Y_MASK)
/*! @} */

/*! @name TC_DISPLAY_REG2 - Display Register: TOP Window Coordinates for Active display area */
/*! @{ */
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_X_MASK (0x1FFFU)
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_X_SHIFT (0U)
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_X_SHIFT)) & DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_X_MASK)
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_Y_MASK (0x1FFF0000U)
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_Y_SHIFT (16U)
#define DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_Y_SHIFT)) & DTG_TC_DISPLAY_REG2_TC_DISPLAY_UPPER_LEFT_Y_MASK)
/*! @} */

/*! @name TC_DISPLAY_REG3 - Display Register: BOTTOM Window Coordinates for Active display area */
/*! @{ */
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_X_MASK (0x1FFFU)
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_X_SHIFT (0U)
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_X_SHIFT)) & DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_X_MASK)
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_Y_MASK (0x1FFF0000U)
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_Y_SHIFT (16U)
#define DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_Y_SHIFT)) & DTG_TC_DISPLAY_REG3_TC_DISPLAY_LOWER_RIGHT_Y_MASK)
/*! @} */

/*! @name TC_CH1_REG4 - Channel 1 window Register: TOP Window Coordinates for channel1 */
/*! @{ */
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_X_MASK (0x1FFFU)
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_X_SHIFT (0U)
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_X_SHIFT)) & DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_X_MASK)
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_Y_SHIFT (16U)
#define DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_Y_SHIFT)) & DTG_TC_CH1_REG4_TC_CHANNEL_1_UPPER_LEFT_Y_MASK)
/*! @} */

/*! @name TC_CH1_REG5 - Channel_1 window Register: BOTTOM Window Coordinates for channel_1 window */
/*! @{ */
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_X_MASK (0x1FFFU)
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_X_SHIFT (0U)
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_X_SHIFT)) & DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_X_MASK)
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_Y_SHIFT (16U)
#define DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_Y_SHIFT)) & DTG_TC_CH1_REG5_TC_CHANNEL_1_LOWER_RIGHT_Y_MASK)
/*! @} */

/*! @name TC_CH2_REG6 - Channel 2 window Register: TOP Window Coordinates for channel_2 */
/*! @{ */
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_X_MASK (0x1FFFU)
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_X_SHIFT (0U)
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_X_SHIFT)) & DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_X_MASK)
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_Y_SHIFT (16U)
#define DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_Y_SHIFT)) & DTG_TC_CH2_REG6_TC_CHANNEL_2_UPPER_LEFT_Y_MASK)
/*! @} */

/*! @name TC_CH2_REG7 - Channel_2 window Register: BOTTOM Window Coordinates for channel_2 pixel window */
/*! @{ */
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_X_MASK (0x1FFFU)
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_X_SHIFT (0U)
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_X_SHIFT)) & DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_X_MASK)
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_Y_SHIFT (16U)
#define DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_Y_SHIFT)) & DTG_TC_CH2_REG7_TC_CHANNEL_2_LOWER_RIGHT_Y_MASK)
/*! @} */

/*! @name TC_CH3_REG8 - Channel 3 window Register: TOP Window Coordinates for channel_3 */
/*! @{ */
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_X_MASK (0x1FFFU)
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_X_SHIFT (0U)
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_X_SHIFT)) & DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_X_MASK)
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_Y_SHIFT (16U)
#define DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_Y_SHIFT)) & DTG_TC_CH3_REG8_TC_CHANNEL_3_UPPER_LEFT_Y_MASK)
/*! @} */

/*! @name TC_CH3_REG9 - Channel_3 window Register: BOTTOM Window Coordinates for channel_3 pixel window */
/*! @{ */
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_X_MASK (0x1FFFU)
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_X_SHIFT (0U)
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_X_SHIFT)) & DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_X_MASK)
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_Y_MASK (0x1FFF0000U)
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_Y_SHIFT (16U)
#define DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_Y_SHIFT)) & DTG_TC_CH3_REG9_TC_CHANNEL_3_LOWER_RIGHT_Y_MASK)
/*! @} */

/*! @name TC_CTX_LD_REG10 - Context Loader Register: Coordinates in the raster table where the context loader is started. */
/*! @{ */
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_DB_LINE_COUNT_MASK (0x1FFFU)
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_DB_LINE_COUNT_SHIFT (0U)
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_DB_LINE_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CTX_LD_REG10_TC_CNTXT_DB_LINE_COUNT_SHIFT)) & DTG_TC_CTX_LD_REG10_TC_CNTXT_DB_LINE_COUNT_MASK)
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_SB_LINE_COUNT_MASK (0x1FFF0000U)
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_SB_LINE_COUNT_SHIFT (16U)
#define DTG_TC_CTX_LD_REG10_TC_CNTXT_SB_LINE_COUNT(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CTX_LD_REG10_TC_CNTXT_SB_LINE_COUNT_SHIFT)) & DTG_TC_CTX_LD_REG10_TC_CNTXT_SB_LINE_COUNT_MASK)
/*! @} */

/*! @name TC_CH1_BKRND_REG11 - Channel_1 background pixel color. */
/*! @{ */
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_3_MASK (0x3FFU)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_3_SHIFT (0U)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_3(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_3_SHIFT)) & DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_3_MASK)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_2_MASK (0xFFC00U)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_2_SHIFT (10U)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_2(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_2_SHIFT)) & DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_2_MASK)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_1_MASK (0x3FF00000U)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_1_SHIFT (20U)
#define DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_1(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_1_SHIFT)) & DTG_TC_CH1_BKRND_REG11_TC_CH1_BKRND_PEL_COMP_1_MASK)
/*! @} */

/*! @name TC_CH2_BKRND_REG12 - Channel_2 background pixel color. */
/*! @{ */
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_3_MASK (0x3FFU)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_3_SHIFT (0U)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_3(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_3_SHIFT)) & DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_3_MASK)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_2_MASK (0xFFC00U)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_2_SHIFT (10U)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_2(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_2_SHIFT)) & DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_2_MASK)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_1_MASK (0x3FF00000U)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_1_SHIFT (20U)
#define DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_1(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_1_SHIFT)) & DTG_TC_CH2_BKRND_REG12_TC_CH2_BKRND_PEL_COMP_1_MASK)
/*! @} */

/*! @name BLENDER_DBY_EOTF_RANGEINV - DBY MODE Blender control. */
/*! @{ */
#define DTG_BLENDER_DBY_EOTF_RANGEINV_BLENDER_EOTF_RANGEINV_MASK (0x1FFFFU)
#define DTG_BLENDER_DBY_EOTF_RANGEINV_BLENDER_EOTF_RANGEINV_SHIFT (0U)
#define DTG_BLENDER_DBY_EOTF_RANGEINV_BLENDER_EOTF_RANGEINV(x) (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_DBY_EOTF_RANGEINV_BLENDER_EOTF_RANGEINV_SHIFT)) & DTG_BLENDER_DBY_EOTF_RANGEINV_BLENDER_EOTF_RANGEINV_MASK)
/*! @} */

/*! @name BLENDER_DBY_EOTF_RANGEMIN - DBY MODE Blender control. */
/*! @{ */
#define DTG_BLENDER_DBY_EOTF_RANGEMIN_BLENDER_EOTF_RANGEMIN_MASK (0x1FFFFU)
#define DTG_BLENDER_DBY_EOTF_RANGEMIN_BLENDER_EOTF_RANGEMIN_SHIFT (0U)
#define DTG_BLENDER_DBY_EOTF_RANGEMIN_BLENDER_EOTF_RANGEMIN(x) (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_DBY_EOTF_RANGEMIN_BLENDER_EOTF_RANGEMIN_SHIFT)) & DTG_BLENDER_DBY_EOTF_RANGEMIN_BLENDER_EOTF_RANGEMIN_MASK)
/*! @} */

/*! @name BLENDER_DBY_BDP - DBY MODE blender control. */
/*! @{ */
#define DTG_BLENDER_DBY_BDP_BLENDER_BDP_MASK     (0x1FU)
#define DTG_BLENDER_DBY_BDP_BLENDER_BDP_SHIFT    (0U)
#define DTG_BLENDER_DBY_BDP_BLENDER_BDP(x)       (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_DBY_BDP_BLENDER_BDP_SHIFT)) & DTG_BLENDER_DBY_BDP_BLENDER_BDP_MASK)
/*! @} */

/*! @name BLENDER_BKRND_I_GRAPHICS - Backgound pixel color component sent to blender. Used when no valid pixels */
/*! @{ */
#define DTG_BLENDER_BKRND_I_GRAPHICS_BLENDER_BCKRND_I_COMP_MASK (0xFFFFFFFU)
#define DTG_BLENDER_BKRND_I_GRAPHICS_BLENDER_BCKRND_I_COMP_SHIFT (0U)
#define DTG_BLENDER_BKRND_I_GRAPHICS_BLENDER_BCKRND_I_COMP(x) (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_BKRND_I_GRAPHICS_BLENDER_BCKRND_I_COMP_SHIFT)) & DTG_BLENDER_BKRND_I_GRAPHICS_BLENDER_BCKRND_I_COMP_MASK)
/*! @} */

/*! @name BLENDER_BKRND_P_GRAPHICS - Backgound pixel color component sent to blender. Used when no valid pixels */
/*! @{ */
#define DTG_BLENDER_BKRND_P_GRAPHICS_BLENDER_BCKRND_P_COMP_MASK (0xFFFFFFFU)
#define DTG_BLENDER_BKRND_P_GRAPHICS_BLENDER_BCKRND_P_COMP_SHIFT (0U)
#define DTG_BLENDER_BKRND_P_GRAPHICS_BLENDER_BCKRND_P_COMP(x) (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_BKRND_P_GRAPHICS_BLENDER_BCKRND_P_COMP_SHIFT)) & DTG_BLENDER_BKRND_P_GRAPHICS_BLENDER_BCKRND_P_COMP_MASK)
/*! @} */

/*! @name BLENDER_BKRND_T_GRAPHICS - Backgound pixel color component sent to blender. Used when no valid pixels */
/*! @{ */
#define DTG_BLENDER_BKRND_T_GRAPHICS_BLENDER_BCKRND_T_COMP_MASK (0xFFFFFFFU)
#define DTG_BLENDER_BKRND_T_GRAPHICS_BLENDER_BCKRND_T_COMP_SHIFT (0U)
#define DTG_BLENDER_BKRND_T_GRAPHICS_BLENDER_BCKRND_T_COMP(x) (((uint32_t)(((uint32_t)(x)) << DTG_BLENDER_BKRND_T_GRAPHICS_BLENDER_BCKRND_T_COMP_SHIFT)) & DTG_BLENDER_BKRND_T_GRAPHICS_BLENDER_BCKRND_T_COMP_MASK)
/*! @} */

/*! @name TC_LINE1_INT_REG13 - LINE1 interrupt control: Coordinate where line1 interrupt is asserted */
/*! @{ */
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_X_MASK (0x1FFFU)
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_X_SHIFT (0U)
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_X_SHIFT)) & DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_X_MASK)
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_Y_MASK (0x1FFF0000U)
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_Y_SHIFT (16U)
#define DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_Y_SHIFT)) & DTG_TC_LINE1_INT_REG13_TC_LINE1_INT_Y_MASK)
/*! @} */

/*! @name TC_LINE2_INT_REG14 - LINE2 interrupt control: Coordinate where line2 interrupt is asserted */
/*! @{ */
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_X_MASK (0x1FFFU)
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_X_SHIFT (0U)
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_X_SHIFT)) & DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_X_MASK)
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_Y_MASK (0x1FFF0000U)
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_Y_SHIFT (16U)
#define DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_Y(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_Y_SHIFT)) & DTG_TC_LINE2_INT_REG14_TC_LINE2_INT_Y_MASK)
/*! @} */

/*! @name TC_ALPHA_DEFAULT_REG15 - default alpha */
/*! @{ */
#define DTG_TC_ALPHA_DEFAULT_REG15_TC_ALPHA_DEF_MASK (0xFFU)
#define DTG_TC_ALPHA_DEFAULT_REG15_TC_ALPHA_DEF_SHIFT (0U)
#define DTG_TC_ALPHA_DEFAULT_REG15_TC_ALPHA_DEF(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_ALPHA_DEFAULT_REG15_TC_ALPHA_DEF_SHIFT)) & DTG_TC_ALPHA_DEFAULT_REG15_TC_ALPHA_DEF_MASK)
/*! @} */

/*! @name TC_INTERRUPT_STATUS - Timing Controller interrupt status */
/*! @{ */
#define DTG_TC_INTERRUPT_STATUS_TC_LINE0_INTERRUPT_MASK (0x1U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE0_INTERRUPT_SHIFT (0U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE1_INTERRUPT_MASK (0x2U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE1_INTERRUPT_SHIFT (1U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE2_INTERRUPT_MASK (0x4U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE2_INTERRUPT_SHIFT (2U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE3_INTERRUPT_MASK (0x8U)
#define DTG_TC_INTERRUPT_STATUS_TC_LINE3_INTERRUPT_SHIFT (3U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH1_PANIC_INTERRUPT_MASK (0x10U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH1_PANIC_INTERRUPT_SHIFT (4U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH2_PANIC_INTERRUPT_MASK (0x20U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH2_PANIC_INTERRUPT_SHIFT (5U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH3_PANIC_INTERRUPT_MASK (0x40U)
#define DTG_TC_INTERRUPT_STATUS_TC_RTRAM_CH3_PANIC_INTERRUPT_SHIFT (6U)
/*! @} */

/*! @name TC_INTRERRUPT_CONTROL_REG17 - Timing Controller interrupt control. */
/*! @{ */
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE0_INTERRUPT_CLR_MASK (0x1U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE0_INTERRUPT_CLR_SHIFT (0U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE1_INTERRUPT_CLR_MASK (0x2U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE1_INTERRUPT_CLR_SHIFT (1U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE2_INTERRUPT_CLR_MASK (0x4U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE2_INTERRUPT_CLR_SHIFT (2U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE3_INTERRUPT_CLR_MASK (0x8U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_LINE3_INTERRUPT_CLR_SHIFT (3U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH1_PANIC_INTERRUPT_CLR_MASK (0x10U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH1_PANIC_INTERRUPT_CLR_SHIFT (4U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH2_PANIC_INTERRUPT_CLR_MASK (0x20U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH2_PANIC_INTERRUPT_CLR_SHIFT (5U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH3_PANIC_INTERRUPT_CLR_MASK (0x40U)
#define DTG_TC_INTRERRUPT_CONTROL_REG17_TC_RTRAM_CH3_PANIC_INTERRUPT_CLR_SHIFT (6U)
/*! @} */

/*! @name TC_CH3_BKRND_REG18 - Channel_3 background pixel color. */
/*! @{ */
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_3_MASK (0x3FFU)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_3_SHIFT (0U)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_3(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_3_SHIFT)) & DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_3_MASK)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_2_MASK (0xFFC00U)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_2_SHIFT (10U)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_2(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_2_SHIFT)) & DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_2_MASK)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_1_MASK (0x3FF00000U)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_1_SHIFT (20U)
#define DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_1(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_1_SHIFT)) & DTG_TC_CH3_BKRND_REG18_TC_CH3_BKRND_PEL_COMP_1_MASK)
/*! @} */

/*! @name TC_INTRERRUPT_MASK - Timing Controller interrupt masks */
/*! @{ */
#define DTG_TC_INTRERRUPT_MASK_TC_LINE0_INT_MASK_MASK (0x1U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE0_INT_MASK_SHIFT (0U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE1_INT_MASK_MASK (0x2U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE1_INT_MASK_SHIFT (1U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE2_INT_MASK_MASK (0x4U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE2_INT_MASK_SHIFT (2U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE3_INT_MASK_MASK (0x8U)
#define DTG_TC_INTRERRUPT_MASK_TC_LINE3_INT_MASK_SHIFT (3U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH1_PANIC_INT_MASK_MASK (0x10U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH1_PANIC_INT_MASK_SHIFT (4U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH2_PANIC_INT_MASK_MASK (0x20U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH2_PANIC_INT_MASK_SHIFT (5U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH3_PANIC_INT_MASK_MASK (0x40U)
#define DTG_TC_INTRERRUPT_MASK_TC_RTRAM_CH3_PANIC_INT_MASK_SHIFT (6U)
/*! @} */

/*! @name TC_LINE3_INT_REG - LINE3 interrupt control: Coordinate where line3 interrupt is asserted */
/*! @{ */
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_X_MASK (0x1FFFU)
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_X_SHIFT (0U)
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_X(x)   (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE3_INT_REG_TC_LINE3_INT_X_SHIFT)) & DTG_TC_LINE3_INT_REG_TC_LINE3_INT_X_MASK)
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_Y_MASK (0x1FFF0000U)
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_Y_SHIFT (16U)
#define DTG_TC_LINE3_INT_REG_TC_LINE3_INT_Y(x)   (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE3_INT_REG_TC_LINE3_INT_Y_SHIFT)) & DTG_TC_LINE3_INT_REG_TC_LINE3_INT_Y_MASK)
/*! @} */

/*! @name TC_LINE4_INT_REG - LINE4 interrupt control: Coordinate where line4 interrupt is asserted */
/*! @{ */
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_X_MASK (0x1FFFU)
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_X_SHIFT (0U)
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_X(x)   (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE4_INT_REG_TC_LINE4_INT_X_SHIFT)) & DTG_TC_LINE4_INT_REG_TC_LINE4_INT_X_MASK)
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_Y_MASK (0x1FFF0000U)
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_Y_SHIFT (16U)
#define DTG_TC_LINE4_INT_REG_TC_LINE4_INT_Y(x)   (((uint32_t)(((uint32_t)(x)) << DTG_TC_LINE4_INT_REG_TC_LINE4_INT_Y_SHIFT)) & DTG_TC_LINE4_INT_REG_TC_LINE4_INT_Y_MASK)
/*! @} */

/*! @name TC_OL_DE_CONTROL_REG - For DBY Mode: Controls the assertion and de-assertion DE signal (Overlay channel). */
/*! @{ */
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK (0x1FFFU)
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT (0U)
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_LOW_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT)) & DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK)
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK (0x1FFF0000U)
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT (16U)
#define DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_HIGH_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT)) & DTG_TC_OL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK)
#define DTG_TC_OL_DE_CONTROL_REG_TC_INVERT_DE_X_MASK (0x80000000U)
#define DTG_TC_OL_DE_CONTROL_REG_TC_INVERT_DE_X_SHIFT (31U)
/*! @} */

/*! @name TC_BL_DE_CONTROL_REG - For DBY Mode: Controls the assertion and de-assertion DE signal (Base layer (BL) channel). */
/*! @{ */
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK (0x1FFFU)
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT (0U)
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_LOW_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT)) & DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK)
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK (0x1FFF0000U)
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT (16U)
#define DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_HIGH_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT)) & DTG_TC_BL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK)
#define DTG_TC_BL_DE_CONTROL_REG_TC_INVERT_DE_X_MASK (0x80000000U)
#define DTG_TC_BL_DE_CONTROL_REG_TC_INVERT_DE_X_SHIFT (31U)
/*! @} */

/*! @name TC_EL_DE_CONTROL_REG - For DBY Mode: Controls the assertion and de-assertion DE signal (Enhancement layer (EL) channel). */
/*! @{ */
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK (0x1FFFU)
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT (0U)
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_LOW_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_LOW_X_SHIFT)) & DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_LOW_X_MASK)
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK (0x1FFF0000U)
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT (16U)
#define DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_HIGH_X(x) (((uint32_t)(((uint32_t)(x)) << DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_SHIFT)) & DTG_TC_EL_DE_CONTROL_REG_TC_DE_SET_HIGH_X_MASK)
#define DTG_TC_EL_DE_CONTROL_REG_TC_INVERT_DE_X_MASK (0x80000000U)
#define DTG_TC_EL_DE_CONTROL_REG_TC_INVERT_DE_X_SHIFT (31U)
/*! @} */


/*!
 * @}
 */ /* end of group DTG_Register_Masks */


/* DTG - Peripheral instance base addresses */
/** Peripheral DCSS__DTG base pointer */
#define DCSS__DTG_BASE_PTR                       ((DTG_MemMapPtr)0x32E20000u)
/** Array initializer of DTG peripheral base pointers */
#define DTG_BASE_PTRS                            { DCSS__DTG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DTG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTG_Register_Accessor_Macros DTG - Register accessor macros
 * @{
 */


/* DTG - Register instance definitions */
/* DCSS__DTG */
#define DCSS__DTG_TC_CONTROL_STATUS              DTG_TC_CONTROL_STATUS_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_DTG_REG1                    DTG_TC_DTG_REG1_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_DISPLAY_REG2                DTG_TC_DISPLAY_REG2_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_DISPLAY_REG3                DTG_TC_DISPLAY_REG3_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH1_REG4                    DTG_TC_CH1_REG4_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH1_REG5                    DTG_TC_CH1_REG5_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH2_REG6                    DTG_TC_CH2_REG6_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH2_REG7                    DTG_TC_CH2_REG7_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH3_REG8                    DTG_TC_CH3_REG8_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH3_REG9                    DTG_TC_CH3_REG9_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CTX_LD_REG10                DTG_TC_CTX_LD_REG10_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH1_BKRND_REG11             DTG_TC_CH1_BKRND_REG11_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH2_BKRND_REG12             DTG_TC_CH2_BKRND_REG12_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_DBY_EOTF_RANGEINV      DTG_BLENDER_DBY_EOTF_RANGEINV_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_DBY_EOTF_RANGEMIN      DTG_BLENDER_DBY_EOTF_RANGEMIN_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_DBY_BDP                DTG_BLENDER_DBY_BDP_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_BKRND_I_GRAPHICS       DTG_BLENDER_BKRND_I_GRAPHICS_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_BKRND_P_GRAPHICS       DTG_BLENDER_BKRND_P_GRAPHICS_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_BLENDER_BKRND_T_GRAPHICS       DTG_BLENDER_BKRND_T_GRAPHICS_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_LINE1_INT_REG13             DTG_TC_LINE1_INT_REG13_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_LINE2_INT_REG14             DTG_TC_LINE2_INT_REG14_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_ALPHA_DEFAULT_REG15         DTG_TC_ALPHA_DEFAULT_REG15_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_INTERRUPT_STATUS            DTG_TC_INTERRUPT_STATUS_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_INTRERRUPT_CONTROL_REG17    DTG_TC_INTRERRUPT_CONTROL_REG17_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_CH3_BKRND_REG18             DTG_TC_CH3_BKRND_REG18_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_INTRERRUPT_MASK             DTG_TC_INTRERRUPT_MASK_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_LINE3_INT_REG               DTG_TC_LINE3_INT_REG_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_LINE4_INT_REG               DTG_TC_LINE4_INT_REG_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_OL_DE_CONTROL_REG           DTG_TC_OL_DE_CONTROL_REG_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_BL_DE_CONTROL_REG           DTG_TC_BL_DE_CONTROL_REG_REG(DCSS__DTG_BASE_PTR)
#define DCSS__DTG_TC_EL_DE_CONTROL_REG           DTG_TC_EL_DE_CONTROL_REG_REG(DCSS__DTG_BASE_PTR)

/*!
 * @}
 */ /* end of group DTG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DTG_Peripheral */


/* ----------------------------------------------------------------------------
   -- DTRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTRC_Peripheral DTRC
 * @{
 */

/** DTRC - Peripheral register structure */
typedef struct DTRC_MemMap {
  struct {                                         /* offset: 0x0, array step: 0x60 */
    uint32_t FDYDSADDR;                              /**< Luma video data start address, array offset: 0x0, array step: 0x60 */
    uint32_t FDCDSADDR;                              /**< Chroma video data start address, array offset: 0x4, array step: 0x60 */
    uint32_t FDYTSADDR;                              /**< Luma table data start address, array offset: 0x8, array step: 0x60 */
    uint32_t FDCTSADDR;                              /**< Chroma table data start address, array offset: 0xC, array step: 0x60 */
    uint32_t FSIZE;                                  /**< Frame size, array offset: 0x10, array step: 0x60 */
    uint32_t FSYSSA;                                 /**< Luma data slave start address, array offset: 0x14, array step: 0x60 */
    uint32_t FSYSEA;                                 /**< Luma data slave end address, array offset: 0x18, array step: 0x60 */
    uint32_t FSUVSSA;                                /**< Chroma data slave start address, array offset: 0x1C, array step: 0x60 */
    uint32_t FSUVSEA;                                /**< Chroma data slave end address, array offset: 0x20, array step: 0x60 */
    uint32_t FCROPORIG;                              /**< Cropped picture origin, array offset: 0x24, array step: 0x60 */
    uint32_t FCROPSIZE;                              /**< Cropped picture size, array offset: 0x28, array step: 0x60 */
    uint32_t FDCTL;                                  /**< Frame data control, array offset: 0x2C, array step: 0x60 */
    uint8_t RESERVED_0[48];
  } FRAME_REGISTERS[2];
  uint32_t DTRCINTEN;                              /**< DTRC Interrupt enables, offset: 0xC0 */
  uint32_t FDINTR;                                 /**< DTRC Interrupt Requests, offset: 0xC4 */
  uint32_t DTCTRL;                                 /**< DTRC Control, offset: 0xC8 */
  uint32_t ARIDR;                                  /**< ARIDR, offset: 0xCC */
  uint32_t DTID2DDR;                               /**< DTID2DDR, offset: 0xD0 */
  uint32_t DTRCCONFIG;                             /**< DTRCCONFIG, offset: 0xD4 */
  uint32_t DTRCVERSION;                            /**< DTRC Version, offset: 0xD8 */
  uint8_t RESERVED_0[20];
  uint32_t PFCTRL;                                 /**< Performance counter control, offset: 0xF0 */
  uint32_t PFCR;                                   /**< Performance counter, offset: 0xF4 */
  uint32_t TOCR;                                   /**< Time Out Cycles, offset: 0xF8 */
} volatile *DTRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DTRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTRC_Register_Accessor_Macros DTRC - Register accessor macros
 * @{
 */


/* DTRC - Register accessors */
#define DTRC_FDYDSADDR_REG(base,index)           ((base)->FRAME_REGISTERS[index].FDYDSADDR)
#define DTRC_FDCDSADDR_REG(base,index)           ((base)->FRAME_REGISTERS[index].FDCDSADDR)
#define DTRC_FDYTSADDR_REG(base,index)           ((base)->FRAME_REGISTERS[index].FDYTSADDR)
#define DTRC_FDCTSADDR_REG(base,index)           ((base)->FRAME_REGISTERS[index].FDCTSADDR)
#define DTRC_FSIZE_REG(base,index)               ((base)->FRAME_REGISTERS[index].FSIZE)
#define DTRC_FSYSSA_REG(base,index)              ((base)->FRAME_REGISTERS[index].FSYSSA)
#define DTRC_FSYSEA_REG(base,index)              ((base)->FRAME_REGISTERS[index].FSYSEA)
#define DTRC_FSUVSSA_REG(base,index)             ((base)->FRAME_REGISTERS[index].FSUVSSA)
#define DTRC_FSUVSEA_REG(base,index)             ((base)->FRAME_REGISTERS[index].FSUVSEA)
#define DTRC_FCROPORIG_REG(base,index)           ((base)->FRAME_REGISTERS[index].FCROPORIG)
#define DTRC_FCROPSIZE_REG(base,index)           ((base)->FRAME_REGISTERS[index].FCROPSIZE)
#define DTRC_FDCTL_REG(base,index)               ((base)->FRAME_REGISTERS[index].FDCTL)
#define DTRC_DTRCINTEN_REG(base)                 ((base)->DTRCINTEN)
#define DTRC_FDINTR_REG(base)                    ((base)->FDINTR)
#define DTRC_DTCTRL_REG(base)                    ((base)->DTCTRL)
#define DTRC_ARIDR_REG(base)                     ((base)->ARIDR)
#define DTRC_DTID2DDR_REG(base)                  ((base)->DTID2DDR)
#define DTRC_DTRCCONFIG_REG(base)                ((base)->DTRCCONFIG)
#define DTRC_DTRCVERSION_REG(base)               ((base)->DTRCVERSION)
#define DTRC_PFCTRL_REG(base)                    ((base)->PFCTRL)
#define DTRC_PFCR_REG(base)                      ((base)->PFCR)
#define DTRC_TOCR_REG(base)                      ((base)->TOCR)

/*!
 * @}
 */ /* end of group DTRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DTRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTRC_Register_Masks DTRC Register Masks
 * @{
 */

/*! @name FDYDSADDR - Luma video data start address */
/*! @{ */
#define DTRC_FDYDSADDR_F0DYDSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDYDSADDR_F0DYDSADDR_SHIFT          (0U)
#define DTRC_FDYDSADDR_F0DYDSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDYDSADDR_F0DYDSADDR_SHIFT)) & DTRC_FDYDSADDR_F0DYDSADDR_MASK)
#define DTRC_FDYDSADDR_F1DYDSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDYDSADDR_F1DYDSADDR_SHIFT          (0U)
#define DTRC_FDYDSADDR_F1DYDSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDYDSADDR_F1DYDSADDR_SHIFT)) & DTRC_FDYDSADDR_F1DYDSADDR_MASK)
/*! @} */

/* The count of DTRC_FDYDSADDR */
#define DTRC_FDYDSADDR_COUNT                     (2U)

/*! @name FDCDSADDR - Chroma video data start address */
/*! @{ */
#define DTRC_FDCDSADDR_F0DCDSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDCDSADDR_F0DCDSADDR_SHIFT          (0U)
#define DTRC_FDCDSADDR_F0DCDSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDCDSADDR_F0DCDSADDR_SHIFT)) & DTRC_FDCDSADDR_F0DCDSADDR_MASK)
#define DTRC_FDCDSADDR_F1DCDSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDCDSADDR_F1DCDSADDR_SHIFT          (0U)
#define DTRC_FDCDSADDR_F1DCDSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDCDSADDR_F1DCDSADDR_SHIFT)) & DTRC_FDCDSADDR_F1DCDSADDR_MASK)
/*! @} */

/* The count of DTRC_FDCDSADDR */
#define DTRC_FDCDSADDR_COUNT                     (2U)

/*! @name FDYTSADDR - Luma table data start address */
/*! @{ */
#define DTRC_FDYTSADDR_F0DYTSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDYTSADDR_F0DYTSADDR_SHIFT          (0U)
#define DTRC_FDYTSADDR_F0DYTSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDYTSADDR_F0DYTSADDR_SHIFT)) & DTRC_FDYTSADDR_F0DYTSADDR_MASK)
#define DTRC_FDYTSADDR_F1DYTSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDYTSADDR_F1DYTSADDR_SHIFT          (0U)
#define DTRC_FDYTSADDR_F1DYTSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDYTSADDR_F1DYTSADDR_SHIFT)) & DTRC_FDYTSADDR_F1DYTSADDR_MASK)
/*! @} */

/* The count of DTRC_FDYTSADDR */
#define DTRC_FDYTSADDR_COUNT                     (2U)

/*! @name FDCTSADDR - Chroma table data start address */
/*! @{ */
#define DTRC_FDCTSADDR_F0DCTSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDCTSADDR_F0DCTSADDR_SHIFT          (0U)
#define DTRC_FDCTSADDR_F0DCTSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDCTSADDR_F0DCTSADDR_SHIFT)) & DTRC_FDCTSADDR_F0DCTSADDR_MASK)
#define DTRC_FDCTSADDR_F1DCTSADDR_MASK           (0xFFFFFFFFU)
#define DTRC_FDCTSADDR_F1DCTSADDR_SHIFT          (0U)
#define DTRC_FDCTSADDR_F1DCTSADDR(x)             (((uint32_t)(((uint32_t)(x)) << DTRC_FDCTSADDR_F1DCTSADDR_SHIFT)) & DTRC_FDCTSADDR_F1DCTSADDR_MASK)
/*! @} */

/* The count of DTRC_FDCTSADDR */
#define DTRC_FDCTSADDR_COUNT                     (2U)

/*! @name FSIZE - Frame size */
/*! @{ */
#define DTRC_FSIZE_F0WIDTH_MASK                  (0x3FFU)
#define DTRC_FSIZE_F0WIDTH_SHIFT                 (0U)
#define DTRC_FSIZE_F0WIDTH(x)                    (((uint32_t)(((uint32_t)(x)) << DTRC_FSIZE_F0WIDTH_SHIFT)) & DTRC_FSIZE_F0WIDTH_MASK)
#define DTRC_FSIZE_F1WIDTH_MASK                  (0x3FFU)
#define DTRC_FSIZE_F1WIDTH_SHIFT                 (0U)
#define DTRC_FSIZE_F1WIDTH(x)                    (((uint32_t)(((uint32_t)(x)) << DTRC_FSIZE_F1WIDTH_SHIFT)) & DTRC_FSIZE_F1WIDTH_MASK)
#define DTRC_FSIZE_F0HEIGHT_MASK                 (0x3FF0000U)
#define DTRC_FSIZE_F0HEIGHT_SHIFT                (16U)
#define DTRC_FSIZE_F0HEIGHT(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSIZE_F0HEIGHT_SHIFT)) & DTRC_FSIZE_F0HEIGHT_MASK)
#define DTRC_FSIZE_F1HEIGHT_MASK                 (0x3FF0000U)
#define DTRC_FSIZE_F1HEIGHT_SHIFT                (16U)
#define DTRC_FSIZE_F1HEIGHT(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSIZE_F1HEIGHT_SHIFT)) & DTRC_FSIZE_F1HEIGHT_MASK)
/*! @} */

/* The count of DTRC_FSIZE */
#define DTRC_FSIZE_COUNT                         (2U)

/*! @name FSYSSA - Luma data slave start address */
/*! @{ */
#define DTRC_FSYSSA_F0YSTRBYPASS_MASK            (0x1U)
#define DTRC_FSYSSA_F0YSTRBYPASS_SHIFT           (0U)
#define DTRC_FSYSSA_F1YSTRBYPASS_MASK            (0x1U)
#define DTRC_FSYSSA_F1YSTRBYPASS_SHIFT           (0U)
#define DTRC_FSYSSA_F0SYSSA_MASK                 (0xFFFFFFF0U)
#define DTRC_FSYSSA_F0SYSSA_SHIFT                (4U)
#define DTRC_FSYSSA_F0SYSSA(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSYSSA_F0SYSSA_SHIFT)) & DTRC_FSYSSA_F0SYSSA_MASK)
#define DTRC_FSYSSA_F1SYSSA_MASK                 (0xFFFFFFF0U)
#define DTRC_FSYSSA_F1SYSSA_SHIFT                (4U)
#define DTRC_FSYSSA_F1SYSSA(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSYSSA_F1SYSSA_SHIFT)) & DTRC_FSYSSA_F1SYSSA_MASK)
/*! @} */

/* The count of DTRC_FSYSSA */
#define DTRC_FSYSSA_COUNT                        (2U)

/*! @name FSYSEA - Luma data slave end address */
/*! @{ */
#define DTRC_FSYSEA_F0YETRBYPASS_MASK            (0x1U)
#define DTRC_FSYSEA_F0YETRBYPASS_SHIFT           (0U)
#define DTRC_FSYSEA_F1YETRBYPASS_MASK            (0x1U)
#define DTRC_FSYSEA_F1YETRBYPASS_SHIFT           (0U)
#define DTRC_FSYSEA_F0SYSEA_MASK                 (0xFFFFFFF0U)
#define DTRC_FSYSEA_F0SYSEA_SHIFT                (4U)
#define DTRC_FSYSEA_F0SYSEA(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSYSEA_F0SYSEA_SHIFT)) & DTRC_FSYSEA_F0SYSEA_MASK)
#define DTRC_FSYSEA_F1SYSEA_MASK                 (0xFFFFFFF0U)
#define DTRC_FSYSEA_F1SYSEA_SHIFT                (4U)
#define DTRC_FSYSEA_F1SYSEA(x)                   (((uint32_t)(((uint32_t)(x)) << DTRC_FSYSEA_F1SYSEA_SHIFT)) & DTRC_FSYSEA_F1SYSEA_MASK)
/*! @} */

/* The count of DTRC_FSYSEA */
#define DTRC_FSYSEA_COUNT                        (2U)

/*! @name FSUVSSA - Chroma data slave start address */
/*! @{ */
#define DTRC_FSUVSSA_F0CSTRBYPASS_MASK           (0x1U)
#define DTRC_FSUVSSA_F0CSTRBYPASS_SHIFT          (0U)
#define DTRC_FSUVSSA_F1CSTRBYPASS_MASK           (0x1U)
#define DTRC_FSUVSSA_F1CSTRBYPASS_SHIFT          (0U)
#define DTRC_FSUVSSA_F0SUVSSA_MASK               (0xFFFFFFF0U)
#define DTRC_FSUVSSA_F0SUVSSA_SHIFT              (4U)
#define DTRC_FSUVSSA_F0SUVSSA(x)                 (((uint32_t)(((uint32_t)(x)) << DTRC_FSUVSSA_F0SUVSSA_SHIFT)) & DTRC_FSUVSSA_F0SUVSSA_MASK)
#define DTRC_FSUVSSA_F1SUVSSA_MASK               (0xFFFFFFF0U)
#define DTRC_FSUVSSA_F1SUVSSA_SHIFT              (4U)
#define DTRC_FSUVSSA_F1SUVSSA(x)                 (((uint32_t)(((uint32_t)(x)) << DTRC_FSUVSSA_F1SUVSSA_SHIFT)) & DTRC_FSUVSSA_F1SUVSSA_MASK)
/*! @} */

/* The count of DTRC_FSUVSSA */
#define DTRC_FSUVSSA_COUNT                       (2U)

/*! @name FSUVSEA - Chroma data slave end address */
/*! @{ */
#define DTRC_FSUVSEA_F0CETRBYPASS_MASK           (0x1U)
#define DTRC_FSUVSEA_F0CETRBYPASS_SHIFT          (0U)
#define DTRC_FSUVSEA_F1CETRBYPASS_MASK           (0x1U)
#define DTRC_FSUVSEA_F1CETRBYPASS_SHIFT          (0U)
#define DTRC_FSUVSEA_F0SUVSEA_MASK               (0xFFFFFFF0U)
#define DTRC_FSUVSEA_F0SUVSEA_SHIFT              (4U)
#define DTRC_FSUVSEA_F0SUVSEA(x)                 (((uint32_t)(((uint32_t)(x)) << DTRC_FSUVSEA_F0SUVSEA_SHIFT)) & DTRC_FSUVSEA_F0SUVSEA_MASK)
#define DTRC_FSUVSEA_F1SUVSEA_MASK               (0xFFFFFFF0U)
#define DTRC_FSUVSEA_F1SUVSEA_SHIFT              (4U)
#define DTRC_FSUVSEA_F1SUVSEA(x)                 (((uint32_t)(((uint32_t)(x)) << DTRC_FSUVSEA_F1SUVSEA_SHIFT)) & DTRC_FSUVSEA_F1SUVSEA_MASK)
/*! @} */

/* The count of DTRC_FSUVSEA */
#define DTRC_FSUVSEA_COUNT                       (2U)

/*! @name FCROPORIG - Cropped picture origin */
/*! @{ */
#define DTRC_FCROPORIG_F0CROPORIGX_MASK          (0x1FFFU)
#define DTRC_FCROPORIG_F0CROPORIGX_SHIFT         (0U)
#define DTRC_FCROPORIG_F0CROPORIGX(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPORIG_F0CROPORIGX_SHIFT)) & DTRC_FCROPORIG_F0CROPORIGX_MASK)
#define DTRC_FCROPORIG_F1CROPORIGX_MASK          (0x1FFFU)
#define DTRC_FCROPORIG_F1CROPORIGX_SHIFT         (0U)
#define DTRC_FCROPORIG_F1CROPORIGX(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPORIG_F1CROPORIGX_SHIFT)) & DTRC_FCROPORIG_F1CROPORIGX_MASK)
#define DTRC_FCROPORIG_F0CROPORIGY_MASK          (0x1FFF0000U)
#define DTRC_FCROPORIG_F0CROPORIGY_SHIFT         (16U)
#define DTRC_FCROPORIG_F0CROPORIGY(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPORIG_F0CROPORIGY_SHIFT)) & DTRC_FCROPORIG_F0CROPORIGY_MASK)
#define DTRC_FCROPORIG_F1CROPORIGY_MASK          (0x1FFF0000U)
#define DTRC_FCROPORIG_F1CROPORIGY_SHIFT         (16U)
#define DTRC_FCROPORIG_F1CROPORIGY(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPORIG_F1CROPORIGY_SHIFT)) & DTRC_FCROPORIG_F1CROPORIGY_MASK)
/*! @} */

/* The count of DTRC_FCROPORIG */
#define DTRC_FCROPORIG_COUNT                     (2U)

/*! @name FCROPSIZE - Cropped picture size */
/*! @{ */
#define DTRC_FCROPSIZE_F0CROPWIDTH_MASK          (0x1FFFU)
#define DTRC_FCROPSIZE_F0CROPWIDTH_SHIFT         (0U)
#define DTRC_FCROPSIZE_F0CROPWIDTH(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPSIZE_F0CROPWIDTH_SHIFT)) & DTRC_FCROPSIZE_F0CROPWIDTH_MASK)
#define DTRC_FCROPSIZE_F1CROPWIDTH_MASK          (0x1FFFU)
#define DTRC_FCROPSIZE_F1CROPWIDTH_SHIFT         (0U)
#define DTRC_FCROPSIZE_F1CROPWIDTH(x)            (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPSIZE_F1CROPWIDTH_SHIFT)) & DTRC_FCROPSIZE_F1CROPWIDTH_MASK)
#define DTRC_FCROPSIZE_F0CROPHEIGHT_MASK         (0x1FFF0000U)
#define DTRC_FCROPSIZE_F0CROPHEIGHT_SHIFT        (16U)
#define DTRC_FCROPSIZE_F0CROPHEIGHT(x)           (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPSIZE_F0CROPHEIGHT_SHIFT)) & DTRC_FCROPSIZE_F0CROPHEIGHT_MASK)
#define DTRC_FCROPSIZE_F1CROPHEIGHT_MASK         (0x1FFF0000U)
#define DTRC_FCROPSIZE_F1CROPHEIGHT_SHIFT        (16U)
#define DTRC_FCROPSIZE_F1CROPHEIGHT(x)           (((uint32_t)(((uint32_t)(x)) << DTRC_FCROPSIZE_F1CROPHEIGHT_SHIFT)) & DTRC_FCROPSIZE_F1CROPHEIGHT_MASK)
/*! @} */

/* The count of DTRC_FCROPSIZE */
#define DTRC_FCROPSIZE_COUNT                     (2U)

/*! @name FDCTL - Frame data control */
/*! @{ */
#define DTRC_FDCTL_F0FRAMECFG_MASK               (0x1U)
#define DTRC_FDCTL_F0FRAMECFG_SHIFT              (0U)
#define DTRC_FDCTL_F1FRAMECFG_MASK               (0x1U)
#define DTRC_FDCTL_F1FRAMECFG_SHIFT              (0U)
#define DTRC_FDCTL_F0PIXELBITDEPTH_MASK          (0x2U)
#define DTRC_FDCTL_F0PIXELBITDEPTH_SHIFT         (1U)
#define DTRC_FDCTL_F1PIXELBITDEPTH_MASK          (0x2U)
#define DTRC_FDCTL_F1PIXELBITDEPTH_SHIFT         (1U)
#define DTRC_FDCTL_F0DECOMPRESS_MASK             (0x20000U)
#define DTRC_FDCTL_F0DECOMPRESS_SHIFT            (17U)
#define DTRC_FDCTL_F1DECOMPRESS_MASK             (0x20000U)
#define DTRC_FDCTL_F1DECOMPRESS_SHIFT            (17U)
#define DTRC_FDCTL_F0CROPENABLE_MASK             (0x40000U)
#define DTRC_FDCTL_F0CROPENABLE_SHIFT            (18U)
#define DTRC_FDCTL_F1CROPENABLE_MASK             (0x40000U)
#define DTRC_FDCTL_F1CROPENABLE_SHIFT            (18U)
/*! @} */

/* The count of DTRC_FDCTL */
#define DTRC_FDCTL_COUNT                         (2U)

/*! @name DTRCINTEN - DTRC Interrupt enables */
/*! @{ */
#define DTRC_DTRCINTEN_FRAMEFETCHDONE_EN_MASK    (0x1U)
#define DTRC_DTRCINTEN_FRAMEFETCHDONE_EN_SHIFT   (0U)
#define DTRC_DTRCINTEN_BUSERROR_EN_MASK          (0x2U)
#define DTRC_DTRCINTEN_BUSERROR_EN_SHIFT         (1U)
#define DTRC_DTRCINTEN_TIMEOUT_EN_MASK           (0x4U)
#define DTRC_DTRCINTEN_TIMEOUT_EN_SHIFT          (2U)
#define DTRC_DTRCINTEN_SLFRAMEFETCHDONE_EN_MASK  (0x8U)
#define DTRC_DTRCINTEN_SLFRAMEFETCHDONE_EN_SHIFT (3U)
#define DTRC_DTRCINTEN_HOTRESETFINISH_EN_MASK    (0x10U)
#define DTRC_DTRCINTEN_HOTRESETFINISH_EN_SHIFT   (4U)
/*! @} */

/*! @name FDINTR - DTRC Interrupt Requests */
/*! @{ */
#define DTRC_FDINTR_FRAMEFETCHDONE_MASK          (0x1U)
#define DTRC_FDINTR_FRAMEFETCHDONE_SHIFT         (0U)
#define DTRC_FDINTR_BUSERROR_MASK                (0x2U)
#define DTRC_FDINTR_BUSERROR_SHIFT               (1U)
#define DTRC_FDINTR_TIMEOUT_MASK                 (0x4U)
#define DTRC_FDINTR_TIMEOUT_SHIFT                (2U)
#define DTRC_FDINTR_SLFRAMEFETCHDONE_MASK        (0x8U)
#define DTRC_FDINTR_SLFRAMEFETCHDONE_SHIFT       (3U)
#define DTRC_FDINTR_HOTRESETFINISH_MASK          (0x10U)
#define DTRC_FDINTR_HOTRESETFINISH_SHIFT         (4U)
/*! @} */

/*! @name DTCTRL - DTRC Control */
/*! @{ */
#define DTRC_DTCTRL_ARIDRCFG_MASK                (0x3U)
#define DTRC_DTCTRL_ARIDRCFG_SHIFT               (0U)
/*! ARIDRCFG - ARIDR configuration
 *  0b00..All ARID is de-tiled.
 *  0b01..ARID in ARIDR is de-tiled, and others are bypass. NOTE: ARID[0] specify decode luma or chroma, so 4
 *        ARIDs in ARIDR should include both of ARID[0] ==1 and ARID[0] ==0.
 *  0b10..ARID in ARIDR is bypass_de-tile, and others are de-tiled.
 *  0b11..Same as 2'b01.
 */
#define DTRC_DTCTRL_ARIDRCFG(x)                  (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_ARIDRCFG_SHIFT)) & DTRC_DTCTRL_ARIDRCFG_MASK)
#define DTRC_DTCTRL_HOTRESETTRIG_MASK            (0x4U)
#define DTRC_DTCTRL_HOTRESETTRIG_SHIFT           (2U)
#define DTRC_DTCTRL_G1G2DATA_MASK                (0x8U)
#define DTRC_DTCTRL_G1G2DATA_SHIFT               (3U)
#define DTRC_DTCTRL_AXIMAXBURSTL_MASK            (0xFF0U)
#define DTRC_DTCTRL_AXIMAXBURSTL_SHIFT           (4U)
#define DTRC_DTCTRL_AXIMAXBURSTL(x)              (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_AXIMAXBURSTL_SHIFT)) & DTRC_DTCTRL_AXIMAXBURSTL_MASK)
#define DTRC_DTCTRL_BYTESWAP_SLRAST_MASK         (0xF000U)
#define DTRC_DTCTRL_BYTESWAP_SLRAST_SHIFT        (12U)
#define DTRC_DTCTRL_BYTESWAP_SLRAST(x)           (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_BYTESWAP_SLRAST_SHIFT)) & DTRC_DTCTRL_BYTESWAP_SLRAST_MASK)
#define DTRC_DTCTRL_BYTESWAP_MCOMPTILE_MASK      (0xF0000U)
#define DTRC_DTCTRL_BYTESWAP_MCOMPTILE_SHIFT     (16U)
#define DTRC_DTCTRL_BYTESWAP_MCOMPTILE(x)        (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_BYTESWAP_MCOMPTILE_SHIFT)) & DTRC_DTCTRL_BYTESWAP_MCOMPTILE_MASK)
#define DTRC_DTCTRL_BYTESWAP_MTABLE_MASK         (0xF00000U)
#define DTRC_DTCTRL_BYTESWAP_MTABLE_SHIFT        (20U)
#define DTRC_DTCTRL_BYTESWAP_MTABLE(x)           (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_BYTESWAP_MTABLE_SHIFT)) & DTRC_DTCTRL_BYTESWAP_MTABLE_MASK)
#define DTRC_DTCTRL_BYTESWAP_M_NONG1G2_MASK      (0xF000000U)
#define DTRC_DTCTRL_BYTESWAP_M_NONG1G2_SHIFT     (24U)
#define DTRC_DTCTRL_BYTESWAP_M_NONG1G2(x)        (((uint32_t)(((uint32_t)(x)) << DTRC_DTCTRL_BYTESWAP_M_NONG1G2_SHIFT)) & DTRC_DTCTRL_BYTESWAP_M_NONG1G2_MASK)
#define DTRC_DTCTRL_MERGEG1G2_ARIDEN_MASK        (0x10000000U)
#define DTRC_DTCTRL_MERGEG1G2_ARIDEN_SHIFT       (28U)
#define DTRC_DTCTRL_RAST_ENDIAN_MASK             (0x20000000U)
#define DTRC_DTCTRL_RAST_ENDIAN_SHIFT            (29U)
#define DTRC_DTCTRL_ADDR_ARID_MASK               (0x40000000U)
#define DTRC_DTCTRL_ADDR_ARID_SHIFT              (30U)
#define DTRC_DTCTRL_FRBUFF_PTR_MASK              (0x80000000U)
#define DTRC_DTCTRL_FRBUFF_PTR_SHIFT             (31U)
/*! @} */

/*! @name ARIDR - ARIDR */
/*! @{ */
#define DTRC_ARIDR_ARIDR_MASK                    (0xFFFFFFFFU)
#define DTRC_ARIDR_ARIDR_SHIFT                   (0U)
#define DTRC_ARIDR_ARIDR(x)                      (((uint32_t)(((uint32_t)(x)) << DTRC_ARIDR_ARIDR_SHIFT)) & DTRC_ARIDR_ARIDR_MASK)
/*! @} */

/*! @name DTID2DDR - DTID2DDR */
/*! @{ */
#define DTRC_DTID2DDR_ARID_COMPR_MASK            (0xFFU)
#define DTRC_DTID2DDR_ARID_COMPR_SHIFT           (0U)
#define DTRC_DTID2DDR_ARID_COMPR(x)              (((uint32_t)(((uint32_t)(x)) << DTRC_DTID2DDR_ARID_COMPR_SHIFT)) & DTRC_DTID2DDR_ARID_COMPR_MASK)
#define DTRC_DTID2DDR_ARID_TABLE_MASK            (0xFF00U)
#define DTRC_DTID2DDR_ARID_TABLE_SHIFT           (8U)
#define DTRC_DTID2DDR_ARID_TABLE(x)              (((uint32_t)(((uint32_t)(x)) << DTRC_DTID2DDR_ARID_TABLE_SHIFT)) & DTRC_DTID2DDR_ARID_TABLE_MASK)
/*! @} */

/*! @name DTRCCONFIG - DTRCCONFIG */
/*! @{ */
#define DTRC_DTRCCONFIG_G1G2_KEEPORDER_MASK      (0x2U)
#define DTRC_DTRCCONFIG_G1G2_KEEPORDER_SHIFT     (1U)
#define DTRC_DTRCCONFIG_AXI_MAXBURSTL_MASK       (0x4U)
#define DTRC_DTRCCONFIG_AXI_MAXBURSTL_SHIFT      (2U)
#define DTRC_DTRCCONFIG_G1TILE_INPUT_MASK        (0x8U)
#define DTRC_DTRCCONFIG_G1TILE_INPUT_SHIFT       (3U)
#define DTRC_DTRCCONFIG_MAX_PIC_WIDTH_MASK       (0x30U)
#define DTRC_DTRCCONFIG_MAX_PIC_WIDTH_SHIFT      (4U)
/*! MAX_PIC_WIDTH - MAX_PIC_WIDTH
 *  0b00..4096
 *  0b01..1920
 *  0b10..Reserved.
 *  0b11..Reserved.
 */
#define DTRC_DTRCCONFIG_MAX_PIC_WIDTH(x)         (((uint32_t)(((uint32_t)(x)) << DTRC_DTRCCONFIG_MAX_PIC_WIDTH_SHIFT)) & DTRC_DTRCCONFIG_MAX_PIC_WIDTH_MASK)
/*! @} */

/*! @name DTRCVERSION - DTRC Version */
/*! @{ */
#define DTRC_DTRCVERSION_CUST_VERSION_MASK       (0xFU)
#define DTRC_DTRCVERSION_CUST_VERSION_SHIFT      (0U)
#define DTRC_DTRCVERSION_CUST_VERSION(x)         (((uint32_t)(((uint32_t)(x)) << DTRC_DTRCVERSION_CUST_VERSION_SHIFT)) & DTRC_DTRCVERSION_CUST_VERSION_MASK)
#define DTRC_DTRCVERSION_MINOR_MASK              (0x3F0U)
#define DTRC_DTRCVERSION_MINOR_SHIFT             (4U)
#define DTRC_DTRCVERSION_MINOR(x)                (((uint32_t)(((uint32_t)(x)) << DTRC_DTRCVERSION_MINOR_SHIFT)) & DTRC_DTRCVERSION_MINOR_MASK)
#define DTRC_DTRCVERSION_MAJOR_MASK              (0xFC00U)
#define DTRC_DTRCVERSION_MAJOR_SHIFT             (10U)
#define DTRC_DTRCVERSION_MAJOR(x)                (((uint32_t)(((uint32_t)(x)) << DTRC_DTRCVERSION_MAJOR_SHIFT)) & DTRC_DTRCVERSION_MAJOR_MASK)
/*! @} */

/*! @name PFCTRL - Performance counter control */
/*! @{ */
#define DTRC_PFCTRL_PFC_EN_MASK                  (0x1U)
#define DTRC_PFCTRL_PFC_EN_SHIFT                 (0U)
/*! @} */

/*! @name PFCR - Performance counter */
/*! @{ */
#define DTRC_PFCR_PFCR_MASK                      (0xFFFFFFFFU)
#define DTRC_PFCR_PFCR_SHIFT                     (0U)
#define DTRC_PFCR_PFCR(x)                        (((uint32_t)(((uint32_t)(x)) << DTRC_PFCR_PFCR_SHIFT)) & DTRC_PFCR_PFCR_MASK)
/*! @} */

/*! @name TOCR - Time Out Cycles */
/*! @{ */
#define DTRC_TOCR_TOCR_MASK                      (0xFFFFFFFFU)
#define DTRC_TOCR_TOCR_SHIFT                     (0U)
#define DTRC_TOCR_TOCR(x)                        (((uint32_t)(((uint32_t)(x)) << DTRC_TOCR_TOCR_SHIFT)) & DTRC_TOCR_TOCR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DTRC_Register_Masks */


/* DTRC - Peripheral instance base addresses */
/** Peripheral DCSS__DTRC1 base pointer */
#define DCSS__DTRC1_BASE_PTR                     ((DTRC_MemMapPtr)0x32E16000u)
/** Peripheral DCSS__DTRC2 base pointer */
#define DCSS__DTRC2_BASE_PTR                     ((DTRC_MemMapPtr)0x32E17000u)
/** Array initializer of DTRC peripheral base pointers */
#define DTRC_BASE_PTRS                           { DCSS__DTRC1_BASE_PTR, DCSS__DTRC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DTRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DTRC_Register_Accessor_Macros DTRC - Register accessor macros
 * @{
 */


/* DTRC - Register instance definitions */
/* DCSS__DTRC1 */
#define DCSS__DTRC1_F0DYDSADDR                   DTRC_FDYDSADDR_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0DCDSADDR                   DTRC_FDCDSADDR_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0DYTSADDR                   DTRC_FDYTSADDR_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0DCTSADDR                   DTRC_FDCTSADDR_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0SIZE                       DTRC_FSIZE_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0SYSSA                      DTRC_FSYSSA_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0SYSEA                      DTRC_FSYSEA_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0SUVSSA                     DTRC_FSUVSSA_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0SUVSEA                     DTRC_FSUVSEA_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0CROPORIG                   DTRC_FCROPORIG_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0CROPSIZE                   DTRC_FCROPSIZE_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F0DCTL                       DTRC_FDCTL_REG(DCSS__DTRC1_BASE_PTR,0)
#define DCSS__DTRC1_F1DYDSADDR                   DTRC_FDYDSADDR_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1DCDSADDR                   DTRC_FDCDSADDR_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1DYTSADDR                   DTRC_FDYTSADDR_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1DCTSADDR                   DTRC_FDCTSADDR_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1SIZE                       DTRC_FSIZE_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1SYSSA                      DTRC_FSYSSA_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1SYSEA                      DTRC_FSYSEA_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1SUVSSA                     DTRC_FSUVSSA_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1SUVSEA                     DTRC_FSUVSEA_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1CROPORIG                   DTRC_FCROPORIG_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1CROPSIZE                   DTRC_FCROPSIZE_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_F1DCTL                       DTRC_FDCTL_REG(DCSS__DTRC1_BASE_PTR,1)
#define DCSS__DTRC1_DTRCINTEN                    DTRC_DTRCINTEN_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_FDINTR                       DTRC_FDINTR_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_DTCTRL                       DTRC_DTCTRL_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_ARIDR                        DTRC_ARIDR_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_DTID2DDR                     DTRC_DTID2DDR_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_DTRCCONFIG                   DTRC_DTRCCONFIG_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_DTRCVERSION                  DTRC_DTRCVERSION_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_PFCTRL                       DTRC_PFCTRL_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_PFCR                         DTRC_PFCR_REG(DCSS__DTRC1_BASE_PTR)
#define DCSS__DTRC1_TOCR                         DTRC_TOCR_REG(DCSS__DTRC1_BASE_PTR)
/* DCSS__DTRC2 */
#define DCSS__DTRC2_F0DYDSADDR                   DTRC_FDYDSADDR_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0DCDSADDR                   DTRC_FDCDSADDR_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0DYTSADDR                   DTRC_FDYTSADDR_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0DCTSADDR                   DTRC_FDCTSADDR_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0SIZE                       DTRC_FSIZE_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0SYSSA                      DTRC_FSYSSA_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0SYSEA                      DTRC_FSYSEA_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0SUVSSA                     DTRC_FSUVSSA_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0SUVSEA                     DTRC_FSUVSEA_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0CROPORIG                   DTRC_FCROPORIG_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0CROPSIZE                   DTRC_FCROPSIZE_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F0DCTL                       DTRC_FDCTL_REG(DCSS__DTRC2_BASE_PTR,0)
#define DCSS__DTRC2_F1DYDSADDR                   DTRC_FDYDSADDR_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1DCDSADDR                   DTRC_FDCDSADDR_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1DYTSADDR                   DTRC_FDYTSADDR_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1DCTSADDR                   DTRC_FDCTSADDR_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1SIZE                       DTRC_FSIZE_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1SYSSA                      DTRC_FSYSSA_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1SYSEA                      DTRC_FSYSEA_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1SUVSSA                     DTRC_FSUVSSA_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1SUVSEA                     DTRC_FSUVSEA_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1CROPORIG                   DTRC_FCROPORIG_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1CROPSIZE                   DTRC_FCROPSIZE_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_F1DCTL                       DTRC_FDCTL_REG(DCSS__DTRC2_BASE_PTR,1)
#define DCSS__DTRC2_DTRCINTEN                    DTRC_DTRCINTEN_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_FDINTR                       DTRC_FDINTR_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_DTCTRL                       DTRC_DTCTRL_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_ARIDR                        DTRC_ARIDR_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_DTID2DDR                     DTRC_DTID2DDR_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_DTRCCONFIG                   DTRC_DTRCCONFIG_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_DTRCVERSION                  DTRC_DTRCVERSION_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_PFCTRL                       DTRC_PFCTRL_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_PFCR                         DTRC_PFCR_REG(DCSS__DTRC2_BASE_PTR)
#define DCSS__DTRC2_TOCR                         DTRC_TOCR_REG(DCSS__DTRC2_BASE_PTR)

/* DTRC - Register array accessors */
#define DCSS__DTRC1_FDYDSADDR(index)             DTRC_FDYDSADDR_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FDYDSADDR(index)             DTRC_FDYDSADDR_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FDCDSADDR(index)             DTRC_FDCDSADDR_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FDCDSADDR(index)             DTRC_FDCDSADDR_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FDYTSADDR(index)             DTRC_FDYTSADDR_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FDYTSADDR(index)             DTRC_FDYTSADDR_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FDCTSADDR(index)             DTRC_FDCTSADDR_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FDCTSADDR(index)             DTRC_FDCTSADDR_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FSIZE(index)                 DTRC_FSIZE_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FSIZE(index)                 DTRC_FSIZE_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FSYSSA(index)                DTRC_FSYSSA_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FSYSSA(index)                DTRC_FSYSSA_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FSYSEA(index)                DTRC_FSYSEA_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FSYSEA(index)                DTRC_FSYSEA_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FSUVSSA(index)               DTRC_FSUVSSA_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FSUVSSA(index)               DTRC_FSUVSSA_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FSUVSEA(index)               DTRC_FSUVSEA_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FSUVSEA(index)               DTRC_FSUVSEA_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FCROPORIG(index)             DTRC_FCROPORIG_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FCROPORIG(index)             DTRC_FCROPORIG_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FCROPSIZE(index)             DTRC_FCROPSIZE_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FCROPSIZE(index)             DTRC_FCROPSIZE_REG(DCSS__DTRC2_BASE_PTR,index)
#define DCSS__DTRC1_FDCTL(index)                 DTRC_FDCTL_REG(DCSS__DTRC1_BASE_PTR,index)
#define DCSS__DTRC2_FDCTL(index)                 DTRC_FDCTL_REG(DCSS__DTRC2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DTRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DTRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- ECSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Peripheral ECSPI
 * @{
 */

/** ECSPI - Peripheral register structure */
typedef struct ECSPI_MemMap {
  uint32_t RXDATA;                                 /**< Receive Data Register, offset: 0x0 */
  uint32_t TXDATA;                                 /**< Transmit Data Register, offset: 0x4 */
  uint32_t CONREG;                                 /**< Control Register, offset: 0x8 */
  uint32_t CONFIGREG;                              /**< Config Register, offset: 0xC */
  uint32_t INTREG;                                 /**< Interrupt Control Register, offset: 0x10 */
  uint32_t DMAREG;                                 /**< DMA Control Register, offset: 0x14 */
  uint32_t STATREG;                                /**< Status Register, offset: 0x18 */
  uint32_t PERIODREG;                              /**< Sample Period Control Register, offset: 0x1C */
  uint32_t TESTREG;                                /**< Test Control Register, offset: 0x20 */
  uint8_t RESERVED_0[28];
  uint32_t MSGDATA;                                /**< Message Data Register, offset: 0x40 */
} volatile *ECSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ECSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Accessor_Macros ECSPI - Register accessor macros
 * @{
 */


/* ECSPI - Register accessors */
#define ECSPI_RXDATA_REG(base)                   ((base)->RXDATA)
#define ECSPI_TXDATA_REG(base)                   ((base)->TXDATA)
#define ECSPI_CONREG_REG(base)                   ((base)->CONREG)
#define ECSPI_CONFIGREG_REG(base)                ((base)->CONFIGREG)
#define ECSPI_INTREG_REG(base)                   ((base)->INTREG)
#define ECSPI_DMAREG_REG(base)                   ((base)->DMAREG)
#define ECSPI_STATREG_REG(base)                  ((base)->STATREG)
#define ECSPI_PERIODREG_REG(base)                ((base)->PERIODREG)
#define ECSPI_TESTREG_REG(base)                  ((base)->TESTREG)
#define ECSPI_MSGDATA_REG(base)                  ((base)->MSGDATA)

/*!
 * @}
 */ /* end of group ECSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ECSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Masks ECSPI Register Masks
 * @{
 */

/*! @name RXDATA - Receive Data Register */
/*! @{ */
#define ECSPI_RXDATA_ECSPI_RXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_RXDATA_ECSPI_RXDATA_SHIFT          (0U)
#define ECSPI_RXDATA_ECSPI_RXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_RXDATA_ECSPI_RXDATA_SHIFT)) & ECSPI_RXDATA_ECSPI_RXDATA_MASK)
/*! @} */

/*! @name TXDATA - Transmit Data Register */
/*! @{ */
#define ECSPI_TXDATA_ECSPI_TXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_TXDATA_ECSPI_TXDATA_SHIFT          (0U)
#define ECSPI_TXDATA_ECSPI_TXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_TXDATA_ECSPI_TXDATA_SHIFT)) & ECSPI_TXDATA_ECSPI_TXDATA_MASK)
/*! @} */

/*! @name CONREG - Control Register */
/*! @{ */
#define ECSPI_CONREG_EN_MASK                     (0x1U)
#define ECSPI_CONREG_EN_SHIFT                    (0U)
#define ECSPI_CONREG_HT_MASK                     (0x2U)
#define ECSPI_CONREG_HT_SHIFT                    (1U)
#define ECSPI_CONREG_XCH_MASK                    (0x4U)
#define ECSPI_CONREG_XCH_SHIFT                   (2U)
#define ECSPI_CONREG_SMC_MASK                    (0x8U)
#define ECSPI_CONREG_SMC_SHIFT                   (3U)
#define ECSPI_CONREG_CHANNEL_MODE_MASK           (0xF0U)
#define ECSPI_CONREG_CHANNEL_MODE_SHIFT          (4U)
/*! CHANNEL_MODE
 *  0b0000..Slave mode.
 *  0b0001..Master mode.
 */
#define ECSPI_CONREG_CHANNEL_MODE(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_MODE_SHIFT)) & ECSPI_CONREG_CHANNEL_MODE_MASK)
#define ECSPI_CONREG_POST_DIVIDER_MASK           (0xF00U)
#define ECSPI_CONREG_POST_DIVIDER_SHIFT          (8U)
/*! POST_DIVIDER
 *  0b0000..Divide by 1.
 *  0b0001..Divide by 2.
 *  0b0010..Divide by 4.
 *  0b1110..Divide by 2 14 .
 *  0b1111..Divide by 2 15 .
 */
#define ECSPI_CONREG_POST_DIVIDER(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_POST_DIVIDER_SHIFT)) & ECSPI_CONREG_POST_DIVIDER_MASK)
#define ECSPI_CONREG_PRE_DIVIDER_MASK            (0xF000U)
#define ECSPI_CONREG_PRE_DIVIDER_SHIFT           (12U)
/*! PRE_DIVIDER
 *  0b0000..Divide by 1.
 *  0b0001..Divide by 2.
 *  0b0010..Divide by 3.
 *  0b1101..Divide by 14.
 *  0b1110..Divide by 15.
 *  0b1111..Divide by 16.
 */
#define ECSPI_CONREG_PRE_DIVIDER(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_PRE_DIVIDER_SHIFT)) & ECSPI_CONREG_PRE_DIVIDER_MASK)
#define ECSPI_CONREG_DRCTL_MASK                  (0x30000U)
#define ECSPI_CONREG_DRCTL_SHIFT                 (16U)
/*! DRCTL
 *  0b00..The SPI_RDY signal is a don't care.
 *  0b01..Burst will be triggered by the falling edge of the SPI_RDY signal (edge-triggered).
 *  0b10..Burst will be triggered by a low level of the SPI_RDY signal (level-triggered).
 *  0b11..Reserved.
 */
#define ECSPI_CONREG_DRCTL(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_DRCTL_SHIFT)) & ECSPI_CONREG_DRCTL_MASK)
#define ECSPI_CONREG_CHANNEL_SELECT_MASK         (0xC0000U)
#define ECSPI_CONREG_CHANNEL_SELECT_SHIFT        (18U)
/*! CHANNEL_SELECT
 *  0b00..Channel 0 is selected. Chip Select 0 (SS0) will be asserted.
 *  0b01..Channel 1 is selected. Chip Select 1 (SS1) will be asserted.
 *  0b10..Channel 2 is selected. Chip Select 2 (SS2) will be asserted.
 *  0b11..Channel 3 is selected. Chip Select 3 (SS3) will be asserted.
 */
#define ECSPI_CONREG_CHANNEL_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_SELECT_SHIFT)) & ECSPI_CONREG_CHANNEL_SELECT_MASK)
#define ECSPI_CONREG_BURST_LENGTH_MASK           (0xFFF00000U)
#define ECSPI_CONREG_BURST_LENGTH_SHIFT          (20U)
/*! BURST_LENGTH
 *  0b000000000000..A SPI burst contains the 1 LSB in a word.
 *  0b000000000001..A SPI burst contains the 2 LSB in a word.
 *  0b000000000010..A SPI burst contains the 3 LSB in a word.
 *  0b000000011111..A SPI burst contains all 32 bits in a word.
 *  0b000000100000..A SPI burst contains the 1 LSB in first word and all 32 bits in second word.
 *  0b000000100001..A SPI burst contains the 2 LSB in first word and all 32 bits in second word.
 *  0b111111111110..A SPI burst contains the 31 LSB in first word and 2^7 -1 words.
 *  0b111111111111..A SPI burst contains 2^7 words.
 */
#define ECSPI_CONREG_BURST_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_BURST_LENGTH_SHIFT)) & ECSPI_CONREG_BURST_LENGTH_MASK)
/*! @} */

/*! @name CONFIGREG - Config Register */
/*! @{ */
#define ECSPI_CONFIGREG_SCLK_PHA_MASK            (0xFU)
#define ECSPI_CONFIGREG_SCLK_PHA_SHIFT           (0U)
/*! SCLK_PHA
 *  0b0000..Phase 0 operation.
 *  0b0001..Phase 1 operation.
 */
#define ECSPI_CONFIGREG_SCLK_PHA(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_PHA_SHIFT)) & ECSPI_CONFIGREG_SCLK_PHA_MASK)
#define ECSPI_CONFIGREG_SCLK_POL_MASK            (0xF0U)
#define ECSPI_CONFIGREG_SCLK_POL_SHIFT           (4U)
/*! SCLK_POL
 *  0b0000..Active high polarity (0 = Idle).
 *  0b0001..Active low polarity (1 = Idle).
 */
#define ECSPI_CONFIGREG_SCLK_POL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_POL_SHIFT)) & ECSPI_CONFIGREG_SCLK_POL_MASK)
#define ECSPI_CONFIGREG_SS_CTL_MASK              (0xF00U)
#define ECSPI_CONFIGREG_SS_CTL_SHIFT             (8U)
/*! SS_CTL
 *  0b0000..In master mode - only one SPI burst will be transmitted.
 *  0b0001..In master mode - Negate Chip Select (SS) signal between SPI bursts. Multiple SPI bursts will be
 *          transmitted. The SPI transfer will automatically stop when the TXFIFO is empty.
 *  0b0000..In slave mode - an SPI burst is completed when the number of bits received in the shift register is
 *          equal to (BURST LENGTH + 1). Only the n least-significant bits (n = BURST LENGTH[4:0] + 1) of the first
 *          received word are valid. All bits subsequent to the first received word in RXFIFO are valid.
 *  0b0001..Reserved
 */
#define ECSPI_CONFIGREG_SS_CTL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_CTL_SHIFT)) & ECSPI_CONFIGREG_SS_CTL_MASK)
#define ECSPI_CONFIGREG_SS_POL_MASK              (0xF000U)
#define ECSPI_CONFIGREG_SS_POL_SHIFT             (12U)
/*! SS_POL
 *  0b0000..Active low.
 *  0b0001..Active high.
 */
#define ECSPI_CONFIGREG_SS_POL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_POL_SHIFT)) & ECSPI_CONFIGREG_SS_POL_MASK)
#define ECSPI_CONFIGREG_DATA_CTL_MASK            (0xF0000U)
#define ECSPI_CONFIGREG_DATA_CTL_SHIFT           (16U)
/*! DATA_CTL
 *  0b0000..Stay high.
 *  0b0001..Stay low.
 */
#define ECSPI_CONFIGREG_DATA_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_DATA_CTL_SHIFT)) & ECSPI_CONFIGREG_DATA_CTL_MASK)
#define ECSPI_CONFIGREG_SCLK_CTL_MASK            (0xF00000U)
#define ECSPI_CONFIGREG_SCLK_CTL_SHIFT           (20U)
/*! SCLK_CTL
 *  0b0000..Stay low.
 *  0b0001..Stay high.
 */
#define ECSPI_CONFIGREG_SCLK_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_CTL_SHIFT)) & ECSPI_CONFIGREG_SCLK_CTL_MASK)
#define ECSPI_CONFIGREG_HT_LENGTH_MASK           (0x1F000000U)
#define ECSPI_CONFIGREG_HT_LENGTH_SHIFT          (24U)
#define ECSPI_CONFIGREG_HT_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_HT_LENGTH_SHIFT)) & ECSPI_CONFIGREG_HT_LENGTH_MASK)
/*! @} */

/*! @name INTREG - Interrupt Control Register */
/*! @{ */
#define ECSPI_INTREG_TEEN_MASK                   (0x1U)
#define ECSPI_INTREG_TEEN_SHIFT                  (0U)
#define ECSPI_INTREG_TDREN_MASK                  (0x2U)
#define ECSPI_INTREG_TDREN_SHIFT                 (1U)
#define ECSPI_INTREG_TFEN_MASK                   (0x4U)
#define ECSPI_INTREG_TFEN_SHIFT                  (2U)
#define ECSPI_INTREG_RREN_MASK                   (0x8U)
#define ECSPI_INTREG_RREN_SHIFT                  (3U)
#define ECSPI_INTREG_RDREN_MASK                  (0x10U)
#define ECSPI_INTREG_RDREN_SHIFT                 (4U)
#define ECSPI_INTREG_RFEN_MASK                   (0x20U)
#define ECSPI_INTREG_RFEN_SHIFT                  (5U)
#define ECSPI_INTREG_ROEN_MASK                   (0x40U)
#define ECSPI_INTREG_ROEN_SHIFT                  (6U)
#define ECSPI_INTREG_TCEN_MASK                   (0x80U)
#define ECSPI_INTREG_TCEN_SHIFT                  (7U)
/*! @} */

/*! @name DMAREG - DMA Control Register */
/*! @{ */
#define ECSPI_DMAREG_TX_THRESHOLD_MASK           (0x3FU)
#define ECSPI_DMAREG_TX_THRESHOLD_SHIFT          (0U)
#define ECSPI_DMAREG_TX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_TX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_TX_THRESHOLD_MASK)
#define ECSPI_DMAREG_TEDEN_MASK                  (0x80U)
#define ECSPI_DMAREG_TEDEN_SHIFT                 (7U)
#define ECSPI_DMAREG_RX_THRESHOLD_MASK           (0x3F0000U)
#define ECSPI_DMAREG_RX_THRESHOLD_SHIFT          (16U)
#define ECSPI_DMAREG_RX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_RX_THRESHOLD_MASK)
#define ECSPI_DMAREG_RXDEN_MASK                  (0x800000U)
#define ECSPI_DMAREG_RXDEN_SHIFT                 (23U)
#define ECSPI_DMAREG_RX_DMA_LENGTH_MASK          (0x3F000000U)
#define ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT         (24U)
#define ECSPI_DMAREG_RX_DMA_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT)) & ECSPI_DMAREG_RX_DMA_LENGTH_MASK)
#define ECSPI_DMAREG_RXTDEN_MASK                 (0x80000000U)
#define ECSPI_DMAREG_RXTDEN_SHIFT                (31U)
/*! @} */

/*! @name STATREG - Status Register */
/*! @{ */
#define ECSPI_STATREG_TE_MASK                    (0x1U)
#define ECSPI_STATREG_TE_SHIFT                   (0U)
#define ECSPI_STATREG_TDR_MASK                   (0x2U)
#define ECSPI_STATREG_TDR_SHIFT                  (1U)
#define ECSPI_STATREG_TF_MASK                    (0x4U)
#define ECSPI_STATREG_TF_SHIFT                   (2U)
#define ECSPI_STATREG_RR_MASK                    (0x8U)
#define ECSPI_STATREG_RR_SHIFT                   (3U)
#define ECSPI_STATREG_RDR_MASK                   (0x10U)
#define ECSPI_STATREG_RDR_SHIFT                  (4U)
#define ECSPI_STATREG_RF_MASK                    (0x20U)
#define ECSPI_STATREG_RF_SHIFT                   (5U)
#define ECSPI_STATREG_RO_MASK                    (0x40U)
#define ECSPI_STATREG_RO_SHIFT                   (6U)
#define ECSPI_STATREG_TC_MASK                    (0x80U)
#define ECSPI_STATREG_TC_SHIFT                   (7U)
/*! @} */

/*! @name PERIODREG - Sample Period Control Register */
/*! @{ */
#define ECSPI_PERIODREG_SAMPLE_PERIOD_MASK       (0x7FFFU)
#define ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT      (0U)
/*! SAMPLE_PERIOD
 *  0b000000000000000..0 wait states inserted
 *  0b000000000000001..1 wait state inserted
 *  0b111111111111110..32766 wait states inserted
 *  0b111111111111111..32767 wait states inserted
 */
#define ECSPI_PERIODREG_SAMPLE_PERIOD(x)         (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT)) & ECSPI_PERIODREG_SAMPLE_PERIOD_MASK)
#define ECSPI_PERIODREG_CSRC_MASK                (0x8000U)
#define ECSPI_PERIODREG_CSRC_SHIFT               (15U)
#define ECSPI_PERIODREG_CSD_CTL_MASK             (0x3F0000U)
#define ECSPI_PERIODREG_CSD_CTL_SHIFT            (16U)
#define ECSPI_PERIODREG_CSD_CTL(x)               (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_CSD_CTL_SHIFT)) & ECSPI_PERIODREG_CSD_CTL_MASK)
/*! @} */

/*! @name TESTREG - Test Control Register */
/*! @{ */
#define ECSPI_TESTREG_TXCNT_MASK                 (0x7FU)
#define ECSPI_TESTREG_TXCNT_SHIFT                (0U)
#define ECSPI_TESTREG_TXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_TXCNT_SHIFT)) & ECSPI_TESTREG_TXCNT_MASK)
#define ECSPI_TESTREG_RXCNT_MASK                 (0x7F00U)
#define ECSPI_TESTREG_RXCNT_SHIFT                (8U)
#define ECSPI_TESTREG_RXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_RXCNT_SHIFT)) & ECSPI_TESTREG_RXCNT_MASK)
#define ECSPI_TESTREG_LBC_MASK                   (0x80000000U)
#define ECSPI_TESTREG_LBC_SHIFT                  (31U)
/*! @} */

/*! @name MSGDATA - Message Data Register */
/*! @{ */
#define ECSPI_MSGDATA_ECSPI_MSGDATA_MASK         (0xFFFFFFFFU)
#define ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT        (0U)
#define ECSPI_MSGDATA_ECSPI_MSGDATA(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT)) & ECSPI_MSGDATA_ECSPI_MSGDATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group ECSPI_Register_Masks */


/* ECSPI - Peripheral instance base addresses */
/** Peripheral ECSPI1 base pointer */
#define ECSPI1_BASE_PTR                          ((ECSPI_MemMapPtr)0x30820000u)
/** Peripheral ECSPI2 base pointer */
#define ECSPI2_BASE_PTR                          ((ECSPI_MemMapPtr)0x30830000u)
/** Peripheral ECSPI3 base pointer */
#define ECSPI3_BASE_PTR                          ((ECSPI_MemMapPtr)0x30840000u)
/** Array initializer of ECSPI peripheral base pointers */
#define ECSPI_BASE_PTRS                          { ECSPI1_BASE_PTR, ECSPI2_BASE_PTR, ECSPI3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ECSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Accessor_Macros ECSPI - Register accessor macros
 * @{
 */


/* ECSPI - Register instance definitions */
/* ECSPI1 */
#define ECSPI1_RXDATA                            ECSPI_RXDATA_REG(ECSPI1_BASE_PTR)
#define ECSPI1_TXDATA                            ECSPI_TXDATA_REG(ECSPI1_BASE_PTR)
#define ECSPI1_CONREG                            ECSPI_CONREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_INTREG                            ECSPI_INTREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_DMAREG                            ECSPI_DMAREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_STATREG                           ECSPI_STATREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_TESTREG                           ECSPI_TESTREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI1_BASE_PTR)
/* ECSPI2 */
#define ECSPI2_RXDATA                            ECSPI_RXDATA_REG(ECSPI2_BASE_PTR)
#define ECSPI2_TXDATA                            ECSPI_TXDATA_REG(ECSPI2_BASE_PTR)
#define ECSPI2_CONREG                            ECSPI_CONREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_INTREG                            ECSPI_INTREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_DMAREG                            ECSPI_DMAREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_STATREG                           ECSPI_STATREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_TESTREG                           ECSPI_TESTREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI2_BASE_PTR)
/* ECSPI3 */
#define ECSPI3_RXDATA                            ECSPI_RXDATA_REG(ECSPI3_BASE_PTR)
#define ECSPI3_TXDATA                            ECSPI_TXDATA_REG(ECSPI3_BASE_PTR)
#define ECSPI3_CONREG                            ECSPI_CONREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_INTREG                            ECSPI_INTREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_DMAREG                            ECSPI_DMAREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_STATREG                           ECSPI_STATREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_TESTREG                           ECSPI_TESTREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI3_BASE_PTR)

/*!
 * @}
 */ /* end of group ECSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ECSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- ENET
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Peripheral ENET
 * @{
 */

/** ENET - Peripheral register structure */
typedef struct ENET_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t EIR;                                    /**< Interrupt Event Register, offset: 0x4 */
  uint32_t EIMR;                                   /**< Interrupt Mask Register, offset: 0x8 */
  uint8_t RESERVED_1[4];
  uint32_t RDAR;                                   /**< Receive Descriptor Active Register - Ring 0, offset: 0x10 */
  uint32_t TDAR;                                   /**< Transmit Descriptor Active Register - Ring 0, offset: 0x14 */
  uint8_t RESERVED_2[12];
  uint32_t ECR;                                    /**< Ethernet Control Register, offset: 0x24 */
  uint8_t RESERVED_3[24];
  uint32_t MMFR;                                   /**< MII Management Frame Register, offset: 0x40 */
  uint32_t MSCR;                                   /**< MII Speed Control Register, offset: 0x44 */
  uint8_t RESERVED_4[28];
  uint32_t MIBC;                                   /**< MIB Control Register, offset: 0x64 */
  uint8_t RESERVED_5[28];
  uint32_t RCR;                                    /**< Receive Control Register, offset: 0x84 */
  uint8_t RESERVED_6[60];
  uint32_t TCR;                                    /**< Transmit Control Register, offset: 0xC4 */
  uint8_t RESERVED_7[28];
  uint32_t PALR;                                   /**< Physical Address Lower Register, offset: 0xE4 */
  uint32_t PAUR;                                   /**< Physical Address Upper Register, offset: 0xE8 */
  uint32_t OPD;                                    /**< Opcode/Pause Duration Register, offset: 0xEC */
  uint32_t TXIC[3];                                /**< Transmit Interrupt Coalescing Register, array offset: 0xF0, array step: 0x4 */
  uint8_t RESERVED_8[4];
  uint32_t RXIC[3];                                /**< Receive Interrupt Coalescing Register, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_9[12];
  uint32_t IAUR;                                   /**< Descriptor Individual Upper Address Register, offset: 0x118 */
  uint32_t IALR;                                   /**< Descriptor Individual Lower Address Register, offset: 0x11C */
  uint32_t GAUR;                                   /**< Descriptor Group Upper Address Register, offset: 0x120 */
  uint32_t GALR;                                   /**< Descriptor Group Lower Address Register, offset: 0x124 */
  uint8_t RESERVED_10[28];
  uint32_t TFWR;                                   /**< Transmit FIFO Watermark Register, offset: 0x144 */
  uint8_t RESERVED_11[24];
  uint32_t RDSR1;                                  /**< Receive Descriptor Ring 1 Start Register, offset: 0x160 */
  uint32_t TDSR1;                                  /**< Transmit Buffer Descriptor Ring 1 Start Register, offset: 0x164 */
  uint32_t MRBR1;                                  /**< Maximum Receive Buffer Size Register - Ring 1, offset: 0x168 */
  uint32_t RDSR2;                                  /**< Receive Descriptor Ring 2 Start Register, offset: 0x16C */
  uint32_t TDSR2;                                  /**< Transmit Buffer Descriptor Ring 2 Start Register, offset: 0x170 */
  uint32_t MRBR2;                                  /**< Maximum Receive Buffer Size Register - Ring 2, offset: 0x174 */
  uint8_t RESERVED_12[8];
  uint32_t RDSR;                                   /**< Receive Descriptor Ring 0 Start Register, offset: 0x180 */
  uint32_t TDSR;                                   /**< Transmit Buffer Descriptor Ring 0 Start Register, offset: 0x184 */
  uint32_t MRBR;                                   /**< Maximum Receive Buffer Size Register - Ring 0, offset: 0x188 */
  uint8_t RESERVED_13[4];
  uint32_t RSFL;                                   /**< Receive FIFO Section Full Threshold, offset: 0x190 */
  uint32_t RSEM;                                   /**< Receive FIFO Section Empty Threshold, offset: 0x194 */
  uint32_t RAEM;                                   /**< Receive FIFO Almost Empty Threshold, offset: 0x198 */
  uint32_t RAFL;                                   /**< Receive FIFO Almost Full Threshold, offset: 0x19C */
  uint32_t TSEM;                                   /**< Transmit FIFO Section Empty Threshold, offset: 0x1A0 */
  uint32_t TAEM;                                   /**< Transmit FIFO Almost Empty Threshold, offset: 0x1A4 */
  uint32_t TAFL;                                   /**< Transmit FIFO Almost Full Threshold, offset: 0x1A8 */
  uint32_t TIPG;                                   /**< Transmit Inter-Packet Gap, offset: 0x1AC */
  uint32_t FTRL;                                   /**< Frame Truncation Length, offset: 0x1B0 */
  uint8_t RESERVED_14[12];
  uint32_t TACC;                                   /**< Transmit Accelerator Function Configuration, offset: 0x1C0 */
  uint32_t RACC;                                   /**< Receive Accelerator Function Configuration, offset: 0x1C4 */
  uint32_t RCMR[2];                                /**< Receive Classification Match Register for Class n, array offset: 0x1C8, array step: 0x4 */
  uint8_t RESERVED_15[8];
  uint32_t DMACFG[2];                              /**< DMA Class Based Configuration, array offset: 0x1D8, array step: 0x4 */
  uint32_t RDAR1;                                  /**< Receive Descriptor Active Register - Ring 1, offset: 0x1E0 */
  uint32_t TDAR1;                                  /**< Transmit Descriptor Active Register - Ring 1, offset: 0x1E4 */
  uint32_t RDAR2;                                  /**< Receive Descriptor Active Register - Ring 2, offset: 0x1E8 */
  uint32_t TDAR2;                                  /**< Transmit Descriptor Active Register - Ring 2, offset: 0x1EC */
  uint32_t QOS;                                    /**< QOS Scheme, offset: 0x1F0 */
  uint8_t RESERVED_16[12];
  uint32_t RMON_T_DROP;                            /**< Reserved Statistic Register, offset: 0x200 */
  uint32_t RMON_T_PACKETS;                         /**< Tx Packet Count Statistic Register, offset: 0x204 */
  uint32_t RMON_T_BC_PKT;                          /**< Tx Broadcast Packets Statistic Register, offset: 0x208 */
  uint32_t RMON_T_MC_PKT;                          /**< Tx Multicast Packets Statistic Register, offset: 0x20C */
  uint32_t RMON_T_CRC_ALIGN;                       /**< Tx Packets with CRC/Align Error Statistic Register, offset: 0x210 */
  uint32_t RMON_T_UNDERSIZE;                       /**< Tx Packets Less Than Bytes and Good CRC Statistic Register, offset: 0x214 */
  uint32_t RMON_T_OVERSIZE;                        /**< Tx Packets GT MAX_FL bytes and Good CRC Statistic Register, offset: 0x218 */
  uint32_t RMON_T_FRAG;                            /**< Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x21C */
  uint32_t RMON_T_JAB;                             /**< Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register, offset: 0x220 */
  uint32_t RMON_T_COL;                             /**< Tx Collision Count Statistic Register, offset: 0x224 */
  uint32_t RMON_T_P64;                             /**< Tx 64-Byte Packets Statistic Register, offset: 0x228 */
  uint32_t RMON_T_P65TO127;                        /**< Tx 65- to 127-byte Packets Statistic Register, offset: 0x22C */
  uint32_t RMON_T_P128TO255;                       /**< Tx 128- to 255-byte Packets Statistic Register, offset: 0x230 */
  uint32_t RMON_T_P256TO511;                       /**< Tx 256- to 511-byte Packets Statistic Register, offset: 0x234 */
  uint32_t RMON_T_P512TO1023;                      /**< Tx 512- to 1023-byte Packets Statistic Register, offset: 0x238 */
  uint32_t RMON_T_P1024TO2047;                     /**< Tx 1024- to 2047-byte Packets Statistic Register, offset: 0x23C */
  uint32_t RMON_T_P_GTE2048;                       /**< Tx Packets Greater Than 2048 Bytes Statistic Register, offset: 0x240 */
  uint32_t RMON_T_OCTETS;                          /**< Tx Octets Statistic Register, offset: 0x244 */
  uint32_t IEEE_T_DROP;                            /**< Reserved Statistic Register, offset: 0x248 */
  uint32_t IEEE_T_FRAME_OK;                        /**< Frames Transmitted OK Statistic Register, offset: 0x24C */
  uint32_t IEEE_T_1COL;                            /**< Frames Transmitted with Single Collision Statistic Register, offset: 0x250 */
  uint32_t IEEE_T_MCOL;                            /**< Frames Transmitted with Multiple Collisions Statistic Register, offset: 0x254 */
  uint32_t IEEE_T_DEF;                             /**< Frames Transmitted after Deferral Delay Statistic Register, offset: 0x258 */
  uint32_t IEEE_T_LCOL;                            /**< Frames Transmitted with Late Collision Statistic Register, offset: 0x25C */
  uint32_t IEEE_T_EXCOL;                           /**< Frames Transmitted with Excessive Collisions Statistic Register, offset: 0x260 */
  uint32_t IEEE_T_MACERR;                          /**< Frames Transmitted with Tx FIFO Underrun Statistic Register, offset: 0x264 */
  uint32_t IEEE_T_CSERR;                           /**< Frames Transmitted with Carrier Sense Error Statistic Register, offset: 0x268 */
  uint32_t IEEE_T_SQE;                             /**< Reserved Statistic Register, offset: 0x26C */
  uint32_t IEEE_T_FDXFC;                           /**< Flow Control Pause Frames Transmitted Statistic Register, offset: 0x270 */
  uint32_t IEEE_T_OCTETS_OK;                       /**< Octet Count for Frames Transmitted w/o Error Statistic Register, offset: 0x274 */
  uint8_t RESERVED_17[12];
  uint32_t RMON_R_PACKETS;                         /**< Rx Packet Count Statistic Register, offset: 0x284 */
  uint32_t RMON_R_BC_PKT;                          /**< Rx Broadcast Packets Statistic Register, offset: 0x288 */
  uint32_t RMON_R_MC_PKT;                          /**< Rx Multicast Packets Statistic Register, offset: 0x28C */
  uint32_t RMON_R_CRC_ALIGN;                       /**< Rx Packets with CRC/Align Error Statistic Register, offset: 0x290 */
  uint32_t RMON_R_UNDERSIZE;                       /**< Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register, offset: 0x294 */
  uint32_t RMON_R_OVERSIZE;                        /**< Rx Packets Greater Than MAX_FL and Good CRC Statistic Register, offset: 0x298 */
  uint32_t RMON_R_FRAG;                            /**< Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x29C */
  uint32_t RMON_R_JAB;                             /**< Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register, offset: 0x2A0 */
  uint32_t RMON_R_RESVD_0;                         /**< Reserved Statistic Register, offset: 0x2A4 */
  uint32_t RMON_R_P64;                             /**< Rx 64-Byte Packets Statistic Register, offset: 0x2A8 */
  uint32_t RMON_R_P65TO127;                        /**< Rx 65- to 127-Byte Packets Statistic Register, offset: 0x2AC */
  uint32_t RMON_R_P128TO255;                       /**< Rx 128- to 255-Byte Packets Statistic Register, offset: 0x2B0 */
  uint32_t RMON_R_P256TO511;                       /**< Rx 256- to 511-Byte Packets Statistic Register, offset: 0x2B4 */
  uint32_t RMON_R_P512TO1023;                      /**< Rx 512- to 1023-Byte Packets Statistic Register, offset: 0x2B8 */
  uint32_t RMON_R_P1024TO2047;                     /**< Rx 1024- to 2047-Byte Packets Statistic Register, offset: 0x2BC */
  uint32_t RMON_R_P_GTE2048;                       /**< Rx Packets Greater than 2048 Bytes Statistic Register, offset: 0x2C0 */
  uint32_t RMON_R_OCTETS;                          /**< Rx Octets Statistic Register, offset: 0x2C4 */
  uint32_t IEEE_R_DROP;                            /**< Frames not Counted Correctly Statistic Register, offset: 0x2C8 */
  uint32_t IEEE_R_FRAME_OK;                        /**< Frames Received OK Statistic Register, offset: 0x2CC */
  uint32_t IEEE_R_CRC;                             /**< Frames Received with CRC Error Statistic Register, offset: 0x2D0 */
  uint32_t IEEE_R_ALIGN;                           /**< Frames Received with Alignment Error Statistic Register, offset: 0x2D4 */
  uint32_t IEEE_R_MACERR;                          /**< Receive FIFO Overflow Count Statistic Register, offset: 0x2D8 */
  uint32_t IEEE_R_FDXFC;                           /**< Flow Control Pause Frames Received Statistic Register, offset: 0x2DC */
  uint32_t IEEE_R_OCTETS_OK;                       /**< Octet Count for Frames Received without Error Statistic Register, offset: 0x2E0 */
  uint8_t RESERVED_18[284];
  uint32_t ATCR;                                   /**< Adjustable Timer Control Register, offset: 0x400 */
  uint32_t ATVR;                                   /**< Timer Value Register, offset: 0x404 */
  uint32_t ATOFF;                                  /**< Timer Offset Register, offset: 0x408 */
  uint32_t ATPER;                                  /**< Timer Period Register, offset: 0x40C */
  uint32_t ATCOR;                                  /**< Timer Correction Register, offset: 0x410 */
  uint32_t ATINC;                                  /**< Time-Stamping Clock Period Register, offset: 0x414 */
  uint32_t ATSTMP;                                 /**< Timestamp of Last Transmitted Frame, offset: 0x418 */
  uint8_t RESERVED_19[488];
  uint32_t TGSR;                                   /**< Timer Global Status Register, offset: 0x604 */
  struct {                                         /* offset: 0x608, array step: 0x8 */
    uint32_t TCSR;                                   /**< Timer Control Status Register, array offset: 0x608, array step: 0x8 */
    uint32_t TCCR;                                   /**< Timer Compare Capture Register, array offset: 0x60C, array step: 0x8 */
  } CHANNEL[4];
} volatile *ENET_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register accessors */
#define ENET_EIR_REG(base)                       ((base)->EIR)
#define ENET_EIMR_REG(base)                      ((base)->EIMR)
#define ENET_RDAR_REG(base)                      ((base)->RDAR)
#define ENET_TDAR_REG(base)                      ((base)->TDAR)
#define ENET_ECR_REG(base)                       ((base)->ECR)
#define ENET_MMFR_REG(base)                      ((base)->MMFR)
#define ENET_MSCR_REG(base)                      ((base)->MSCR)
#define ENET_MIBC_REG(base)                      ((base)->MIBC)
#define ENET_RCR_REG(base)                       ((base)->RCR)
#define ENET_TCR_REG(base)                       ((base)->TCR)
#define ENET_PALR_REG(base)                      ((base)->PALR)
#define ENET_PAUR_REG(base)                      ((base)->PAUR)
#define ENET_OPD_REG(base)                       ((base)->OPD)
#define ENET_TXIC_REG(base,index)                ((base)->TXIC[index])
#define ENET_RXIC_REG(base,index)                ((base)->RXIC[index])
#define ENET_IAUR_REG(base)                      ((base)->IAUR)
#define ENET_IALR_REG(base)                      ((base)->IALR)
#define ENET_GAUR_REG(base)                      ((base)->GAUR)
#define ENET_GALR_REG(base)                      ((base)->GALR)
#define ENET_TFWR_REG(base)                      ((base)->TFWR)
#define ENET_RDSR1_REG(base)                     ((base)->RDSR1)
#define ENET_TDSR1_REG(base)                     ((base)->TDSR1)
#define ENET_MRBR1_REG(base)                     ((base)->MRBR1)
#define ENET_RDSR2_REG(base)                     ((base)->RDSR2)
#define ENET_TDSR2_REG(base)                     ((base)->TDSR2)
#define ENET_MRBR2_REG(base)                     ((base)->MRBR2)
#define ENET_RDSR_REG(base)                      ((base)->RDSR)
#define ENET_TDSR_REG(base)                      ((base)->TDSR)
#define ENET_MRBR_REG(base)                      ((base)->MRBR)
#define ENET_RSFL_REG(base)                      ((base)->RSFL)
#define ENET_RSEM_REG(base)                      ((base)->RSEM)
#define ENET_RAEM_REG(base)                      ((base)->RAEM)
#define ENET_RAFL_REG(base)                      ((base)->RAFL)
#define ENET_TSEM_REG(base)                      ((base)->TSEM)
#define ENET_TAEM_REG(base)                      ((base)->TAEM)
#define ENET_TAFL_REG(base)                      ((base)->TAFL)
#define ENET_TIPG_REG(base)                      ((base)->TIPG)
#define ENET_FTRL_REG(base)                      ((base)->FTRL)
#define ENET_TACC_REG(base)                      ((base)->TACC)
#define ENET_RACC_REG(base)                      ((base)->RACC)
#define ENET_RCMR_REG(base,index)                ((base)->RCMR[index])
#define ENET_DMACFG_REG(base,index)              ((base)->DMACFG[index])
#define ENET_RDAR1_REG(base)                     ((base)->RDAR1)
#define ENET_TDAR1_REG(base)                     ((base)->TDAR1)
#define ENET_RDAR2_REG(base)                     ((base)->RDAR2)
#define ENET_TDAR2_REG(base)                     ((base)->TDAR2)
#define ENET_QOS_REG(base)                       ((base)->QOS)
#define ENET_RMON_T_DROP_REG(base)               ((base)->RMON_T_DROP)
#define ENET_RMON_T_PACKETS_REG(base)            ((base)->RMON_T_PACKETS)
#define ENET_RMON_T_BC_PKT_REG(base)             ((base)->RMON_T_BC_PKT)
#define ENET_RMON_T_MC_PKT_REG(base)             ((base)->RMON_T_MC_PKT)
#define ENET_RMON_T_CRC_ALIGN_REG(base)          ((base)->RMON_T_CRC_ALIGN)
#define ENET_RMON_T_UNDERSIZE_REG(base)          ((base)->RMON_T_UNDERSIZE)
#define ENET_RMON_T_OVERSIZE_REG(base)           ((base)->RMON_T_OVERSIZE)
#define ENET_RMON_T_FRAG_REG(base)               ((base)->RMON_T_FRAG)
#define ENET_RMON_T_JAB_REG(base)                ((base)->RMON_T_JAB)
#define ENET_RMON_T_COL_REG(base)                ((base)->RMON_T_COL)
#define ENET_RMON_T_P64_REG(base)                ((base)->RMON_T_P64)
#define ENET_RMON_T_P65TO127_REG(base)           ((base)->RMON_T_P65TO127)
#define ENET_RMON_T_P128TO255_REG(base)          ((base)->RMON_T_P128TO255)
#define ENET_RMON_T_P256TO511_REG(base)          ((base)->RMON_T_P256TO511)
#define ENET_RMON_T_P512TO1023_REG(base)         ((base)->RMON_T_P512TO1023)
#define ENET_RMON_T_P1024TO2047_REG(base)        ((base)->RMON_T_P1024TO2047)
#define ENET_RMON_T_P_GTE2048_REG(base)          ((base)->RMON_T_P_GTE2048)
#define ENET_RMON_T_OCTETS_REG(base)             ((base)->RMON_T_OCTETS)
#define ENET_IEEE_T_DROP_REG(base)               ((base)->IEEE_T_DROP)
#define ENET_IEEE_T_FRAME_OK_REG(base)           ((base)->IEEE_T_FRAME_OK)
#define ENET_IEEE_T_1COL_REG(base)               ((base)->IEEE_T_1COL)
#define ENET_IEEE_T_MCOL_REG(base)               ((base)->IEEE_T_MCOL)
#define ENET_IEEE_T_DEF_REG(base)                ((base)->IEEE_T_DEF)
#define ENET_IEEE_T_LCOL_REG(base)               ((base)->IEEE_T_LCOL)
#define ENET_IEEE_T_EXCOL_REG(base)              ((base)->IEEE_T_EXCOL)
#define ENET_IEEE_T_MACERR_REG(base)             ((base)->IEEE_T_MACERR)
#define ENET_IEEE_T_CSERR_REG(base)              ((base)->IEEE_T_CSERR)
#define ENET_IEEE_T_SQE_REG(base)                ((base)->IEEE_T_SQE)
#define ENET_IEEE_T_FDXFC_REG(base)              ((base)->IEEE_T_FDXFC)
#define ENET_IEEE_T_OCTETS_OK_REG(base)          ((base)->IEEE_T_OCTETS_OK)
#define ENET_RMON_R_PACKETS_REG(base)            ((base)->RMON_R_PACKETS)
#define ENET_RMON_R_BC_PKT_REG(base)             ((base)->RMON_R_BC_PKT)
#define ENET_RMON_R_MC_PKT_REG(base)             ((base)->RMON_R_MC_PKT)
#define ENET_RMON_R_CRC_ALIGN_REG(base)          ((base)->RMON_R_CRC_ALIGN)
#define ENET_RMON_R_UNDERSIZE_REG(base)          ((base)->RMON_R_UNDERSIZE)
#define ENET_RMON_R_OVERSIZE_REG(base)           ((base)->RMON_R_OVERSIZE)
#define ENET_RMON_R_FRAG_REG(base)               ((base)->RMON_R_FRAG)
#define ENET_RMON_R_JAB_REG(base)                ((base)->RMON_R_JAB)
#define ENET_RMON_R_RESVD_0_REG(base)            ((base)->RMON_R_RESVD_0)
#define ENET_RMON_R_P64_REG(base)                ((base)->RMON_R_P64)
#define ENET_RMON_R_P65TO127_REG(base)           ((base)->RMON_R_P65TO127)
#define ENET_RMON_R_P128TO255_REG(base)          ((base)->RMON_R_P128TO255)
#define ENET_RMON_R_P256TO511_REG(base)          ((base)->RMON_R_P256TO511)
#define ENET_RMON_R_P512TO1023_REG(base)         ((base)->RMON_R_P512TO1023)
#define ENET_RMON_R_P1024TO2047_REG(base)        ((base)->RMON_R_P1024TO2047)
#define ENET_RMON_R_P_GTE2048_REG(base)          ((base)->RMON_R_P_GTE2048)
#define ENET_RMON_R_OCTETS_REG(base)             ((base)->RMON_R_OCTETS)
#define ENET_IEEE_R_DROP_REG(base)               ((base)->IEEE_R_DROP)
#define ENET_IEEE_R_FRAME_OK_REG(base)           ((base)->IEEE_R_FRAME_OK)
#define ENET_IEEE_R_CRC_REG(base)                ((base)->IEEE_R_CRC)
#define ENET_IEEE_R_ALIGN_REG(base)              ((base)->IEEE_R_ALIGN)
#define ENET_IEEE_R_MACERR_REG(base)             ((base)->IEEE_R_MACERR)
#define ENET_IEEE_R_FDXFC_REG(base)              ((base)->IEEE_R_FDXFC)
#define ENET_IEEE_R_OCTETS_OK_REG(base)          ((base)->IEEE_R_OCTETS_OK)
#define ENET_ATCR_REG(base)                      ((base)->ATCR)
#define ENET_ATVR_REG(base)                      ((base)->ATVR)
#define ENET_ATOFF_REG(base)                     ((base)->ATOFF)
#define ENET_ATPER_REG(base)                     ((base)->ATPER)
#define ENET_ATCOR_REG(base)                     ((base)->ATCOR)
#define ENET_ATINC_REG(base)                     ((base)->ATINC)
#define ENET_ATSTMP_REG(base)                    ((base)->ATSTMP)
#define ENET_TGSR_REG(base)                      ((base)->TGSR)
#define ENET_TCSR_REG(base,index)                ((base)->CHANNEL[index].TCSR)
#define ENET_TCCR_REG(base,index)                ((base)->CHANNEL[index].TCCR)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ENET Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Masks ENET Register Masks
 * @{
 */

/*! @name EIR - Interrupt Event Register */
/*! @{ */
#define ENET_EIR_RXB1_MASK                       (0x1U)
#define ENET_EIR_RXB1_SHIFT                      (0U)
#define ENET_EIR_RXF1_MASK                       (0x2U)
#define ENET_EIR_RXF1_SHIFT                      (1U)
#define ENET_EIR_TXB1_MASK                       (0x4U)
#define ENET_EIR_TXB1_SHIFT                      (2U)
#define ENET_EIR_TXF1_MASK                       (0x8U)
#define ENET_EIR_TXF1_SHIFT                      (3U)
#define ENET_EIR_RXB2_MASK                       (0x10U)
#define ENET_EIR_RXB2_SHIFT                      (4U)
#define ENET_EIR_RXF2_MASK                       (0x20U)
#define ENET_EIR_RXF2_SHIFT                      (5U)
#define ENET_EIR_TXB2_MASK                       (0x40U)
#define ENET_EIR_TXB2_SHIFT                      (6U)
#define ENET_EIR_TXF2_MASK                       (0x80U)
#define ENET_EIR_TXF2_SHIFT                      (7U)
#define ENET_EIR_RXFLUSH_0_MASK                  (0x1000U)
#define ENET_EIR_RXFLUSH_0_SHIFT                 (12U)
#define ENET_EIR_RXFLUSH_1_MASK                  (0x2000U)
#define ENET_EIR_RXFLUSH_1_SHIFT                 (13U)
#define ENET_EIR_RXFLUSH_2_MASK                  (0x4000U)
#define ENET_EIR_RXFLUSH_2_SHIFT                 (14U)
#define ENET_EIR_TS_TIMER_MASK                   (0x8000U)
#define ENET_EIR_TS_TIMER_SHIFT                  (15U)
#define ENET_EIR_TS_AVAIL_MASK                   (0x10000U)
#define ENET_EIR_TS_AVAIL_SHIFT                  (16U)
#define ENET_EIR_WAKEUP_MASK                     (0x20000U)
#define ENET_EIR_WAKEUP_SHIFT                    (17U)
#define ENET_EIR_PLR_MASK                        (0x40000U)
#define ENET_EIR_PLR_SHIFT                       (18U)
#define ENET_EIR_UN_MASK                         (0x80000U)
#define ENET_EIR_UN_SHIFT                        (19U)
#define ENET_EIR_RL_MASK                         (0x100000U)
#define ENET_EIR_RL_SHIFT                        (20U)
#define ENET_EIR_LC_MASK                         (0x200000U)
#define ENET_EIR_LC_SHIFT                        (21U)
#define ENET_EIR_EBERR_MASK                      (0x400000U)
#define ENET_EIR_EBERR_SHIFT                     (22U)
#define ENET_EIR_MII_MASK                        (0x800000U)
#define ENET_EIR_MII_SHIFT                       (23U)
#define ENET_EIR_RXB_MASK                        (0x1000000U)
#define ENET_EIR_RXB_SHIFT                       (24U)
#define ENET_EIR_RXF_MASK                        (0x2000000U)
#define ENET_EIR_RXF_SHIFT                       (25U)
#define ENET_EIR_TXB_MASK                        (0x4000000U)
#define ENET_EIR_TXB_SHIFT                       (26U)
#define ENET_EIR_TXF_MASK                        (0x8000000U)
#define ENET_EIR_TXF_SHIFT                       (27U)
#define ENET_EIR_GRA_MASK                        (0x10000000U)
#define ENET_EIR_GRA_SHIFT                       (28U)
#define ENET_EIR_BABT_MASK                       (0x20000000U)
#define ENET_EIR_BABT_SHIFT                      (29U)
#define ENET_EIR_BABR_MASK                       (0x40000000U)
#define ENET_EIR_BABR_SHIFT                      (30U)
/*! @} */

/*! @name EIMR - Interrupt Mask Register */
/*! @{ */
#define ENET_EIMR_RXB1_MASK                      (0x1U)
#define ENET_EIMR_RXB1_SHIFT                     (0U)
#define ENET_EIMR_RXF1_MASK                      (0x2U)
#define ENET_EIMR_RXF1_SHIFT                     (1U)
#define ENET_EIMR_TXB1_MASK                      (0x4U)
#define ENET_EIMR_TXB1_SHIFT                     (2U)
#define ENET_EIMR_TXF1_MASK                      (0x8U)
#define ENET_EIMR_TXF1_SHIFT                     (3U)
#define ENET_EIMR_RXB2_MASK                      (0x10U)
#define ENET_EIMR_RXB2_SHIFT                     (4U)
#define ENET_EIMR_RXF2_MASK                      (0x20U)
#define ENET_EIMR_RXF2_SHIFT                     (5U)
#define ENET_EIMR_TXB2_MASK                      (0x40U)
#define ENET_EIMR_TXB2_SHIFT                     (6U)
#define ENET_EIMR_TXF2_MASK                      (0x80U)
#define ENET_EIMR_TXF2_SHIFT                     (7U)
#define ENET_EIMR_RXFLUSH_0_MASK                 (0x1000U)
#define ENET_EIMR_RXFLUSH_0_SHIFT                (12U)
#define ENET_EIMR_RXFLUSH_1_MASK                 (0x2000U)
#define ENET_EIMR_RXFLUSH_1_SHIFT                (13U)
#define ENET_EIMR_RXFLUSH_2_MASK                 (0x4000U)
#define ENET_EIMR_RXFLUSH_2_SHIFT                (14U)
#define ENET_EIMR_TS_TIMER_MASK                  (0x8000U)
#define ENET_EIMR_TS_TIMER_SHIFT                 (15U)
#define ENET_EIMR_TS_AVAIL_MASK                  (0x10000U)
#define ENET_EIMR_TS_AVAIL_SHIFT                 (16U)
#define ENET_EIMR_WAKEUP_MASK                    (0x20000U)
#define ENET_EIMR_WAKEUP_SHIFT                   (17U)
#define ENET_EIMR_PLR_MASK                       (0x40000U)
#define ENET_EIMR_PLR_SHIFT                      (18U)
#define ENET_EIMR_UN_MASK                        (0x80000U)
#define ENET_EIMR_UN_SHIFT                       (19U)
#define ENET_EIMR_RL_MASK                        (0x100000U)
#define ENET_EIMR_RL_SHIFT                       (20U)
#define ENET_EIMR_LC_MASK                        (0x200000U)
#define ENET_EIMR_LC_SHIFT                       (21U)
#define ENET_EIMR_EBERR_MASK                     (0x400000U)
#define ENET_EIMR_EBERR_SHIFT                    (22U)
#define ENET_EIMR_MII_MASK                       (0x800000U)
#define ENET_EIMR_MII_SHIFT                      (23U)
#define ENET_EIMR_RXB_MASK                       (0x1000000U)
#define ENET_EIMR_RXB_SHIFT                      (24U)
#define ENET_EIMR_RXF_MASK                       (0x2000000U)
#define ENET_EIMR_RXF_SHIFT                      (25U)
#define ENET_EIMR_TXB_MASK                       (0x4000000U)
#define ENET_EIMR_TXB_SHIFT                      (26U)
#define ENET_EIMR_TXF_MASK                       (0x8000000U)
#define ENET_EIMR_TXF_SHIFT                      (27U)
#define ENET_EIMR_GRA_MASK                       (0x10000000U)
#define ENET_EIMR_GRA_SHIFT                      (28U)
#define ENET_EIMR_BABT_MASK                      (0x20000000U)
#define ENET_EIMR_BABT_SHIFT                     (29U)
#define ENET_EIMR_BABR_MASK                      (0x40000000U)
#define ENET_EIMR_BABR_SHIFT                     (30U)
/*! @} */

/*! @name RDAR - Receive Descriptor Active Register - Ring 0 */
/*! @{ */
#define ENET_RDAR_RDAR_MASK                      (0x1000000U)
#define ENET_RDAR_RDAR_SHIFT                     (24U)
/*! @} */

/*! @name TDAR - Transmit Descriptor Active Register - Ring 0 */
/*! @{ */
#define ENET_TDAR_TDAR_MASK                      (0x1000000U)
#define ENET_TDAR_TDAR_SHIFT                     (24U)
/*! @} */

/*! @name ECR - Ethernet Control Register */
/*! @{ */
#define ENET_ECR_RESET_MASK                      (0x1U)
#define ENET_ECR_RESET_SHIFT                     (0U)
#define ENET_ECR_ETHEREN_MASK                    (0x2U)
#define ENET_ECR_ETHEREN_SHIFT                   (1U)
#define ENET_ECR_MAGICEN_MASK                    (0x4U)
#define ENET_ECR_MAGICEN_SHIFT                   (2U)
#define ENET_ECR_SLEEP_MASK                      (0x8U)
#define ENET_ECR_SLEEP_SHIFT                     (3U)
#define ENET_ECR_EN1588_MASK                     (0x10U)
#define ENET_ECR_EN1588_SHIFT                    (4U)
#define ENET_ECR_SPEED_MASK                      (0x20U)
#define ENET_ECR_SPEED_SHIFT                     (5U)
#define ENET_ECR_DBGEN_MASK                      (0x40U)
#define ENET_ECR_DBGEN_SHIFT                     (6U)
#define ENET_ECR_DBSWP_MASK                      (0x100U)
#define ENET_ECR_DBSWP_SHIFT                     (8U)
#define ENET_ECR_SVLANEN_MASK                    (0x200U)
#define ENET_ECR_SVLANEN_SHIFT                   (9U)
#define ENET_ECR_VLANUSE2ND_MASK                 (0x400U)
#define ENET_ECR_VLANUSE2ND_SHIFT                (10U)
#define ENET_ECR_SVLANDBL_MASK                   (0x800U)
#define ENET_ECR_SVLANDBL_SHIFT                  (11U)
/*! @} */

/*! @name MMFR - MII Management Frame Register */
/*! @{ */
#define ENET_MMFR_DATA_MASK                      (0xFFFFU)
#define ENET_MMFR_DATA_SHIFT                     (0U)
#define ENET_MMFR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_DATA_SHIFT)) & ENET_MMFR_DATA_MASK)
#define ENET_MMFR_TA_MASK                        (0x30000U)
#define ENET_MMFR_TA_SHIFT                       (16U)
#define ENET_MMFR_TA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_TA_SHIFT)) & ENET_MMFR_TA_MASK)
#define ENET_MMFR_RA_MASK                        (0x7C0000U)
#define ENET_MMFR_RA_SHIFT                       (18U)
#define ENET_MMFR_RA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_RA_SHIFT)) & ENET_MMFR_RA_MASK)
#define ENET_MMFR_PA_MASK                        (0xF800000U)
#define ENET_MMFR_PA_SHIFT                       (23U)
#define ENET_MMFR_PA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_PA_SHIFT)) & ENET_MMFR_PA_MASK)
#define ENET_MMFR_OP_MASK                        (0x30000000U)
#define ENET_MMFR_OP_SHIFT                       (28U)
#define ENET_MMFR_OP(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_OP_SHIFT)) & ENET_MMFR_OP_MASK)
#define ENET_MMFR_ST_MASK                        (0xC0000000U)
#define ENET_MMFR_ST_SHIFT                       (30U)
#define ENET_MMFR_ST(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_ST_SHIFT)) & ENET_MMFR_ST_MASK)
/*! @} */

/*! @name MSCR - MII Speed Control Register */
/*! @{ */
#define ENET_MSCR_MII_SPEED_MASK                 (0x7EU)
#define ENET_MSCR_MII_SPEED_SHIFT                (1U)
#define ENET_MSCR_MII_SPEED(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_MII_SPEED_SHIFT)) & ENET_MSCR_MII_SPEED_MASK)
#define ENET_MSCR_DIS_PRE_MASK                   (0x80U)
#define ENET_MSCR_DIS_PRE_SHIFT                  (7U)
#define ENET_MSCR_HOLDTIME_MASK                  (0x700U)
#define ENET_MSCR_HOLDTIME_SHIFT                 (8U)
/*! HOLDTIME - Hold time On MDIO Output
 *  0b000..1 internal module clock cycle
 *  0b001..2 internal module clock cycles
 *  0b010..3 internal module clock cycles
 *  0b111..8 internal module clock cycles
 */
#define ENET_MSCR_HOLDTIME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_HOLDTIME_SHIFT)) & ENET_MSCR_HOLDTIME_MASK)
/*! @} */

/*! @name MIBC - MIB Control Register */
/*! @{ */
#define ENET_MIBC_MIB_CLEAR_MASK                 (0x20000000U)
#define ENET_MIBC_MIB_CLEAR_SHIFT                (29U)
#define ENET_MIBC_MIB_IDLE_MASK                  (0x40000000U)
#define ENET_MIBC_MIB_IDLE_SHIFT                 (30U)
#define ENET_MIBC_MIB_DIS_MASK                   (0x80000000U)
#define ENET_MIBC_MIB_DIS_SHIFT                  (31U)
/*! @} */

/*! @name RCR - Receive Control Register */
/*! @{ */
#define ENET_RCR_LOOP_MASK                       (0x1U)
#define ENET_RCR_LOOP_SHIFT                      (0U)
#define ENET_RCR_DRT_MASK                        (0x2U)
#define ENET_RCR_DRT_SHIFT                       (1U)
#define ENET_RCR_MII_MODE_MASK                   (0x4U)
#define ENET_RCR_MII_MODE_SHIFT                  (2U)
#define ENET_RCR_PROM_MASK                       (0x8U)
#define ENET_RCR_PROM_SHIFT                      (3U)
#define ENET_RCR_BC_REJ_MASK                     (0x10U)
#define ENET_RCR_BC_REJ_SHIFT                    (4U)
#define ENET_RCR_FCE_MASK                        (0x20U)
#define ENET_RCR_FCE_SHIFT                       (5U)
#define ENET_RCR_RGMII_EN_MASK                   (0x40U)
#define ENET_RCR_RGMII_EN_SHIFT                  (6U)
#define ENET_RCR_RMII_MODE_MASK                  (0x100U)
#define ENET_RCR_RMII_MODE_SHIFT                 (8U)
#define ENET_RCR_RMII_10T_MASK                   (0x200U)
#define ENET_RCR_RMII_10T_SHIFT                  (9U)
#define ENET_RCR_PADEN_MASK                      (0x1000U)
#define ENET_RCR_PADEN_SHIFT                     (12U)
#define ENET_RCR_PAUFWD_MASK                     (0x2000U)
#define ENET_RCR_PAUFWD_SHIFT                    (13U)
#define ENET_RCR_CRCFWD_MASK                     (0x4000U)
#define ENET_RCR_CRCFWD_SHIFT                    (14U)
#define ENET_RCR_CFEN_MASK                       (0x8000U)
#define ENET_RCR_CFEN_SHIFT                      (15U)
#define ENET_RCR_MAX_FL_MASK                     (0x3FFF0000U)
#define ENET_RCR_MAX_FL_SHIFT                    (16U)
#define ENET_RCR_MAX_FL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_MAX_FL_SHIFT)) & ENET_RCR_MAX_FL_MASK)
#define ENET_RCR_NLC_MASK                        (0x40000000U)
#define ENET_RCR_NLC_SHIFT                       (30U)
#define ENET_RCR_GRS_MASK                        (0x80000000U)
#define ENET_RCR_GRS_SHIFT                       (31U)
/*! @} */

/*! @name TCR - Transmit Control Register */
/*! @{ */
#define ENET_TCR_GTS_MASK                        (0x1U)
#define ENET_TCR_GTS_SHIFT                       (0U)
#define ENET_TCR_FDEN_MASK                       (0x4U)
#define ENET_TCR_FDEN_SHIFT                      (2U)
#define ENET_TCR_TFC_PAUSE_MASK                  (0x8U)
#define ENET_TCR_TFC_PAUSE_SHIFT                 (3U)
#define ENET_TCR_RFC_PAUSE_MASK                  (0x10U)
#define ENET_TCR_RFC_PAUSE_SHIFT                 (4U)
#define ENET_TCR_ADDSEL_MASK                     (0xE0U)
#define ENET_TCR_ADDSEL_SHIFT                    (5U)
/*! ADDSEL - Source MAC Address Select On Transmit
 *  0b000..Node MAC address programmed on PADDR1/2 registers.
 *  0b100..Reserved.
 *  0b101..Reserved.
 *  0b110..Reserved.
 */
#define ENET_TCR_ADDSEL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_ADDSEL_SHIFT)) & ENET_TCR_ADDSEL_MASK)
#define ENET_TCR_ADDINS_MASK                     (0x100U)
#define ENET_TCR_ADDINS_SHIFT                    (8U)
#define ENET_TCR_CRCFWD_MASK                     (0x200U)
#define ENET_TCR_CRCFWD_SHIFT                    (9U)
/*! @} */

/*! @name PALR - Physical Address Lower Register */
/*! @{ */
#define ENET_PALR_PADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_PALR_PADDR1_SHIFT                   (0U)
#define ENET_PALR_PADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PALR_PADDR1_SHIFT)) & ENET_PALR_PADDR1_MASK)
/*! @} */

/*! @name PAUR - Physical Address Upper Register */
/*! @{ */
#define ENET_PAUR_TYPE_MASK                      (0xFFFFU)
#define ENET_PAUR_TYPE_SHIFT                     (0U)
#define ENET_PAUR_TYPE(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_TYPE_SHIFT)) & ENET_PAUR_TYPE_MASK)
#define ENET_PAUR_PADDR2_MASK                    (0xFFFF0000U)
#define ENET_PAUR_PADDR2_SHIFT                   (16U)
#define ENET_PAUR_PADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_PADDR2_SHIFT)) & ENET_PAUR_PADDR2_MASK)
/*! @} */

/*! @name OPD - Opcode/Pause Duration Register */
/*! @{ */
#define ENET_OPD_PAUSE_DUR_MASK                  (0xFFFFU)
#define ENET_OPD_PAUSE_DUR_SHIFT                 (0U)
#define ENET_OPD_PAUSE_DUR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_OPD_PAUSE_DUR_SHIFT)) & ENET_OPD_PAUSE_DUR_MASK)
#define ENET_OPD_OPCODE_MASK                     (0xFFFF0000U)
#define ENET_OPD_OPCODE_SHIFT                    (16U)
#define ENET_OPD_OPCODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_OPD_OPCODE_SHIFT)) & ENET_OPD_OPCODE_MASK)
/*! @} */

/*! @name TXIC - Transmit Interrupt Coalescing Register */
/*! @{ */
#define ENET_TXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_TXIC_ICTT_SHIFT                     (0U)
#define ENET_TXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICTT_SHIFT)) & ENET_TXIC_ICTT_MASK)
#define ENET_TXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_TXIC_ICFT_SHIFT                     (20U)
#define ENET_TXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICFT_SHIFT)) & ENET_TXIC_ICFT_MASK)
#define ENET_TXIC_ICCS_MASK                      (0x40000000U)
#define ENET_TXIC_ICCS_SHIFT                     (30U)
#define ENET_TXIC_ICEN_MASK                      (0x80000000U)
#define ENET_TXIC_ICEN_SHIFT                     (31U)
/*! @} */

/* The count of ENET_TXIC */
#define ENET_TXIC_COUNT                          (3U)

/*! @name RXIC - Receive Interrupt Coalescing Register */
/*! @{ */
#define ENET_RXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_RXIC_ICTT_SHIFT                     (0U)
#define ENET_RXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICTT_SHIFT)) & ENET_RXIC_ICTT_MASK)
#define ENET_RXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_RXIC_ICFT_SHIFT                     (20U)
#define ENET_RXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICFT_SHIFT)) & ENET_RXIC_ICFT_MASK)
#define ENET_RXIC_ICCS_MASK                      (0x40000000U)
#define ENET_RXIC_ICCS_SHIFT                     (30U)
#define ENET_RXIC_ICEN_MASK                      (0x80000000U)
#define ENET_RXIC_ICEN_SHIFT                     (31U)
/*! @} */

/* The count of ENET_RXIC */
#define ENET_RXIC_COUNT                          (3U)

/*! @name IAUR - Descriptor Individual Upper Address Register */
/*! @{ */
#define ENET_IAUR_IADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_IAUR_IADDR1_SHIFT                   (0U)
#define ENET_IAUR_IADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IAUR_IADDR1_SHIFT)) & ENET_IAUR_IADDR1_MASK)
/*! @} */

/*! @name IALR - Descriptor Individual Lower Address Register */
/*! @{ */
#define ENET_IALR_IADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_IALR_IADDR2_SHIFT                   (0U)
#define ENET_IALR_IADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IALR_IADDR2_SHIFT)) & ENET_IALR_IADDR2_MASK)
/*! @} */

/*! @name GAUR - Descriptor Group Upper Address Register */
/*! @{ */
#define ENET_GAUR_GADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_GAUR_GADDR1_SHIFT                   (0U)
#define ENET_GAUR_GADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GAUR_GADDR1_SHIFT)) & ENET_GAUR_GADDR1_MASK)
/*! @} */

/*! @name GALR - Descriptor Group Lower Address Register */
/*! @{ */
#define ENET_GALR_GADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_GALR_GADDR2_SHIFT                   (0U)
#define ENET_GALR_GADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GALR_GADDR2_SHIFT)) & ENET_GALR_GADDR2_MASK)
/*! @} */

/*! @name TFWR - Transmit FIFO Watermark Register */
/*! @{ */
#define ENET_TFWR_TFWR_MASK                      (0x3FU)
#define ENET_TFWR_TFWR_SHIFT                     (0U)
/*! TFWR - Transmit FIFO Write
 *  0b000000..64 bytes written.
 *  0b000001..64 bytes written.
 *  0b000010..128 bytes written.
 *  0b000011..192 bytes written.
 *  0b111111..4032 bytes written.
 */
#define ENET_TFWR_TFWR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TFWR_TFWR_SHIFT)) & ENET_TFWR_TFWR_MASK)
#define ENET_TFWR_STRFWD_MASK                    (0x100U)
#define ENET_TFWR_STRFWD_SHIFT                   (8U)
/*! @} */

/*! @name RDSR1 - Receive Descriptor Ring 1 Start Register */
/*! @{ */
#define ENET_RDSR1_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR1_R_DES_START_SHIFT             (3U)
#define ENET_RDSR1_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR1_R_DES_START_SHIFT)) & ENET_RDSR1_R_DES_START_MASK)
/*! @} */

/*! @name TDSR1 - Transmit Buffer Descriptor Ring 1 Start Register */
/*! @{ */
#define ENET_TDSR1_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR1_X_DES_START_SHIFT             (3U)
#define ENET_TDSR1_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR1_X_DES_START_SHIFT)) & ENET_TDSR1_X_DES_START_MASK)
/*! @} */

/*! @name MRBR1 - Maximum Receive Buffer Size Register - Ring 1 */
/*! @{ */
#define ENET_MRBR1_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR1_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR1_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR1_R_BUF_SIZE_SHIFT)) & ENET_MRBR1_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RDSR2 - Receive Descriptor Ring 2 Start Register */
/*! @{ */
#define ENET_RDSR2_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR2_R_DES_START_SHIFT             (3U)
#define ENET_RDSR2_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR2_R_DES_START_SHIFT)) & ENET_RDSR2_R_DES_START_MASK)
/*! @} */

/*! @name TDSR2 - Transmit Buffer Descriptor Ring 2 Start Register */
/*! @{ */
#define ENET_TDSR2_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR2_X_DES_START_SHIFT             (3U)
#define ENET_TDSR2_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR2_X_DES_START_SHIFT)) & ENET_TDSR2_X_DES_START_MASK)
/*! @} */

/*! @name MRBR2 - Maximum Receive Buffer Size Register - Ring 2 */
/*! @{ */
#define ENET_MRBR2_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR2_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR2_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR2_R_BUF_SIZE_SHIFT)) & ENET_MRBR2_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RDSR - Receive Descriptor Ring 0 Start Register */
/*! @{ */
#define ENET_RDSR_R_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_RDSR_R_DES_START_SHIFT              (3U)
#define ENET_RDSR_R_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RDSR_R_DES_START_SHIFT)) & ENET_RDSR_R_DES_START_MASK)
/*! @} */

/*! @name TDSR - Transmit Buffer Descriptor Ring 0 Start Register */
/*! @{ */
#define ENET_TDSR_X_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_TDSR_X_DES_START_SHIFT              (3U)
#define ENET_TDSR_X_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_TDSR_X_DES_START_SHIFT)) & ENET_TDSR_X_DES_START_MASK)
/*! @} */

/*! @name MRBR - Maximum Receive Buffer Size Register - Ring 0 */
/*! @{ */
#define ENET_MRBR_R_BUF_SIZE_MASK                (0x7F0U)
#define ENET_MRBR_R_BUF_SIZE_SHIFT               (4U)
#define ENET_MRBR_R_BUF_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MRBR_R_BUF_SIZE_SHIFT)) & ENET_MRBR_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RSFL - Receive FIFO Section Full Threshold */
/*! @{ */
#define ENET_RSFL_RX_SECTION_FULL_MASK           (0x3FFU)
#define ENET_RSFL_RX_SECTION_FULL_SHIFT          (0U)
#define ENET_RSFL_RX_SECTION_FULL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RSFL_RX_SECTION_FULL_SHIFT)) & ENET_RSFL_RX_SECTION_FULL_MASK)
/*! @} */

/*! @name RSEM - Receive FIFO Section Empty Threshold */
/*! @{ */
#define ENET_RSEM_RX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_RSEM_RX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_RSEM_RX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_RX_SECTION_EMPTY_SHIFT)) & ENET_RSEM_RX_SECTION_EMPTY_MASK)
#define ENET_RSEM_STAT_SECTION_EMPTY_MASK        (0x1F0000U)
#define ENET_RSEM_STAT_SECTION_EMPTY_SHIFT       (16U)
#define ENET_RSEM_STAT_SECTION_EMPTY(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_STAT_SECTION_EMPTY_SHIFT)) & ENET_RSEM_STAT_SECTION_EMPTY_MASK)
/*! @} */

/*! @name RAEM - Receive FIFO Almost Empty Threshold */
/*! @{ */
#define ENET_RAEM_RX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_RAEM_RX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_RAEM_RX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RAEM_RX_ALMOST_EMPTY_SHIFT)) & ENET_RAEM_RX_ALMOST_EMPTY_MASK)
/*! @} */

/*! @name RAFL - Receive FIFO Almost Full Threshold */
/*! @{ */
#define ENET_RAFL_RX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_RAFL_RX_ALMOST_FULL_SHIFT           (0U)
#define ENET_RAFL_RX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RAFL_RX_ALMOST_FULL_SHIFT)) & ENET_RAFL_RX_ALMOST_FULL_MASK)
/*! @} */

/*! @name TSEM - Transmit FIFO Section Empty Threshold */
/*! @{ */
#define ENET_TSEM_TX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_TSEM_TX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_TSEM_TX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_TSEM_TX_SECTION_EMPTY_SHIFT)) & ENET_TSEM_TX_SECTION_EMPTY_MASK)
/*! @} */

/*! @name TAEM - Transmit FIFO Almost Empty Threshold */
/*! @{ */
#define ENET_TAEM_TX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_TAEM_TX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_TAEM_TX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_TAEM_TX_ALMOST_EMPTY_SHIFT)) & ENET_TAEM_TX_ALMOST_EMPTY_MASK)
/*! @} */

/*! @name TAFL - Transmit FIFO Almost Full Threshold */
/*! @{ */
#define ENET_TAFL_TX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_TAFL_TX_ALMOST_FULL_SHIFT           (0U)
#define ENET_TAFL_TX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_TAFL_TX_ALMOST_FULL_SHIFT)) & ENET_TAFL_TX_ALMOST_FULL_MASK)
/*! @} */

/*! @name TIPG - Transmit Inter-Packet Gap */
/*! @{ */
#define ENET_TIPG_IPG_MASK                       (0x1FU)
#define ENET_TIPG_IPG_SHIFT                      (0U)
#define ENET_TIPG_IPG(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TIPG_IPG_SHIFT)) & ENET_TIPG_IPG_MASK)
/*! @} */

/*! @name FTRL - Frame Truncation Length */
/*! @{ */
#define ENET_FTRL_TRUNC_FL_MASK                  (0x3FFFU)
#define ENET_FTRL_TRUNC_FL_SHIFT                 (0U)
#define ENET_FTRL_TRUNC_FL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_FTRL_TRUNC_FL_SHIFT)) & ENET_FTRL_TRUNC_FL_MASK)
/*! @} */

/*! @name TACC - Transmit Accelerator Function Configuration */
/*! @{ */
#define ENET_TACC_SHIFT16_MASK                   (0x1U)
#define ENET_TACC_SHIFT16_SHIFT                  (0U)
#define ENET_TACC_IPCHK_MASK                     (0x8U)
#define ENET_TACC_IPCHK_SHIFT                    (3U)
#define ENET_TACC_PROCHK_MASK                    (0x10U)
#define ENET_TACC_PROCHK_SHIFT                   (4U)
/*! @} */

/*! @name RACC - Receive Accelerator Function Configuration */
/*! @{ */
#define ENET_RACC_PADREM_MASK                    (0x1U)
#define ENET_RACC_PADREM_SHIFT                   (0U)
#define ENET_RACC_IPDIS_MASK                     (0x2U)
#define ENET_RACC_IPDIS_SHIFT                    (1U)
#define ENET_RACC_PRODIS_MASK                    (0x4U)
#define ENET_RACC_PRODIS_SHIFT                   (2U)
#define ENET_RACC_LINEDIS_MASK                   (0x40U)
#define ENET_RACC_LINEDIS_SHIFT                  (6U)
#define ENET_RACC_SHIFT16_MASK                   (0x80U)
#define ENET_RACC_SHIFT16_SHIFT                  (7U)
/*! @} */

/*! @name RCMR - Receive Classification Match Register for Class n */
/*! @{ */
#define ENET_RCMR_CMP0_MASK                      (0x7U)
#define ENET_RCMR_CMP0_SHIFT                     (0U)
#define ENET_RCMR_CMP0(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP0_SHIFT)) & ENET_RCMR_CMP0_MASK)
#define ENET_RCMR_CMP1_MASK                      (0x70U)
#define ENET_RCMR_CMP1_SHIFT                     (4U)
#define ENET_RCMR_CMP1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP1_SHIFT)) & ENET_RCMR_CMP1_MASK)
#define ENET_RCMR_CMP2_MASK                      (0x700U)
#define ENET_RCMR_CMP2_SHIFT                     (8U)
#define ENET_RCMR_CMP2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP2_SHIFT)) & ENET_RCMR_CMP2_MASK)
#define ENET_RCMR_CMP3_MASK                      (0x7000U)
#define ENET_RCMR_CMP3_SHIFT                     (12U)
#define ENET_RCMR_CMP3(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP3_SHIFT)) & ENET_RCMR_CMP3_MASK)
#define ENET_RCMR_MATCHEN_MASK                   (0x10000U)
#define ENET_RCMR_MATCHEN_SHIFT                  (16U)
/*! @} */

/* The count of ENET_RCMR */
#define ENET_RCMR_COUNT                          (2U)

/*! @name DMACFG - DMA Class Based Configuration */
/*! @{ */
#define ENET_DMACFG_IDLE_SLOPE_MASK              (0xFFFFU)
#define ENET_DMACFG_IDLE_SLOPE_SHIFT             (0U)
#define ENET_DMACFG_IDLE_SLOPE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMACFG_IDLE_SLOPE_SHIFT)) & ENET_DMACFG_IDLE_SLOPE_MASK)
#define ENET_DMACFG_DMA_CLASS_EN_MASK            (0x10000U)
#define ENET_DMACFG_DMA_CLASS_EN_SHIFT           (16U)
#define ENET_DMACFG_CALC_NOIPG_MASK              (0x20000U)
#define ENET_DMACFG_CALC_NOIPG_SHIFT             (17U)
/*! @} */

/* The count of ENET_DMACFG */
#define ENET_DMACFG_COUNT                        (2U)

/*! @name RDAR1 - Receive Descriptor Active Register - Ring 1 */
/*! @{ */
#define ENET_RDAR1_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR1_RDAR_SHIFT                    (24U)
/*! @} */

/*! @name TDAR1 - Transmit Descriptor Active Register - Ring 1 */
/*! @{ */
#define ENET_TDAR1_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR1_TDAR_SHIFT                    (24U)
/*! @} */

/*! @name RDAR2 - Receive Descriptor Active Register - Ring 2 */
/*! @{ */
#define ENET_RDAR2_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR2_RDAR_SHIFT                    (24U)
/*! @} */

/*! @name TDAR2 - Transmit Descriptor Active Register - Ring 2 */
/*! @{ */
#define ENET_TDAR2_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR2_TDAR_SHIFT                    (24U)
/*! @} */

/*! @name QOS - QOS Scheme */
/*! @{ */
#define ENET_QOS_TX_SCHEME_MASK                  (0x7U)
#define ENET_QOS_TX_SCHEME_SHIFT                 (0U)
/*! TX_SCHEME - TX scheme configuration
 *  0b000..Credit-based scheme
 *  0b001..Round-robin scheme
 */
#define ENET_QOS_TX_SCHEME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_TX_SCHEME_SHIFT)) & ENET_QOS_TX_SCHEME_MASK)
#define ENET_QOS_RX_FLUSH0_MASK                  (0x8U)
#define ENET_QOS_RX_FLUSH0_SHIFT                 (3U)
#define ENET_QOS_RX_FLUSH1_MASK                  (0x10U)
#define ENET_QOS_RX_FLUSH1_SHIFT                 (4U)
#define ENET_QOS_RX_FLUSH2_MASK                  (0x20U)
#define ENET_QOS_RX_FLUSH2_SHIFT                 (5U)
/*! @} */

/*! @name RMON_T_PACKETS - Tx Packet Count Statistic Register */
/*! @{ */
#define ENET_RMON_T_PACKETS_TXPKTS_MASK          (0xFFFFU)
#define ENET_RMON_T_PACKETS_TXPKTS_SHIFT         (0U)
#define ENET_RMON_T_PACKETS_TXPKTS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_PACKETS_TXPKTS_SHIFT)) & ENET_RMON_T_PACKETS_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_BC_PKT - Tx Broadcast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_BC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_BC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_BC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_BC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_BC_PKT_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_MC_PKT - Tx Multicast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_MC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_MC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_MC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_MC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_MC_PKT_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register */
/*! @{ */
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT)) & ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_UNDERSIZE_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_UNDERSIZE_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_UNDERSIZE_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_OVERSIZE_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_OVERSIZE_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_OVERSIZE_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_FRAG_TXPKTS_MASK             (0xFFFFU)
#define ENET_RMON_T_FRAG_TXPKTS_SHIFT            (0U)
#define ENET_RMON_T_FRAG_TXPKTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_FRAG_TXPKTS_SHIFT)) & ENET_RMON_T_FRAG_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_JAB_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_JAB_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_JAB_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_JAB_TXPKTS_SHIFT)) & ENET_RMON_T_JAB_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_COL - Tx Collision Count Statistic Register */
/*! @{ */
#define ENET_RMON_T_COL_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_COL_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_COL_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_COL_TXPKTS_SHIFT)) & ENET_RMON_T_COL_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P64 - Tx 64-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P64_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_P64_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_P64_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P64_TXPKTS_SHIFT)) & ENET_RMON_T_P64_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P65TO127_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_P65TO127_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_P65TO127_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P65TO127_TXPKTS_SHIFT)) & ENET_RMON_T_P65TO127_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P128TO255_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P128TO255_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P128TO255_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P128TO255_TXPKTS_SHIFT)) & ENET_RMON_T_P128TO255_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P256TO511_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P256TO511_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P256TO511_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P256TO511_TXPKTS_SHIFT)) & ENET_RMON_T_P256TO511_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P512TO1023_TXPKTS_MASK       (0xFFFFU)
#define ENET_RMON_T_P512TO1023_TXPKTS_SHIFT      (0U)
#define ENET_RMON_T_P512TO1023_TXPKTS(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P512TO1023_TXPKTS_SHIFT)) & ENET_RMON_T_P512TO1023_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P1024TO2047_TXPKTS_MASK      (0xFFFFU)
#define ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT     (0U)
#define ENET_RMON_T_P1024TO2047_TXPKTS(x)        (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT)) & ENET_RMON_T_P1024TO2047_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register */
/*! @{ */
#define ENET_RMON_T_P_GTE2048_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P_GTE2048_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT)) & ENET_RMON_T_P_GTE2048_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_OCTETS - Tx Octets Statistic Register */
/*! @{ */
#define ENET_RMON_T_OCTETS_TXOCTS_MASK           (0xFFFFFFFFU)
#define ENET_RMON_T_OCTETS_TXOCTS_SHIFT          (0U)
#define ENET_RMON_T_OCTETS_TXOCTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OCTETS_TXOCTS_SHIFT)) & ENET_RMON_T_OCTETS_TXOCTS_MASK)
/*! @} */

/*! @name IEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register */
/*! @{ */
#define ENET_IEEE_T_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_T_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_T_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_T_FRAME_OK_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register */
/*! @{ */
#define ENET_IEEE_T_1COL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_1COL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_1COL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_1COL_COUNT_SHIFT)) & ENET_IEEE_T_1COL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register */
/*! @{ */
#define ENET_IEEE_T_MCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_MCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_MCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MCOL_COUNT_SHIFT)) & ENET_IEEE_T_MCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register */
/*! @{ */
#define ENET_IEEE_T_DEF_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_DEF_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_DEF_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_DEF_COUNT_SHIFT)) & ENET_IEEE_T_DEF_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register */
/*! @{ */
#define ENET_IEEE_T_LCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_LCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_LCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_LCOL_COUNT_SHIFT)) & ENET_IEEE_T_LCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register */
/*! @{ */
#define ENET_IEEE_T_EXCOL_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_EXCOL_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_EXCOL_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_EXCOL_COUNT_SHIFT)) & ENET_IEEE_T_EXCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register */
/*! @{ */
#define ENET_IEEE_T_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_T_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_T_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MACERR_COUNT_SHIFT)) & ENET_IEEE_T_MACERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register */
/*! @{ */
#define ENET_IEEE_T_CSERR_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_CSERR_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_CSERR_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_CSERR_COUNT_SHIFT)) & ENET_IEEE_T_CSERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_SQE - Reserved Statistic Register */
/*! @{ */
#define ENET_IEEE_T_SQE_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_SQE_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_SQE_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_SQE_COUNT_SHIFT)) & ENET_IEEE_T_SQE_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register */
/*! @{ */
#define ENET_IEEE_T_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FDXFC_COUNT_SHIFT)) & ENET_IEEE_T_FDXFC_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register */
/*! @{ */
#define ENET_IEEE_T_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_T_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_T_OCTETS_OK_COUNT_MASK)
/*! @} */

/*! @name RMON_R_PACKETS - Rx Packet Count Statistic Register */
/*! @{ */
#define ENET_RMON_R_PACKETS_COUNT_MASK           (0xFFFFU)
#define ENET_RMON_R_PACKETS_COUNT_SHIFT          (0U)
#define ENET_RMON_R_PACKETS_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_PACKETS_COUNT_SHIFT)) & ENET_RMON_R_PACKETS_COUNT_MASK)
/*! @} */

/*! @name RMON_R_BC_PKT - Rx Broadcast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_BC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_BC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_BC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_BC_PKT_COUNT_SHIFT)) & ENET_RMON_R_BC_PKT_COUNT_MASK)
/*! @} */

/*! @name RMON_R_MC_PKT - Rx Multicast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_MC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_MC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_MC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_MC_PKT_COUNT_SHIFT)) & ENET_RMON_R_MC_PKT_COUNT_MASK)
/*! @} */

/*! @name RMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register */
/*! @{ */
#define ENET_RMON_R_CRC_ALIGN_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT        (0U)
#define ENET_RMON_R_CRC_ALIGN_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT)) & ENET_RMON_R_CRC_ALIGN_COUNT_MASK)
/*! @} */

/*! @name RMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_UNDERSIZE_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_UNDERSIZE_COUNT_SHIFT        (0U)
#define ENET_RMON_R_UNDERSIZE_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_UNDERSIZE_COUNT_SHIFT)) & ENET_RMON_R_UNDERSIZE_COUNT_MASK)
/*! @} */

/*! @name RMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_OVERSIZE_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_OVERSIZE_COUNT_SHIFT         (0U)
#define ENET_RMON_R_OVERSIZE_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OVERSIZE_COUNT_SHIFT)) & ENET_RMON_R_OVERSIZE_COUNT_MASK)
/*! @} */

/*! @name RMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_FRAG_COUNT_MASK              (0xFFFFU)
#define ENET_RMON_R_FRAG_COUNT_SHIFT             (0U)
#define ENET_RMON_R_FRAG_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_FRAG_COUNT_SHIFT)) & ENET_RMON_R_FRAG_COUNT_MASK)
/*! @} */

/*! @name RMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_JAB_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_JAB_COUNT_SHIFT              (0U)
#define ENET_RMON_R_JAB_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_JAB_COUNT_SHIFT)) & ENET_RMON_R_JAB_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P64 - Rx 64-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P64_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_P64_COUNT_SHIFT              (0U)
#define ENET_RMON_R_P64_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P64_COUNT_SHIFT)) & ENET_RMON_R_P64_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P65TO127_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_P65TO127_COUNT_SHIFT         (0U)
#define ENET_RMON_R_P65TO127_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P65TO127_COUNT_SHIFT)) & ENET_RMON_R_P65TO127_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P128TO255_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P128TO255_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P128TO255_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P128TO255_COUNT_SHIFT)) & ENET_RMON_R_P128TO255_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P256TO511_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P256TO511_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P256TO511_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P256TO511_COUNT_SHIFT)) & ENET_RMON_R_P256TO511_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P512TO1023_COUNT_MASK        (0xFFFFU)
#define ENET_RMON_R_P512TO1023_COUNT_SHIFT       (0U)
#define ENET_RMON_R_P512TO1023_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P512TO1023_COUNT_SHIFT)) & ENET_RMON_R_P512TO1023_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P1024TO2047_COUNT_MASK       (0xFFFFU)
#define ENET_RMON_R_P1024TO2047_COUNT_SHIFT      (0U)
#define ENET_RMON_R_P1024TO2047_COUNT(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P1024TO2047_COUNT_SHIFT)) & ENET_RMON_R_P1024TO2047_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register */
/*! @{ */
#define ENET_RMON_R_P_GTE2048_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P_GTE2048_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P_GTE2048_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P_GTE2048_COUNT_SHIFT)) & ENET_RMON_R_P_GTE2048_COUNT_MASK)
/*! @} */

/*! @name RMON_R_OCTETS - Rx Octets Statistic Register */
/*! @{ */
#define ENET_RMON_R_OCTETS_COUNT_MASK            (0xFFFFFFFFU)
#define ENET_RMON_R_OCTETS_COUNT_SHIFT           (0U)
#define ENET_RMON_R_OCTETS_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OCTETS_COUNT_SHIFT)) & ENET_RMON_R_OCTETS_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_DROP - Frames not Counted Correctly Statistic Register */
/*! @{ */
#define ENET_IEEE_R_DROP_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_R_DROP_COUNT_SHIFT             (0U)
#define ENET_IEEE_R_DROP_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_DROP_COUNT_SHIFT)) & ENET_IEEE_R_DROP_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_FRAME_OK - Frames Received OK Statistic Register */
/*! @{ */
#define ENET_IEEE_R_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_R_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_R_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_R_FRAME_OK_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_CRC - Frames Received with CRC Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_CRC_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_R_CRC_COUNT_SHIFT              (0U)
#define ENET_IEEE_R_CRC_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_CRC_COUNT_SHIFT)) & ENET_IEEE_R_CRC_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_ALIGN_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_ALIGN_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_ALIGN_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_ALIGN_COUNT_SHIFT)) & ENET_IEEE_R_ALIGN_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register */
/*! @{ */
#define ENET_IEEE_R_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_R_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_R_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_MACERR_COUNT_SHIFT)) & ENET_IEEE_R_MACERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register */
/*! @{ */
#define ENET_IEEE_R_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FDXFC_COUNT_SHIFT)) & ENET_IEEE_R_FDXFC_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_R_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_R_OCTETS_OK_COUNT_MASK)
/*! @} */

/*! @name ATCR - Adjustable Timer Control Register */
/*! @{ */
#define ENET_ATCR_EN_MASK                        (0x1U)
#define ENET_ATCR_EN_SHIFT                       (0U)
#define ENET_ATCR_OFFEN_MASK                     (0x4U)
#define ENET_ATCR_OFFEN_SHIFT                    (2U)
#define ENET_ATCR_OFFRST_MASK                    (0x8U)
#define ENET_ATCR_OFFRST_SHIFT                   (3U)
#define ENET_ATCR_PEREN_MASK                     (0x10U)
#define ENET_ATCR_PEREN_SHIFT                    (4U)
#define ENET_ATCR_PINPER_MASK                    (0x80U)
#define ENET_ATCR_PINPER_SHIFT                   (7U)
#define ENET_ATCR_RESTART_MASK                   (0x200U)
#define ENET_ATCR_RESTART_SHIFT                  (9U)
#define ENET_ATCR_CAPTURE_MASK                   (0x800U)
#define ENET_ATCR_CAPTURE_SHIFT                  (11U)
#define ENET_ATCR_SLAVE_MASK                     (0x2000U)
#define ENET_ATCR_SLAVE_SHIFT                    (13U)
/*! @} */

/*! @name ATVR - Timer Value Register */
/*! @{ */
#define ENET_ATVR_ATIME_MASK                     (0xFFFFFFFFU)
#define ENET_ATVR_ATIME_SHIFT                    (0U)
#define ENET_ATVR_ATIME(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATVR_ATIME_SHIFT)) & ENET_ATVR_ATIME_MASK)
/*! @} */

/*! @name ATOFF - Timer Offset Register */
/*! @{ */
#define ENET_ATOFF_OFFSET_MASK                   (0xFFFFFFFFU)
#define ENET_ATOFF_OFFSET_SHIFT                  (0U)
#define ENET_ATOFF_OFFSET(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATOFF_OFFSET_SHIFT)) & ENET_ATOFF_OFFSET_MASK)
/*! @} */

/*! @name ATPER - Timer Period Register */
/*! @{ */
#define ENET_ATPER_PERIOD_MASK                   (0xFFFFFFFFU)
#define ENET_ATPER_PERIOD_SHIFT                  (0U)
#define ENET_ATPER_PERIOD(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATPER_PERIOD_SHIFT)) & ENET_ATPER_PERIOD_MASK)
/*! @} */

/*! @name ATCOR - Timer Correction Register */
/*! @{ */
#define ENET_ATCOR_COR_MASK                      (0x7FFFFFFFU)
#define ENET_ATCOR_COR_SHIFT                     (0U)
#define ENET_ATCOR_COR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATCOR_COR_SHIFT)) & ENET_ATCOR_COR_MASK)
/*! @} */

/*! @name ATINC - Time-Stamping Clock Period Register */
/*! @{ */
#define ENET_ATINC_INC_MASK                      (0x7FU)
#define ENET_ATINC_INC_SHIFT                     (0U)
#define ENET_ATINC_INC(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_SHIFT)) & ENET_ATINC_INC_MASK)
#define ENET_ATINC_INC_CORR_MASK                 (0x7F00U)
#define ENET_ATINC_INC_CORR_SHIFT                (8U)
#define ENET_ATINC_INC_CORR(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_CORR_SHIFT)) & ENET_ATINC_INC_CORR_MASK)
/*! @} */

/*! @name ATSTMP - Timestamp of Last Transmitted Frame */
/*! @{ */
#define ENET_ATSTMP_TIMESTAMP_MASK               (0xFFFFFFFFU)
#define ENET_ATSTMP_TIMESTAMP_SHIFT              (0U)
#define ENET_ATSTMP_TIMESTAMP(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_ATSTMP_TIMESTAMP_SHIFT)) & ENET_ATSTMP_TIMESTAMP_MASK)
/*! @} */

/*! @name TGSR - Timer Global Status Register */
/*! @{ */
#define ENET_TGSR_TF0_MASK                       (0x1U)
#define ENET_TGSR_TF0_SHIFT                      (0U)
#define ENET_TGSR_TF1_MASK                       (0x2U)
#define ENET_TGSR_TF1_SHIFT                      (1U)
#define ENET_TGSR_TF2_MASK                       (0x4U)
#define ENET_TGSR_TF2_SHIFT                      (2U)
#define ENET_TGSR_TF3_MASK                       (0x8U)
#define ENET_TGSR_TF3_SHIFT                      (3U)
/*! @} */

/*! @name TCSR - Timer Control Status Register */
/*! @{ */
#define ENET_TCSR_TDRE_MASK                      (0x1U)
#define ENET_TCSR_TDRE_SHIFT                     (0U)
#define ENET_TCSR_TMODE_MASK                     (0x3CU)
#define ENET_TCSR_TMODE_SHIFT                    (2U)
/*! TMODE - Timer Mode
 *  0b0000..Timer Channel is disabled.
 *  0b0001..Timer Channel is configured for Input Capture on rising edge.
 *  0b0010..Timer Channel is configured for Input Capture on falling edge.
 *  0b0011..Timer Channel is configured for Input Capture on both edges.
 *  0b0100..Timer Channel is configured for Output Compare - software only.
 *  0b0101..Timer Channel is configured for Output Compare - toggle output on compare.
 *  0b0110..Timer Channel is configured for Output Compare - clear output on compare.
 *  0b0111..Timer Channel is configured for Output Compare - set output on compare.
 *  0b1000..Reserved
 *  0b1010..Timer Channel is configured for Output Compare - clear output on compare, set output on overflow.
 *  0b10x1..Timer Channel is configured for Output Compare - set output on compare, clear output on overflow.
 *  0b110x..Reserved
 *  0b1110..Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle.
 *  0b1111..Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle.
 */
#define ENET_TCSR_TMODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TMODE_SHIFT)) & ENET_TCSR_TMODE_MASK)
#define ENET_TCSR_TIE_MASK                       (0x40U)
#define ENET_TCSR_TIE_SHIFT                      (6U)
#define ENET_TCSR_TF_MASK                        (0x80U)
#define ENET_TCSR_TF_SHIFT                       (7U)
/*! @} */

/* The count of ENET_TCSR */
#define ENET_TCSR_COUNT                          (4U)

/*! @name TCCR - Timer Compare Capture Register */
/*! @{ */
#define ENET_TCCR_TCC_MASK                       (0xFFFFFFFFU)
#define ENET_TCCR_TCC_SHIFT                      (0U)
#define ENET_TCCR_TCC(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCCR_TCC_SHIFT)) & ENET_TCCR_TCC_MASK)
/*! @} */

/* The count of ENET_TCCR */
#define ENET_TCCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group ENET_Register_Masks */


/* ENET - Peripheral instance base addresses */
/** Peripheral ENET base pointer */
#define ENET_BASE_PTR                            ((ENET_MemMapPtr)0x30BE0000u)
/** Array initializer of ENET peripheral base pointers */
#define ENET_BASE_PTRS                           { ENET_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register instance definitions */
/* ENET */
#define ENET_EIR                                 ENET_EIR_REG(ENET_BASE_PTR)
#define ENET_EIMR                                ENET_EIMR_REG(ENET_BASE_PTR)
#define ENET_RDAR                                ENET_RDAR_REG(ENET_BASE_PTR)
#define ENET_TDAR                                ENET_TDAR_REG(ENET_BASE_PTR)
#define ENET_ECR                                 ENET_ECR_REG(ENET_BASE_PTR)
#define ENET_MMFR                                ENET_MMFR_REG(ENET_BASE_PTR)
#define ENET_MSCR                                ENET_MSCR_REG(ENET_BASE_PTR)
#define ENET_MIBC                                ENET_MIBC_REG(ENET_BASE_PTR)
#define ENET_RCR                                 ENET_RCR_REG(ENET_BASE_PTR)
#define ENET_TCR                                 ENET_TCR_REG(ENET_BASE_PTR)
#define ENET_PALR                                ENET_PALR_REG(ENET_BASE_PTR)
#define ENET_PAUR                                ENET_PAUR_REG(ENET_BASE_PTR)
#define ENET_OPD                                 ENET_OPD_REG(ENET_BASE_PTR)
#define ENET_TXIC0                               ENET_TXIC_REG(ENET_BASE_PTR,0)
#define ENET_TXIC1                               ENET_TXIC_REG(ENET_BASE_PTR,1)
#define ENET_TXIC2                               ENET_TXIC_REG(ENET_BASE_PTR,2)
#define ENET_RXIC0                               ENET_RXIC_REG(ENET_BASE_PTR,0)
#define ENET_RXIC1                               ENET_RXIC_REG(ENET_BASE_PTR,1)
#define ENET_RXIC2                               ENET_RXIC_REG(ENET_BASE_PTR,2)
#define ENET_IAUR                                ENET_IAUR_REG(ENET_BASE_PTR)
#define ENET_IALR                                ENET_IALR_REG(ENET_BASE_PTR)
#define ENET_GAUR                                ENET_GAUR_REG(ENET_BASE_PTR)
#define ENET_GALR                                ENET_GALR_REG(ENET_BASE_PTR)
#define ENET_TFWR                                ENET_TFWR_REG(ENET_BASE_PTR)
#define ENET_RDSR1                               ENET_RDSR1_REG(ENET_BASE_PTR)
#define ENET_TDSR1                               ENET_TDSR1_REG(ENET_BASE_PTR)
#define ENET_MRBR1                               ENET_MRBR1_REG(ENET_BASE_PTR)
#define ENET_RDSR2                               ENET_RDSR2_REG(ENET_BASE_PTR)
#define ENET_TDSR2                               ENET_TDSR2_REG(ENET_BASE_PTR)
#define ENET_MRBR2                               ENET_MRBR2_REG(ENET_BASE_PTR)
#define ENET_RDSR                                ENET_RDSR_REG(ENET_BASE_PTR)
#define ENET_TDSR                                ENET_TDSR_REG(ENET_BASE_PTR)
#define ENET_MRBR                                ENET_MRBR_REG(ENET_BASE_PTR)
#define ENET_RSFL                                ENET_RSFL_REG(ENET_BASE_PTR)
#define ENET_RSEM                                ENET_RSEM_REG(ENET_BASE_PTR)
#define ENET_RAEM                                ENET_RAEM_REG(ENET_BASE_PTR)
#define ENET_RAFL                                ENET_RAFL_REG(ENET_BASE_PTR)
#define ENET_TSEM                                ENET_TSEM_REG(ENET_BASE_PTR)
#define ENET_TAEM                                ENET_TAEM_REG(ENET_BASE_PTR)
#define ENET_TAFL                                ENET_TAFL_REG(ENET_BASE_PTR)
#define ENET_TIPG                                ENET_TIPG_REG(ENET_BASE_PTR)
#define ENET_FTRL                                ENET_FTRL_REG(ENET_BASE_PTR)
#define ENET_TACC                                ENET_TACC_REG(ENET_BASE_PTR)
#define ENET_RACC                                ENET_RACC_REG(ENET_BASE_PTR)
#define ENET_RCMR1                               ENET_RCMR_REG(ENET_BASE_PTR,0)
#define ENET_RCMR2                               ENET_RCMR_REG(ENET_BASE_PTR,1)
#define ENET_DMA1CFG                             ENET_DMACFG_REG(ENET_BASE_PTR,0)
#define ENET_DMA2CFG                             ENET_DMACFG_REG(ENET_BASE_PTR,1)
#define ENET_RDAR1                               ENET_RDAR1_REG(ENET_BASE_PTR)
#define ENET_TDAR1                               ENET_TDAR1_REG(ENET_BASE_PTR)
#define ENET_RDAR2                               ENET_RDAR2_REG(ENET_BASE_PTR)
#define ENET_TDAR2                               ENET_TDAR2_REG(ENET_BASE_PTR)
#define ENET_QOS                                 ENET_QOS_REG(ENET_BASE_PTR)
#define ENET_RMON_T_DROP                         ENET_RMON_T_DROP_REG(ENET_BASE_PTR)
#define ENET_RMON_T_PACKETS                      ENET_RMON_T_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_T_BC_PKT                       ENET_RMON_T_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_MC_PKT                       ENET_RMON_T_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_CRC_ALIGN                    ENET_RMON_T_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_T_UNDERSIZE                    ENET_RMON_T_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OVERSIZE                     ENET_RMON_T_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_FRAG                         ENET_RMON_T_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_T_JAB                          ENET_RMON_T_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_T_COL                          ENET_RMON_T_COL_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P64                          ENET_RMON_T_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P65TO127                     ENET_RMON_T_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P128TO255                    ENET_RMON_T_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P256TO511                    ENET_RMON_T_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P512TO1023                   ENET_RMON_T_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P1024TO2047                  ENET_RMON_T_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P_GTE2048                    ENET_RMON_T_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OCTETS                       ENET_RMON_T_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DROP                         ENET_IEEE_T_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FRAME_OK                     ENET_IEEE_T_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_1COL                         ENET_IEEE_T_1COL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MCOL                         ENET_IEEE_T_MCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DEF                          ENET_IEEE_T_DEF_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_LCOL                         ENET_IEEE_T_LCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_EXCOL                        ENET_IEEE_T_EXCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MACERR                       ENET_IEEE_T_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_CSERR                        ENET_IEEE_T_CSERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_SQE                          ENET_IEEE_T_SQE_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FDXFC                        ENET_IEEE_T_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_OCTETS_OK                    ENET_IEEE_T_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_RMON_R_PACKETS                      ENET_RMON_R_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_R_BC_PKT                       ENET_RMON_R_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_MC_PKT                       ENET_RMON_R_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_CRC_ALIGN                    ENET_RMON_R_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_R_UNDERSIZE                    ENET_RMON_R_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OVERSIZE                     ENET_RMON_R_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_FRAG                         ENET_RMON_R_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_R_JAB                          ENET_RMON_R_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_R_RESVD_0                      ENET_RMON_R_RESVD_0_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P64                          ENET_RMON_R_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P65TO127                     ENET_RMON_R_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P128TO255                    ENET_RMON_R_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P256TO511                    ENET_RMON_R_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P512TO1023                   ENET_RMON_R_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P1024TO2047                  ENET_RMON_R_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P_GTE2048                    ENET_RMON_R_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OCTETS                       ENET_RMON_R_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_DROP                         ENET_IEEE_R_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FRAME_OK                     ENET_IEEE_R_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_CRC                          ENET_IEEE_R_CRC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_ALIGN                        ENET_IEEE_R_ALIGN_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_MACERR                       ENET_IEEE_R_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FDXFC                        ENET_IEEE_R_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_OCTETS_OK                    ENET_IEEE_R_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_ATCR                                ENET_ATCR_REG(ENET_BASE_PTR)
#define ENET_ATVR                                ENET_ATVR_REG(ENET_BASE_PTR)
#define ENET_ATOFF                               ENET_ATOFF_REG(ENET_BASE_PTR)
#define ENET_ATPER                               ENET_ATPER_REG(ENET_BASE_PTR)
#define ENET_ATCOR                               ENET_ATCOR_REG(ENET_BASE_PTR)
#define ENET_ATINC                               ENET_ATINC_REG(ENET_BASE_PTR)
#define ENET_ATSTMP                              ENET_ATSTMP_REG(ENET_BASE_PTR)
#define ENET_TGSR                                ENET_TGSR_REG(ENET_BASE_PTR)
#define ENET_TCSR0                               ENET_TCSR_REG(ENET_BASE_PTR,0)
#define ENET_TCCR0                               ENET_TCCR_REG(ENET_BASE_PTR,0)
#define ENET_TCSR1                               ENET_TCSR_REG(ENET_BASE_PTR,1)
#define ENET_TCCR1                               ENET_TCCR_REG(ENET_BASE_PTR,1)
#define ENET_TCSR2                               ENET_TCSR_REG(ENET_BASE_PTR,2)
#define ENET_TCCR2                               ENET_TCCR_REG(ENET_BASE_PTR,2)
#define ENET_TCSR3                               ENET_TCSR_REG(ENET_BASE_PTR,3)
#define ENET_TCCR3                               ENET_TCCR_REG(ENET_BASE_PTR,3)

/* ENET - Register array accessors */
#define ENET_TXIC(index)                         ENET_TXIC_REG(ENET_BASE_PTR,index)
#define ENET_RXIC(index)                         ENET_RXIC_REG(ENET_BASE_PTR,index)
#define ENET_RCMR(index)                         ENET_RCMR_REG(ENET_BASE_PTR,index)
#define ENET_DMACFG(index)                       ENET_DMACFG_REG(ENET_BASE_PTR,index)
#define ENET_TCSR(index)                         ENET_TCSR_REG(ENET_BASE_PTR,index)
#define ENET_TCCR(index)                         ENET_TCCR_REG(ENET_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ENET_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Peripheral GPC
 * @{
 */

/** GPC - Peripheral register structure */
typedef struct GPC_MemMap {
  uint32_t LPCR_A53_BSC;                           /**< Basic Low power control register of A53 platform, offset: 0x0 */
  uint32_t LPCR_A53_AD;                            /**< Advanced Low power control register of A53 platform, offset: 0x4 */
  uint32_t LPCR_M4;                                /**< Low power control register of CPU1, offset: 0x8 */
  uint8_t RESERVED_0[8];
  uint32_t SLPCR;                                  /**< System low power control register, offset: 0x14 */
  uint32_t MST_CPU_MAPPING;                        /**< MASTER LPM Handshake, offset: 0x18 */
  uint8_t RESERVED_1[4];
  uint32_t MLPCR;                                  /**< Memory low power control register, offset: 0x20 */
  uint32_t PGC_ACK_SEL_A53;                        /**< PGC acknowledge signal selection of A53 platform, offset: 0x24 */
  uint32_t PGC_ACK_SEL_M4;                         /**< PGC acknowledge signal selection of M4 platform, offset: 0x28 */
  uint32_t MISC;                                   /**< GPC Miscellaneous register, offset: 0x2C */
  uint32_t IMR_CORE0_A53[4];                       /**< IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0, array offset: 0x30, array step: 0x4 */
  uint32_t IMR_CORE1_A53[4];                       /**< IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1, array offset: 0x40, array step: 0x4 */
  uint32_t IMR_M4[4];                              /**< IRQ masking register 1 of M4..IRQ masking register 4 of M4, array offset: 0x50, array step: 0x4 */
  uint8_t RESERVED_2[16];
  uint32_t ISR_A53[4];                             /**< IRQ status register 1 of A53..IRQ status register 4 of A53, array offset: 0x70, array step: 0x4 */
  uint32_t ISR_M4[4];                              /**< IRQ status register 1 of M4..IRQ status register 4 of M4, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_3[32];
  uint32_t SLT0_CFG;                               /**< Slot configure register for A53 core, offset: 0xB0 */
  uint32_t SLT1_CFG;                               /**< Slot configure register for A53 core, offset: 0xB4 */
  uint32_t SLT2_CFG;                               /**< Slot configure register for A53 core, offset: 0xB8 */
  uint32_t SLT3_CFG;                               /**< Slot configure register for A53 core, offset: 0xBC */
  uint32_t SLT4_CFG;                               /**< Slot configure register for A53 core, offset: 0xC0 */
  uint32_t SLT5_CFG;                               /**< Slot configure register for A53 core, offset: 0xC4 */
  uint32_t SLT6_CFG;                               /**< Slot configure register for A53 core, offset: 0xC8 */
  uint32_t SLT7_CFG;                               /**< Slot configure register for A53 core, offset: 0xCC */
  uint32_t SLT8_CFG;                               /**< Slot configure register for A53 core, offset: 0xD0 */
  uint32_t SLT9_CFG;                               /**< Slot configure register for A53 core, offset: 0xD4 */
  uint32_t SLT10_CFG;                              /**< Slot configure register for A53 core, offset: 0xD8 */
  uint32_t SLT11_CFG;                              /**< Slot configure register for A53 core, offset: 0xDC */
  uint32_t SLT12_CFG;                              /**< Slot configure register for A53 core, offset: 0xE0 */
  uint32_t SLT13_CFG;                              /**< Slot configure register for A53 core, offset: 0xE4 */
  uint32_t SLT14_CFG;                              /**< Slot configure register for A53 core, offset: 0xE8 */
  uint32_t PGC_CPU_0_1_MAPPING;                    /**< PGC CPU mapping, offset: 0xEC */
  uint32_t CPU_PGC_SW_PUP_REQ;                     /**< CPU PGC software power up trigger, offset: 0xF0 */
  uint32_t MIX_PGC_SW_PUP_REQ;                     /**< MIX PGC software power up trigger, offset: 0xF4 */
  uint32_t PU_PGC_SW_PUP_REQ;                      /**< PU PGC software up trigger, offset: 0xF8 */
  uint32_t CPU_PGC_SW_PDN_REQ;                     /**< CPU PGC software down trigger, offset: 0xFC */
  uint32_t MIX_PGC_SW_PDN_REQ;                     /**< MIX PGC software power down trigger, offset: 0x100 */
  uint32_t PU_PGC_SW_PDN_REQ;                      /**< PU PGC software down trigger, offset: 0x104 */
  uint32_t LPCR_A53_BSC2;                          /**< Basic Low power control register of A53 platform, offset: 0x108 */
  uint8_t RESERVED_4[36];
  uint32_t CPU_PGC_PUP_STATUS1;                    /**< CPU PGC software up trigger status1, offset: 0x130 */
  uint32_t A53_MIX_PGC_PUP_STATUS[3];              /**< A53 MIX software up trigger status register, array offset: 0x134, array step: 0x4 */
  uint32_t M4_MIX_PGC_PUP_STATUS[3];               /**< M4 MIX PGC software up trigger status register, array offset: 0x140, array step: 0x4 */
  uint32_t A53_PU_PGC_PUP_STATUS[3];               /**< A53 PU software up trigger status register, array offset: 0x14C, array step: 0x4 */
  uint32_t M4_PU_PGC_PUP_STATUS[3];                /**< M4 PU PGC software up trigger status register, array offset: 0x158, array step: 0x4 */
  uint8_t RESERVED_5[12];
  uint32_t CPU_PGC_PDN_STATUS1;                    /**< CPU PGC software dn trigger status1, offset: 0x170 */
  uint32_t A53_MIX_PGC_PDN_STATUS[3];              /**< A53 MIX software down trigger status register, array offset: 0x174, array step: 0x4 */
  uint32_t M4_MIX_PGC_PDN_STATUS[3];               /**< M4 MIX PGC software power down trigger status register, array offset: 0x180, array step: 0x4 */
  uint32_t A53_PU_PGC_PDN_STATUS[3];               /**< A53 PU PGC software down trigger status, array offset: 0x18C, array step: 0x4 */
  uint32_t M4_PU_PGC_PDN_STATUS[3];                /**< M4 PU PGC software down trigger status, array offset: 0x198, array step: 0x4 */
  uint8_t RESERVED_6[12];
  uint32_t A53_MIX_PDN_FLG;                        /**< A53 MIX PDN FLG, offset: 0x1B0 */
  uint32_t A53_PU_PDN_FLG;                         /**< A53 PU PDN FLG, offset: 0x1B4 */
  uint32_t M4_MIX_PDN_FLG;                         /**< M4 MIX PDN FLG, offset: 0x1B8 */
  uint32_t M4_PU_PDN_FLG;                          /**< M4 PU PDN FLG, offset: 0x1BC */
  uint32_t IMR_CORE2_A53[4];                       /**< IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2, array offset: 0x1C0, array step: 0x4 */
  uint32_t IMR_CORE3_A53[4];                       /**< IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3, array offset: 0x1D0, array step: 0x4 */
  uint32_t ACK_SEL_A53_PU;                         /**< PGC acknowledge signal selection of A53 platform for PUs, offset: 0x1E0 */
  uint32_t ACK_SEL_M4_PU;                          /**< PGC acknowledge signal selection of M4 platform for PUs, offset: 0x1E4 */
  uint32_t SLT15_CFG;                              /**< Slot configure register for A53 core, offset: 0x1E8 */
  uint32_t SLT16_CFG;                              /**< Slot configure register for A53 core, offset: 0x1EC */
  uint32_t SLT17_CFG;                              /**< Slot configure register for A53 core, offset: 0x1F0 */
  uint32_t SLT18_CFG;                              /**< Slot configure register for A53 core, offset: 0x1F4 */
  uint32_t SLT19_CFG;                              /**< Slot configure register for A53 core, offset: 0x1F8 */
  uint32_t PU_PWRHSK;                              /**< Power handshake register, offset: 0x1FC */
  uint32_t SLT_CFG_PU[20];                         /**< Slot configure register for PUs, array offset: 0x200, array step: 0x4 */
} volatile *GPC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register accessors */
#define GPC_LPCR_A53_BSC_REG(base)               ((base)->LPCR_A53_BSC)
#define GPC_LPCR_A53_AD_REG(base)                ((base)->LPCR_A53_AD)
#define GPC_LPCR_M4_REG(base)                    ((base)->LPCR_M4)
#define GPC_SLPCR_REG(base)                      ((base)->SLPCR)
#define GPC_MST_CPU_MAPPING_REG(base)            ((base)->MST_CPU_MAPPING)
#define GPC_MLPCR_REG(base)                      ((base)->MLPCR)
#define GPC_PGC_ACK_SEL_A53_REG(base)            ((base)->PGC_ACK_SEL_A53)
#define GPC_PGC_ACK_SEL_M4_REG(base)             ((base)->PGC_ACK_SEL_M4)
#define GPC_MISC_REG(base)                       ((base)->MISC)
#define GPC_IMR_CORE0_A53_REG(base,index)        ((base)->IMR_CORE0_A53[index])
#define GPC_IMR_CORE1_A53_REG(base,index)        ((base)->IMR_CORE1_A53[index])
#define GPC_IMR_M4_REG(base,index)               ((base)->IMR_M4[index])
#define GPC_ISR_A53_REG(base,index)              ((base)->ISR_A53[index])
#define GPC_ISR_M4_REG(base,index)               ((base)->ISR_M4[index])
#define GPC_SLT0_CFG_REG(base)                   ((base)->SLT0_CFG)
#define GPC_SLT1_CFG_REG(base)                   ((base)->SLT1_CFG)
#define GPC_SLT2_CFG_REG(base)                   ((base)->SLT2_CFG)
#define GPC_SLT3_CFG_REG(base)                   ((base)->SLT3_CFG)
#define GPC_SLT4_CFG_REG(base)                   ((base)->SLT4_CFG)
#define GPC_SLT5_CFG_REG(base)                   ((base)->SLT5_CFG)
#define GPC_SLT6_CFG_REG(base)                   ((base)->SLT6_CFG)
#define GPC_SLT7_CFG_REG(base)                   ((base)->SLT7_CFG)
#define GPC_SLT8_CFG_REG(base)                   ((base)->SLT8_CFG)
#define GPC_SLT9_CFG_REG(base)                   ((base)->SLT9_CFG)
#define GPC_SLT10_CFG_REG(base)                  ((base)->SLT10_CFG)
#define GPC_SLT11_CFG_REG(base)                  ((base)->SLT11_CFG)
#define GPC_SLT12_CFG_REG(base)                  ((base)->SLT12_CFG)
#define GPC_SLT13_CFG_REG(base)                  ((base)->SLT13_CFG)
#define GPC_SLT14_CFG_REG(base)                  ((base)->SLT14_CFG)
#define GPC_PGC_CPU_0_1_MAPPING_REG(base)        ((base)->PGC_CPU_0_1_MAPPING)
#define GPC_CPU_PGC_SW_PUP_REQ_REG(base)         ((base)->CPU_PGC_SW_PUP_REQ)
#define GPC_MIX_PGC_SW_PUP_REQ_REG(base)         ((base)->MIX_PGC_SW_PUP_REQ)
#define GPC_PU_PGC_SW_PUP_REQ_REG(base)          ((base)->PU_PGC_SW_PUP_REQ)
#define GPC_CPU_PGC_SW_PDN_REQ_REG(base)         ((base)->CPU_PGC_SW_PDN_REQ)
#define GPC_MIX_PGC_SW_PDN_REQ_REG(base)         ((base)->MIX_PGC_SW_PDN_REQ)
#define GPC_PU_PGC_SW_PDN_REQ_REG(base)          ((base)->PU_PGC_SW_PDN_REQ)
#define GPC_LPCR_A53_BSC2_REG(base)              ((base)->LPCR_A53_BSC2)
#define GPC_CPU_PGC_PUP_STATUS1_REG(base)        ((base)->CPU_PGC_PUP_STATUS1)
#define GPC_A53_MIX_PGC_PUP_STATUS_REG(base,index) ((base)->A53_MIX_PGC_PUP_STATUS[index])
#define GPC_M4_MIX_PGC_PUP_STATUS_REG(base,index) ((base)->M4_MIX_PGC_PUP_STATUS[index])
#define GPC_A53_PU_PGC_PUP_STATUS_REG(base,index) ((base)->A53_PU_PGC_PUP_STATUS[index])
#define GPC_M4_PU_PGC_PUP_STATUS_REG(base,index) ((base)->M4_PU_PGC_PUP_STATUS[index])
#define GPC_CPU_PGC_PDN_STATUS1_REG(base)        ((base)->CPU_PGC_PDN_STATUS1)
#define GPC_A53_MIX_PGC_PDN_STATUS_REG(base,index) ((base)->A53_MIX_PGC_PDN_STATUS[index])
#define GPC_M4_MIX_PGC_PDN_STATUS_REG(base,index) ((base)->M4_MIX_PGC_PDN_STATUS[index])
#define GPC_A53_PU_PGC_PDN_STATUS_REG(base,index) ((base)->A53_PU_PGC_PDN_STATUS[index])
#define GPC_M4_PU_PGC_PDN_STATUS_REG(base,index) ((base)->M4_PU_PGC_PDN_STATUS[index])
#define GPC_A53_MIX_PDN_FLG_REG(base)            ((base)->A53_MIX_PDN_FLG)
#define GPC_A53_PU_PDN_FLG_REG(base)             ((base)->A53_PU_PDN_FLG)
#define GPC_M4_MIX_PDN_FLG_REG(base)             ((base)->M4_MIX_PDN_FLG)
#define GPC_M4_PU_PDN_FLG_REG(base)              ((base)->M4_PU_PDN_FLG)
#define GPC_IMR_CORE2_A53_REG(base,index)        ((base)->IMR_CORE2_A53[index])
#define GPC_IMR_CORE3_A53_REG(base,index)        ((base)->IMR_CORE3_A53[index])
#define GPC_ACK_SEL_A53_PU_REG(base)             ((base)->ACK_SEL_A53_PU)
#define GPC_ACK_SEL_M4_PU_REG(base)              ((base)->ACK_SEL_M4_PU)
#define GPC_SLT15_CFG_REG(base)                  ((base)->SLT15_CFG)
#define GPC_SLT16_CFG_REG(base)                  ((base)->SLT16_CFG)
#define GPC_SLT17_CFG_REG(base)                  ((base)->SLT17_CFG)
#define GPC_SLT18_CFG_REG(base)                  ((base)->SLT18_CFG)
#define GPC_SLT19_CFG_REG(base)                  ((base)->SLT19_CFG)
#define GPC_PU_PWRHSK_REG(base)                  ((base)->PU_PWRHSK)
#define GPC_SLT_CFG_PU_REG(base,index)           ((base)->SLT_CFG_PU[index])

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Masks GPC Register Masks
 * @{
 */

/*! @name LPCR_A53_BSC - Basic Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_BSC_LPM0_MASK               (0x3U)
#define GPC_LPCR_A53_BSC_LPM0_SHIFT              (0U)
/*! LPM0
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC_LPM0(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM0_SHIFT)) & GPC_LPCR_A53_BSC_LPM0_MASK)
#define GPC_LPCR_A53_BSC_LPM1_MASK               (0xCU)
#define GPC_LPCR_A53_BSC_LPM1_SHIFT              (2U)
/*! LPM1
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC_LPM1(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM1_SHIFT)) & GPC_LPCR_A53_BSC_LPM1_MASK)
#define GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_MASK   (0x40U)
#define GPC_LPCR_A53_BSC_MST_LPM_HSK_MASK_SHIFT  (6U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_MASK     (0x4000U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_SHIFT    (14U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_MASK     (0x10000U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_SHIFT    (16U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_MASK     (0x20000U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_SHIFT    (17U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_MASK     (0x40000U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_SHIFT    (18U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_MASK     (0x80000U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_SHIFT    (19U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_MASK         (0x400000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_SHIFT        (22U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_MASK         (0x800000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_SHIFT        (23U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_MASK       (0x1000000U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_SHIFT      (24U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_MASK      (0x4000000U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_SHIFT     (26U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_MASK         (0x10000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_SHIFT        (28U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_MASK         (0x20000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_SHIFT        (29U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_MASK    (0x40000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_SHIFT   (30U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_MASK   (0x80000000U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_SHIFT  (31U)
/*! @} */

/*! @name LPCR_A53_AD - Advanced Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_MASK       (0x1U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_SHIFT      (0U)
#define GPC_LPCR_A53_AD_EN_C0_PDN_MASK           (0x2U)
#define GPC_LPCR_A53_AD_EN_C0_PDN_SHIFT          (1U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_MASK       (0x4U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_SHIFT      (2U)
#define GPC_LPCR_A53_AD_EN_C1_PDN_MASK           (0x8U)
#define GPC_LPCR_A53_AD_EN_C1_PDN_SHIFT          (3U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_MASK         (0x10U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_SHIFT        (4U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_MASK       (0x20U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_SHIFT      (5U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_MASK       (0x100U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_SHIFT      (8U)
#define GPC_LPCR_A53_AD_EN_C0_PUP_MASK           (0x200U)
#define GPC_LPCR_A53_AD_EN_C0_PUP_SHIFT          (9U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_MASK       (0x400U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_SHIFT      (10U)
#define GPC_LPCR_A53_AD_EN_C1_PUP_MASK           (0x800U)
#define GPC_LPCR_A53_AD_EN_C1_PUP_SHIFT          (11U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_MASK       (0x10000U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_SHIFT      (16U)
#define GPC_LPCR_A53_AD_EN_C2_PDN_MASK           (0x20000U)
#define GPC_LPCR_A53_AD_EN_C2_PDN_SHIFT          (17U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_MASK       (0x40000U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_SHIFT      (18U)
#define GPC_LPCR_A53_AD_EN_C3_PDN_MASK           (0x80000U)
#define GPC_LPCR_A53_AD_EN_C3_PDN_SHIFT          (19U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_DIS_MASK   (0x100000U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_DIS_SHIFT  (20U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_DIS_MASK   (0x200000U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_DIS_SHIFT  (21U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_DIS_MASK   (0x400000U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_DIS_SHIFT  (22U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_DIS_MASK   (0x800000U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_DIS_SHIFT  (23U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_MASK       (0x1000000U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_SHIFT      (24U)
#define GPC_LPCR_A53_AD_EN_C2_PUP_MASK           (0x2000000U)
#define GPC_LPCR_A53_AD_EN_C2_PUP_SHIFT          (25U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_MASK       (0x4000000U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_SHIFT      (26U)
#define GPC_LPCR_A53_AD_EN_C3_PUP_MASK           (0x8000000U)
#define GPC_LPCR_A53_AD_EN_C3_PUP_SHIFT          (27U)
#define GPC_LPCR_A53_AD_L2PGE_MASK               (0x80000000U)
#define GPC_LPCR_A53_AD_L2PGE_SHIFT              (31U)
/*! @} */

/*! @name LPCR_M4 - Low power control register of CPU1 */
/*! @{ */
#define GPC_LPCR_M4_LPM0_MASK                    (0x3U)
#define GPC_LPCR_M4_LPM0_SHIFT                   (0U)
/*! LPM0
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_M4_LPM0(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M4_LPM0_SHIFT)) & GPC_LPCR_M4_LPM0_MASK)
#define GPC_LPCR_M4_EN_M4_PDN_MASK               (0x4U)
#define GPC_LPCR_M4_EN_M4_PDN_SHIFT              (2U)
#define GPC_LPCR_M4_EN_M4_PUP_MASK               (0x8U)
#define GPC_LPCR_M4_EN_M4_PUP_SHIFT              (3U)
#define GPC_LPCR_M4_CPU_CLK_ON_LPM_MASK          (0x4000U)
#define GPC_LPCR_M4_CPU_CLK_ON_LPM_SHIFT         (14U)
#define GPC_LPCR_M4_MASK_M4_WFI_MASK             (0x10000U)
#define GPC_LPCR_M4_MASK_M4_WFI_SHIFT            (16U)
#define GPC_LPCR_M4_MASK_DSM_TRIGGER_MASK        (0x80000000U)
#define GPC_LPCR_M4_MASK_DSM_TRIGGER_SHIFT       (31U)
/*! @} */

/*! @name SLPCR - System low power control register */
/*! @{ */
#define GPC_SLPCR_BYPASS_PMIC_READY_MASK         (0x1U)
#define GPC_SLPCR_BYPASS_PMIC_READY_SHIFT        (0U)
#define GPC_SLPCR_SBYOS_MASK                     (0x2U)
#define GPC_SLPCR_SBYOS_SHIFT                    (1U)
#define GPC_SLPCR_VSTBY_MASK                     (0x4U)
#define GPC_SLPCR_VSTBY_SHIFT                    (2U)
#define GPC_SLPCR_STBY_COUNT_MASK                (0x38U)
#define GPC_SLPCR_STBY_COUNT_SHIFT               (3U)
/*! STBY_COUNT
 *  0b000..GPC will wait 4 ckil clock cycles
 *  0b001..GPC will wait 8 ckil clock cycles
 *  0b010..GPC will wait 16 ckil clock cycles
 *  0b011..GPC will wait 32 ckil clock cycles
 *  0b100..GPC will wait 64 ckil clock cycles
 *  0b101..GPC will wait 128 ckil clock cycles
 *  0b110..GPC will wait 256 ckil clock cycles
 *  0b111..GPC will wait 512 ckil clock cycles
 */
#define GPC_SLPCR_STBY_COUNT(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_STBY_COUNT_SHIFT)) & GPC_SLPCR_STBY_COUNT_MASK)
#define GPC_SLPCR_COSC_PWRDOWN_MASK              (0x40U)
#define GPC_SLPCR_COSC_PWRDOWN_SHIFT             (6U)
#define GPC_SLPCR_COSC_EN_MASK                   (0x80U)
#define GPC_SLPCR_COSC_EN_SHIFT                  (7U)
#define GPC_SLPCR_OSCCNT_MASK                    (0xFF00U)
#define GPC_SLPCR_OSCCNT_SHIFT                   (8U)
/*! OSCCNT
 *  0b00000000..count 1 ckil
 *  0b11111111..count 256 ckils
 */
#define GPC_SLPCR_OSCCNT(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_OSCCNT_SHIFT)) & GPC_SLPCR_OSCCNT_MASK)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_MASK  (0x10000U)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_SHIFT (16U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_MASK  (0x20000U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_SHIFT (17U)
#define GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_MASK   (0x40000U)
#define GPC_SLPCR_EN_M4_FASTWUP_WAIT_MODE_SHIFT  (18U)
#define GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_MASK   (0x80000U)
#define GPC_SLPCR_EN_M4_FASTWUP_STOP_MODE_SHIFT  (19U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_MASK        (0x800000U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_SHIFT       (23U)
#define GPC_SLPCR_REG_BYPASS_COUNT_MASK          (0x3F000000U)
#define GPC_SLPCR_REG_BYPASS_COUNT_SHIFT         (24U)
/*! REG_BYPASS_COUNT
 *  0b000000..no delay
 *  0b000001..1 CKIL clock period delay
 *  0b111111..63 CKIL clock period delay
 */
#define GPC_SLPCR_REG_BYPASS_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_REG_BYPASS_COUNT_SHIFT)) & GPC_SLPCR_REG_BYPASS_COUNT_MASK)
#define GPC_SLPCR_RBC_EN_MASK                    (0x40000000U)
#define GPC_SLPCR_RBC_EN_SHIFT                   (30U)
#define GPC_SLPCR_EN_DSM_MASK                    (0x80000000U)
#define GPC_SLPCR_EN_DSM_SHIFT                   (31U)
/*! @} */

/*! @name MST_CPU_MAPPING - MASTER LPM Handshake */
/*! @{ */
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_MASK (0x1U)
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_SHIFT (0U)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_MASK  (0xFFFFFFFEU)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_SHIFT (1U)
#define GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN(x)    (((uint32_t)(((uint32_t)(x)) << GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_SHIFT)) & GPC_MST_CPU_MAPPING_MEMLP_RET_PGEN_MASK)
/*! @} */

/*! @name MLPCR - Memory low power control register */
/*! @{ */
#define GPC_MLPCR_MEMLP_CTL_DIS_MASK             (0x1U)
#define GPC_MLPCR_MEMLP_CTL_DIS_SHIFT            (0U)
#define GPC_MLPCR_MEMLP_RET_SEL_MASK             (0x2U)
#define GPC_MLPCR_MEMLP_RET_SEL_SHIFT            (1U)
#define GPC_MLPCR_ROMLP_PDN_DIS_MASK             (0x4U)
#define GPC_MLPCR_ROMLP_PDN_DIS_SHIFT            (2U)
#define GPC_MLPCR_MEMLP_ENT_CNT_MASK             (0xFF00U)
#define GPC_MLPCR_MEMLP_ENT_CNT_SHIFT            (8U)
#define GPC_MLPCR_MEMLP_ENT_CNT(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_ENT_CNT_SHIFT)) & GPC_MLPCR_MEMLP_ENT_CNT_MASK)
#define GPC_MLPCR_MEM_EXT_CNT_MASK               (0xFF0000U)
#define GPC_MLPCR_MEM_EXT_CNT_SHIFT              (16U)
#define GPC_MLPCR_MEM_EXT_CNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEM_EXT_CNT_SHIFT)) & GPC_MLPCR_MEM_EXT_CNT_MASK)
#define GPC_MLPCR_MEMLP_RET_PGEN_MASK            (0xFF000000U)
#define GPC_MLPCR_MEMLP_RET_PGEN_SHIFT           (24U)
#define GPC_MLPCR_MEMLP_RET_PGEN(x)              (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_RET_PGEN_SHIFT)) & GPC_MLPCR_MEMLP_RET_PGEN_MASK)
/*! @} */

/*! @name PGC_ACK_SEL_A53 - PGC acknowledge signal selection of A53 platform */
/*! @{ */
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_MASK (0x2U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_SHIFT (1U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_MASK (0x4U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_SHIFT (2U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_SHIFT (13U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_SHIFT (14U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_MASK (0x20000U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_SHIFT (17U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_SHIFT (18U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_SHIFT (29U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_SHIFT (30U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name PGC_ACK_SEL_M4 - PGC acknowledge signal selection of M4 platform */
/*! @{ */
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_M4_M4_VIRTUAL_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_M4_M4_DUMMY_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name MISC - GPC Miscellaneous register */
/*! @{ */
#define GPC_MISC_M4_SLEEP_HOLD_REQ_B_MASK        (0x1U)
#define GPC_MISC_M4_SLEEP_HOLD_REQ_B_SHIFT       (0U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_MASK       (0x2U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_SHIFT      (1U)
#define GPC_MISC_GPC_IRQ_MASK_MASK               (0x20U)
#define GPC_MISC_GPC_IRQ_MASK_SHIFT              (5U)
#define GPC_MISC_M4_PDN_REQ_MASK_MASK            (0x100U)
#define GPC_MISC_M4_PDN_REQ_MASK_SHIFT           (8U)
#define GPC_MISC_A53_BYPASS_PUP_MASK_MASK        (0x1000000U)
#define GPC_MISC_A53_BYPASS_PUP_MASK_SHIFT       (24U)
#define GPC_MISC_M4_BYPASS_PUP_MASK_MASK         (0x2000000U)
#define GPC_MISC_M4_BYPASS_PUP_MASK_SHIFT        (25U)
/*! @} */

/*! @name IMR_CORE0_A53 - IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0 */
/*! @{ */
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT   (0U)
/*! IMR1_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT   (0U)
/*! IMR2_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT   (0U)
/*! IMR3_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT   (0U)
/*! IMR4_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE0_A53 */
#define GPC_IMR_CORE0_A53_COUNT                  (4U)

/*! @name IMR_CORE1_A53 - IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1 */
/*! @{ */
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT   (0U)
/*! IMR1_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT   (0U)
/*! IMR2_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT   (0U)
/*! IMR3_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT   (0U)
/*! IMR4_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE1_A53 */
#define GPC_IMR_CORE1_A53_COUNT                  (4U)

/*! @name IMR_M4 - IRQ masking register 1 of M4..IRQ masking register 4 of M4 */
/*! @{ */
#define GPC_IMR_M4_IMR1_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR1_M4_SHIFT                 (0U)
/*! IMR1_M4
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M4_IMR1_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR1_M4_SHIFT)) & GPC_IMR_M4_IMR1_M4_MASK)
#define GPC_IMR_M4_IMR2_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR2_M4_SHIFT                 (0U)
/*! IMR2_M4
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M4_IMR2_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR2_M4_SHIFT)) & GPC_IMR_M4_IMR2_M4_MASK)
#define GPC_IMR_M4_IMR3_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR3_M4_SHIFT                 (0U)
/*! IMR3_M4
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M4_IMR3_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR3_M4_SHIFT)) & GPC_IMR_M4_IMR3_M4_MASK)
#define GPC_IMR_M4_IMR4_M4_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M4_IMR4_M4_SHIFT                 (0U)
/*! IMR4_M4
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M4_IMR4_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M4_IMR4_M4_SHIFT)) & GPC_IMR_M4_IMR4_M4_MASK)
/*! @} */

/* The count of GPC_IMR_M4 */
#define GPC_IMR_M4_COUNT                         (4U)

/*! @name ISR_A53 - IRQ status register 1 of A53..IRQ status register 4 of A53 */
/*! @{ */
#define GPC_ISR_A53_ISR1_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR1_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR1_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR1_A53_SHIFT)) & GPC_ISR_A53_ISR1_A53_MASK)
#define GPC_ISR_A53_ISR2_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR2_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR2_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR2_A53_SHIFT)) & GPC_ISR_A53_ISR2_A53_MASK)
#define GPC_ISR_A53_ISR3_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR3_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR3_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR3_A53_SHIFT)) & GPC_ISR_A53_ISR3_A53_MASK)
#define GPC_ISR_A53_ISR4_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR4_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR4_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR4_A53_SHIFT)) & GPC_ISR_A53_ISR4_A53_MASK)
/*! @} */

/* The count of GPC_ISR_A53 */
#define GPC_ISR_A53_COUNT                        (4U)

/*! @name ISR_M4 - IRQ status register 1 of M4..IRQ status register 4 of M4 */
/*! @{ */
#define GPC_ISR_M4_ISR1_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR1_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR1_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR1_M4_SHIFT)) & GPC_ISR_M4_ISR1_M4_MASK)
#define GPC_ISR_M4_ISR2_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR2_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR2_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR2_M4_SHIFT)) & GPC_ISR_M4_ISR2_M4_MASK)
#define GPC_ISR_M4_ISR3_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR3_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR3_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR3_M4_SHIFT)) & GPC_ISR_M4_ISR3_M4_MASK)
#define GPC_ISR_M4_ISR4_M4_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M4_ISR4_M4_SHIFT                 (0U)
#define GPC_ISR_M4_ISR4_M4(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M4_ISR4_M4_SHIFT)) & GPC_ISR_M4_ISR4_M4_MASK)
/*! @} */

/* The count of GPC_ISR_M4 */
#define GPC_ISR_M4_COUNT                         (4U)

/*! @name SLT0_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT1_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT2_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT3_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT4_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT5_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT6_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT7_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT8_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT9_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
/*! @} */

/*! @name SLT10_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT11_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT12_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT13_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT14_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name PGC_CPU_0_1_MAPPING - PGC CPU mapping */
/*! @{ */
#define GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_MASK (0x1U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_A53_DOMAIN_SHIFT (0U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_MASK (0x4U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_SHIFT (2U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_MASK (0x8U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_A53_DOMAIN_SHIFT (3U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_MASK (0x10U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_SHIFT (4U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_MASK (0x20U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_A53_DOMAIN_SHIFT (5U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_MASK (0x80U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_SHIFT (7U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_MASK (0x100U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_A53_DOMAIN_SHIFT (8U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_MASK (0x200U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_SHIFT (9U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_MASK (0x400U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_A53_DOMAIN_SHIFT (10U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_MASK (0x800U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_A53_DOMAIN_SHIFT (11U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_MASK (0x1000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_A53_DOMAIN_SHIFT (12U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_MASK (0x2000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_A53_DOMAIN_SHIFT (13U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_MASK (0x4000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_A53_DOMAIN_SHIFT (14U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_MASK (0x8000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_A53_DOMAIN_SHIFT (15U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_MASK (0x10000U)
#define GPC_PGC_CPU_0_1_MAPPING_MF_M4_DOMAIN_SHIFT (16U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_MASK (0x40000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M4_DOMAIN_SHIFT (18U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_MASK (0x80000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE_M4_DOMAIN_SHIFT (19U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_MASK (0x100000U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M4_DOMAIN_SHIFT (20U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_MASK (0x200000U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG2_M4_DOMAIN_SHIFT (21U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_MASK (0x800000U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M4_DOMAIN_SHIFT (23U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_MASK (0x1000000U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR2_M4_DOMAIN_SHIFT (24U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_MASK (0x2000000U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_M4_DOMAIN_SHIFT (25U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_MASK (0x4000000U)
#define GPC_PGC_CPU_0_1_MAPPING_VPU_M4_DOMAIN_SHIFT (26U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_MASK (0x8000000U)
#define GPC_PGC_CPU_0_1_MAPPING_HDMI_M4_DOMAIN_SHIFT (27U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_MASK (0x10000000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISP_M4_DOMAIN_SHIFT (28U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_MASK (0x20000000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI1_M4_DOMAIN_SHIFT (29U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_MASK (0x40000000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_CSI2_M4_DOMAIN_SHIFT (30U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_MASK (0x80000000U)
#define GPC_PGC_CPU_0_1_MAPPING_PCIE2_M4_DOMAIN_SHIFT (31U)
/*! @} */

/*! @name CPU_PGC_SW_PUP_REQ - CPU PGC software power up trigger */
/*! @{ */
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name MIX_PGC_SW_PUP_REQ - MIX PGC software power up trigger */
/*! @{ */
#define GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_MASK (0x1U)
#define GPC_MIX_PGC_SW_PUP_REQ_MIX_SW_PUP_REQ_SHIFT (0U)
/*! @} */

/*! @name PU_PGC_SW_PUP_REQ - PU PGC software up trigger */
/*! @{ */
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_SW_PUP_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_MASK (0x2U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE_SW_PUP_REQ_SHIFT (1U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_MASK (0x8U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG2_SW_PUP_REQ_SHIFT (3U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_MASK (0x40U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR2_SW_PUP_REQ_SHIFT (6U)
#define GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PUP_REQ_GPU_SW_PUP_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_MASK (0x100U)
#define GPC_PU_PGC_SW_PUP_REQ_VPU_SW_PUP_REQ_SHIFT (8U)
#define GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_MASK (0x200U)
#define GPC_PU_PGC_SW_PUP_REQ_HDMI_SW_PUP_REQ_SHIFT (9U)
#define GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PUP_REQ_DISP_SW_PUP_REQ_SHIFT (10U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_MASK (0x800U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI1_SW_PUP_REQ_SHIFT (11U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_MASK (0x1000U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_CSI2_SW_PUP_REQ_SHIFT (12U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_MASK (0x2000U)
#define GPC_PU_PGC_SW_PUP_REQ_PCIE2_SW_PUP_REQ_SHIFT (13U)
/*! @} */

/*! @name CPU_PGC_SW_PDN_REQ - CPU PGC software down trigger */
/*! @{ */
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PDN_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name MIX_PGC_SW_PDN_REQ - MIX PGC software power down trigger */
/*! @{ */
#define GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_MASK (0x1U)
#define GPC_MIX_PGC_SW_PDN_REQ_MIX_SW_PDN_REQ_SHIFT (0U)
/*! @} */

/*! @name PU_PGC_SW_PDN_REQ - PU PGC software down trigger */
/*! @{ */
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_SW_PDN_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_MASK (0x2U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE_SW_PDN_REQ_SHIFT (1U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_MASK (0x8U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG2_SW_PDN_REQ_SHIFT (3U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_MASK (0x40U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR2_SW_PDN_REQ_SHIFT (6U)
#define GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PDN_REQ_GPU_SW_PDN_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_MASK (0x100U)
#define GPC_PU_PGC_SW_PDN_REQ_VPU_SW_PDN_REQ_SHIFT (8U)
#define GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_MASK (0x200U)
#define GPC_PU_PGC_SW_PDN_REQ_HDMI_SW_PDN_REQ_SHIFT (9U)
#define GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PDN_REQ_DISP_SW_PDN_REQ_SHIFT (10U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_MASK (0x800U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI1_SW_PDN_REQ_SHIFT (11U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_MASK (0x1000U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_CSI2_SW_PDN_REQ_SHIFT (12U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_MASK (0x2000U)
#define GPC_PU_PGC_SW_PDN_REQ_PCIE2_SW_PDN_REQ_SHIFT (13U)
/*! @} */

/*! @name LPCR_A53_BSC2 - Basic Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_BSC2_LPM2_MASK              (0x3U)
#define GPC_LPCR_A53_BSC2_LPM2_SHIFT             (0U)
/*! LPM2
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC2_LPM2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM2_SHIFT)) & GPC_LPCR_A53_BSC2_LPM2_MASK)
#define GPC_LPCR_A53_BSC2_LPM3_MASK              (0xCU)
#define GPC_LPCR_A53_BSC2_LPM3_SHIFT             (2U)
/*! LPM3
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC2_LPM3(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM3_SHIFT)) & GPC_LPCR_A53_BSC2_LPM3_MASK)
/*! @} */

/*! @name CPU_PGC_PUP_STATUS1 - CPU PGC software up trigger status1 */
/*! @{ */
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name A53_MIX_PGC_PUP_STATUS - A53 MIX software up trigger status register */
/*! @{ */
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_A53_MIX_PGC_PUP_STATUS */
#define GPC_A53_MIX_PGC_PUP_STATUS_COUNT         (3U)

/*! @name M4_MIX_PGC_PUP_STATUS - M4 MIX PGC software up trigger status register */
/*! @{ */
#define GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_M4_MIX_PGC_PUP_STATUS_M4_MIX_PGC_PUP_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_M4_MIX_PGC_PUP_STATUS */
#define GPC_M4_MIX_PGC_PUP_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PUP_STATUS - A53 PU software up trigger status register */
/*! @{ */
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PUP_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_MASK (0x2U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE_PUP_STATUS_SHIFT (1U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_MASK (0x8U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG2_PUP_STATUS_SHIFT (3U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPU_PUP_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_MASK (0x100U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_VPU_PUP_STATUS_SHIFT (8U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_MASK (0x200U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_HDMI_PUP_STATUS_SHIFT (9U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISP_PUP_STATUS_SHIFT (10U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_MASK (0x800U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI1_PUP_STATUS_SHIFT (11U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_MASK (0x1000U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_CSI2_PUP_STATUS_SHIFT (12U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_MASK (0x2000U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_PCIE2_PUP_STATUS_SHIFT (13U)
/*! @} */

/* The count of GPC_A53_PU_PGC_PUP_STATUS */
#define GPC_A53_PU_PGC_PUP_STATUS_COUNT          (3U)

/*! @name M4_PU_PGC_PUP_STATUS - M4 PU PGC software up trigger status register */
/*! @{ */
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_MASK (0x1U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_PUP_STATUS_SHIFT (0U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_MASK (0x2U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE_PUP_STATUS_SHIFT (1U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_MASK (0x8U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_OTG2_PUP_STATUS_SHIFT (3U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_MASK (0x80U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_GPU_PUP_STATUS_SHIFT (7U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_MASK (0x100U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_VPU_PUP_STATUS_SHIFT (8U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_MASK (0x200U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_HDMI_PUP_STATUS_SHIFT (9U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_MASK (0x400U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_DISP_PUP_STATUS_SHIFT (10U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_MASK (0x800U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI1_PUP_STATUS_SHIFT (11U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_MASK (0x1000U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_MIPI_CSI2_PUP_STATUS_SHIFT (12U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_MASK (0x2000U)
#define GPC_M4_PU_PGC_PUP_STATUS_M4_PCIE2_PUP_STATUS_SHIFT (13U)
/*! @} */

/* The count of GPC_M4_PU_PGC_PUP_STATUS */
#define GPC_M4_PU_PGC_PUP_STATUS_COUNT           (3U)

/*! @name CPU_PGC_PDN_STATUS1 - CPU PGC software dn trigger status1 */
/*! @{ */
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_REQ_SHIFT (4U)
/*! @} */

/*! @name A53_MIX_PGC_PDN_STATUS - A53 MIX software down trigger status register */
/*! @{ */
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_A53_MIX_PGC_PDN_STATUS */
#define GPC_A53_MIX_PGC_PDN_STATUS_COUNT         (3U)

/*! @name M4_MIX_PGC_PDN_STATUS - M4 MIX PGC software power down trigger status register */
/*! @{ */
#define GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_M4_MIX_PGC_PDN_STATUS_M4_MIX_PGC_PDN_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_M4_MIX_PGC_PDN_STATUS */
#define GPC_M4_MIX_PGC_PDN_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PDN_STATUS - A53 PU PGC software down trigger status */
/*! @{ */
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PDN_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_MASK (0x2U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE_PDN_STATUS_SHIFT (1U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_MASK (0x8U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG2_PDN_STATUS_SHIFT (3U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPU_PDN_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_MASK (0x100U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_VPU_PDN_STATUS_SHIFT (8U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_MASK (0x200U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_HDMI_PDN_STATUS_SHIFT (9U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISP_PDN_STATUS_SHIFT (10U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_MASK (0x800U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI1_PDN_STATUS_SHIFT (11U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_MASK (0x1000U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_CSI2_PDN_STATUS_SHIFT (12U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_MASK (0x2000U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_PCIE2_PDN_STATUS_SHIFT (13U)
/*! @} */

/* The count of GPC_A53_PU_PGC_PDN_STATUS */
#define GPC_A53_PU_PGC_PDN_STATUS_COUNT          (3U)

/*! @name M4_PU_PGC_PDN_STATUS - M4 PU PGC software down trigger status */
/*! @{ */
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_MASK (0x1U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_PDN_STATUS_SHIFT (0U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_MASK (0x2U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE_PDN_STATUS_SHIFT (1U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_MASK (0x8U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_OTG2_PDN_STATUS_SHIFT (3U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_MASK (0x80U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_GPU_PDN_STATUS_SHIFT (7U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_MASK (0x100U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_VPU_PDN_STATUS_SHIFT (8U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_MASK (0x200U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_HDMI_PDN_STATUS_SHIFT (9U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_MASK (0x400U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_DISP_PDN_STATUS_SHIFT (10U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_MASK (0x800U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI1_PDN_STATUS_SHIFT (11U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_MASK (0x1000U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_MIPI_CSI2_PDN_STATUS_SHIFT (12U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_MASK (0x2000U)
#define GPC_M4_PU_PGC_PDN_STATUS_M4_PCIE2_PDN_STATUS_SHIFT (13U)
/*! @} */

/* The count of GPC_M4_PU_PGC_PDN_STATUS */
#define GPC_M4_PU_PGC_PDN_STATUS_COUNT           (3U)

/*! @name A53_MIX_PDN_FLG - A53 MIX PDN FLG */
/*! @{ */
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_MASK (0x1U)
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_SHIFT (0U)
/*! @} */

/*! @name A53_PU_PDN_FLG - A53 PU PDN FLG */
/*! @{ */
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK   (0x3FFFU)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT  (0U)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG(x)     (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT)) & GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK)
/*! @} */

/*! @name M4_MIX_PDN_FLG - M4 MIX PDN FLG */
/*! @{ */
#define GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_MASK  (0x1U)
#define GPC_M4_MIX_PDN_FLG_M4_MIX_PDN_FLAG_SHIFT (0U)
/*! @} */

/*! @name M4_PU_PDN_FLG - M4 PU PDN FLG */
/*! @{ */
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_MASK     (0x3FFFU)
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_SHIFT    (0U)
#define GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_SHIFT)) & GPC_M4_PU_PDN_FLG_M4_PU_PDN_FLG_MASK)
/*! @} */

/*! @name IMR_CORE2_A53 - IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2 */
/*! @{ */
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT   (0U)
/*! IMR1_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT   (0U)
/*! IMR2_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT   (0U)
/*! IMR3_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT   (0U)
/*! IMR4_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE2_A53 */
#define GPC_IMR_CORE2_A53_COUNT                  (4U)

/*! @name IMR_CORE3_A53 - IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3 */
/*! @{ */
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT   (0U)
/*! IMR1_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT   (0U)
/*! IMR2_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT   (0U)
/*! IMR3_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT   (0U)
/*! IMR4_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE3_A53 */
#define GPC_IMR_CORE3_A53_COUNT                  (4U)

/*! @name ACK_SEL_A53_PU - PGC acknowledge signal selection of A53 platform for PUs */
/*! @{ */
#define GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_MASK   (0x1U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PDN_ACK_SHIFT  (0U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_MASK (0x4U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_MASK (0x8U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PDN_ACK_SHIFT (3U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_MASK (0x20U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PDN_ACK_SHIFT (5U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_MASK (0x80U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_MASK (0x100U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PDN_ACK_SHIFT (8U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_MASK  (0x200U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PDN_ACK_SHIFT (9U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_MASK  (0x400U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PDN_ACK_SHIFT (10U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_MASK (0x800U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PDN_ACK_SHIFT (11U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_MASK (0x1000U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT (13U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT (14U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PDN_ACK_SHIFT (15U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_MASK   (0x10000U)
#define GPC_ACK_SEL_A53_PU_MF_PGC_PUP_ACK_SHIFT  (16U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_MASK (0x80000U)
#define GPC_ACK_SEL_A53_PU_PCIE_PGC_PUP_ACK_SHIFT (19U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_MASK (0x200000U)
#define GPC_ACK_SEL_A53_PU_USB_OTG2_PGC_PUP_ACK_SHIFT (21U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_MASK (0x800000U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_MASK (0x1000000U)
#define GPC_ACK_SEL_A53_PU_DDR2_PGC_PUP_ACK_SHIFT (24U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_MASK  (0x2000000U)
#define GPC_ACK_SEL_A53_PU_GPU_PGC_PUP_ACK_SHIFT (25U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_MASK  (0x4000000U)
#define GPC_ACK_SEL_A53_PU_VPU_PGC_PUP_ACK_SHIFT (26U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_MASK (0x8000000U)
#define GPC_ACK_SEL_A53_PU_HDMI_PGC_PUP_ACK_SHIFT (27U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_MASK (0x10000000U)
#define GPC_ACK_SEL_A53_PU_DISP_PGC_PUP_ACK_SHIFT (28U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT (29U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_ACK_SEL_A53_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT (30U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_ACK_SEL_A53_PU_PCIE2_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name ACK_SEL_M4_PU - PGC acknowledge signal selection of M4 platform for PUs */
/*! @{ */
#define GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_MASK    (0x1U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PDN_ACK_SHIFT   (0U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_MASK  (0x4U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_MASK  (0x8U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PDN_ACK_SHIFT (3U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_MASK (0x20U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PDN_ACK_SHIFT (5U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_MASK  (0x80U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_MASK  (0x100U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PDN_ACK_SHIFT (8U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_MASK   (0x200U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PDN_ACK_SHIFT  (9U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_MASK   (0x400U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PDN_ACK_SHIFT  (10U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_MASK  (0x800U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PDN_ACK_SHIFT (11U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_MASK  (0x1000U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PDN_ACK_SHIFT (13U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PDN_ACK_SHIFT (14U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PDN_ACK_SHIFT (15U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_MASK    (0x10000U)
#define GPC_ACK_SEL_M4_PU_MF_PGC_PUP_ACK_SHIFT   (16U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_MASK  (0x40000U)
#define GPC_ACK_SEL_M4_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_MASK  (0x80000U)
#define GPC_ACK_SEL_M4_PU_PCIE_PGC_PUP_ACK_SHIFT (19U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_M4_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_MASK (0x200000U)
#define GPC_ACK_SEL_M4_PU_USB_OTG2_PGC_PUP_ACK_SHIFT (21U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_MASK  (0x800000U)
#define GPC_ACK_SEL_M4_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_MASK  (0x1000000U)
#define GPC_ACK_SEL_M4_PU_DDR2_PGC_PUP_ACK_SHIFT (24U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_MASK   (0x2000000U)
#define GPC_ACK_SEL_M4_PU_GPU_PGC_PUP_ACK_SHIFT  (25U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_MASK   (0x4000000U)
#define GPC_ACK_SEL_M4_PU_VPU_PGC_PUP_ACK_SHIFT  (26U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_MASK  (0x8000000U)
#define GPC_ACK_SEL_M4_PU_HDMI_PGC_PUP_ACK_SHIFT (27U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_MASK  (0x10000000U)
#define GPC_ACK_SEL_M4_PU_DISP_PGC_PUP_ACK_SHIFT (28U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI1_PGC_PUP_ACK_SHIFT (29U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_ACK_SEL_M4_PU_MIPI_CSI2_PGC_PUP_ACK_SHIFT (30U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_ACK_SEL_M4_PU_PCIE2_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name SLT15_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT16_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT17_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT18_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name SLT19_CFG - Slot configure register for A53 core */
/*! @{ */
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
/*! @} */

/*! @name PU_PWRHSK - Power handshake register */
/*! @{ */
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSREQ_MASK (0x1U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSREQ_SHIFT (0U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSREQ_MASK  (0x2U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSREQ_SHIFT (1U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CSYSREQ_MASK (0x4U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CSYSREQ_SHIFT (2U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CSYSREQ_MASK  (0x8U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CSYSREQ_SHIFT (3U)
#define GPC_PU_PWRHSK_GPC_DISPMIX_PWRDNREQN_MASK (0x10U)
#define GPC_PU_PWRHSK_GPC_DISPMIX_PWRDNREQN_SHIFT (4U)
#define GPC_PU_PWRHSK_GPC_VPUMIX_PWRDNREQN_MASK  (0x20U)
#define GPC_PU_PWRHSK_GPC_VPUMIX_PWRDNREQN_SHIFT (5U)
#define GPC_PU_PWRHSK_GPC_GPUMIX_PWRDNREQN_MASK  (0x40U)
#define GPC_PU_PWRHSK_GPC_GPUMIX_PWRDNREQN_SHIFT (6U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSACK_MASK (0x10000U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSACK_SHIFT (16U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CACTIVE_MASK (0x20000U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CACTIVE_SHIFT (17U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSACK_MASK  (0x40000U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSACK_SHIFT (18U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CACTIVE_MASK  (0x80000U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CACTIVE_SHIFT (19U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CSYSACK_MASK (0x100000U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CSYSACK_SHIFT (20U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CACTIVE_MASK (0x200000U)
#define GPC_PU_PWRHSK_GPC_DDR2_CORE_CACTIVE_SHIFT (21U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CSYSACK_MASK  (0x400000U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CSYSACK_SHIFT (22U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CACTIVE_MASK  (0x800000U)
#define GPC_PU_PWRHSK_GPC_DDR2_AXI_CACTIVE_SHIFT (23U)
#define GPC_PU_PWRHSK_GPC_DISPMIX_PWRDNACKN_MASK (0x1000000U)
#define GPC_PU_PWRHSK_GPC_DISPMIX_PWRDNACKN_SHIFT (24U)
#define GPC_PU_PWRHSK_GPC_VPUMIX_PWRDNACKN_MASK  (0x2000000U)
#define GPC_PU_PWRHSK_GPC_VPUMIX_PWRDNACKN_SHIFT (25U)
#define GPC_PU_PWRHSK_GPC_GPUMIX_PWRDNACKN_MASK  (0x4000000U)
#define GPC_PU_PWRHSK_GPC_GPUMIX_PWRDNACKN_SHIFT (26U)
/*! @} */

/*! @name SLT_CFG_PU - Slot configure register for PUs */
/*! @{ */
#define GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_MASK  (0x1U)
#define GPC_SLT_CFG_PU_MF_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_MASK  (0x2U)
#define GPC_SLT_CFG_PU_MF_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT_CFG_PU_PCIE_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT_CFG_PU_PCIE_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_MASK (0x100U)
#define GPC_SLT_CFG_PU_OTG2_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_MASK (0x200U)
#define GPC_SLT_CFG_PU_OTG2_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_MASK  (0x1000U)
#define GPC_SLT_CFG_PU_M4_PDN_SLOT_CONTROL_SHIFT (12U)
#define GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_MASK  (0x2000U)
#define GPC_SLT_CFG_PU_M4_PUP_SLOT_CONTROL_SHIFT (13U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_MASK (0x4000U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_SHIFT (14U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_MASK (0x8000U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_SHIFT (15U)
#define GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_MASK (0x10000U)
#define GPC_SLT_CFG_PU_DDR2_PDN_SLOT_CONTROL_SHIFT (16U)
#define GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_MASK (0x20000U)
#define GPC_SLT_CFG_PU_DDR2_PUP_SLOT_CONTROL_SHIFT (17U)
#define GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_MASK (0x40000U)
#define GPC_SLT_CFG_PU_GPU_PDN_SLOT_CONTROL_SHIFT (18U)
#define GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_MASK (0x80000U)
#define GPC_SLT_CFG_PU_GPU_PUP_SLOT_CONTROL_SHIFT (19U)
#define GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_MASK (0x100000U)
#define GPC_SLT_CFG_PU_VPU_PDN_SLOT_CONTROL_SHIFT (20U)
#define GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_MASK (0x200000U)
#define GPC_SLT_CFG_PU_VPU_PUP_SLOT_CONTROL_SHIFT (21U)
#define GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_MASK (0x400000U)
#define GPC_SLT_CFG_PU_HDMI_PDN_SLOT_CONTROL_SHIFT (22U)
#define GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_MASK (0x800000U)
#define GPC_SLT_CFG_PU_HDMI_PUP_SLOT_CONTROL_SHIFT (23U)
#define GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_MASK (0x1000000U)
#define GPC_SLT_CFG_PU_DISP_PDN_SLOT_CONTROL_SHIFT (24U)
#define GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_MASK (0x2000000U)
#define GPC_SLT_CFG_PU_DISP_PUP_SLOT_CONTROL_SHIFT (25U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_MASK (0x4000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PDN_SLOT_CONTROL_SHIFT (26U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_MASK (0x8000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI1_PUP_SLOT_CONTROL_SHIFT (27U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_MASK (0x10000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PDN_SLOT_CONTROL_SHIFT (28U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_MASK (0x20000000U)
#define GPC_SLT_CFG_PU_MIPI_CSI2_PUP_SLOT_CONTROL_SHIFT (29U)
#define GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_MASK (0x40000000U)
#define GPC_SLT_CFG_PU_PCIE2_PDN_SLOT_CONTROL_SHIFT (30U)
#define GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_MASK (0x80000000U)
#define GPC_SLT_CFG_PU_PCIE2_PUP_SLOT_CONTROL_SHIFT (31U)
/*! @} */

/* The count of GPC_SLT_CFG_PU */
#define GPC_SLT_CFG_PU_COUNT                     (20U)


/*!
 * @}
 */ /* end of group GPC_Register_Masks */


/* GPC - Peripheral instance base addresses */
/** Peripheral GPC base pointer */
#define GPC_BASE_PTR                             ((GPC_MemMapPtr)0x303A0000u)
/** Array initializer of GPC peripheral base pointers */
#define GPC_BASE_PTRS                            { GPC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register instance definitions */
/* GPC */
#define GPC_LPCR_A53_BSC                         GPC_LPCR_A53_BSC_REG(GPC_BASE_PTR)
#define GPC_LPCR_A53_AD                          GPC_LPCR_A53_AD_REG(GPC_BASE_PTR)
#define GPC_LPCR_M4                              GPC_LPCR_M4_REG(GPC_BASE_PTR)
#define GPC_SLPCR                                GPC_SLPCR_REG(GPC_BASE_PTR)
#define GPC_MST_CPU_MAPPING                      GPC_MST_CPU_MAPPING_REG(GPC_BASE_PTR)
#define GPC_MLPCR                                GPC_MLPCR_REG(GPC_BASE_PTR)
#define GPC_PGC_ACK_SEL_A53                      GPC_PGC_ACK_SEL_A53_REG(GPC_BASE_PTR)
#define GPC_PGC_ACK_SEL_M4                       GPC_PGC_ACK_SEL_M4_REG(GPC_BASE_PTR)
#define GPC_MISC                                 GPC_MISC_REG(GPC_BASE_PTR)
#define GPC_IMR1_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_M4                              GPC_IMR_M4_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_M4                              GPC_IMR_M4_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_M4                              GPC_IMR_M4_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_M4                              GPC_IMR_M4_REG(GPC_BASE_PTR,3)
#define GPC_ISR1_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,0)
#define GPC_ISR2_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,1)
#define GPC_ISR3_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,2)
#define GPC_ISR4_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,3)
#define GPC_ISR1_M4                              GPC_ISR_M4_REG(GPC_BASE_PTR,0)
#define GPC_ISR2_M4                              GPC_ISR_M4_REG(GPC_BASE_PTR,1)
#define GPC_ISR3_M4                              GPC_ISR_M4_REG(GPC_BASE_PTR,2)
#define GPC_ISR4_M4                              GPC_ISR_M4_REG(GPC_BASE_PTR,3)
#define GPC_SLT0_CFG                             GPC_SLT0_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT1_CFG                             GPC_SLT1_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT2_CFG                             GPC_SLT2_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT3_CFG                             GPC_SLT3_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT4_CFG                             GPC_SLT4_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT5_CFG                             GPC_SLT5_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT6_CFG                             GPC_SLT6_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT7_CFG                             GPC_SLT7_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT8_CFG                             GPC_SLT8_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT9_CFG                             GPC_SLT9_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT10_CFG                            GPC_SLT10_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT11_CFG                            GPC_SLT11_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT12_CFG                            GPC_SLT12_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT13_CFG                            GPC_SLT13_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT14_CFG                            GPC_SLT14_CFG_REG(GPC_BASE_PTR)
#define GPC_PGC_CPU_0_1_MAPPING                  GPC_PGC_CPU_0_1_MAPPING_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_SW_PUP_REQ                   GPC_CPU_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_MIX_PGC_SW_PUP_REQ                   GPC_MIX_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_PU_PGC_SW_PUP_REQ                    GPC_PU_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_SW_PDN_REQ                   GPC_CPU_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_MIX_PGC_SW_PDN_REQ                   GPC_MIX_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_PU_PGC_SW_PDN_REQ                    GPC_PU_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_LPCR_A53_BSC2                        GPC_LPCR_A53_BSC2_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_PUP_STATUS1                  GPC_CPU_PGC_PUP_STATUS1_REG(GPC_BASE_PTR)
#define GPC_A53_MIX_PGC_PUP_STATUS0              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_MIX_PGC_PUP_STATUS1              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_MIX_PGC_PUP_STATUS2              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M4_MIX_PGC_PUP_STATUS0               GPC_M4_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M4_MIX_PGC_PUP_STATUS1               GPC_M4_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M4_MIX_PGC_PUP_STATUS2               GPC_M4_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_PU_PGC_PUP_STATUS0               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_PU_PGC_PUP_STATUS1               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_PU_PGC_PUP_STATUS2               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M4_PU_PGC_PUP_STATUS0                GPC_M4_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M4_PU_PGC_PUP_STATUS1                GPC_M4_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M4_PU_PGC_PUP_STATUS2                GPC_M4_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_CPU_PGC_PDN_STATUS1                  GPC_CPU_PGC_PDN_STATUS1_REG(GPC_BASE_PTR)
#define GPC_A53_MIX_PGC_PDN_STATUS0              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_MIX_PGC_PDN_STATUS1              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_MIX_PGC_PDN_STATUS2              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M4_MIX_PGC_PDN_STATUS0               GPC_M4_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M4_MIX_PGC_PDN_STATUS1               GPC_M4_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M4_MIX_PGC_PDN_STATUS2               GPC_M4_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_PU_PGC_PDN_STATUS0               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_PU_PGC_PDN_STATUS1               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_PU_PGC_PDN_STATUS2               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M4_PU_PGC_PDN_STATUS0                GPC_M4_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M4_PU_PGC_PDN_STATUS1                GPC_M4_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M4_PU_PGC_PDN_STATUS2                GPC_M4_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_MIX_PDN_FLG                      GPC_A53_MIX_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_A53_PU_PDN_FLG                       GPC_A53_PU_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_M4_MIX_PDN_FLG                       GPC_M4_MIX_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_M4_PU_PDN_FLG                        GPC_M4_PU_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_IMR1_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,3)
#define GPC_ACK_SEL_A53_PU                       GPC_ACK_SEL_A53_PU_REG(GPC_BASE_PTR)
#define GPC_ACK_SEL_M4_PU                        GPC_ACK_SEL_M4_PU_REG(GPC_BASE_PTR)
#define GPC_SLT15_CFG                            GPC_SLT15_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT16_CFG                            GPC_SLT16_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT17_CFG                            GPC_SLT17_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT18_CFG                            GPC_SLT18_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT19_CFG                            GPC_SLT19_CFG_REG(GPC_BASE_PTR)
#define GPC_PU_PWRHSK                            GPC_PU_PWRHSK_REG(GPC_BASE_PTR)
#define GPC_SLT0_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,0)
#define GPC_SLT1_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,1)
#define GPC_SLT2_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,2)
#define GPC_SLT3_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,3)
#define GPC_SLT4_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,4)
#define GPC_SLT5_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,5)
#define GPC_SLT6_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,6)
#define GPC_SLT7_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,7)
#define GPC_SLT8_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,8)
#define GPC_SLT9_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,9)
#define GPC_SLT10_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,10)
#define GPC_SLT11_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,11)
#define GPC_SLT12_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,12)
#define GPC_SLT13_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,13)
#define GPC_SLT14_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,14)
#define GPC_SLT15_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,15)
#define GPC_SLT16_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,16)
#define GPC_SLT17_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,17)
#define GPC_SLT18_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,18)
#define GPC_SLT19_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,19)

/* GPC - Register array accessors */
#define GPC_IMR_CORE0_A53(index)                 GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE1_A53(index)                 GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_M4(index)                        GPC_IMR_M4_REG(GPC_BASE_PTR,index)
#define GPC_ISR_A53(index)                       GPC_ISR_A53_REG(GPC_BASE_PTR,index)
#define GPC_ISR_M4(index)                        GPC_ISR_M4_REG(GPC_BASE_PTR,index)
#define GPC_A53_MIX_PGC_PUP_STATUS(index)        GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M4_MIX_PGC_PUP_STATUS(index)         GPC_M4_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_PU_PGC_PUP_STATUS(index)         GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M4_PU_PGC_PUP_STATUS(index)          GPC_M4_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_MIX_PGC_PDN_STATUS(index)        GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M4_MIX_PGC_PDN_STATUS(index)         GPC_M4_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_PU_PGC_PDN_STATUS(index)         GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M4_PU_PGC_PDN_STATUS(index)          GPC_M4_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE2_A53(index)                 GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE3_A53(index)                 GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,index)
#define GPC_SLT_CFG_PU(index)                    GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPC_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPC_PGC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Peripheral GPC_PGC
 * @{
 */

/** GPC_PGC - Peripheral register structure */
typedef struct GPC_PGC_MemMap {
  uint32_t A53CORE0_CTRL;                          /**< GPC PGC Control Register, offset: 0x0 */
  uint32_t A53CORE0_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x4 */
  uint32_t A53CORE0_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x8 */
  uint32_t A53CORE0_SR;                            /**< GPC PGC Status Register, offset: 0xC */
  uint32_t A53CORE0_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x10 */
  uint8_t RESERVED_0[44];
  uint32_t A53CORE1_CTRL;                          /**< GPC PGC Control Register, offset: 0x40 */
  uint32_t A53CORE1_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x44 */
  uint32_t A53CORE1_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x48 */
  uint32_t A53CORE1_SR;                            /**< GPC PGC Status Register, offset: 0x4C */
  uint32_t A53CORE1_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x50 */
  uint8_t RESERVED_1[44];
  uint32_t A53CORE2_CTRL;                          /**< GPC PGC Control Register, offset: 0x80 */
  uint32_t A53CORE2_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0x84 */
  uint32_t A53CORE2_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0x88 */
  uint32_t A53CORE2_SR;                            /**< GPC PGC Status Register, offset: 0x8C */
  uint32_t A53CORE2_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x90 */
  uint8_t RESERVED_2[44];
  uint32_t A53CORE3_CTRL;                          /**< GPC PGC Control Register, offset: 0xC0 */
  uint32_t A53CORE3_PUPSCR;                        /**< GPC PGC Up Sequence Control Register, offset: 0xC4 */
  uint32_t A53CORE3_PDNSCR;                        /**< GPC PGC Down Sequence Control Register, offset: 0xC8 */
  uint32_t A53CORE3_SR;                            /**< GPC PGC Status Register, offset: 0xCC */
  uint32_t A53CORE3_AUXSW;                         /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0xD0 */
  uint8_t RESERVED_3[44];
  uint32_t A53SCU_CTRL;                            /**< GPC PGC Control Register, offset: 0x100 */
  uint32_t A53SCU_PUPSCR;                          /**< GPC PGC Up Sequence Control Register, offset: 0x104 */
  uint32_t A53SCU_PDNSCR;                          /**< GPC PGC Down Sequence Control Register, offset: 0x108 */
  uint32_t A53SCU_SR;                              /**< GPC PGC Status Register, offset: 0x10C */
  uint32_t A53SCU_AUXSW;                           /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x110 */
  uint8_t RESERVED_4[236];
  uint32_t MIX_CTRL;                               /**< GPC PGC Control Register, offset: 0x200 */
  uint32_t MIX_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x204 */
  uint32_t MIX_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x208 */
  uint32_t MIX_SR;                                 /**< GPC PGC Status Register, offset: 0x20C */
  uint32_t MIX_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x210 */
  uint8_t RESERVED_5[492];
  uint32_t PU0_CTRL;                               /**< GPC PGC Control Register, offset: 0x400 */
  uint32_t PU0_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x404 */
  uint32_t PU0_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x408 */
  uint32_t PU0_SR;                                 /**< GPC PGC Status Register, offset: 0x40C */
  uint32_t PU0_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x410 */
  uint8_t RESERVED_6[44];
  uint32_t PU1_CTRL;                               /**< GPC PGC Control Register, offset: 0x440 */
  uint32_t PU1_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x444 */
  uint32_t PU1_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x448 */
  uint32_t PU1_SR;                                 /**< GPC PGC Status Register, offset: 0x44C */
  uint32_t PU1_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x450 */
  uint8_t RESERVED_7[44];
  uint32_t PU2_CTRL;                               /**< GPC PGC Control Register, offset: 0x480 */
  uint32_t PU2_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x484 */
  uint32_t PU2_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x488 */
  uint32_t PU2_SR;                                 /**< GPC PGC Status Register, offset: 0x48C */
  uint32_t PU2_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x490 */
  uint8_t RESERVED_8[44];
  uint32_t PU3_CTRL;                               /**< GPC PGC Control Register, offset: 0x4C0 */
  uint32_t PU3_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x4C4 */
  uint32_t PU3_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x4C8 */
  uint32_t PU3_SR;                                 /**< GPC PGC Status Register, offset: 0x4CC */
  uint32_t PU3_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x4D0 */
  uint8_t RESERVED_9[44];
  uint32_t PU4_CTRL;                               /**< GPC PGC Control Register, offset: 0x500 */
  uint32_t PU4_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x504 */
  uint32_t PU4_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x508 */
  uint32_t PU4_SR;                                 /**< GPC PGC Status Register, offset: 0x50C */
  uint32_t PU4_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x510 */
  uint8_t RESERVED_10[44];
  uint32_t PU5_CTRL;                               /**< GPC PGC Control Register, offset: 0x540 */
  uint32_t PU5_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x544 */
  uint32_t PU5_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x548 */
  uint32_t PU5_SR;                                 /**< GPC PGC Status Register, offset: 0x54C */
  uint32_t PU5_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x550 */
  uint8_t RESERVED_11[44];
  uint32_t PU6_CTRL;                               /**< GPC PGC Control Register, offset: 0x580 */
  uint32_t PU6_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x584 */
  uint32_t PU6_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x588 */
  uint32_t PU6_SR;                                 /**< GPC PGC Status Register, offset: 0x58C */
  uint32_t PU6_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x590 */
  uint8_t RESERVED_12[44];
  uint32_t PU7_CTRL;                               /**< GPC PGC Control Register, offset: 0x5C0 */
  uint32_t PU7_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x5C4 */
  uint32_t PU7_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x5C8 */
  uint32_t PU7_SR;                                 /**< GPC PGC Status Register, offset: 0x5CC */
  uint32_t PU7_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x5D0 */
  uint8_t RESERVED_13[44];
  uint32_t PU8_CTRL;                               /**< GPC PGC Control Register, offset: 0x600 */
  uint32_t PU8_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x604 */
  uint32_t PU8_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x608 */
  uint32_t PU8_SR;                                 /**< GPC PGC Status Register, offset: 0x60C */
  uint32_t PU8_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x610 */
  uint8_t RESERVED_14[44];
  uint32_t PU9_CTRL;                               /**< GPC PGC Control Register, offset: 0x640 */
  uint32_t PU9_PUPSCR;                             /**< GPC PGC Up Sequence Control Register, offset: 0x644 */
  uint32_t PU9_PDNSCR;                             /**< GPC PGC Down Sequence Control Register, offset: 0x648 */
  uint32_t PU9_SR;                                 /**< GPC PGC Status Register, offset: 0x64C */
  uint32_t PU9_AUXSW;                              /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x650 */
  uint8_t RESERVED_15[44];
  uint32_t PU10_CTRL;                              /**< GPC PGC Control Register, offset: 0x680 */
  uint32_t PU10_PUPSCR;                            /**< GPC PGC Up Sequence Control Register, offset: 0x684 */
  uint32_t PU10_PDNSCR;                            /**< GPC PGC Down Sequence Control Register, offset: 0x688 */
  uint32_t PU10_SR;                                /**< GPC PGC Status Register, offset: 0x68C */
  uint32_t PU10_AUXSW;                             /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x690 */
  uint8_t RESERVED_16[44];
  uint32_t PU11_CTRL;                              /**< GPC PGC Control Register, offset: 0x6C0 */
  uint32_t PU11_PUPSCR;                            /**< GPC PGC Up Sequence Control Register, offset: 0x6C4 */
  uint32_t PU11_PDNSCR;                            /**< GPC PGC Down Sequence Control Register, offset: 0x6C8 */
  uint32_t PU11_SR;                                /**< GPC PGC Status Register, offset: 0x6CC */
  uint32_t PU11_AUXSW;                             /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x6D0 */
  uint8_t RESERVED_17[44];
  uint32_t PU12_CTRL;                              /**< GPC PGC Control Register, offset: 0x700 */
  uint32_t PU12_PUPSCR;                            /**< GPC PGC Up Sequence Control Register, offset: 0x704 */
  uint32_t PU12_PDNSCR;                            /**< GPC PGC Down Sequence Control Register, offset: 0x708 */
  uint32_t PU12_SR;                                /**< GPC PGC Status Register, offset: 0x70C */
  uint32_t PU12_AUXSW;                             /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x710 */
  uint8_t RESERVED_18[44];
  uint32_t PU13_CTRL;                              /**< GPC PGC Control Register, offset: 0x740 */
  uint32_t PU13_PUPSCR;                            /**< GPC PGC Up Sequence Control Register, offset: 0x744 */
  uint32_t PU13_PDNSCR;                            /**< GPC PGC Down Sequence Control Register, offset: 0x748 */
  uint32_t PU13_SR;                                /**< GPC PGC Status Register, offset: 0x74C */
  uint32_t PU13_AUXSW;                             /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x750 */
} volatile *GPC_PGC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPC_PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Accessor_Macros GPC_PGC - Register accessor macros
 * @{
 */


/* GPC_PGC - Register accessors */
#define GPC_PGC_A53CORE0_CTRL_REG(base)          ((base)->A53CORE0_CTRL)
#define GPC_PGC_A53CORE0_PUPSCR_REG(base)        ((base)->A53CORE0_PUPSCR)
#define GPC_PGC_A53CORE0_PDNSCR_REG(base)        ((base)->A53CORE0_PDNSCR)
#define GPC_PGC_A53CORE0_SR_REG(base)            ((base)->A53CORE0_SR)
#define GPC_PGC_A53CORE0_AUXSW_REG(base)         ((base)->A53CORE0_AUXSW)
#define GPC_PGC_A53CORE1_CTRL_REG(base)          ((base)->A53CORE1_CTRL)
#define GPC_PGC_A53CORE1_PUPSCR_REG(base)        ((base)->A53CORE1_PUPSCR)
#define GPC_PGC_A53CORE1_PDNSCR_REG(base)        ((base)->A53CORE1_PDNSCR)
#define GPC_PGC_A53CORE1_SR_REG(base)            ((base)->A53CORE1_SR)
#define GPC_PGC_A53CORE1_AUXSW_REG(base)         ((base)->A53CORE1_AUXSW)
#define GPC_PGC_A53CORE2_CTRL_REG(base)          ((base)->A53CORE2_CTRL)
#define GPC_PGC_A53CORE2_PUPSCR_REG(base)        ((base)->A53CORE2_PUPSCR)
#define GPC_PGC_A53CORE2_PDNSCR_REG(base)        ((base)->A53CORE2_PDNSCR)
#define GPC_PGC_A53CORE2_SR_REG(base)            ((base)->A53CORE2_SR)
#define GPC_PGC_A53CORE2_AUXSW_REG(base)         ((base)->A53CORE2_AUXSW)
#define GPC_PGC_A53CORE3_CTRL_REG(base)          ((base)->A53CORE3_CTRL)
#define GPC_PGC_A53CORE3_PUPSCR_REG(base)        ((base)->A53CORE3_PUPSCR)
#define GPC_PGC_A53CORE3_PDNSCR_REG(base)        ((base)->A53CORE3_PDNSCR)
#define GPC_PGC_A53CORE3_SR_REG(base)            ((base)->A53CORE3_SR)
#define GPC_PGC_A53CORE3_AUXSW_REG(base)         ((base)->A53CORE3_AUXSW)
#define GPC_PGC_A53SCU_CTRL_REG(base)            ((base)->A53SCU_CTRL)
#define GPC_PGC_A53SCU_PUPSCR_REG(base)          ((base)->A53SCU_PUPSCR)
#define GPC_PGC_A53SCU_PDNSCR_REG(base)          ((base)->A53SCU_PDNSCR)
#define GPC_PGC_A53SCU_SR_REG(base)              ((base)->A53SCU_SR)
#define GPC_PGC_A53SCU_AUXSW_REG(base)           ((base)->A53SCU_AUXSW)
#define GPC_PGC_MIX_CTRL_REG(base)               ((base)->MIX_CTRL)
#define GPC_PGC_MIX_PUPSCR_REG(base)             ((base)->MIX_PUPSCR)
#define GPC_PGC_MIX_PDNSCR_REG(base)             ((base)->MIX_PDNSCR)
#define GPC_PGC_MIX_SR_REG(base)                 ((base)->MIX_SR)
#define GPC_PGC_MIX_AUXSW_REG(base)              ((base)->MIX_AUXSW)
#define GPC_PGC_PU0_CTRL_REG(base)               ((base)->PU0_CTRL)
#define GPC_PGC_PU0_PUPSCR_REG(base)             ((base)->PU0_PUPSCR)
#define GPC_PGC_PU0_PDNSCR_REG(base)             ((base)->PU0_PDNSCR)
#define GPC_PGC_PU0_SR_REG(base)                 ((base)->PU0_SR)
#define GPC_PGC_PU0_AUXSW_REG(base)              ((base)->PU0_AUXSW)
#define GPC_PGC_PU1_CTRL_REG(base)               ((base)->PU1_CTRL)
#define GPC_PGC_PU1_PUPSCR_REG(base)             ((base)->PU1_PUPSCR)
#define GPC_PGC_PU1_PDNSCR_REG(base)             ((base)->PU1_PDNSCR)
#define GPC_PGC_PU1_SR_REG(base)                 ((base)->PU1_SR)
#define GPC_PGC_PU1_AUXSW_REG(base)              ((base)->PU1_AUXSW)
#define GPC_PGC_PU2_CTRL_REG(base)               ((base)->PU2_CTRL)
#define GPC_PGC_PU2_PUPSCR_REG(base)             ((base)->PU2_PUPSCR)
#define GPC_PGC_PU2_PDNSCR_REG(base)             ((base)->PU2_PDNSCR)
#define GPC_PGC_PU2_SR_REG(base)                 ((base)->PU2_SR)
#define GPC_PGC_PU2_AUXSW_REG(base)              ((base)->PU2_AUXSW)
#define GPC_PGC_PU3_CTRL_REG(base)               ((base)->PU3_CTRL)
#define GPC_PGC_PU3_PUPSCR_REG(base)             ((base)->PU3_PUPSCR)
#define GPC_PGC_PU3_PDNSCR_REG(base)             ((base)->PU3_PDNSCR)
#define GPC_PGC_PU3_SR_REG(base)                 ((base)->PU3_SR)
#define GPC_PGC_PU3_AUXSW_REG(base)              ((base)->PU3_AUXSW)
#define GPC_PGC_PU4_CTRL_REG(base)               ((base)->PU4_CTRL)
#define GPC_PGC_PU4_PUPSCR_REG(base)             ((base)->PU4_PUPSCR)
#define GPC_PGC_PU4_PDNSCR_REG(base)             ((base)->PU4_PDNSCR)
#define GPC_PGC_PU4_SR_REG(base)                 ((base)->PU4_SR)
#define GPC_PGC_PU4_AUXSW_REG(base)              ((base)->PU4_AUXSW)
#define GPC_PGC_PU5_CTRL_REG(base)               ((base)->PU5_CTRL)
#define GPC_PGC_PU5_PUPSCR_REG(base)             ((base)->PU5_PUPSCR)
#define GPC_PGC_PU5_PDNSCR_REG(base)             ((base)->PU5_PDNSCR)
#define GPC_PGC_PU5_SR_REG(base)                 ((base)->PU5_SR)
#define GPC_PGC_PU5_AUXSW_REG(base)              ((base)->PU5_AUXSW)
#define GPC_PGC_PU6_CTRL_REG(base)               ((base)->PU6_CTRL)
#define GPC_PGC_PU6_PUPSCR_REG(base)             ((base)->PU6_PUPSCR)
#define GPC_PGC_PU6_PDNSCR_REG(base)             ((base)->PU6_PDNSCR)
#define GPC_PGC_PU6_SR_REG(base)                 ((base)->PU6_SR)
#define GPC_PGC_PU6_AUXSW_REG(base)              ((base)->PU6_AUXSW)
#define GPC_PGC_PU7_CTRL_REG(base)               ((base)->PU7_CTRL)
#define GPC_PGC_PU7_PUPSCR_REG(base)             ((base)->PU7_PUPSCR)
#define GPC_PGC_PU7_PDNSCR_REG(base)             ((base)->PU7_PDNSCR)
#define GPC_PGC_PU7_SR_REG(base)                 ((base)->PU7_SR)
#define GPC_PGC_PU7_AUXSW_REG(base)              ((base)->PU7_AUXSW)
#define GPC_PGC_PU8_CTRL_REG(base)               ((base)->PU8_CTRL)
#define GPC_PGC_PU8_PUPSCR_REG(base)             ((base)->PU8_PUPSCR)
#define GPC_PGC_PU8_PDNSCR_REG(base)             ((base)->PU8_PDNSCR)
#define GPC_PGC_PU8_SR_REG(base)                 ((base)->PU8_SR)
#define GPC_PGC_PU8_AUXSW_REG(base)              ((base)->PU8_AUXSW)
#define GPC_PGC_PU9_CTRL_REG(base)               ((base)->PU9_CTRL)
#define GPC_PGC_PU9_PUPSCR_REG(base)             ((base)->PU9_PUPSCR)
#define GPC_PGC_PU9_PDNSCR_REG(base)             ((base)->PU9_PDNSCR)
#define GPC_PGC_PU9_SR_REG(base)                 ((base)->PU9_SR)
#define GPC_PGC_PU9_AUXSW_REG(base)              ((base)->PU9_AUXSW)
#define GPC_PGC_PU10_CTRL_REG(base)              ((base)->PU10_CTRL)
#define GPC_PGC_PU10_PUPSCR_REG(base)            ((base)->PU10_PUPSCR)
#define GPC_PGC_PU10_PDNSCR_REG(base)            ((base)->PU10_PDNSCR)
#define GPC_PGC_PU10_SR_REG(base)                ((base)->PU10_SR)
#define GPC_PGC_PU10_AUXSW_REG(base)             ((base)->PU10_AUXSW)
#define GPC_PGC_PU11_CTRL_REG(base)              ((base)->PU11_CTRL)
#define GPC_PGC_PU11_PUPSCR_REG(base)            ((base)->PU11_PUPSCR)
#define GPC_PGC_PU11_PDNSCR_REG(base)            ((base)->PU11_PDNSCR)
#define GPC_PGC_PU11_SR_REG(base)                ((base)->PU11_SR)
#define GPC_PGC_PU11_AUXSW_REG(base)             ((base)->PU11_AUXSW)
#define GPC_PGC_PU12_CTRL_REG(base)              ((base)->PU12_CTRL)
#define GPC_PGC_PU12_PUPSCR_REG(base)            ((base)->PU12_PUPSCR)
#define GPC_PGC_PU12_PDNSCR_REG(base)            ((base)->PU12_PDNSCR)
#define GPC_PGC_PU12_SR_REG(base)                ((base)->PU12_SR)
#define GPC_PGC_PU12_AUXSW_REG(base)             ((base)->PU12_AUXSW)
#define GPC_PGC_PU13_CTRL_REG(base)              ((base)->PU13_CTRL)
#define GPC_PGC_PU13_PUPSCR_REG(base)            ((base)->PU13_PUPSCR)
#define GPC_PGC_PU13_PDNSCR_REG(base)            ((base)->PU13_PDNSCR)
#define GPC_PGC_PU13_SR_REG(base)                ((base)->PU13_SR)
#define GPC_PGC_PU13_AUXSW_REG(base)             ((base)->PU13_AUXSW)

/*!
 * @}
 */ /* end of group GPC_PGC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPC_PGC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Masks GPC_PGC Register Masks
 * @{
 */

/*! @name A53CORE0_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_A53CORE0_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE0_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE0_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE0_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE0_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE0_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53CORE0_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE0_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE0_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE0_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE0_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name A53CORE0_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE0_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE0_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE0_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name A53CORE0_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53CORE0_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE0_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE0_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE0_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE0_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE0_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE0_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53CORE0_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53CORE0_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE0_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE0_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2_SHIFT     (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_A53CORE0_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE0_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name A53CORE1_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_A53CORE1_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE1_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE1_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE1_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE1_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE1_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53CORE1_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE1_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE1_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE1_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE1_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name A53CORE1_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE1_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE1_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE1_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name A53CORE1_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53CORE1_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE1_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE1_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE1_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE1_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE1_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE1_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53CORE1_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53CORE1_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE1_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE1_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2_SHIFT     (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_A53CORE1_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE1_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name A53CORE2_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_A53CORE2_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE2_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE2_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE2_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE2_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE2_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53CORE2_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE2_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE2_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE2_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE2_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name A53CORE2_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE2_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE2_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE2_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name A53CORE2_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53CORE2_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE2_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE2_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE2_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE2_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE2_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE2_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53CORE2_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53CORE2_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE2_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE2_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2_SHIFT     (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_A53CORE2_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE2_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name A53CORE3_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_A53CORE3_CTRL_PCR_MASK           (0x1U)
#define GPC_PGC_A53CORE3_CTRL_PCR_SHIFT          (0U)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS_MASK      (0x7EU)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS_SHIFT     (1U)
#define GPC_PGC_A53CORE3_CTRL_L2RSTDIS(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53CORE3_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_MASK   (0x3F00U)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_SHIFT  (8U)
#define GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53CORE3_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53CORE3_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53CORE3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53CORE3_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE3_PUPSCR_SW_MASK          (0x3FU)
#define GPC_PGC_A53CORE3_PUPSCR_SW_SHIFT         (0U)
#define GPC_PGC_A53CORE3_PUPSCR_SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_SW_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_SW_MASK)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO_MASK      (0x7FFF80U)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO_SHIFT     (7U)
#define GPC_PGC_A53CORE3_PUPSCR_SW2ISO(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name A53CORE3_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53CORE3_PDNSCR_ISO_MASK         (0x3FU)
#define GPC_PGC_A53CORE3_PDNSCR_ISO_SHIFT        (0U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_ISO_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW_MASK      (0x3F00U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW_SHIFT     (8U)
#define GPC_PGC_A53CORE3_PDNSCR_ISO2SW(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53CORE3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name A53CORE3_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53CORE3_SR_PSR_MASK             (0x1U)
#define GPC_PGC_A53CORE3_SR_PSR_SHIFT            (0U)
#define GPC_PGC_A53CORE3_SR_L2RETN_FLAG_MASK     (0x2U)
#define GPC_PGC_A53CORE3_SR_L2RETN_FLAG_SHIFT    (1U)
#define GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_MASK     (0x4U)
#define GPC_PGC_A53CORE3_SR_ALLOFF_FLAG_SHIFT    (2U)
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_MASK (0x78U)
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE3_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53CORE3_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53CORE3_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53CORE3_AUXSW_SW2_MASK          (0x3FU)
#define GPC_PGC_A53CORE3_AUXSW_SW2_SHIFT         (0U)
#define GPC_PGC_A53CORE3_AUXSW_SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_SW2_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_SW2_MASK)
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2_MASK      (0x3F00U)
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2_SHIFT     (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_A53CORE3_AUXSW_ISO2SW2(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53CORE3_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name A53SCU_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_CTRL_PCR_MASK             (0x1U)
#define GPC_PGC_A53SCU_CTRL_PCR_SHIFT            (0U)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK        (0x7EU)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT       (1U)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK     (0x3F00U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT    (8U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53SCU_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_PUPSCR_SW_MASK            (0x3FU)
#define GPC_PGC_A53SCU_PUPSCR_SW_SHIFT           (0U)
#define GPC_PGC_A53SCU_PUPSCR_SW(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW_MASK)
#define GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK        (0x7FFF80U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT       (7U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name A53SCU_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_PDNSCR_ISO_MASK           (0x3FU)
#define GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT          (0U)
#define GPC_PGC_A53SCU_PDNSCR_ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK        (0x3F00U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT       (8U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name A53SCU_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53SCU_SR_PSR_MASK               (0x1U)
#define GPC_PGC_A53SCU_SR_PSR_SHIFT              (0U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_MASK       (0x2U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_SHIFT      (1U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_MASK       (0x4U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_SHIFT      (2U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK   (0x78U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT  (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53SCU_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_AUXSW_SW2_MASK            (0x3FU)
#define GPC_PGC_A53SCU_AUXSW_SW2_SHIFT           (0U)
#define GPC_PGC_A53SCU_AUXSW_SW2(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_SW2_SHIFT)) & GPC_PGC_A53SCU_AUXSW_SW2_MASK)
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2_MASK        (0x3F00U)
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2_SHIFT       (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_A53SCU_AUXSW_ISO2SW2(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_A53SCU_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_MASK (0xF0000U)
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53SCU_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name MIX_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_MIX_CTRL_MIX_PCR_MASK            (0x1U)
#define GPC_PGC_MIX_CTRL_MIX_PCR_SHIFT           (0U)
#define GPC_PGC_MIX_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_MIX_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_MIX_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_MIX_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_MIX_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_MIX_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_MIX_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_MIX_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_MIX_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_MIX_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_MIX_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_MIX_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name MIX_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_MIX_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_MIX_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_MIX_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PUPSCR_SW_SHIFT)) & GPC_PGC_MIX_PUPSCR_SW_MASK)
#define GPC_PGC_MIX_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_MIX_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_MIX_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_MIX_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_MIX_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_MIX_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_MIX_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_MIX_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_MIX_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_MIX_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name MIX_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_MIX_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_MIX_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_MIX_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PDNSCR_ISO_SHIFT)) & GPC_PGC_MIX_PDNSCR_ISO_MASK)
#define GPC_PGC_MIX_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_MIX_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_MIX_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_MIX_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_MIX_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_MIX_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_MIX_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_MIX_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_MIX_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_MIX_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_MIX_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_MIX_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_MIX_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_MIX_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name MIX_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_MIX_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_MIX_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_MIX_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_MIX_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_MIX_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_MIX_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_MIX_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_MIX_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_MIX_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_MIX_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_MIX_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_MIX_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_MIX_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_MIX_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name MIX_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_MIX_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_MIX_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_MIX_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_AUXSW_SW2_SHIFT)) & GPC_PGC_MIX_AUXSW_SW2_MASK)
#define GPC_PGC_MIX_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_MIX_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_MIX_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_MIX_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_MIX_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_MIX_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_MIX_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_MIX_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_MIX_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU0_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU0_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU0_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU0_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU0_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU0_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU0_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU0_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU0_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU0_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU0_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU0_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU0_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU0_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU0_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_SW_SHIFT)) & GPC_PGC_PU0_PUPSCR_SW_MASK)
#define GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU0_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU0_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU0_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU0_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU0_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU0_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU0_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU0_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU0_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU0_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU0_PDNSCR_ISO_MASK)
#define GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU0_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU0_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU0_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU0_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU0_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU0_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU0_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU0_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU0_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU0_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU0_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU0_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU0_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU0_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU0_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU0_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU0_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU0_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU0_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU0_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_SW2_SHIFT)) & GPC_PGC_PU0_AUXSW_SW2_MASK)
#define GPC_PGC_PU0_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU0_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU0_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU0_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU0_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU1_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU1_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU1_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU1_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU1_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU1_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU1_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU1_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU1_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU1_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU1_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU1_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU1_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU1_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU1_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_SW_SHIFT)) & GPC_PGC_PU1_PUPSCR_SW_MASK)
#define GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU1_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU1_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU1_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU1_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU1_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU1_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU1_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU1_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU1_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU1_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU1_PDNSCR_ISO_MASK)
#define GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU1_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU1_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU1_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU1_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU1_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU1_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU1_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU1_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU1_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU1_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU1_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU1_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU1_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU1_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU1_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU1_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU1_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU1_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU1_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU1_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_SW2_SHIFT)) & GPC_PGC_PU1_AUXSW_SW2_MASK)
#define GPC_PGC_PU1_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU1_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU1_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU1_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU1_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU2_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU2_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU2_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU2_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU2_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU2_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU2_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU2_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU2_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU2_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU2_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU2_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU2_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU2_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU2_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_SW_SHIFT)) & GPC_PGC_PU2_PUPSCR_SW_MASK)
#define GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU2_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU2_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU2_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU2_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU2_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU2_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU2_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU2_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU2_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU2_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU2_PDNSCR_ISO_MASK)
#define GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU2_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU2_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU2_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU2_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU2_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU2_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU2_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU2_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU2_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU2_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU2_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU2_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU2_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU2_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU2_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU2_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU2_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU2_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU2_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU2_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_SW2_SHIFT)) & GPC_PGC_PU2_AUXSW_SW2_MASK)
#define GPC_PGC_PU2_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU2_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU2_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU2_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU2_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU3_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU3_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU3_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU3_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU3_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU3_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU3_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU3_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU3_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU3_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU3_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU3_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU3_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU3_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU3_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_SW_SHIFT)) & GPC_PGC_PU3_PUPSCR_SW_MASK)
#define GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU3_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU3_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU3_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU3_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU3_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU3_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU3_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU3_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU3_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU3_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU3_PDNSCR_ISO_MASK)
#define GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU3_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU3_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU3_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU3_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU3_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU3_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU3_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU3_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU3_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU3_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU3_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU3_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU3_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU3_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU3_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU3_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU3_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU3_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU3_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU3_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_SW2_SHIFT)) & GPC_PGC_PU3_AUXSW_SW2_MASK)
#define GPC_PGC_PU3_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU3_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU3_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU3_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU3_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU4_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU4_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU4_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU4_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU4_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU4_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU4_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU4_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU4_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU4_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU4_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU4_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU4_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU4_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU4_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_SW_SHIFT)) & GPC_PGC_PU4_PUPSCR_SW_MASK)
#define GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU4_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU4_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU4_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU4_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU4_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU4_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU4_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU4_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU4_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU4_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU4_PDNSCR_ISO_MASK)
#define GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU4_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU4_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU4_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU4_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU4_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU4_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU4_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU4_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU4_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU4_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU4_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU4_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU4_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU4_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU4_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU4_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU4_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU4_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU4_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU4_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_SW2_SHIFT)) & GPC_PGC_PU4_AUXSW_SW2_MASK)
#define GPC_PGC_PU4_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU4_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU4_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU4_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU4_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU5_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU5_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU5_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU5_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU5_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU5_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU5_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU5_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU5_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU5_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU5_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU5_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU5_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU5_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU5_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_SW_SHIFT)) & GPC_PGC_PU5_PUPSCR_SW_MASK)
#define GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU5_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU5_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU5_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU5_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU5_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU5_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU5_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU5_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU5_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU5_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU5_PDNSCR_ISO_MASK)
#define GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU5_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU5_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU5_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU5_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU5_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU5_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU5_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU5_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU5_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU5_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU5_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU5_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU5_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU5_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU5_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU5_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU5_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU5_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU5_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU5_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_SW2_SHIFT)) & GPC_PGC_PU5_AUXSW_SW2_MASK)
#define GPC_PGC_PU5_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU5_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU5_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU5_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU5_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU6_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU6_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU6_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU6_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU6_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU6_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU6_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU6_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU6_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU6_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU6_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU6_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU6_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU6_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU6_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_SW_SHIFT)) & GPC_PGC_PU6_PUPSCR_SW_MASK)
#define GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU6_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU6_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU6_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU6_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU6_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU6_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU6_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU6_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU6_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU6_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU6_PDNSCR_ISO_MASK)
#define GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU6_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU6_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU6_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU6_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU6_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU6_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU6_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU6_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU6_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU6_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU6_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU6_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU6_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU6_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU6_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU6_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU6_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU6_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU6_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU6_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_SW2_SHIFT)) & GPC_PGC_PU6_AUXSW_SW2_MASK)
#define GPC_PGC_PU6_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU6_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU6_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU6_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU6_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU7_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU7_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU7_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU7_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU7_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU7_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU7_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU7_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU7_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU7_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU7_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU7_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU7_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU7_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU7_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_SW_SHIFT)) & GPC_PGC_PU7_PUPSCR_SW_MASK)
#define GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU7_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU7_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU7_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU7_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU7_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU7_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU7_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU7_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU7_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU7_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU7_PDNSCR_ISO_MASK)
#define GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU7_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU7_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU7_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU7_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU7_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU7_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU7_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU7_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU7_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU7_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU7_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU7_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU7_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU7_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU7_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU7_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU7_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU7_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU7_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU7_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_SW2_SHIFT)) & GPC_PGC_PU7_AUXSW_SW2_MASK)
#define GPC_PGC_PU7_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU7_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU7_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU7_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU7_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU8_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU8_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU8_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU8_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU8_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU8_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU8_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU8_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU8_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU8_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU8_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU8_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU8_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU8_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU8_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_SW_SHIFT)) & GPC_PGC_PU8_PUPSCR_SW_MASK)
#define GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU8_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU8_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU8_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU8_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU8_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU8_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU8_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU8_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU8_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU8_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU8_PDNSCR_ISO_MASK)
#define GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU8_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU8_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU8_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU8_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU8_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU8_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU8_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU8_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU8_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU8_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU8_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU8_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU8_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU8_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU8_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU8_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU8_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU8_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU8_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU8_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_SW2_SHIFT)) & GPC_PGC_PU8_AUXSW_SW2_MASK)
#define GPC_PGC_PU8_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU8_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU8_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU8_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU8_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU9_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU9_CTRL_PCR_MASK                (0x1U)
#define GPC_PGC_PU9_CTRL_PCR_SHIFT               (0U)
#define GPC_PGC_PU9_CTRL_L2RSTDIS_MASK           (0x7EU)
#define GPC_PGC_PU9_CTRL_L2RSTDIS_SHIFT          (1U)
#define GPC_PGC_PU9_CTRL_L2RSTDIS(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU9_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1_MASK        (0x3F00U)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1_SHIFT       (8U)
#define GPC_PGC_PU9_CTRL_DFTRAM_TCD1(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU9_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_MASK    (0x3F0000U)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_SHIFT   (16U)
#define GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU9_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU9_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU9_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU9_PUPSCR_SW_MASK               (0x3FU)
#define GPC_PGC_PU9_PUPSCR_SW_SHIFT              (0U)
#define GPC_PGC_PU9_PUPSCR_SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_SW_SHIFT)) & GPC_PGC_PU9_PUPSCR_SW_MASK)
#define GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU9_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU9_PUPSCR_SW2ISO_MASK           (0x7FFF80U)
#define GPC_PGC_PU9_PUPSCR_SW2ISO_SHIFT          (7U)
#define GPC_PGC_PU9_PUPSCR_SW2ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU9_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU9_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU9_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU9_PDNSCR_ISO_MASK              (0x3FU)
#define GPC_PGC_PU9_PDNSCR_ISO_SHIFT             (0U)
#define GPC_PGC_PU9_PDNSCR_ISO(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU9_PDNSCR_ISO_MASK)
#define GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU9_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU9_PDNSCR_ISO2SW_MASK           (0x3F00U)
#define GPC_PGC_PU9_PDNSCR_ISO2SW_SHIFT          (8U)
#define GPC_PGC_PU9_PDNSCR_ISO2SW(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU9_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU9_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU9_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU9_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU9_SR_PSR_MASK                  (0x1U)
#define GPC_PGC_PU9_SR_PSR_SHIFT                 (0U)
#define GPC_PGC_PU9_SR_L2RETN_FLAG_MASK          (0x2U)
#define GPC_PGC_PU9_SR_L2RETN_FLAG_SHIFT         (1U)
#define GPC_PGC_PU9_SR_ALLOFF_FLAG_MASK          (0x4U)
#define GPC_PGC_PU9_SR_ALLOFF_FLAG_SHIFT         (2U)
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_MASK      (0x78U)
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_SHIFT     (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU9_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU9_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU9_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU9_AUXSW_SW2_MASK               (0x3FU)
#define GPC_PGC_PU9_AUXSW_SW2_SHIFT              (0U)
#define GPC_PGC_PU9_AUXSW_SW2(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_SW2_SHIFT)) & GPC_PGC_PU9_AUXSW_SW2_MASK)
#define GPC_PGC_PU9_AUXSW_ISO2SW2_MASK           (0x3F00U)
#define GPC_PGC_PU9_AUXSW_ISO2SW2_SHIFT          (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU9_AUXSW_ISO2SW2(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU9_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_MASK   (0xF0000U)
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_SHIFT  (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU9_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU10_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU10_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU10_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU10_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU10_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU10_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU10_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU10_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU10_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU10_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU10_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU10_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU10_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU10_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU10_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_SW_SHIFT)) & GPC_PGC_PU10_PUPSCR_SW_MASK)
#define GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU10_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU10_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU10_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU10_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU10_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU10_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU10_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU10_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU10_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU10_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU10_PDNSCR_ISO_MASK)
#define GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU10_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU10_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU10_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU10_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU10_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU10_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU10_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU10_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU10_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU10_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU10_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU10_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU10_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU10_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU10_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU10_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU10_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU10_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU10_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU10_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_SW2_SHIFT)) & GPC_PGC_PU10_AUXSW_SW2_MASK)
#define GPC_PGC_PU10_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU10_AUXSW_ISO2SW2_SHIFT         (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU10_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU10_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU10_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU11_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU11_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU11_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU11_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU11_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU11_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU11_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU11_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU11_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU11_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU11_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU11_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU11_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU11_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU11_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_SW_SHIFT)) & GPC_PGC_PU11_PUPSCR_SW_MASK)
#define GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU11_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU11_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU11_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU11_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU11_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU11_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU11_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU11_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU11_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU11_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU11_PDNSCR_ISO_MASK)
#define GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU11_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU11_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU11_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU11_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU11_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU11_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU11_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU11_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU11_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU11_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU11_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU11_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU11_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU11_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU11_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU11_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU11_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU11_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU11_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU11_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_SW2_SHIFT)) & GPC_PGC_PU11_AUXSW_SW2_MASK)
#define GPC_PGC_PU11_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU11_AUXSW_ISO2SW2_SHIFT         (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU11_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU11_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU11_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU12_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU12_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU12_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU12_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU12_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU12_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU12_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU12_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU12_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU12_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU12_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU12_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU12_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU12_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU12_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_SW_SHIFT)) & GPC_PGC_PU12_PUPSCR_SW_MASK)
#define GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU12_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU12_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU12_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU12_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU12_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU12_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU12_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU12_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU12_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU12_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU12_PDNSCR_ISO_MASK)
#define GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU12_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU12_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU12_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU12_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU12_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU12_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU12_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU12_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU12_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU12_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU12_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU12_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU12_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU12_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU12_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU12_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU12_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU12_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU12_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU12_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_SW2_SHIFT)) & GPC_PGC_PU12_AUXSW_SW2_MASK)
#define GPC_PGC_PU12_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU12_AUXSW_ISO2SW2_SHIFT         (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU12_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU12_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU12_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */

/*! @name PU13_CTRL - GPC PGC Control Register */
/*! @{ */
#define GPC_PGC_PU13_CTRL_PCR_MASK               (0x1U)
#define GPC_PGC_PU13_CTRL_PCR_SHIFT              (0U)
#define GPC_PGC_PU13_CTRL_L2RSTDIS_MASK          (0x7EU)
#define GPC_PGC_PU13_CTRL_L2RSTDIS_SHIFT         (1U)
#define GPC_PGC_PU13_CTRL_L2RSTDIS(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU13_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1_MASK       (0x3F00U)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1_SHIFT      (8U)
#define GPC_PGC_PU13_CTRL_DFTRAM_TCD1(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU13_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_MASK   (0x3F0000U)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_SHIFT  (16U)
#define GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU13_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU13_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name PU13_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU13_PUPSCR_SW_MASK              (0x3FU)
#define GPC_PGC_PU13_PUPSCR_SW_SHIFT             (0U)
#define GPC_PGC_PU13_PUPSCR_SW(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_SW_SHIFT)) & GPC_PGC_PU13_PUPSCR_SW_MASK)
#define GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_PU13_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_PU13_PUPSCR_SW2ISO_MASK          (0x7FFF80U)
#define GPC_PGC_PU13_PUPSCR_SW2ISO_SHIFT         (7U)
#define GPC_PGC_PU13_PUPSCR_SW2ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU13_PUPSCR_SW2ISO_MASK)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK (0xFF800000U)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT (23U)
#define GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU13_PUPSCR_PUP_SCALL_SCALLOUT_CNT_MASK)
/*! @} */

/*! @name PU13_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU13_PDNSCR_ISO_MASK             (0x3FU)
#define GPC_PGC_PU13_PDNSCR_ISO_SHIFT            (0U)
#define GPC_PGC_PU13_PDNSCR_ISO(x)               (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU13_PDNSCR_ISO_MASK)
#define GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_MASK (0x80U)
#define GPC_PGC_PU13_PDNSCR_PDN_WAIT_SCALL_OUT_SHIFT (7U)
#define GPC_PGC_PU13_PDNSCR_ISO2SW_MASK          (0x3F00U)
#define GPC_PGC_PU13_PDNSCR_ISO2SW_SHIFT         (8U)
#define GPC_PGC_PU13_PDNSCR_ISO2SW(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU13_PDNSCR_ISO2SW_MASK)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK (0xFF0000U)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT (16U)
#define GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_SHIFT)) & GPC_PGC_PU13_PDNSCR_PDN_SCALL_SCALLOUT_CNT_MASK)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK (0xFF000000U)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT (24U)
#define GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_SHIFT)) & GPC_PGC_PU13_PDNSCR_PUP_SCPRE_SCALL_CNT_MASK)
/*! @} */

/*! @name PU13_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU13_SR_PSR_MASK                 (0x1U)
#define GPC_PGC_PU13_SR_PSR_SHIFT                (0U)
#define GPC_PGC_PU13_SR_L2RETN_FLAG_MASK         (0x2U)
#define GPC_PGC_PU13_SR_L2RETN_FLAG_SHIFT        (1U)
#define GPC_PGC_PU13_SR_ALLOFF_FLAG_MASK         (0x4U)
#define GPC_PGC_PU13_SR_ALLOFF_FLAG_SHIFT        (2U)
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_MASK     (0x78U)
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_SHIFT    (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU13_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU13_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU13_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_PU13_AUXSW_SW2_MASK              (0x3FU)
#define GPC_PGC_PU13_AUXSW_SW2_SHIFT             (0U)
#define GPC_PGC_PU13_AUXSW_SW2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_SW2_SHIFT)) & GPC_PGC_PU13_AUXSW_SW2_MASK)
#define GPC_PGC_PU13_AUXSW_ISO2SW2_MASK          (0x3F00U)
#define GPC_PGC_PU13_AUXSW_ISO2SW2_SHIFT         (8U)
/*! ISO2SW2
 *  0b000000..A53 is not wakeup from ALL_OFF mode.
 *  0b000001..A53 is wakeup from ALL_OFF mode.
 */
#define GPC_PGC_PU13_AUXSW_ISO2SW2(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_ISO2SW2_SHIFT)) & GPC_PGC_PU13_AUXSW_ISO2SW2_MASK)
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_MASK  (0xF0000U)
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_SHIFT (16U)
/*! PDN_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU13_AUXSW_PDN_CLK_DIV_SEL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPC_PGC_Register_Masks */


/* GPC_PGC - Peripheral instance base addresses */
/** Peripheral GPC_PGC base pointer */
#define GPC_PGC_BASE_PTR                         ((GPC_PGC_MemMapPtr)0x303A0800u)
/** Array initializer of GPC_PGC peripheral base pointers */
#define GPC_PGC_BASE_PTRS                        { GPC_PGC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPC_PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Accessor_Macros GPC_PGC - Register accessor macros
 * @{
 */


/* GPC_PGC - Register instance definitions */
/* GPC_PGC */
#define GPC_PGC_A53CORE0_CTRL                    GPC_PGC_A53CORE0_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE0_PUPSCR                  GPC_PGC_A53CORE0_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE0_PDNSCR                  GPC_PGC_A53CORE0_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE0_SR                      GPC_PGC_A53CORE0_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE0_AUXSW                   GPC_PGC_A53CORE0_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE1_CTRL                    GPC_PGC_A53CORE1_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE1_PUPSCR                  GPC_PGC_A53CORE1_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE1_PDNSCR                  GPC_PGC_A53CORE1_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE1_SR                      GPC_PGC_A53CORE1_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE1_AUXSW                   GPC_PGC_A53CORE1_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE2_CTRL                    GPC_PGC_A53CORE2_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE2_PUPSCR                  GPC_PGC_A53CORE2_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE2_PDNSCR                  GPC_PGC_A53CORE2_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE2_SR                      GPC_PGC_A53CORE2_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE2_AUXSW                   GPC_PGC_A53CORE2_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE3_CTRL                    GPC_PGC_A53CORE3_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE3_PUPSCR                  GPC_PGC_A53CORE3_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE3_PDNSCR                  GPC_PGC_A53CORE3_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE3_SR                      GPC_PGC_A53CORE3_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53CORE3_AUXSW                   GPC_PGC_A53CORE3_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_CTRL                      GPC_PGC_A53SCU_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_PUPSCR                    GPC_PGC_A53SCU_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_PDNSCR                    GPC_PGC_A53SCU_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_SR                        GPC_PGC_A53SCU_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_AUXSW                     GPC_PGC_A53SCU_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_MIX_CTRL                         GPC_PGC_MIX_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_MIX_PUPSCR                       GPC_PGC_MIX_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_MIX_PDNSCR                       GPC_PGC_MIX_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_MIX_SR                           GPC_PGC_MIX_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_MIX_AUXSW                        GPC_PGC_MIX_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_CTRL                         GPC_PGC_PU0_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_PUPSCR                       GPC_PGC_PU0_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_PDNSCR                       GPC_PGC_PU0_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_SR                           GPC_PGC_PU0_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_AUXSW                        GPC_PGC_PU0_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU1_CTRL                         GPC_PGC_PU1_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU1_PUPSCR                       GPC_PGC_PU1_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU1_PDNSCR                       GPC_PGC_PU1_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU1_SR                           GPC_PGC_PU1_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU1_AUXSW                        GPC_PGC_PU1_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU2_CTRL                         GPC_PGC_PU2_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU2_PUPSCR                       GPC_PGC_PU2_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU2_PDNSCR                       GPC_PGC_PU2_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU2_SR                           GPC_PGC_PU2_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU2_AUXSW                        GPC_PGC_PU2_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU3_CTRL                         GPC_PGC_PU3_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU3_PUPSCR                       GPC_PGC_PU3_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU3_PDNSCR                       GPC_PGC_PU3_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU3_SR                           GPC_PGC_PU3_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU3_AUXSW                        GPC_PGC_PU3_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU4_CTRL                         GPC_PGC_PU4_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU4_PUPSCR                       GPC_PGC_PU4_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU4_PDNSCR                       GPC_PGC_PU4_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU4_SR                           GPC_PGC_PU4_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU4_AUXSW                        GPC_PGC_PU4_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU5_CTRL                         GPC_PGC_PU5_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU5_PUPSCR                       GPC_PGC_PU5_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU5_PDNSCR                       GPC_PGC_PU5_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU5_SR                           GPC_PGC_PU5_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU5_AUXSW                        GPC_PGC_PU5_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU6_CTRL                         GPC_PGC_PU6_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU6_PUPSCR                       GPC_PGC_PU6_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU6_PDNSCR                       GPC_PGC_PU6_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU6_SR                           GPC_PGC_PU6_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU6_AUXSW                        GPC_PGC_PU6_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU7_CTRL                         GPC_PGC_PU7_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU7_PUPSCR                       GPC_PGC_PU7_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU7_PDNSCR                       GPC_PGC_PU7_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU7_SR                           GPC_PGC_PU7_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU7_AUXSW                        GPC_PGC_PU7_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU8_CTRL                         GPC_PGC_PU8_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU8_PUPSCR                       GPC_PGC_PU8_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU8_PDNSCR                       GPC_PGC_PU8_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU8_SR                           GPC_PGC_PU8_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU8_AUXSW                        GPC_PGC_PU8_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU9_CTRL                         GPC_PGC_PU9_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU9_PUPSCR                       GPC_PGC_PU9_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU9_PDNSCR                       GPC_PGC_PU9_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU9_SR                           GPC_PGC_PU9_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU9_AUXSW                        GPC_PGC_PU9_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU10_CTRL                        GPC_PGC_PU10_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU10_PUPSCR                      GPC_PGC_PU10_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU10_PDNSCR                      GPC_PGC_PU10_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU10_SR                          GPC_PGC_PU10_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU10_AUXSW                       GPC_PGC_PU10_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU11_CTRL                        GPC_PGC_PU11_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU11_PUPSCR                      GPC_PGC_PU11_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU11_PDNSCR                      GPC_PGC_PU11_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU11_SR                          GPC_PGC_PU11_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU11_AUXSW                       GPC_PGC_PU11_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU12_CTRL                        GPC_PGC_PU12_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU12_PUPSCR                      GPC_PGC_PU12_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU12_PDNSCR                      GPC_PGC_PU12_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU12_SR                          GPC_PGC_PU12_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU12_AUXSW                       GPC_PGC_PU12_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU13_CTRL                        GPC_PGC_PU13_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU13_PUPSCR                      GPC_PGC_PU13_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU13_PDNSCR                      GPC_PGC_PU13_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU13_SR                          GPC_PGC_PU13_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU13_AUXSW                       GPC_PGC_PU13_AUXSW_REG(GPC_PGC_BASE_PTR)

/*!
 * @}
 */ /* end of group GPC_PGC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPC_PGC_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral GPIO
 * @{
 */

/** GPIO - Peripheral register structure */
typedef struct GPIO_MemMap {
  uint32_t DR;                                     /**< GPIO data register, offset: 0x0 */
  uint32_t GDIR;                                   /**< GPIO direction register, offset: 0x4 */
  uint32_t PSR;                                    /**< GPIO pad status register, offset: 0x8 */
  uint32_t ICR1;                                   /**< GPIO interrupt configuration register1, offset: 0xC */
  uint32_t ICR2;                                   /**< GPIO interrupt configuration register2, offset: 0x10 */
  uint32_t IMR;                                    /**< GPIO interrupt mask register, offset: 0x14 */
  uint32_t ISR;                                    /**< GPIO interrupt status register, offset: 0x18 */
  uint32_t EDGE_SEL;                               /**< GPIO edge select register, offset: 0x1C */
} volatile *GPIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define GPIO_DR_REG(base)                        ((base)->DR)
#define GPIO_GDIR_REG(base)                      ((base)->GDIR)
#define GPIO_PSR_REG(base)                       ((base)->PSR)
#define GPIO_ICR1_REG(base)                      ((base)->ICR1)
#define GPIO_ICR2_REG(base)                      ((base)->ICR2)
#define GPIO_IMR_REG(base)                       ((base)->IMR)
#define GPIO_ISR_REG(base)                       ((base)->ISR)
#define GPIO_EDGE_SEL_REG(base)                  ((base)->EDGE_SEL)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name DR - GPIO data register */
/*! @{ */
#define GPIO_DR_DR_MASK                          (0xFFFFFFFFU)
#define GPIO_DR_DR_SHIFT                         (0U)
#define GPIO_DR_DR(x)                            (((uint32_t)(((uint32_t)(x)) << GPIO_DR_DR_SHIFT)) & GPIO_DR_DR_MASK)
/*! @} */

/*! @name GDIR - GPIO direction register */
/*! @{ */
#define GPIO_GDIR_GDIR_MASK                      (0xFFFFFFFFU)
#define GPIO_GDIR_GDIR_SHIFT                     (0U)
/*! GDIR
 *  0b00000000000000000000000000000000..GPIO is configured as input.
 *  0b00000000000000000000000000000001..GPIO is configured as output.
 */
#define GPIO_GDIR_GDIR(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_GDIR_GDIR_SHIFT)) & GPIO_GDIR_GDIR_MASK)
/*! @} */

/*! @name PSR - GPIO pad status register */
/*! @{ */
#define GPIO_PSR_PSR_MASK                        (0xFFFFFFFFU)
#define GPIO_PSR_PSR_SHIFT                       (0U)
#define GPIO_PSR_PSR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_PSR_PSR_SHIFT)) & GPIO_PSR_PSR_MASK)
/*! @} */

/*! @name ICR1 - GPIO interrupt configuration register1 */
/*! @{ */
#define GPIO_ICR1_ICR0_MASK                      (0x3U)
#define GPIO_ICR1_ICR0_SHIFT                     (0U)
/*! ICR0
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR0(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR0_SHIFT)) & GPIO_ICR1_ICR0_MASK)
#define GPIO_ICR1_ICR1_MASK                      (0xCU)
#define GPIO_ICR1_ICR1_SHIFT                     (2U)
/*! ICR1
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR1(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR1_SHIFT)) & GPIO_ICR1_ICR1_MASK)
#define GPIO_ICR1_ICR2_MASK                      (0x30U)
#define GPIO_ICR1_ICR2_SHIFT                     (4U)
/*! ICR2
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR2(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR2_SHIFT)) & GPIO_ICR1_ICR2_MASK)
#define GPIO_ICR1_ICR3_MASK                      (0xC0U)
#define GPIO_ICR1_ICR3_SHIFT                     (6U)
/*! ICR3
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR3(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR3_SHIFT)) & GPIO_ICR1_ICR3_MASK)
#define GPIO_ICR1_ICR4_MASK                      (0x300U)
#define GPIO_ICR1_ICR4_SHIFT                     (8U)
/*! ICR4
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR4(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR4_SHIFT)) & GPIO_ICR1_ICR4_MASK)
#define GPIO_ICR1_ICR5_MASK                      (0xC00U)
#define GPIO_ICR1_ICR5_SHIFT                     (10U)
/*! ICR5
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR5(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR5_SHIFT)) & GPIO_ICR1_ICR5_MASK)
#define GPIO_ICR1_ICR6_MASK                      (0x3000U)
#define GPIO_ICR1_ICR6_SHIFT                     (12U)
/*! ICR6
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR6(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR6_SHIFT)) & GPIO_ICR1_ICR6_MASK)
#define GPIO_ICR1_ICR7_MASK                      (0xC000U)
#define GPIO_ICR1_ICR7_SHIFT                     (14U)
/*! ICR7
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR7(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR7_SHIFT)) & GPIO_ICR1_ICR7_MASK)
#define GPIO_ICR1_ICR8_MASK                      (0x30000U)
#define GPIO_ICR1_ICR8_SHIFT                     (16U)
/*! ICR8
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR8(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR8_SHIFT)) & GPIO_ICR1_ICR8_MASK)
#define GPIO_ICR1_ICR9_MASK                      (0xC0000U)
#define GPIO_ICR1_ICR9_SHIFT                     (18U)
/*! ICR9
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR9(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR9_SHIFT)) & GPIO_ICR1_ICR9_MASK)
#define GPIO_ICR1_ICR10_MASK                     (0x300000U)
#define GPIO_ICR1_ICR10_SHIFT                    (20U)
/*! ICR10
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR10(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR10_SHIFT)) & GPIO_ICR1_ICR10_MASK)
#define GPIO_ICR1_ICR11_MASK                     (0xC00000U)
#define GPIO_ICR1_ICR11_SHIFT                    (22U)
/*! ICR11
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR11(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR11_SHIFT)) & GPIO_ICR1_ICR11_MASK)
#define GPIO_ICR1_ICR12_MASK                     (0x3000000U)
#define GPIO_ICR1_ICR12_SHIFT                    (24U)
/*! ICR12
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR12(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR12_SHIFT)) & GPIO_ICR1_ICR12_MASK)
#define GPIO_ICR1_ICR13_MASK                     (0xC000000U)
#define GPIO_ICR1_ICR13_SHIFT                    (26U)
/*! ICR13
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR13(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR13_SHIFT)) & GPIO_ICR1_ICR13_MASK)
#define GPIO_ICR1_ICR14_MASK                     (0x30000000U)
#define GPIO_ICR1_ICR14_SHIFT                    (28U)
/*! ICR14
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR14(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR14_SHIFT)) & GPIO_ICR1_ICR14_MASK)
#define GPIO_ICR1_ICR15_MASK                     (0xC0000000U)
#define GPIO_ICR1_ICR15_SHIFT                    (30U)
/*! ICR15
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR15(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR15_SHIFT)) & GPIO_ICR1_ICR15_MASK)
/*! @} */

/*! @name ICR2 - GPIO interrupt configuration register2 */
/*! @{ */
#define GPIO_ICR2_ICR16_MASK                     (0x3U)
#define GPIO_ICR2_ICR16_SHIFT                    (0U)
/*! ICR16
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR16(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR16_SHIFT)) & GPIO_ICR2_ICR16_MASK)
#define GPIO_ICR2_ICR17_MASK                     (0xCU)
#define GPIO_ICR2_ICR17_SHIFT                    (2U)
/*! ICR17
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR17(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR17_SHIFT)) & GPIO_ICR2_ICR17_MASK)
#define GPIO_ICR2_ICR18_MASK                     (0x30U)
#define GPIO_ICR2_ICR18_SHIFT                    (4U)
/*! ICR18
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR18(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR18_SHIFT)) & GPIO_ICR2_ICR18_MASK)
#define GPIO_ICR2_ICR19_MASK                     (0xC0U)
#define GPIO_ICR2_ICR19_SHIFT                    (6U)
/*! ICR19
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR19(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR19_SHIFT)) & GPIO_ICR2_ICR19_MASK)
#define GPIO_ICR2_ICR20_MASK                     (0x300U)
#define GPIO_ICR2_ICR20_SHIFT                    (8U)
/*! ICR20
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR20(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR20_SHIFT)) & GPIO_ICR2_ICR20_MASK)
#define GPIO_ICR2_ICR21_MASK                     (0xC00U)
#define GPIO_ICR2_ICR21_SHIFT                    (10U)
/*! ICR21
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR21(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR21_SHIFT)) & GPIO_ICR2_ICR21_MASK)
#define GPIO_ICR2_ICR22_MASK                     (0x3000U)
#define GPIO_ICR2_ICR22_SHIFT                    (12U)
/*! ICR22
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR22(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR22_SHIFT)) & GPIO_ICR2_ICR22_MASK)
#define GPIO_ICR2_ICR23_MASK                     (0xC000U)
#define GPIO_ICR2_ICR23_SHIFT                    (14U)
/*! ICR23
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR23(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR23_SHIFT)) & GPIO_ICR2_ICR23_MASK)
#define GPIO_ICR2_ICR24_MASK                     (0x30000U)
#define GPIO_ICR2_ICR24_SHIFT                    (16U)
/*! ICR24
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR24(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR24_SHIFT)) & GPIO_ICR2_ICR24_MASK)
#define GPIO_ICR2_ICR25_MASK                     (0xC0000U)
#define GPIO_ICR2_ICR25_SHIFT                    (18U)
/*! ICR25
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR25(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR25_SHIFT)) & GPIO_ICR2_ICR25_MASK)
#define GPIO_ICR2_ICR26_MASK                     (0x300000U)
#define GPIO_ICR2_ICR26_SHIFT                    (20U)
/*! ICR26
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR26(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR26_SHIFT)) & GPIO_ICR2_ICR26_MASK)
#define GPIO_ICR2_ICR27_MASK                     (0xC00000U)
#define GPIO_ICR2_ICR27_SHIFT                    (22U)
/*! ICR27
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR27(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR27_SHIFT)) & GPIO_ICR2_ICR27_MASK)
#define GPIO_ICR2_ICR28_MASK                     (0x3000000U)
#define GPIO_ICR2_ICR28_SHIFT                    (24U)
/*! ICR28
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR28(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR28_SHIFT)) & GPIO_ICR2_ICR28_MASK)
#define GPIO_ICR2_ICR29_MASK                     (0xC000000U)
#define GPIO_ICR2_ICR29_SHIFT                    (26U)
/*! ICR29
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR29(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR29_SHIFT)) & GPIO_ICR2_ICR29_MASK)
#define GPIO_ICR2_ICR30_MASK                     (0x30000000U)
#define GPIO_ICR2_ICR30_SHIFT                    (28U)
/*! ICR30
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR30(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR30_SHIFT)) & GPIO_ICR2_ICR30_MASK)
#define GPIO_ICR2_ICR31_MASK                     (0xC0000000U)
#define GPIO_ICR2_ICR31_SHIFT                    (30U)
/*! ICR31
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR31(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR31_SHIFT)) & GPIO_ICR2_ICR31_MASK)
/*! @} */

/*! @name IMR - GPIO interrupt mask register */
/*! @{ */
#define GPIO_IMR_IMR_MASK                        (0xFFFFFFFFU)
#define GPIO_IMR_IMR_SHIFT                       (0U)
/*! IMR
 *  0b00000000000000000000000000000000..Interrupt n is disabled.
 *  0b00000000000000000000000000000001..Interrupt n is enabled.
 */
#define GPIO_IMR_IMR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_IMR_IMR_SHIFT)) & GPIO_IMR_IMR_MASK)
/*! @} */

/*! @name ISR - GPIO interrupt status register */
/*! @{ */
#define GPIO_ISR_ISR_MASK                        (0xFFFFFFFFU)
#define GPIO_ISR_ISR_SHIFT                       (0U)
#define GPIO_ISR_ISR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_ISR_ISR_SHIFT)) & GPIO_ISR_ISR_MASK)
/*! @} */

/*! @name EDGE_SEL - GPIO edge select register */
/*! @{ */
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK         (0xFFFFFFFFU)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT        (0U)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL(x)           (((uint32_t)(((uint32_t)(x)) << GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT)) & GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral GPIO1 base pointer */
#define GPIO1_BASE_PTR                           ((GPIO_MemMapPtr)0x30200000u)
/** Peripheral GPIO2 base pointer */
#define GPIO2_BASE_PTR                           ((GPIO_MemMapPtr)0x30210000u)
/** Peripheral GPIO3 base pointer */
#define GPIO3_BASE_PTR                           ((GPIO_MemMapPtr)0x30220000u)
/** Peripheral GPIO4 base pointer */
#define GPIO4_BASE_PTR                           ((GPIO_MemMapPtr)0x30230000u)
/** Peripheral GPIO5 base pointer */
#define GPIO5_BASE_PTR                           ((GPIO_MemMapPtr)0x30240000u)
/** Array initializer of GPIO peripheral base pointers */
#define GPIO_BASE_PTRS                           { GPIO1_BASE_PTR, GPIO2_BASE_PTR, GPIO3_BASE_PTR, GPIO4_BASE_PTR, GPIO5_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
/* GPIO1 */
#define GPIO1_DR                                 GPIO_DR_REG(GPIO1_BASE_PTR)
#define GPIO1_GDIR                               GPIO_GDIR_REG(GPIO1_BASE_PTR)
#define GPIO1_PSR                                GPIO_PSR_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR1                               GPIO_ICR1_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR2                               GPIO_ICR2_REG(GPIO1_BASE_PTR)
#define GPIO1_IMR                                GPIO_IMR_REG(GPIO1_BASE_PTR)
#define GPIO1_ISR                                GPIO_ISR_REG(GPIO1_BASE_PTR)
#define GPIO1_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO1_BASE_PTR)
/* GPIO2 */
#define GPIO2_DR                                 GPIO_DR_REG(GPIO2_BASE_PTR)
#define GPIO2_GDIR                               GPIO_GDIR_REG(GPIO2_BASE_PTR)
#define GPIO2_PSR                                GPIO_PSR_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR1                               GPIO_ICR1_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR2                               GPIO_ICR2_REG(GPIO2_BASE_PTR)
#define GPIO2_IMR                                GPIO_IMR_REG(GPIO2_BASE_PTR)
#define GPIO2_ISR                                GPIO_ISR_REG(GPIO2_BASE_PTR)
#define GPIO2_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO2_BASE_PTR)
/* GPIO3 */
#define GPIO3_DR                                 GPIO_DR_REG(GPIO3_BASE_PTR)
#define GPIO3_GDIR                               GPIO_GDIR_REG(GPIO3_BASE_PTR)
#define GPIO3_PSR                                GPIO_PSR_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR1                               GPIO_ICR1_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR2                               GPIO_ICR2_REG(GPIO3_BASE_PTR)
#define GPIO3_IMR                                GPIO_IMR_REG(GPIO3_BASE_PTR)
#define GPIO3_ISR                                GPIO_ISR_REG(GPIO3_BASE_PTR)
#define GPIO3_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO3_BASE_PTR)
/* GPIO4 */
#define GPIO4_DR                                 GPIO_DR_REG(GPIO4_BASE_PTR)
#define GPIO4_GDIR                               GPIO_GDIR_REG(GPIO4_BASE_PTR)
#define GPIO4_PSR                                GPIO_PSR_REG(GPIO4_BASE_PTR)
#define GPIO4_ICR1                               GPIO_ICR1_REG(GPIO4_BASE_PTR)
#define GPIO4_ICR2                               GPIO_ICR2_REG(GPIO4_BASE_PTR)
#define GPIO4_IMR                                GPIO_IMR_REG(GPIO4_BASE_PTR)
#define GPIO4_ISR                                GPIO_ISR_REG(GPIO4_BASE_PTR)
#define GPIO4_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO4_BASE_PTR)
/* GPIO5 */
#define GPIO5_DR                                 GPIO_DR_REG(GPIO5_BASE_PTR)
#define GPIO5_GDIR                               GPIO_GDIR_REG(GPIO5_BASE_PTR)
#define GPIO5_PSR                                GPIO_PSR_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR1                               GPIO_ICR1_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR2                               GPIO_ICR2_REG(GPIO5_BASE_PTR)
#define GPIO5_IMR                                GPIO_IMR_REG(GPIO5_BASE_PTR)
#define GPIO5_ISR                                GPIO_ISR_REG(GPIO5_BASE_PTR)
#define GPIO5_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO5_BASE_PTR)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPMI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Peripheral GPMI
 * @{
 */

/** GPMI - Peripheral register structure */
typedef struct GPMI_MemMap {
  uint32_t CTRL0;                                  /**< GPMI Control Register 0 Description, offset: 0x0 */
  uint32_t CTRL0_SET;                              /**< GPMI Control Register 0 Description, offset: 0x4 */
  uint32_t CTRL0_CLR;                              /**< GPMI Control Register 0 Description, offset: 0x8 */
  uint32_t CTRL0_TOG;                              /**< GPMI Control Register 0 Description, offset: 0xC */
  uint32_t COMPARE;                                /**< GPMI Compare Register Description, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t ECCCTRL;                                /**< GPMI Integrated ECC Control Register Description, offset: 0x20 */
  uint32_t ECCCTRL_SET;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x24 */
  uint32_t ECCCTRL_CLR;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x28 */
  uint32_t ECCCTRL_TOG;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x2C */
  uint32_t ECCCOUNT;                               /**< GPMI Integrated ECC Transfer Count Register Description, offset: 0x30 */
  uint8_t RESERVED_1[12];
  uint32_t PAYLOAD;                                /**< GPMI Payload Address Register Description, offset: 0x40 */
  uint8_t RESERVED_2[12];
  uint32_t AUXILIARY;                              /**< GPMI Auxiliary Address Register Description, offset: 0x50 */
  uint8_t RESERVED_3[12];
  uint32_t CTRL1;                                  /**< GPMI Control Register 1 Description, offset: 0x60 */
  uint32_t CTRL1_SET;                              /**< GPMI Control Register 1 Description, offset: 0x64 */
  uint32_t CTRL1_CLR;                              /**< GPMI Control Register 1 Description, offset: 0x68 */
  uint32_t CTRL1_TOG;                              /**< GPMI Control Register 1 Description, offset: 0x6C */
  uint32_t TIMING0;                                /**< GPMI Timing Register 0 Description, offset: 0x70 */
  uint8_t RESERVED_4[12];
  uint32_t TIMING1;                                /**< GPMI Timing Register 1 Description, offset: 0x80 */
  uint8_t RESERVED_5[12];
  uint32_t TIMING2;                                /**< GPMI Timing Register 2 Description, offset: 0x90 */
  uint8_t RESERVED_6[12];
  uint32_t DATA;                                   /**< GPMI DMA Data Transfer Register Description, offset: 0xA0 */
  uint8_t RESERVED_7[12];
  uint32_t STAT;                                   /**< GPMI Status Register Description, offset: 0xB0 */
  uint8_t RESERVED_8[12];
  uint32_t DEBUG;                                  /**< GPMI Debug Information Register Description, offset: 0xC0 */
  uint8_t RESERVED_9[12];
  uint32_t VERSION;                                /**< GPMI Version Register Description, offset: 0xD0 */
  uint8_t RESERVED_10[12];
  uint32_t DEBUG2;                                 /**< GPMI Debug2 Information Register Description, offset: 0xE0 */
  uint8_t RESERVED_11[12];
  uint32_t DEBUG3;                                 /**< GPMI Debug3 Information Register Description, offset: 0xF0 */
  uint8_t RESERVED_12[12];
  uint32_t READ_DDR_DLL_CTRL;                      /**< GPMI Double Rate Read DLL Control Register Description, offset: 0x100 */
  uint8_t RESERVED_13[12];
  uint32_t WRITE_DDR_DLL_CTRL;                     /**< GPMI Double Rate Write DLL Control Register Description, offset: 0x110 */
  uint8_t RESERVED_14[12];
  uint32_t READ_DDR_DLL_STS;                       /**< GPMI Double Rate Read DLL Status Register Description, offset: 0x120 */
  uint8_t RESERVED_15[12];
  uint32_t WRITE_DDR_DLL_STS;                      /**< GPMI Double Rate Write DLL Status Register Description, offset: 0x130 */
} volatile *GPMI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPMI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Accessor_Macros GPMI - Register accessor macros
 * @{
 */


/* GPMI - Register accessors */
#define GPMI_CTRL0_REG(base)                     ((base)->CTRL0)
#define GPMI_CTRL0_SET_REG(base)                 ((base)->CTRL0_SET)
#define GPMI_CTRL0_CLR_REG(base)                 ((base)->CTRL0_CLR)
#define GPMI_CTRL0_TOG_REG(base)                 ((base)->CTRL0_TOG)
#define GPMI_COMPARE_REG(base)                   ((base)->COMPARE)
#define GPMI_ECCCTRL_REG(base)                   ((base)->ECCCTRL)
#define GPMI_ECCCTRL_SET_REG(base)               ((base)->ECCCTRL_SET)
#define GPMI_ECCCTRL_CLR_REG(base)               ((base)->ECCCTRL_CLR)
#define GPMI_ECCCTRL_TOG_REG(base)               ((base)->ECCCTRL_TOG)
#define GPMI_ECCCOUNT_REG(base)                  ((base)->ECCCOUNT)
#define GPMI_PAYLOAD_REG(base)                   ((base)->PAYLOAD)
#define GPMI_AUXILIARY_REG(base)                 ((base)->AUXILIARY)
#define GPMI_CTRL1_REG(base)                     ((base)->CTRL1)
#define GPMI_CTRL1_SET_REG(base)                 ((base)->CTRL1_SET)
#define GPMI_CTRL1_CLR_REG(base)                 ((base)->CTRL1_CLR)
#define GPMI_CTRL1_TOG_REG(base)                 ((base)->CTRL1_TOG)
#define GPMI_TIMING0_REG(base)                   ((base)->TIMING0)
#define GPMI_TIMING1_REG(base)                   ((base)->TIMING1)
#define GPMI_TIMING2_REG(base)                   ((base)->TIMING2)
#define GPMI_DATA_REG(base)                      ((base)->DATA)
#define GPMI_STAT_REG(base)                      ((base)->STAT)
#define GPMI_DEBUG_REG(base)                     ((base)->DEBUG)
#define GPMI_VERSION_REG(base)                   ((base)->VERSION)
#define GPMI_DEBUG2_REG(base)                    ((base)->DEBUG2)
#define GPMI_DEBUG3_REG(base)                    ((base)->DEBUG3)
#define GPMI_READ_DDR_DLL_CTRL_REG(base)         ((base)->READ_DDR_DLL_CTRL)
#define GPMI_WRITE_DDR_DLL_CTRL_REG(base)        ((base)->WRITE_DDR_DLL_CTRL)
#define GPMI_READ_DDR_DLL_STS_REG(base)          ((base)->READ_DDR_DLL_STS)
#define GPMI_WRITE_DDR_DLL_STS_REG(base)         ((base)->WRITE_DDR_DLL_STS)

/*!
 * @}
 */ /* end of group GPMI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPMI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Masks GPMI Register Masks
 * @{
 */

/*! @name CTRL0 - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_XFER_COUNT_MASK               (0xFFFFU)
#define GPMI_CTRL0_XFER_COUNT_SHIFT              (0U)
#define GPMI_CTRL0_XFER_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_XFER_COUNT_SHIFT)) & GPMI_CTRL0_XFER_COUNT_MASK)
#define GPMI_CTRL0_ADDRESS_INCREMENT_MASK        (0x10000U)
#define GPMI_CTRL0_ADDRESS_INCREMENT_SHIFT       (16U)
#define GPMI_CTRL0_ADDRESS_MASK                  (0xE0000U)
#define GPMI_CTRL0_ADDRESS_SHIFT                 (17U)
#define GPMI_CTRL0_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_ADDRESS_SHIFT)) & GPMI_CTRL0_ADDRESS_MASK)
#define GPMI_CTRL0_CS_MASK                       (0x700000U)
#define GPMI_CTRL0_CS_SHIFT                      (20U)
#define GPMI_CTRL0_CS(x)                         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CS_SHIFT)) & GPMI_CTRL0_CS_MASK)
#define GPMI_CTRL0_WORD_LENGTH_MASK              (0x800000U)
#define GPMI_CTRL0_WORD_LENGTH_SHIFT             (23U)
#define GPMI_CTRL0_COMMAND_MODE_MASK             (0x3000000U)
#define GPMI_CTRL0_COMMAND_MODE_SHIFT            (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_COMMAND_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_COMMAND_MODE_MASK)
#define GPMI_CTRL0_UDMA_MASK                     (0x4000000U)
#define GPMI_CTRL0_UDMA_SHIFT                    (26U)
#define GPMI_CTRL0_LOCK_CS_MASK                  (0x8000000U)
#define GPMI_CTRL0_LOCK_CS_SHIFT                 (27U)
#define GPMI_CTRL0_DEV_IRQ_EN_MASK               (0x10000000U)
#define GPMI_CTRL0_DEV_IRQ_EN_SHIFT              (28U)
#define GPMI_CTRL0_RUN_MASK                      (0x20000000U)
#define GPMI_CTRL0_RUN_SHIFT                     (29U)
#define GPMI_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define GPMI_CTRL0_CLKGATE_SHIFT                 (30U)
#define GPMI_CTRL0_SFTRST_MASK                   (0x80000000U)
#define GPMI_CTRL0_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL0_SET - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_SET_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_SET_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_SET_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_XFER_COUNT_SHIFT)) & GPMI_CTRL0_SET_XFER_COUNT_MASK)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_SET_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_SET_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_SET_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_ADDRESS_SHIFT)) & GPMI_CTRL0_SET_ADDRESS_MASK)
#define GPMI_CTRL0_SET_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_SET_CS_SHIFT                  (20U)
#define GPMI_CTRL0_SET_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_CS_SHIFT)) & GPMI_CTRL0_SET_CS_MASK)
#define GPMI_CTRL0_SET_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_SET_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_SET_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_SET_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_SET_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_SET_COMMAND_MODE_MASK)
#define GPMI_CTRL0_SET_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_SET_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_SET_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_SET_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_SET_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_SET_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_CLR - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_CLR_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_CLR_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_CLR_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_XFER_COUNT_SHIFT)) & GPMI_CTRL0_CLR_XFER_COUNT_MASK)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_CLR_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_CLR_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_CLR_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_ADDRESS_SHIFT)) & GPMI_CTRL0_CLR_ADDRESS_MASK)
#define GPMI_CTRL0_CLR_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_CLR_CS_SHIFT                  (20U)
#define GPMI_CTRL0_CLR_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_CS_SHIFT)) & GPMI_CTRL0_CLR_CS_MASK)
#define GPMI_CTRL0_CLR_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_CLR_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_CLR_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_CLR_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_CLR_COMMAND_MODE_MASK)
#define GPMI_CTRL0_CLR_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_CLR_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_CLR_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_CLR_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_CLR_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_CLR_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_TOG - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_TOG_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_TOG_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_TOG_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_XFER_COUNT_SHIFT)) & GPMI_CTRL0_TOG_XFER_COUNT_MASK)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_TOG_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_TOG_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_TOG_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_ADDRESS_SHIFT)) & GPMI_CTRL0_TOG_ADDRESS_MASK)
#define GPMI_CTRL0_TOG_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_TOG_CS_SHIFT                  (20U)
#define GPMI_CTRL0_TOG_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_CS_SHIFT)) & GPMI_CTRL0_TOG_CS_MASK)
#define GPMI_CTRL0_TOG_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_TOG_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_TOG_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_TOG_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_TOG_COMMAND_MODE_MASK)
#define GPMI_CTRL0_TOG_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_TOG_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_TOG_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_TOG_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_TOG_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_TOG_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name COMPARE - GPMI Compare Register Description */
/*! @{ */
#define GPMI_COMPARE_REFERENCE_MASK              (0xFFFFU)
#define GPMI_COMPARE_REFERENCE_SHIFT             (0U)
#define GPMI_COMPARE_REFERENCE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_REFERENCE_SHIFT)) & GPMI_COMPARE_REFERENCE_MASK)
#define GPMI_COMPARE_MASK_MASK                   (0xFFFF0000U)
#define GPMI_COMPARE_MASK_SHIFT                  (16U)
#define GPMI_COMPARE_MASK(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_MASK_SHIFT)) & GPMI_COMPARE_MASK_MASK)
/*! @} */

/*! @name ECCCTRL - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_BUFFER_MASK_MASK            (0x1FFU)
#define GPMI_ECCCTRL_BUFFER_MASK_SHIFT           (0U)
#define GPMI_ECCCTRL_BUFFER_MASK(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK        (0x600U)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT       (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_RANDOMIZER_TYPE(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_MASK      (0x800U)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_SHIFT     (11U)
#define GPMI_ECCCTRL_ENABLE_ECC_MASK             (0x1000U)
#define GPMI_ECCCTRL_ENABLE_ECC_SHIFT            (12U)
#define GPMI_ECCCTRL_ECC_CMD_MASK                (0x6000U)
#define GPMI_ECCCTRL_ECC_CMD_SHIFT               (13U)
#define GPMI_ECCCTRL_ECC_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_ECC_CMD_MASK)
#define GPMI_ECCCTRL_RSVD2_MASK                  (0x8000U)
#define GPMI_ECCCTRL_RSVD2_SHIFT                 (15U)
#define GPMI_ECCCTRL_HANDLE_MASK                 (0xFFFF0000U)
#define GPMI_ECCCTRL_HANDLE_SHIFT                (16U)
#define GPMI_ECCCTRL_HANDLE(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_HANDLE_SHIFT)) & GPMI_ECCCTRL_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_SET - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_SET_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_SET_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_SET_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_SET_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_SET_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_SET_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_SET_ECC_CMD_MASK)
#define GPMI_ECCCTRL_SET_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_SET_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_SET_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_SET_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_SET_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_HANDLE_SHIFT)) & GPMI_ECCCTRL_SET_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_CLR - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_CLR_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_CLR_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_CLR_ECC_CMD_MASK)
#define GPMI_ECCCTRL_CLR_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_CLR_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_CLR_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_CLR_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_CLR_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_HANDLE_SHIFT)) & GPMI_ECCCTRL_CLR_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_TOG - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_TOG_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_TOG_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_TOG_ECC_CMD_MASK)
#define GPMI_ECCCTRL_TOG_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_TOG_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_TOG_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_TOG_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_TOG_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_HANDLE_SHIFT)) & GPMI_ECCCTRL_TOG_HANDLE_MASK)
/*! @} */

/*! @name ECCCOUNT - GPMI Integrated ECC Transfer Count Register Description */
/*! @{ */
#define GPMI_ECCCOUNT_COUNT_MASK                 (0xFFFFU)
#define GPMI_ECCCOUNT_COUNT_SHIFT                (0U)
#define GPMI_ECCCOUNT_COUNT(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_COUNT_SHIFT)) & GPMI_ECCCOUNT_COUNT_MASK)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK       (0xFF0000U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT      (16U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT)) & GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK)
/*! @} */

/*! @name PAYLOAD - GPMI Payload Address Register Description */
/*! @{ */
#define GPMI_PAYLOAD_RSVD0_MASK                  (0x3U)
#define GPMI_PAYLOAD_RSVD0_SHIFT                 (0U)
#define GPMI_PAYLOAD_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_RSVD0_SHIFT)) & GPMI_PAYLOAD_RSVD0_MASK)
#define GPMI_PAYLOAD_ADDRESS_MASK                (0xFFFFFFFCU)
#define GPMI_PAYLOAD_ADDRESS_SHIFT               (2U)
#define GPMI_PAYLOAD_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_ADDRESS_SHIFT)) & GPMI_PAYLOAD_ADDRESS_MASK)
/*! @} */

/*! @name AUXILIARY - GPMI Auxiliary Address Register Description */
/*! @{ */
#define GPMI_AUXILIARY_RSVD0_MASK                (0x3U)
#define GPMI_AUXILIARY_RSVD0_SHIFT               (0U)
#define GPMI_AUXILIARY_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_RSVD0_SHIFT)) & GPMI_AUXILIARY_RSVD0_MASK)
#define GPMI_AUXILIARY_ADDRESS_MASK              (0xFFFFFFFCU)
#define GPMI_AUXILIARY_ADDRESS_SHIFT             (2U)
#define GPMI_AUXILIARY_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_ADDRESS_SHIFT)) & GPMI_AUXILIARY_ADDRESS_MASK)
/*! @} */

/*! @name CTRL1 - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_GPMI_MODE_MASK                (0x1U)
#define GPMI_CTRL1_GPMI_MODE_SHIFT               (0U)
#define GPMI_CTRL1_CAMERA_MODE_MASK              (0x2U)
#define GPMI_CTRL1_CAMERA_MODE_SHIFT             (1U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_MASK      (0x4U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_SHIFT     (2U)
#define GPMI_CTRL1_DEV_RESET_MASK                (0x8U)
#define GPMI_CTRL1_DEV_RESET_SHIFT               (3U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_MASK       (0x80U)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_SHIFT      (7U)
#define GPMI_CTRL1_BURST_EN_MASK                 (0x100U)
#define GPMI_CTRL1_BURST_EN_SHIFT                (8U)
#define GPMI_CTRL1_TIMEOUT_IRQ_MASK              (0x200U)
#define GPMI_CTRL1_TIMEOUT_IRQ_SHIFT             (9U)
#define GPMI_CTRL1_DEV_IRQ_MASK                  (0x400U)
#define GPMI_CTRL1_DEV_IRQ_SHIFT                 (10U)
#define GPMI_CTRL1_DMA2ECC_MODE_MASK             (0x800U)
#define GPMI_CTRL1_DMA2ECC_MODE_SHIFT            (11U)
#define GPMI_CTRL1_RDN_DELAY_MASK                (0xF000U)
#define GPMI_CTRL1_RDN_DELAY_SHIFT               (12U)
#define GPMI_CTRL1_RDN_DELAY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_RDN_DELAY_SHIFT)) & GPMI_CTRL1_RDN_DELAY_MASK)
#define GPMI_CTRL1_HALF_PERIOD_MASK              (0x10000U)
#define GPMI_CTRL1_HALF_PERIOD_SHIFT             (16U)
#define GPMI_CTRL1_DLL_ENABLE_MASK               (0x20000U)
#define GPMI_CTRL1_DLL_ENABLE_SHIFT              (17U)
#define GPMI_CTRL1_BCH_MODE_MASK                 (0x40000U)
#define GPMI_CTRL1_BCH_MODE_SHIFT                (18U)
#define GPMI_CTRL1_GANGED_RDYBUSY_MASK           (0x80000U)
#define GPMI_CTRL1_GANGED_RDYBUSY_SHIFT          (19U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_MASK           (0x100000U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_SHIFT          (20U)
#define GPMI_CTRL1_TEST_TRIGGER_MASK             (0x200000U)
#define GPMI_CTRL1_TEST_TRIGGER_SHIFT            (21U)
#define GPMI_CTRL1_WRN_DLY_SEL_MASK              (0xC00000U)
#define GPMI_CTRL1_WRN_DLY_SEL_SHIFT             (22U)
#define GPMI_CTRL1_WRN_DLY_SEL(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_DECOUPLE_CS_MASK              (0x1000000U)
#define GPMI_CTRL1_DECOUPLE_CS_SHIFT             (24U)
#define GPMI_CTRL1_SSYNCMODE_MASK                (0x2000000U)
#define GPMI_CTRL1_SSYNCMODE_SHIFT               (25U)
#define GPMI_CTRL1_UPDATE_CS_MASK                (0x4000000U)
#define GPMI_CTRL1_UPDATE_CS_SHIFT               (26U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_MASK         (0x8000000U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_SHIFT        (27U)
#define GPMI_CTRL1_TOGGLE_MODE_MASK              (0x10000000U)
#define GPMI_CTRL1_TOGGLE_MODE_SHIFT             (28U)
#define GPMI_CTRL1_WRITE_CLK_STOP_MASK           (0x20000000U)
#define GPMI_CTRL1_WRITE_CLK_STOP_SHIFT          (29U)
#define GPMI_CTRL1_SSYNC_CLK_STOP_MASK           (0x40000000U)
#define GPMI_CTRL1_SSYNC_CLK_STOP_SHIFT          (30U)
#define GPMI_CTRL1_DEV_CLK_STOP_MASK             (0x80000000U)
#define GPMI_CTRL1_DEV_CLK_STOP_SHIFT            (31U)
/*! @} */

/*! @name CTRL1_SET - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_SET_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_SET_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_SET_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_SET_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_SET_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_SET_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_SET_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_SET_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_SET_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_SET_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_SET_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_SET_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_SET_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_RDN_DELAY_SHIFT)) & GPMI_CTRL1_SET_RDN_DELAY_MASK)
#define GPMI_CTRL1_SET_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_SET_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_SET_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_SET_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_SET_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_SET_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_SET_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_SET_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_SET_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_SET_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_SET_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_SET_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_SET_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_SET_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_SET_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_SET_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_SET_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name CTRL1_CLR - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_CLR_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_CLR_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_CLR_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_CLR_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_CLR_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_CLR_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_CLR_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_CLR_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_CLR_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_CLR_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_CLR_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_CLR_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_CLR_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_RDN_DELAY_SHIFT)) & GPMI_CTRL1_CLR_RDN_DELAY_MASK)
#define GPMI_CTRL1_CLR_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_CLR_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_CLR_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_CLR_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_CLR_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_CLR_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_CLR_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_CLR_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_CLR_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_CLR_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name CTRL1_TOG - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_TOG_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_TOG_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_TOG_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_TOG_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_TOG_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_TOG_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_TOG_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_TOG_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_TOG_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_TOG_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_TOG_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_TOG_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_TOG_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_RDN_DELAY_SHIFT)) & GPMI_CTRL1_TOG_RDN_DELAY_MASK)
#define GPMI_CTRL1_TOG_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_TOG_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_TOG_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_TOG_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_TOG_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_TOG_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_TOG_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_TOG_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_TOG_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_TOG_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name TIMING0 - GPMI Timing Register 0 Description */
/*! @{ */
#define GPMI_TIMING0_DATA_SETUP_MASK             (0xFFU)
#define GPMI_TIMING0_DATA_SETUP_SHIFT            (0U)
#define GPMI_TIMING0_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_SETUP_SHIFT)) & GPMI_TIMING0_DATA_SETUP_MASK)
#define GPMI_TIMING0_DATA_HOLD_MASK              (0xFF00U)
#define GPMI_TIMING0_DATA_HOLD_SHIFT             (8U)
#define GPMI_TIMING0_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_HOLD_SHIFT)) & GPMI_TIMING0_DATA_HOLD_MASK)
#define GPMI_TIMING0_ADDRESS_SETUP_MASK          (0xFF0000U)
#define GPMI_TIMING0_ADDRESS_SETUP_SHIFT         (16U)
#define GPMI_TIMING0_ADDRESS_SETUP(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_ADDRESS_SETUP_SHIFT)) & GPMI_TIMING0_ADDRESS_SETUP_MASK)
#define GPMI_TIMING0_RSVD1_MASK                  (0xFF000000U)
#define GPMI_TIMING0_RSVD1_SHIFT                 (24U)
#define GPMI_TIMING0_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_RSVD1_SHIFT)) & GPMI_TIMING0_RSVD1_MASK)
/*! @} */

/*! @name TIMING1 - GPMI Timing Register 1 Description */
/*! @{ */
#define GPMI_TIMING1_RSVD1_MASK                  (0xFFFFU)
#define GPMI_TIMING1_RSVD1_SHIFT                 (0U)
#define GPMI_TIMING1_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_RSVD1_SHIFT)) & GPMI_TIMING1_RSVD1_MASK)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK    (0xFFFF0000U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT   (16U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT)) & GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK)
/*! @} */

/*! @name TIMING2 - GPMI Timing Register 2 Description */
/*! @{ */
#define GPMI_TIMING2_DATA_PAUSE_MASK             (0xFU)
#define GPMI_TIMING2_DATA_PAUSE_SHIFT            (0U)
#define GPMI_TIMING2_DATA_PAUSE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_DATA_PAUSE_SHIFT)) & GPMI_TIMING2_DATA_PAUSE_MASK)
#define GPMI_TIMING2_CMDADD_PAUSE_MASK           (0xF0U)
#define GPMI_TIMING2_CMDADD_PAUSE_SHIFT          (4U)
#define GPMI_TIMING2_CMDADD_PAUSE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CMDADD_PAUSE_SHIFT)) & GPMI_TIMING2_CMDADD_PAUSE_MASK)
#define GPMI_TIMING2_POSTAMBLE_DELAY_MASK        (0xF00U)
#define GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT       (8U)
#define GPMI_TIMING2_POSTAMBLE_DELAY(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_POSTAMBLE_DELAY_MASK)
#define GPMI_TIMING2_PREAMBLE_DELAY_MASK         (0xF000U)
#define GPMI_TIMING2_PREAMBLE_DELAY_SHIFT        (12U)
#define GPMI_TIMING2_PREAMBLE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_PREAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_PREAMBLE_DELAY_MASK)
#define GPMI_TIMING2_CE_DELAY_MASK               (0x1F0000U)
#define GPMI_TIMING2_CE_DELAY_SHIFT              (16U)
#define GPMI_TIMING2_CE_DELAY(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CE_DELAY_SHIFT)) & GPMI_TIMING2_CE_DELAY_MASK)
#define GPMI_TIMING2_RSVD0_MASK                  (0xE00000U)
#define GPMI_TIMING2_RSVD0_SHIFT                 (21U)
#define GPMI_TIMING2_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_RSVD0_SHIFT)) & GPMI_TIMING2_RSVD0_MASK)
#define GPMI_TIMING2_READ_LATENCY_MASK           (0x7000000U)
#define GPMI_TIMING2_READ_LATENCY_SHIFT          (24U)
/*! READ_LATENCY
 *  0b000..READ LATENCY is 0
 *  0b001..READ LATENCY is 1
 *  0b010..READ LATENCY is 2
 *  0b011..READ LATENCY is 3
 *  0b100..READ LATENCY is 4
 *  0b101..READ LATENCY is 5
 */
#define GPMI_TIMING2_READ_LATENCY(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_READ_LATENCY_SHIFT)) & GPMI_TIMING2_READ_LATENCY_MASK)
#define GPMI_TIMING2_TCR_MASK                    (0x18000000U)
#define GPMI_TIMING2_TCR_SHIFT                   (27U)
#define GPMI_TIMING2_TCR(x)                      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TCR_SHIFT)) & GPMI_TIMING2_TCR_MASK)
#define GPMI_TIMING2_TRPSTH_MASK                 (0xE0000000U)
#define GPMI_TIMING2_TRPSTH_SHIFT                (29U)
#define GPMI_TIMING2_TRPSTH(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TRPSTH_SHIFT)) & GPMI_TIMING2_TRPSTH_MASK)
/*! @} */

/*! @name DATA - GPMI DMA Data Transfer Register Description */
/*! @{ */
#define GPMI_DATA_DATA_MASK                      (0xFFFFFFFFU)
#define GPMI_DATA_DATA_SHIFT                     (0U)
#define GPMI_DATA_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << GPMI_DATA_DATA_SHIFT)) & GPMI_DATA_DATA_MASK)
/*! @} */

/*! @name STAT - GPMI Status Register Description */
/*! @{ */
#define GPMI_STAT_PRESENT_MASK                   (0x1U)
#define GPMI_STAT_PRESENT_SHIFT                  (0U)
#define GPMI_STAT_FIFO_FULL_MASK                 (0x2U)
#define GPMI_STAT_FIFO_FULL_SHIFT                (1U)
#define GPMI_STAT_FIFO_EMPTY_MASK                (0x4U)
#define GPMI_STAT_FIFO_EMPTY_SHIFT               (2U)
#define GPMI_STAT_INVALID_BUFFER_MASK_MASK       (0x8U)
#define GPMI_STAT_INVALID_BUFFER_MASK_SHIFT      (3U)
#define GPMI_STAT_ATA_IRQ_MASK                   (0x10U)
#define GPMI_STAT_ATA_IRQ_SHIFT                  (4U)
#define GPMI_STAT_RSVD1_MASK                     (0xE0U)
#define GPMI_STAT_RSVD1_SHIFT                    (5U)
#define GPMI_STAT_RSVD1(x)                       (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RSVD1_SHIFT)) & GPMI_STAT_RSVD1_MASK)
#define GPMI_STAT_DEV0_ERROR_MASK                (0x100U)
#define GPMI_STAT_DEV0_ERROR_SHIFT               (8U)
#define GPMI_STAT_DEV1_ERROR_MASK                (0x200U)
#define GPMI_STAT_DEV1_ERROR_SHIFT               (9U)
#define GPMI_STAT_DEV2_ERROR_MASK                (0x400U)
#define GPMI_STAT_DEV2_ERROR_SHIFT               (10U)
#define GPMI_STAT_DEV3_ERROR_MASK                (0x800U)
#define GPMI_STAT_DEV3_ERROR_SHIFT               (11U)
#define GPMI_STAT_DEV4_ERROR_MASK                (0x1000U)
#define GPMI_STAT_DEV4_ERROR_SHIFT               (12U)
#define GPMI_STAT_DEV5_ERROR_MASK                (0x2000U)
#define GPMI_STAT_DEV5_ERROR_SHIFT               (13U)
#define GPMI_STAT_DEV6_ERROR_MASK                (0x4000U)
#define GPMI_STAT_DEV6_ERROR_SHIFT               (14U)
#define GPMI_STAT_DEV7_ERROR_MASK                (0x8000U)
#define GPMI_STAT_DEV7_ERROR_SHIFT               (15U)
#define GPMI_STAT_RDY_TIMEOUT_MASK               (0xFF0000U)
#define GPMI_STAT_RDY_TIMEOUT_SHIFT              (16U)
#define GPMI_STAT_RDY_TIMEOUT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RDY_TIMEOUT_SHIFT)) & GPMI_STAT_RDY_TIMEOUT_MASK)
#define GPMI_STAT_READY_BUSY_MASK                (0xFF000000U)
#define GPMI_STAT_READY_BUSY_SHIFT               (24U)
#define GPMI_STAT_READY_BUSY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_READY_BUSY_SHIFT)) & GPMI_STAT_READY_BUSY_MASK)
/*! @} */

/*! @name DEBUG - GPMI Debug Information Register Description */
/*! @{ */
#define GPMI_DEBUG_CMD_END_MASK                  (0xFFU)
#define GPMI_DEBUG_CMD_END_SHIFT                 (0U)
#define GPMI_DEBUG_CMD_END(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_CMD_END_SHIFT)) & GPMI_DEBUG_CMD_END_MASK)
#define GPMI_DEBUG_DMAREQ_MASK                   (0xFF00U)
#define GPMI_DEBUG_DMAREQ_SHIFT                  (8U)
#define GPMI_DEBUG_DMAREQ(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMAREQ_SHIFT)) & GPMI_DEBUG_DMAREQ_MASK)
#define GPMI_DEBUG_DMA_SENSE_MASK                (0xFF0000U)
#define GPMI_DEBUG_DMA_SENSE_SHIFT               (16U)
#define GPMI_DEBUG_DMA_SENSE(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMA_SENSE_SHIFT)) & GPMI_DEBUG_DMA_SENSE_MASK)
#define GPMI_DEBUG_WAIT_FOR_READY_END_MASK       (0xFF000000U)
#define GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT      (24U)
#define GPMI_DEBUG_WAIT_FOR_READY_END(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT)) & GPMI_DEBUG_WAIT_FOR_READY_END_MASK)
/*! @} */

/*! @name VERSION - GPMI Version Register Description */
/*! @{ */
#define GPMI_VERSION_STEP_MASK                   (0xFFFFU)
#define GPMI_VERSION_STEP_SHIFT                  (0U)
#define GPMI_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_STEP_SHIFT)) & GPMI_VERSION_STEP_MASK)
#define GPMI_VERSION_MINOR_MASK                  (0xFF0000U)
#define GPMI_VERSION_MINOR_SHIFT                 (16U)
#define GPMI_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MINOR_SHIFT)) & GPMI_VERSION_MINOR_MASK)
#define GPMI_VERSION_MAJOR_MASK                  (0xFF000000U)
#define GPMI_VERSION_MAJOR_SHIFT                 (24U)
#define GPMI_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MAJOR_SHIFT)) & GPMI_VERSION_MAJOR_MASK)
/*! @} */

/*! @name DEBUG2 - GPMI Debug2 Information Register Description */
/*! @{ */
#define GPMI_DEBUG2_RDN_TAP_MASK                 (0x3FU)
#define GPMI_DEBUG2_RDN_TAP_SHIFT                (0U)
#define GPMI_DEBUG2_RDN_TAP(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RDN_TAP_SHIFT)) & GPMI_DEBUG2_RDN_TAP_MASK)
#define GPMI_DEBUG2_UPDATE_WINDOW_MASK           (0x40U)
#define GPMI_DEBUG2_UPDATE_WINDOW_SHIFT          (6U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_MASK        (0x80U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_SHIFT       (7U)
#define GPMI_DEBUG2_SYND2GPMI_READY_MASK         (0x100U)
#define GPMI_DEBUG2_SYND2GPMI_READY_SHIFT        (8U)
#define GPMI_DEBUG2_SYND2GPMI_VALID_MASK         (0x200U)
#define GPMI_DEBUG2_SYND2GPMI_VALID_SHIFT        (9U)
#define GPMI_DEBUG2_GPMI2SYND_READY_MASK         (0x400U)
#define GPMI_DEBUG2_GPMI2SYND_READY_SHIFT        (10U)
#define GPMI_DEBUG2_GPMI2SYND_VALID_MASK         (0x800U)
#define GPMI_DEBUG2_GPMI2SYND_VALID_SHIFT        (11U)
#define GPMI_DEBUG2_SYND2GPMI_BE_MASK            (0xF000U)
#define GPMI_DEBUG2_SYND2GPMI_BE_SHIFT           (12U)
#define GPMI_DEBUG2_SYND2GPMI_BE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_SYND2GPMI_BE_SHIFT)) & GPMI_DEBUG2_SYND2GPMI_BE_MASK)
#define GPMI_DEBUG2_MAIN_STATE_MASK              (0xF0000U)
#define GPMI_DEBUG2_MAIN_STATE_SHIFT             (16U)
#define GPMI_DEBUG2_MAIN_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_MAIN_STATE_SHIFT)) & GPMI_DEBUG2_MAIN_STATE_MASK)
#define GPMI_DEBUG2_PIN_STATE_MASK               (0x700000U)
#define GPMI_DEBUG2_PIN_STATE_SHIFT              (20U)
#define GPMI_DEBUG2_PIN_STATE(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_PIN_STATE_SHIFT)) & GPMI_DEBUG2_PIN_STATE_MASK)
#define GPMI_DEBUG2_BUSY_MASK                    (0x800000U)
#define GPMI_DEBUG2_BUSY_SHIFT                   (23U)
#define GPMI_DEBUG2_UDMA_STATE_MASK              (0xF000000U)
#define GPMI_DEBUG2_UDMA_STATE_SHIFT             (24U)
#define GPMI_DEBUG2_UDMA_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_UDMA_STATE_SHIFT)) & GPMI_DEBUG2_UDMA_STATE_MASK)
#define GPMI_DEBUG2_RSVD1_MASK                   (0xF0000000U)
#define GPMI_DEBUG2_RSVD1_SHIFT                  (28U)
#define GPMI_DEBUG2_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RSVD1_SHIFT)) & GPMI_DEBUG2_RSVD1_MASK)
/*! @} */

/*! @name DEBUG3 - GPMI Debug3 Information Register Description */
/*! @{ */
#define GPMI_DEBUG3_DEV_WORD_CNTR_MASK           (0xFFFFU)
#define GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT          (0U)
#define GPMI_DEBUG3_DEV_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_DEV_WORD_CNTR_MASK)
#define GPMI_DEBUG3_APB_WORD_CNTR_MASK           (0xFFFF0000U)
#define GPMI_DEBUG3_APB_WORD_CNTR_SHIFT          (16U)
#define GPMI_DEBUG3_APB_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_APB_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_APB_WORD_CNTR_MASK)
/*! @} */

/*! @name READ_DDR_DLL_CTRL - GPMI Double Rate Read DLL Control Register Description */
/*! @{ */
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_MASK       (0x1U)
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_SHIFT      (0U)
#define GPMI_READ_DDR_DLL_CTRL_RESET_MASK        (0x2U)
#define GPMI_READ_DDR_DLL_CTRL_RESET_SHIFT       (1U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_MASK  (0x80U)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_MASK    (0x100U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_SHIFT   (8U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK        (0xC0000U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT       (18U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name WRITE_DDR_DLL_CTRL - GPMI Double Rate Write DLL Control Register Description */
/*! @{ */
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_MASK      (0x1U)
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_SHIFT     (0U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_MASK       (0x2U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_SHIFT      (1U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_MASK   (0x100U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_SHIFT  (8U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK       (0xC0000U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT      (18U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name READ_DDR_DLL_STS - GPMI Double Rate Read DLL Status Register Description */
/*! @{ */
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_MASK      (0x1U)
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_SHIFT     (0U)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK       (0x1FEU)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT      (1U)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD0_MASK         (0xFE00U)
#define GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT        (9U)
#define GPMI_READ_DDR_DLL_STS_RSVD0(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_MASK      (0x10000U)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_SHIFT     (16U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_MASK       (0x1FE0000U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT      (17U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD1_MASK         (0xFE000000U)
#define GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT        (25U)
#define GPMI_READ_DDR_DLL_STS_RSVD1(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD1_MASK)
/*! @} */

/*! @name WRITE_DDR_DLL_STS - GPMI Double Rate Write DLL Status Register Description */
/*! @{ */
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_MASK     (0x1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_SHIFT    (0U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK      (0x1FEU)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT     (1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK        (0xFE00U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT       (9U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_MASK     (0x10000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_SHIFT    (16U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK      (0x1FE0000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT     (17U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK        (0xFE000000U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT       (25U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPMI_Register_Masks */


/* GPMI - Peripheral instance base addresses */
/** Peripheral GPMI base pointer */
#define GPMI_BASE_PTR                            ((GPMI_MemMapPtr)0x33002000u)
/** Array initializer of GPMI peripheral base pointers */
#define GPMI_BASE_PTRS                           { GPMI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPMI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Accessor_Macros GPMI - Register accessor macros
 * @{
 */


/* GPMI - Register instance definitions */
/* GPMI */
#define GPMI_CTRL0                               GPMI_CTRL0_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_SET                           GPMI_CTRL0_SET_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_CLR                           GPMI_CTRL0_CLR_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_TOG                           GPMI_CTRL0_TOG_REG(GPMI_BASE_PTR)
#define GPMI_COMPARE                             GPMI_COMPARE_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL                             GPMI_ECCCTRL_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_SET                         GPMI_ECCCTRL_SET_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_CLR                         GPMI_ECCCTRL_CLR_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_TOG                         GPMI_ECCCTRL_TOG_REG(GPMI_BASE_PTR)
#define GPMI_ECCCOUNT                            GPMI_ECCCOUNT_REG(GPMI_BASE_PTR)
#define GPMI_PAYLOAD                             GPMI_PAYLOAD_REG(GPMI_BASE_PTR)
#define GPMI_AUXILIARY                           GPMI_AUXILIARY_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1                               GPMI_CTRL1_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_SET                           GPMI_CTRL1_SET_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_CLR                           GPMI_CTRL1_CLR_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_TOG                           GPMI_CTRL1_TOG_REG(GPMI_BASE_PTR)
#define GPMI_TIMING0                             GPMI_TIMING0_REG(GPMI_BASE_PTR)
#define GPMI_TIMING1                             GPMI_TIMING1_REG(GPMI_BASE_PTR)
#define GPMI_TIMING2                             GPMI_TIMING2_REG(GPMI_BASE_PTR)
#define GPMI_DATA                                GPMI_DATA_REG(GPMI_BASE_PTR)
#define GPMI_STAT                                GPMI_STAT_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG                               GPMI_DEBUG_REG(GPMI_BASE_PTR)
#define GPMI_VERSION                             GPMI_VERSION_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG2                              GPMI_DEBUG2_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG3                              GPMI_DEBUG3_REG(GPMI_BASE_PTR)
#define GPMI_READ_DDR_DLL_CTRL                   GPMI_READ_DDR_DLL_CTRL_REG(GPMI_BASE_PTR)
#define GPMI_WRITE_DDR_DLL_CTRL                  GPMI_WRITE_DDR_DLL_CTRL_REG(GPMI_BASE_PTR)
#define GPMI_READ_DDR_DLL_STS                    GPMI_READ_DDR_DLL_STS_REG(GPMI_BASE_PTR)
#define GPMI_WRITE_DDR_DLL_STS                   GPMI_WRITE_DDR_DLL_STS_REG(GPMI_BASE_PTR)

/*!
 * @}
 */ /* end of group GPMI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPMI_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Peripheral GPT
 * @{
 */

/** GPT - Peripheral register structure */
typedef struct GPT_MemMap {
  uint32_t CR;                                     /**< GPT Control Register, offset: 0x0 */
  uint32_t PR;                                     /**< GPT Prescaler Register, offset: 0x4 */
  uint32_t SR;                                     /**< GPT Status Register, offset: 0x8 */
  uint32_t IR;                                     /**< GPT Interrupt Register, offset: 0xC */
  uint32_t OCR[3];                                 /**< GPT Output Compare Register 1..GPT Output Compare Register 3, array offset: 0x10, array step: 0x4 */
  uint32_t ICR[2];                                 /**< GPT Input Capture Register 1..GPT Input Capture Register 2, array offset: 0x1C, array step: 0x4 */
  uint32_t CNT;                                    /**< GPT Counter Register, offset: 0x24 */
} volatile *GPT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register accessors */
#define GPT_CR_REG(base)                         ((base)->CR)
#define GPT_PR_REG(base)                         ((base)->PR)
#define GPT_SR_REG(base)                         ((base)->SR)
#define GPT_IR_REG(base)                         ((base)->IR)
#define GPT_OCR_REG(base,index)                  ((base)->OCR[index])
#define GPT_ICR_REG(base,index)                  ((base)->ICR[index])
#define GPT_CNT_REG(base)                        ((base)->CNT)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Masks GPT Register Masks
 * @{
 */

/*! @name CR - GPT Control Register */
/*! @{ */
#define GPT_CR_EN_MASK                           (0x1U)
#define GPT_CR_EN_SHIFT                          (0U)
#define GPT_CR_ENMOD_MASK                        (0x2U)
#define GPT_CR_ENMOD_SHIFT                       (1U)
#define GPT_CR_DBGEN_MASK                        (0x4U)
#define GPT_CR_DBGEN_SHIFT                       (2U)
#define GPT_CR_WAITEN_MASK                       (0x8U)
#define GPT_CR_WAITEN_SHIFT                      (3U)
#define GPT_CR_DOZEEN_MASK                       (0x10U)
#define GPT_CR_DOZEEN_SHIFT                      (4U)
#define GPT_CR_STOPEN_MASK                       (0x20U)
#define GPT_CR_STOPEN_SHIFT                      (5U)
#define GPT_CR_CLKSRC_MASK                       (0x1C0U)
#define GPT_CR_CLKSRC_SHIFT                      (6U)
/*! CLKSRC
 *  0b000..No clock
 *  0b001..Peripheral Clock (ipg_clk)
 *  0b010..High Frequency Reference Clock (ipg_clk_highfreq)
 *  0b011..External Clock
 *  0b100..Low Frequency Reference Clock (ipg_clk_32k)
 *  0b101..Crystal oscillator as Reference Clock (ipg_clk_24M)
 */
#define GPT_CR_CLKSRC(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_CLKSRC_SHIFT)) & GPT_CR_CLKSRC_MASK)
#define GPT_CR_FRR_MASK                          (0x200U)
#define GPT_CR_FRR_SHIFT                         (9U)
#define GPT_CR_EN_24M_MASK                       (0x400U)
#define GPT_CR_EN_24M_SHIFT                      (10U)
#define GPT_CR_SWR_MASK                          (0x8000U)
#define GPT_CR_SWR_SHIFT                         (15U)
#define GPT_CR_IM1_MASK                          (0x30000U)
#define GPT_CR_IM1_SHIFT                         (16U)
#define GPT_CR_IM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM1_SHIFT)) & GPT_CR_IM1_MASK)
#define GPT_CR_IM2_MASK                          (0xC0000U)
#define GPT_CR_IM2_SHIFT                         (18U)
/*! IM2
 *  0b00..capture disabled
 *  0b01..capture on rising edge only
 *  0b10..capture on falling edge only
 *  0b11..capture on both edges
 */
#define GPT_CR_IM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM2_SHIFT)) & GPT_CR_IM2_MASK)
#define GPT_CR_OM1_MASK                          (0x700000U)
#define GPT_CR_OM1_SHIFT                         (20U)
#define GPT_CR_OM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM1_SHIFT)) & GPT_CR_OM1_MASK)
#define GPT_CR_OM2_MASK                          (0x3800000U)
#define GPT_CR_OM2_SHIFT                         (23U)
#define GPT_CR_OM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM2_SHIFT)) & GPT_CR_OM2_MASK)
#define GPT_CR_OM3_MASK                          (0x1C000000U)
#define GPT_CR_OM3_SHIFT                         (26U)
/*! OM3
 *  0b000..Output disconnected. No response on pin.
 *  0b001..Toggle output pin
 *  0b010..Clear output pin
 *  0b011..Set output pin
 *  0b1xx..Generate an active low pulse (that is one input clock wide) on the output pin.
 */
#define GPT_CR_OM3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM3_SHIFT)) & GPT_CR_OM3_MASK)
#define GPT_CR_FO1_MASK                          (0x20000000U)
#define GPT_CR_FO1_SHIFT                         (29U)
#define GPT_CR_FO2_MASK                          (0x40000000U)
#define GPT_CR_FO2_SHIFT                         (30U)
#define GPT_CR_FO3_MASK                          (0x80000000U)
#define GPT_CR_FO3_SHIFT                         (31U)
/*! @} */

/*! @name PR - GPT Prescaler Register */
/*! @{ */
#define GPT_PR_PRESCALER_MASK                    (0xFFFU)
#define GPT_PR_PRESCALER_SHIFT                   (0U)
/*! PRESCALER
 *  0b000000000000..Divide by 1
 *  0b000000000001..Divide by 2
 *  0b111111111111..Divide by 4096
 */
#define GPT_PR_PRESCALER(x)                      (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER_SHIFT)) & GPT_PR_PRESCALER_MASK)
#define GPT_PR_PRESCALER24M_MASK                 (0xF000U)
#define GPT_PR_PRESCALER24M_SHIFT                (12U)
/*! PRESCALER24M
 *  0b0000..Divide by 1
 *  0b0001..Divide by 2
 *  0b1111..Divide by 16
 */
#define GPT_PR_PRESCALER24M(x)                   (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER24M_SHIFT)) & GPT_PR_PRESCALER24M_MASK)
/*! @} */

/*! @name SR - GPT Status Register */
/*! @{ */
#define GPT_SR_OF1_MASK                          (0x1U)
#define GPT_SR_OF1_SHIFT                         (0U)
#define GPT_SR_OF2_MASK                          (0x2U)
#define GPT_SR_OF2_SHIFT                         (1U)
#define GPT_SR_OF3_MASK                          (0x4U)
#define GPT_SR_OF3_SHIFT                         (2U)
#define GPT_SR_IF1_MASK                          (0x8U)
#define GPT_SR_IF1_SHIFT                         (3U)
#define GPT_SR_IF2_MASK                          (0x10U)
#define GPT_SR_IF2_SHIFT                         (4U)
#define GPT_SR_ROV_MASK                          (0x20U)
#define GPT_SR_ROV_SHIFT                         (5U)
/*! @} */

/*! @name IR - GPT Interrupt Register */
/*! @{ */
#define GPT_IR_OF1IE_MASK                        (0x1U)
#define GPT_IR_OF1IE_SHIFT                       (0U)
#define GPT_IR_OF2IE_MASK                        (0x2U)
#define GPT_IR_OF2IE_SHIFT                       (1U)
#define GPT_IR_OF3IE_MASK                        (0x4U)
#define GPT_IR_OF3IE_SHIFT                       (2U)
#define GPT_IR_IF1IE_MASK                        (0x8U)
#define GPT_IR_IF1IE_SHIFT                       (3U)
#define GPT_IR_IF2IE_MASK                        (0x10U)
#define GPT_IR_IF2IE_SHIFT                       (4U)
#define GPT_IR_ROVIE_MASK                        (0x20U)
#define GPT_IR_ROVIE_SHIFT                       (5U)
/*! @} */

/*! @name OCR - GPT Output Compare Register 1..GPT Output Compare Register 3 */
/*! @{ */
#define GPT_OCR_COMP_MASK                        (0xFFFFFFFFU)
#define GPT_OCR_COMP_SHIFT                       (0U)
#define GPT_OCR_COMP(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_OCR_COMP_SHIFT)) & GPT_OCR_COMP_MASK)
/*! @} */

/* The count of GPT_OCR */
#define GPT_OCR_COUNT                            (3U)

/*! @name ICR - GPT Input Capture Register 1..GPT Input Capture Register 2 */
/*! @{ */
#define GPT_ICR_CAPT_MASK                        (0xFFFFFFFFU)
#define GPT_ICR_CAPT_SHIFT                       (0U)
#define GPT_ICR_CAPT(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_ICR_CAPT_SHIFT)) & GPT_ICR_CAPT_MASK)
/*! @} */

/* The count of GPT_ICR */
#define GPT_ICR_COUNT                            (2U)

/*! @name CNT - GPT Counter Register */
/*! @{ */
#define GPT_CNT_COUNT_MASK                       (0xFFFFFFFFU)
#define GPT_CNT_COUNT_SHIFT                      (0U)
#define GPT_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CNT_COUNT_SHIFT)) & GPT_CNT_COUNT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPT_Register_Masks */


/* GPT - Peripheral instance base addresses */
/** Peripheral GPT1 base pointer */
#define GPT1_BASE_PTR                            ((GPT_MemMapPtr)0x302D0000u)
/** Peripheral GPT2 base pointer */
#define GPT2_BASE_PTR                            ((GPT_MemMapPtr)0x302E0000u)
/** Peripheral GPT3 base pointer */
#define GPT3_BASE_PTR                            ((GPT_MemMapPtr)0x302F0000u)
/** Peripheral GPT4 base pointer */
#define GPT4_BASE_PTR                            ((GPT_MemMapPtr)0x30700000u)
/** Peripheral GPT5 base pointer */
#define GPT5_BASE_PTR                            ((GPT_MemMapPtr)0x306F0000u)
/** Peripheral GPT6 base pointer */
#define GPT6_BASE_PTR                            ((GPT_MemMapPtr)0x306E0000u)
/** Array initializer of GPT peripheral base pointers */
#define GPT_BASE_PTRS                            { GPT1_BASE_PTR, GPT2_BASE_PTR, GPT3_BASE_PTR, GPT4_BASE_PTR, GPT5_BASE_PTR, GPT6_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register instance definitions */
/* GPT1 */
#define GPT1_CR                                  GPT_CR_REG(GPT1_BASE_PTR)
#define GPT1_PR                                  GPT_PR_REG(GPT1_BASE_PTR)
#define GPT1_SR                                  GPT_SR_REG(GPT1_BASE_PTR)
#define GPT1_IR                                  GPT_IR_REG(GPT1_BASE_PTR)
#define GPT1_OCR1                                GPT_OCR_REG(GPT1_BASE_PTR,0)
#define GPT1_OCR2                                GPT_OCR_REG(GPT1_BASE_PTR,1)
#define GPT1_OCR3                                GPT_OCR_REG(GPT1_BASE_PTR,2)
#define GPT1_ICR1                                GPT_ICR_REG(GPT1_BASE_PTR,0)
#define GPT1_ICR2                                GPT_ICR_REG(GPT1_BASE_PTR,1)
#define GPT1_CNT                                 GPT_CNT_REG(GPT1_BASE_PTR)
/* GPT2 */
#define GPT2_CR                                  GPT_CR_REG(GPT2_BASE_PTR)
#define GPT2_PR                                  GPT_PR_REG(GPT2_BASE_PTR)
#define GPT2_SR                                  GPT_SR_REG(GPT2_BASE_PTR)
#define GPT2_IR                                  GPT_IR_REG(GPT2_BASE_PTR)
#define GPT2_OCR1                                GPT_OCR_REG(GPT2_BASE_PTR,0)
#define GPT2_OCR2                                GPT_OCR_REG(GPT2_BASE_PTR,1)
#define GPT2_OCR3                                GPT_OCR_REG(GPT2_BASE_PTR,2)
#define GPT2_ICR1                                GPT_ICR_REG(GPT2_BASE_PTR,0)
#define GPT2_ICR2                                GPT_ICR_REG(GPT2_BASE_PTR,1)
#define GPT2_CNT                                 GPT_CNT_REG(GPT2_BASE_PTR)
/* GPT3 */
#define GPT3_CR                                  GPT_CR_REG(GPT3_BASE_PTR)
#define GPT3_PR                                  GPT_PR_REG(GPT3_BASE_PTR)
#define GPT3_SR                                  GPT_SR_REG(GPT3_BASE_PTR)
#define GPT3_IR                                  GPT_IR_REG(GPT3_BASE_PTR)
#define GPT3_OCR1                                GPT_OCR_REG(GPT3_BASE_PTR,0)
#define GPT3_OCR2                                GPT_OCR_REG(GPT3_BASE_PTR,1)
#define GPT3_OCR3                                GPT_OCR_REG(GPT3_BASE_PTR,2)
#define GPT3_ICR1                                GPT_ICR_REG(GPT3_BASE_PTR,0)
#define GPT3_ICR2                                GPT_ICR_REG(GPT3_BASE_PTR,1)
#define GPT3_CNT                                 GPT_CNT_REG(GPT3_BASE_PTR)
/* GPT4 */
#define GPT4_CR                                  GPT_CR_REG(GPT4_BASE_PTR)
#define GPT4_PR                                  GPT_PR_REG(GPT4_BASE_PTR)
#define GPT4_SR                                  GPT_SR_REG(GPT4_BASE_PTR)
#define GPT4_IR                                  GPT_IR_REG(GPT4_BASE_PTR)
#define GPT4_OCR1                                GPT_OCR_REG(GPT4_BASE_PTR,0)
#define GPT4_OCR2                                GPT_OCR_REG(GPT4_BASE_PTR,1)
#define GPT4_OCR3                                GPT_OCR_REG(GPT4_BASE_PTR,2)
#define GPT4_ICR1                                GPT_ICR_REG(GPT4_BASE_PTR,0)
#define GPT4_ICR2                                GPT_ICR_REG(GPT4_BASE_PTR,1)
#define GPT4_CNT                                 GPT_CNT_REG(GPT4_BASE_PTR)
/* GPT5 */
#define GPT5_CR                                  GPT_CR_REG(GPT5_BASE_PTR)
#define GPT5_PR                                  GPT_PR_REG(GPT5_BASE_PTR)
#define GPT5_SR                                  GPT_SR_REG(GPT5_BASE_PTR)
#define GPT5_IR                                  GPT_IR_REG(GPT5_BASE_PTR)
#define GPT5_OCR1                                GPT_OCR_REG(GPT5_BASE_PTR,0)
#define GPT5_OCR2                                GPT_OCR_REG(GPT5_BASE_PTR,1)
#define GPT5_OCR3                                GPT_OCR_REG(GPT5_BASE_PTR,2)
#define GPT5_ICR1                                GPT_ICR_REG(GPT5_BASE_PTR,0)
#define GPT5_ICR2                                GPT_ICR_REG(GPT5_BASE_PTR,1)
#define GPT5_CNT                                 GPT_CNT_REG(GPT5_BASE_PTR)
/* GPT6 */
#define GPT6_CR                                  GPT_CR_REG(GPT6_BASE_PTR)
#define GPT6_PR                                  GPT_PR_REG(GPT6_BASE_PTR)
#define GPT6_SR                                  GPT_SR_REG(GPT6_BASE_PTR)
#define GPT6_IR                                  GPT_IR_REG(GPT6_BASE_PTR)
#define GPT6_OCR1                                GPT_OCR_REG(GPT6_BASE_PTR,0)
#define GPT6_OCR2                                GPT_OCR_REG(GPT6_BASE_PTR,1)
#define GPT6_OCR3                                GPT_OCR_REG(GPT6_BASE_PTR,2)
#define GPT6_ICR1                                GPT_ICR_REG(GPT6_BASE_PTR,0)
#define GPT6_ICR2                                GPT_ICR_REG(GPT6_BASE_PTR,1)
#define GPT6_CNT                                 GPT_CNT_REG(GPT6_BASE_PTR)

/* GPT - Register array accessors */
#define GPT1_OCR(index)                          GPT_OCR_REG(GPT1_BASE_PTR,index)
#define GPT2_OCR(index)                          GPT_OCR_REG(GPT2_BASE_PTR,index)
#define GPT3_OCR(index)                          GPT_OCR_REG(GPT3_BASE_PTR,index)
#define GPT4_OCR(index)                          GPT_OCR_REG(GPT4_BASE_PTR,index)
#define GPT5_OCR(index)                          GPT_OCR_REG(GPT5_BASE_PTR,index)
#define GPT6_OCR(index)                          GPT_OCR_REG(GPT6_BASE_PTR,index)
#define GPT1_ICR(index)                          GPT_ICR_REG(GPT1_BASE_PTR,index)
#define GPT2_ICR(index)                          GPT_ICR_REG(GPT2_BASE_PTR,index)
#define GPT3_ICR(index)                          GPT_ICR_REG(GPT3_BASE_PTR,index)
#define GPT4_ICR(index)                          GPT_ICR_REG(GPT4_BASE_PTR,index)
#define GPT5_ICR(index)                          GPT_ICR_REG(GPT5_BASE_PTR,index)
#define GPT6_ICR(index)                          GPT_ICR_REG(GPT6_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPT_Peripheral */


/* ----------------------------------------------------------------------------
   -- HDMI_TX
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HDMI_TX_Peripheral HDMI_TX
 * @{
 */

/** HDMI_TX - Peripheral register structure */
typedef struct HDMI_TX_MemMap {
  uint32_t APB_CTRL;                               /**< , offset: 0x0 */
  uint32_t XT_INT_CTRL;                            /**< , offset: 0x4 */
  uint32_t MAILBOX_FULL_ADDR;                      /**< , offset: 0x8 */
  uint32_t MAILBOX_EMPTY_ADDR;                     /**< , offset: 0xC */
  uint32_t MAILBOX0_WR_DATA;                       /**< , offset: 0x10 */
  uint32_t MAILBOX0_RD_DATA;                       /**< , offset: 0x14 */
  uint32_t KEEP_ALIVE;                             /**< , offset: 0x18 */
  uint32_t VER_L;                                  /**< , offset: 0x1C */
  uint32_t VER_H;                                  /**< , offset: 0x20 */
  uint32_t VER_LIB_L_ADDR;                         /**< , offset: 0x24 */
  uint32_t VER_LIB_H_ADDR;                         /**< , offset: 0x28 */
  uint32_t SW_DEBUG_L;                             /**< , offset: 0x2C */
  uint32_t SW_DEBUG_H;                             /**< , offset: 0x30 */
  uint32_t MAILBOX_INT_MASK;                       /**< , offset: 0x34 */
  uint32_t MAILBOX_INT_STATUS;                     /**< , offset: 0x38 */
  uint32_t SW_CLK_L;                               /**< , offset: 0x3C */
  uint32_t SW_CLK_H;                               /**< , offset: 0x40 */
  uint32_t SW_EVENTS0;                             /**< , offset: 0x44 */
  uint32_t SW_EVENTS1;                             /**< , offset: 0x48 */
  uint32_t SW_EVENTS2;                             /**< , offset: 0x4C */
  uint32_t SW_EVENTS3;                             /**< , offset: 0x50 */
  uint8_t RESERVED_0[12];
  uint32_t XT_OCD_CTRL;                            /**< , offset: 0x60 */
  uint32_t XT_OCD_CTRL_RO;                         /**< , offset: 0x64 */
  uint8_t RESERVED_1[4];
  uint32_t APB_INT_MASK;                           /**< , offset: 0x6C */
  uint32_t APB_STATUS_MASK;                        /**< , offset: 0x70 */
  uint8_t RESERVED_2[196492];
  uint32_t AUDIO_SRC_CNTL;                         /**< , offset: 0x30000 */
  uint32_t AUDIO_SRC_CNFG;                         /**< , offset: 0x30004 */
  uint32_t COM_CH_STTS_BITS;                       /**< , offset: 0x30008 */
  uint32_t STTS_BIT_CH01;                          /**< , offset: 0x3000C */
  uint32_t STTS_BIT_CH23;                          /**< , offset: 0x30010 */
  uint32_t STTS_BIT_CH45;                          /**< , offset: 0x30014 */
  uint32_t STTS_BIT_CH67;                          /**< , offset: 0x30018 */
  uint32_t STTS_BIT_CH89;                          /**< , offset: 0x3001C */
  uint32_t STTS_BIT_CH1011;                        /**< , offset: 0x30020 */
  uint32_t STTS_BIT_CH1213;                        /**< , offset: 0x30024 */
  uint32_t STTS_BIT_CH1415;                        /**< , offset: 0x30028 */
  uint32_t STTS_BIT_CH1617;                        /**< , offset: 0x3002C */
  uint32_t STTS_BIT_CH1819;                        /**< , offset: 0x30030 */
  uint32_t STTS_BIT_CH2021;                        /**< , offset: 0x30034 */
  uint32_t STTS_BIT_CH2223;                        /**< , offset: 0x30038 */
  uint32_t STTS_BIT_CH2425;                        /**< , offset: 0x3003C */
  uint32_t STTS_BIT_CH2627;                        /**< , offset: 0x30040 */
  uint32_t STTS_BIT_CH2829;                        /**< , offset: 0x30044 */
  uint32_t STTS_BIT_CH3031;                        /**< , offset: 0x30048 */
  uint32_t SPDIF_CTRL_ADDR;                        /**< , offset: 0x3004C */
  uint32_t SPDIF_CH1_CS_3100_ADDR;                 /**< , offset: 0x30050 */
  uint32_t SPDIF_CH1_CS_6332_ADDR;                 /**< , offset: 0x30054 */
  uint32_t SPDIF_CH1_CS_9564_ADDR;                 /**< , offset: 0x30058 */
  uint32_t SPDIF_CH1_CS_12796_ADDR;                /**< , offset: 0x3005C */
  uint32_t SPDIF_CH1_CS_159128_ADDR;               /**< , offset: 0x30060 */
  uint32_t SPDIF_CH1_CS_191160_ADDR;               /**< , offset: 0x30064 */
  uint32_t SPDIF_CH2_CS_3100_ADDR;                 /**< , offset: 0x30068 */
  uint32_t SPDIF_CH2_CS_6332_ADDR;                 /**< , offset: 0x3006C */
  uint32_t SPDIF_CH2_CS_9564_ADDR;                 /**< , offset: 0x30070 */
  uint32_t SPDIF_CH2_CS_12796_ADDR;                /**< , offset: 0x30074 */
  uint32_t SPDIF_CH2_CS_159128_ADDR;               /**< , offset: 0x30078 */
  uint32_t SPDIF_CH2_CS_191160_ADDR;               /**< , offset: 0x3007C */
  uint32_t SMPL2PKT_CNTL;                          /**< , offset: 0x30080 */
  uint32_t SMPL2PKT_CNFG;                          /**< , offset: 0x30084 */
  uint32_t FIFO_CNTL;                              /**< , offset: 0x30088 */
  uint32_t FIFO_STTS;                              /**< , offset: 0x3008C */
  uint32_t SUB_PCKT_THRSH;                         /**< , offset: 0x30090 */
  uint8_t RESERVED_3[1900];
  uint32_t SOURCE_PIF_WR_ADDR;                     /**< , offset: 0x30800 */
  uint32_t SOURCE_PIF_WR_REQ;                      /**< , offset: 0x30804 */
  uint32_t SOURCE_PIF_RD_ADDR;                     /**< , offset: 0x30808 */
  uint32_t SOURCE_PIF_RD_REQ;                      /**< , offset: 0x3080C */
  uint32_t SOURCE_PIF_DATA_WR;                     /**< , offset: 0x30810 */
  uint32_t SOURCE_PIF_DATA_RD;                     /**< , offset: 0x30814 */
  uint32_t SOURCE_PIF_FIFO1_FLUSH;                 /**< , offset: 0x30818 */
  uint32_t SOURCE_PIF_FIFO2_FLUSH;                 /**< , offset: 0x3081C */
  uint32_t SOURCE_PIF_STATUS;                      /**< , offset: 0x30820 */
  uint32_t SOURCE_PIF_INTERRUPT_SOURCE;            /**< , offset: 0x30824 */
  uint32_t SOURCE_PIF_INTERRUPT_MASK;              /**< , offset: 0x30828 */
  uint32_t SOURCE_PIF_PKT_ALLOC_REG;               /**< , offset: 0x3082C */
  uint32_t SOURCE_PIF_PKT_ALLOC_WR_EN;             /**< , offset: 0x30830 */
  uint32_t SOURCE_PIF_SW_RESET;                    /**< , offset: 0x30834 */
} volatile *HDMI_TX_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- HDMI_TX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HDMI_TX_Register_Accessor_Macros HDMI_TX - Register accessor macros
 * @{
 */


/* HDMI_TX - Register accessors */
#define HDMI_TX_APB_CTRL_REG(base)               ((base)->APB_CTRL)
#define HDMI_TX_XT_INT_CTRL_REG(base)            ((base)->XT_INT_CTRL)
#define HDMI_TX_MAILBOX_FULL_ADDR_REG(base)      ((base)->MAILBOX_FULL_ADDR)
#define HDMI_TX_MAILBOX_EMPTY_ADDR_REG(base)     ((base)->MAILBOX_EMPTY_ADDR)
#define HDMI_TX_MAILBOX0_WR_DATA_REG(base)       ((base)->MAILBOX0_WR_DATA)
#define HDMI_TX_MAILBOX0_RD_DATA_REG(base)       ((base)->MAILBOX0_RD_DATA)
#define HDMI_TX_KEEP_ALIVE_REG(base)             ((base)->KEEP_ALIVE)
#define HDMI_TX_VER_L_REG(base)                  ((base)->VER_L)
#define HDMI_TX_VER_H_REG(base)                  ((base)->VER_H)
#define HDMI_TX_VER_LIB_L_ADDR_REG(base)         ((base)->VER_LIB_L_ADDR)
#define HDMI_TX_VER_LIB_H_ADDR_REG(base)         ((base)->VER_LIB_H_ADDR)
#define HDMI_TX_SW_DEBUG_L_REG(base)             ((base)->SW_DEBUG_L)
#define HDMI_TX_SW_DEBUG_H_REG(base)             ((base)->SW_DEBUG_H)
#define HDMI_TX_MAILBOX_INT_MASK_REG(base)       ((base)->MAILBOX_INT_MASK)
#define HDMI_TX_MAILBOX_INT_STATUS_REG(base)     ((base)->MAILBOX_INT_STATUS)
#define HDMI_TX_SW_CLK_L_REG(base)               ((base)->SW_CLK_L)
#define HDMI_TX_SW_CLK_H_REG(base)               ((base)->SW_CLK_H)
#define HDMI_TX_SW_EVENTS0_REG(base)             ((base)->SW_EVENTS0)
#define HDMI_TX_SW_EVENTS1_REG(base)             ((base)->SW_EVENTS1)
#define HDMI_TX_SW_EVENTS2_REG(base)             ((base)->SW_EVENTS2)
#define HDMI_TX_SW_EVENTS3_REG(base)             ((base)->SW_EVENTS3)
#define HDMI_TX_XT_OCD_CTRL_REG(base)            ((base)->XT_OCD_CTRL)
#define HDMI_TX_XT_OCD_CTRL_RO_REG(base)         ((base)->XT_OCD_CTRL_RO)
#define HDMI_TX_APB_INT_MASK_REG(base)           ((base)->APB_INT_MASK)
#define HDMI_TX_APB_STATUS_MASK_REG(base)        ((base)->APB_STATUS_MASK)
#define HDMI_TX_AUDIO_SRC_CNTL_REG(base)         ((base)->AUDIO_SRC_CNTL)
#define HDMI_TX_AUDIO_SRC_CNFG_REG(base)         ((base)->AUDIO_SRC_CNFG)
#define HDMI_TX_COM_CH_STTS_BITS_REG(base)       ((base)->COM_CH_STTS_BITS)
#define HDMI_TX_STTS_BIT_CH01_REG(base)          ((base)->STTS_BIT_CH01)
#define HDMI_TX_STTS_BIT_CH23_REG(base)          ((base)->STTS_BIT_CH23)
#define HDMI_TX_STTS_BIT_CH45_REG(base)          ((base)->STTS_BIT_CH45)
#define HDMI_TX_STTS_BIT_CH67_REG(base)          ((base)->STTS_BIT_CH67)
#define HDMI_TX_STTS_BIT_CH89_REG(base)          ((base)->STTS_BIT_CH89)
#define HDMI_TX_STTS_BIT_CH1011_REG(base)        ((base)->STTS_BIT_CH1011)
#define HDMI_TX_STTS_BIT_CH1213_REG(base)        ((base)->STTS_BIT_CH1213)
#define HDMI_TX_STTS_BIT_CH1415_REG(base)        ((base)->STTS_BIT_CH1415)
#define HDMI_TX_STTS_BIT_CH1617_REG(base)        ((base)->STTS_BIT_CH1617)
#define HDMI_TX_STTS_BIT_CH1819_REG(base)        ((base)->STTS_BIT_CH1819)
#define HDMI_TX_STTS_BIT_CH2021_REG(base)        ((base)->STTS_BIT_CH2021)
#define HDMI_TX_STTS_BIT_CH2223_REG(base)        ((base)->STTS_BIT_CH2223)
#define HDMI_TX_STTS_BIT_CH2425_REG(base)        ((base)->STTS_BIT_CH2425)
#define HDMI_TX_STTS_BIT_CH2627_REG(base)        ((base)->STTS_BIT_CH2627)
#define HDMI_TX_STTS_BIT_CH2829_REG(base)        ((base)->STTS_BIT_CH2829)
#define HDMI_TX_STTS_BIT_CH3031_REG(base)        ((base)->STTS_BIT_CH3031)
#define HDMI_TX_SPDIF_CTRL_ADDR_REG(base)        ((base)->SPDIF_CTRL_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_3100_ADDR_REG(base) ((base)->SPDIF_CH1_CS_3100_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_6332_ADDR_REG(base) ((base)->SPDIF_CH1_CS_6332_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_9564_ADDR_REG(base) ((base)->SPDIF_CH1_CS_9564_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_12796_ADDR_REG(base) ((base)->SPDIF_CH1_CS_12796_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_159128_ADDR_REG(base) ((base)->SPDIF_CH1_CS_159128_ADDR)
#define HDMI_TX_SPDIF_CH1_CS_191160_ADDR_REG(base) ((base)->SPDIF_CH1_CS_191160_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_3100_ADDR_REG(base) ((base)->SPDIF_CH2_CS_3100_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_6332_ADDR_REG(base) ((base)->SPDIF_CH2_CS_6332_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_9564_ADDR_REG(base) ((base)->SPDIF_CH2_CS_9564_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_12796_ADDR_REG(base) ((base)->SPDIF_CH2_CS_12796_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_159128_ADDR_REG(base) ((base)->SPDIF_CH2_CS_159128_ADDR)
#define HDMI_TX_SPDIF_CH2_CS_191160_ADDR_REG(base) ((base)->SPDIF_CH2_CS_191160_ADDR)
#define HDMI_TX_SMPL2PKT_CNTL_REG(base)          ((base)->SMPL2PKT_CNTL)
#define HDMI_TX_SMPL2PKT_CNFG_REG(base)          ((base)->SMPL2PKT_CNFG)
#define HDMI_TX_FIFO_CNTL_REG(base)              ((base)->FIFO_CNTL)
#define HDMI_TX_FIFO_STTS_REG(base)              ((base)->FIFO_STTS)
#define HDMI_TX_SUB_PCKT_THRSH_REG(base)         ((base)->SUB_PCKT_THRSH)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_REG(base)     ((base)->SOURCE_PIF_WR_ADDR)
#define HDMI_TX_SOURCE_PIF_WR_REQ_REG(base)      ((base)->SOURCE_PIF_WR_REQ)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_REG(base)     ((base)->SOURCE_PIF_RD_ADDR)
#define HDMI_TX_SOURCE_PIF_RD_REQ_REG(base)      ((base)->SOURCE_PIF_RD_REQ)
#define HDMI_TX_SOURCE_PIF_DATA_WR_REG(base)     ((base)->SOURCE_PIF_DATA_WR)
#define HDMI_TX_SOURCE_PIF_DATA_RD_REG(base)     ((base)->SOURCE_PIF_DATA_RD)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_REG(base) ((base)->SOURCE_PIF_FIFO1_FLUSH)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_REG(base) ((base)->SOURCE_PIF_FIFO2_FLUSH)
#define HDMI_TX_SOURCE_PIF_STATUS_REG(base)      ((base)->SOURCE_PIF_STATUS)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_REG(base) ((base)->SOURCE_PIF_INTERRUPT_SOURCE)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_REG(base) ((base)->SOURCE_PIF_INTERRUPT_MASK)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_REG(base) ((base)->SOURCE_PIF_PKT_ALLOC_REG)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_REG(base) ((base)->SOURCE_PIF_PKT_ALLOC_WR_EN)
#define HDMI_TX_SOURCE_PIF_SW_RESET_REG(base)    ((base)->SOURCE_PIF_SW_RESET)

/*!
 * @}
 */ /* end of group HDMI_TX_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- HDMI_TX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HDMI_TX_Register_Masks HDMI_TX Register Masks
 * @{
 */

/*! @name APB_CTRL -  */
/*! @{ */
#define HDMI_TX_APB_CTRL_apb_xt_reset_MASK       (0x1U)
#define HDMI_TX_APB_CTRL_apb_xt_reset_SHIFT      (0U)
#define HDMI_TX_APB_CTRL_apb_dram_path_MASK      (0x2U)
#define HDMI_TX_APB_CTRL_apb_dram_path_SHIFT     (1U)
#define HDMI_TX_APB_CTRL_apb_iram_path_MASK      (0x4U)
#define HDMI_TX_APB_CTRL_apb_iram_path_SHIFT     (2U)
#define HDMI_TX_APB_CTRL_reserved_0_MASK         (0xFFFFFFF8U)
#define HDMI_TX_APB_CTRL_reserved_0_SHIFT        (3U)
#define HDMI_TX_APB_CTRL_reserved_0(x)           (((uint32_t)(((uint32_t)(x)) << HDMI_TX_APB_CTRL_reserved_0_SHIFT)) & HDMI_TX_APB_CTRL_reserved_0_MASK)
/*! @} */

/*! @name XT_INT_CTRL -  */
/*! @{ */
#define HDMI_TX_XT_INT_CTRL_xt_int_polarity_MASK (0x3U)
#define HDMI_TX_XT_INT_CTRL_xt_int_polarity_SHIFT (0U)
#define HDMI_TX_XT_INT_CTRL_xt_int_polarity(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_XT_INT_CTRL_xt_int_polarity_SHIFT)) & HDMI_TX_XT_INT_CTRL_xt_int_polarity_MASK)
#define HDMI_TX_XT_INT_CTRL_reserved_0_MASK      (0xFFFFFFFCU)
#define HDMI_TX_XT_INT_CTRL_reserved_0_SHIFT     (2U)
#define HDMI_TX_XT_INT_CTRL_reserved_0(x)        (((uint32_t)(((uint32_t)(x)) << HDMI_TX_XT_INT_CTRL_reserved_0_SHIFT)) & HDMI_TX_XT_INT_CTRL_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX_FULL_ADDR -  */
/*! @{ */
#define HDMI_TX_MAILBOX_FULL_ADDR_mailbox_full_MASK (0x1U)
#define HDMI_TX_MAILBOX_FULL_ADDR_mailbox_full_SHIFT (0U)
#define HDMI_TX_MAILBOX_FULL_ADDR_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_MAILBOX_FULL_ADDR_reserved_0_SHIFT (1U)
#define HDMI_TX_MAILBOX_FULL_ADDR_reserved_0(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_FULL_ADDR_reserved_0_SHIFT)) & HDMI_TX_MAILBOX_FULL_ADDR_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX_EMPTY_ADDR -  */
/*! @{ */
#define HDMI_TX_MAILBOX_EMPTY_ADDR_mailbox_empty_MASK (0x1U)
#define HDMI_TX_MAILBOX_EMPTY_ADDR_mailbox_empty_SHIFT (0U)
#define HDMI_TX_MAILBOX_EMPTY_ADDR_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_MAILBOX_EMPTY_ADDR_reserved_0_SHIFT (1U)
#define HDMI_TX_MAILBOX_EMPTY_ADDR_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_EMPTY_ADDR_reserved_0_SHIFT)) & HDMI_TX_MAILBOX_EMPTY_ADDR_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX0_WR_DATA -  */
/*! @{ */
#define HDMI_TX_MAILBOX0_WR_DATA_mailbox0_wr_data_MASK (0xFFU)
#define HDMI_TX_MAILBOX0_WR_DATA_mailbox0_wr_data_SHIFT (0U)
#define HDMI_TX_MAILBOX0_WR_DATA_mailbox0_wr_data(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX0_WR_DATA_mailbox0_wr_data_SHIFT)) & HDMI_TX_MAILBOX0_WR_DATA_mailbox0_wr_data_MASK)
#define HDMI_TX_MAILBOX0_WR_DATA_reserved_0_MASK (0xFFFFFF00U)
#define HDMI_TX_MAILBOX0_WR_DATA_reserved_0_SHIFT (8U)
#define HDMI_TX_MAILBOX0_WR_DATA_reserved_0(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX0_WR_DATA_reserved_0_SHIFT)) & HDMI_TX_MAILBOX0_WR_DATA_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX0_RD_DATA -  */
/*! @{ */
#define HDMI_TX_MAILBOX0_RD_DATA_mailbox0_rd_data_MASK (0xFFU)
#define HDMI_TX_MAILBOX0_RD_DATA_mailbox0_rd_data_SHIFT (0U)
#define HDMI_TX_MAILBOX0_RD_DATA_mailbox0_rd_data(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX0_RD_DATA_mailbox0_rd_data_SHIFT)) & HDMI_TX_MAILBOX0_RD_DATA_mailbox0_rd_data_MASK)
#define HDMI_TX_MAILBOX0_RD_DATA_reserved_0_MASK (0xFFFFFF00U)
#define HDMI_TX_MAILBOX0_RD_DATA_reserved_0_SHIFT (8U)
#define HDMI_TX_MAILBOX0_RD_DATA_reserved_0(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX0_RD_DATA_reserved_0_SHIFT)) & HDMI_TX_MAILBOX0_RD_DATA_reserved_0_MASK)
/*! @} */

/*! @name KEEP_ALIVE -  */
/*! @{ */
#define HDMI_TX_KEEP_ALIVE_keep_alive_cnt_MASK   (0xFFU)
#define HDMI_TX_KEEP_ALIVE_keep_alive_cnt_SHIFT  (0U)
#define HDMI_TX_KEEP_ALIVE_keep_alive_cnt(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_KEEP_ALIVE_keep_alive_cnt_SHIFT)) & HDMI_TX_KEEP_ALIVE_keep_alive_cnt_MASK)
#define HDMI_TX_KEEP_ALIVE_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_KEEP_ALIVE_reserved_0_SHIFT      (8U)
#define HDMI_TX_KEEP_ALIVE_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_KEEP_ALIVE_reserved_0_SHIFT)) & HDMI_TX_KEEP_ALIVE_reserved_0_MASK)
/*! @} */

/*! @name VER_L -  */
/*! @{ */
#define HDMI_TX_VER_L_ver_lsb_MASK               (0xFFU)
#define HDMI_TX_VER_L_ver_lsb_SHIFT              (0U)
#define HDMI_TX_VER_L_ver_lsb(x)                 (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_L_ver_lsb_SHIFT)) & HDMI_TX_VER_L_ver_lsb_MASK)
#define HDMI_TX_VER_L_reserved_0_MASK            (0xFFFFFF00U)
#define HDMI_TX_VER_L_reserved_0_SHIFT           (8U)
#define HDMI_TX_VER_L_reserved_0(x)              (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_L_reserved_0_SHIFT)) & HDMI_TX_VER_L_reserved_0_MASK)
/*! @} */

/*! @name VER_H -  */
/*! @{ */
#define HDMI_TX_VER_H_ver_msb_MASK               (0xFFU)
#define HDMI_TX_VER_H_ver_msb_SHIFT              (0U)
#define HDMI_TX_VER_H_ver_msb(x)                 (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_H_ver_msb_SHIFT)) & HDMI_TX_VER_H_ver_msb_MASK)
#define HDMI_TX_VER_H_reserved_0_MASK            (0xFFFFFF00U)
#define HDMI_TX_VER_H_reserved_0_SHIFT           (8U)
#define HDMI_TX_VER_H_reserved_0(x)              (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_H_reserved_0_SHIFT)) & HDMI_TX_VER_H_reserved_0_MASK)
/*! @} */

/*! @name VER_LIB_L_ADDR -  */
/*! @{ */
#define HDMI_TX_VER_LIB_L_ADDR_sw_lib_ver_l_MASK (0xFFU)
#define HDMI_TX_VER_LIB_L_ADDR_sw_lib_ver_l_SHIFT (0U)
#define HDMI_TX_VER_LIB_L_ADDR_sw_lib_ver_l(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_LIB_L_ADDR_sw_lib_ver_l_SHIFT)) & HDMI_TX_VER_LIB_L_ADDR_sw_lib_ver_l_MASK)
#define HDMI_TX_VER_LIB_L_ADDR_reserved_0_MASK   (0xFFFFFF00U)
#define HDMI_TX_VER_LIB_L_ADDR_reserved_0_SHIFT  (8U)
#define HDMI_TX_VER_LIB_L_ADDR_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_LIB_L_ADDR_reserved_0_SHIFT)) & HDMI_TX_VER_LIB_L_ADDR_reserved_0_MASK)
/*! @} */

/*! @name VER_LIB_H_ADDR -  */
/*! @{ */
#define HDMI_TX_VER_LIB_H_ADDR_sw_lib_ver_h_MASK (0xFFU)
#define HDMI_TX_VER_LIB_H_ADDR_sw_lib_ver_h_SHIFT (0U)
#define HDMI_TX_VER_LIB_H_ADDR_sw_lib_ver_h(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_LIB_H_ADDR_sw_lib_ver_h_SHIFT)) & HDMI_TX_VER_LIB_H_ADDR_sw_lib_ver_h_MASK)
#define HDMI_TX_VER_LIB_H_ADDR_reserved_0_MASK   (0xFFFFFF00U)
#define HDMI_TX_VER_LIB_H_ADDR_reserved_0_SHIFT  (8U)
#define HDMI_TX_VER_LIB_H_ADDR_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_VER_LIB_H_ADDR_reserved_0_SHIFT)) & HDMI_TX_VER_LIB_H_ADDR_reserved_0_MASK)
/*! @} */

/*! @name SW_DEBUG_L -  */
/*! @{ */
#define HDMI_TX_SW_DEBUG_L_sw_debug_7_0_MASK     (0xFFU)
#define HDMI_TX_SW_DEBUG_L_sw_debug_7_0_SHIFT    (0U)
#define HDMI_TX_SW_DEBUG_L_sw_debug_7_0(x)       (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_DEBUG_L_sw_debug_7_0_SHIFT)) & HDMI_TX_SW_DEBUG_L_sw_debug_7_0_MASK)
#define HDMI_TX_SW_DEBUG_L_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_DEBUG_L_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_DEBUG_L_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_DEBUG_L_reserved_0_SHIFT)) & HDMI_TX_SW_DEBUG_L_reserved_0_MASK)
/*! @} */

/*! @name SW_DEBUG_H -  */
/*! @{ */
#define HDMI_TX_SW_DEBUG_H_sw_debug_15_8_MASK    (0xFFU)
#define HDMI_TX_SW_DEBUG_H_sw_debug_15_8_SHIFT   (0U)
#define HDMI_TX_SW_DEBUG_H_sw_debug_15_8(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_DEBUG_H_sw_debug_15_8_SHIFT)) & HDMI_TX_SW_DEBUG_H_sw_debug_15_8_MASK)
#define HDMI_TX_SW_DEBUG_H_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_DEBUG_H_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_DEBUG_H_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_DEBUG_H_reserved_0_SHIFT)) & HDMI_TX_SW_DEBUG_H_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX_INT_MASK -  */
/*! @{ */
#define HDMI_TX_MAILBOX_INT_MASK_mailbox_int_mask_MASK (0x3U)
#define HDMI_TX_MAILBOX_INT_MASK_mailbox_int_mask_SHIFT (0U)
#define HDMI_TX_MAILBOX_INT_MASK_mailbox_int_mask(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_INT_MASK_mailbox_int_mask_SHIFT)) & HDMI_TX_MAILBOX_INT_MASK_mailbox_int_mask_MASK)
#define HDMI_TX_MAILBOX_INT_MASK_reserved_0_MASK (0xFFFFFFFCU)
#define HDMI_TX_MAILBOX_INT_MASK_reserved_0_SHIFT (2U)
#define HDMI_TX_MAILBOX_INT_MASK_reserved_0(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_INT_MASK_reserved_0_SHIFT)) & HDMI_TX_MAILBOX_INT_MASK_reserved_0_MASK)
/*! @} */

/*! @name MAILBOX_INT_STATUS -  */
/*! @{ */
#define HDMI_TX_MAILBOX_INT_STATUS_mailbox_int_status_MASK (0x3U)
#define HDMI_TX_MAILBOX_INT_STATUS_mailbox_int_status_SHIFT (0U)
#define HDMI_TX_MAILBOX_INT_STATUS_mailbox_int_status(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_INT_STATUS_mailbox_int_status_SHIFT)) & HDMI_TX_MAILBOX_INT_STATUS_mailbox_int_status_MASK)
#define HDMI_TX_MAILBOX_INT_STATUS_reserved_0_MASK (0xFFFFFFFCU)
#define HDMI_TX_MAILBOX_INT_STATUS_reserved_0_SHIFT (2U)
#define HDMI_TX_MAILBOX_INT_STATUS_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_MAILBOX_INT_STATUS_reserved_0_SHIFT)) & HDMI_TX_MAILBOX_INT_STATUS_reserved_0_MASK)
/*! @} */

/*! @name SW_CLK_L -  */
/*! @{ */
#define HDMI_TX_SW_CLK_L_sw_clock_val_l_MASK     (0xFFU)
#define HDMI_TX_SW_CLK_L_sw_clock_val_l_SHIFT    (0U)
#define HDMI_TX_SW_CLK_L_sw_clock_val_l(x)       (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_CLK_L_sw_clock_val_l_SHIFT)) & HDMI_TX_SW_CLK_L_sw_clock_val_l_MASK)
#define HDMI_TX_SW_CLK_L_reserved_0_MASK         (0xFFFFFF00U)
#define HDMI_TX_SW_CLK_L_reserved_0_SHIFT        (8U)
#define HDMI_TX_SW_CLK_L_reserved_0(x)           (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_CLK_L_reserved_0_SHIFT)) & HDMI_TX_SW_CLK_L_reserved_0_MASK)
/*! @} */

/*! @name SW_CLK_H -  */
/*! @{ */
#define HDMI_TX_SW_CLK_H_sw_clock_val_h_MASK     (0xFFU)
#define HDMI_TX_SW_CLK_H_sw_clock_val_h_SHIFT    (0U)
#define HDMI_TX_SW_CLK_H_sw_clock_val_h(x)       (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_CLK_H_sw_clock_val_h_SHIFT)) & HDMI_TX_SW_CLK_H_sw_clock_val_h_MASK)
#define HDMI_TX_SW_CLK_H_reserved_0_MASK         (0xFFFFFF00U)
#define HDMI_TX_SW_CLK_H_reserved_0_SHIFT        (8U)
#define HDMI_TX_SW_CLK_H_reserved_0(x)           (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_CLK_H_reserved_0_SHIFT)) & HDMI_TX_SW_CLK_H_reserved_0_MASK)
/*! @} */

/*! @name SW_EVENTS0 -  */
/*! @{ */
#define HDMI_TX_SW_EVENTS0_sw_events7_0_MASK     (0xFFU)
#define HDMI_TX_SW_EVENTS0_sw_events7_0_SHIFT    (0U)
#define HDMI_TX_SW_EVENTS0_sw_events7_0(x)       (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS0_sw_events7_0_SHIFT)) & HDMI_TX_SW_EVENTS0_sw_events7_0_MASK)
#define HDMI_TX_SW_EVENTS0_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_EVENTS0_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_EVENTS0_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS0_reserved_0_SHIFT)) & HDMI_TX_SW_EVENTS0_reserved_0_MASK)
/*! @} */

/*! @name SW_EVENTS1 -  */
/*! @{ */
#define HDMI_TX_SW_EVENTS1_sw_events15_8_MASK    (0xFFU)
#define HDMI_TX_SW_EVENTS1_sw_events15_8_SHIFT   (0U)
#define HDMI_TX_SW_EVENTS1_sw_events15_8(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS1_sw_events15_8_SHIFT)) & HDMI_TX_SW_EVENTS1_sw_events15_8_MASK)
#define HDMI_TX_SW_EVENTS1_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_EVENTS1_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_EVENTS1_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS1_reserved_0_SHIFT)) & HDMI_TX_SW_EVENTS1_reserved_0_MASK)
/*! @} */

/*! @name SW_EVENTS2 -  */
/*! @{ */
#define HDMI_TX_SW_EVENTS2_sw_events23_16_MASK   (0xFFU)
#define HDMI_TX_SW_EVENTS2_sw_events23_16_SHIFT  (0U)
#define HDMI_TX_SW_EVENTS2_sw_events23_16(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS2_sw_events23_16_SHIFT)) & HDMI_TX_SW_EVENTS2_sw_events23_16_MASK)
#define HDMI_TX_SW_EVENTS2_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_EVENTS2_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_EVENTS2_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS2_reserved_0_SHIFT)) & HDMI_TX_SW_EVENTS2_reserved_0_MASK)
/*! @} */

/*! @name SW_EVENTS3 -  */
/*! @{ */
#define HDMI_TX_SW_EVENTS3_sw_events31_24_MASK   (0xFFU)
#define HDMI_TX_SW_EVENTS3_sw_events31_24_SHIFT  (0U)
#define HDMI_TX_SW_EVENTS3_sw_events31_24(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS3_sw_events31_24_SHIFT)) & HDMI_TX_SW_EVENTS3_sw_events31_24_MASK)
#define HDMI_TX_SW_EVENTS3_reserved_0_MASK       (0xFFFFFF00U)
#define HDMI_TX_SW_EVENTS3_reserved_0_SHIFT      (8U)
#define HDMI_TX_SW_EVENTS3_reserved_0(x)         (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SW_EVENTS3_reserved_0_SHIFT)) & HDMI_TX_SW_EVENTS3_reserved_0_MASK)
/*! @} */

/*! @name XT_OCD_CTRL -  */
/*! @{ */
#define HDMI_TX_XT_OCD_CTRL_xt_dreset_MASK       (0x1U)
#define HDMI_TX_XT_OCD_CTRL_xt_dreset_SHIFT      (0U)
#define HDMI_TX_XT_OCD_CTRL_xt_ocdhaltonreset_MASK (0x2U)
#define HDMI_TX_XT_OCD_CTRL_xt_ocdhaltonreset_SHIFT (1U)
#define HDMI_TX_XT_OCD_CTRL_reserved_0_MASK      (0xFFFFFFFCU)
#define HDMI_TX_XT_OCD_CTRL_reserved_0_SHIFT     (2U)
#define HDMI_TX_XT_OCD_CTRL_reserved_0(x)        (((uint32_t)(((uint32_t)(x)) << HDMI_TX_XT_OCD_CTRL_reserved_0_SHIFT)) & HDMI_TX_XT_OCD_CTRL_reserved_0_MASK)
/*! @} */

/*! @name XT_OCD_CTRL_RO -  */
/*! @{ */
#define HDMI_TX_XT_OCD_CTRL_RO_xt_xocdmode_MASK  (0x1U)
#define HDMI_TX_XT_OCD_CTRL_RO_xt_xocdmode_SHIFT (0U)
#define HDMI_TX_XT_OCD_CTRL_RO_reserved_0_MASK   (0xFFFFFFFEU)
#define HDMI_TX_XT_OCD_CTRL_RO_reserved_0_SHIFT  (1U)
#define HDMI_TX_XT_OCD_CTRL_RO_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_XT_OCD_CTRL_RO_reserved_0_SHIFT)) & HDMI_TX_XT_OCD_CTRL_RO_reserved_0_MASK)
/*! @} */

/*! @name APB_INT_MASK -  */
/*! @{ */
#define HDMI_TX_APB_INT_MASK_apb_intr_mask_MASK  (0x7U)
#define HDMI_TX_APB_INT_MASK_apb_intr_mask_SHIFT (0U)
#define HDMI_TX_APB_INT_MASK_apb_intr_mask(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_APB_INT_MASK_apb_intr_mask_SHIFT)) & HDMI_TX_APB_INT_MASK_apb_intr_mask_MASK)
#define HDMI_TX_APB_INT_MASK_reserved_0_MASK     (0xFFFFFFF8U)
#define HDMI_TX_APB_INT_MASK_reserved_0_SHIFT    (3U)
#define HDMI_TX_APB_INT_MASK_reserved_0(x)       (((uint32_t)(((uint32_t)(x)) << HDMI_TX_APB_INT_MASK_reserved_0_SHIFT)) & HDMI_TX_APB_INT_MASK_reserved_0_MASK)
/*! @} */

/*! @name APB_STATUS_MASK -  */
/*! @{ */
#define HDMI_TX_APB_STATUS_MASK_apb_intr_status_MASK (0x7U)
#define HDMI_TX_APB_STATUS_MASK_apb_intr_status_SHIFT (0U)
#define HDMI_TX_APB_STATUS_MASK_apb_intr_status(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_APB_STATUS_MASK_apb_intr_status_SHIFT)) & HDMI_TX_APB_STATUS_MASK_apb_intr_status_MASK)
#define HDMI_TX_APB_STATUS_MASK_reserved_0_MASK  (0xFFFFFFF8U)
#define HDMI_TX_APB_STATUS_MASK_reserved_0_SHIFT (3U)
#define HDMI_TX_APB_STATUS_MASK_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_APB_STATUS_MASK_reserved_0_SHIFT)) & HDMI_TX_APB_STATUS_MASK_reserved_0_MASK)
/*! @} */

/*! @name AUDIO_SRC_CNTL -  */
/*! @{ */
#define HDMI_TX_AUDIO_SRC_CNTL_sw_rst_MASK       (0x1U)
#define HDMI_TX_AUDIO_SRC_CNTL_sw_rst_SHIFT      (0U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_dec_start_MASK (0x2U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_dec_start_SHIFT (1U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_block_start_force_MASK (0x4U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_block_start_force_SHIFT (2U)
#define HDMI_TX_AUDIO_SRC_CNTL_spdif_ts_en_MASK  (0x8U)
#define HDMI_TX_AUDIO_SRC_CNTL_spdif_ts_en_SHIFT (3U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_ts_en_MASK    (0x10U)
#define HDMI_TX_AUDIO_SRC_CNTL_i2s_ts_en_SHIFT   (4U)
#define HDMI_TX_AUDIO_SRC_CNTL_valid_bits_force_MASK (0x20U)
#define HDMI_TX_AUDIO_SRC_CNTL_valid_bits_force_SHIFT (5U)
#define HDMI_TX_AUDIO_SRC_CNTL_valid_all_MASK    (0x40U)
#define HDMI_TX_AUDIO_SRC_CNTL_valid_all_SHIFT   (6U)
#define HDMI_TX_AUDIO_SRC_CNTL_reserved_0_MASK   (0xFFFFFF80U)
#define HDMI_TX_AUDIO_SRC_CNTL_reserved_0_SHIFT  (7U)
#define HDMI_TX_AUDIO_SRC_CNTL_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNTL_reserved_0_SHIFT)) & HDMI_TX_AUDIO_SRC_CNTL_reserved_0_MASK)
/*! @} */

/*! @name AUDIO_SRC_CNFG -  */
/*! @{ */
#define HDMI_TX_AUDIO_SRC_CNFG_low_index_msb_MASK (0x1U)
#define HDMI_TX_AUDIO_SRC_CNFG_low_index_msb_SHIFT (0U)
#define HDMI_TX_AUDIO_SRC_CNFG_ws_polarity_MASK  (0x2U)
#define HDMI_TX_AUDIO_SRC_CNFG_ws_polarity_SHIFT (1U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_ch_num_MASK (0x7CU)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_ch_num_SHIFT (2U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_ch_num(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_audio_ch_num_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_audio_ch_num_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_just_MASK (0x180U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_just_SHIFT (7U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_just(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_audio_sample_just_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_audio_sample_just_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_width_MASK (0x600U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_width_SHIFT (9U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_sample_width(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_audio_sample_width_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_audio_sample_width_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_trans_smpl_width_MASK (0x1800U)
#define HDMI_TX_AUDIO_SRC_CNFG_trans_smpl_width_SHIFT (11U)
#define HDMI_TX_AUDIO_SRC_CNFG_trans_smpl_width(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_trans_smpl_width_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_trans_smpl_width_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_channel_type_MASK (0x1E000U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_channel_type_SHIFT (13U)
#define HDMI_TX_AUDIO_SRC_CNFG_audio_channel_type(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_audio_channel_type_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_audio_channel_type_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_i2s_dec_port_en_MASK (0x1E0000U)
#define HDMI_TX_AUDIO_SRC_CNFG_i2s_dec_port_en_SHIFT (17U)
#define HDMI_TX_AUDIO_SRC_CNFG_i2s_dec_port_en(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_i2s_dec_port_en_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_i2s_dec_port_en_MASK)
#define HDMI_TX_AUDIO_SRC_CNFG_reserved_0_MASK   (0xFFE00000U)
#define HDMI_TX_AUDIO_SRC_CNFG_reserved_0_SHIFT  (21U)
#define HDMI_TX_AUDIO_SRC_CNFG_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_AUDIO_SRC_CNFG_reserved_0_SHIFT)) & HDMI_TX_AUDIO_SRC_CNFG_reserved_0_MASK)
/*! @} */

/*! @name COM_CH_STTS_BITS -  */
/*! @{ */
#define HDMI_TX_COM_CH_STTS_BITS_Byte0_MASK      (0xFFU)
#define HDMI_TX_COM_CH_STTS_BITS_Byte0_SHIFT     (0U)
#define HDMI_TX_COM_CH_STTS_BITS_Byte0(x)        (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_Byte0_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_Byte0_MASK)
#define HDMI_TX_COM_CH_STTS_BITS_Category_Code_MASK (0xFF00U)
#define HDMI_TX_COM_CH_STTS_BITS_Category_Code_SHIFT (8U)
#define HDMI_TX_COM_CH_STTS_BITS_Category_Code(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_Category_Code_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_Category_Code_MASK)
#define HDMI_TX_COM_CH_STTS_BITS_Sampling_Freq_MASK (0xF0000U)
#define HDMI_TX_COM_CH_STTS_BITS_Sampling_Freq_SHIFT (16U)
#define HDMI_TX_COM_CH_STTS_BITS_Sampling_Freq(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_Sampling_Freq_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_Sampling_Freq_MASK)
#define HDMI_TX_COM_CH_STTS_BITS_Clock_accuracy_MASK (0xF00000U)
#define HDMI_TX_COM_CH_STTS_BITS_Clock_accuracy_SHIFT (20U)
#define HDMI_TX_COM_CH_STTS_BITS_Clock_accuracy(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_Clock_accuracy_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_Clock_accuracy_MASK)
#define HDMI_TX_COM_CH_STTS_BITS_Original_samp_freq_MASK (0xF000000U)
#define HDMI_TX_COM_CH_STTS_BITS_Original_samp_freq_SHIFT (24U)
#define HDMI_TX_COM_CH_STTS_BITS_Original_samp_freq(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_Original_samp_freq_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_Original_samp_freq_MASK)
#define HDMI_TX_COM_CH_STTS_BITS_reserved_0_MASK (0xF0000000U)
#define HDMI_TX_COM_CH_STTS_BITS_reserved_0_SHIFT (28U)
#define HDMI_TX_COM_CH_STTS_BITS_reserved_0(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_COM_CH_STTS_BITS_reserved_0_SHIFT)) & HDMI_TX_COM_CH_STTS_BITS_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH01 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH01_source_num_ch0_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH01_source_num_ch0_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH01_source_num_ch0(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_source_num_ch0_SHIFT)) & HDMI_TX_STTS_BIT_CH01_source_num_ch0_MASK)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch0_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch0_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_channel_num_ch0_SHIFT)) & HDMI_TX_STTS_BIT_CH01_channel_num_ch0_MASK)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch0_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch0_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_word_length_ch0_SHIFT)) & HDMI_TX_STTS_BIT_CH01_word_length_ch0_MASK)
#define HDMI_TX_STTS_BIT_CH01_source_num_ch1_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH01_source_num_ch1_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH01_source_num_ch1(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_source_num_ch1_SHIFT)) & HDMI_TX_STTS_BIT_CH01_source_num_ch1_MASK)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch1_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch1_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH01_channel_num_ch1(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_channel_num_ch1_SHIFT)) & HDMI_TX_STTS_BIT_CH01_channel_num_ch1_MASK)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch1_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch1_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH01_word_length_ch1(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_word_length_ch1_SHIFT)) & HDMI_TX_STTS_BIT_CH01_word_length_ch1_MASK)
#define HDMI_TX_STTS_BIT_CH01_valid_bits1_0_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH01_valid_bits1_0_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH01_valid_bits1_0(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_valid_bits1_0_SHIFT)) & HDMI_TX_STTS_BIT_CH01_valid_bits1_0_MASK)
#define HDMI_TX_STTS_BIT_CH01_reserved_0_MASK    (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH01_reserved_0_SHIFT   (26U)
#define HDMI_TX_STTS_BIT_CH01_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH01_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH01_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH23 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH23_source_num_ch2_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH23_source_num_ch2_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH23_source_num_ch2(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_source_num_ch2_SHIFT)) & HDMI_TX_STTS_BIT_CH23_source_num_ch2_MASK)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch2_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch2_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch2(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_channel_num_ch2_SHIFT)) & HDMI_TX_STTS_BIT_CH23_channel_num_ch2_MASK)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch2_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch2_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch2(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_word_length_ch2_SHIFT)) & HDMI_TX_STTS_BIT_CH23_word_length_ch2_MASK)
#define HDMI_TX_STTS_BIT_CH23_source_num_ch3_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH23_source_num_ch3_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH23_source_num_ch3(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_source_num_ch3_SHIFT)) & HDMI_TX_STTS_BIT_CH23_source_num_ch3_MASK)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch3_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch3_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH23_channel_num_ch3(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_channel_num_ch3_SHIFT)) & HDMI_TX_STTS_BIT_CH23_channel_num_ch3_MASK)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch3_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch3_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH23_word_length_ch3(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_word_length_ch3_SHIFT)) & HDMI_TX_STTS_BIT_CH23_word_length_ch3_MASK)
#define HDMI_TX_STTS_BIT_CH23_valid_bits3_2_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH23_valid_bits3_2_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH23_valid_bits3_2(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_valid_bits3_2_SHIFT)) & HDMI_TX_STTS_BIT_CH23_valid_bits3_2_MASK)
#define HDMI_TX_STTS_BIT_CH23_reserved_0_MASK    (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH23_reserved_0_SHIFT   (26U)
#define HDMI_TX_STTS_BIT_CH23_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH23_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH23_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH45 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH45_source_num_ch4_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH45_source_num_ch4_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH45_source_num_ch4(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_source_num_ch4_SHIFT)) & HDMI_TX_STTS_BIT_CH45_source_num_ch4_MASK)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch4_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch4_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch4(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_channel_num_ch4_SHIFT)) & HDMI_TX_STTS_BIT_CH45_channel_num_ch4_MASK)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch4_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch4_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch4(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_word_length_ch4_SHIFT)) & HDMI_TX_STTS_BIT_CH45_word_length_ch4_MASK)
#define HDMI_TX_STTS_BIT_CH45_source_num_ch5_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH45_source_num_ch5_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH45_source_num_ch5(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_source_num_ch5_SHIFT)) & HDMI_TX_STTS_BIT_CH45_source_num_ch5_MASK)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch5_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch5_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH45_channel_num_ch5(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_channel_num_ch5_SHIFT)) & HDMI_TX_STTS_BIT_CH45_channel_num_ch5_MASK)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch5_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch5_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH45_word_length_ch5(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_word_length_ch5_SHIFT)) & HDMI_TX_STTS_BIT_CH45_word_length_ch5_MASK)
#define HDMI_TX_STTS_BIT_CH45_valid_bits5_4_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH45_valid_bits5_4_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH45_valid_bits5_4(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_valid_bits5_4_SHIFT)) & HDMI_TX_STTS_BIT_CH45_valid_bits5_4_MASK)
#define HDMI_TX_STTS_BIT_CH45_reserved_0_MASK    (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH45_reserved_0_SHIFT   (26U)
#define HDMI_TX_STTS_BIT_CH45_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH45_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH45_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH67 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH67_source_num_ch6_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH67_source_num_ch6_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH67_source_num_ch6(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_source_num_ch6_SHIFT)) & HDMI_TX_STTS_BIT_CH67_source_num_ch6_MASK)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch6_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch6_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch6(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_channel_num_ch6_SHIFT)) & HDMI_TX_STTS_BIT_CH67_channel_num_ch6_MASK)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch6_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch6_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch6(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_word_length_ch6_SHIFT)) & HDMI_TX_STTS_BIT_CH67_word_length_ch6_MASK)
#define HDMI_TX_STTS_BIT_CH67_source_num_ch7_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH67_source_num_ch7_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH67_source_num_ch7(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_source_num_ch7_SHIFT)) & HDMI_TX_STTS_BIT_CH67_source_num_ch7_MASK)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch7_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch7_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH67_channel_num_ch7(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_channel_num_ch7_SHIFT)) & HDMI_TX_STTS_BIT_CH67_channel_num_ch7_MASK)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch7_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch7_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH67_word_length_ch7(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_word_length_ch7_SHIFT)) & HDMI_TX_STTS_BIT_CH67_word_length_ch7_MASK)
#define HDMI_TX_STTS_BIT_CH67_valid_bits7_6_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH67_valid_bits7_6_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH67_valid_bits7_6(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_valid_bits7_6_SHIFT)) & HDMI_TX_STTS_BIT_CH67_valid_bits7_6_MASK)
#define HDMI_TX_STTS_BIT_CH67_reserved_0_MASK    (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH67_reserved_0_SHIFT   (26U)
#define HDMI_TX_STTS_BIT_CH67_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH67_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH67_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH89 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH89_source_num_ch8_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH89_source_num_ch8_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH89_source_num_ch8(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_source_num_ch8_SHIFT)) & HDMI_TX_STTS_BIT_CH89_source_num_ch8_MASK)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch8_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch8_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch8(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_channel_num_ch8_SHIFT)) & HDMI_TX_STTS_BIT_CH89_channel_num_ch8_MASK)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch8_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch8_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch8(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_word_length_ch8_SHIFT)) & HDMI_TX_STTS_BIT_CH89_word_length_ch8_MASK)
#define HDMI_TX_STTS_BIT_CH89_source_num_ch9_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH89_source_num_ch9_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH89_source_num_ch9(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_source_num_ch9_SHIFT)) & HDMI_TX_STTS_BIT_CH89_source_num_ch9_MASK)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch9_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch9_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH89_channel_num_ch9(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_channel_num_ch9_SHIFT)) & HDMI_TX_STTS_BIT_CH89_channel_num_ch9_MASK)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch9_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch9_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH89_word_length_ch9(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_word_length_ch9_SHIFT)) & HDMI_TX_STTS_BIT_CH89_word_length_ch9_MASK)
#define HDMI_TX_STTS_BIT_CH89_valid_bits9_8_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH89_valid_bits9_8_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH89_valid_bits9_8(x)   (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_valid_bits9_8_SHIFT)) & HDMI_TX_STTS_BIT_CH89_valid_bits9_8_MASK)
#define HDMI_TX_STTS_BIT_CH89_reserved_0_MASK    (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH89_reserved_0_SHIFT   (26U)
#define HDMI_TX_STTS_BIT_CH89_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH89_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH89_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH1011 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch10_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch10_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch10(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_source_num_ch10_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_source_num_ch10_MASK)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch10_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch10_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch10(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_channel_num_ch10_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_channel_num_ch10_MASK)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch10_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch10_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch10(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_word_length_ch10_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_word_length_ch10_MASK)
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch11_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch11_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH1011_source_num_ch11(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_source_num_ch11_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_source_num_ch11_MASK)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch11_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch11_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH1011_channel_num_ch11(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_channel_num_ch11_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_channel_num_ch11_MASK)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch11_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch11_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH1011_word_length_ch11(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_word_length_ch11_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_word_length_ch11_MASK)
#define HDMI_TX_STTS_BIT_CH1011_valid_bits11_10_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH1011_valid_bits11_10_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH1011_valid_bits11_10(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_valid_bits11_10_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_valid_bits11_10_MASK)
#define HDMI_TX_STTS_BIT_CH1011_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH1011_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH1011_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1011_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH1011_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH1213 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch12_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch12_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch12(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_source_num_ch12_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_source_num_ch12_MASK)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch12_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch12_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch12(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_channel_num_ch12_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_channel_num_ch12_MASK)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch12_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch12_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch12(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_word_length_ch12_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_word_length_ch12_MASK)
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch13_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch13_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH1213_source_num_ch13(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_source_num_ch13_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_source_num_ch13_MASK)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch13_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch13_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH1213_channel_num_ch13(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_channel_num_ch13_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_channel_num_ch13_MASK)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch13_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch13_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH1213_word_length_ch13(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_word_length_ch13_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_word_length_ch13_MASK)
#define HDMI_TX_STTS_BIT_CH1213_valid_bits13_12_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH1213_valid_bits13_12_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH1213_valid_bits13_12(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_valid_bits13_12_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_valid_bits13_12_MASK)
#define HDMI_TX_STTS_BIT_CH1213_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH1213_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH1213_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1213_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH1213_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH1415 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch14_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch14_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch14(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_source_num_ch14_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_source_num_ch14_MASK)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch14_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch14_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch14(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_channel_num_ch14_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_channel_num_ch14_MASK)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch14_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch14_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch14(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_word_length_ch14_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_word_length_ch14_MASK)
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch15_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch15_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH1415_source_num_ch15(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_source_num_ch15_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_source_num_ch15_MASK)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch15_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch15_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH1415_channel_num_ch15(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_channel_num_ch15_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_channel_num_ch15_MASK)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch15_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch15_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH1415_word_length_ch15(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_word_length_ch15_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_word_length_ch15_MASK)
#define HDMI_TX_STTS_BIT_CH1415_valid_bits15_14_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH1415_valid_bits15_14_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH1415_valid_bits15_14(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_valid_bits15_14_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_valid_bits15_14_MASK)
#define HDMI_TX_STTS_BIT_CH1415_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH1415_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH1415_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1415_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH1415_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH1617 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch16_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch16_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch16(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_source_num_ch16_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_source_num_ch16_MASK)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch16_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch16_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch16(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_channel_num_ch16_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_channel_num_ch16_MASK)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch16_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch16_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch16(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_word_length_ch16_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_word_length_ch16_MASK)
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch17_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch17_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH1617_source_num_ch17(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_source_num_ch17_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_source_num_ch17_MASK)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch17_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch17_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH1617_channel_num_ch17(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_channel_num_ch17_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_channel_num_ch17_MASK)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch17_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch17_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH1617_word_length_ch17(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_word_length_ch17_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_word_length_ch17_MASK)
#define HDMI_TX_STTS_BIT_CH1617_valid_bits17_16_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH1617_valid_bits17_16_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH1617_valid_bits17_16(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_valid_bits17_16_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_valid_bits17_16_MASK)
#define HDMI_TX_STTS_BIT_CH1617_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH1617_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH1617_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1617_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH1617_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH1819 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch18_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch18_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch18(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_source_num_ch18_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_source_num_ch18_MASK)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch18_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch18_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch18(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_channel_num_ch18_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_channel_num_ch18_MASK)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch18_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch18_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch18(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_word_length_ch18_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_word_length_ch18_MASK)
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch19_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch19_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH1819_source_num_ch19(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_source_num_ch19_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_source_num_ch19_MASK)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch19_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch19_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH1819_channel_num_ch19(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_channel_num_ch19_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_channel_num_ch19_MASK)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch19_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch19_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH1819_word_length_ch19(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_word_length_ch19_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_word_length_ch19_MASK)
#define HDMI_TX_STTS_BIT_CH1819_valid_bits19_18_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH1819_valid_bits19_18_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH1819_valid_bits19_18(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_valid_bits19_18_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_valid_bits19_18_MASK)
#define HDMI_TX_STTS_BIT_CH1819_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH1819_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH1819_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH1819_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH1819_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH2021 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch20_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch20_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch20(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_source_num_ch20_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_source_num_ch20_MASK)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch20_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch20_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch20(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_channel_num_ch20_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_channel_num_ch20_MASK)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch20_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch20_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch20(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_word_length_ch20_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_word_length_ch20_MASK)
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch21_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch21_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH2021_source_num_ch21(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_source_num_ch21_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_source_num_ch21_MASK)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch21_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch21_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH2021_channel_num_ch21(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_channel_num_ch21_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_channel_num_ch21_MASK)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch21_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch21_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH2021_word_length_ch21(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_word_length_ch21_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_word_length_ch21_MASK)
#define HDMI_TX_STTS_BIT_CH2021_valid_bits21_20_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH2021_valid_bits21_20_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH2021_valid_bits21_20(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_valid_bits21_20_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_valid_bits21_20_MASK)
#define HDMI_TX_STTS_BIT_CH2021_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH2021_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH2021_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2021_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH2021_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH2223 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch22_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch22_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch22(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_source_num_ch22_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_source_num_ch22_MASK)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch22_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch22_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch22(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_channel_num_ch22_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_channel_num_ch22_MASK)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch22_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch22_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch22(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_word_length_ch22_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_word_length_ch22_MASK)
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch23_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch23_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH2223_source_num_ch23(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_source_num_ch23_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_source_num_ch23_MASK)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch23_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch23_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH2223_channel_num_ch23(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_channel_num_ch23_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_channel_num_ch23_MASK)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch23_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch23_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH2223_word_length_ch23(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_word_length_ch23_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_word_length_ch23_MASK)
#define HDMI_TX_STTS_BIT_CH2223_valid_bits23_22_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH2223_valid_bits23_22_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH2223_valid_bits23_22(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_valid_bits23_22_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_valid_bits23_22_MASK)
#define HDMI_TX_STTS_BIT_CH2223_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH2223_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH2223_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2223_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH2223_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH2425 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch24_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch24_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch24(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_source_num_ch24_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_source_num_ch24_MASK)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch24_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch24_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch24(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_channel_num_ch24_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_channel_num_ch24_MASK)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch24_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch24_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch24(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_word_length_ch24_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_word_length_ch24_MASK)
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch25_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch25_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH2425_source_num_ch25(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_source_num_ch25_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_source_num_ch25_MASK)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch25_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch25_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH2425_channel_num_ch25(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_channel_num_ch25_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_channel_num_ch25_MASK)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch25_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch25_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH2425_word_length_ch25(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_word_length_ch25_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_word_length_ch25_MASK)
#define HDMI_TX_STTS_BIT_CH2425_valid_bits25_24_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH2425_valid_bits25_24_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH2425_valid_bits25_24(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_valid_bits25_24_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_valid_bits25_24_MASK)
#define HDMI_TX_STTS_BIT_CH2425_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH2425_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH2425_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2425_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH2425_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH2627 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch26_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch26_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch26(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_source_num_ch26_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_source_num_ch26_MASK)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch26_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch26_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch26(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_channel_num_ch26_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_channel_num_ch26_MASK)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch26_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch26_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch26(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_word_length_ch26_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_word_length_ch26_MASK)
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch27_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch27_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH2627_source_num_ch27(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_source_num_ch27_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_source_num_ch27_MASK)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch27_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch27_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH2627_channel_num_ch27(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_channel_num_ch27_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_channel_num_ch27_MASK)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch27_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch27_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH2627_word_length_ch27(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_word_length_ch27_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_word_length_ch27_MASK)
#define HDMI_TX_STTS_BIT_CH2627_valid_bits27_26_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH2627_valid_bits27_26_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH2627_valid_bits27_26(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_valid_bits27_26_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_valid_bits27_26_MASK)
#define HDMI_TX_STTS_BIT_CH2627_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH2627_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH2627_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2627_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH2627_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH2829 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch28_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch28_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch28(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_source_num_ch28_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_source_num_ch28_MASK)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch28_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch28_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch28(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_channel_num_ch28_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_channel_num_ch28_MASK)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch28_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch28_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch28(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_word_length_ch28_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_word_length_ch28_MASK)
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch29_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch29_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH2829_source_num_ch29(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_source_num_ch29_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_source_num_ch29_MASK)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch29_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch29_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH2829_channel_num_ch29(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_channel_num_ch29_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_channel_num_ch29_MASK)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch29_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch29_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH2829_word_length_ch29(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_word_length_ch29_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_word_length_ch29_MASK)
#define HDMI_TX_STTS_BIT_CH2829_valid_bits29_28_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH2829_valid_bits29_28_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH2829_valid_bits29_28(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_valid_bits29_28_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_valid_bits29_28_MASK)
#define HDMI_TX_STTS_BIT_CH2829_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH2829_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH2829_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH2829_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH2829_reserved_0_MASK)
/*! @} */

/*! @name STTS_BIT_CH3031 -  */
/*! @{ */
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch30_MASK (0xFU)
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch30_SHIFT (0U)
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch30(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_source_num_ch30_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_source_num_ch30_MASK)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch30_MASK (0xF0U)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch30_SHIFT (4U)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch30(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_channel_num_ch30_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_channel_num_ch30_MASK)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch30_MASK (0xF00U)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch30_SHIFT (8U)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch30(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_word_length_ch30_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_word_length_ch30_MASK)
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch31_MASK (0xF000U)
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch31_SHIFT (12U)
#define HDMI_TX_STTS_BIT_CH3031_source_num_ch31(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_source_num_ch31_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_source_num_ch31_MASK)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch31_MASK (0xF0000U)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch31_SHIFT (16U)
#define HDMI_TX_STTS_BIT_CH3031_channel_num_ch31(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_channel_num_ch31_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_channel_num_ch31_MASK)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch31_MASK (0xF00000U)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch31_SHIFT (20U)
#define HDMI_TX_STTS_BIT_CH3031_word_length_ch31(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_word_length_ch31_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_word_length_ch31_MASK)
#define HDMI_TX_STTS_BIT_CH3031_valid_bits31_30_MASK (0x3000000U)
#define HDMI_TX_STTS_BIT_CH3031_valid_bits31_30_SHIFT (24U)
#define HDMI_TX_STTS_BIT_CH3031_valid_bits31_30(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_valid_bits31_30_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_valid_bits31_30_MASK)
#define HDMI_TX_STTS_BIT_CH3031_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_STTS_BIT_CH3031_reserved_0_SHIFT (26U)
#define HDMI_TX_STTS_BIT_CH3031_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_STTS_BIT_CH3031_reserved_0_SHIFT)) & HDMI_TX_STTS_BIT_CH3031_reserved_0_MASK)
/*! @} */

/*! @name SPDIF_CTRL_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_avg_win_MASK (0x7U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_avg_win_SHIFT (0U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_avg_win(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_avg_win_SHIFT)) & HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_avg_win_MASK)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_thrsh_MASK (0x7F8U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_thrsh_SHIFT (3U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_thrsh(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_thrsh_SHIFT)) & HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_thrsh_MASK)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_fifo_mid_range_MASK (0x7F800U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_fifo_mid_range_SHIFT (11U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_fifo_mid_range(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CTRL_ADDR_spdif_fifo_mid_range_SHIFT)) & HDMI_TX_SPDIF_CTRL_ADDR_spdif_fifo_mid_range_MASK)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_bypass_MASK (0x80000U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_bypass_SHIFT (19U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_avg_sel_MASK (0x100000U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_avg_sel_SHIFT (20U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_enable_MASK (0x200000U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_enable_SHIFT (21U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_status_MASK (0x3C00000U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_status_SHIFT (22U)
#define HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_status(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_status_SHIFT)) & HDMI_TX_SPDIF_CTRL_ADDR_spdif_jitter_status_MASK)
#define HDMI_TX_SPDIF_CTRL_ADDR_reserved_0_MASK  (0xFC000000U)
#define HDMI_TX_SPDIF_CTRL_ADDR_reserved_0_SHIFT (26U)
#define HDMI_TX_SPDIF_CTRL_ADDR_reserved_0(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CTRL_ADDR_reserved_0_SHIFT)) & HDMI_TX_SPDIF_CTRL_ADDR_reserved_0_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_3100_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_3100_ADDR_spdif_ch1_st_stts_bits3100_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_3100_ADDR_spdif_ch1_st_stts_bits3100_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_3100_ADDR_spdif_ch1_st_stts_bits3100(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_3100_ADDR_spdif_ch1_st_stts_bits3100_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_3100_ADDR_spdif_ch1_st_stts_bits3100_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_6332_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_6332_ADDR_spdif_ch1_st_stts_bits6332_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_6332_ADDR_spdif_ch1_st_stts_bits6332_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_6332_ADDR_spdif_ch1_st_stts_bits6332(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_6332_ADDR_spdif_ch1_st_stts_bits6332_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_6332_ADDR_spdif_ch1_st_stts_bits6332_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_9564_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_9564_ADDR_spdif_ch1_st_stts_bits9564_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_9564_ADDR_spdif_ch1_st_stts_bits9564_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_9564_ADDR_spdif_ch1_st_stts_bits9564(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_9564_ADDR_spdif_ch1_st_stts_bits9564_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_9564_ADDR_spdif_ch1_st_stts_bits9564_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_12796_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_12796_ADDR_spdif_ch1_st_stts_bits12796_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_12796_ADDR_spdif_ch1_st_stts_bits12796_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_12796_ADDR_spdif_ch1_st_stts_bits12796(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_12796_ADDR_spdif_ch1_st_stts_bits12796_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_12796_ADDR_spdif_ch1_st_stts_bits12796_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_159128_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_159128_ADDR_spdif_ch1_st_stts_bits159128_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_159128_ADDR_spdif_ch1_st_stts_bits159128_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_159128_ADDR_spdif_ch1_st_stts_bits159128(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_159128_ADDR_spdif_ch1_st_stts_bits159128_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_159128_ADDR_spdif_ch1_st_stts_bits159128_MASK)
/*! @} */

/*! @name SPDIF_CH1_CS_191160_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH1_CS_191160_ADDR_spdif_ch1_st_stts_bits191160_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH1_CS_191160_ADDR_spdif_ch1_st_stts_bits191160_SHIFT (0U)
#define HDMI_TX_SPDIF_CH1_CS_191160_ADDR_spdif_ch1_st_stts_bits191160(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH1_CS_191160_ADDR_spdif_ch1_st_stts_bits191160_SHIFT)) & HDMI_TX_SPDIF_CH1_CS_191160_ADDR_spdif_ch1_st_stts_bits191160_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_3100_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_3100_ADDR_spdif_ch2_st_stts_bits3100_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_3100_ADDR_spdif_ch2_st_stts_bits3100_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_3100_ADDR_spdif_ch2_st_stts_bits3100(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_3100_ADDR_spdif_ch2_st_stts_bits3100_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_3100_ADDR_spdif_ch2_st_stts_bits3100_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_6332_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_6332_ADDR_spdif_ch2_st_stts_bits6332_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_6332_ADDR_spdif_ch2_st_stts_bits6332_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_6332_ADDR_spdif_ch2_st_stts_bits6332(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_6332_ADDR_spdif_ch2_st_stts_bits6332_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_6332_ADDR_spdif_ch2_st_stts_bits6332_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_9564_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_9564_ADDR_spdif_ch2_st_stts_bits9564_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_9564_ADDR_spdif_ch2_st_stts_bits9564_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_9564_ADDR_spdif_ch2_st_stts_bits9564(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_9564_ADDR_spdif_ch2_st_stts_bits9564_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_9564_ADDR_spdif_ch2_st_stts_bits9564_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_12796_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_12796_ADDR_spdif_ch2_st_stts_bits12796_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_12796_ADDR_spdif_ch2_st_stts_bits12796_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_12796_ADDR_spdif_ch2_st_stts_bits12796(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_12796_ADDR_spdif_ch2_st_stts_bits12796_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_12796_ADDR_spdif_ch2_st_stts_bits12796_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_159128_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_159128_ADDR_spdif_ch2_st_stts_bits159128_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_159128_ADDR_spdif_ch2_st_stts_bits159128_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_159128_ADDR_spdif_ch2_st_stts_bits159128(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_159128_ADDR_spdif_ch2_st_stts_bits159128_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_159128_ADDR_spdif_ch2_st_stts_bits159128_MASK)
/*! @} */

/*! @name SPDIF_CH2_CS_191160_ADDR -  */
/*! @{ */
#define HDMI_TX_SPDIF_CH2_CS_191160_ADDR_spdif_ch2_st_stts_bits191160_MASK (0xFFFFFFFFU)
#define HDMI_TX_SPDIF_CH2_CS_191160_ADDR_spdif_ch2_st_stts_bits191160_SHIFT (0U)
#define HDMI_TX_SPDIF_CH2_CS_191160_ADDR_spdif_ch2_st_stts_bits191160(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SPDIF_CH2_CS_191160_ADDR_spdif_ch2_st_stts_bits191160_SHIFT)) & HDMI_TX_SPDIF_CH2_CS_191160_ADDR_spdif_ch2_st_stts_bits191160_MASK)
/*! @} */

/*! @name SMPL2PKT_CNTL -  */
/*! @{ */
#define HDMI_TX_SMPL2PKT_CNTL_sw_rst_MASK        (0x1U)
#define HDMI_TX_SMPL2PKT_CNTL_sw_rst_SHIFT       (0U)
#define HDMI_TX_SMPL2PKT_CNTL_smpl2pkt_en_MASK   (0x2U)
#define HDMI_TX_SMPL2PKT_CNTL_smpl2pkt_en_SHIFT  (1U)
#define HDMI_TX_SMPL2PKT_CNTL_reserved_0_MASK    (0xFFFFFFFCU)
#define HDMI_TX_SMPL2PKT_CNTL_reserved_0_SHIFT   (2U)
#define HDMI_TX_SMPL2PKT_CNTL_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNTL_reserved_0_SHIFT)) & HDMI_TX_SMPL2PKT_CNTL_reserved_0_MASK)
/*! @} */

/*! @name SMPL2PKT_CNFG -  */
/*! @{ */
#define HDMI_TX_SMPL2PKT_CNFG_max_num_ch_MASK    (0x1FU)
#define HDMI_TX_SMPL2PKT_CNFG_max_num_ch_SHIFT   (0U)
#define HDMI_TX_SMPL2PKT_CNFG_max_num_ch(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_max_num_ch_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_max_num_ch_MASK)
#define HDMI_TX_SMPL2PKT_CNFG_num_of_i2s_ports_MASK (0x60U)
#define HDMI_TX_SMPL2PKT_CNFG_num_of_i2s_ports_SHIFT (5U)
#define HDMI_TX_SMPL2PKT_CNFG_num_of_i2s_ports(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_num_of_i2s_ports_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_num_of_i2s_ports_MASK)
#define HDMI_TX_SMPL2PKT_CNFG_audio_type_MASK    (0x780U)
#define HDMI_TX_SMPL2PKT_CNFG_audio_type_SHIFT   (7U)
#define HDMI_TX_SMPL2PKT_CNFG_audio_type(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_audio_type_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_audio_type_MASK)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sub_pckt_num_MASK (0x3800U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sub_pckt_num_SHIFT (11U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sub_pckt_num(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_cfg_sub_pckt_num_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_cfg_sub_pckt_num_MASK)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_block_lpcm_first_pkt_MASK (0x4000U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_block_lpcm_first_pkt_SHIFT (14U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_en_auto_sub_pckt_num_MASK (0x8000U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_en_auto_sub_pckt_num_SHIFT (15U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_MASK (0xF0000U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_SHIFT (16U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_MASK)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_force_MASK (0x100000U)
#define HDMI_TX_SMPL2PKT_CNFG_cfg_sample_present_force_SHIFT (20U)
#define HDMI_TX_SMPL2PKT_CNFG_reserved_0_MASK    (0xFFE00000U)
#define HDMI_TX_SMPL2PKT_CNFG_reserved_0_SHIFT   (21U)
#define HDMI_TX_SMPL2PKT_CNFG_reserved_0(x)      (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SMPL2PKT_CNFG_reserved_0_SHIFT)) & HDMI_TX_SMPL2PKT_CNFG_reserved_0_MASK)
/*! @} */

/*! @name FIFO_CNTL -  */
/*! @{ */
#define HDMI_TX_FIFO_CNTL_fifo_sw_rst_MASK       (0x1U)
#define HDMI_TX_FIFO_CNTL_fifo_sw_rst_SHIFT      (0U)
#define HDMI_TX_FIFO_CNTL_sync_wr_to_ch_zero_MASK (0x2U)
#define HDMI_TX_FIFO_CNTL_sync_wr_to_ch_zero_SHIFT (1U)
#define HDMI_TX_FIFO_CNTL_fifo_dir_MASK          (0x4U)
#define HDMI_TX_FIFO_CNTL_fifo_dir_SHIFT         (2U)
#define HDMI_TX_FIFO_CNTL_fifo_empty_calc_MASK   (0x8U)
#define HDMI_TX_FIFO_CNTL_fifo_empty_calc_SHIFT  (3U)
#define HDMI_TX_FIFO_CNTL_cfg_dis_port3_MASK     (0x10U)
#define HDMI_TX_FIFO_CNTL_cfg_dis_port3_SHIFT    (4U)
#define HDMI_TX_FIFO_CNTL_reserved_0_MASK        (0xFFFFFFE0U)
#define HDMI_TX_FIFO_CNTL_reserved_0_SHIFT       (5U)
#define HDMI_TX_FIFO_CNTL_reserved_0(x)          (((uint32_t)(((uint32_t)(x)) << HDMI_TX_FIFO_CNTL_reserved_0_SHIFT)) & HDMI_TX_FIFO_CNTL_reserved_0_MASK)
/*! @} */

/*! @name FIFO_STTS -  */
/*! @{ */
#define HDMI_TX_FIFO_STTS_wfull_MASK             (0x1U)
#define HDMI_TX_FIFO_STTS_wfull_SHIFT            (0U)
#define HDMI_TX_FIFO_STTS_rempty_MASK            (0x2U)
#define HDMI_TX_FIFO_STTS_rempty_SHIFT           (1U)
#define HDMI_TX_FIFO_STTS_overrun_MASK           (0x4U)
#define HDMI_TX_FIFO_STTS_overrun_SHIFT          (2U)
#define HDMI_TX_FIFO_STTS_underrun_MASK          (0x8U)
#define HDMI_TX_FIFO_STTS_underrun_SHIFT         (3U)
#define HDMI_TX_FIFO_STTS_reserved_0_MASK        (0xFFFFFFF0U)
#define HDMI_TX_FIFO_STTS_reserved_0_SHIFT       (4U)
#define HDMI_TX_FIFO_STTS_reserved_0(x)          (((uint32_t)(((uint32_t)(x)) << HDMI_TX_FIFO_STTS_reserved_0_SHIFT)) & HDMI_TX_FIFO_STTS_reserved_0_MASK)
/*! @} */

/*! @name SUB_PCKT_THRSH -  */
/*! @{ */
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh1_MASK (0xFFU)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh1_SHIFT (0U)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh1(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh1_SHIFT)) & HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh1_MASK)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh2_MASK (0xFF00U)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh2_SHIFT (8U)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh2(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh2_SHIFT)) & HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh2_MASK)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh3_MASK (0xFF0000U)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh3_SHIFT (16U)
#define HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh3(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh3_SHIFT)) & HDMI_TX_SUB_PCKT_THRSH_cfg_mem_fifo_thrsh3_MASK)
#define HDMI_TX_SUB_PCKT_THRSH_reserved_0_MASK   (0xFF000000U)
#define HDMI_TX_SUB_PCKT_THRSH_reserved_0_SHIFT  (24U)
#define HDMI_TX_SUB_PCKT_THRSH_reserved_0(x)     (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SUB_PCKT_THRSH_reserved_0_SHIFT)) & HDMI_TX_SUB_PCKT_THRSH_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_WR_ADDR -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_WR_ADDR_wr_addr_MASK  (0xFU)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_wr_addr_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_wr_addr(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_WR_ADDR_wr_addr_SHIFT)) & HDMI_TX_SOURCE_PIF_WR_ADDR_wr_addr_MASK)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_reserved_0_MASK (0xFFFFFFF0U)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_reserved_0_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_WR_ADDR_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_WR_ADDR_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_WR_ADDR_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_WR_REQ -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_WR_REQ_host_wr_MASK   (0x1U)
#define HDMI_TX_SOURCE_PIF_WR_REQ_host_wr_SHIFT  (0U)
#define HDMI_TX_SOURCE_PIF_WR_REQ_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_WR_REQ_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_WR_REQ_reserved_0(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_WR_REQ_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_WR_REQ_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_RD_ADDR -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_RD_ADDR_rd_addr_MASK  (0xFU)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_rd_addr_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_rd_addr(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_RD_ADDR_rd_addr_SHIFT)) & HDMI_TX_SOURCE_PIF_RD_ADDR_rd_addr_MASK)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_reserved_0_MASK (0xFFFFFFF0U)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_reserved_0_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_RD_ADDR_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_RD_ADDR_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_RD_ADDR_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_RD_REQ -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_RD_REQ_host_rd_MASK   (0x1U)
#define HDMI_TX_SOURCE_PIF_RD_REQ_host_rd_SHIFT  (0U)
#define HDMI_TX_SOURCE_PIF_RD_REQ_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_RD_REQ_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_RD_REQ_reserved_0(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_RD_REQ_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_RD_REQ_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_DATA_WR -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_DATA_WR_data_wr_MASK  (0xFFFFFFFFU)
#define HDMI_TX_SOURCE_PIF_DATA_WR_data_wr_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_DATA_WR_data_wr(x)    (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_DATA_WR_data_wr_SHIFT)) & HDMI_TX_SOURCE_PIF_DATA_WR_data_wr_MASK)
/*! @} */

/*! @name SOURCE_PIF_DATA_RD -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_DATA_RD_fifo2_data_out_MASK (0xFFFFFFFFU)
#define HDMI_TX_SOURCE_PIF_DATA_RD_fifo2_data_out_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_DATA_RD_fifo2_data_out(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_DATA_RD_fifo2_data_out_SHIFT)) & HDMI_TX_SOURCE_PIF_DATA_RD_fifo2_data_out_MASK)
/*! @} */

/*! @name SOURCE_PIF_FIFO1_FLUSH -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_fifo1_flush_MASK (0x1U)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_fifo1_flush_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_FIFO2_FLUSH -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_fifo2_flush_MASK (0x1U)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_fifo2_flush_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_STATUS -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_STATUS_source_pkt_mem_ctrl_fsm_state_MASK (0x3U)
#define HDMI_TX_SOURCE_PIF_STATUS_source_pkt_mem_ctrl_fsm_state_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_STATUS_source_pkt_mem_ctrl_fsm_state(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_STATUS_source_pkt_mem_ctrl_fsm_state_SHIFT)) & HDMI_TX_SOURCE_PIF_STATUS_source_pkt_mem_ctrl_fsm_state_MASK)
#define HDMI_TX_SOURCE_PIF_STATUS_fifo1_full_MASK (0x4U)
#define HDMI_TX_SOURCE_PIF_STATUS_fifo1_full_SHIFT (2U)
#define HDMI_TX_SOURCE_PIF_STATUS_fifo2_empty_MASK (0x8U)
#define HDMI_TX_SOURCE_PIF_STATUS_fifo2_empty_SHIFT (3U)
#define HDMI_TX_SOURCE_PIF_STATUS_reserved_0_MASK (0xFFFFFFF0U)
#define HDMI_TX_SOURCE_PIF_STATUS_reserved_0_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_STATUS_reserved_0(x)  (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_STATUS_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_STATUS_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_INTERRUPT_SOURCE -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_host_wr_done_int_MASK (0x1U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_host_wr_done_int_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_host_rd_done_int_MASK (0x2U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_host_rd_done_int_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_nonvalid_type_requested_int_MASK (0x4U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_nonvalid_type_requested_int_SHIFT (2U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_pslverr_MASK (0x8U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_pslverr_SHIFT (3U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_alloc_wr_done_MASK (0x10U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_alloc_wr_done_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_alloc_wr_error_MASK (0x20U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_alloc_wr_error_SHIFT (5U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo1_overflow_MASK (0x40U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo1_overflow_SHIFT (6U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo1_underflow_MASK (0x80U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo1_underflow_SHIFT (7U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo2_overflow_MASK (0x100U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo2_overflow_SHIFT (8U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo2_underflow_MASK (0x200U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_fifo2_underflow_SHIFT (9U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_reserved_0_MASK (0xFFFFFC00U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_reserved_0_SHIFT (10U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_INTERRUPT_MASK -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_host_wr_done_int_mask_MASK (0x1U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_host_wr_done_int_mask_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_host_rd_done_int_mask_MASK (0x2U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_host_rd_done_int_mask_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_nonvalid_type_requested_int_mask_MASK (0x4U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_nonvalid_type_requested_int_mask_SHIFT (2U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_pslverr_mask_MASK (0x8U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_pslverr_mask_SHIFT (3U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_alloc_wr_done_mask_MASK (0x10U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_alloc_wr_done_mask_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_alloc_wr_error_mask_MASK (0x20U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_alloc_wr_error_mask_SHIFT (5U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo1_overflow_mask_MASK (0x40U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo1_overflow_mask_SHIFT (6U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo1_underflow_mask_MASK (0x80U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo1_underflow_mask_SHIFT (7U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo2_overflow_mask_MASK (0x100U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo2_overflow_mask_SHIFT (8U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo2_underflow_mask_MASK (0x200U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_fifo2_underflow_mask_SHIFT (9U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_reserved_0_MASK (0xFFFFFC00U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_reserved_0_SHIFT (10U)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_PKT_ALLOC_REG -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_pkt_alloc_address_MASK (0xFU)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_pkt_alloc_address_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_pkt_alloc_address(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_pkt_alloc_address_SHIFT)) & HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_pkt_alloc_address_MASK)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_0_MASK (0xF0U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_0_SHIFT (4U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_0_MASK)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_packet_type_MASK (0xFF00U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_packet_type_SHIFT (8U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_packet_type(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_packet_type_SHIFT)) & HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_packet_type_MASK)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_type_valid_MASK (0x10000U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_type_valid_SHIFT (16U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_active_idle_type_MASK (0x20000U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_active_idle_type_SHIFT (17U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_1_MASK (0xFFFC0000U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_1_SHIFT (18U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_1(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_1_SHIFT)) & HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_reserved_1_MASK)
/*! @} */

/*! @name SOURCE_PIF_PKT_ALLOC_WR_EN -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_pkt_alloc_wr_en_MASK (0x1U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_pkt_alloc_wr_en_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_reserved_0_MASK)
/*! @} */

/*! @name SOURCE_PIF_SW_RESET -  */
/*! @{ */
#define HDMI_TX_SOURCE_PIF_SW_RESET_sw_rst_MASK  (0x1U)
#define HDMI_TX_SOURCE_PIF_SW_RESET_sw_rst_SHIFT (0U)
#define HDMI_TX_SOURCE_PIF_SW_RESET_reserved_0_MASK (0xFFFFFFFEU)
#define HDMI_TX_SOURCE_PIF_SW_RESET_reserved_0_SHIFT (1U)
#define HDMI_TX_SOURCE_PIF_SW_RESET_reserved_0(x) (((uint32_t)(((uint32_t)(x)) << HDMI_TX_SOURCE_PIF_SW_RESET_reserved_0_SHIFT)) & HDMI_TX_SOURCE_PIF_SW_RESET_reserved_0_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group HDMI_TX_Register_Masks */


/* HDMI_TX - Peripheral instance base addresses */
/** Peripheral HDMI_TX base pointer */
#define HDMI_TX_BASE_PTR                         ((HDMI_TX_MemMapPtr)0x32C00000u)
/** Array initializer of HDMI_TX peripheral base pointers */
#define HDMI_TX_BASE_PTRS                        { HDMI_TX_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- HDMI_TX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup HDMI_TX_Register_Accessor_Macros HDMI_TX - Register accessor macros
 * @{
 */


/* HDMI_TX - Register instance definitions */
/* HDMI_TX */
#define HDMI_TX_APB_CTRL                         HDMI_TX_APB_CTRL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_XT_INT_CTRL                      HDMI_TX_XT_INT_CTRL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX_FULL_ADDR                HDMI_TX_MAILBOX_FULL_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX_EMPTY_ADDR               HDMI_TX_MAILBOX_EMPTY_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX0_WR_DATA                 HDMI_TX_MAILBOX0_WR_DATA_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX0_RD_DATA                 HDMI_TX_MAILBOX0_RD_DATA_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_KEEP_ALIVE                       HDMI_TX_KEEP_ALIVE_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_VER_L                            HDMI_TX_VER_L_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_VER_H                            HDMI_TX_VER_H_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_VER_LIB_L_ADDR                   HDMI_TX_VER_LIB_L_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_VER_LIB_H_ADDR                   HDMI_TX_VER_LIB_H_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_DEBUG_L                       HDMI_TX_SW_DEBUG_L_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_DEBUG_H                       HDMI_TX_SW_DEBUG_H_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX_INT_MASK                 HDMI_TX_MAILBOX_INT_MASK_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_MAILBOX_INT_STATUS               HDMI_TX_MAILBOX_INT_STATUS_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_CLK_L                         HDMI_TX_SW_CLK_L_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_CLK_H                         HDMI_TX_SW_CLK_H_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_EVENTS0                       HDMI_TX_SW_EVENTS0_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_EVENTS1                       HDMI_TX_SW_EVENTS1_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_EVENTS2                       HDMI_TX_SW_EVENTS2_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SW_EVENTS3                       HDMI_TX_SW_EVENTS3_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_XT_OCD_CTRL                      HDMI_TX_XT_OCD_CTRL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_XT_OCD_CTRL_RO                   HDMI_TX_XT_OCD_CTRL_RO_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_APB_INT_MASK                     HDMI_TX_APB_INT_MASK_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_APB_STATUS_MASK                  HDMI_TX_APB_STATUS_MASK_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_AUDIO_SRC_CNTL                   HDMI_TX_AUDIO_SRC_CNTL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_AUDIO_SRC_CNFG                   HDMI_TX_AUDIO_SRC_CNFG_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_COM_CH_STTS_BITS                 HDMI_TX_COM_CH_STTS_BITS_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH01                    HDMI_TX_STTS_BIT_CH01_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH23                    HDMI_TX_STTS_BIT_CH23_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH45                    HDMI_TX_STTS_BIT_CH45_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH67                    HDMI_TX_STTS_BIT_CH67_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH89                    HDMI_TX_STTS_BIT_CH89_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH1011                  HDMI_TX_STTS_BIT_CH1011_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH1213                  HDMI_TX_STTS_BIT_CH1213_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH1415                  HDMI_TX_STTS_BIT_CH1415_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH1617                  HDMI_TX_STTS_BIT_CH1617_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH1819                  HDMI_TX_STTS_BIT_CH1819_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH2021                  HDMI_TX_STTS_BIT_CH2021_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH2223                  HDMI_TX_STTS_BIT_CH2223_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH2425                  HDMI_TX_STTS_BIT_CH2425_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH2627                  HDMI_TX_STTS_BIT_CH2627_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH2829                  HDMI_TX_STTS_BIT_CH2829_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_STTS_BIT_CH3031                  HDMI_TX_STTS_BIT_CH3031_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CTRL_ADDR                  HDMI_TX_SPDIF_CTRL_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_3100_ADDR           HDMI_TX_SPDIF_CH1_CS_3100_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_6332_ADDR           HDMI_TX_SPDIF_CH1_CS_6332_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_9564_ADDR           HDMI_TX_SPDIF_CH1_CS_9564_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_12796_ADDR          HDMI_TX_SPDIF_CH1_CS_12796_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_159128_ADDR         HDMI_TX_SPDIF_CH1_CS_159128_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH1_CS_191160_ADDR         HDMI_TX_SPDIF_CH1_CS_191160_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_3100_ADDR           HDMI_TX_SPDIF_CH2_CS_3100_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_6332_ADDR           HDMI_TX_SPDIF_CH2_CS_6332_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_9564_ADDR           HDMI_TX_SPDIF_CH2_CS_9564_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_12796_ADDR          HDMI_TX_SPDIF_CH2_CS_12796_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_159128_ADDR         HDMI_TX_SPDIF_CH2_CS_159128_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SPDIF_CH2_CS_191160_ADDR         HDMI_TX_SPDIF_CH2_CS_191160_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SMPL2PKT_CNTL                    HDMI_TX_SMPL2PKT_CNTL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SMPL2PKT_CNFG                    HDMI_TX_SMPL2PKT_CNFG_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_FIFO_CNTL                        HDMI_TX_FIFO_CNTL_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_FIFO_STTS                        HDMI_TX_FIFO_STTS_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SUB_PCKT_THRSH                   HDMI_TX_SUB_PCKT_THRSH_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_WR_ADDR               HDMI_TX_SOURCE_PIF_WR_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_WR_REQ                HDMI_TX_SOURCE_PIF_WR_REQ_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_RD_ADDR               HDMI_TX_SOURCE_PIF_RD_ADDR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_RD_REQ                HDMI_TX_SOURCE_PIF_RD_REQ_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_DATA_WR               HDMI_TX_SOURCE_PIF_DATA_WR_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_DATA_RD               HDMI_TX_SOURCE_PIF_DATA_RD_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_FIFO1_FLUSH           HDMI_TX_SOURCE_PIF_FIFO1_FLUSH_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_FIFO2_FLUSH           HDMI_TX_SOURCE_PIF_FIFO2_FLUSH_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_STATUS                HDMI_TX_SOURCE_PIF_STATUS_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE      HDMI_TX_SOURCE_PIF_INTERRUPT_SOURCE_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_INTERRUPT_MASK        HDMI_TX_SOURCE_PIF_INTERRUPT_MASK_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG         HDMI_TX_SOURCE_PIF_PKT_ALLOC_REG_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN       HDMI_TX_SOURCE_PIF_PKT_ALLOC_WR_EN_REG(HDMI_TX_BASE_PTR)
#define HDMI_TX_SOURCE_PIF_SW_RESET              HDMI_TX_SOURCE_PIF_SW_RESET_REG(HDMI_TX_BASE_PTR)

/*!
 * @}
 */ /* end of group HDMI_TX_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group HDMI_TX_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2C
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Peripheral I2C
 * @{
 */

/** I2C - Peripheral register structure */
typedef struct I2C_MemMap {
  uint16_t IADR;                                   /**< I2C Address Register, offset: 0x0 */
  uint8_t RESERVED_0[2];
  uint16_t IFDR;                                   /**< I2C Frequency Divider Register, offset: 0x4 */
  uint8_t RESERVED_1[2];
  uint16_t I2CR;                                   /**< I2C Control Register, offset: 0x8 */
  uint8_t RESERVED_2[2];
  uint16_t I2SR;                                   /**< I2C Status Register, offset: 0xC */
  uint8_t RESERVED_3[2];
  uint16_t I2DR;                                   /**< I2C Data I/O Register, offset: 0x10 */
} volatile *I2C_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register accessors */
#define I2C_IADR_REG(base)                       ((base)->IADR)
#define I2C_IFDR_REG(base)                       ((base)->IFDR)
#define I2C_I2CR_REG(base)                       ((base)->I2CR)
#define I2C_I2SR_REG(base)                       ((base)->I2SR)
#define I2C_I2DR_REG(base)                       ((base)->I2DR)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Masks I2C Register Masks
 * @{
 */

/*! @name IADR - I2C Address Register */
/*! @{ */
#define I2C_IADR_ADR_MASK                        (0xFEU)
#define I2C_IADR_ADR_SHIFT                       (1U)
#define I2C_IADR_ADR(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_IADR_ADR_SHIFT)) & I2C_IADR_ADR_MASK)
/*! @} */

/*! @name IFDR - I2C Frequency Divider Register */
/*! @{ */
#define I2C_IFDR_IC_MASK                         (0x3FU)
#define I2C_IFDR_IC_SHIFT                        (0U)
#define I2C_IFDR_IC(x)                           (((uint16_t)(((uint16_t)(x)) << I2C_IFDR_IC_SHIFT)) & I2C_IFDR_IC_MASK)
/*! @} */

/*! @name I2CR - I2C Control Register */
/*! @{ */
#define I2C_I2CR_RSTA_MASK                       (0x4U)
#define I2C_I2CR_RSTA_SHIFT                      (2U)
#define I2C_I2CR_TXAK_MASK                       (0x8U)
#define I2C_I2CR_TXAK_SHIFT                      (3U)
#define I2C_I2CR_MTX_MASK                        (0x10U)
#define I2C_I2CR_MTX_SHIFT                       (4U)
#define I2C_I2CR_MSTA_MASK                       (0x20U)
#define I2C_I2CR_MSTA_SHIFT                      (5U)
#define I2C_I2CR_IIEN_MASK                       (0x40U)
#define I2C_I2CR_IIEN_SHIFT                      (6U)
#define I2C_I2CR_IEN_MASK                        (0x80U)
#define I2C_I2CR_IEN_SHIFT                       (7U)
/*! @} */

/*! @name I2SR - I2C Status Register */
/*! @{ */
#define I2C_I2SR_RXAK_MASK                       (0x1U)
#define I2C_I2SR_RXAK_SHIFT                      (0U)
#define I2C_I2SR_IIF_MASK                        (0x2U)
#define I2C_I2SR_IIF_SHIFT                       (1U)
#define I2C_I2SR_SRW_MASK                        (0x4U)
#define I2C_I2SR_SRW_SHIFT                       (2U)
#define I2C_I2SR_IAL_MASK                        (0x10U)
#define I2C_I2SR_IAL_SHIFT                       (4U)
#define I2C_I2SR_IBB_MASK                        (0x20U)
#define I2C_I2SR_IBB_SHIFT                       (5U)
#define I2C_I2SR_IAAS_MASK                       (0x40U)
#define I2C_I2SR_IAAS_SHIFT                      (6U)
#define I2C_I2SR_ICF_MASK                        (0x80U)
#define I2C_I2SR_ICF_SHIFT                       (7U)
/*! @} */

/*! @name I2DR - I2C Data I/O Register */
/*! @{ */
#define I2C_I2DR_DATA_MASK                       (0xFFU)
#define I2C_I2DR_DATA_SHIFT                      (0U)
#define I2C_I2DR_DATA(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2DR_DATA_SHIFT)) & I2C_I2DR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I2C_Register_Masks */


/* I2C - Peripheral instance base addresses */
/** Peripheral I2C1 base pointer */
#define I2C1_BASE_PTR                            ((I2C_MemMapPtr)0x30A20000u)
/** Peripheral I2C2 base pointer */
#define I2C2_BASE_PTR                            ((I2C_MemMapPtr)0x30A30000u)
/** Peripheral I2C3 base pointer */
#define I2C3_BASE_PTR                            ((I2C_MemMapPtr)0x30A40000u)
/** Peripheral I2C4 base pointer */
#define I2C4_BASE_PTR                            ((I2C_MemMapPtr)0x30A50000u)
/** Array initializer of I2C peripheral base pointers */
#define I2C_BASE_PTRS                            { I2C1_BASE_PTR, I2C2_BASE_PTR, I2C3_BASE_PTR, I2C4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register instance definitions */
/* I2C1 */
#define I2C1_IADR                                I2C_IADR_REG(I2C1_BASE_PTR)
#define I2C1_IFDR                                I2C_IFDR_REG(I2C1_BASE_PTR)
#define I2C1_I2CR                                I2C_I2CR_REG(I2C1_BASE_PTR)
#define I2C1_I2SR                                I2C_I2SR_REG(I2C1_BASE_PTR)
#define I2C1_I2DR                                I2C_I2DR_REG(I2C1_BASE_PTR)
/* I2C2 */
#define I2C2_IADR                                I2C_IADR_REG(I2C2_BASE_PTR)
#define I2C2_IFDR                                I2C_IFDR_REG(I2C2_BASE_PTR)
#define I2C2_I2CR                                I2C_I2CR_REG(I2C2_BASE_PTR)
#define I2C2_I2SR                                I2C_I2SR_REG(I2C2_BASE_PTR)
#define I2C2_I2DR                                I2C_I2DR_REG(I2C2_BASE_PTR)
/* I2C3 */
#define I2C3_IADR                                I2C_IADR_REG(I2C3_BASE_PTR)
#define I2C3_IFDR                                I2C_IFDR_REG(I2C3_BASE_PTR)
#define I2C3_I2CR                                I2C_I2CR_REG(I2C3_BASE_PTR)
#define I2C3_I2SR                                I2C_I2SR_REG(I2C3_BASE_PTR)
#define I2C3_I2DR                                I2C_I2DR_REG(I2C3_BASE_PTR)
/* I2C4 */
#define I2C4_IADR                                I2C_IADR_REG(I2C4_BASE_PTR)
#define I2C4_IFDR                                I2C_IFDR_REG(I2C4_BASE_PTR)
#define I2C4_I2CR                                I2C_I2CR_REG(I2C4_BASE_PTR)
#define I2C4_I2SR                                I2C_I2SR_REG(I2C4_BASE_PTR)
#define I2C4_I2DR                                I2C_I2DR_REG(I2C4_BASE_PTR)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2C_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2S
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Peripheral I2S
 * @{
 */

/** I2S - Peripheral register structure */
typedef struct I2S_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t TCSR;                                   /**< SAI Transmit Control Register, offset: 0x8 */
  uint32_t TCR1;                                   /**< SAI Transmit Configuration 1 Register, offset: 0xC */
  uint32_t TCR2;                                   /**< SAI Transmit Configuration 2 Register, offset: 0x10 */
  uint32_t TCR3;                                   /**< SAI Transmit Configuration 3 Register, offset: 0x14 */
  uint32_t TCR4;                                   /**< SAI Transmit Configuration 4 Register, offset: 0x18 */
  uint32_t TCR5;                                   /**< SAI Transmit Configuration 5 Register, offset: 0x1C */
  uint32_t TDR[8];                                 /**< SAI Transmit Data Register, array offset: 0x20, array step: 0x4 */
  uint32_t TFR[8];                                 /**< SAI Transmit FIFO Register, array offset: 0x40, array step: 0x4 */
  uint32_t TMR;                                    /**< SAI Transmit Mask Register, offset: 0x60 */
  uint8_t RESERVED_0[36];
  uint32_t RCSR;                                   /**< SAI Receive Control Register, offset: 0x88 */
  uint32_t RCR1;                                   /**< SAI Receive Configuration 1 Register, offset: 0x8C */
  uint32_t RCR2;                                   /**< SAI Receive Configuration 2 Register, offset: 0x90 */
  uint32_t RCR3;                                   /**< SAI Receive Configuration 3 Register, offset: 0x94 */
  uint32_t RCR4;                                   /**< SAI Receive Configuration 4 Register, offset: 0x98 */
  uint32_t RCR5;                                   /**< SAI Receive Configuration 5 Register, offset: 0x9C */
  uint32_t RDR[8];                                 /**< SAI Receive Data Register, array offset: 0xA0, array step: 0x4 */
  uint32_t RFR[8];                                 /**< SAI Receive FIFO Register, array offset: 0xC0, array step: 0x4 */
  uint32_t RMR;                                    /**< SAI Receive Mask Register, offset: 0xE0 */
} volatile *I2S_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register accessors */
#define I2S_VERID_REG(base)                      ((base)->VERID)
#define I2S_PARAM_REG(base)                      ((base)->PARAM)
#define I2S_TCSR_REG(base)                       ((base)->TCSR)
#define I2S_TCR1_REG(base)                       ((base)->TCR1)
#define I2S_TCR2_REG(base)                       ((base)->TCR2)
#define I2S_TCR3_REG(base)                       ((base)->TCR3)
#define I2S_TCR4_REG(base)                       ((base)->TCR4)
#define I2S_TCR5_REG(base)                       ((base)->TCR5)
#define I2S_TDR_REG(base,index)                  ((base)->TDR[index])
#define I2S_TFR_REG(base,index)                  ((base)->TFR[index])
#define I2S_TMR_REG(base)                        ((base)->TMR)
#define I2S_RCSR_REG(base)                       ((base)->RCSR)
#define I2S_RCR1_REG(base)                       ((base)->RCR1)
#define I2S_RCR2_REG(base)                       ((base)->RCR2)
#define I2S_RCR3_REG(base)                       ((base)->RCR3)
#define I2S_RCR4_REG(base)                       ((base)->RCR4)
#define I2S_RCR5_REG(base)                       ((base)->RCR5)
#define I2S_RDR_REG(base,index)                  ((base)->RDR[index])
#define I2S_RFR_REG(base,index)                  ((base)->RFR[index])
#define I2S_RMR_REG(base)                        ((base)->RMR)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2S Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Masks I2S Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
/*! @{ */
#define I2S_VERID_FEATURE_MASK                   (0xFFFFU)
#define I2S_VERID_FEATURE_SHIFT                  (0U)
/*! FEATURE - Feature Specification Number
 *  0b0000000000000000..Standard feature set.
 */
#define I2S_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_VERID_FEATURE_SHIFT)) & I2S_VERID_FEATURE_MASK)
#define I2S_VERID_MINOR_MASK                     (0xFF0000U)
#define I2S_VERID_MINOR_SHIFT                    (16U)
#define I2S_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MINOR_SHIFT)) & I2S_VERID_MINOR_MASK)
#define I2S_VERID_MAJOR_MASK                     (0xFF000000U)
#define I2S_VERID_MAJOR_SHIFT                    (24U)
#define I2S_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MAJOR_SHIFT)) & I2S_VERID_MAJOR_MASK)
/*! @} */

/*! @name PARAM - Parameter Register */
/*! @{ */
#define I2S_PARAM_DATALINE_MASK                  (0xFU)
#define I2S_PARAM_DATALINE_SHIFT                 (0U)
#define I2S_PARAM_DATALINE(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_DATALINE_SHIFT)) & I2S_PARAM_DATALINE_MASK)
#define I2S_PARAM_FIFO_MASK                      (0xF00U)
#define I2S_PARAM_FIFO_SHIFT                     (8U)
#define I2S_PARAM_FIFO(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FIFO_SHIFT)) & I2S_PARAM_FIFO_MASK)
#define I2S_PARAM_FRAME_MASK                     (0xF0000U)
#define I2S_PARAM_FRAME_SHIFT                    (16U)
#define I2S_PARAM_FRAME(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FRAME_SHIFT)) & I2S_PARAM_FRAME_MASK)
/*! @} */

/*! @name TCSR - SAI Transmit Control Register */
/*! @{ */
#define I2S_TCSR_FRDE_MASK                       (0x1U)
#define I2S_TCSR_FRDE_SHIFT                      (0U)
#define I2S_TCSR_FWDE_MASK                       (0x2U)
#define I2S_TCSR_FWDE_SHIFT                      (1U)
#define I2S_TCSR_FRIE_MASK                       (0x100U)
#define I2S_TCSR_FRIE_SHIFT                      (8U)
#define I2S_TCSR_FWIE_MASK                       (0x200U)
#define I2S_TCSR_FWIE_SHIFT                      (9U)
#define I2S_TCSR_FEIE_MASK                       (0x400U)
#define I2S_TCSR_FEIE_SHIFT                      (10U)
#define I2S_TCSR_SEIE_MASK                       (0x800U)
#define I2S_TCSR_SEIE_SHIFT                      (11U)
#define I2S_TCSR_WSIE_MASK                       (0x1000U)
#define I2S_TCSR_WSIE_SHIFT                      (12U)
#define I2S_TCSR_FRF_MASK                        (0x10000U)
#define I2S_TCSR_FRF_SHIFT                       (16U)
#define I2S_TCSR_FWF_MASK                        (0x20000U)
#define I2S_TCSR_FWF_SHIFT                       (17U)
#define I2S_TCSR_FEF_MASK                        (0x40000U)
#define I2S_TCSR_FEF_SHIFT                       (18U)
#define I2S_TCSR_SEF_MASK                        (0x80000U)
#define I2S_TCSR_SEF_SHIFT                       (19U)
#define I2S_TCSR_WSF_MASK                        (0x100000U)
#define I2S_TCSR_WSF_SHIFT                       (20U)
#define I2S_TCSR_SR_MASK                         (0x1000000U)
#define I2S_TCSR_SR_SHIFT                        (24U)
#define I2S_TCSR_FR_MASK                         (0x2000000U)
#define I2S_TCSR_FR_SHIFT                        (25U)
#define I2S_TCSR_BCE_MASK                        (0x10000000U)
#define I2S_TCSR_BCE_SHIFT                       (28U)
#define I2S_TCSR_DBGE_MASK                       (0x20000000U)
#define I2S_TCSR_DBGE_SHIFT                      (29U)
#define I2S_TCSR_TE_MASK                         (0x80000000U)
#define I2S_TCSR_TE_SHIFT                        (31U)
/*! @} */

/*! @name TCR1 - SAI Transmit Configuration 1 Register */
/*! @{ */
#define I2S_TCR1_TFW_MASK                        (0x7FU)
#define I2S_TCR1_TFW_SHIFT                       (0U)
#define I2S_TCR1_TFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR1_TFW_SHIFT)) & I2S_TCR1_TFW_MASK)
/*! @} */

/*! @name TCR2 - SAI Transmit Configuration 2 Register */
/*! @{ */
#define I2S_TCR2_DIV_MASK                        (0xFFU)
#define I2S_TCR2_DIV_SHIFT                       (0U)
#define I2S_TCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_DIV_SHIFT)) & I2S_TCR2_DIV_MASK)
#define I2S_TCR2_BCD_MASK                        (0x1000000U)
#define I2S_TCR2_BCD_SHIFT                       (24U)
#define I2S_TCR2_BCP_MASK                        (0x2000000U)
#define I2S_TCR2_BCP_SHIFT                       (25U)
#define I2S_TCR2_MSEL_MASK                       (0xC000000U)
#define I2S_TCR2_MSEL_SHIFT                      (26U)
/*! MSEL - MCLK Select
 *  0b00..Bus Clock selected.
 *  0b01..Master Clock (MCLK) 1 option selected.
 *  0b10..Master Clock (MCLK) 2 option selected.
 *  0b11..Master Clock (MCLK) 3 option selected.
 */
#define I2S_TCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_MSEL_SHIFT)) & I2S_TCR2_MSEL_MASK)
#define I2S_TCR2_BCI_MASK                        (0x10000000U)
#define I2S_TCR2_BCI_SHIFT                       (28U)
#define I2S_TCR2_BCS_MASK                        (0x20000000U)
#define I2S_TCR2_BCS_SHIFT                       (29U)
#define I2S_TCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_TCR2_SYNC_SHIFT                      (30U)
/*! SYNC - Synchronous Mode
 *  0b00..Asynchronous mode.
 *  0b01..Synchronous with receiver.
 *  0b10..Reserved.
 *  0b11..Reserved.
 */
#define I2S_TCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_SYNC_SHIFT)) & I2S_TCR2_SYNC_MASK)
/*! @} */

/*! @name TCR3 - SAI Transmit Configuration 3 Register */
/*! @{ */
#define I2S_TCR3_WDFL_MASK                       (0x1FU)
#define I2S_TCR3_WDFL_SHIFT                      (0U)
#define I2S_TCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_WDFL_SHIFT)) & I2S_TCR3_WDFL_MASK)
#define I2S_TCR3_TCE_MASK                        (0xFF0000U)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_TCR3_TCE_SHIFT                       (16U)
#define I2S_TCR3_TCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_TCE_SHIFT)) & I2S_TCR3_TCE_MASK)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_TCR3_CFR_MASK                        (0xFF000000U)
#define I2S_TCR3_CFR_SHIFT                       (24U)
#define I2S_TCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_CFR_SHIFT)) & I2S_TCR3_CFR_MASK)
/*! @} */

/*! @name TCR4 - SAI Transmit Configuration 4 Register */
/*! @{ */
#define I2S_TCR4_FSD_MASK                        (0x1U)
#define I2S_TCR4_FSD_SHIFT                       (0U)
#define I2S_TCR4_FSP_MASK                        (0x2U)
#define I2S_TCR4_FSP_SHIFT                       (1U)
#define I2S_TCR4_ONDEM_MASK                      (0x4U)
#define I2S_TCR4_ONDEM_SHIFT                     (2U)
#define I2S_TCR4_FSE_MASK                        (0x8U)
#define I2S_TCR4_FSE_SHIFT                       (3U)
#define I2S_TCR4_MF_MASK                         (0x10U)
#define I2S_TCR4_MF_SHIFT                        (4U)
#define I2S_TCR4_CHMOD_MASK                      (0x20U)
#define I2S_TCR4_CHMOD_SHIFT                     (5U)
#define I2S_TCR4_SYWD_MASK                       (0x1F00U)
#define I2S_TCR4_SYWD_SHIFT                      (8U)
#define I2S_TCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_SYWD_SHIFT)) & I2S_TCR4_SYWD_MASK)
#define I2S_TCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_TCR4_FRSZ_SHIFT                      (16U)
#define I2S_TCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FRSZ_SHIFT)) & I2S_TCR4_FRSZ_MASK)
#define I2S_TCR4_FPACK_MASK                      (0x3000000U)
#define I2S_TCR4_FPACK_SHIFT                     (24U)
/*! FPACK - FIFO Packing Mode
 *  0b00..FIFO packing is disabled
 *  0b01..Reserved
 *  0b10..8-bit FIFO packing is enabled
 *  0b11..16-bit FIFO packing is enabled
 */
#define I2S_TCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FPACK_SHIFT)) & I2S_TCR4_FPACK_MASK)
#define I2S_TCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_TCR4_FCOMB_SHIFT                     (26U)
/*! FCOMB - FIFO Combine Mode
 *  0b00..FIFO combine mode disabled.
 *  0b01..FIFO combine mode enabled on FIFO reads (from transmit shift registers).
 *  0b10..FIFO combine mode enabled on FIFO writes (by software).
 *  0b11..FIFO combine mode enabled on FIFO reads (from transmit shift registers) and writes (by software).
 */
#define I2S_TCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FCOMB_SHIFT)) & I2S_TCR4_FCOMB_MASK)
#define I2S_TCR4_FCONT_MASK                      (0x10000000U)
#define I2S_TCR4_FCONT_SHIFT                     (28U)
/*! @} */

/*! @name TCR5 - SAI Transmit Configuration 5 Register */
/*! @{ */
#define I2S_TCR5_FBT_MASK                        (0x1F00U)
#define I2S_TCR5_FBT_SHIFT                       (8U)
#define I2S_TCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_FBT_SHIFT)) & I2S_TCR5_FBT_MASK)
#define I2S_TCR5_W0W_MASK                        (0x1F0000U)
#define I2S_TCR5_W0W_SHIFT                       (16U)
#define I2S_TCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_W0W_SHIFT)) & I2S_TCR5_W0W_MASK)
#define I2S_TCR5_WNW_MASK                        (0x1F000000U)
#define I2S_TCR5_WNW_SHIFT                       (24U)
#define I2S_TCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_WNW_SHIFT)) & I2S_TCR5_WNW_MASK)
/*! @} */

/*! @name TDR - SAI Transmit Data Register */
/*! @{ */
#define I2S_TDR_TDR_MASK                         (0xFFFFFFFFU)
#define I2S_TDR_TDR_SHIFT                        (0U)
#define I2S_TDR_TDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TDR_TDR_SHIFT)) & I2S_TDR_TDR_MASK)
/*! @} */

/* The count of I2S_TDR */
#define I2S_TDR_COUNT                            (8U)

/*! @name TFR - SAI Transmit FIFO Register */
/*! @{ */
#define I2S_TFR_RFP_MASK                         (0xFFU)
#define I2S_TFR_RFP_SHIFT                        (0U)
#define I2S_TFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_RFP_SHIFT)) & I2S_TFR_RFP_MASK)
#define I2S_TFR_WFP_MASK                         (0xFF0000U)
#define I2S_TFR_WFP_SHIFT                        (16U)
#define I2S_TFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_WFP_SHIFT)) & I2S_TFR_WFP_MASK)
#define I2S_TFR_WCP_MASK                         (0x80000000U)
#define I2S_TFR_WCP_SHIFT                        (31U)
/*! @} */

/* The count of I2S_TFR */
#define I2S_TFR_COUNT                            (8U)

/*! @name TMR - SAI Transmit Mask Register */
/*! @{ */
#define I2S_TMR_TWM_MASK                         (0xFFFFFFFFU)
#define I2S_TMR_TWM_SHIFT                        (0U)
/*! TWM - Transmit Word Mask
 *  0b00000000000000000000000000000000..Word N is enabled.
 *  0b00000000000000000000000000000001..Word N is masked. The transmit data pins are tri-stated or drive zero when masked.
 */
#define I2S_TMR_TWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TMR_TWM_SHIFT)) & I2S_TMR_TWM_MASK)
/*! @} */

/*! @name RCSR - SAI Receive Control Register */
/*! @{ */
#define I2S_RCSR_FRDE_MASK                       (0x1U)
#define I2S_RCSR_FRDE_SHIFT                      (0U)
#define I2S_RCSR_FWDE_MASK                       (0x2U)
#define I2S_RCSR_FWDE_SHIFT                      (1U)
#define I2S_RCSR_FRIE_MASK                       (0x100U)
#define I2S_RCSR_FRIE_SHIFT                      (8U)
#define I2S_RCSR_FWIE_MASK                       (0x200U)
#define I2S_RCSR_FWIE_SHIFT                      (9U)
#define I2S_RCSR_FEIE_MASK                       (0x400U)
#define I2S_RCSR_FEIE_SHIFT                      (10U)
#define I2S_RCSR_SEIE_MASK                       (0x800U)
#define I2S_RCSR_SEIE_SHIFT                      (11U)
#define I2S_RCSR_WSIE_MASK                       (0x1000U)
#define I2S_RCSR_WSIE_SHIFT                      (12U)
#define I2S_RCSR_FRF_MASK                        (0x10000U)
#define I2S_RCSR_FRF_SHIFT                       (16U)
#define I2S_RCSR_FWF_MASK                        (0x20000U)
#define I2S_RCSR_FWF_SHIFT                       (17U)
#define I2S_RCSR_FEF_MASK                        (0x40000U)
#define I2S_RCSR_FEF_SHIFT                       (18U)
#define I2S_RCSR_SEF_MASK                        (0x80000U)
#define I2S_RCSR_SEF_SHIFT                       (19U)
#define I2S_RCSR_WSF_MASK                        (0x100000U)
#define I2S_RCSR_WSF_SHIFT                       (20U)
#define I2S_RCSR_SR_MASK                         (0x1000000U)
#define I2S_RCSR_SR_SHIFT                        (24U)
#define I2S_RCSR_FR_MASK                         (0x2000000U)
#define I2S_RCSR_FR_SHIFT                        (25U)
#define I2S_RCSR_BCE_MASK                        (0x10000000U)
#define I2S_RCSR_BCE_SHIFT                       (28U)
#define I2S_RCSR_DBGE_MASK                       (0x20000000U)
#define I2S_RCSR_DBGE_SHIFT                      (29U)
#define I2S_RCSR_RE_MASK                         (0x80000000U)
#define I2S_RCSR_RE_SHIFT                        (31U)
/*! @} */

/*! @name RCR1 - SAI Receive Configuration 1 Register */
/*! @{ */
#define I2S_RCR1_RFW_MASK                        (0x7FU)
#define I2S_RCR1_RFW_SHIFT                       (0U)
#define I2S_RCR1_RFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR1_RFW_SHIFT)) & I2S_RCR1_RFW_MASK)
/*! @} */

/*! @name RCR2 - SAI Receive Configuration 2 Register */
/*! @{ */
#define I2S_RCR2_DIV_MASK                        (0xFFU)
#define I2S_RCR2_DIV_SHIFT                       (0U)
#define I2S_RCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_DIV_SHIFT)) & I2S_RCR2_DIV_MASK)
#define I2S_RCR2_BCD_MASK                        (0x1000000U)
#define I2S_RCR2_BCD_SHIFT                       (24U)
#define I2S_RCR2_BCP_MASK                        (0x2000000U)
#define I2S_RCR2_BCP_SHIFT                       (25U)
#define I2S_RCR2_MSEL_MASK                       (0xC000000U)
#define I2S_RCR2_MSEL_SHIFT                      (26U)
/*! MSEL - MCLK Select
 *  0b00..Bus Clock selected.
 *  0b01..Master Clock (MCLK) 1 option selected.
 *  0b10..Master Clock (MCLK) 2 option selected.
 *  0b11..Master Clock (MCLK) 3 option selected.
 */
#define I2S_RCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_MSEL_SHIFT)) & I2S_RCR2_MSEL_MASK)
#define I2S_RCR2_BCI_MASK                        (0x10000000U)
#define I2S_RCR2_BCI_SHIFT                       (28U)
#define I2S_RCR2_BCS_MASK                        (0x20000000U)
#define I2S_RCR2_BCS_SHIFT                       (29U)
#define I2S_RCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_RCR2_SYNC_SHIFT                      (30U)
/*! SYNC - Synchronous Mode
 *  0b00..Asynchronous mode.
 *  0b01..Synchronous with transmitter.
 *  0b10..Reserved.
 *  0b11..Reserved.
 */
#define I2S_RCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_SYNC_SHIFT)) & I2S_RCR2_SYNC_MASK)
/*! @} */

/*! @name RCR3 - SAI Receive Configuration 3 Register */
/*! @{ */
#define I2S_RCR3_WDFL_MASK                       (0x1FU)
#define I2S_RCR3_WDFL_SHIFT                      (0U)
#define I2S_RCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_WDFL_SHIFT)) & I2S_RCR3_WDFL_MASK)
#define I2S_RCR3_RCE_MASK                        (0xFF0000U)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_RCR3_RCE_SHIFT                       (16U)
#define I2S_RCR3_RCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_RCE_SHIFT)) & I2S_RCR3_RCE_MASK)  /* Merged from fields with different position or width, of widths (1, 8), largest definition used */
#define I2S_RCR3_CFR_MASK                        (0xFF000000U)
#define I2S_RCR3_CFR_SHIFT                       (24U)
#define I2S_RCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_CFR_SHIFT)) & I2S_RCR3_CFR_MASK)
/*! @} */

/*! @name RCR4 - SAI Receive Configuration 4 Register */
/*! @{ */
#define I2S_RCR4_FSD_MASK                        (0x1U)
#define I2S_RCR4_FSD_SHIFT                       (0U)
#define I2S_RCR4_FSP_MASK                        (0x2U)
#define I2S_RCR4_FSP_SHIFT                       (1U)
#define I2S_RCR4_ONDEM_MASK                      (0x4U)
#define I2S_RCR4_ONDEM_SHIFT                     (2U)
#define I2S_RCR4_FSE_MASK                        (0x8U)
#define I2S_RCR4_FSE_SHIFT                       (3U)
#define I2S_RCR4_MF_MASK                         (0x10U)
#define I2S_RCR4_MF_SHIFT                        (4U)
#define I2S_RCR4_SYWD_MASK                       (0x1F00U)
#define I2S_RCR4_SYWD_SHIFT                      (8U)
#define I2S_RCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_SYWD_SHIFT)) & I2S_RCR4_SYWD_MASK)
#define I2S_RCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_RCR4_FRSZ_SHIFT                      (16U)
#define I2S_RCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FRSZ_SHIFT)) & I2S_RCR4_FRSZ_MASK)
#define I2S_RCR4_FPACK_MASK                      (0x3000000U)
#define I2S_RCR4_FPACK_SHIFT                     (24U)
/*! FPACK - FIFO Packing Mode
 *  0b00..FIFO packing is disabled
 *  0b01..Reserved.
 *  0b10..8-bit FIFO packing is enabled
 *  0b11..16-bit FIFO packing is enabled
 */
#define I2S_RCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FPACK_SHIFT)) & I2S_RCR4_FPACK_MASK)
#define I2S_RCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_RCR4_FCOMB_SHIFT                     (26U)
/*! FCOMB - FIFO Combine Mode
 *  0b00..FIFO combine mode disabled.
 *  0b01..FIFO combine mode enabled on FIFO writes (from receive shift registers).
 *  0b10..FIFO combine mode enabled on FIFO reads (by software).
 *  0b11..FIFO combine mode enabled on FIFO writes (from receive shift registers) and reads (by software).
 */
#define I2S_RCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FCOMB_SHIFT)) & I2S_RCR4_FCOMB_MASK)
#define I2S_RCR4_FCONT_MASK                      (0x10000000U)
#define I2S_RCR4_FCONT_SHIFT                     (28U)
/*! @} */

/*! @name RCR5 - SAI Receive Configuration 5 Register */
/*! @{ */
#define I2S_RCR5_FBT_MASK                        (0x1F00U)
#define I2S_RCR5_FBT_SHIFT                       (8U)
#define I2S_RCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_FBT_SHIFT)) & I2S_RCR5_FBT_MASK)
#define I2S_RCR5_W0W_MASK                        (0x1F0000U)
#define I2S_RCR5_W0W_SHIFT                       (16U)
#define I2S_RCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_W0W_SHIFT)) & I2S_RCR5_W0W_MASK)
#define I2S_RCR5_WNW_MASK                        (0x1F000000U)
#define I2S_RCR5_WNW_SHIFT                       (24U)
#define I2S_RCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_WNW_SHIFT)) & I2S_RCR5_WNW_MASK)
/*! @} */

/*! @name RDR - SAI Receive Data Register */
/*! @{ */
#define I2S_RDR_RDR_MASK                         (0xFFFFFFFFU)
#define I2S_RDR_RDR_SHIFT                        (0U)
#define I2S_RDR_RDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RDR_RDR_SHIFT)) & I2S_RDR_RDR_MASK)
/*! @} */

/* The count of I2S_RDR */
#define I2S_RDR_COUNT                            (8U)

/*! @name RFR - SAI Receive FIFO Register */
/*! @{ */
#define I2S_RFR_RFP_MASK                         (0xFFU)
#define I2S_RFR_RFP_SHIFT                        (0U)
#define I2S_RFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_RFP_SHIFT)) & I2S_RFR_RFP_MASK)
#define I2S_RFR_RCP_MASK                         (0x8000U)
#define I2S_RFR_RCP_SHIFT                        (15U)
#define I2S_RFR_WFP_MASK                         (0xFF0000U)
#define I2S_RFR_WFP_SHIFT                        (16U)
#define I2S_RFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_WFP_SHIFT)) & I2S_RFR_WFP_MASK)
/*! @} */

/* The count of I2S_RFR */
#define I2S_RFR_COUNT                            (8U)

/*! @name RMR - SAI Receive Mask Register */
/*! @{ */
#define I2S_RMR_RWM_MASK                         (0xFFFFFFFFU)
#define I2S_RMR_RWM_SHIFT                        (0U)
/*! RWM - Receive Word Mask
 *  0b00000000000000000000000000000000..Word N is enabled.
 *  0b00000000000000000000000000000001..Word N is masked.
 */
#define I2S_RMR_RWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RMR_RWM_SHIFT)) & I2S_RMR_RWM_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I2S_Register_Masks */


/* I2S - Peripheral instance base addresses */
/** Peripheral I2S1 base pointer */
#define I2S1_BASE_PTR                            ((I2S_MemMapPtr)0x30010000u)
/** Peripheral I2S2 base pointer */
#define I2S2_BASE_PTR                            ((I2S_MemMapPtr)0x308B0000u)
/** Peripheral I2S3 base pointer */
#define I2S3_BASE_PTR                            ((I2S_MemMapPtr)0x308C0000u)
/** Peripheral I2S4 base pointer */
#define I2S4_BASE_PTR                            ((I2S_MemMapPtr)0x30050000u)
/** Peripheral I2S5 base pointer */
#define I2S5_BASE_PTR                            ((I2S_MemMapPtr)0x30040000u)
/** Peripheral I2S6 base pointer */
#define I2S6_BASE_PTR                            ((I2S_MemMapPtr)0x30030000u)
/** Array initializer of I2S peripheral base pointers */
#define I2S_BASE_PTRS                            { I2S1_BASE_PTR, I2S2_BASE_PTR, I2S3_BASE_PTR, I2S4_BASE_PTR, I2S5_BASE_PTR, I2S6_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register instance definitions */
/* I2S1 */
#define I2S1_VERID                               I2S_VERID_REG(I2S1_BASE_PTR)
#define I2S1_PARAM                               I2S_PARAM_REG(I2S1_BASE_PTR)
#define I2S1_TCSR                                I2S_TCSR_REG(I2S1_BASE_PTR)
#define I2S1_TCR1                                I2S_TCR1_REG(I2S1_BASE_PTR)
#define I2S1_TCR2                                I2S_TCR2_REG(I2S1_BASE_PTR)
#define I2S1_TCR3                                I2S_TCR3_REG(I2S1_BASE_PTR)
#define I2S1_TCR4                                I2S_TCR4_REG(I2S1_BASE_PTR)
#define I2S1_TCR5                                I2S_TCR5_REG(I2S1_BASE_PTR)
#define I2S1_TDR0                                I2S_TDR_REG(I2S1_BASE_PTR,0)
#define I2S1_TDR1                                I2S_TDR_REG(I2S1_BASE_PTR,1)
#define I2S1_TDR2                                I2S_TDR_REG(I2S1_BASE_PTR,2)
#define I2S1_TDR3                                I2S_TDR_REG(I2S1_BASE_PTR,3)
#define I2S1_TDR4                                I2S_TDR_REG(I2S1_BASE_PTR,4)
#define I2S1_TDR5                                I2S_TDR_REG(I2S1_BASE_PTR,5)
#define I2S1_TDR6                                I2S_TDR_REG(I2S1_BASE_PTR,6)
#define I2S1_TDR7                                I2S_TDR_REG(I2S1_BASE_PTR,7)
#define I2S1_TFR0                                I2S_TFR_REG(I2S1_BASE_PTR,0)
#define I2S1_TFR1                                I2S_TFR_REG(I2S1_BASE_PTR,1)
#define I2S1_TFR2                                I2S_TFR_REG(I2S1_BASE_PTR,2)
#define I2S1_TFR3                                I2S_TFR_REG(I2S1_BASE_PTR,3)
#define I2S1_TFR4                                I2S_TFR_REG(I2S1_BASE_PTR,4)
#define I2S1_TFR5                                I2S_TFR_REG(I2S1_BASE_PTR,5)
#define I2S1_TFR6                                I2S_TFR_REG(I2S1_BASE_PTR,6)
#define I2S1_TFR7                                I2S_TFR_REG(I2S1_BASE_PTR,7)
#define I2S1_TMR                                 I2S_TMR_REG(I2S1_BASE_PTR)
#define I2S1_RCSR                                I2S_RCSR_REG(I2S1_BASE_PTR)
#define I2S1_RCR1                                I2S_RCR1_REG(I2S1_BASE_PTR)
#define I2S1_RCR2                                I2S_RCR2_REG(I2S1_BASE_PTR)
#define I2S1_RCR3                                I2S_RCR3_REG(I2S1_BASE_PTR)
#define I2S1_RCR4                                I2S_RCR4_REG(I2S1_BASE_PTR)
#define I2S1_RCR5                                I2S_RCR5_REG(I2S1_BASE_PTR)
#define I2S1_RDR0                                I2S_RDR_REG(I2S1_BASE_PTR,0)
#define I2S1_RDR1                                I2S_RDR_REG(I2S1_BASE_PTR,1)
#define I2S1_RDR2                                I2S_RDR_REG(I2S1_BASE_PTR,2)
#define I2S1_RDR3                                I2S_RDR_REG(I2S1_BASE_PTR,3)
#define I2S1_RDR4                                I2S_RDR_REG(I2S1_BASE_PTR,4)
#define I2S1_RDR5                                I2S_RDR_REG(I2S1_BASE_PTR,5)
#define I2S1_RDR6                                I2S_RDR_REG(I2S1_BASE_PTR,6)
#define I2S1_RDR7                                I2S_RDR_REG(I2S1_BASE_PTR,7)
#define I2S1_RFR0                                I2S_RFR_REG(I2S1_BASE_PTR,0)
#define I2S1_RFR1                                I2S_RFR_REG(I2S1_BASE_PTR,1)
#define I2S1_RFR2                                I2S_RFR_REG(I2S1_BASE_PTR,2)
#define I2S1_RFR3                                I2S_RFR_REG(I2S1_BASE_PTR,3)
#define I2S1_RFR4                                I2S_RFR_REG(I2S1_BASE_PTR,4)
#define I2S1_RFR5                                I2S_RFR_REG(I2S1_BASE_PTR,5)
#define I2S1_RFR6                                I2S_RFR_REG(I2S1_BASE_PTR,6)
#define I2S1_RFR7                                I2S_RFR_REG(I2S1_BASE_PTR,7)
#define I2S1_RMR                                 I2S_RMR_REG(I2S1_BASE_PTR)
/* I2S2 */
#define I2S2_VERID                               I2S_VERID_REG(I2S2_BASE_PTR)
#define I2S2_PARAM                               I2S_PARAM_REG(I2S2_BASE_PTR)
#define I2S2_TCSR                                I2S_TCSR_REG(I2S2_BASE_PTR)
#define I2S2_TCR1                                I2S_TCR1_REG(I2S2_BASE_PTR)
#define I2S2_TCR2                                I2S_TCR2_REG(I2S2_BASE_PTR)
#define I2S2_TCR3                                I2S_TCR3_REG(I2S2_BASE_PTR)
#define I2S2_TCR4                                I2S_TCR4_REG(I2S2_BASE_PTR)
#define I2S2_TCR5                                I2S_TCR5_REG(I2S2_BASE_PTR)
#define I2S2_TDR0                                I2S_TDR_REG(I2S2_BASE_PTR,0)
#define I2S2_TFR0                                I2S_TFR_REG(I2S2_BASE_PTR,0)
#define I2S2_TMR                                 I2S_TMR_REG(I2S2_BASE_PTR)
#define I2S2_RCSR                                I2S_RCSR_REG(I2S2_BASE_PTR)
#define I2S2_RCR1                                I2S_RCR1_REG(I2S2_BASE_PTR)
#define I2S2_RCR2                                I2S_RCR2_REG(I2S2_BASE_PTR)
#define I2S2_RCR3                                I2S_RCR3_REG(I2S2_BASE_PTR)
#define I2S2_RCR4                                I2S_RCR4_REG(I2S2_BASE_PTR)
#define I2S2_RCR5                                I2S_RCR5_REG(I2S2_BASE_PTR)
#define I2S2_RDR0                                I2S_RDR_REG(I2S2_BASE_PTR,0)
#define I2S2_RFR0                                I2S_RFR_REG(I2S2_BASE_PTR,0)
#define I2S2_RMR                                 I2S_RMR_REG(I2S2_BASE_PTR)
/* I2S3 */
#define I2S3_VERID                               I2S_VERID_REG(I2S3_BASE_PTR)
#define I2S3_PARAM                               I2S_PARAM_REG(I2S3_BASE_PTR)
#define I2S3_TCSR                                I2S_TCSR_REG(I2S3_BASE_PTR)
#define I2S3_TCR1                                I2S_TCR1_REG(I2S3_BASE_PTR)
#define I2S3_TCR2                                I2S_TCR2_REG(I2S3_BASE_PTR)
#define I2S3_TCR3                                I2S_TCR3_REG(I2S3_BASE_PTR)
#define I2S3_TCR4                                I2S_TCR4_REG(I2S3_BASE_PTR)
#define I2S3_TCR5                                I2S_TCR5_REG(I2S3_BASE_PTR)
#define I2S3_TDR0                                I2S_TDR_REG(I2S3_BASE_PTR,0)
#define I2S3_TFR0                                I2S_TFR_REG(I2S3_BASE_PTR,0)
#define I2S3_TMR                                 I2S_TMR_REG(I2S3_BASE_PTR)
#define I2S3_RCSR                                I2S_RCSR_REG(I2S3_BASE_PTR)
#define I2S3_RCR1                                I2S_RCR1_REG(I2S3_BASE_PTR)
#define I2S3_RCR2                                I2S_RCR2_REG(I2S3_BASE_PTR)
#define I2S3_RCR3                                I2S_RCR3_REG(I2S3_BASE_PTR)
#define I2S3_RCR4                                I2S_RCR4_REG(I2S3_BASE_PTR)
#define I2S3_RCR5                                I2S_RCR5_REG(I2S3_BASE_PTR)
#define I2S3_RDR0                                I2S_RDR_REG(I2S3_BASE_PTR,0)
#define I2S3_RFR0                                I2S_RFR_REG(I2S3_BASE_PTR,0)
#define I2S3_RMR                                 I2S_RMR_REG(I2S3_BASE_PTR)
/* I2S4 */
#define I2S4_VERID                               I2S_VERID_REG(I2S4_BASE_PTR)
#define I2S4_PARAM                               I2S_PARAM_REG(I2S4_BASE_PTR)
#define I2S4_TCSR                                I2S_TCSR_REG(I2S4_BASE_PTR)
#define I2S4_TCR1                                I2S_TCR1_REG(I2S4_BASE_PTR)
#define I2S4_TCR2                                I2S_TCR2_REG(I2S4_BASE_PTR)
#define I2S4_TCR3                                I2S_TCR3_REG(I2S4_BASE_PTR)
#define I2S4_TCR4                                I2S_TCR4_REG(I2S4_BASE_PTR)
#define I2S4_TCR5                                I2S_TCR5_REG(I2S4_BASE_PTR)
#define I2S4_TDR0                                I2S_TDR_REG(I2S4_BASE_PTR,0)
#define I2S4_TFR0                                I2S_TFR_REG(I2S4_BASE_PTR,0)
#define I2S4_TMR                                 I2S_TMR_REG(I2S4_BASE_PTR)
#define I2S4_RCSR                                I2S_RCSR_REG(I2S4_BASE_PTR)
#define I2S4_RCR1                                I2S_RCR1_REG(I2S4_BASE_PTR)
#define I2S4_RCR2                                I2S_RCR2_REG(I2S4_BASE_PTR)
#define I2S4_RCR3                                I2S_RCR3_REG(I2S4_BASE_PTR)
#define I2S4_RCR4                                I2S_RCR4_REG(I2S4_BASE_PTR)
#define I2S4_RCR5                                I2S_RCR5_REG(I2S4_BASE_PTR)
#define I2S4_RDR0                                I2S_RDR_REG(I2S4_BASE_PTR,0)
#define I2S4_RFR0                                I2S_RFR_REG(I2S4_BASE_PTR,0)
#define I2S4_RMR                                 I2S_RMR_REG(I2S4_BASE_PTR)
/* I2S5 */
#define I2S5_VERID                               I2S_VERID_REG(I2S5_BASE_PTR)
#define I2S5_PARAM                               I2S_PARAM_REG(I2S5_BASE_PTR)
#define I2S5_TCSR                                I2S_TCSR_REG(I2S5_BASE_PTR)
#define I2S5_TCR1                                I2S_TCR1_REG(I2S5_BASE_PTR)
#define I2S5_TCR2                                I2S_TCR2_REG(I2S5_BASE_PTR)
#define I2S5_TCR3                                I2S_TCR3_REG(I2S5_BASE_PTR)
#define I2S5_TCR4                                I2S_TCR4_REG(I2S5_BASE_PTR)
#define I2S5_TCR5                                I2S_TCR5_REG(I2S5_BASE_PTR)
#define I2S5_TDR0                                I2S_TDR_REG(I2S5_BASE_PTR,0)
#define I2S5_TFR0                                I2S_TFR_REG(I2S5_BASE_PTR,0)
#define I2S5_TMR                                 I2S_TMR_REG(I2S5_BASE_PTR)
#define I2S5_RCSR                                I2S_RCSR_REG(I2S5_BASE_PTR)
#define I2S5_RCR1                                I2S_RCR1_REG(I2S5_BASE_PTR)
#define I2S5_RCR2                                I2S_RCR2_REG(I2S5_BASE_PTR)
#define I2S5_RCR3                                I2S_RCR3_REG(I2S5_BASE_PTR)
#define I2S5_RCR4                                I2S_RCR4_REG(I2S5_BASE_PTR)
#define I2S5_RCR5                                I2S_RCR5_REG(I2S5_BASE_PTR)
#define I2S5_RDR0                                I2S_RDR_REG(I2S5_BASE_PTR,0)
#define I2S5_RFR0                                I2S_RFR_REG(I2S5_BASE_PTR,0)
#define I2S5_RMR                                 I2S_RMR_REG(I2S5_BASE_PTR)
/* I2S6 */
#define I2S6_VERID                               I2S_VERID_REG(I2S6_BASE_PTR)
#define I2S6_PARAM                               I2S_PARAM_REG(I2S6_BASE_PTR)
#define I2S6_TCSR                                I2S_TCSR_REG(I2S6_BASE_PTR)
#define I2S6_TCR1                                I2S_TCR1_REG(I2S6_BASE_PTR)
#define I2S6_TCR2                                I2S_TCR2_REG(I2S6_BASE_PTR)
#define I2S6_TCR3                                I2S_TCR3_REG(I2S6_BASE_PTR)
#define I2S6_TCR4                                I2S_TCR4_REG(I2S6_BASE_PTR)
#define I2S6_TCR5                                I2S_TCR5_REG(I2S6_BASE_PTR)
#define I2S6_TDR0                                I2S_TDR_REG(I2S6_BASE_PTR,0)
#define I2S6_TFR0                                I2S_TFR_REG(I2S6_BASE_PTR,0)
#define I2S6_TMR                                 I2S_TMR_REG(I2S6_BASE_PTR)
#define I2S6_RCSR                                I2S_RCSR_REG(I2S6_BASE_PTR)
#define I2S6_RCR1                                I2S_RCR1_REG(I2S6_BASE_PTR)
#define I2S6_RCR2                                I2S_RCR2_REG(I2S6_BASE_PTR)
#define I2S6_RCR3                                I2S_RCR3_REG(I2S6_BASE_PTR)
#define I2S6_RCR4                                I2S_RCR4_REG(I2S6_BASE_PTR)
#define I2S6_RCR5                                I2S_RCR5_REG(I2S6_BASE_PTR)
#define I2S6_RDR0                                I2S_RDR_REG(I2S6_BASE_PTR,0)
#define I2S6_RFR0                                I2S_RFR_REG(I2S6_BASE_PTR,0)
#define I2S6_RMR                                 I2S_RMR_REG(I2S6_BASE_PTR)

/* I2S - Register array accessors */
#define I2S1_TDR(index)                          I2S_TDR_REG(I2S1_BASE_PTR,index)
#define I2S2_TDR(index)                          I2S_TDR_REG(I2S2_BASE_PTR,index)
#define I2S3_TDR(index)                          I2S_TDR_REG(I2S3_BASE_PTR,index)
#define I2S4_TDR(index)                          I2S_TDR_REG(I2S4_BASE_PTR,index)
#define I2S5_TDR(index)                          I2S_TDR_REG(I2S5_BASE_PTR,index)
#define I2S6_TDR(index)                          I2S_TDR_REG(I2S6_BASE_PTR,index)
#define I2S1_TFR(index)                          I2S_TFR_REG(I2S1_BASE_PTR,index)
#define I2S2_TFR(index)                          I2S_TFR_REG(I2S2_BASE_PTR,index)
#define I2S3_TFR(index)                          I2S_TFR_REG(I2S3_BASE_PTR,index)
#define I2S4_TFR(index)                          I2S_TFR_REG(I2S4_BASE_PTR,index)
#define I2S5_TFR(index)                          I2S_TFR_REG(I2S5_BASE_PTR,index)
#define I2S6_TFR(index)                          I2S_TFR_REG(I2S6_BASE_PTR,index)
#define I2S1_RDR(index)                          I2S_RDR_REG(I2S1_BASE_PTR,index)
#define I2S2_RDR(index)                          I2S_RDR_REG(I2S2_BASE_PTR,index)
#define I2S3_RDR(index)                          I2S_RDR_REG(I2S3_BASE_PTR,index)
#define I2S4_RDR(index)                          I2S_RDR_REG(I2S4_BASE_PTR,index)
#define I2S5_RDR(index)                          I2S_RDR_REG(I2S5_BASE_PTR,index)
#define I2S6_RDR(index)                          I2S_RDR_REG(I2S6_BASE_PTR,index)
#define I2S1_RFR(index)                          I2S_RFR_REG(I2S1_BASE_PTR,index)
#define I2S2_RFR(index)                          I2S_RFR_REG(I2S2_BASE_PTR,index)
#define I2S3_RFR(index)                          I2S_RFR_REG(I2S3_BASE_PTR,index)
#define I2S4_RFR(index)                          I2S_RFR_REG(I2S4_BASE_PTR,index)
#define I2S5_RFR(index)                          I2S_RFR_REG(I2S5_BASE_PTR,index)
#define I2S6_RFR(index)                          I2S_RFR_REG(I2S6_BASE_PTR,index)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2S_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Peripheral IOMUXC
 * @{
 */

/** IOMUXC - Peripheral register structure */
typedef struct IOMUXC_MemMap {
  uint8_t RESERVED_0[20];
  uint32_t SW_MUX_CTL_PAD_PMIC_STBY_REQ;           /**< SW_MUX_CTL_PAD_PMIC_STBY_REQ SW MUX Control Register, offset: 0x14 */
  uint32_t SW_MUX_CTL_PAD_PMIC_ON_REQ;             /**< SW_MUX_CTL_PAD_PMIC_ON_REQ SW MUX Control Register, offset: 0x18 */
  uint32_t SW_MUX_CTL_PAD_ONOFF;                   /**< SW_MUX_CTL_PAD_ONOFF SW MUX Control Register, offset: 0x1C */
  uint32_t SW_MUX_CTL_PAD_POR_B;                   /**< SW_MUX_CTL_PAD_POR_B SW MUX Control Register, offset: 0x20 */
  uint32_t SW_MUX_CTL_PAD_RTC_RESET_B;             /**< SW_MUX_CTL_PAD_RTC_RESET_B SW MUX Control Register, offset: 0x24 */
  uint32_t SW_MUX_CTL_PAD[139];                    /**< SW_MUX_CTL_PAD_GPIO1_IO00 SW MUX Control Register..SW_MUX_CTL_PAD_UART4_TXD SW MUX Control Register, array offset: 0x28, array step: 0x4 */
  uint32_t SW_PAD_CTL_PAD[154];                    /**< SW_PAD_CTL_PAD_TEST_MODE SW PAD Control Register..SW_PAD_CTL_PAD_UART4_TXD SW PAD Control Register, array offset: 0x254, array step: 0x4 */
  uint32_t SELECT_INPUT[30];                       /**< CCM_PMIC_READY_SELECT_INPUT DAISY Register..SAI6_MCLK_SELECT_INPUT DAISY Register, array offset: 0x4BC, array step: 0x4 */
} volatile *IOMUXC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register accessors */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_REG(base) ((base)->SW_MUX_CTL_PAD_PMIC_STBY_REQ)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_REG(base) ((base)->SW_MUX_CTL_PAD_PMIC_ON_REQ)
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_REG(base)    ((base)->SW_MUX_CTL_PAD_ONOFF)
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_REG(base)    ((base)->SW_MUX_CTL_PAD_POR_B)
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_REG(base) ((base)->SW_MUX_CTL_PAD_RTC_RESET_B)
#define IOMUXC_SW_MUX_CTL_PAD_REG(base,index)    ((base)->SW_MUX_CTL_PAD[index])
#define IOMUXC_SW_PAD_CTL_PAD_REG(base,index)    ((base)->SW_PAD_CTL_PAD[index])
#define IOMUXC_SELECT_INPUT_REG(base,index)      ((base)->SELECT_INPUT[index])

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Masks IOMUXC Register Masks
 * @{
 */

/*! @name SW_MUX_CTL_PAD_PMIC_STBY_REQ - SW_MUX_CTL_PAD_PMIC_STBY_REQ SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_SION_SHIFT (6U)
/*! @} */

/*! @name SW_MUX_CTL_PAD_PMIC_ON_REQ - SW_MUX_CTL_PAD_PMIC_ON_REQ SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_SION_SHIFT (6U)
/*! @} */

/*! @name SW_MUX_CTL_PAD_ONOFF - SW_MUX_CTL_PAD_ONOFF SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_MASK    (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF_SION_SHIFT   (6U)
/*! @} */

/*! @name SW_MUX_CTL_PAD_POR_B - SW_MUX_CTL_PAD_POR_B SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_MASK    (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_POR_B_SION_SHIFT   (6U)
/*! @} */

/*! @name SW_MUX_CTL_PAD_RTC_RESET_B - SW_MUX_CTL_PAD_RTC_RESET_B SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_MASK (0x40U)
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_SION_SHIFT (6U)
/*! @} */

/*! @name SW_MUX_CTL_PAD - SW_MUX_CTL_PAD_GPIO1_IO00 SW MUX Control Register..SW_MUX_CTL_PAD_UART4_TXD SW MUX Control Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK      (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT     (0U)
/*! MUX_MODE - MUX Mode Select Field
 *  0b000..Select mux mode: ALT0 mux port: IO00 of instance: GPIO1
 *  0b001..Select mux mode: ALT1 mux port: ENET_PHY_REF_CLK_ROOT of instance: CCM
 *  0b101..Select mux mode: ALT5 mux port: REF_CLK_32K of instance: ANAMIX
 *  0b110..Select mux mode: ALT6 mux port: EXT_CLK1 of instance: CCM
 */
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_SION_MASK          (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_SION_SHIFT         (4U)
/*! @} */

/* The count of IOMUXC_SW_MUX_CTL_PAD */
#define IOMUXC_SW_MUX_CTL_PAD_COUNT              (139U)

/*! @name SW_PAD_CTL_PAD - SW_PAD_CTL_PAD_TEST_MODE SW PAD Control Register..SW_PAD_CTL_PAD_UART4_TXD SW PAD Control Register */
/*! @{ */
#define IOMUXC_SW_PAD_CTL_PAD_DSE_MASK           (0x7U)
#define IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT          (0U)
/*! DSE - Drive Strength Field
 *  0b000..HI-Z
 *  0b001..255 Ohm @3.3V, 240 Ohm @2.5V, 230 Ohm @1.8V, 265 Ohm @1.2V
 *  0b010..105 Ohm @3.3V, 100 Ohm @2.5V, 85 Ohm @1.8V, 110 Ohm @1.2V
 *  0b011..75 Ohm @3.3V, 70 Ohm @2.5V, 60 Ohm @1.8V, 80 Ohm @1.2V
 *  0b100..85 Ohm @3.3V, 80 Ohm @2.5V, 75 Ohm @1.8V, 90 Ohm @1.2V
 *  0b101..65 Ohm @3.3V, 60 Ohm @2.5V, 55 Ohm @1.8V, 65 Ohm @1.2V
 *  0b110..45 Ohm @3.3V, 45 Ohm @2.5V, 40 Ohm @1.8V, 50 Ohm @1.2V
 *  0b111..40 Ohm @3.3V, 40 Ohm @2.5V, 33 Ohm @1.8V, 40 Ohm @1.2V
 */
#define IOMUXC_SW_PAD_CTL_PAD_DSE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_SRE_MASK           (0x18U)
#define IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT          (3U)
/*! SRE - Slew Rate Field
 *  0b00..Slow Frequency Slew Rate (50Mhz)
 *  0b01..Medium Frequency Slew Rate (100Mhz)
 *  0b10..Fast Frequency Slew Rate (150Mhz)
 *  0b11..Max Frequency Slew Rate (200Mhz)
 */
#define IOMUXC_SW_PAD_CTL_PAD_SRE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_SRE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_SRE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_MASK           (0x20U)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT          (5U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_MASK           (0x40U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT          (6U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_MASK           (0x80U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT          (7U)
#define IOMUXC_SW_PAD_CTL_PAD_LVTTL_MASK         (0x100U)
#define IOMUXC_SW_PAD_CTL_PAD_LVTTL_SHIFT        (8U)
#define IOMUXC_SW_PAD_CTL_PAD_VSEL_MASK          (0x3800U)
#define IOMUXC_SW_PAD_CTL_PAD_VSEL_SHIFT         (11U)
/*! VSEL - Voltage Select Field
 *  0b000..Auto Detect 3.3/2.5/1.2/1.8 V mode
 *  0b001..Auto Detect 3.3/2.5/1.2/1.8 V mode
 *  0b010..Auto Detect 3.3/2.5/1.2/1.8 V mode
 *  0b011..Auto Detect 3.3/2.5/1.2/1.8 V mode
 *  0b100..Manually Set 3.3V mode
 *  0b101..Manually Set 2.5V mode
 *  0b110..Manually Set 2.5V mode
 *  0b111..Manually Set 1.2V/1.8V mode
 */
#define IOMUXC_SW_PAD_CTL_PAD_VSEL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_VSEL_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_VSEL_MASK)
/*! @} */

/* The count of IOMUXC_SW_PAD_CTL_PAD */
#define IOMUXC_SW_PAD_CTL_PAD_COUNT              (154U)

/*! @name SELECT_INPUT - CCM_PMIC_READY_SELECT_INPUT DAISY Register..SAI6_MCLK_SELECT_INPUT DAISY Register */
/*! @{ */
#define IOMUXC_SELECT_INPUT_DAISY_MASK           (0x7U)  /* Merged from fields with different position or width, of widths (1, 2, 3), largest definition used */
#define IOMUXC_SELECT_INPUT_DAISY_SHIFT          (0U)
#define IOMUXC_SELECT_INPUT_DAISY(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SELECT_INPUT_DAISY_MASK)  /* Merged from fields with different position or width, of widths (1, 2, 3), largest definition used */
/*! @} */

/* The count of IOMUXC_SELECT_INPUT */
#define IOMUXC_SELECT_INPUT_COUNT                (30U)


/*!
 * @}
 */ /* end of group IOMUXC_Register_Masks */


/* IOMUXC - Peripheral instance base addresses */
/** Peripheral IOMUXC base pointer */
#define IOMUXC_BASE_PTR                          ((IOMUXC_MemMapPtr)0x30330000u)
/** Array initializer of IOMUXC peripheral base pointers */
#define IOMUXC_BASE_PTRS                         { IOMUXC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register instance definitions */
/* IOMUXC */
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ      IOMUXC_SW_MUX_CTL_PAD_PMIC_STBY_REQ_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ        IOMUXC_SW_MUX_CTL_PAD_PMIC_ON_REQ_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_ONOFF              IOMUXC_SW_MUX_CTL_PAD_ONOFF_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_POR_B              IOMUXC_SW_MUX_CTL_PAD_POR_B_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B        IOMUXC_SW_MUX_CTL_PAD_RTC_RESET_B_REG(IOMUXC_BASE_PTR)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,2)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,3)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,4)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,9)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,12)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,13)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO14         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,14)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO15         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD3           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD2           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD1           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD0           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,21)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TX_CTL        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,22)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,23)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RX_CTL        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,24)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,25)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD0           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,26)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD1           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,27)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD2           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,28)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD3           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,29)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_CLK            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,30)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_CMD            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,31)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,32)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,33)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,34)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,35)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA4          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,36)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA5          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,37)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA6          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,38)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA7          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,39)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_RESET_B        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,40)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_STROBE         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,41)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CD_B           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,42)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CLK            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,43)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CMD            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,44)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,45)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,46)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,47)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,48)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_RESET_B        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,49)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_WP             IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,50)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_ALE           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,51)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,52)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,53)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE2_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,54)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE3_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,55)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CLE           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,56)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,57)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,58)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,59)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,60)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,61)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,62)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,63)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,64)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DQS           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,65)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,66)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B       IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,67)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,68)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,69)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,70)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,71)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,72)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,73)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,74)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,75)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,76)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,77)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,78)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,79)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,80)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,81)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,82)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD4          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,83)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD5          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,84)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD6          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,85)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_RXD7          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,86)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,87)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,88)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,89)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,90)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,91)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,92)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD4          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,93)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD5          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,94)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD6          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,95)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_TXD7          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,96)
#define IOMUXC_SW_MUX_CTL_PAD_SAI1_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,97)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,98)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,99)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,100)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,101)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,102)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,103)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,104)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,105)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,106)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXD           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,107)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,108)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,109)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXD           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,110)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,111)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_TX           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,112)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_RX           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,113)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_EXT_CLK      IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,114)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_SCLK        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,115)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_MOSI        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,116)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_MISO        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,117)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_SS0         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,118)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_SCLK        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,119)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_MOSI        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,120)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_MISO        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,121)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_SS0         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,122)
#define IOMUXC_SW_MUX_CTL_PAD_I2C1_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,123)
#define IOMUXC_SW_MUX_CTL_PAD_I2C1_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,124)
#define IOMUXC_SW_MUX_CTL_PAD_I2C2_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,125)
#define IOMUXC_SW_MUX_CTL_PAD_I2C2_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,126)
#define IOMUXC_SW_MUX_CTL_PAD_I2C3_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,127)
#define IOMUXC_SW_MUX_CTL_PAD_I2C3_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,128)
#define IOMUXC_SW_MUX_CTL_PAD_I2C4_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,129)
#define IOMUXC_SW_MUX_CTL_PAD_I2C4_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,130)
#define IOMUXC_SW_MUX_CTL_PAD_UART1_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,131)
#define IOMUXC_SW_MUX_CTL_PAD_UART1_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,132)
#define IOMUXC_SW_MUX_CTL_PAD_UART2_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,133)
#define IOMUXC_SW_MUX_CTL_PAD_UART2_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,134)
#define IOMUXC_SW_MUX_CTL_PAD_UART3_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,135)
#define IOMUXC_SW_MUX_CTL_PAD_UART3_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,136)
#define IOMUXC_SW_MUX_CTL_PAD_UART4_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,137)
#define IOMUXC_SW_MUX_CTL_PAD_UART4_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,138)
#define IOMUXC_SW_PAD_CTL_PAD_TEST_MODE          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE1         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,2)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,3)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,4)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SW_PAD_CTL_PAD_RTC                IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,9)
#define IOMUXC_SW_PAD_CTL_PAD_PMIC_STBY_REQ      IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SW_PAD_CTL_PAD_PMIC_ON_REQ        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SW_PAD_CTL_PAD_ONOFF              IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,12)
#define IOMUXC_SW_PAD_CTL_PAD_POR_B              IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,13)
#define IOMUXC_SW_PAD_CTL_PAD_RTC_RESET_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,14)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,21)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,22)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,23)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,24)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,25)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,26)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,27)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,28)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO14         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,29)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO15         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,30)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,31)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,32)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD3           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,33)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD2           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,34)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD1           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,35)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD0           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,36)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TX_CTL        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,37)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,38)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RX_CTL        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,39)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,40)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD0           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,41)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD1           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,42)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD2           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,43)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD3           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,44)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_CLK            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,45)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_CMD            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,46)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,47)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,48)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,49)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,50)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA4          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,51)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA5          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,52)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA6          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,53)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA7          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,54)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_RESET_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,55)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_STROBE         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,56)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CD_B           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,57)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CLK            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,58)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CMD            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,59)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,60)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,61)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,62)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,63)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_RESET_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,64)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_WP             IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,65)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_ALE           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,66)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,67)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,68)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE2_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,69)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE3_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,70)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CLE           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,71)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,72)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,73)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,74)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,75)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,76)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,77)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,78)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,79)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DQS           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,80)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,81)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B       IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,82)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,83)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,84)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,85)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,86)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,87)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,88)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,89)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,90)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,91)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,92)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,93)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,94)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,95)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,96)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,97)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD4          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,98)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD5          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,99)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD6          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,100)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_RXD7          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,101)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,102)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,103)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,104)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,105)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,106)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,107)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD4          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,108)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD5          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,109)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD6          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,110)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_TXD7          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,111)
#define IOMUXC_SW_PAD_CTL_PAD_SAI1_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,112)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,113)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,114)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,115)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,116)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,117)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,118)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,119)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,120)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,121)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,122)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,123)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,124)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,125)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,126)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_TX           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,127)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_RX           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,128)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_EXT_CLK      IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,129)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_SCLK        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,130)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_MOSI        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,131)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_MISO        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,132)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_SS0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,133)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_SCLK        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,134)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_MOSI        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,135)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_MISO        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,136)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_SS0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,137)
#define IOMUXC_SW_PAD_CTL_PAD_I2C1_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,138)
#define IOMUXC_SW_PAD_CTL_PAD_I2C1_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,139)
#define IOMUXC_SW_PAD_CTL_PAD_I2C2_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,140)
#define IOMUXC_SW_PAD_CTL_PAD_I2C2_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,141)
#define IOMUXC_SW_PAD_CTL_PAD_I2C3_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,142)
#define IOMUXC_SW_PAD_CTL_PAD_I2C3_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,143)
#define IOMUXC_SW_PAD_CTL_PAD_I2C4_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,144)
#define IOMUXC_SW_PAD_CTL_PAD_I2C4_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,145)
#define IOMUXC_SW_PAD_CTL_PAD_UART1_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,146)
#define IOMUXC_SW_PAD_CTL_PAD_UART1_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,147)
#define IOMUXC_SW_PAD_CTL_PAD_UART2_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,148)
#define IOMUXC_SW_PAD_CTL_PAD_UART2_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,149)
#define IOMUXC_SW_PAD_CTL_PAD_UART3_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,150)
#define IOMUXC_SW_PAD_CTL_PAD_UART3_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,151)
#define IOMUXC_SW_PAD_CTL_PAD_UART4_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,152)
#define IOMUXC_SW_PAD_CTL_PAD_UART4_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,153)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT       IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_ENET1_MDIO_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SAI1_RX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,2)
#define IOMUXC_SAI1_TX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,3)
#define IOMUXC_SAI1_TX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,4)
#define IOMUXC_SAI5_RX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SAI5_RXD0_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SAI5_RXD1_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SAI5_RXD2_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SAI5_RXD3_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,9)
#define IOMUXC_SAI5_RX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SAI5_TX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SAI5_TX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,12)
#define IOMUXC_UART1_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,13)
#define IOMUXC_UART1_RXD_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,14)
#define IOMUXC_UART2_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_UART2_RXD_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_UART3_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_UART3_RXD_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_UART4_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_UART4_RXD_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_SAI6_RX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,21)
#define IOMUXC_SAI6_RXD0_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,22)
#define IOMUXC_SAI6_RX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,23)
#define IOMUXC_SAI6_TX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,24)
#define IOMUXC_SAI6_TX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,25)
#define IOMUXC_PCIE1_CLKREQ_B_SELECT_INPUT       IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,26)
#define IOMUXC_PCIE2_CLKREQ_B_SELECT_INPUT       IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,27)
#define IOMUXC_SAI5_MCLK_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,28)
#define IOMUXC_SAI6_MCLK_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,29)

/* IOMUXC - Register array accessors */
#define IOMUXC_SW_MUX_CTL_PAD(index)             IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,index)
#define IOMUXC_SW_PAD_CTL_PAD(index)             IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,index)
#define IOMUXC_SELECT_INPUT(index)               IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Peripheral IOMUXC_GPR
 * @{
 */

/** IOMUXC_GPR - Peripheral register structure */
typedef struct IOMUXC_GPR_MemMap {
  uint32_t GPR[48];                                /**< GPR0 General Purpose Register..GPR47 General Purpose Register, array offset: 0x0, array step: 0x4 */
} volatile *IOMUXC_GPR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register accessors */
#define IOMUXC_GPR_GPR_REG(base,index)           ((base)->GPR[index])

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Masks IOMUXC_GPR Register Masks
 * @{
 */

/*! @name GPR - GPR0 General Purpose Register..GPR47 General Purpose Register */
/*! @{ */
#define IOMUXC_GPR_GPR_ARCACHE_USDHC_MASK        (0x1U)
#define IOMUXC_GPR_GPR_ARCACHE_USDHC_SHIFT       (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_MASK (0x1U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_TWO_BIT_ERROR_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_MASK       (0x3U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_SHIFT      (0U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_RCAL(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_RX_RCAL_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_MASK  (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_TEST_PATTERN_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_MASK (0x1U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_TWO_BIT_ERROR_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_MASK       (0x3U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_SHIFT      (0U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_RCAL(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_RX_RCAL_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_MASK  (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_SHIFT (0U)
#define IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_TEST_PATTERN_MASK)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D0_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D1_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D2_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_MASK (0x3FFU)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_SHIFT (0U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D3_INT_LB_BYTE_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_RX_RCAL_MASK          (0x3U)
#define IOMUXC_GPR_GPR_DSI_RX_RCAL_SHIFT         (0U)
#define IOMUXC_GPR_GPR_DSI_RX_RCAL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_RX_RCAL_SHIFT)) & IOMUXC_GPR_GPR_DSI_RX_RCAL_MASK)
#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN_MASK     (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN_SHIFT    (0U)
#define IOMUXC_GPR_GPR_DSI_TEST_PATTERN(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TEST_PATTERN_SHIFT)) & IOMUXC_GPR_GPR_DSI_TEST_PATTERN_MASK)
#define IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_MASK      (0x1U)
#define IOMUXC_GPR_GPR_DSI_TWO_BIT_ERR_SHIFT     (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS0_RO_MASK)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS1_RO_MASK)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_MASK    (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS2_RO_MASK)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_MASK    (0x3FFFFFFFU)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_SHIFT   (0U)
#define IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO(x)      (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_SHIFT)) & IOMUXC_GPR_GPR_DSI_UI_STATUS3_RO_MASK)
#define IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_MASK (0x1U)
#define IOMUXC_GPR_GPR_GPR_SAI1_EXT_MCLK_EN_SHIFT (0U)
#define IOMUXC_GPR_GPR_HDMI_HPD_PD_MASK          (0x1U)
#define IOMUXC_GPR_GPR_HDMI_HPD_PD_SHIFT         (0U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_MASK          (0x1U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_SHIFT         (0U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_MASK (0x7FU)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_SHIFT (0U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_LOW_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_MASK (0x7FU)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_SHIFT (0U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_LOW_MASK)
#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_MASK     (0xFFFFFFFFU)
#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_SHIFT    (0U)
#define IOMUXC_GPR_GPR_PCIE_DIAG_STATUS(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE_DIAG_STATUS_MASK)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_MASK        (0x1U)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_SHIFT       (0U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_MASK       (0x1U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_SHIFT      (0U)
#define IOMUXC_GPR_GPR_TZASC_EN_MASK             (0x1U)
#define IOMUXC_GPR_GPR_TZASC_EN_SHIFT            (0U)
#define IOMUXC_GPR_GPR_AWCACHE_USDHC_MASK        (0x2U)
#define IOMUXC_GPR_GPR_AWCACHE_USDHC_SHIFT       (1U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_MASK (0x3EU)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_SHIFT (1U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_MASK (0x2U)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL0_SHIFT (1U)
#define IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_MASK (0x2U)
#define IOMUXC_GPR_GPR_GPR_SAI2_EXT_MCLK_EN_SHIFT (1U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_MASK      (0x2U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SDA_PD_SHIFT     (1U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_MASK        (0x3EU)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_SHIFT       (1U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_MASK)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_MASK        (0x2U)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_SHIFT       (1U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_MASK (0x2U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_SHIFT (1U)
#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_MASK (0xFCU)
#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_SHIFT (2U)
#define IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_S_PRG_RXHS_SETTLE_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_MASK (0xFCU)
#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_SHIFT (2U)
#define IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_S_PRG_RXHS_SETTLE_MASK)
#define IOMUXC_GPR_GPR_DSI_RTERM_SEL_MASK        (0x4U)
#define IOMUXC_GPR_GPR_DSI_RTERM_SEL_SHIFT       (2U)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_MASK (0x4U)
#define IOMUXC_GPR_GPR_ENET1_IPD_REQ_TIMER_SEL1_SHIFT (2U)
#define IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_MASK (0x4U)
#define IOMUXC_GPR_GPR_GPR_SAI3_EXT_MCLK_EN_SHIFT (2U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_MASK      (0x4U)
#define IOMUXC_GPR_GPR_HDMI_DDC_SCL_PD_SHIFT     (2U)
#define IOMUXC_GPR_GPR_MIPI_MUX_SEL_MASK         (0x4U)
#define IOMUXC_GPR_GPR_MIPI_MUX_SEL_SHIFT        (2U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_MASK      (0x4U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_SHIFT     (2U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_MASK        (0x4U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_SHIFT       (2U)
#define IOMUXC_GPR_GPR_DSI_RCALT_MASK            (0x18U)
#define IOMUXC_GPR_GPR_DSI_RCALT_SHIFT           (3U)
#define IOMUXC_GPR_GPR_DSI_RCALT(x)              (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_RCALT_SHIFT)) & IOMUXC_GPR_GPR_DSI_RCALT_MASK)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_MASK       (0x8U)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_SHIFT      (3U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_MASK      (0x8U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_SHIFT     (3U)
#define IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_MASK (0x8U)
#define IOMUXC_GPR_GPR_GPR_SAI4_EXT_MCLK_EN_SHIFT (3U)
#define IOMUXC_GPR_GPR_HDMI_CEC_PD_MASK          (0x8U)
#define IOMUXC_GPR_GPR_HDMI_CEC_PD_SHIFT         (3U)
#define IOMUXC_GPR_GPR_MIPI_MUX_INV_MASK         (0x8U)
#define IOMUXC_GPR_GPR_MIPI_MUX_INV_SHIFT        (3U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_MASK        (0x8U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_SHIFT       (3U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_MASK        (0x10U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_SHIFT       (4U)
#define IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_MASK (0x10U)
#define IOMUXC_GPR_GPR_GPR_SAI5_EXT_MCLK_EN_SHIFT (4U)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_MASK       (0x10U)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_SHIFT      (4U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_MASK      (0x10U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_SHIFT     (4U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_MASK        (0x20U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_SHIFT       (5U)
#define IOMUXC_GPR_GPR_DSI_NOCAL_MASK            (0x20U)
#define IOMUXC_GPR_GPR_DSI_NOCAL_SHIFT           (5U)
#define IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_MASK (0x20U)
#define IOMUXC_GPR_GPR_GPR_SAI6_EXT_MCLK_EN_SHIFT (5U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_MASK      (0x20U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_SHIFT     (5U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_MASK        (0x40U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_SHIFT       (6U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_MASK (0x40U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ONE_BIT_ERROR_SHIFT (6U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_MASK (0x40U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ONE_BIT_ERROR_SHIFT (6U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_MASK  (0x40U)
#define IOMUXC_GPR_GPR_DSI_ECC_ONE_BIT_ERR_SHIFT (6U)
#define IOMUXC_GPR_GPR_DSI_HSEL_MASK             (0x40U)
#define IOMUXC_GPR_GPR_DSI_HSEL_SHIFT            (6U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_MASK      (0x40U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_SHIFT     (6U)
#define IOMUXC_GPR_GPR_WDOG1_MASK_MASK           (0x40U)
#define IOMUXC_GPR_GPR_WDOG1_MASK_SHIFT          (6U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_MASK   (0x380U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_SHIFT  (7U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_MASK   (0x380U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_SHIFT  (7U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_MASK      (0x380U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_SHIFT     (7U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_POS(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_SHIFT)) & IOMUXC_GPR_GPR_DSI_ECC_ERR_POS_MASK)
#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_MASK   (0xF80U)
#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_SHIFT  (7U)
#define IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_SHIFT)) & IOMUXC_GPR_GPR_DSI_TX_ULPS_ENABLE_MASK)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_MASK (0x3F80U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_SHIFT (7U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_SWING_FULL_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_MASK (0x3F80U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_SHIFT (7U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_SWING_FULL_MASK)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_MASK      (0x80U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_SHIFT     (7U)
#define IOMUXC_GPR_GPR_WDOG2_MASK_MASK           (0x80U)
#define IOMUXC_GPR_GPR_WDOG2_MASK_SHIFT          (7U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_MASK     (0x100U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_EN_SHIFT    (8U)
#define IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_MASK (0x100U)
#define IOMUXC_GPR_GPR_CSI2_1_CONT_CLK_MODE_SHIFT (8U)
#define IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_MASK (0x100U)
#define IOMUXC_GPR_GPR_CSI2_2_CONT_CLK_MODE_SHIFT (8U)
#define IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_MASK  (0x100U)
#define IOMUXC_GPR_GPR_PCIE1_APP_CLK_PM_EN_SHIFT (8U)
#define IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_MASK  (0x100U)
#define IOMUXC_GPR_GPR_PCIE2_APP_CLK_PM_EN_SHIFT (8U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_MASK (0xF00U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_SHIFT (8U)
/*! PCIE2_CTRL_DEVICE_TYPE
 *  0b0000..PCI Express endpoint
 *  0b0001..Legacy PCI Express endpoint
 *  0b0100..Root port of PCI Express root complex
 */
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DEVICE_TYPE_MASK)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_MASK     (0x200U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_EN_SHIFT    (9U)
#define IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_MASK    (0x200U)
#define IOMUXC_GPR_GPR_CSI2_1_AUTO_PD_EN_SHIFT   (9U)
#define IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_MASK    (0x200U)
#define IOMUXC_GPR_GPR_CSI2_2_AUTO_PD_EN_SHIFT   (9U)
#define IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_MASK    (0x200U)
#define IOMUXC_GPR_GPR_PCIE1_REF_USE_PAD_SHIFT   (9U)
#define IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_MASK    (0x200U)
#define IOMUXC_GPR_GPR_PCIE2_REF_USE_PAD_SHIFT   (9U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_MASK     (0x400U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE1_EN_SHIFT    (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D0_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D1_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D2_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_D3_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_MASK       (0x400U)
#define IOMUXC_GPR_GPR_CSI2_1_ECC_ERR_SHIFT      (10U)
#define IOMUXC_GPR_GPR_CSI2_1_HSEL_MASK          (0x400U)
#define IOMUXC_GPR_GPR_CSI2_1_HSEL_SHIFT         (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D0_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D1_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D2_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_D3_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_MASK       (0x400U)
#define IOMUXC_GPR_GPR_CSI2_2_ECC_ERR_SHIFT      (10U)
#define IOMUXC_GPR_GPR_CSI2_2_HSEL_MASK          (0x400U)
#define IOMUXC_GPR_GPR_CSI2_2_HSEL_SHIFT         (10U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D0_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D1_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D2_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_MASK (0xFFC00U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_SHIFT (10U)
#define IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_SHIFT)) & IOMUXC_GPR_GPR_DSI_D3_INT_LB_ERR_CNT_MASK)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_MASK          (0x400U)
#define IOMUXC_GPR_GPR_DSI_ECC_ERR_SHIFT         (10U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_MASK        (0x400U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_SHIFT       (10U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_MASK (0x400U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_EN_SHIFT (10U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_MASK (0x400U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_EN_SHIFT (10U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_MASK     (0x800U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE1_EN_SHIFT    (11U)
#define IOMUXC_GPR_GPR_CSI2_1_PD_RX_MASK         (0x800U)
#define IOMUXC_GPR_GPR_CSI2_1_PD_RX_SHIFT        (11U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_MASK (0xF800U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_SHIFT (11U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ULPS_MARK_ACTIVE_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_PD_RX_MASK         (0x800U)
#define IOMUXC_GPR_GPR_CSI2_2_PD_RX_SHIFT        (11U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_MASK (0xF800U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_SHIFT (11U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ULPS_MARK_ACTIVE_MASK)
#define IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_MASK (0x800U)
#define IOMUXC_GPR_GPR_DSI_HOST_UNDERRUN_ERR_SHIFT (11U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_MASK      (0x3800U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_SHIFT     (11U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_MASK)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_MASK (0x800U)
#define IOMUXC_GPR_GPR_PCIE1_CLKREQ_B_OVERRIDE_SHIFT (11U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_MASK (0x800U)
#define IOMUXC_GPR_GPR_PCIE2_CLKREQ_B_OVERRIDE_SHIFT (11U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_MASK     (0x1000U)
#define IOMUXC_GPR_GPR_ARCACHE_LCDIF_EN_SHIFT    (12U)
#define IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_MASK (0x1000U)
#define IOMUXC_GPR_GPR_CSI2_1_VID_INTFC_ENB_SHIFT (12U)
#define IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_MASK (0x1000U)
#define IOMUXC_GPR_GPR_CSI2_2_VID_INTFC_ENB_SHIFT (12U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_MASK      (0x1000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_ACK_SHIFT     (12U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_MASK     (0x3000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_SHIFT    (12U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_SEND(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_SHIFT)) & IOMUXC_GPR_GPR_DSI_TRIGGER_SEND_MASK)
#define IOMUXC_GPR_GPR_IRQ_MASK                  (0x1000U)
#define IOMUXC_GPR_GPR_IRQ_SHIFT                 (12U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_MASK (0xF000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_SHIFT (12U)
/*! PCIE1_CTRL_DEVICE_TYPE
 *  0b0000..PCI Express endpoint
 *  0b0001..Legacy PCI Express endpoint
 *  0b0100..Root port of PCI Express root complex
 */
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DEVICE_TYPE_MASK)
#define IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_MASK    (0x1000U)
#define IOMUXC_GPR_GPR_PCIE1_VREG_BYPASS_SHIFT   (12U)
#define IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_MASK    (0x1000U)
#define IOMUXC_GPR_GPR_PCIE2_VREG_BYPASS_SHIFT   (12U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_MASK        (0x2000U)
#define IOMUXC_GPR_GPR_ARCACHE_PCIE2_SHIFT       (13U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_ENABLE_SHIFT    (13U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_ENABLE_SHIFT    (13U)
#define IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_MASK    (0x2000U)
#define IOMUXC_GPR_GPR_DSI_LP_RX_TIMEOUT_SHIFT   (13U)
#define IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_MASK     (0x2000U)
#define IOMUXC_GPR_GPR_ENET1_TX_CLK_SEL_SHIFT    (13U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_MASK (0xE000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_SHIFT (13U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_TX_VBOOST_LVL_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_MASK (0xE000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_SHIFT (13U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_TX_VBOOST_LVL_MASK)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_MASK        (0x4000U)
#define IOMUXC_GPR_GPR_AWCACHE_PCIE2_SHIFT       (14U)
#define IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_MASK    (0x4000U)
#define IOMUXC_GPR_GPR_DSI_HS_TX_TIMEOUT_SHIFT   (14U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_MASK      (0x4000U)
#define IOMUXC_GPR_GPR_DSI_TRIGGER_REQ_SHIFT     (14U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_MASK (0xFC000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_SHIFT (14U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_6DB_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_MASK (0xFC000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_SHIFT (14U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_6DB_MASK)
#define IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_MASK (0x8000U)
#define IOMUXC_GPR_GPR_DDSI_DPHY_TURNAROUND_SHIFT (15U)
#define IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_MASK (0x8000U)
#define IOMUXC_GPR_GPR_DSI_HOST_BTA_TIMEOUT_SHIFT (15U)
#define IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_MASK  (0x8000U)
#define IOMUXC_GPR_GPR_GPR_ANAMIX_IPT_MODE_SHIFT (15U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFI_MASK       (0xF0000U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFI_SHIFT      (16U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFI(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CPU_STANDBYWFI_SHIFT)) & IOMUXC_GPR_GPR_CPU_STANDBYWFI_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_CSI2_1_RX_DPHY_RDY_SHIFT  (16U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_CSI2_2_RX_DPHY_RDY_SHIFT  (16U)
#define IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_DSI_DPHY_DIRECTION_SHIFT  (16U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_MASK     (0x10000U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_EN_LOCK_SHIFT    (16U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_MASK (0x1F0000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_SHIFT (16U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_TX0_TERM_OFFSET_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_MASK (0x1F0000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_SHIFT (16U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_TX0_TERM_OFFSET_MASK)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_MASK    (0x10000U)
#define IOMUXC_GPR_GPR_RDATA_WAIT_EN_PDG_SHIFT   (16U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_MASK   (0x10000U)
#define IOMUXC_GPR_GPR_SDMA1_IPG_STOP_ACK_SHIFT  (16U)
#define IOMUXC_GPR_GPR_TZASC_EN_LOCK_MASK        (0x10000U)
#define IOMUXC_GPR_GPR_TZASC_EN_LOCK_SHIFT       (16U)
#define IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_MASK       (0x20000U)
#define IOMUXC_GPR_GPR_CSI2_1_CRC_ERR_SHIFT      (17U)
#define IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_MASK       (0x20000U)
#define IOMUXC_GPR_GPR_CSI2_2_CRC_ERR_SHIFT      (17U)
#define IOMUXC_GPR_GPR_DSI_CRC_ERR_MASK          (0x20000U)
#define IOMUXC_GPR_GPR_DSI_CRC_ERR_SHIFT         (17U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_MASK   (0x3E0000U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_SHIFT  (17U)
#define IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_TZ_ADDR_LOCK_MASK)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_MASK (0x1E0000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT (17U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_STATUS_BUS_SELECT_MASK)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_MASK    (0x20000U)
#define IOMUXC_GPR_GPR_RADDR_PIPE_EN_PDG_SHIFT   (17U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_MASK (0x20000U)
#define IOMUXC_GPR_GPR_TZASC_ID_SWAP_BYPASS_LOCK_SHIFT (17U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_MASK   (0x7C0000U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_SHIFT  (18U)
#define IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_1_ULPS_ACTIVE_MASK)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_MASK   (0x7C0000U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_SHIFT  (18U)
#define IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_CSI2_2_ULPS_ACTIVE_MASK)
#define IOMUXC_GPR_GPR_DSI_CALOUT_MASK           (0xC0000U)
#define IOMUXC_GPR_GPR_DSI_CALOUT_SHIFT          (18U)
#define IOMUXC_GPR_GPR_DSI_CALOUT(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_CALOUT_SHIFT)) & IOMUXC_GPR_GPR_DSI_CALOUT_MASK)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_MASK (0x40000U)
#define IOMUXC_GPR_GPR_SEC_ERR_RESP_EN_LOCK_SHIFT (18U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_MASK    (0x40000U)
#define IOMUXC_GPR_GPR_WDATA_PIPE_EN_PDG_SHIFT   (18U)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_MASK   (0x80000U)
#define IOMUXC_GPR_GPR_ENET1_IPG_STOP_ACK_SHIFT  (19U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_MASK (0x80000U)
#define IOMUXC_GPR_GPR_EXC_ERR_RESP_EN_LOCK_SHIFT (19U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_MASK   (0x80000U)
#define IOMUXC_GPR_GPR_WADDR_PIPE_EN_PNDG_SHIFT  (19U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFE_MASK       (0xF00000U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFE_SHIFT      (20U)
#define IOMUXC_GPR_GPR_CPU_STANDBYWFE(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_CPU_STANDBYWFE_SHIFT)) & IOMUXC_GPR_GPR_CPU_STANDBYWFE_MASK)
#define IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D0_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D1_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D2_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_1_D3_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D0_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D1_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D2_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_MASK  (0x100000U)
#define IOMUXC_GPR_GPR_CSI2_2_D3_LB_ACTIVE_SHIFT (20U)
#define IOMUXC_GPR_GPR_DSI_CALCOMPL_MASK         (0x100000U)
#define IOMUXC_GPR_GPR_DSI_CALCOMPL_SHIFT        (20U)
#define IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D0_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D1_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D2_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_MASK     (0x100000U)
#define IOMUXC_GPR_GPR_DSI_D3_LB_ACTIVE_SHIFT    (20U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_MASK (0x3F00000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT (20U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN2_3P5DB_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_MASK (0x3F00000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT (20U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN2_3P5DB_MASK)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_MASK   (0x100000U)
#define IOMUXC_GPR_GPR_SDMA2_IPG_STOP_ACK_SHIFT  (20U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_MASK (0x100000U)
#define IOMUXC_GPR_GPR_S_RDATA_WAIT_EN_PNDG_SHIFT (20U)
#define IOMUXC_GPR_GPR_WDOG3_MASK_MASK           (0x100000U)
#define IOMUXC_GPR_GPR_WDOG3_MASK_SHIFT          (20U)
#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_MASK      (0x3E00000U)
#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_SHIFT     (21U)
#define IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_SHIFT)) & IOMUXC_GPR_GPR_DSI_ULPS_ACTIVE_MASK)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_MASK (0x600000U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_SHIFT (21U)
#define IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_CTRL_DIAG_CTRL_BUS_MASK)
#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_MASK     (0xE00000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_SHIFT    (21U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_RX0_EQ_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_MASK     (0xE00000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_SHIFT    (21U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_RX0_EQ_MASK)
#define IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_MASK    (0x200000U)
#define IOMUXC_GPR_GPR_SAI1_IPG_STOP_ACK_SHIFT   (21U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_MASK (0x200000U)
#define IOMUXC_GPR_GPR_S_RADDR_PIPE_EN_PNDG_SHIFT (21U)
#define IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_MASK    (0x400000U)
#define IOMUXC_GPR_GPR_SAI2_IPG_STOP_ACK_SHIFT   (22U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_MASK (0x400000U)
#define IOMUXC_GPR_GPR_S_WDATA_PIPE_EN_PNDG_SHIFT (22U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_MASK (0x800000U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_FIFO_WR_OVFL_SHIFT (23U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_MASK (0x800000U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_FIFO_WR_OVFL_SHIFT (23U)
#define IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_MASK    (0x800000U)
#define IOMUXC_GPR_GPR_SAI3_IPG_STOP_ACK_SHIFT   (23U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_MASK (0x800000U)
#define IOMUXC_GPR_GPR_S_WADDR_PIPE_EN_PNDG_SHIFT (23U)
#define IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_MASK (0x800000U)
#define IOMUXC_GPR_GPR_TZASC1_SECURE_BOOT_LOCK_SHIFT (23U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_MASK (0x1000000U)
#define IOMUXC_GPR_GPR_CSI2_1_ERR_SEND_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_MASK (0x1000000U)
#define IOMUXC_GPR_GPR_CSI2_2_ERR_SEND_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_MASK  (0x1F000000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_LOS_LEVEL_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_MASK  (0x1F000000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_SHIFT (24U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL(x)    (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_LOS_LEVEL_MASK)
#define IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_MASK    (0x1000000U)
#define IOMUXC_GPR_GPR_SAI4_IPG_STOP_ACK_SHIFT   (24U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_MASK (0x1E000000U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT (25U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_STATUS_BUS_SELECT_MASK)
#define IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_MASK    (0x2000000U)
#define IOMUXC_GPR_GPR_SAI5_IPG_STOP_ACK_SHIFT   (25U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_MASK   (0x4000000U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_EN_LOCK_SHIFT  (26U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_MASK (0xFC000000U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_SHIFT (26U)
#define IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PCS_TX_DEEMPH_GEN1_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_MASK (0xFC000000U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_SHIFT (26U)
#define IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PCS_TX_DEEMPH_GEN1_MASK)
#define IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_MASK    (0x4000000U)
#define IOMUXC_GPR_GPR_SAI6_IPG_STOP_ACK_SHIFT   (26U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_MASK (0x38000000U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_SHIFT (27U)
#define IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK(x)   (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_SHIFT)) & IOMUXC_GPR_GPR_OCRAM_S_TZ_ADDR_LOCK_MASK)
#define IOMUXC_GPR_GPR_DBG_ACK_MASK              (0xF0000000U)
#define IOMUXC_GPR_GPR_DBG_ACK_SHIFT             (28U)
#define IOMUXC_GPR_GPR_DBG_ACK(x)                (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_DBG_ACK_SHIFT)) & IOMUXC_GPR_GPR_DBG_ACK_MASK)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_MASK   (0xE0000000U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_SHIFT  (29U)
#define IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_SHIFT)) & IOMUXC_GPR_GPR_PCIE1_PHY_LOS_BIAS_MASK)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_MASK (0x60000000U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_SHIFT (29U)
#define IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_CTRL_DIAG_CTRL_BUS_MASK)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_MASK   (0xE0000000U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_SHIFT  (29U)
#define IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS(x)     (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_SHIFT)) & IOMUXC_GPR_GPR_PCIE2_PHY_LOS_BIAS_MASK)
#define IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_MASK    (0x80000000U)
#define IOMUXC_GPR_GPR_PCIE_DIAG_BUS_SEL_SHIFT   (31U)
/*! @} */

/* The count of IOMUXC_GPR_GPR */
#define IOMUXC_GPR_GPR_COUNT                     (48U)


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Masks */


/* IOMUXC_GPR - Peripheral instance base addresses */
/** Peripheral IOMUXC_GPR base pointer */
#define IOMUXC_GPR_BASE_PTR                      ((IOMUXC_GPR_MemMapPtr)0x30340000u)
/** Array initializer of IOMUXC_GPR peripheral base pointers */
#define IOMUXC_GPR_BASE_PTRS                     { IOMUXC_GPR_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register instance definitions */
/* IOMUXC_GPR */
#define IOMUXC_GPR_GPR0                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,0)
#define IOMUXC_GPR_GPR1                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,1)
#define IOMUXC_GPR_GPR2                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,2)
#define IOMUXC_GPR_GPR3                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,3)
#define IOMUXC_GPR_GPR4                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,4)
#define IOMUXC_GPR_GPR5                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,5)
#define IOMUXC_GPR_GPR6                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,6)
#define IOMUXC_GPR_GPR7                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,7)
#define IOMUXC_GPR_GPR8                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,8)
#define IOMUXC_GPR_GPR9                          IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,9)
#define IOMUXC_GPR_GPR10                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,10)
#define IOMUXC_GPR_GPR11                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,11)
#define IOMUXC_GPR_GPR12                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,12)
#define IOMUXC_GPR_GPR13                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,13)
#define IOMUXC_GPR_GPR14                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,14)
#define IOMUXC_GPR_GPR15                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,15)
#define IOMUXC_GPR_GPR16                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,16)
#define IOMUXC_GPR_GPR17                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,17)
#define IOMUXC_GPR_GPR18                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,18)
#define IOMUXC_GPR_GPR19                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,19)
#define IOMUXC_GPR_GPR20                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,20)
#define IOMUXC_GPR_GPR21                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,21)
#define IOMUXC_GPR_GPR22                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,22)
#define IOMUXC_GPR_GPR23                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,23)
#define IOMUXC_GPR_GPR24                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,24)
#define IOMUXC_GPR_GPR25                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,25)
#define IOMUXC_GPR_GPR26                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,26)
#define IOMUXC_GPR_GPR27                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,27)
#define IOMUXC_GPR_GPR28                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,28)
#define IOMUXC_GPR_GPR29                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,29)
#define IOMUXC_GPR_GPR30                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,30)
#define IOMUXC_GPR_GPR31                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,31)
#define IOMUXC_GPR_GPR32                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,32)
#define IOMUXC_GPR_GPR33                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,33)
#define IOMUXC_GPR_GPR34                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,34)
#define IOMUXC_GPR_GPR35                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,35)
#define IOMUXC_GPR_GPR36                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,36)
#define IOMUXC_GPR_GPR37                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,37)
#define IOMUXC_GPR_GPR38                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,38)
#define IOMUXC_GPR_GPR39                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,39)
#define IOMUXC_GPR_GPR40                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,40)
#define IOMUXC_GPR_GPR41                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,41)
#define IOMUXC_GPR_GPR42                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,42)
#define IOMUXC_GPR_GPR43                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,43)
#define IOMUXC_GPR_GPR44                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,44)
#define IOMUXC_GPR_GPR45                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,45)
#define IOMUXC_GPR_GPR46                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,46)
#define IOMUXC_GPR_GPR47                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,47)

/* IOMUXC_GPR - Register array accessors */
#define IOMUXC_GPR_GPR(index)                    IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,index)

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Peripheral */


/* ----------------------------------------------------------------------------
   -- IRQ_STEER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IRQ_STEER_Peripheral IRQ_STEER
 * @{
 */

/** IRQ_STEER - Peripheral register structure */
typedef struct IRQ_STEER_MemMap {
  uint32_t CHANNCTL;                               /**< Channel n Control Register, offset: 0x0 */
  uint32_t CHN_MASK[16];                           /**< Channel n Interrupt Mask Register, array offset: 0x4, array step: 0x4 */
  uint32_t CHN_SET[16];                            /**< Channel n Interrupt Set Register, array offset: 0x44, array step: 0x4 */
  uint32_t CHN_STATUS[16];                         /**< Channel n Interrupt Status Register, array offset: 0x84, array step: 0x4 */
  uint32_t CHN_MINTDIS;                            /**< Channel n Master Interrupt Disable Register, offset: 0xC4 */
  uint32_t CHN_MSTRSTAT;                           /**< Channel n Master Status Register, offset: 0xC8 */
} volatile *IRQ_STEER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IRQ_STEER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IRQ_STEER_Register_Accessor_Macros IRQ_STEER - Register accessor macros
 * @{
 */


/* IRQ_STEER - Register accessors */
#define IRQ_STEER_CHANNCTL_REG(base)             ((base)->CHANNCTL)
#define IRQ_STEER_CHN_MASK_REG(base,index)       ((base)->CHN_MASK[index])
#define IRQ_STEER_CHN_SET_REG(base,index)        ((base)->CHN_SET[index])
#define IRQ_STEER_CHN_STATUS_REG(base,index)     ((base)->CHN_STATUS[index])
#define IRQ_STEER_CHN_MINTDIS_REG(base)          ((base)->CHN_MINTDIS)
#define IRQ_STEER_CHN_MSTRSTAT_REG(base)         ((base)->CHN_MSTRSTAT)

/*!
 * @}
 */ /* end of group IRQ_STEER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IRQ_STEER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IRQ_STEER_Register_Masks IRQ_STEER Register Masks
 * @{
 */

/*! @name CHANNCTL - Channel n Control Register */
/*! @{ */
#define IRQ_STEER_CHANNCTL_CH0_MASK              (0x1U)
#define IRQ_STEER_CHANNCTL_CH0_SHIFT             (0U)
#define IRQ_STEER_CHANNCTL_CH1_MASK              (0x2U)
#define IRQ_STEER_CHANNCTL_CH1_SHIFT             (1U)
#define IRQ_STEER_CHANNCTL_CH2_MASK              (0x4U)
#define IRQ_STEER_CHANNCTL_CH2_SHIFT             (2U)
#define IRQ_STEER_CHANNCTL_CH3_MASK              (0x8U)
#define IRQ_STEER_CHANNCTL_CH3_SHIFT             (3U)
#define IRQ_STEER_CHANNCTL_CH4_MASK              (0x10U)
#define IRQ_STEER_CHANNCTL_CH4_SHIFT             (4U)
/*! @} */

/*! @name CHN_MASK - Channel n Interrupt Mask Register */
/*! @{ */
#define IRQ_STEER_CHN_MASK_MASKFLD_MASK          (0xFFFFFFFFU)
#define IRQ_STEER_CHN_MASK_MASKFLD_SHIFT         (0U)
/*! MASKFLD - Mask bits
 *  0b00000000000000000000000000000000..Mask interrupt
 *  0b00000000000000000000000000000001..Do not mask interrupt
 */
#define IRQ_STEER_CHN_MASK_MASKFLD(x)            (((uint32_t)(((uint32_t)(x)) << IRQ_STEER_CHN_MASK_MASKFLD_SHIFT)) & IRQ_STEER_CHN_MASK_MASKFLD_MASK)
/*! @} */

/* The count of IRQ_STEER_CHN_MASK */
#define IRQ_STEER_CHN_MASK_COUNT                 (16U)

/*! @name CHN_SET - Channel n Interrupt Set Register */
/*! @{ */
#define IRQ_STEER_CHN_SET_FORCEFLD_MASK          (0xFFFFFFFFU)
#define IRQ_STEER_CHN_SET_FORCEFLD_SHIFT         (0U)
/*! FORCEFLD - Brief bitfield description.
 *  0b00000000000000000000000000000000..Normal operation
 *  0b00000000000000000000000000000001..Force interrupt
 */
#define IRQ_STEER_CHN_SET_FORCEFLD(x)            (((uint32_t)(((uint32_t)(x)) << IRQ_STEER_CHN_SET_FORCEFLD_SHIFT)) & IRQ_STEER_CHN_SET_FORCEFLD_MASK)
/*! @} */

/* The count of IRQ_STEER_CHN_SET */
#define IRQ_STEER_CHN_SET_COUNT                  (16U)

/*! @name CHN_STATUS - Channel n Interrupt Status Register */
/*! @{ */
#define IRQ_STEER_CHN_STATUS_STATUS_MASK         (0xFFFFFFFFU)
#define IRQ_STEER_CHN_STATUS_STATUS_SHIFT        (0U)
/*! STATUS - Status of an interrupt
 *  0b00000000000000000000000000000000..Interrupt is not set.
 *  0b00000000000000000000000000000001..Interrupt is set.
 */
#define IRQ_STEER_CHN_STATUS_STATUS(x)           (((uint32_t)(((uint32_t)(x)) << IRQ_STEER_CHN_STATUS_STATUS_SHIFT)) & IRQ_STEER_CHN_STATUS_STATUS_MASK)
/*! @} */

/* The count of IRQ_STEER_CHN_STATUS */
#define IRQ_STEER_CHN_STATUS_COUNT               (16U)

/*! @name CHN_MINTDIS - Channel n Master Interrupt Disable Register */
/*! @{ */
#define IRQ_STEER_CHN_MINTDIS_DISABLE_MASK       (0xFFU)
#define IRQ_STEER_CHN_MINTDIS_DISABLE_SHIFT      (0U)
/*! DISABLE - Each bit of this field disables the corresponding interrupts in table above.
 *  0b00000000..Enable interrupts
 *  0b00000001..Disable interrupts
 */
#define IRQ_STEER_CHN_MINTDIS_DISABLE(x)         (((uint32_t)(((uint32_t)(x)) << IRQ_STEER_CHN_MINTDIS_DISABLE_SHIFT)) & IRQ_STEER_CHN_MINTDIS_DISABLE_MASK)
/*! @} */

/*! @name CHN_MSTRSTAT - Channel n Master Status Register */
/*! @{ */
#define IRQ_STEER_CHN_MSTRSTAT_STATUS_MASK       (0x1U)
#define IRQ_STEER_CHN_MSTRSTAT_STATUS_SHIFT      (0U)
/*! @} */


/*!
 * @}
 */ /* end of group IRQ_STEER_Register_Masks */


/* IRQ_STEER - Peripheral instance base addresses */
/** Peripheral IRQ_STEER base pointer */
#define IRQ_STEER_BASE_PTR                       ((IRQ_STEER_MemMapPtr)0x32E2D000u)
/** Array initializer of IRQ_STEER peripheral base pointers */
#define IRQ_STEER_BASE_PTRS                      { IRQ_STEER_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IRQ_STEER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IRQ_STEER_Register_Accessor_Macros IRQ_STEER - Register accessor macros
 * @{
 */


/* IRQ_STEER - Register instance definitions */
/* IRQ_STEER */
#define IRQ_STEER_CHANNCTL                       IRQ_STEER_CHANNCTL_REG(IRQ_STEER_BASE_PTR)
#define IRQ_STEER_CHN_MASK0                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,0)
#define IRQ_STEER_CHN_MASK1                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,1)
#define IRQ_STEER_CHN_MASK2                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,2)
#define IRQ_STEER_CHN_MASK3                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,3)
#define IRQ_STEER_CHN_MASK4                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,4)
#define IRQ_STEER_CHN_MASK5                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,5)
#define IRQ_STEER_CHN_MASK6                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,6)
#define IRQ_STEER_CHN_MASK7                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,7)
#define IRQ_STEER_CHN_MASK8                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,8)
#define IRQ_STEER_CHN_MASK9                      IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,9)
#define IRQ_STEER_CHN_MASK10                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,10)
#define IRQ_STEER_CHN_MASK11                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,11)
#define IRQ_STEER_CHN_MASK12                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,12)
#define IRQ_STEER_CHN_MASK13                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,13)
#define IRQ_STEER_CHN_MASK14                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,14)
#define IRQ_STEER_CHN_MASK15                     IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,15)
#define IRQ_STEER_CHN_SET0                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,0)
#define IRQ_STEER_CHN_SET1                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,1)
#define IRQ_STEER_CHN_SET2                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,2)
#define IRQ_STEER_CHN_SET3                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,3)
#define IRQ_STEER_CHN_SET4                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,4)
#define IRQ_STEER_CHN_SET5                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,5)
#define IRQ_STEER_CHN_SET6                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,6)
#define IRQ_STEER_CHN_SET7                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,7)
#define IRQ_STEER_CHN_SET8                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,8)
#define IRQ_STEER_CHN_SET9                       IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,9)
#define IRQ_STEER_CHN_SET10                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,10)
#define IRQ_STEER_CHN_SET11                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,11)
#define IRQ_STEER_CHN_SET12                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,12)
#define IRQ_STEER_CHN_SET13                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,13)
#define IRQ_STEER_CHN_SET14                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,14)
#define IRQ_STEER_CHN_SET15                      IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,15)
#define IRQ_STEER_CHN_STATUS0                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,0)
#define IRQ_STEER_CHN_STATUS1                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,1)
#define IRQ_STEER_CHN_STATUS2                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,2)
#define IRQ_STEER_CHN_STATUS3                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,3)
#define IRQ_STEER_CHN_STATUS4                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,4)
#define IRQ_STEER_CHN_STATUS5                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,5)
#define IRQ_STEER_CHN_STATUS6                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,6)
#define IRQ_STEER_CHN_STATUS7                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,7)
#define IRQ_STEER_CHN_STATUS8                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,8)
#define IRQ_STEER_CHN_STATUS9                    IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,9)
#define IRQ_STEER_CHN_STATUS10                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,10)
#define IRQ_STEER_CHN_STATUS11                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,11)
#define IRQ_STEER_CHN_STATUS12                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,12)
#define IRQ_STEER_CHN_STATUS13                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,13)
#define IRQ_STEER_CHN_STATUS14                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,14)
#define IRQ_STEER_CHN_STATUS15                   IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,15)
#define IRQ_STEER_CHN_MINTDIS                    IRQ_STEER_CHN_MINTDIS_REG(IRQ_STEER_BASE_PTR)
#define IRQ_STEER_CHN_MSTRSTAT                   IRQ_STEER_CHN_MSTRSTAT_REG(IRQ_STEER_BASE_PTR)

/* IRQ_STEER - Register array accessors */
#define IRQ_STEER_CHN_MASK(index)                IRQ_STEER_CHN_MASK_REG(IRQ_STEER_BASE_PTR,index)
#define IRQ_STEER_CHN_SET(index)                 IRQ_STEER_CHN_SET_REG(IRQ_STEER_BASE_PTR,index)
#define IRQ_STEER_CHN_STATUS(index)              IRQ_STEER_CHN_STATUS_REG(IRQ_STEER_BASE_PTR,index)

/*!
 * @}
 */ /* end of group IRQ_STEER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IRQ_STEER_Peripheral */


/* ----------------------------------------------------------------------------
   -- LCDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Peripheral LCDIF
 * @{
 */

/** LCDIF - Peripheral register structure */
typedef struct LCDIF_MemMap {
  uint32_t CTRL;                                   /**< LCDIF General Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< LCDIF General Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< LCDIF General Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< LCDIF General Control Register, offset: 0xC */
  uint32_t CTRL1;                                  /**< LCDIF General Control1 Register, offset: 0x10 */
  uint32_t CTRL1_SET;                              /**< LCDIF General Control1 Register, offset: 0x14 */
  uint32_t CTRL1_CLR;                              /**< LCDIF General Control1 Register, offset: 0x18 */
  uint32_t CTRL1_TOG;                              /**< LCDIF General Control1 Register, offset: 0x1C */
  uint32_t CTRL2;                                  /**< LCDIF General Control2 Register, offset: 0x20 */
  uint32_t CTRL2_SET;                              /**< LCDIF General Control2 Register, offset: 0x24 */
  uint32_t CTRL2_CLR;                              /**< LCDIF General Control2 Register, offset: 0x28 */
  uint32_t CTRL2_TOG;                              /**< LCDIF General Control2 Register, offset: 0x2C */
  uint32_t TRANSFER_COUNT;                         /**< LCDIF Horizontal and Vertical Valid Data Count Register, offset: 0x30 */
  uint8_t RESERVED_0[12];
  uint32_t CUR_BUF;                                /**< LCD Interface Current Buffer Address Register, offset: 0x40 */
  uint8_t RESERVED_1[12];
  uint32_t NEXT_BUF;                               /**< LCD Interface Next Buffer Address Register, offset: 0x50 */
  uint8_t RESERVED_2[12];
  uint32_t TIMING;                                 /**< LCD Interface Timing Register, offset: 0x60 */
  uint8_t RESERVED_3[12];
  uint32_t VDCTRL0;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x70 */
  uint32_t VDCTRL0_SET;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x74 */
  uint32_t VDCTRL0_CLR;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x78 */
  uint32_t VDCTRL0_TOG;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x7C */
  uint32_t VDCTRL1;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register1, offset: 0x80 */
  uint8_t RESERVED_4[12];
  uint32_t VDCTRL2;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register2, offset: 0x90 */
  uint8_t RESERVED_5[12];
  uint32_t VDCTRL3;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register3, offset: 0xA0 */
  uint8_t RESERVED_6[12];
  uint32_t VDCTRL4;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register4, offset: 0xB0 */
  uint8_t RESERVED_7[12];
  uint32_t DVICTRL0;                               /**< Digital Video Interface Control0 Register, offset: 0xC0 */
  uint8_t RESERVED_8[12];
  uint32_t DVICTRL1;                               /**< Digital Video Interface Control1 Register, offset: 0xD0 */
  uint8_t RESERVED_9[12];
  uint32_t DVICTRL2;                               /**< Digital Video Interface Control2 Register, offset: 0xE0 */
  uint8_t RESERVED_10[12];
  uint32_t DVICTRL3;                               /**< Digital Video Interface Control3 Register, offset: 0xF0 */
  uint8_t RESERVED_11[12];
  uint32_t DVICTRL4;                               /**< Digital Video Interface Control4 Register, offset: 0x100 */
  uint8_t RESERVED_12[12];
  uint32_t CSC_COEFF0;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient0 Register, offset: 0x110 */
  uint8_t RESERVED_13[12];
  uint32_t CSC_COEFF1;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient1 Register, offset: 0x120 */
  uint8_t RESERVED_14[12];
  uint32_t CSC_COEFF2;                             /**< RGB to YCbCr 4:2:2 CSC Coefficent2 Register, offset: 0x130 */
  uint8_t RESERVED_15[12];
  uint32_t CSC_COEFF3;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient3 Register, offset: 0x140 */
  uint8_t RESERVED_16[12];
  uint32_t CSC_COEFF4;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient4 Register, offset: 0x150 */
  uint8_t RESERVED_17[12];
  uint32_t CSC_OFFSET;                             /**< RGB to YCbCr 4:2:2 CSC Offset Register, offset: 0x160 */
  uint8_t RESERVED_18[12];
  uint32_t CSC_LIMIT;                              /**< RGB to YCbCr 4:2:2 CSC Limit Register, offset: 0x170 */
  uint8_t RESERVED_19[12];
  uint32_t DATA;                                   /**< LCD Interface Data Register, offset: 0x180 */
  uint8_t RESERVED_20[12];
  uint32_t BM_ERROR_STAT;                          /**< Bus Master Error Status Register, offset: 0x190 */
  uint8_t RESERVED_21[12];
  uint32_t CRC_STAT;                               /**< CRC Status Register, offset: 0x1A0 */
  uint8_t RESERVED_22[12];
  uint32_t STAT;                                   /**< LCD Interface Status Register, offset: 0x1B0 */
  uint8_t RESERVED_23[76];
  uint32_t THRES;                                  /**< LCDIF Threshold Register, offset: 0x200 */
  uint8_t RESERVED_24[12];
  uint32_t AS_CTRL;                                /**< LCDIF AS Buffer Control Register, offset: 0x210 */
  uint8_t RESERVED_25[12];
  uint32_t AS_BUF;                                 /**< Alpha Surface Buffer Pointer, offset: 0x220 */
  uint8_t RESERVED_26[12];
  uint32_t AS_NEXT_BUF;                            /**< , offset: 0x230 */
  uint8_t RESERVED_27[12];
  uint32_t AS_CLRKEYLOW;                           /**< LCDIF Overlay Color Key Low, offset: 0x240 */
  uint8_t RESERVED_28[12];
  uint32_t AS_CLRKEYHIGH;                          /**< LCDIF Overlay Color Key High, offset: 0x250 */
  uint8_t RESERVED_29[12];
  uint32_t SYNC_DELAY;                             /**< LCD working insync mode with CSI for VSYNC delay, offset: 0x260 */
} volatile *LCDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register accessors */
#define LCDIF_CTRL_REG(base)                     ((base)->CTRL)
#define LCDIF_CTRL_SET_REG(base)                 ((base)->CTRL_SET)
#define LCDIF_CTRL_CLR_REG(base)                 ((base)->CTRL_CLR)
#define LCDIF_CTRL_TOG_REG(base)                 ((base)->CTRL_TOG)
#define LCDIF_CTRL1_REG(base)                    ((base)->CTRL1)
#define LCDIF_CTRL1_SET_REG(base)                ((base)->CTRL1_SET)
#define LCDIF_CTRL1_CLR_REG(base)                ((base)->CTRL1_CLR)
#define LCDIF_CTRL1_TOG_REG(base)                ((base)->CTRL1_TOG)
#define LCDIF_CTRL2_REG(base)                    ((base)->CTRL2)
#define LCDIF_CTRL2_SET_REG(base)                ((base)->CTRL2_SET)
#define LCDIF_CTRL2_CLR_REG(base)                ((base)->CTRL2_CLR)
#define LCDIF_CTRL2_TOG_REG(base)                ((base)->CTRL2_TOG)
#define LCDIF_TRANSFER_COUNT_REG(base)           ((base)->TRANSFER_COUNT)
#define LCDIF_CUR_BUF_REG(base)                  ((base)->CUR_BUF)
#define LCDIF_NEXT_BUF_REG(base)                 ((base)->NEXT_BUF)
#define LCDIF_TIMING_REG(base)                   ((base)->TIMING)
#define LCDIF_VDCTRL0_REG(base)                  ((base)->VDCTRL0)
#define LCDIF_VDCTRL0_SET_REG(base)              ((base)->VDCTRL0_SET)
#define LCDIF_VDCTRL0_CLR_REG(base)              ((base)->VDCTRL0_CLR)
#define LCDIF_VDCTRL0_TOG_REG(base)              ((base)->VDCTRL0_TOG)
#define LCDIF_VDCTRL1_REG(base)                  ((base)->VDCTRL1)
#define LCDIF_VDCTRL2_REG(base)                  ((base)->VDCTRL2)
#define LCDIF_VDCTRL3_REG(base)                  ((base)->VDCTRL3)
#define LCDIF_VDCTRL4_REG(base)                  ((base)->VDCTRL4)
#define LCDIF_DVICTRL0_REG(base)                 ((base)->DVICTRL0)
#define LCDIF_DVICTRL1_REG(base)                 ((base)->DVICTRL1)
#define LCDIF_DVICTRL2_REG(base)                 ((base)->DVICTRL2)
#define LCDIF_DVICTRL3_REG(base)                 ((base)->DVICTRL3)
#define LCDIF_DVICTRL4_REG(base)                 ((base)->DVICTRL4)
#define LCDIF_CSC_COEFF0_REG(base)               ((base)->CSC_COEFF0)
#define LCDIF_CSC_COEFF1_REG(base)               ((base)->CSC_COEFF1)
#define LCDIF_CSC_COEFF2_REG(base)               ((base)->CSC_COEFF2)
#define LCDIF_CSC_COEFF3_REG(base)               ((base)->CSC_COEFF3)
#define LCDIF_CSC_COEFF4_REG(base)               ((base)->CSC_COEFF4)
#define LCDIF_CSC_OFFSET_REG(base)               ((base)->CSC_OFFSET)
#define LCDIF_CSC_LIMIT_REG(base)                ((base)->CSC_LIMIT)
#define LCDIF_DATA_REG(base)                     ((base)->DATA)
#define LCDIF_BM_ERROR_STAT_REG(base)            ((base)->BM_ERROR_STAT)
#define LCDIF_CRC_STAT_REG(base)                 ((base)->CRC_STAT)
#define LCDIF_STAT_REG(base)                     ((base)->STAT)
#define LCDIF_THRES_REG(base)                    ((base)->THRES)
#define LCDIF_AS_CTRL_REG(base)                  ((base)->AS_CTRL)
#define LCDIF_AS_BUF_REG(base)                   ((base)->AS_BUF)
#define LCDIF_AS_NEXT_BUF_REG(base)              ((base)->AS_NEXT_BUF)
#define LCDIF_AS_CLRKEYLOW_REG(base)             ((base)->AS_CLRKEYLOW)
#define LCDIF_AS_CLRKEYHIGH_REG(base)            ((base)->AS_CLRKEYHIGH)
#define LCDIF_SYNC_DELAY_REG(base)               ((base)->SYNC_DELAY)

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LCDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Masks LCDIF Register Masks
 * @{
 */

/*! @name CTRL - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_RUN_MASK                      (0x1U)
#define LCDIF_CTRL_RUN_SHIFT                     (0U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_MASK       (0x2U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_SHIFT      (1U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_MASK       (0x4U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_SHIFT      (2U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_MASK       (0x8U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_SHIFT      (3U)
#define LCDIF_CTRL_RSRVD0_MASK                   (0x10U)
#define LCDIF_CTRL_RSRVD0_SHIFT                  (4U)
#define LCDIF_CTRL_MASTER_MASK                   (0x20U)
#define LCDIF_CTRL_MASTER_SHIFT                  (5U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_MASK     (0x40U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_SHIFT    (6U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_MASK      (0x80U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_SHIFT     (7U)
#define LCDIF_CTRL_WORD_LENGTH_MASK              (0x300U)
#define LCDIF_CTRL_WORD_LENGTH_SHIFT             (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_WORD_LENGTH(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_WORD_LENGTH_MASK)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK        (0xC00U)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT       (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_LCD_DATABUS_WIDTH(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK         (0x3000U)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT        (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CSC_DATA_SWIZZLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK       (0xC000U)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT      (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_DATA_SELECT_MASK              (0x10000U)
#define LCDIF_CTRL_DATA_SELECT_SHIFT             (16U)
#define LCDIF_CTRL_DOTCLK_MODE_MASK              (0x20000U)
#define LCDIF_CTRL_DOTCLK_MODE_SHIFT             (17U)
#define LCDIF_CTRL_VSYNC_MODE_MASK               (0x40000U)
#define LCDIF_CTRL_VSYNC_MODE_SHIFT              (18U)
#define LCDIF_CTRL_BYPASS_COUNT_MASK             (0x80000U)
#define LCDIF_CTRL_BYPASS_COUNT_SHIFT            (19U)
#define LCDIF_CTRL_DVI_MODE_MASK                 (0x100000U)
#define LCDIF_CTRL_DVI_MODE_SHIFT                (20U)
#define LCDIF_CTRL_SHIFT_NUM_BITS_MASK           (0x3E00000U)
#define LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT          (21U)
#define LCDIF_CTRL_SHIFT_NUM_BITS(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_DATA_SHIFT_DIR_MASK           (0x4000000U)
#define LCDIF_CTRL_DATA_SHIFT_DIR_SHIFT          (26U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_MASK      (0x8000000U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_SHIFT     (27U)
#define LCDIF_CTRL_READ_WRITEB_MASK              (0x10000000U)
#define LCDIF_CTRL_READ_WRITEB_SHIFT             (28U)
#define LCDIF_CTRL_YCBCR422_INPUT_MASK           (0x20000000U)
#define LCDIF_CTRL_YCBCR422_INPUT_SHIFT          (29U)
#define LCDIF_CTRL_CLKGATE_MASK                  (0x40000000U)
#define LCDIF_CTRL_CLKGATE_SHIFT                 (30U)
#define LCDIF_CTRL_SFTRST_MASK                   (0x80000000U)
#define LCDIF_CTRL_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL_SET - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_SET_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_SET_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_SET_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_SET_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_SET_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_SET_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_SET_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_SET_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_SET_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_SET_WORD_LENGTH_MASK)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_SET_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_SET_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_SET_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_SET_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_SET_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_SET_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_SET_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_SET_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_SET_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_SET_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_SET_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_SET_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_SET_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_SET_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL_CLR - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_CLR_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_CLR_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_CLR_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_CLR_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_CLR_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_CLR_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_CLR_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_CLR_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_CLR_WORD_LENGTH_MASK)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_CLR_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_CLR_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_CLR_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_CLR_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_CLR_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_CLR_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_CLR_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_CLR_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_CLR_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_CLR_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL_TOG - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_TOG_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_TOG_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_TOG_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_TOG_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_TOG_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_TOG_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_TOG_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_TOG_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_TOG_WORD_LENGTH_MASK)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_TOG_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_TOG_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_TOG_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_TOG_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_TOG_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_TOG_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_TOG_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_TOG_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_TOG_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_TOG_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL1 - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_RESET_MASK                   (0x1U)
#define LCDIF_CTRL1_RESET_SHIFT                  (0U)
#define LCDIF_CTRL1_MODE86_MASK                  (0x2U)
#define LCDIF_CTRL1_MODE86_SHIFT                 (1U)
#define LCDIF_CTRL1_BUSY_ENABLE_MASK             (0x4U)
#define LCDIF_CTRL1_BUSY_ENABLE_SHIFT            (2U)
#define LCDIF_CTRL1_RSRVD0_MASK                  (0xF8U)
#define LCDIF_CTRL1_RSRVD0_SHIFT                 (3U)
#define LCDIF_CTRL1_RSRVD0(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RSRVD0_SHIFT)) & LCDIF_CTRL1_RSRVD0_MASK)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_MASK          (0x100U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_SHIFT         (8U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_MASK      (0x200U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_SHIFT     (9U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_MASK           (0x400U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_SHIFT          (10U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_MASK            (0x800U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_SHIFT           (11U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_MASK       (0x1000U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_SHIFT      (12U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_MASK   (0x2000U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_SHIFT  (13U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_MASK        (0x4000U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_SHIFT       (14U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_MASK         (0x8000U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_SHIFT        (15U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK     (0xF0000U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT    (16U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_FIFO_CLEAR_MASK              (0x200000U)
#define LCDIF_CTRL1_FIFO_CLEAR_SHIFT             (21U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_INTERLACE_FIELDS_MASK        (0x800000U)
#define LCDIF_CTRL1_INTERLACE_FIELDS_SHIFT       (23U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_MASK    (0x1000000U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_SHIFT   (24U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_MASK            (0x2000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_SHIFT           (25U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_MASK         (0x4000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_SHIFT        (26U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_MASK     (0x8000000U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_SHIFT    (27U)
/*! @} */

/*! @name CTRL1_SET - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_SET_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_SET_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_SET_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_SET_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_SET_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_SET_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_SET_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RSRVD0_SHIFT)) & LCDIF_CTRL1_SET_RSRVD0_MASK)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL1_CLR - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_CLR_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_CLR_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_CLR_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_CLR_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_CLR_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_CLR_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_CLR_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RSRVD0_SHIFT)) & LCDIF_CTRL1_CLR_RSRVD0_MASK)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL1_TOG - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_TOG_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_TOG_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_TOG_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_TOG_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_TOG_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_TOG_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_TOG_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RSRVD0_SHIFT)) & LCDIF_CTRL1_TOG_RSRVD0_MASK)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL2 - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_RSRVD0_MASK                  (0x1U)
#define LCDIF_CTRL2_RSRVD0_SHIFT                 (0U)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK      (0xEU)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT     (1U)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_RSRVD1_MASK                  (0x80U)
#define LCDIF_CTRL2_RSRVD1_SHIFT                 (7U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_MASK   (0x100U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_SHIFT  (8U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_READ_PACK_DIR_MASK           (0x400U)
#define LCDIF_CTRL2_READ_PACK_DIR_SHIFT          (10U)
#define LCDIF_CTRL2_RSRVD2_MASK                  (0x800U)
#define LCDIF_CTRL2_RSRVD2_SHIFT                 (11U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK       (0x7000U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT      (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_EVEN_LINE_PATTERN(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD3_MASK                  (0x8000U)
#define LCDIF_CTRL2_RSRVD3_SHIFT                 (15U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_MASK        (0x70000U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT       (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_ODD_LINE_PATTERN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD4_MASK                  (0x80000U)
#define LCDIF_CTRL2_RSRVD4_SHIFT                 (19U)
#define LCDIF_CTRL2_BURST_LEN_8_MASK             (0x100000U)
#define LCDIF_CTRL2_BURST_LEN_8_SHIFT            (20U)
#define LCDIF_CTRL2_OUTSTANDING_REQS_MASK        (0xE00000U)
#define LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT       (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_OUTSTANDING_REQS(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_RSRVD5_MASK                  (0xFF000000U)
#define LCDIF_CTRL2_RSRVD5_SHIFT                 (24U)
#define LCDIF_CTRL2_RSRVD5(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD5_SHIFT)) & LCDIF_CTRL2_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_SET - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_SET_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_SET_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_SET_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_SET_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_SET_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_SET_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_SET_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_SET_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_SET_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_SET_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_SET_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_SET_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_SET_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD5_SHIFT)) & LCDIF_CTRL2_SET_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_CLR - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_CLR_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_CLR_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_CLR_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_CLR_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_CLR_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_CLR_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_CLR_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_CLR_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_CLR_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD5_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_TOG - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_TOG_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_TOG_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_TOG_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_TOG_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_TOG_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_TOG_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_TOG_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_TOG_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_TOG_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD5_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD5_MASK)
/*! @} */

/*! @name TRANSFER_COUNT - LCDIF Horizontal and Vertical Valid Data Count Register */
/*! @{ */
#define LCDIF_TRANSFER_COUNT_H_COUNT_MASK        (0xFFFFU)
#define LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT       (0U)
#define LCDIF_TRANSFER_COUNT_H_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_H_COUNT_MASK)
#define LCDIF_TRANSFER_COUNT_V_COUNT_MASK        (0xFFFF0000U)
#define LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT       (16U)
#define LCDIF_TRANSFER_COUNT_V_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_V_COUNT_MASK)
/*! @} */

/*! @name CUR_BUF - LCD Interface Current Buffer Address Register */
/*! @{ */
#define LCDIF_CUR_BUF_ADDR_MASK                  (0xFFFFFFFFU)
#define LCDIF_CUR_BUF_ADDR_SHIFT                 (0U)
#define LCDIF_CUR_BUF_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CUR_BUF_ADDR_SHIFT)) & LCDIF_CUR_BUF_ADDR_MASK)
/*! @} */

/*! @name NEXT_BUF - LCD Interface Next Buffer Address Register */
/*! @{ */
#define LCDIF_NEXT_BUF_ADDR_MASK                 (0xFFFFFFFFU)
#define LCDIF_NEXT_BUF_ADDR_SHIFT                (0U)
#define LCDIF_NEXT_BUF_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_NEXT_BUF_ADDR_SHIFT)) & LCDIF_NEXT_BUF_ADDR_MASK)
/*! @} */

/*! @name TIMING - LCD Interface Timing Register */
/*! @{ */
#define LCDIF_TIMING_DATA_SETUP_MASK             (0xFFU)
#define LCDIF_TIMING_DATA_SETUP_SHIFT            (0U)
#define LCDIF_TIMING_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_SETUP_SHIFT)) & LCDIF_TIMING_DATA_SETUP_MASK)
#define LCDIF_TIMING_DATA_HOLD_MASK              (0xFF00U)
#define LCDIF_TIMING_DATA_HOLD_SHIFT             (8U)
#define LCDIF_TIMING_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_HOLD_SHIFT)) & LCDIF_TIMING_DATA_HOLD_MASK)
#define LCDIF_TIMING_CMD_SETUP_MASK              (0xFF0000U)
#define LCDIF_TIMING_CMD_SETUP_SHIFT             (16U)
#define LCDIF_TIMING_CMD_SETUP(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_SETUP_SHIFT)) & LCDIF_TIMING_CMD_SETUP_MASK)
#define LCDIF_TIMING_CMD_HOLD_MASK               (0xFF000000U)
#define LCDIF_TIMING_CMD_HOLD_SHIFT              (24U)
#define LCDIF_TIMING_CMD_HOLD(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_HOLD_SHIFT)) & LCDIF_TIMING_CMD_HOLD_MASK)
/*! @} */

/*! @name VDCTRL0 - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK     (0x3FFFFU)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT    (0U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_MASK        (0x40000U)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_SHIFT       (18U)
#define LCDIF_VDCTRL0_HALF_LINE_MASK             (0x80000U)
#define LCDIF_VDCTRL0_HALF_LINE_SHIFT            (19U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_MASK     (0x200000U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_SHIFT    (21U)
#define LCDIF_VDCTRL0_RSRVD1_MASK                (0xC00000U)
#define LCDIF_VDCTRL0_RSRVD1_SHIFT               (22U)
#define LCDIF_VDCTRL0_RSRVD1(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_RSRVD1_MASK)
#define LCDIF_VDCTRL0_ENABLE_POL_MASK            (0x1000000U)
#define LCDIF_VDCTRL0_ENABLE_POL_SHIFT           (24U)
#define LCDIF_VDCTRL0_DOTCLK_POL_MASK            (0x2000000U)
#define LCDIF_VDCTRL0_DOTCLK_POL_SHIFT           (25U)
#define LCDIF_VDCTRL0_HSYNC_POL_MASK             (0x4000000U)
#define LCDIF_VDCTRL0_HSYNC_POL_SHIFT            (26U)
#define LCDIF_VDCTRL0_VSYNC_POL_MASK             (0x8000000U)
#define LCDIF_VDCTRL0_VSYNC_POL_SHIFT            (27U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_MASK        (0x10000000U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_SHIFT       (28U)
#define LCDIF_VDCTRL0_VSYNC_OEB_MASK             (0x20000000U)
#define LCDIF_VDCTRL0_VSYNC_OEB_SHIFT            (29U)
#define LCDIF_VDCTRL0_RSRVD2_MASK                (0xC0000000U)
#define LCDIF_VDCTRL0_RSRVD2_SHIFT               (30U)
#define LCDIF_VDCTRL0_RSRVD2(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_SET - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_SET_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_SET_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_SET_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD1_MASK)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_SET_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_SET_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_SET_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_CLR - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_CLR_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_CLR_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD1_MASK)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_CLR_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_CLR_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_TOG - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_TOG_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_TOG_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD1_MASK)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_TOG_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_TOG_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL1 - LCDIF VSYNC Mode and Dotclk Mode Control Register1 */
/*! @{ */
#define LCDIF_VDCTRL1_VSYNC_PERIOD_MASK          (0xFFFFFFFFU)
#define LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL1_VSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL1_VSYNC_PERIOD_MASK)
/*! @} */

/*! @name VDCTRL2 - LCDIF VSYNC Mode and Dotclk Mode Control Register2 */
/*! @{ */
#define LCDIF_VDCTRL2_HSYNC_PERIOD_MASK          (0x3FFFFU)
#define LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL2_HSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PERIOD_MASK)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK     (0xFFFC0000U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT    (18U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK)
/*! @} */

/*! @name VDCTRL3 - LCDIF VSYNC Mode and Dotclk Mode Control Register3 */
/*! @{ */
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK     (0xFFFFU)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT    (0U)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK   (0xFFF0000U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT  (16U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_VSYNC_ONLY_MASK            (0x10000000U)
#define LCDIF_VDCTRL3_VSYNC_ONLY_SHIFT           (28U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_MASK      (0x20000000U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_SHIFT     (29U)
#define LCDIF_VDCTRL3_RSRVD0_MASK                (0xC0000000U)
#define LCDIF_VDCTRL3_RSRVD0_SHIFT               (30U)
#define LCDIF_VDCTRL3_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_RSRVD0_SHIFT)) & LCDIF_VDCTRL3_RSRVD0_MASK)
/*! @} */

/*! @name VDCTRL4 - LCDIF VSYNC Mode and Dotclk Mode Control Register4 */
/*! @{ */
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK (0x3FFFFU)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT (0U)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_MASK       (0x40000U)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_SHIFT      (18U)
#define LCDIF_VDCTRL4_RSRVD0_MASK                (0x1FF80000U)
#define LCDIF_VDCTRL4_RSRVD0_SHIFT               (19U)
#define LCDIF_VDCTRL4_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_RSRVD0_SHIFT)) & LCDIF_VDCTRL4_RSRVD0_MASK)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK        (0xE0000000U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT       (29U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK)
/*! @} */

/*! @name DVICTRL0 - Digital Video Interface Control0 Register */
/*! @{ */
#define LCDIF_DVICTRL0_H_BLANKING_CNT_MASK       (0xFFFU)
#define LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT      (0U)
#define LCDIF_DVICTRL0_H_BLANKING_CNT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT)) & LCDIF_DVICTRL0_H_BLANKING_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD0_MASK               (0xF000U)
#define LCDIF_DVICTRL0_RSRVD0_SHIFT              (12U)
#define LCDIF_DVICTRL0_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD0_SHIFT)) & LCDIF_DVICTRL0_RSRVD0_MASK)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK         (0xFFF0000U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT        (16U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT)) & LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD1_MASK               (0xF0000000U)
#define LCDIF_DVICTRL0_RSRVD1_SHIFT              (28U)
#define LCDIF_DVICTRL0_RSRVD1(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD1_SHIFT)) & LCDIF_DVICTRL0_RSRVD1_MASK)
/*! @} */

/*! @name DVICTRL1 - Digital Video Interface Control1 Register */
/*! @{ */
#define LCDIF_DVICTRL1_F2_START_LINE_MASK        (0x3FFU)
#define LCDIF_DVICTRL1_F2_START_LINE_SHIFT       (0U)
#define LCDIF_DVICTRL1_F2_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F2_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F2_START_LINE_MASK)
#define LCDIF_DVICTRL1_F1_END_LINE_MASK          (0xFFC00U)
#define LCDIF_DVICTRL1_F1_END_LINE_SHIFT         (10U)
#define LCDIF_DVICTRL1_F1_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_END_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_END_LINE_MASK)
#define LCDIF_DVICTRL1_F1_START_LINE_MASK        (0x3FF00000U)
#define LCDIF_DVICTRL1_F1_START_LINE_SHIFT       (20U)
#define LCDIF_DVICTRL1_F1_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_START_LINE_MASK)
#define LCDIF_DVICTRL1_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL1_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL1_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_RSRVD0_SHIFT)) & LCDIF_DVICTRL1_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL2 - Digital Video Interface Control2 Register */
/*! @{ */
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK    (0x3FFU)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT   (0U)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK  (0xFFC00U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT (10U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL2_F2_END_LINE_MASK          (0x3FF00000U)
#define LCDIF_DVICTRL2_F2_END_LINE_SHIFT         (20U)
#define LCDIF_DVICTRL2_F2_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_F2_END_LINE_SHIFT)) & LCDIF_DVICTRL2_F2_END_LINE_MASK)
#define LCDIF_DVICTRL2_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL2_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL2_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_RSRVD0_SHIFT)) & LCDIF_DVICTRL2_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL3 - Digital Video Interface Control3 Register */
/*! @{ */
#define LCDIF_DVICTRL3_V_LINES_CNT_MASK          (0x3FFU)
#define LCDIF_DVICTRL3_V_LINES_CNT_SHIFT         (0U)
#define LCDIF_DVICTRL3_V_LINES_CNT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V_LINES_CNT_SHIFT)) & LCDIF_DVICTRL3_V_LINES_CNT_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK    (0xFFC00U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT   (10U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK  (0x3FF00000U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT (20U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL3_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL3_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL3_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_RSRVD0_SHIFT)) & LCDIF_DVICTRL3_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL4 - Digital Video Interface Control4 Register */
/*! @{ */
#define LCDIF_DVICTRL4_H_FILL_CNT_MASK           (0xFFU)
#define LCDIF_DVICTRL4_H_FILL_CNT_SHIFT          (0U)
#define LCDIF_DVICTRL4_H_FILL_CNT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_H_FILL_CNT_SHIFT)) & LCDIF_DVICTRL4_H_FILL_CNT_MASK)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_MASK        (0xFF00U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT       (8U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CR_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_MASK        (0xFF0000U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT       (16U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CB_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_MASK         (0xFF000000U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT        (24U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_Y_FILL_VALUE_MASK)
/*! @} */

/*! @name CSC_COEFF0 - RGB to YCbCr 4:2:2 CSC Coefficient0 Register */
/*! @{ */
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK (0x3U)
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT (0U)
/*! CSC_SUBSAMPLE_FILTER
 *  0b00..No filtering, simply keep every chroma value for samples numbered 2n and discard chroma values associated with all samples numbered 2n+1.
 *  0b01..Reserved
 *  0b10..Chroma samples numbered 2n and 2n+1 are averaged (weights 1/2, 1/2) and that chroma value replaces the
 *        two chroma values at 2n and 2n+1. This chroma now exists horizontally halfway between the two luma samples.
 *  0b11..Chroma samples numbered 2n-1, 2n, and 2n+1 are averaged (weights 1/4, 1/2, 1/4) and that chroma value
 *        exists at the same site as the luma sample numbered 2n and the chroma samples at 2n+1 are discarded.
 */
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT)) & LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK)
#define LCDIF_CSC_COEFF0_RSRVD0_MASK             (0xFFFCU)
#define LCDIF_CSC_COEFF0_RSRVD0_SHIFT            (2U)
#define LCDIF_CSC_COEFF0_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD0_MASK)
#define LCDIF_CSC_COEFF0_C0_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF0_C0_SHIFT                (16U)
#define LCDIF_CSC_COEFF0_C0(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_C0_SHIFT)) & LCDIF_CSC_COEFF0_C0_MASK)
#define LCDIF_CSC_COEFF0_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF0_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF0_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF1 - RGB to YCbCr 4:2:2 CSC Coefficient1 Register */
/*! @{ */
#define LCDIF_CSC_COEFF1_C1_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF1_C1_SHIFT                (0U)
#define LCDIF_CSC_COEFF1_C1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C1_SHIFT)) & LCDIF_CSC_COEFF1_C1_MASK)
#define LCDIF_CSC_COEFF1_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF1_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF1_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD0_MASK)
#define LCDIF_CSC_COEFF1_C2_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF1_C2_SHIFT                (16U)
#define LCDIF_CSC_COEFF1_C2(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C2_SHIFT)) & LCDIF_CSC_COEFF1_C2_MASK)
#define LCDIF_CSC_COEFF1_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF1_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF1_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF2 - RGB to YCbCr 4:2:2 CSC Coefficent2 Register */
/*! @{ */
#define LCDIF_CSC_COEFF2_C3_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF2_C3_SHIFT                (0U)
#define LCDIF_CSC_COEFF2_C3(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C3_SHIFT)) & LCDIF_CSC_COEFF2_C3_MASK)
#define LCDIF_CSC_COEFF2_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF2_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF2_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD0_MASK)
#define LCDIF_CSC_COEFF2_C4_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF2_C4_SHIFT                (16U)
#define LCDIF_CSC_COEFF2_C4(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C4_SHIFT)) & LCDIF_CSC_COEFF2_C4_MASK)
#define LCDIF_CSC_COEFF2_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF2_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF2_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF3 - RGB to YCbCr 4:2:2 CSC Coefficient3 Register */
/*! @{ */
#define LCDIF_CSC_COEFF3_C5_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF3_C5_SHIFT                (0U)
#define LCDIF_CSC_COEFF3_C5(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C5_SHIFT)) & LCDIF_CSC_COEFF3_C5_MASK)
#define LCDIF_CSC_COEFF3_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF3_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF3_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD0_MASK)
#define LCDIF_CSC_COEFF3_C6_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF3_C6_SHIFT                (16U)
#define LCDIF_CSC_COEFF3_C6(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C6_SHIFT)) & LCDIF_CSC_COEFF3_C6_MASK)
#define LCDIF_CSC_COEFF3_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF3_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF3_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF4 - RGB to YCbCr 4:2:2 CSC Coefficient4 Register */
/*! @{ */
#define LCDIF_CSC_COEFF4_C7_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF4_C7_SHIFT                (0U)
#define LCDIF_CSC_COEFF4_C7(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C7_SHIFT)) & LCDIF_CSC_COEFF4_C7_MASK)
#define LCDIF_CSC_COEFF4_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF4_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF4_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD0_MASK)
#define LCDIF_CSC_COEFF4_C8_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF4_C8_SHIFT                (16U)
#define LCDIF_CSC_COEFF4_C8(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C8_SHIFT)) & LCDIF_CSC_COEFF4_C8_MASK)
#define LCDIF_CSC_COEFF4_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF4_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF4_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD1_MASK)
/*! @} */

/*! @name CSC_OFFSET - RGB to YCbCr 4:2:2 CSC Offset Register */
/*! @{ */
#define LCDIF_CSC_OFFSET_Y_OFFSET_MASK           (0x1FFU)
#define LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT          (0U)
#define LCDIF_CSC_OFFSET_Y_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_Y_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD0_MASK             (0xFE00U)
#define LCDIF_CSC_OFFSET_RSRVD0_SHIFT            (9U)
#define LCDIF_CSC_OFFSET_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD0_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD0_MASK)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK        (0x1FF0000U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT       (16U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD1_MASK             (0xFE000000U)
#define LCDIF_CSC_OFFSET_RSRVD1_SHIFT            (25U)
#define LCDIF_CSC_OFFSET_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD1_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD1_MASK)
/*! @} */

/*! @name CSC_LIMIT - RGB to YCbCr 4:2:2 CSC Limit Register */
/*! @{ */
#define LCDIF_CSC_LIMIT_Y_MAX_MASK               (0xFFU)
#define LCDIF_CSC_LIMIT_Y_MAX_SHIFT              (0U)
#define LCDIF_CSC_LIMIT_Y_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MAX_SHIFT)) & LCDIF_CSC_LIMIT_Y_MAX_MASK)
#define LCDIF_CSC_LIMIT_Y_MIN_MASK               (0xFF00U)
#define LCDIF_CSC_LIMIT_Y_MIN_SHIFT              (8U)
#define LCDIF_CSC_LIMIT_Y_MIN(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MIN_SHIFT)) & LCDIF_CSC_LIMIT_Y_MIN_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MAX_MASK            (0xFF0000U)
#define LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT           (16U)
#define LCDIF_CSC_LIMIT_CBCR_MAX(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MAX_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MIN_MASK            (0xFF000000U)
#define LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT           (24U)
#define LCDIF_CSC_LIMIT_CBCR_MIN(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MIN_MASK)
/*! @} */

/*! @name DATA - LCD Interface Data Register */
/*! @{ */
#define LCDIF_DATA_DATA_ZERO_MASK                (0xFFU)
#define LCDIF_DATA_DATA_ZERO_SHIFT               (0U)
#define LCDIF_DATA_DATA_ZERO(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ZERO_SHIFT)) & LCDIF_DATA_DATA_ZERO_MASK)
#define LCDIF_DATA_DATA_ONE_MASK                 (0xFF00U)
#define LCDIF_DATA_DATA_ONE_SHIFT                (8U)
#define LCDIF_DATA_DATA_ONE(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ONE_SHIFT)) & LCDIF_DATA_DATA_ONE_MASK)
#define LCDIF_DATA_DATA_TWO_MASK                 (0xFF0000U)
#define LCDIF_DATA_DATA_TWO_SHIFT                (16U)
#define LCDIF_DATA_DATA_TWO(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_TWO_SHIFT)) & LCDIF_DATA_DATA_TWO_MASK)
#define LCDIF_DATA_DATA_THREE_MASK               (0xFF000000U)
#define LCDIF_DATA_DATA_THREE_SHIFT              (24U)
#define LCDIF_DATA_DATA_THREE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_THREE_SHIFT)) & LCDIF_DATA_DATA_THREE_MASK)
/*! @} */

/*! @name BM_ERROR_STAT - Bus Master Error Status Register */
/*! @{ */
#define LCDIF_BM_ERROR_STAT_ADDR_MASK            (0xFFFFFFFFU)
#define LCDIF_BM_ERROR_STAT_ADDR_SHIFT           (0U)
#define LCDIF_BM_ERROR_STAT_ADDR(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_BM_ERROR_STAT_ADDR_SHIFT)) & LCDIF_BM_ERROR_STAT_ADDR_MASK)
/*! @} */

/*! @name CRC_STAT - CRC Status Register */
/*! @{ */
#define LCDIF_CRC_STAT_CRC_VALUE_MASK            (0xFFFFFFFFU)
#define LCDIF_CRC_STAT_CRC_VALUE_SHIFT           (0U)
#define LCDIF_CRC_STAT_CRC_VALUE(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CRC_STAT_CRC_VALUE_SHIFT)) & LCDIF_CRC_STAT_CRC_VALUE_MASK)
/*! @} */

/*! @name STAT - LCD Interface Status Register */
/*! @{ */
#define LCDIF_STAT_LFIFO_COUNT_MASK              (0x1FFU)
#define LCDIF_STAT_LFIFO_COUNT_SHIFT             (0U)
#define LCDIF_STAT_LFIFO_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_LFIFO_COUNT_SHIFT)) & LCDIF_STAT_LFIFO_COUNT_MASK)
#define LCDIF_STAT_RSRVD0_MASK                   (0xFFFE00U)
#define LCDIF_STAT_RSRVD0_SHIFT                  (9U)
#define LCDIF_STAT_RSRVD0(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_RSRVD0_SHIFT)) & LCDIF_STAT_RSRVD0_MASK)
#define LCDIF_STAT_DVI_CURRENT_FIELD_MASK        (0x1000000U)
#define LCDIF_STAT_DVI_CURRENT_FIELD_SHIFT       (24U)
#define LCDIF_STAT_BUSY_MASK                     (0x2000000U)
#define LCDIF_STAT_BUSY_SHIFT                    (25U)
#define LCDIF_STAT_TXFIFO_EMPTY_MASK             (0x4000000U)
#define LCDIF_STAT_TXFIFO_EMPTY_SHIFT            (26U)
#define LCDIF_STAT_TXFIFO_FULL_MASK              (0x8000000U)
#define LCDIF_STAT_TXFIFO_FULL_SHIFT             (27U)
#define LCDIF_STAT_LFIFO_EMPTY_MASK              (0x10000000U)
#define LCDIF_STAT_LFIFO_EMPTY_SHIFT             (28U)
#define LCDIF_STAT_LFIFO_FULL_MASK               (0x20000000U)
#define LCDIF_STAT_LFIFO_FULL_SHIFT              (29U)
#define LCDIF_STAT_PRESENT_MASK                  (0x80000000U)
#define LCDIF_STAT_PRESENT_SHIFT                 (31U)
/*! @} */

/*! @name THRES - LCDIF Threshold Register */
/*! @{ */
#define LCDIF_THRES_PANIC_MASK                   (0x1FFU)
#define LCDIF_THRES_PANIC_SHIFT                  (0U)
#define LCDIF_THRES_PANIC(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_PANIC_SHIFT)) & LCDIF_THRES_PANIC_MASK)
#define LCDIF_THRES_RSRVD1_MASK                  (0xFE00U)
#define LCDIF_THRES_RSRVD1_SHIFT                 (9U)
#define LCDIF_THRES_RSRVD1(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD1_SHIFT)) & LCDIF_THRES_RSRVD1_MASK)
#define LCDIF_THRES_FASTCLOCK_MASK               (0x1FF0000U)
#define LCDIF_THRES_FASTCLOCK_SHIFT              (16U)
#define LCDIF_THRES_FASTCLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_FASTCLOCK_SHIFT)) & LCDIF_THRES_FASTCLOCK_MASK)
#define LCDIF_THRES_RSRVD2_MASK                  (0xFE000000U)
#define LCDIF_THRES_RSRVD2_SHIFT                 (25U)
#define LCDIF_THRES_RSRVD2(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD2_SHIFT)) & LCDIF_THRES_RSRVD2_MASK)
/*! @} */

/*! @name AS_CTRL - LCDIF AS Buffer Control Register */
/*! @{ */
#define LCDIF_AS_CTRL_AS_ENABLE_MASK             (0x1U)
#define LCDIF_AS_CTRL_AS_ENABLE_SHIFT            (0U)
#define LCDIF_AS_CTRL_ALPHA_CTRL_MASK            (0x6U)
#define LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT           (1U)
#define LCDIF_AS_CTRL_ALPHA_CTRL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT)) & LCDIF_AS_CTRL_ALPHA_CTRL_MASK)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_MASK       (0x8U)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_SHIFT      (3U)
#define LCDIF_AS_CTRL_FORMAT_MASK                (0xF0U)
#define LCDIF_AS_CTRL_FORMAT_SHIFT               (4U)
#define LCDIF_AS_CTRL_FORMAT(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_FORMAT_SHIFT)) & LCDIF_AS_CTRL_FORMAT_MASK)
#define LCDIF_AS_CTRL_ALPHA_MASK                 (0xFF00U)
#define LCDIF_AS_CTRL_ALPHA_SHIFT                (8U)
#define LCDIF_AS_CTRL_ALPHA(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_SHIFT)) & LCDIF_AS_CTRL_ALPHA_MASK)
#define LCDIF_AS_CTRL_ROP_MASK                   (0xF0000U)
#define LCDIF_AS_CTRL_ROP_SHIFT                  (16U)
#define LCDIF_AS_CTRL_ROP(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ROP_SHIFT)) & LCDIF_AS_CTRL_ROP_MASK)
#define LCDIF_AS_CTRL_ALPHA_INVERT_MASK          (0x100000U)
#define LCDIF_AS_CTRL_ALPHA_INVERT_SHIFT         (20U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK    (0x600000U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT   (21U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_AS_CTRL_PS_DISABLE_MASK            (0x800000U)
#define LCDIF_AS_CTRL_PS_DISABLE_SHIFT           (23U)
#define LCDIF_AS_CTRL_RVDS1_MASK                 (0x7000000U)
#define LCDIF_AS_CTRL_RVDS1_SHIFT                (24U)
#define LCDIF_AS_CTRL_RVDS1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_RVDS1_SHIFT)) & LCDIF_AS_CTRL_RVDS1_MASK)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_MASK       (0x8000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_SHIFT      (27U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_MASK    (0x10000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_SHIFT   (28U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_MASK        (0x20000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_SHIFT       (29U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_MASK         (0x40000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_SHIFT        (30U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_MASK      (0x80000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_SHIFT     (31U)
/*! @} */

/*! @name AS_BUF - Alpha Surface Buffer Pointer */
/*! @{ */
#define LCDIF_AS_BUF_ADDR_MASK                   (0xFFFFFFFFU)
#define LCDIF_AS_BUF_ADDR_SHIFT                  (0U)
#define LCDIF_AS_BUF_ADDR(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_BUF_ADDR_SHIFT)) & LCDIF_AS_BUF_ADDR_MASK)
/*! @} */

/*! @name AS_NEXT_BUF -  */
/*! @{ */
#define LCDIF_AS_NEXT_BUF_ADDR_MASK              (0xFFFFFFFFU)
#define LCDIF_AS_NEXT_BUF_ADDR_SHIFT             (0U)
#define LCDIF_AS_NEXT_BUF_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_NEXT_BUF_ADDR_SHIFT)) & LCDIF_AS_NEXT_BUF_ADDR_MASK)
/*! @} */

/*! @name AS_CLRKEYLOW - LCDIF Overlay Color Key Low */
/*! @{ */
#define LCDIF_AS_CLRKEYLOW_PIXEL_MASK            (0xFFFFFFU)
#define LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT           (0U)
#define LCDIF_AS_CLRKEYLOW_PIXEL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYLOW_PIXEL_MASK)
#define LCDIF_AS_CLRKEYLOW_RSVD1_MASK            (0xFF000000U)
#define LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT           (24U)
#define LCDIF_AS_CLRKEYLOW_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYLOW_RSVD1_MASK)
/*! @} */

/*! @name AS_CLRKEYHIGH - LCDIF Overlay Color Key High */
/*! @{ */
#define LCDIF_AS_CLRKEYHIGH_PIXEL_MASK           (0xFFFFFFU)
#define LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT          (0U)
#define LCDIF_AS_CLRKEYHIGH_PIXEL(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYHIGH_PIXEL_MASK)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_MASK           (0xFF000000U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT          (24U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYHIGH_RSVD1_MASK)
/*! @} */

/*! @name SYNC_DELAY - LCD working insync mode with CSI for VSYNC delay */
/*! @{ */
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK      (0xFFFFU)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT     (0U)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK      (0xFFFF0000U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT     (16U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group LCDIF_Register_Masks */


/* LCDIF - Peripheral instance base addresses */
/** Peripheral LCDIF base pointer */
#define LCDIF_BASE_PTR                           ((LCDIF_MemMapPtr)0x30320000u)
/** Array initializer of LCDIF peripheral base pointers */
#define LCDIF_BASE_PTRS                          { LCDIF_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register instance definitions */
/* LCDIF */
#define LCDIF_CTRL                               LCDIF_CTRL_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_SET                           LCDIF_CTRL_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_CLR                           LCDIF_CTRL_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_TOG                           LCDIF_CTRL_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1                              LCDIF_CTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_SET                          LCDIF_CTRL1_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_CLR                          LCDIF_CTRL1_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_TOG                          LCDIF_CTRL1_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2                              LCDIF_CTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_SET                          LCDIF_CTRL2_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_CLR                          LCDIF_CTRL2_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_TOG                          LCDIF_CTRL2_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_TRANSFER_COUNT                     LCDIF_TRANSFER_COUNT_REG(LCDIF_BASE_PTR)
#define LCDIF_CUR_BUF                            LCDIF_CUR_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_NEXT_BUF                           LCDIF_NEXT_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_TIMING                             LCDIF_TIMING_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0                            LCDIF_VDCTRL0_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_SET                        LCDIF_VDCTRL0_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_CLR                        LCDIF_VDCTRL0_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_TOG                        LCDIF_VDCTRL0_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL1                            LCDIF_VDCTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL2                            LCDIF_VDCTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL3                            LCDIF_VDCTRL3_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL4                            LCDIF_VDCTRL4_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL0                           LCDIF_DVICTRL0_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL1                           LCDIF_DVICTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL2                           LCDIF_DVICTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL3                           LCDIF_DVICTRL3_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL4                           LCDIF_DVICTRL4_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF0                         LCDIF_CSC_COEFF0_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF1                         LCDIF_CSC_COEFF1_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF2                         LCDIF_CSC_COEFF2_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF3                         LCDIF_CSC_COEFF3_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF4                         LCDIF_CSC_COEFF4_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_OFFSET                         LCDIF_CSC_OFFSET_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_LIMIT                          LCDIF_CSC_LIMIT_REG(LCDIF_BASE_PTR)
#define LCDIF_DATA                               LCDIF_DATA_REG(LCDIF_BASE_PTR)
#define LCDIF_BM_ERROR_STAT                      LCDIF_BM_ERROR_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_CRC_STAT                           LCDIF_CRC_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_STAT                               LCDIF_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_THRES                              LCDIF_THRES_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CTRL                            LCDIF_AS_CTRL_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_BUF                             LCDIF_AS_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_NEXT_BUF                        LCDIF_AS_NEXT_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CLRKEYLOW                       LCDIF_AS_CLRKEYLOW_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CLRKEYHIGH                      LCDIF_AS_CLRKEYHIGH_REG(LCDIF_BASE_PTR)
#define LCDIF_SYNC_DELAY                         LCDIF_SYNC_DELAY_REG(LCDIF_BASE_PTR)

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LCDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- LMEM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Peripheral LMEM
 * @{
 */

/** LMEM - Peripheral register structure */
typedef struct LMEM_MemMap {
  uint32_t PCCCR;                                  /**< Cache control register, offset: 0x0 */
  uint32_t PCCLCR;                                 /**< Cache line control register, offset: 0x4 */
  uint32_t PCCSAR;                                 /**< Cache search address register, offset: 0x8 */
  uint32_t PCCCVR;                                 /**< Cache read/write value register, offset: 0xC */
  uint8_t RESERVED_0[2032];
  uint32_t PSCCR;                                  /**< Cache control register, offset: 0x800 */
  uint32_t PSCLCR;                                 /**< Cache line control register, offset: 0x804 */
  uint32_t PSCSAR;                                 /**< Cache search address register, offset: 0x808 */
  uint32_t PSCCVR;                                 /**< Cache read/write value register, offset: 0x80C */
} volatile *LMEM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LMEM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Register_Accessor_Macros LMEM - Register accessor macros
 * @{
 */


/* LMEM - Register accessors */
#define LMEM_PCCCR_REG(base)                     ((base)->PCCCR)
#define LMEM_PCCLCR_REG(base)                    ((base)->PCCLCR)
#define LMEM_PCCSAR_REG(base)                    ((base)->PCCSAR)
#define LMEM_PCCCVR_REG(base)                    ((base)->PCCCVR)
#define LMEM_PSCCR_REG(base)                     ((base)->PSCCR)
#define LMEM_PSCLCR_REG(base)                    ((base)->PSCLCR)
#define LMEM_PSCSAR_REG(base)                    ((base)->PSCSAR)
#define LMEM_PSCCVR_REG(base)                    ((base)->PSCCVR)

/*!
 * @}
 */ /* end of group LMEM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LMEM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Register_Masks LMEM Register Masks
 * @{
 */

/*! @name PCCCR - Cache control register */
/*! @{ */
#define LMEM_PCCCR_ENCACHE_MASK                  (0x1U)
#define LMEM_PCCCR_ENCACHE_SHIFT                 (0U)
#define LMEM_PCCCR_ENWRBUF_MASK                  (0x2U)
#define LMEM_PCCCR_ENWRBUF_SHIFT                 (1U)
#define LMEM_PCCCR_PCCR2_MASK                    (0x4U)
#define LMEM_PCCCR_PCCR2_SHIFT                   (2U)
#define LMEM_PCCCR_PCCR3_MASK                    (0x8U)
#define LMEM_PCCCR_PCCR3_SHIFT                   (3U)
#define LMEM_PCCCR_INVW0_MASK                    (0x1000000U)
#define LMEM_PCCCR_INVW0_SHIFT                   (24U)
#define LMEM_PCCCR_PUSHW0_MASK                   (0x2000000U)
#define LMEM_PCCCR_PUSHW0_SHIFT                  (25U)
#define LMEM_PCCCR_INVW1_MASK                    (0x4000000U)
#define LMEM_PCCCR_INVW1_SHIFT                   (26U)
#define LMEM_PCCCR_PUSHW1_MASK                   (0x8000000U)
#define LMEM_PCCCR_PUSHW1_SHIFT                  (27U)
#define LMEM_PCCCR_GO_MASK                       (0x80000000U)
#define LMEM_PCCCR_GO_SHIFT                      (31U)
/*! @} */

/*! @name PCCLCR - Cache line control register */
/*! @{ */
#define LMEM_PCCLCR_LGO_MASK                     (0x1U)
#define LMEM_PCCLCR_LGO_SHIFT                    (0U)
#define LMEM_PCCLCR_CACHEADDR_MASK               (0x1FFCU)
#define LMEM_PCCLCR_CACHEADDR_SHIFT              (2U)
#define LMEM_PCCLCR_CACHEADDR(x)                 (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_CACHEADDR_SHIFT)) & LMEM_PCCLCR_CACHEADDR_MASK)
#define LMEM_PCCLCR_WSEL_MASK                    (0x4000U)
#define LMEM_PCCLCR_WSEL_SHIFT                   (14U)
#define LMEM_PCCLCR_TDSEL_MASK                   (0x10000U)
#define LMEM_PCCLCR_TDSEL_SHIFT                  (16U)
#define LMEM_PCCLCR_LCIVB_MASK                   (0x100000U)
#define LMEM_PCCLCR_LCIVB_SHIFT                  (20U)
#define LMEM_PCCLCR_LCIMB_MASK                   (0x200000U)
#define LMEM_PCCLCR_LCIMB_SHIFT                  (21U)
#define LMEM_PCCLCR_LCWAY_MASK                   (0x400000U)
#define LMEM_PCCLCR_LCWAY_SHIFT                  (22U)
#define LMEM_PCCLCR_LCMD_MASK                    (0x3000000U)
#define LMEM_PCCLCR_LCMD_SHIFT                   (24U)
/*! LCMD - Line Command
 *  0b00..Search and read or write
 *  0b01..Invalidate
 *  0b10..Push
 *  0b11..Clear
 */
#define LMEM_PCCLCR_LCMD(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCLCR_LCMD_SHIFT)) & LMEM_PCCLCR_LCMD_MASK)
#define LMEM_PCCLCR_LADSEL_MASK                  (0x4000000U)
#define LMEM_PCCLCR_LADSEL_SHIFT                 (26U)
#define LMEM_PCCLCR_LACC_MASK                    (0x8000000U)
#define LMEM_PCCLCR_LACC_SHIFT                   (27U)
/*! @} */

/*! @name PCCSAR - Cache search address register */
/*! @{ */
#define LMEM_PCCSAR_LGO_MASK                     (0x1U)
#define LMEM_PCCSAR_LGO_SHIFT                    (0U)
#define LMEM_PCCSAR_PHYADDR_MASK                 (0xFFFFFFFCU)
#define LMEM_PCCSAR_PHYADDR_SHIFT                (2U)
#define LMEM_PCCSAR_PHYADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LMEM_PCCSAR_PHYADDR_SHIFT)) & LMEM_PCCSAR_PHYADDR_MASK)
/*! @} */

/*! @name PCCCVR - Cache read/write value register */
/*! @{ */
#define LMEM_PCCCVR_DATA_MASK                    (0xFFFFFFFFU)
#define LMEM_PCCCVR_DATA_SHIFT                   (0U)
#define LMEM_PCCCVR_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PCCCVR_DATA_SHIFT)) & LMEM_PCCCVR_DATA_MASK)
/*! @} */

/*! @name PSCCR - Cache control register */
/*! @{ */
#define LMEM_PSCCR_ENCACHE_MASK                  (0x1U)
#define LMEM_PSCCR_ENCACHE_SHIFT                 (0U)
#define LMEM_PSCCR_ENWRBUF_MASK                  (0x2U)
#define LMEM_PSCCR_ENWRBUF_SHIFT                 (1U)
#define LMEM_PSCCR_INVW0_MASK                    (0x1000000U)
#define LMEM_PSCCR_INVW0_SHIFT                   (24U)
#define LMEM_PSCCR_PUSHW0_MASK                   (0x2000000U)
#define LMEM_PSCCR_PUSHW0_SHIFT                  (25U)
#define LMEM_PSCCR_INVW1_MASK                    (0x4000000U)
#define LMEM_PSCCR_INVW1_SHIFT                   (26U)
#define LMEM_PSCCR_PUSHW1_MASK                   (0x8000000U)
#define LMEM_PSCCR_PUSHW1_SHIFT                  (27U)
#define LMEM_PSCCR_GO_MASK                       (0x80000000U)
#define LMEM_PSCCR_GO_SHIFT                      (31U)
/*! @} */

/*! @name PSCLCR - Cache line control register */
/*! @{ */
#define LMEM_PSCLCR_LGO_MASK                     (0x1U)
#define LMEM_PSCLCR_LGO_SHIFT                    (0U)
#define LMEM_PSCLCR_CACHEADDR_MASK               (0x1FFCU)
#define LMEM_PSCLCR_CACHEADDR_SHIFT              (2U)
#define LMEM_PSCLCR_CACHEADDR(x)                 (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_CACHEADDR_SHIFT)) & LMEM_PSCLCR_CACHEADDR_MASK)
#define LMEM_PSCLCR_WSEL_MASK                    (0x4000U)
#define LMEM_PSCLCR_WSEL_SHIFT                   (14U)
#define LMEM_PSCLCR_TDSEL_MASK                   (0x10000U)
#define LMEM_PSCLCR_TDSEL_SHIFT                  (16U)
#define LMEM_PSCLCR_LCIVB_MASK                   (0x100000U)
#define LMEM_PSCLCR_LCIVB_SHIFT                  (20U)
#define LMEM_PSCLCR_LCIMB_MASK                   (0x200000U)
#define LMEM_PSCLCR_LCIMB_SHIFT                  (21U)
#define LMEM_PSCLCR_LCWAY_MASK                   (0x400000U)
#define LMEM_PSCLCR_LCWAY_SHIFT                  (22U)
#define LMEM_PSCLCR_LCMD_MASK                    (0x3000000U)
#define LMEM_PSCLCR_LCMD_SHIFT                   (24U)
/*! LCMD - Line Command
 *  0b00..Search and read or write
 *  0b01..Invalidate
 *  0b10..Push
 *  0b11..Clear
 */
#define LMEM_PSCLCR_LCMD(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCLCR_LCMD_SHIFT)) & LMEM_PSCLCR_LCMD_MASK)
#define LMEM_PSCLCR_LADSEL_MASK                  (0x4000000U)
#define LMEM_PSCLCR_LADSEL_SHIFT                 (26U)
#define LMEM_PSCLCR_LACC_MASK                    (0x8000000U)
#define LMEM_PSCLCR_LACC_SHIFT                   (27U)
/*! @} */

/*! @name PSCSAR - Cache search address register */
/*! @{ */
#define LMEM_PSCSAR_LGO_MASK                     (0x1U)
#define LMEM_PSCSAR_LGO_SHIFT                    (0U)
#define LMEM_PSCSAR_PHYADDR_MASK                 (0xFFFFFFFCU)
#define LMEM_PSCSAR_PHYADDR_SHIFT                (2U)
#define LMEM_PSCSAR_PHYADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LMEM_PSCSAR_PHYADDR_SHIFT)) & LMEM_PSCSAR_PHYADDR_MASK)
/*! @} */

/*! @name PSCCVR - Cache read/write value register */
/*! @{ */
#define LMEM_PSCCVR_DATA_MASK                    (0xFFFFFFFFU)
#define LMEM_PSCCVR_DATA_SHIFT                   (0U)
#define LMEM_PSCCVR_DATA(x)                      (((uint32_t)(((uint32_t)(x)) << LMEM_PSCCVR_DATA_SHIFT)) & LMEM_PSCCVR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group LMEM_Register_Masks */


/* LMEM - Peripheral instance base addresses */
/** Peripheral LMEM base pointer */
#define LMEM_BASE_PTR                            ((LMEM_MemMapPtr)0xE0082000u)
/** Array initializer of LMEM peripheral base pointers */
#define LMEM_BASE_PTRS                           { LMEM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LMEM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LMEM_Register_Accessor_Macros LMEM - Register accessor macros
 * @{
 */


/* LMEM - Register instance definitions */
/* LMEM */
#define LMEM_PCCCR                               LMEM_PCCCR_REG(LMEM_BASE_PTR)
#define LMEM_PCCLCR                              LMEM_PCCLCR_REG(LMEM_BASE_PTR)
#define LMEM_PCCSAR                              LMEM_PCCSAR_REG(LMEM_BASE_PTR)
#define LMEM_PCCCVR                              LMEM_PCCCVR_REG(LMEM_BASE_PTR)
#define LMEM_PSCCR                               LMEM_PSCCR_REG(LMEM_BASE_PTR)
#define LMEM_PSCLCR                              LMEM_PSCLCR_REG(LMEM_BASE_PTR)
#define LMEM_PSCSAR                              LMEM_PSCSAR_REG(LMEM_BASE_PTR)
#define LMEM_PSCCVR                              LMEM_PSCCVR_REG(LMEM_BASE_PTR)

/*!
 * @}
 */ /* end of group LMEM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LMEM_Peripheral */


/* ----------------------------------------------------------------------------
   -- LUT_LD
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LUT_LD_Peripheral LUT_LD
 * @{
 */

/** LUT_LD - Peripheral register structure */
typedef struct LUT_LD_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< Control/Status register for LUT Loader., offset: 0x0 */
    uint32_t SET;                                    /**< Control/Status register for LUT Loader., offset: 0x4 */
    uint32_t CLR;                                    /**< Control/Status register for LUT Loader., offset: 0x8 */
    uint32_t TOG;                                    /**< Control/Status register for LUT Loader., offset: 0xC */
  } CTRL_STATUS;
  uint32_t BASE_ADDR;                              /**< Address for data fetch., offset: 0x10 */
} volatile *LUT_LD_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LUT_LD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LUT_LD_Register_Accessor_Macros LUT_LD - Register accessor macros
 * @{
 */


/* LUT_LD - Register accessors */
#define LUT_LD_CTRL_STATUS_REG(base)             ((base)->CTRL_STATUS.RW)
#define LUT_LD_CTRL_STATUS_SET_REG(base)         ((base)->CTRL_STATUS.SET)
#define LUT_LD_CTRL_STATUS_CLR_REG(base)         ((base)->CTRL_STATUS.CLR)
#define LUT_LD_CTRL_STATUS_TOG_REG(base)         ((base)->CTRL_STATUS.TOG)
#define LUT_LD_BASE_ADDR_REG(base)               ((base)->BASE_ADDR)

/*!
 * @}
 */ /* end of group LUT_LD_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LUT_LD Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LUT_LD_Register_Masks LUT_LD Register Masks
 * @{
 */

/*! @name CTRL_STATUS - Control/Status register for LUT Loader. */
/*! @{ */
#define LUT_LD_CTRL_STATUS_ENABLE_MASK           (0x1U)
#define LUT_LD_CTRL_STATUS_ENABLE_SHIFT          (0U)
#define LUT_LD_CTRL_STATUS_BYTES_PER_REQ_MASK    (0x2U)
#define LUT_LD_CTRL_STATUS_BYTES_PER_REQ_SHIFT   (1U)
#define LUT_LD_CTRL_STATUS_RD_ERR_EN_MASK        (0x100U)
#define LUT_LD_CTRL_STATUS_RD_ERR_EN_SHIFT       (8U)
#define LUT_LD_CTRL_STATUS_RD_ERR_MASK           (0x10000U)
#define LUT_LD_CTRL_STATUS_RD_ERR_SHIFT          (16U)
/*! @} */

/*! @name BASE_ADDR - Address for data fetch. */
/*! @{ */
#define LUT_LD_BASE_ADDR_BASE_ADDR_MASK          (0xFFFFFFFFU)
#define LUT_LD_BASE_ADDR_BASE_ADDR_SHIFT         (0U)
#define LUT_LD_BASE_ADDR_BASE_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << LUT_LD_BASE_ADDR_BASE_ADDR_SHIFT)) & LUT_LD_BASE_ADDR_BASE_ADDR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group LUT_LD_Register_Masks */


/* LUT_LD - Peripheral instance base addresses */
/** Peripheral DCSS__LUT_LD base pointer */
#define DCSS__LUT_LD_BASE_PTR                    ((LUT_LD_MemMapPtr)0x32E24000u)
/** Array initializer of LUT_LD peripheral base pointers */
#define LUT_LD_BASE_PTRS                         { DCSS__LUT_LD_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LUT_LD - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LUT_LD_Register_Accessor_Macros LUT_LD - Register accessor macros
 * @{
 */


/* LUT_LD - Register instance definitions */
/* DCSS__LUT_LD */
#define DCSS__LUT_LD_CTRL_STATUS                 LUT_LD_CTRL_STATUS_REG(DCSS__LUT_LD_BASE_PTR)
#define DCSS__LUT_LD_CTRL_STATUS_SET             LUT_LD_CTRL_STATUS_SET_REG(DCSS__LUT_LD_BASE_PTR)
#define DCSS__LUT_LD_CTRL_STATUS_CLR             LUT_LD_CTRL_STATUS_CLR_REG(DCSS__LUT_LD_BASE_PTR)
#define DCSS__LUT_LD_CTRL_STATUS_TOG             LUT_LD_CTRL_STATUS_TOG_REG(DCSS__LUT_LD_BASE_PTR)
#define DCSS__LUT_LD_BASE_ADDR                   LUT_LD_BASE_ADDR_REG(DCSS__LUT_LD_BASE_PTR)

/*!
 * @}
 */ /* end of group LUT_LD_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LUT_LD_Peripheral */


/* ----------------------------------------------------------------------------
   -- MCM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Peripheral MCM
 * @{
 */

/** MCM - Peripheral register structure */
typedef struct MCM_MemMap {
  uint8_t RESERVED_0[8];
  uint16_t PLASC;                                  /**< Crossbar Switch (AXBS) Slave Configuration, offset: 0x8 */
  uint16_t PLAMC;                                  /**< Crossbar Switch (AXBS) Master Configuration, offset: 0xA */
  uint32_t PLACR;                                  /**< Crossbar Switch (AXBS) Control Register, offset: 0xC */
  uint8_t RESERVED_1[16];
  uint32_t FADR;                                   /**< Fault address register, offset: 0x20 */
  uint32_t FATR;                                   /**< Fault attributes register, offset: 0x24 */
  uint32_t FDR;                                    /**< Fault data register, offset: 0x28 */
} volatile *MCM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
 * @{
 */


/* MCM - Register accessors */
#define MCM_PLASC_REG(base)                      ((base)->PLASC)
#define MCM_PLAMC_REG(base)                      ((base)->PLAMC)
#define MCM_PLACR_REG(base)                      ((base)->PLACR)
#define MCM_FADR_REG(base)                       ((base)->FADR)
#define MCM_FATR_REG(base)                       ((base)->FATR)
#define MCM_FDR_REG(base)                        ((base)->FDR)

/*!
 * @}
 */ /* end of group MCM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Register_Masks MCM Register Masks
 * @{
 */

/*! @name PLASC - Crossbar Switch (AXBS) Slave Configuration */
/*! @{ */
#define MCM_PLASC_ASC_MASK                       (0xFFU)
#define MCM_PLASC_ASC_SHIFT                      (0U)
/*! ASC - Each bit in the ASC field indicates whether there is a corresponding connection to the
 *    crossbar switch's slave input port.
 *  0b00000000..A bus slave connection to AXBS input port n is absent
 *  0b00000001..A bus slave connection to AXBS input port n is present
 */
#define MCM_PLASC_ASC(x)                         (((uint16_t)(((uint16_t)(x)) << MCM_PLASC_ASC_SHIFT)) & MCM_PLASC_ASC_MASK)
/*! @} */

/*! @name PLAMC - Crossbar Switch (AXBS) Master Configuration */
/*! @{ */
#define MCM_PLAMC_AMC_MASK                       (0xFFU)
#define MCM_PLAMC_AMC_SHIFT                      (0U)
/*! AMC - Each bit in the AMC field indicates whether there is a corresponding connection to the AXBS master input port.
 *  0b00000000..A bus master connection to AXBS input port n is absent
 *  0b00000001..A bus master connection to AXBS input port n is present
 */
#define MCM_PLAMC_AMC(x)                         (((uint16_t)(((uint16_t)(x)) << MCM_PLAMC_AMC_SHIFT)) & MCM_PLAMC_AMC_MASK)
/*! @} */

/*! @name FADR - Fault address register */
/*! @{ */
#define MCM_FADR_ADDRESS_MASK                    (0xFFFFFFFFU)
#define MCM_FADR_ADDRESS_SHIFT                   (0U)
#define MCM_FADR_ADDRESS(x)                      (((uint32_t)(((uint32_t)(x)) << MCM_FADR_ADDRESS_SHIFT)) & MCM_FADR_ADDRESS_MASK)
/*! @} */

/*! @name FATR - Fault attributes register */
/*! @{ */
#define MCM_FATR_BEDA_MASK                       (0x1U)
#define MCM_FATR_BEDA_SHIFT                      (0U)
#define MCM_FATR_BEMD_MASK                       (0x2U)
#define MCM_FATR_BEMD_SHIFT                      (1U)
#define MCM_FATR_BESZ_MASK                       (0x30U)
#define MCM_FATR_BESZ_SHIFT                      (4U)
/*! BESZ - Bus error size
 *  0b00..8-bit access
 *  0b01..16-bit access
 *  0b10..32-bit access
 *  0b11..Reserved
 */
#define MCM_FATR_BESZ(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BESZ_SHIFT)) & MCM_FATR_BESZ_MASK)
#define MCM_FATR_BEWT_MASK                       (0x80U)
#define MCM_FATR_BEWT_SHIFT                      (7U)
#define MCM_FATR_BEMN_MASK                       (0xF00U)
#define MCM_FATR_BEMN_SHIFT                      (8U)
#define MCM_FATR_BEMN(x)                         (((uint32_t)(((uint32_t)(x)) << MCM_FATR_BEMN_SHIFT)) & MCM_FATR_BEMN_MASK)
#define MCM_FATR_BEOVR_MASK                      (0x80000000U)
#define MCM_FATR_BEOVR_SHIFT                     (31U)
/*! @} */

/*! @name FDR - Fault data register */
/*! @{ */
#define MCM_FDR_DATA_MASK                        (0xFFFFFFFFU)
#define MCM_FDR_DATA_SHIFT                       (0U)
#define MCM_FDR_DATA(x)                          (((uint32_t)(((uint32_t)(x)) << MCM_FDR_DATA_SHIFT)) & MCM_FDR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MCM_Register_Masks */


/* MCM - Peripheral instance base addresses */
/** Peripheral MCM base pointer */
#define MCM_BASE_PTR                             ((MCM_MemMapPtr)0xE0080000u)
/** Array initializer of MCM peripheral base pointers */
#define MCM_BASE_PTRS                            { MCM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MCM_Register_Accessor_Macros MCM - Register accessor macros
 * @{
 */


/* MCM - Register instance definitions */
/* MCM */
#define MCM_PLASC                                MCM_PLASC_REG(MCM_BASE_PTR)
#define MCM_PLAMC                                MCM_PLAMC_REG(MCM_BASE_PTR)
#define MCM_PLACR                                MCM_PLACR_REG(MCM_BASE_PTR)
#define MCM_FADR                                 MCM_FADR_REG(MCM_BASE_PTR)
#define MCM_FATR                                 MCM_FATR_REG(MCM_BASE_PTR)
#define MCM_FDR                                  MCM_FDR_REG(MCM_BASE_PTR)

/*!
 * @}
 */ /* end of group MCM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MCM_Peripheral */


/* ----------------------------------------------------------------------------
   -- MED_DC_SCALER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_DC_SCALER_Peripheral MED_DC_SCALER
 * @{
 */

/** MED_DC_SCALER - Peripheral register structure */
typedef struct MED_DC_SCALER_MemMap {
  uint32_t SCALE_CTRL;                             /**< Scale Control Register, offset: 0x0 */
  uint32_t SCALE_OFIFO_CTRL;                       /**< Scale Output FIFO Control Register, offset: 0x4 */
  uint32_t SCALE_SRC_DATA_CTRL;                    /**< Scale Source Data Control Register, offset: 0x8 */
  uint32_t SCALE_BIT_DEPTH;                        /**< Scale Bit Depth Control Register, offset: 0xC */
  uint32_t SCALE_SRC_FORMAT;                       /**< Scale Source Format Control Register, offset: 0x10 */
  uint32_t SCALE_DST_FORMAT;                       /**< Scale Destination Format Control Register, offset: 0x14 */
  uint32_t SCALE_SRC_LUMA_RES;                     /**< Scale Source Luma Resolution Register, offset: 0x18 */
  uint32_t SCALE_SRC_CHROMA_RES;                   /**< Scale Source Chroma Resolution Register, offset: 0x1C */
  uint32_t SCALE_DST_LUMA_RES;                     /**< Scale Destination Luma Resolution Register, offset: 0x20 */
  uint32_t SCALE_DST_CHROMA_RES;                   /**< Scale Destination Chroma Resolution Register, offset: 0x24 */
  uint8_t RESERVED_0[32];
  uint32_t SCALE_V_LUMA_START;                     /**< Scale Vertical Luma Start Register, offset: 0x48 */
  uint32_t SCALE_V_LUMA_INC;                       /**< Scale Vertical Luma Increment Register, offset: 0x4C */
  uint32_t SCALE_H_LUMA_START;                     /**< Scale Horizontal Luma Start Register, offset: 0x50 */
  uint32_t SCALE_H_LUMA_INC;                       /**< Scale Horizontal Luma Increment Register, offset: 0x54 */
  uint32_t SCALE_V_CHROMA_START;                   /**< Scale Vertical Chroma Start Register, offset: 0x58 */
  uint32_t SCALE_V_CHROMA_INC;                     /**< Scale Vertical Chroma Increment Register, offset: 0x5C */
  uint32_t SCALE_H_CHROMA_START;                   /**< Scale Horizontal Chroma Start Register, offset: 0x60 */
  uint32_t SCALE_H_CHROMA_INC;                     /**< Scale Horizontal Chroma Increment Register, offset: 0x64 */
  uint8_t RESERVED_1[24];
  uint32_t SCALE_COEF_ARRAY;                       /**< Scale Coefficient Memory Array, offset: 0x80 */
} volatile *MED_DC_SCALER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MED_DC_SCALER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_DC_SCALER_Register_Accessor_Macros MED_DC_SCALER - Register accessor macros
 * @{
 */


/* MED_DC_SCALER - Register accessors */
#define MED_DC_SCALER_SCALE_CTRL_REG(base)       ((base)->SCALE_CTRL)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_REG(base) ((base)->SCALE_OFIFO_CTRL)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_REG(base) ((base)->SCALE_SRC_DATA_CTRL)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_REG(base)  ((base)->SCALE_BIT_DEPTH)
#define MED_DC_SCALER_SCALE_SRC_FORMAT_REG(base) ((base)->SCALE_SRC_FORMAT)
#define MED_DC_SCALER_SCALE_DST_FORMAT_REG(base) ((base)->SCALE_DST_FORMAT)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_REG(base) ((base)->SCALE_SRC_LUMA_RES)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_REG(base) ((base)->SCALE_SRC_CHROMA_RES)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_REG(base) ((base)->SCALE_DST_LUMA_RES)
#define MED_DC_SCALER_SCALE_DST_CHROMA_RES_REG(base) ((base)->SCALE_DST_CHROMA_RES)
#define MED_DC_SCALER_SCALE_V_LUMA_START_REG(base) ((base)->SCALE_V_LUMA_START)
#define MED_DC_SCALER_SCALE_V_LUMA_INC_REG(base) ((base)->SCALE_V_LUMA_INC)
#define MED_DC_SCALER_SCALE_H_LUMA_START_REG(base) ((base)->SCALE_H_LUMA_START)
#define MED_DC_SCALER_SCALE_H_LUMA_INC_REG(base) ((base)->SCALE_H_LUMA_INC)
#define MED_DC_SCALER_SCALE_V_CHROMA_START_REG(base) ((base)->SCALE_V_CHROMA_START)
#define MED_DC_SCALER_SCALE_V_CHROMA_INC_REG(base) ((base)->SCALE_V_CHROMA_INC)
#define MED_DC_SCALER_SCALE_H_CHROMA_START_REG(base) ((base)->SCALE_H_CHROMA_START)
#define MED_DC_SCALER_SCALE_H_CHROMA_INC_REG(base) ((base)->SCALE_H_CHROMA_INC)
#define MED_DC_SCALER_SCALE_COEF_ARRAY_REG(base) ((base)->SCALE_COEF_ARRAY)

/*!
 * @}
 */ /* end of group MED_DC_SCALER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MED_DC_SCALER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_DC_SCALER_Register_Masks MED_DC_SCALER Register Masks
 * @{
 */

/*! @name SCALE_CTRL - Scale Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_SCALER_MASK (0x1U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_SCALER_SHIFT (0U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_REPEAT_MASK (0x10U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_REPEAT_SHIFT (4U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_SCALE2MEM_MASK (0x100U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_SCALE2MEM_SHIFT (8U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_MEM2OFIFO_MASK (0x1000U)
#define MED_DC_SCALER_SCALE_CTRL_ENABLE_MEM2OFIFO_SHIFT (12U)
/*! @} */

/*! @name SCALE_OFIFO_CTRL - Scale Output FIFO Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_LOW_THRESH_MASK (0x3FFU)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_LOW_THRESH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_LOW_THRESH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_LOW_THRESH_SHIFT)) & MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_LOW_THRESH_MASK)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_HIGH_THRESH_MASK (0x3FF0000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_HIGH_THRESH_SHIFT (16U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_HIGH_THRESH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_HIGH_THRESH_SHIFT)) & MED_DC_SCALER_SCALE_OFIFO_CTRL_OFIFO_HIGH_THRESH_MASK)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_UNDERRUN_DETECT_MASK (0x4000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_UNDERRUN_DETECT_SHIFT (26U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_LOW_THRESH_DETECT_MASK (0x8000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_LOW_THRESH_DETECT_SHIFT (27U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_HIGH_THRESH_DETECT_MASK (0x10000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_CLEAR_HIGH_THRESH_DETECT_SHIFT (28U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_UNDERRUN_DETECT_MASK (0x20000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_UNDERRUN_DETECT_SHIFT (29U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_LOW_THRESH_DETECT_MASK (0x40000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_LOW_THRESH_DETECT_SHIFT (30U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_HIGH_THRESH_DETECT_MASK (0x80000000U)
#define MED_DC_SCALER_SCALE_OFIFO_CTRL_ENABLE_HIGH_THRESH_DETECT_SHIFT (31U)
/*! @} */

/*! @name SCALE_SRC_DATA_CTRL - Scale Source Data Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_SRC_SELECT_MASK (0x1U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_SRC_SELECT_SHIFT (0U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_RTRAM_LINES_PER_BANK_MASK (0x2U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_RTRAM_LINES_PER_BANK_SHIFT (1U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_Y_UV_BYTE_SWAP_MASK (0x10U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_Y_UV_BYTE_SWAP_SHIFT (4U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_A2R10G10B10_FORMAT_MASK (0xF00U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_A2R10G10B10_FORMAT_SHIFT (8U)
#define MED_DC_SCALER_SCALE_SRC_DATA_CTRL_A2R10G10B10_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_DATA_CTRL_A2R10G10B10_FORMAT_SHIFT)) & MED_DC_SCALER_SCALE_SRC_DATA_CTRL_A2R10G10B10_FORMAT_MASK)
/*! @} */

/*! @name SCALE_BIT_DEPTH - Scale Bit Depth Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_BIT_DEPTH_LUMA_BIT_DEPTH_MASK (0x3U)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_LUMA_BIT_DEPTH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_LUMA_BIT_DEPTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_BIT_DEPTH_LUMA_BIT_DEPTH_SHIFT)) & MED_DC_SCALER_SCALE_BIT_DEPTH_LUMA_BIT_DEPTH_MASK)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_CHROMA_BIT_DEPTH_MASK (0x30U)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_CHROMA_BIT_DEPTH_SHIFT (4U)
#define MED_DC_SCALER_SCALE_BIT_DEPTH_CHROMA_BIT_DEPTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_BIT_DEPTH_CHROMA_BIT_DEPTH_SHIFT)) & MED_DC_SCALER_SCALE_BIT_DEPTH_CHROMA_BIT_DEPTH_MASK)
/*! @} */

/*! @name SCALE_SRC_FORMAT - Scale Source Format Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_SRC_FORMAT_SRC_FORMAT_MASK (0x3U)
#define MED_DC_SCALER_SCALE_SRC_FORMAT_SRC_FORMAT_SHIFT (0U)
#define MED_DC_SCALER_SCALE_SRC_FORMAT_SRC_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_FORMAT_SRC_FORMAT_SHIFT)) & MED_DC_SCALER_SCALE_SRC_FORMAT_SRC_FORMAT_MASK)
/*! @} */

/*! @name SCALE_DST_FORMAT - Scale Destination Format Control Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_DST_FORMAT_DST_FORMAT_MASK (0x3U)
#define MED_DC_SCALER_SCALE_DST_FORMAT_DST_FORMAT_SHIFT (0U)
#define MED_DC_SCALER_SCALE_DST_FORMAT_DST_FORMAT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_DST_FORMAT_DST_FORMAT_SHIFT)) & MED_DC_SCALER_SCALE_DST_FORMAT_DST_FORMAT_MASK)
/*! @} */

/*! @name SCALE_SRC_LUMA_RES - Scale Source Luma Resolution Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_WIDTH_MASK (0xFFFU)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_WIDTH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_LUMA_RES_WIDTH_SHIFT)) & MED_DC_SCALER_SCALE_SRC_LUMA_RES_WIDTH_MASK)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_HEIGHT_MASK (0xFFF0000U)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_HEIGHT_SHIFT (16U)
#define MED_DC_SCALER_SCALE_SRC_LUMA_RES_HEIGHT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_LUMA_RES_HEIGHT_SHIFT)) & MED_DC_SCALER_SCALE_SRC_LUMA_RES_HEIGHT_MASK)
/*! @} */

/*! @name SCALE_SRC_CHROMA_RES - Scale Source Chroma Resolution Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_WIDTH_MASK (0xFFFU)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_WIDTH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_CHROMA_RES_WIDTH_SHIFT)) & MED_DC_SCALER_SCALE_SRC_CHROMA_RES_WIDTH_MASK)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_HEIGHT_MASK (0xFFF0000U)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_HEIGHT_SHIFT (16U)
#define MED_DC_SCALER_SCALE_SRC_CHROMA_RES_HEIGHT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_SRC_CHROMA_RES_HEIGHT_SHIFT)) & MED_DC_SCALER_SCALE_SRC_CHROMA_RES_HEIGHT_MASK)
/*! @} */

/*! @name SCALE_DST_LUMA_RES - Scale Destination Luma Resolution Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_WIDTH_MASK (0xFFFU)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_WIDTH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_DST_LUMA_RES_WIDTH_SHIFT)) & MED_DC_SCALER_SCALE_DST_LUMA_RES_WIDTH_MASK)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_HEIGHT_MASK (0xFFF0000U)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_HEIGHT_SHIFT (16U)
#define MED_DC_SCALER_SCALE_DST_LUMA_RES_HEIGHT(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_DST_LUMA_RES_HEIGHT_SHIFT)) & MED_DC_SCALER_SCALE_DST_LUMA_RES_HEIGHT_MASK)
/*! @} */

/*! @name SCALE_DST_CHROMA_RES - Scale Destination Chroma Resolution Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_DST_CHROMA_RES_WIDTH_MASK (0xFFFU)
#define MED_DC_SCALER_SCALE_DST_CHROMA_RES_WIDTH_SHIFT (0U)
#define MED_DC_SCALER_SCALE_DST_CHROMA_RES_WIDTH(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_DST_CHROMA_RES_WIDTH_SHIFT)) & MED_DC_SCALER_SCALE_DST_CHROMA_RES_WIDTH_MASK)
/*! @} */

/*! @name SCALE_V_LUMA_START - Scale Vertical Luma Start Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_V_LUMA_START_V_START_MASK (0x3FFFFFFU)
#define MED_DC_SCALER_SCALE_V_LUMA_START_V_START_SHIFT (0U)
#define MED_DC_SCALER_SCALE_V_LUMA_START_V_START(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_V_LUMA_START_V_START_SHIFT)) & MED_DC_SCALER_SCALE_V_LUMA_START_V_START_MASK)
/*! @} */

/*! @name SCALE_V_LUMA_INC - Scale Vertical Luma Increment Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_V_LUMA_INC_V_INC_MASK (0xFFFFFU)
#define MED_DC_SCALER_SCALE_V_LUMA_INC_V_INC_SHIFT (0U)
#define MED_DC_SCALER_SCALE_V_LUMA_INC_V_INC(x)  (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_V_LUMA_INC_V_INC_SHIFT)) & MED_DC_SCALER_SCALE_V_LUMA_INC_V_INC_MASK)
/*! @} */

/*! @name SCALE_H_LUMA_START - Scale Horizontal Luma Start Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_H_LUMA_START_H_START_MASK (0x3FFFFFFU)
#define MED_DC_SCALER_SCALE_H_LUMA_START_H_START_SHIFT (0U)
#define MED_DC_SCALER_SCALE_H_LUMA_START_H_START(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_H_LUMA_START_H_START_SHIFT)) & MED_DC_SCALER_SCALE_H_LUMA_START_H_START_MASK)
/*! @} */

/*! @name SCALE_H_LUMA_INC - Scale Horizontal Luma Increment Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_H_LUMA_INC_H_INC_MASK (0xFFFFFU)
#define MED_DC_SCALER_SCALE_H_LUMA_INC_H_INC_SHIFT (0U)
#define MED_DC_SCALER_SCALE_H_LUMA_INC_H_INC(x)  (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_H_LUMA_INC_H_INC_SHIFT)) & MED_DC_SCALER_SCALE_H_LUMA_INC_H_INC_MASK)
/*! @} */

/*! @name SCALE_V_CHROMA_START - Scale Vertical Chroma Start Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_V_CHROMA_START_V_START_MASK (0x3FFFFFFU)
#define MED_DC_SCALER_SCALE_V_CHROMA_START_V_START_SHIFT (0U)
#define MED_DC_SCALER_SCALE_V_CHROMA_START_V_START(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_V_CHROMA_START_V_START_SHIFT)) & MED_DC_SCALER_SCALE_V_CHROMA_START_V_START_MASK)
/*! @} */

/*! @name SCALE_V_CHROMA_INC - Scale Vertical Chroma Increment Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_V_CHROMA_INC_V_INC_MASK (0xFFFFFU)
#define MED_DC_SCALER_SCALE_V_CHROMA_INC_V_INC_SHIFT (0U)
#define MED_DC_SCALER_SCALE_V_CHROMA_INC_V_INC(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_V_CHROMA_INC_V_INC_SHIFT)) & MED_DC_SCALER_SCALE_V_CHROMA_INC_V_INC_MASK)
/*! @} */

/*! @name SCALE_H_CHROMA_START - Scale Horizontal Chroma Start Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_H_CHROMA_START_H_START_MASK (0x3FFFFFFU)
#define MED_DC_SCALER_SCALE_H_CHROMA_START_H_START_SHIFT (0U)
#define MED_DC_SCALER_SCALE_H_CHROMA_START_H_START(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_H_CHROMA_START_H_START_SHIFT)) & MED_DC_SCALER_SCALE_H_CHROMA_START_H_START_MASK)
/*! @} */

/*! @name SCALE_H_CHROMA_INC - Scale Horizontal Chroma Increment Register */
/*! @{ */
#define MED_DC_SCALER_SCALE_H_CHROMA_INC_H_INC_MASK (0xFFFFFU)
#define MED_DC_SCALER_SCALE_H_CHROMA_INC_H_INC_SHIFT (0U)
#define MED_DC_SCALER_SCALE_H_CHROMA_INC_H_INC(x) (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_H_CHROMA_INC_H_INC_SHIFT)) & MED_DC_SCALER_SCALE_H_CHROMA_INC_H_INC_MASK)
/*! @} */

/*! @name SCALE_COEF_ARRAY - Scale Coefficient Memory Array */
/*! @{ */
#define MED_DC_SCALER_SCALE_COEF_ARRAY_COEF_MASK (0xFFFU)
#define MED_DC_SCALER_SCALE_COEF_ARRAY_COEF_SHIFT (0U)
#define MED_DC_SCALER_SCALE_COEF_ARRAY_COEF(x)   (((uint32_t)(((uint32_t)(x)) << MED_DC_SCALER_SCALE_COEF_ARRAY_COEF_SHIFT)) & MED_DC_SCALER_SCALE_COEF_ARRAY_COEF_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MED_DC_SCALER_Register_Masks */


/* MED_DC_SCALER - Peripheral instance base addresses */
/** Peripheral DCSS__MED_DC_SCALER base pointer */
#define DCSS__MED_DC_SCALER_BASE_PTR             ((MED_DC_SCALER_MemMapPtr)0x32E1C000u)
/** Array initializer of MED_DC_SCALER peripheral base pointers */
#define MED_DC_SCALER_BASE_PTRS                  { DCSS__MED_DC_SCALER_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MED_DC_SCALER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_DC_SCALER_Register_Accessor_Macros MED_DC_SCALER - Register accessor macros
 * @{
 */


/* MED_DC_SCALER - Register instance definitions */
/* DCSS__MED_DC_SCALER */
#define DCSS__MED_DC_SCALER_SCALE_CTRL           MED_DC_SCALER_SCALE_CTRL_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_OFIFO_CTRL     MED_DC_SCALER_SCALE_OFIFO_CTRL_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_SRC_DATA_CTRL  MED_DC_SCALER_SCALE_SRC_DATA_CTRL_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_BIT_DEPTH      MED_DC_SCALER_SCALE_BIT_DEPTH_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_SRC_FORMAT     MED_DC_SCALER_SCALE_SRC_FORMAT_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_DST_FORMAT     MED_DC_SCALER_SCALE_DST_FORMAT_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_SRC_LUMA_RES   MED_DC_SCALER_SCALE_SRC_LUMA_RES_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_SRC_CHROMA_RES MED_DC_SCALER_SCALE_SRC_CHROMA_RES_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_DST_LUMA_RES   MED_DC_SCALER_SCALE_DST_LUMA_RES_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_DST_CHROMA_RES MED_DC_SCALER_SCALE_DST_CHROMA_RES_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_V_LUMA_START   MED_DC_SCALER_SCALE_V_LUMA_START_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_V_LUMA_INC     MED_DC_SCALER_SCALE_V_LUMA_INC_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_H_LUMA_START   MED_DC_SCALER_SCALE_H_LUMA_START_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_H_LUMA_INC     MED_DC_SCALER_SCALE_H_LUMA_INC_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_V_CHROMA_START MED_DC_SCALER_SCALE_V_CHROMA_START_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_V_CHROMA_INC   MED_DC_SCALER_SCALE_V_CHROMA_INC_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_H_CHROMA_START MED_DC_SCALER_SCALE_H_CHROMA_START_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_H_CHROMA_INC   MED_DC_SCALER_SCALE_H_CHROMA_INC_REG(DCSS__MED_DC_SCALER_BASE_PTR)
#define DCSS__MED_DC_SCALER_SCALE_COEF_ARRAY     MED_DC_SCALER_SCALE_COEF_ARRAY_REG(DCSS__MED_DC_SCALER_BASE_PTR)

/*!
 * @}
 */ /* end of group MED_DC_SCALER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MED_DC_SCALER_Peripheral */


/* ----------------------------------------------------------------------------
   -- MED_HDR10
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_HDR10_Peripheral MED_HDR10
 * @{
 */

/** MED_HDR10 - Peripheral register structure */
typedef struct MED_HDR10_MemMap {
  uint32_t PIPE1_A0_LUT;                           /**< A0 component Look-Up-Table. (LUT), offset: 0x0 */
  uint8_t RESERVED_0[4092];
  uint32_t PIPE1_A1_LUT;                           /**< A1 component Look-Up-Table. (LUT), offset: 0x1000 */
  uint8_t RESERVED_1[4092];
  uint32_t PIPE1_A2_LUT;                           /**< A2 component Look-Up-Table. (LUT), offset: 0x2000 */
  uint8_t RESERVED_2[4092];
  uint32_t HDR_PIPE1_CSCA_CONTROL_REG;             /**< Pipe1 Colorspace Converter A control., offset: 0x3000 */
  uint32_t HDR_PIPE1_CSCA_H00;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient, offset: 0x3004 */
  uint32_t HDR_PIPE1_CSCA_H10;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient, offset: 0x3008 */
  uint32_t HDR_PIPE1_CSCA_H20;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient, offset: 0x300C */
  uint32_t HDR_PIPE1_CSCA_H01;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient, offset: 0x3010 */
  uint32_t HDR_PIPE1_CSCA_H11;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient, offset: 0x3014 */
  uint32_t HDR_PIPE1_CSCA_H21;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient, offset: 0x3018 */
  uint32_t HDR_PIPE1_CSCA_H02;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient, offset: 0x301C */
  uint32_t HDR_PIPE1_CSCA_H12;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient, offset: 0x3020 */
  uint32_t HDR_PIPE1_CSCA_H22;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient, offset: 0x3024 */
  uint32_t HDR_PIPE1_CSCA_IO_0;                    /**< Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset, offset: 0x3028 */
  uint32_t HDR_PIPE1_CSCA_IO_1;                    /**< Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset, offset: 0x302C */
  uint32_t HDR_PIPE1_CSCA_IO_2;                    /**< Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset, offset: 0x3030 */
  uint32_t HDR_PIPE1_CSCA_IO_MIN_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip min., offset: 0x3034 */
  uint32_t HDR_PIPE1_CSCA_IO_MIN_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip min., offset: 0x3038 */
  uint32_t HDR_PIPE1_CSCA_IO_MIN_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip min., offset: 0x303C */
  uint32_t HDR_PIPE1_CSCA_IO_MAX_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip max value., offset: 0x3040 */
  uint32_t HDR_PIPE1_CSCA_IO_MAX_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip max value., offset: 0x3044 */
  uint32_t HDR_PIPE1_CSCA_IO_MAX_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip max value., offset: 0x3048 */
  uint32_t HDR_PIPE1_CSCA_NORM;                    /**< Pipe1 Colorspace Converter A (CSCA) normalization factor, offset: 0x304C */
  uint32_t HDR_PIPE1_CSCA_OO_0;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 0, offset: 0x3050 */
  uint32_t HDR_PIPE1_CSCA_OO_1;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 1, offset: 0x3054 */
  uint32_t HDR_PIPE1_CSCA_OO_2;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 2, offset: 0x3058 */
  uint32_t HDR_PIPE1_CSCA_OMIN_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0, offset: 0x305C */
  uint32_t HDR_PIPE1_CSCA_OMIN_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1, offset: 0x3060 */
  uint32_t HDR_PIPE1_CSCA_OMIN_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2, offset: 0x3064 */
  uint32_t HDR_PIPE1_CSCA_OMAX_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0, offset: 0x3068 */
  uint32_t HDR_PIPE1_CSCA_OMAX_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1, offset: 0x306C */
  uint32_t HDR_PIPE1_CSCA_OMAX_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2, offset: 0x3070 */
  uint32_t HDR_PIPE1_ENTRY_29;                     /**< PIPE1: NOT USED, offset: 0x3074 */
  uint8_t RESERVED_3[8];
  uint32_t HDR_PIPE1_LUT_CONTROL_REG;              /**< Pipe1 LUT control register, offset: 0x3080 */
  uint8_t RESERVED_4[1916];
  uint32_t HDR_PIPE1_CSCB_CONTROL_REG;             /**< Pipe1 Colorspace Converter B control., offset: 0x3800 */
  uint32_t HDR_PIPE1_CSCB_H00;                     /**< Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient, offset: 0x3804 */
  uint32_t HDR_PIPE1_CSCB_H10;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient, offset: 0x3808 */
  uint32_t HDR_PIPE1_CSCB_H20;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient, offset: 0x380C */
  uint32_t HDR_PIPE1_CSCB_H01;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient, offset: 0x3810 */
  uint32_t HDR_PIPE1_CSCB_H11;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient, offset: 0x3814 */
  uint32_t HDR_PIPE1_CSCB_H21;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient, offset: 0x3818 */
  uint32_t HDR_PIPE1_CSCB_H02;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient, offset: 0x381C */
  uint32_t HDR_PIPE1_CSCB_H12;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient, offset: 0x3820 */
  uint32_t HDR_PIPE1_CSCB_H22;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient, offset: 0x3824 */
  uint32_t HDR_PIPE1_CSCB_IO_0;                    /**< Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset, offset: 0x3828 */
  uint32_t HDR_PIPE1_CSCB_IO_1;                    /**< Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset, offset: 0x382C */
  uint32_t HDR_PIPE1_CSCB_IO_2;                    /**< Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset, offset: 0x3830 */
  uint32_t HDR_PIPE1_CSCB_IO_MIN_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip min., offset: 0x3834 */
  uint32_t HDR_PIPE1_CSCB_IO_MIN_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip min., offset: 0x3838 */
  uint32_t HDR_PIPE1_CSCB_IO_MIN_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip min., offset: 0x383C */
  uint32_t HDR_PIPE1_CSCB_IO_MAX_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip max value., offset: 0x3840 */
  uint32_t HDR_PIPE1_CSCB_IO_MAX_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip max value., offset: 0x3844 */
  uint32_t HDR_PIPE1_CSCB_IO_MAX_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip max value., offset: 0x3848 */
  uint32_t HDR_PIPE1_CSCB_NORM;                    /**< Pipe1 Colorspace Converter B (CSCB) normalization factor, offset: 0x384C */
  uint32_t HDR_PIPE1_CSCB_OO_0;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 0, offset: 0x3850 */
  uint32_t HDR_PIPE1_CSCB_OO_1;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 1, offset: 0x3854 */
  uint32_t HDR_PIPE1_CSCB_OO_2;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 2, offset: 0x3858 */
  uint32_t HDR_PIPE1_CSCB_OMIN_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0, offset: 0x385C */
  uint32_t HDR_PIPE1_CSCB_OMIN_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1, offset: 0x3860 */
  uint32_t HDR_PIPE1_CSCB_OMIN_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2, offset: 0x3864 */
  uint32_t HDR_PIPE1_CSCB_OMAX_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0, offset: 0x3868 */
  uint32_t HDR_PIPE1_CSCB_OMAX_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1, offset: 0x386C */
  uint32_t HDR_PIPE1_CSCB_OMAX_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2, offset: 0x3870 */
  uint32_t HDR_PIPE1_FL2FX;                        /**< Pipe1 floating point to fixed point control, offset: 0x3874 */
  uint32_t HDR_PIPE1_ENTRY_30;                     /**< PIPE1: NOT USED, offset: 0x3878 */
  uint8_t RESERVED_5[1924];
  uint32_t PIPE2_A0_LUT;                           /**< A0 component Look-Up-Table. (LUT), offset: 0x4000 */
  uint8_t RESERVED_6[4092];
  uint32_t PIPE2_A1_LUT;                           /**< A1 component Look-Up-Table. (LUT), offset: 0x5000 */
  uint8_t RESERVED_7[4092];
  uint32_t PIPE2_A2_LUT;                           /**< A2 component Look-Up-Table. (LUT), offset: 0x6000 */
  uint8_t RESERVED_8[4092];
  uint32_t HDR_PIPE2_CSCA_CONTROL_REG;             /**< Pipe1 Colorspace Converter A control., offset: 0x7000 */
  uint32_t HDR_PIPE2_CSCA_H00;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient, offset: 0x7004 */
  uint32_t HDR_PIPE2_CSCA_H10;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient, offset: 0x7008 */
  uint32_t HDR_PIPE2_CSCA_H20;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient, offset: 0x700C */
  uint32_t HDR_PIPE2_CSCA_H01;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient, offset: 0x7010 */
  uint32_t HDR_PIPE2_CSCA_H11;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient, offset: 0x7014 */
  uint32_t HDR_PIPE2_CSCA_H21;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient, offset: 0x7018 */
  uint32_t HDR_PIPE2_CSCA_H02;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient, offset: 0x701C */
  uint32_t HDR_PIPE2_CSCA_H12;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient, offset: 0x7020 */
  uint32_t HDR_PIPE2_CSCA_H22;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient, offset: 0x7024 */
  uint32_t HDR_PIPE2_CSCA_IO_0;                    /**< Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset, offset: 0x7028 */
  uint32_t HDR_PIPE2_CSCA_IO_1;                    /**< Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset, offset: 0x702C */
  uint32_t HDR_PIPE2_CSCA_IO_2;                    /**< Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset, offset: 0x7030 */
  uint32_t HDR_PIPE2_CSCA_IO_MIN_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip min., offset: 0x7034 */
  uint32_t HDR_PIPE2_CSCA_IO_MIN_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip min., offset: 0x7038 */
  uint32_t HDR_PIPE2_CSCA_IO_MIN_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip min., offset: 0x703C */
  uint32_t HDR_PIPE2_CSCA_IO_MAX_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip max value., offset: 0x7040 */
  uint32_t HDR_PIPE2_CSCA_IO_MAX_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip max value., offset: 0x7044 */
  uint32_t HDR_PIPE2_CSCA_IO_MAX_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip max value., offset: 0x7048 */
  uint32_t HDR_PIPE2_CSCA_NORM;                    /**< Pipe1 Colorspace Converter A (CSCA) normalization factor, offset: 0x704C */
  uint32_t HDR_PIPE2_CSCA_OO_0;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 0, offset: 0x7050 */
  uint32_t HDR_PIPE2_CSCA_OO_1;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 1, offset: 0x7054 */
  uint32_t HDR_PIPE2_CSCA_OO_2;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 2, offset: 0x7058 */
  uint32_t HDR_PIPE2_CSCA_OMIN_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0, offset: 0x705C */
  uint32_t HDR_PIPE2_CSCA_OMIN_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1, offset: 0x7060 */
  uint32_t HDR_PIPE2_CSCA_OMIN_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2, offset: 0x7064 */
  uint32_t HDR_PIPE2_CSCA_OMAX_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0, offset: 0x7068 */
  uint32_t HDR_PIPE2_CSCA_OMAX_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1, offset: 0x706C */
  uint32_t HDR_PIPE2_CSCA_OMAX_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2, offset: 0x7070 */
  uint32_t HDR_PIPE2_ENTRY_29;                     /**< PIPE2: NOT USED, offset: 0x7074 */
  uint8_t RESERVED_9[8];
  uint32_t HDR_PIPE2_LUT_CONTROL_REG;              /**< Pipe1 LUT control register, offset: 0x7080 */
  uint8_t RESERVED_10[1916];
  uint32_t HDR_PIPE2_CSCB_CONTROL_REG;             /**< Pipe1 Colorspace Converter B control., offset: 0x7800 */
  uint32_t HDR_PIPE2_CSCB_H00;                     /**< Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient, offset: 0x7804 */
  uint32_t HDR_PIPE2_CSCB_H10;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient, offset: 0x7808 */
  uint32_t HDR_PIPE2_CSCB_H20;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient, offset: 0x780C */
  uint32_t HDR_PIPE2_CSCB_H01;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient, offset: 0x7810 */
  uint32_t HDR_PIPE2_CSCB_H11;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient, offset: 0x7814 */
  uint32_t HDR_PIPE2_CSCB_H21;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient, offset: 0x7818 */
  uint32_t HDR_PIPE2_CSCB_H02;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient, offset: 0x781C */
  uint32_t HDR_PIPE2_CSCB_H12;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient, offset: 0x7820 */
  uint32_t HDR_PIPE2_CSCB_H22;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient, offset: 0x7824 */
  uint32_t HDR_PIPE2_CSCB_IO_0;                    /**< Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset, offset: 0x7828 */
  uint32_t HDR_PIPE2_CSCB_IO_1;                    /**< Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset, offset: 0x782C */
  uint32_t HDR_PIPE2_CSCB_IO_2;                    /**< Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset, offset: 0x7830 */
  uint32_t HDR_PIPE2_CSCB_IO_MIN_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip min., offset: 0x7834 */
  uint32_t HDR_PIPE2_CSCB_IO_MIN_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip min., offset: 0x7838 */
  uint32_t HDR_PIPE2_CSCB_IO_MIN_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip min., offset: 0x783C */
  uint32_t HDR_PIPE2_CSCB_IO_MAX_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip max value., offset: 0x7840 */
  uint32_t HDR_PIPE2_CSCB_IO_MAX_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip max value., offset: 0x7844 */
  uint32_t HDR_PIPE2_CSCB_IO_MAX_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip max value., offset: 0x7848 */
  uint32_t HDR_PIPE2_CSCB_NORM;                    /**< Pipe1 Colorspace Converter B (CSCB) normalization factor, offset: 0x784C */
  uint32_t HDR_PIPE2_CSCB_OO_0;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 0, offset: 0x7850 */
  uint32_t HDR_PIPE2_CSCB_OO_1;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 1, offset: 0x7854 */
  uint32_t HDR_PIPE2_CSCB_OO_2;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 2, offset: 0x7858 */
  uint32_t HDR_PIPE2_CSCB_OMIN_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0, offset: 0x785C */
  uint32_t HDR_PIPE2_CSCB_OMIN_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1, offset: 0x7860 */
  uint32_t HDR_PIPE2_CSCB_OMIN_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2, offset: 0x7864 */
  uint32_t HDR_PIPE2_CSCB_OMAX_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0, offset: 0x7868 */
  uint32_t HDR_PIPE2_CSCB_OMAX_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1, offset: 0x786C */
  uint32_t HDR_PIPE2_CSCB_OMAX_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2, offset: 0x7870 */
  uint32_t HDR_PIPE2_FL2FX;                        /**< Pipe1 floating point to fixed point control, offset: 0x7874 */
  uint32_t HDR_PIPE2_ENTRY_30;                     /**< PIPE2: NOT USED, offset: 0x7878 */
  uint8_t RESERVED_11[1924];
  uint32_t PIPE3_A0_LUT;                           /**< A0 component Look-Up-Table. (LUT), offset: 0x8000 */
  uint8_t RESERVED_12[4092];
  uint32_t PIPE3_A1_LUT;                           /**< A1 component Look-Up-Table. (LUT), offset: 0x9000 */
  uint8_t RESERVED_13[4092];
  uint32_t PIPE3_A2_LUT;                           /**< A2 component Look-Up-Table. (LUT), offset: 0xA000 */
  uint8_t RESERVED_14[4092];
  uint32_t HDR_PIPE3_CSCA_CONTROL_REG;             /**< Pipe1 Colorspace Converter A control., offset: 0xB000 */
  uint32_t HDR_PIPE3_CSCA_H00;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient, offset: 0xB004 */
  uint32_t HDR_PIPE3_CSCA_H10;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient, offset: 0xB008 */
  uint32_t HDR_PIPE3_CSCA_H20;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient, offset: 0xB00C */
  uint32_t HDR_PIPE3_CSCA_H01;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient, offset: 0xB010 */
  uint32_t HDR_PIPE3_CSCA_H11;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient, offset: 0xB014 */
  uint32_t HDR_PIPE3_CSCA_H21;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient, offset: 0xB018 */
  uint32_t HDR_PIPE3_CSCA_H02;                     /**< Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient, offset: 0xB01C */
  uint32_t HDR_PIPE3_CSCA_H12;                     /**< Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient, offset: 0xB020 */
  uint32_t HDR_PIPE3_CSCA_H22;                     /**< Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient, offset: 0xB024 */
  uint32_t HDR_PIPE3_CSCA_IO_0;                    /**< Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset, offset: 0xB028 */
  uint32_t HDR_PIPE3_CSCA_IO_1;                    /**< Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset, offset: 0xB02C */
  uint32_t HDR_PIPE3_CSCA_IO_2;                    /**< Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset, offset: 0xB030 */
  uint32_t HDR_PIPE3_CSCA_IO_MIN_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip min., offset: 0xB034 */
  uint32_t HDR_PIPE3_CSCA_IO_MIN_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip min., offset: 0xB038 */
  uint32_t HDR_PIPE3_CSCA_IO_MIN_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip min., offset: 0xB03C */
  uint32_t HDR_PIPE3_CSCA_IO_MAX_0;                /**< Pipe1 Colorspace Converter A (CSCA) component 0 clip max value., offset: 0xB040 */
  uint32_t HDR_PIPE3_CSCA_IO_MAX_1;                /**< Pipe1 Colorspace Converter A (CSCA) component 1 clip max value., offset: 0xB044 */
  uint32_t HDR_PIPE3_CSCA_IO_MAX_2;                /**< Pipe1 Colorspace Converter A (CSCA) component 2 clip max value., offset: 0xB048 */
  uint32_t HDR_PIPE3_CSCA_NORM;                    /**< Pipe1 Colorspace Converter A (CSCA) normalization factor, offset: 0xB04C */
  uint32_t HDR_PIPE3_CSCA_OO_0;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 0, offset: 0xB050 */
  uint32_t HDR_PIPE3_CSCA_OO_1;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 1, offset: 0xB054 */
  uint32_t HDR_PIPE3_CSCA_OO_2;                    /**< Pipe1 Colorspace Converter A (CSCA): Post offset component 2, offset: 0xB058 */
  uint32_t HDR_PIPE3_CSCA_OMIN_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0, offset: 0xB05C */
  uint32_t HDR_PIPE3_CSCA_OMIN_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1, offset: 0xB060 */
  uint32_t HDR_PIPE3_CSCA_OMIN_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2, offset: 0xB064 */
  uint32_t HDR_PIPE3_CSCA_OMAX_0;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0, offset: 0xB068 */
  uint32_t HDR_PIPE3_CSCA_OMAX_1;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1, offset: 0xB06C */
  uint32_t HDR_PIPE3_CSCA_OMAX_2;                  /**< Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2, offset: 0xB070 */
  uint32_t HDR_PIPE3_ENTRY_29;                     /**< PIPE3: NOT USED, offset: 0xB074 */
  uint8_t RESERVED_15[8];
  uint32_t HDR_PIPE3_LUT_CONTROL_REG;              /**< Pipe1 LUT control register, offset: 0xB080 */
  uint8_t RESERVED_16[1916];
  uint32_t HDR_PIPE3_CSCB_CONTROL_REG;             /**< Pipe1 Colorspace Converter B control., offset: 0xB800 */
  uint32_t HDR_PIPE3_CSCB_H00;                     /**< Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient, offset: 0xB804 */
  uint32_t HDR_PIPE3_CSCB_H10;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient, offset: 0xB808 */
  uint32_t HDR_PIPE3_CSCB_H20;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient, offset: 0xB80C */
  uint32_t HDR_PIPE3_CSCB_H01;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient, offset: 0xB810 */
  uint32_t HDR_PIPE3_CSCB_H11;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient, offset: 0xB814 */
  uint32_t HDR_PIPE3_CSCB_H21;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient, offset: 0xB818 */
  uint32_t HDR_PIPE3_CSCB_H02;                     /**< Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient, offset: 0xB81C */
  uint32_t HDR_PIPE3_CSCB_H12;                     /**< Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient, offset: 0xB820 */
  uint32_t HDR_PIPE3_CSCB_H22;                     /**< Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient, offset: 0xB824 */
  uint32_t HDR_PIPE3_CSCB_IO_0;                    /**< Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset, offset: 0xB828 */
  uint32_t HDR_PIPE3_CSCB_IO_1;                    /**< Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset, offset: 0xB82C */
  uint32_t HDR_PIPE3_CSCB_IO_2;                    /**< Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset, offset: 0xB830 */
  uint32_t HDR_PIPE3_CSCB_IO_MIN_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip min., offset: 0xB834 */
  uint32_t HDR_PIPE3_CSCB_IO_MIN_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip min., offset: 0xB838 */
  uint32_t HDR_PIPE3_CSCB_IO_MIN_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip min., offset: 0xB83C */
  uint32_t HDR_PIPE3_CSCB_IO_MAX_0;                /**< Pipe1 Colorspace Converter B (CSCB) component 0 clip max value., offset: 0xB840 */
  uint32_t HDR_PIPE3_CSCB_IO_MAX_1;                /**< Pipe1 Colorspace Converter B (CSCB) component 1 clip max value., offset: 0xB844 */
  uint32_t HDR_PIPE3_CSCB_IO_MAX_2;                /**< Pipe1 Colorspace Converter B (CSCB) component 2 clip max value., offset: 0xB848 */
  uint32_t HDR_PIPE3_CSCB_NORM;                    /**< Pipe1 Colorspace Converter B (CSCB) normalization factor, offset: 0xB84C */
  uint32_t HDR_PIPE3_CSCB_OO_0;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 0, offset: 0xB850 */
  uint32_t HDR_PIPE3_CSCB_OO_1;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 1, offset: 0xB854 */
  uint32_t HDR_PIPE3_CSCB_OO_2;                    /**< Pipe1 Colorspace Converter B (CSCB): Post offset component 2, offset: 0xB858 */
  uint32_t HDR_PIPE3_CSCB_OMIN_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0, offset: 0xB85C */
  uint32_t HDR_PIPE3_CSCB_OMIN_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1, offset: 0xB860 */
  uint32_t HDR_PIPE3_CSCB_OMIN_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2, offset: 0xB864 */
  uint32_t HDR_PIPE3_CSCB_OMAX_0;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0, offset: 0xB868 */
  uint32_t HDR_PIPE3_CSCB_OMAX_1;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1, offset: 0xB86C */
  uint32_t HDR_PIPE3_CSCB_OMAX_2;                  /**< Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2, offset: 0xB870 */
  uint32_t HDR_PIPE3_FL2FX;                        /**< Pipe1 floating point to fixed point control, offset: 0xB874 */
  uint32_t HDR_PIPE3_ENTRY_30;                     /**< PIPE3: NOT USED, offset: 0xB878 */
  uint8_t RESERVED_17[1924];
  uint32_t OPIPE_A0_TABLE;                         /**< A0 component Linear-to-Non-linear conversion table, offset: 0xC000 */
  uint8_t RESERVED_18[4092];
  uint32_t OPIPE_A1_TABLE;                         /**< A1 component Linear-to-Non-linear conversion table, offset: 0xD000 */
  uint8_t RESERVED_19[4092];
  uint32_t OPIPE_A2_TABLE;                         /**< A2 component Linear-to-Non-linear conversion table, offset: 0xE000 */
  uint8_t RESERVED_20[4092];
  uint32_t HDR_OPIPE_CSC_CONTROL_REG;              /**< HDR output stage Colorspace Converter (CSCO) control., offset: 0xF000 */
  uint32_t HDR_OPIPE_CSC_H00;                      /**< Pipe1 Colorspace Converter (CSC) h(0,0) matrix coefficient, offset: 0xF004 */
  uint32_t HDR_OPIPE_CSC_H10;                      /**< Pipe1 Colorspace Converter (CSC) h(1,0) matrix coefficient, offset: 0xF008 */
  uint32_t HDR_OPIPE_CSC_H20;                      /**< HDR OUTPUT Colorspace Converter (CSCO) h(2,0) matrix coefficient, offset: 0xF00C */
  uint32_t HDR_OPIPE_CSC_H01;                      /**< HDR OUTPUT pipe Colorspace Converter (CSCO) h(0,1) matrix coefficient, offset: 0xF010 */
  uint32_t HDR_OPIPE_CSC_H11;                      /**< HDR OUTPUT pipe Colorspace Converter (CSCO) h(1,1) matrix coefficient, offset: 0xF014 */
  uint32_t HDR_OPIPE_CSC_H21;                      /**< HDR_output pipe Colorspace Converter (CSCO) h(2,1) matrix coefficient, offset: 0xF018 */
  uint32_t HDR_OPIPE_CSC_H02;                      /**< HDR OUTPUT pipe Colorspace Converter (CSCO) h(0,2) matrix coefficient, offset: 0xF01C */
  uint32_t HDR_OPIPE_CSC_H12;                      /**< HDR OUPUT pipe Colorspace Converter (CSCO) h(1,2) matrix coefficient, offset: 0xF020 */
  uint32_t HDR_;                                   /**< HDR OUPUT pipe Colorspace Converter (CSCO) h(2,2) matrix coefficient, offset: 0xF024 */
  uint32_t HDR_OPIPE_CSC_IO_0;                     /**< HDR OUTPUT pipe Colorspace Converter (CSCO) component 0 pre-offset, offset: 0xF028 */
  uint32_t HDR_OPIPE_CSC_IO_1;                     /**< HDR OUPTUT pipe Colorspace Converter (CSCO) component 1 pre-offset, offset: 0xF02C */
  uint32_t HDR_OPIPE_CSC_IO_2;                     /**< HDR OUPUT pipe: Colorspace Converter (CSCO) component 2 pre-offset, offset: 0xF030 */
  uint32_t HDR_OPIPE_CSC_MIN_0;                    /**< HDR OUPTU pipe Colorspace Converter (CSCO) component 0 clip min., offset: 0xF034 */
  uint32_t HDR_OPIPE_CSC_MIN_1;                    /**< HDR OUPUT pipe Colorspace Converter (CSCO) component 1 clip min., offset: 0xF038 */
  uint32_t HDR_OPIPE_CSC_MIN_2;                    /**< HDR OUPTU pipe Colorspace Converter (CSCO) component 2 clip min., offset: 0xF03C */
  uint32_t HDR_OPIPE_CSC_MAX_0;                    /**< HDR OUPTUT pipe Colorspace Converter O (CSC) component 0 clip max value., offset: 0xF040 */
  uint32_t HDR_OPIPE_CSC_MAX_1;                    /**< HDR OUTPUT pipe Colorspace Converter (CSCO) component 1 clip max value., offset: 0xF044 */
  uint32_t HDR_OPIPE_CSC_MAX_2;                    /**< HDR OUTPUT pipe Colorspace Converter (CSCO) component 2 clip max value., offset: 0xF048 */
  uint32_t HDR_OPIPE_CSC_NORM;                     /**< HDR OUPUT pipe Colorspace Converter (CSCO) normalization factor, offset: 0xF04C */
  uint32_t HDR_OPIPE_CSC_OO_0;                     /**< HDR OUPTUT pipe Colorspace Converter (CSC): Post offset component 0, offset: 0xF050 */
  uint32_t HDR_OPIPE_CSC_OO_1;                     /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset component 1, offset: 0xF054 */
  uint32_t HDR_OPIPE_CSC_OO_2;                     /**< HDR OUPTUT pipe Colorspace Converter (CSC): Post offset component 2, offset: 0xF058 */
  uint32_t HDR_OPIPE_CSC_OMIN_0;                   /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 0, offset: 0xF05C */
  uint32_t HDR_OPIPE_CSC_OMIN_1;                   /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 1, offset: 0xF060 */
  uint32_t HDR_OPIPE_CSC_OMIN_2;                   /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 2, offset: 0xF064 */
  uint32_t HDR_OPIPE_CSC_OMAX_0;                   /**< HDR OUPTUT pipe Colorspace Converter (CSC): Post offset max clip value for component 0, offset: 0xF068 */
  uint32_t HDR_OPIPE_CSC_OMAX_1;                   /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset max clip value for component 1, offset: 0xF06C */
  uint32_t HDR_OPIPE_CSC_OMAX_2;                   /**< HDR OUTPUT pipe Colorspace Converter (CSC): Post offset max clip value for component 2, offset: 0xF070 */
  uint8_t RESERVED_21[2048];
  uint32_t HDR_OPIPE_2NL_CONTROL_REG;              /**< HDR OUTPUT -TO NON LINEAR pipeline control, offset: 0xF874 */
} volatile *MED_HDR10_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MED_HDR10 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_HDR10_Register_Accessor_Macros MED_HDR10 - Register accessor macros
 * @{
 */


/* MED_HDR10 - Register accessors */
#define MED_HDR10_PIPE1_A0_LUT_REG(base)         ((base)->PIPE1_A0_LUT)
#define MED_HDR10_PIPE1_A1_LUT_REG(base)         ((base)->PIPE1_A1_LUT)
#define MED_HDR10_PIPE1_A2_LUT_REG(base)         ((base)->PIPE1_A2_LUT)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_REG(base) ((base)->HDR_PIPE1_CSCA_CONTROL_REG)
#define MED_HDR10_HDR_PIPE1_CSCA_H00_REG(base)   ((base)->HDR_PIPE1_CSCA_H00)
#define MED_HDR10_HDR_PIPE1_CSCA_H10_REG(base)   ((base)->HDR_PIPE1_CSCA_H10)
#define MED_HDR10_HDR_PIPE1_CSCA_H20_REG(base)   ((base)->HDR_PIPE1_CSCA_H20)
#define MED_HDR10_HDR_PIPE1_CSCA_H01_REG(base)   ((base)->HDR_PIPE1_CSCA_H01)
#define MED_HDR10_HDR_PIPE1_CSCA_H11_REG(base)   ((base)->HDR_PIPE1_CSCA_H11)
#define MED_HDR10_HDR_PIPE1_CSCA_H21_REG(base)   ((base)->HDR_PIPE1_CSCA_H21)
#define MED_HDR10_HDR_PIPE1_CSCA_H02_REG(base)   ((base)->HDR_PIPE1_CSCA_H02)
#define MED_HDR10_HDR_PIPE1_CSCA_H12_REG(base)   ((base)->HDR_PIPE1_CSCA_H12)
#define MED_HDR10_HDR_PIPE1_CSCA_H22_REG(base)   ((base)->HDR_PIPE1_CSCA_H22)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_0_REG(base)  ((base)->HDR_PIPE1_CSCA_IO_0)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_1_REG(base)  ((base)->HDR_PIPE1_CSCA_IO_1)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_2_REG(base)  ((base)->HDR_PIPE1_CSCA_IO_2)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MIN_0)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MIN_1)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MIN_2)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MAX_0)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MAX_1)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_REG(base) ((base)->HDR_PIPE1_CSCA_IO_MAX_2)
#define MED_HDR10_HDR_PIPE1_CSCA_NORM_REG(base)  ((base)->HDR_PIPE1_CSCA_NORM)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_0_REG(base)  ((base)->HDR_PIPE1_CSCA_OO_0)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_1_REG(base)  ((base)->HDR_PIPE1_CSCA_OO_1)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_2_REG(base)  ((base)->HDR_PIPE1_CSCA_OO_2)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_REG(base) ((base)->HDR_PIPE1_CSCA_OMIN_0)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_REG(base) ((base)->HDR_PIPE1_CSCA_OMIN_1)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_REG(base) ((base)->HDR_PIPE1_CSCA_OMIN_2)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_REG(base) ((base)->HDR_PIPE1_CSCA_OMAX_0)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_REG(base) ((base)->HDR_PIPE1_CSCA_OMAX_1)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_REG(base) ((base)->HDR_PIPE1_CSCA_OMAX_2)
#define MED_HDR10_HDR_PIPE1_ENTRY_29_REG(base)   ((base)->HDR_PIPE1_ENTRY_29)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_REG(base) ((base)->HDR_PIPE1_LUT_CONTROL_REG)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_REG(base) ((base)->HDR_PIPE1_CSCB_CONTROL_REG)
#define MED_HDR10_HDR_PIPE1_CSCB_H00_REG(base)   ((base)->HDR_PIPE1_CSCB_H00)
#define MED_HDR10_HDR_PIPE1_CSCB_H10_REG(base)   ((base)->HDR_PIPE1_CSCB_H10)
#define MED_HDR10_HDR_PIPE1_CSCB_H20_REG(base)   ((base)->HDR_PIPE1_CSCB_H20)
#define MED_HDR10_HDR_PIPE1_CSCB_H01_REG(base)   ((base)->HDR_PIPE1_CSCB_H01)
#define MED_HDR10_HDR_PIPE1_CSCB_H11_REG(base)   ((base)->HDR_PIPE1_CSCB_H11)
#define MED_HDR10_HDR_PIPE1_CSCB_H21_REG(base)   ((base)->HDR_PIPE1_CSCB_H21)
#define MED_HDR10_HDR_PIPE1_CSCB_H02_REG(base)   ((base)->HDR_PIPE1_CSCB_H02)
#define MED_HDR10_HDR_PIPE1_CSCB_H12_REG(base)   ((base)->HDR_PIPE1_CSCB_H12)
#define MED_HDR10_HDR_PIPE1_CSCB_H22_REG(base)   ((base)->HDR_PIPE1_CSCB_H22)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_0_REG(base)  ((base)->HDR_PIPE1_CSCB_IO_0)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_1_REG(base)  ((base)->HDR_PIPE1_CSCB_IO_1)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_2_REG(base)  ((base)->HDR_PIPE1_CSCB_IO_2)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MIN_0)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MIN_1)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MIN_2)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MAX_0)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MAX_1)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_REG(base) ((base)->HDR_PIPE1_CSCB_IO_MAX_2)
#define MED_HDR10_HDR_PIPE1_CSCB_NORM_REG(base)  ((base)->HDR_PIPE1_CSCB_NORM)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_0_REG(base)  ((base)->HDR_PIPE1_CSCB_OO_0)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_1_REG(base)  ((base)->HDR_PIPE1_CSCB_OO_1)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_2_REG(base)  ((base)->HDR_PIPE1_CSCB_OO_2)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_REG(base) ((base)->HDR_PIPE1_CSCB_OMIN_0)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_REG(base) ((base)->HDR_PIPE1_CSCB_OMIN_1)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_REG(base) ((base)->HDR_PIPE1_CSCB_OMIN_2)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_REG(base) ((base)->HDR_PIPE1_CSCB_OMAX_0)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_REG(base) ((base)->HDR_PIPE1_CSCB_OMAX_1)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_REG(base) ((base)->HDR_PIPE1_CSCB_OMAX_2)
#define MED_HDR10_HDR_PIPE1_FL2FX_REG(base)      ((base)->HDR_PIPE1_FL2FX)
#define MED_HDR10_HDR_PIPE1_ENTRY_30_REG(base)   ((base)->HDR_PIPE1_ENTRY_30)
#define MED_HDR10_PIPE2_A0_LUT_REG(base)         ((base)->PIPE2_A0_LUT)
#define MED_HDR10_PIPE2_A1_LUT_REG(base)         ((base)->PIPE2_A1_LUT)
#define MED_HDR10_PIPE2_A2_LUT_REG(base)         ((base)->PIPE2_A2_LUT)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_REG(base) ((base)->HDR_PIPE2_CSCA_CONTROL_REG)
#define MED_HDR10_HDR_PIPE2_CSCA_H00_REG(base)   ((base)->HDR_PIPE2_CSCA_H00)
#define MED_HDR10_HDR_PIPE2_CSCA_H10_REG(base)   ((base)->HDR_PIPE2_CSCA_H10)
#define MED_HDR10_HDR_PIPE2_CSCA_H20_REG(base)   ((base)->HDR_PIPE2_CSCA_H20)
#define MED_HDR10_HDR_PIPE2_CSCA_H01_REG(base)   ((base)->HDR_PIPE2_CSCA_H01)
#define MED_HDR10_HDR_PIPE2_CSCA_H11_REG(base)   ((base)->HDR_PIPE2_CSCA_H11)
#define MED_HDR10_HDR_PIPE2_CSCA_H21_REG(base)   ((base)->HDR_PIPE2_CSCA_H21)
#define MED_HDR10_HDR_PIPE2_CSCA_H02_REG(base)   ((base)->HDR_PIPE2_CSCA_H02)
#define MED_HDR10_HDR_PIPE2_CSCA_H12_REG(base)   ((base)->HDR_PIPE2_CSCA_H12)
#define MED_HDR10_HDR_PIPE2_CSCA_H22_REG(base)   ((base)->HDR_PIPE2_CSCA_H22)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_0_REG(base)  ((base)->HDR_PIPE2_CSCA_IO_0)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_1_REG(base)  ((base)->HDR_PIPE2_CSCA_IO_1)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_2_REG(base)  ((base)->HDR_PIPE2_CSCA_IO_2)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MIN_0)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MIN_1)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MIN_2)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MAX_0)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MAX_1)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_REG(base) ((base)->HDR_PIPE2_CSCA_IO_MAX_2)
#define MED_HDR10_HDR_PIPE2_CSCA_NORM_REG(base)  ((base)->HDR_PIPE2_CSCA_NORM)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_0_REG(base)  ((base)->HDR_PIPE2_CSCA_OO_0)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_1_REG(base)  ((base)->HDR_PIPE2_CSCA_OO_1)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_2_REG(base)  ((base)->HDR_PIPE2_CSCA_OO_2)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_REG(base) ((base)->HDR_PIPE2_CSCA_OMIN_0)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_REG(base) ((base)->HDR_PIPE2_CSCA_OMIN_1)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_REG(base) ((base)->HDR_PIPE2_CSCA_OMIN_2)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_REG(base) ((base)->HDR_PIPE2_CSCA_OMAX_0)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_REG(base) ((base)->HDR_PIPE2_CSCA_OMAX_1)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_REG(base) ((base)->HDR_PIPE2_CSCA_OMAX_2)
#define MED_HDR10_HDR_PIPE2_ENTRY_29_REG(base)   ((base)->HDR_PIPE2_ENTRY_29)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_REG(base) ((base)->HDR_PIPE2_LUT_CONTROL_REG)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_REG(base) ((base)->HDR_PIPE2_CSCB_CONTROL_REG)
#define MED_HDR10_HDR_PIPE2_CSCB_H00_REG(base)   ((base)->HDR_PIPE2_CSCB_H00)
#define MED_HDR10_HDR_PIPE2_CSCB_H10_REG(base)   ((base)->HDR_PIPE2_CSCB_H10)
#define MED_HDR10_HDR_PIPE2_CSCB_H20_REG(base)   ((base)->HDR_PIPE2_CSCB_H20)
#define MED_HDR10_HDR_PIPE2_CSCB_H01_REG(base)   ((base)->HDR_PIPE2_CSCB_H01)
#define MED_HDR10_HDR_PIPE2_CSCB_H11_REG(base)   ((base)->HDR_PIPE2_CSCB_H11)
#define MED_HDR10_HDR_PIPE2_CSCB_H21_REG(base)   ((base)->HDR_PIPE2_CSCB_H21)
#define MED_HDR10_HDR_PIPE2_CSCB_H02_REG(base)   ((base)->HDR_PIPE2_CSCB_H02)
#define MED_HDR10_HDR_PIPE2_CSCB_H12_REG(base)   ((base)->HDR_PIPE2_CSCB_H12)
#define MED_HDR10_HDR_PIPE2_CSCB_H22_REG(base)   ((base)->HDR_PIPE2_CSCB_H22)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_0_REG(base)  ((base)->HDR_PIPE2_CSCB_IO_0)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_1_REG(base)  ((base)->HDR_PIPE2_CSCB_IO_1)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_2_REG(base)  ((base)->HDR_PIPE2_CSCB_IO_2)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MIN_0)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MIN_1)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MIN_2)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MAX_0)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MAX_1)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_REG(base) ((base)->HDR_PIPE2_CSCB_IO_MAX_2)
#define MED_HDR10_HDR_PIPE2_CSCB_NORM_REG(base)  ((base)->HDR_PIPE2_CSCB_NORM)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_0_REG(base)  ((base)->HDR_PIPE2_CSCB_OO_0)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_1_REG(base)  ((base)->HDR_PIPE2_CSCB_OO_1)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_2_REG(base)  ((base)->HDR_PIPE2_CSCB_OO_2)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_REG(base) ((base)->HDR_PIPE2_CSCB_OMIN_0)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_REG(base) ((base)->HDR_PIPE2_CSCB_OMIN_1)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_REG(base) ((base)->HDR_PIPE2_CSCB_OMIN_2)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_REG(base) ((base)->HDR_PIPE2_CSCB_OMAX_0)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_REG(base) ((base)->HDR_PIPE2_CSCB_OMAX_1)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_REG(base) ((base)->HDR_PIPE2_CSCB_OMAX_2)
#define MED_HDR10_HDR_PIPE2_FL2FX_REG(base)      ((base)->HDR_PIPE2_FL2FX)
#define MED_HDR10_HDR_PIPE2_ENTRY_30_REG(base)   ((base)->HDR_PIPE2_ENTRY_30)
#define MED_HDR10_PIPE3_A0_LUT_REG(base)         ((base)->PIPE3_A0_LUT)
#define MED_HDR10_PIPE3_A1_LUT_REG(base)         ((base)->PIPE3_A1_LUT)
#define MED_HDR10_PIPE3_A2_LUT_REG(base)         ((base)->PIPE3_A2_LUT)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_REG(base) ((base)->HDR_PIPE3_CSCA_CONTROL_REG)
#define MED_HDR10_HDR_PIPE3_CSCA_H00_REG(base)   ((base)->HDR_PIPE3_CSCA_H00)
#define MED_HDR10_HDR_PIPE3_CSCA_H10_REG(base)   ((base)->HDR_PIPE3_CSCA_H10)
#define MED_HDR10_HDR_PIPE3_CSCA_H20_REG(base)   ((base)->HDR_PIPE3_CSCA_H20)
#define MED_HDR10_HDR_PIPE3_CSCA_H01_REG(base)   ((base)->HDR_PIPE3_CSCA_H01)
#define MED_HDR10_HDR_PIPE3_CSCA_H11_REG(base)   ((base)->HDR_PIPE3_CSCA_H11)
#define MED_HDR10_HDR_PIPE3_CSCA_H21_REG(base)   ((base)->HDR_PIPE3_CSCA_H21)
#define MED_HDR10_HDR_PIPE3_CSCA_H02_REG(base)   ((base)->HDR_PIPE3_CSCA_H02)
#define MED_HDR10_HDR_PIPE3_CSCA_H12_REG(base)   ((base)->HDR_PIPE3_CSCA_H12)
#define MED_HDR10_HDR_PIPE3_CSCA_H22_REG(base)   ((base)->HDR_PIPE3_CSCA_H22)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_0_REG(base)  ((base)->HDR_PIPE3_CSCA_IO_0)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_1_REG(base)  ((base)->HDR_PIPE3_CSCA_IO_1)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_2_REG(base)  ((base)->HDR_PIPE3_CSCA_IO_2)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MIN_0)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MIN_1)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MIN_2)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MAX_0)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MAX_1)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_REG(base) ((base)->HDR_PIPE3_CSCA_IO_MAX_2)
#define MED_HDR10_HDR_PIPE3_CSCA_NORM_REG(base)  ((base)->HDR_PIPE3_CSCA_NORM)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_0_REG(base)  ((base)->HDR_PIPE3_CSCA_OO_0)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_1_REG(base)  ((base)->HDR_PIPE3_CSCA_OO_1)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_2_REG(base)  ((base)->HDR_PIPE3_CSCA_OO_2)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_REG(base) ((base)->HDR_PIPE3_CSCA_OMIN_0)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_REG(base) ((base)->HDR_PIPE3_CSCA_OMIN_1)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_REG(base) ((base)->HDR_PIPE3_CSCA_OMIN_2)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_REG(base) ((base)->HDR_PIPE3_CSCA_OMAX_0)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_REG(base) ((base)->HDR_PIPE3_CSCA_OMAX_1)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_REG(base) ((base)->HDR_PIPE3_CSCA_OMAX_2)
#define MED_HDR10_HDR_PIPE3_ENTRY_29_REG(base)   ((base)->HDR_PIPE3_ENTRY_29)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_REG(base) ((base)->HDR_PIPE3_LUT_CONTROL_REG)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_REG(base) ((base)->HDR_PIPE3_CSCB_CONTROL_REG)
#define MED_HDR10_HDR_PIPE3_CSCB_H00_REG(base)   ((base)->HDR_PIPE3_CSCB_H00)
#define MED_HDR10_HDR_PIPE3_CSCB_H10_REG(base)   ((base)->HDR_PIPE3_CSCB_H10)
#define MED_HDR10_HDR_PIPE3_CSCB_H20_REG(base)   ((base)->HDR_PIPE3_CSCB_H20)
#define MED_HDR10_HDR_PIPE3_CSCB_H01_REG(base)   ((base)->HDR_PIPE3_CSCB_H01)
#define MED_HDR10_HDR_PIPE3_CSCB_H11_REG(base)   ((base)->HDR_PIPE3_CSCB_H11)
#define MED_HDR10_HDR_PIPE3_CSCB_H21_REG(base)   ((base)->HDR_PIPE3_CSCB_H21)
#define MED_HDR10_HDR_PIPE3_CSCB_H02_REG(base)   ((base)->HDR_PIPE3_CSCB_H02)
#define MED_HDR10_HDR_PIPE3_CSCB_H12_REG(base)   ((base)->HDR_PIPE3_CSCB_H12)
#define MED_HDR10_HDR_PIPE3_CSCB_H22_REG(base)   ((base)->HDR_PIPE3_CSCB_H22)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_0_REG(base)  ((base)->HDR_PIPE3_CSCB_IO_0)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_1_REG(base)  ((base)->HDR_PIPE3_CSCB_IO_1)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_2_REG(base)  ((base)->HDR_PIPE3_CSCB_IO_2)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MIN_0)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MIN_1)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MIN_2)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MAX_0)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MAX_1)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_REG(base) ((base)->HDR_PIPE3_CSCB_IO_MAX_2)
#define MED_HDR10_HDR_PIPE3_CSCB_NORM_REG(base)  ((base)->HDR_PIPE3_CSCB_NORM)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_0_REG(base)  ((base)->HDR_PIPE3_CSCB_OO_0)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_1_REG(base)  ((base)->HDR_PIPE3_CSCB_OO_1)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_2_REG(base)  ((base)->HDR_PIPE3_CSCB_OO_2)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_REG(base) ((base)->HDR_PIPE3_CSCB_OMIN_0)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_REG(base) ((base)->HDR_PIPE3_CSCB_OMIN_1)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_REG(base) ((base)->HDR_PIPE3_CSCB_OMIN_2)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_REG(base) ((base)->HDR_PIPE3_CSCB_OMAX_0)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_REG(base) ((base)->HDR_PIPE3_CSCB_OMAX_1)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_REG(base) ((base)->HDR_PIPE3_CSCB_OMAX_2)
#define MED_HDR10_HDR_PIPE3_FL2FX_REG(base)      ((base)->HDR_PIPE3_FL2FX)
#define MED_HDR10_HDR_PIPE3_ENTRY_30_REG(base)   ((base)->HDR_PIPE3_ENTRY_30)
#define MED_HDR10_OPIPE_A0_TABLE_REG(base)       ((base)->OPIPE_A0_TABLE)
#define MED_HDR10_OPIPE_A1_TABLE_REG(base)       ((base)->OPIPE_A1_TABLE)
#define MED_HDR10_OPIPE_A2_TABLE_REG(base)       ((base)->OPIPE_A2_TABLE)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_REG(base) ((base)->HDR_OPIPE_CSC_CONTROL_REG)
#define MED_HDR10_HDR_OPIPE_CSC_H00_REG(base)    ((base)->HDR_OPIPE_CSC_H00)
#define MED_HDR10_HDR_OPIPE_CSC_H10_REG(base)    ((base)->HDR_OPIPE_CSC_H10)
#define MED_HDR10_HDR_OPIPE_CSC_H20_REG(base)    ((base)->HDR_OPIPE_CSC_H20)
#define MED_HDR10_HDR_OPIPE_CSC_H01_REG(base)    ((base)->HDR_OPIPE_CSC_H01)
#define MED_HDR10_HDR_OPIPE_CSC_H11_REG(base)    ((base)->HDR_OPIPE_CSC_H11)
#define MED_HDR10_HDR_OPIPE_CSC_H21_REG(base)    ((base)->HDR_OPIPE_CSC_H21)
#define MED_HDR10_HDR_OPIPE_CSC_H02_REG(base)    ((base)->HDR_OPIPE_CSC_H02)
#define MED_HDR10_HDR_OPIPE_CSC_H12_REG(base)    ((base)->HDR_OPIPE_CSC_H12)
#define MED_HDR10_HDR__REG(base)                 ((base)->HDR_)
#define MED_HDR10_HDR_OPIPE_CSC_IO_0_REG(base)   ((base)->HDR_OPIPE_CSC_IO_0)
#define MED_HDR10_HDR_OPIPE_CSC_IO_1_REG(base)   ((base)->HDR_OPIPE_CSC_IO_1)
#define MED_HDR10_HDR_OPIPE_CSC_IO_2_REG(base)   ((base)->HDR_OPIPE_CSC_IO_2)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_0_REG(base)  ((base)->HDR_OPIPE_CSC_MIN_0)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_1_REG(base)  ((base)->HDR_OPIPE_CSC_MIN_1)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_2_REG(base)  ((base)->HDR_OPIPE_CSC_MIN_2)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_0_REG(base)  ((base)->HDR_OPIPE_CSC_MAX_0)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_1_REG(base)  ((base)->HDR_OPIPE_CSC_MAX_1)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_2_REG(base)  ((base)->HDR_OPIPE_CSC_MAX_2)
#define MED_HDR10_HDR_OPIPE_CSC_NORM_REG(base)   ((base)->HDR_OPIPE_CSC_NORM)
#define MED_HDR10_HDR_OPIPE_CSC_OO_0_REG(base)   ((base)->HDR_OPIPE_CSC_OO_0)
#define MED_HDR10_HDR_OPIPE_CSC_OO_1_REG(base)   ((base)->HDR_OPIPE_CSC_OO_1)
#define MED_HDR10_HDR_OPIPE_CSC_OO_2_REG(base)   ((base)->HDR_OPIPE_CSC_OO_2)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_0_REG(base) ((base)->HDR_OPIPE_CSC_OMIN_0)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_1_REG(base) ((base)->HDR_OPIPE_CSC_OMIN_1)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_2_REG(base) ((base)->HDR_OPIPE_CSC_OMIN_2)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_0_REG(base) ((base)->HDR_OPIPE_CSC_OMAX_0)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_1_REG(base) ((base)->HDR_OPIPE_CSC_OMAX_1)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_2_REG(base) ((base)->HDR_OPIPE_CSC_OMAX_2)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_REG(base) ((base)->HDR_OPIPE_2NL_CONTROL_REG)

/*!
 * @}
 */ /* end of group MED_HDR10_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MED_HDR10 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_HDR10_Register_Masks MED_HDR10 Register Masks
 * @{
 */

/*! @name PIPE1_A0_LUT - A0 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE1_A0_LUT_PIPE1_A0_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE1_A0_LUT_PIPE1_A0_LUT_SHIFT (0U)
#define MED_HDR10_PIPE1_A0_LUT_PIPE1_A0_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE1_A0_LUT_PIPE1_A0_LUT_SHIFT)) & MED_HDR10_PIPE1_A0_LUT_PIPE1_A0_LUT_MASK)
/*! @} */

/*! @name PIPE1_A1_LUT - A1 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE1_A1_LUT_PIPE1_A1_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE1_A1_LUT_PIPE1_A1_LUT_SHIFT (0U)
#define MED_HDR10_PIPE1_A1_LUT_PIPE1_A1_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE1_A1_LUT_PIPE1_A1_LUT_SHIFT)) & MED_HDR10_PIPE1_A1_LUT_PIPE1_A1_LUT_MASK)
/*! @} */

/*! @name PIPE1_A2_LUT - A2 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE1_A2_LUT_PIPE1_A2_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE1_A2_LUT_PIPE1_A2_LUT_SHIFT (0U)
#define MED_HDR10_PIPE1_A2_LUT_PIPE1_A2_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE1_A2_LUT_PIPE1_A2_LUT_SHIFT)) & MED_HDR10_PIPE1_A2_LUT_PIPE1_A2_LUT_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_CONTROL_REG - Pipe1 Colorspace Converter A control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H00 - Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H10 - Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H20 - Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H01 - Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H11 - Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H21 - Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H02 - Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H12 - Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_H22 - Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_0 - Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_1 - Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_2 - Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MIN_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MIN_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MIN_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MAX_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MAX_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_IO_MAX_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_NORM - Pipe1 Colorspace Converter A (CSCA) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_NORM_CSCA_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE1_CSCA_NORM_CSCA_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_NORM_CSCA_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_NORM_CSCA_NORM_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_NORM_CSCA_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OO_0 - Pipe1 Colorspace Converter A (CSCA): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OO_0_CSCA_OO_0_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_0_CSCA_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_0_CSCA_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OO_0_CSCA_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OO_0_CSCA_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OO_1 - Pipe1 Colorspace Converter A (CSCA): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OO_1_CSCA_OO_1_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_1_CSCA_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_1_CSCA_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OO_1_CSCA_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OO_1_CSCA_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OO_2 - Pipe1 Colorspace Converter A (CSCA): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OO_2_CSCA_OO_2_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_2_CSCA_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OO_2_CSCA_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OO_2_CSCA_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OO_2_CSCA_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMIN_0 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMIN_1 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMIN_2 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMAX_0 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMAX_1 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCA_OMAX_2 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_LUT_CONTROL_REG - Pipe1 LUT control register */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE1_CSCB_CONTROL_REG - Pipe1 Colorspace Converter B control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H00 - Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H10 - Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H20 - Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H01 - Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H11 - Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H21 - Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H02 - Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H12 - Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_H22 - Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_0 - Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_1 - Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_2 - Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MIN_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MIN_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MIN_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MAX_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MAX_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_IO_MAX_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_NORM - Pipe1 Colorspace Converter B (CSCB) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_NORM_CSCB_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE1_CSCB_NORM_CSCB_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_NORM_CSCB_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_NORM_CSCB_NORM_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_NORM_CSCB_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OO_0 - Pipe1 Colorspace Converter B (CSCB): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OO_0_CSCB_OO_0_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_0_CSCB_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_0_CSCB_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OO_0_CSCB_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OO_0_CSCB_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OO_1 - Pipe1 Colorspace Converter B (CSCB): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OO_1_CSCB_OO_1_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_1_CSCB_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_1_CSCB_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OO_1_CSCB_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OO_1_CSCB_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OO_2 - Pipe1 Colorspace Converter B (CSCB): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OO_2_CSCB_OO_2_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_2_CSCB_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OO_2_CSCB_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OO_2_CSCB_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OO_2_CSCB_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMIN_0 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMIN_1 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMIN_2 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMAX_0 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMAX_1 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_CSCB_OMAX_2 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE1_FL2FX - Pipe1 floating point to fixed point control */
/*! @{ */
#define MED_HDR10_HDR_PIPE1_FL2FX_ENABLE_MASK    (0x1U)
#define MED_HDR10_HDR_PIPE1_FL2FX_ENABLE_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE1_FL2FX_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE1_FL2FX_ENABLE_FOR_ALL_PELS_SHIFT (1U)
/*! @} */

/*! @name PIPE2_A0_LUT - A0 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE2_A0_LUT_PIPE2_A0_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE2_A0_LUT_PIPE2_A0_LUT_SHIFT (0U)
#define MED_HDR10_PIPE2_A0_LUT_PIPE2_A0_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE2_A0_LUT_PIPE2_A0_LUT_SHIFT)) & MED_HDR10_PIPE2_A0_LUT_PIPE2_A0_LUT_MASK)
/*! @} */

/*! @name PIPE2_A1_LUT - A1 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE2_A1_LUT_PIPE2_A1_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE2_A1_LUT_PIPE2_A1_LUT_SHIFT (0U)
#define MED_HDR10_PIPE2_A1_LUT_PIPE2_A1_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE2_A1_LUT_PIPE2_A1_LUT_SHIFT)) & MED_HDR10_PIPE2_A1_LUT_PIPE2_A1_LUT_MASK)
/*! @} */

/*! @name PIPE2_A2_LUT - A2 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE2_A2_LUT_PIPE2_A2_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE2_A2_LUT_PIPE2_A2_LUT_SHIFT (0U)
#define MED_HDR10_PIPE2_A2_LUT_PIPE2_A2_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE2_A2_LUT_PIPE2_A2_LUT_SHIFT)) & MED_HDR10_PIPE2_A2_LUT_PIPE2_A2_LUT_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_CONTROL_REG - Pipe1 Colorspace Converter A control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H00 - Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H10 - Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H20 - Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H01 - Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H11 - Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H21 - Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H02 - Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H12 - Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_H22 - Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_0 - Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_1 - Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_2 - Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MIN_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MIN_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MIN_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MAX_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MAX_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_IO_MAX_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_NORM - Pipe1 Colorspace Converter A (CSCA) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_NORM_CSCA_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE2_CSCA_NORM_CSCA_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_NORM_CSCA_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_NORM_CSCA_NORM_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_NORM_CSCA_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OO_0 - Pipe1 Colorspace Converter A (CSCA): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OO_0_CSCA_OO_0_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_0_CSCA_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_0_CSCA_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OO_0_CSCA_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OO_0_CSCA_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OO_1 - Pipe1 Colorspace Converter A (CSCA): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OO_1_CSCA_OO_1_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_1_CSCA_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_1_CSCA_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OO_1_CSCA_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OO_1_CSCA_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OO_2 - Pipe1 Colorspace Converter A (CSCA): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OO_2_CSCA_OO_2_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_2_CSCA_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OO_2_CSCA_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OO_2_CSCA_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OO_2_CSCA_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMIN_0 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMIN_1 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMIN_2 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMAX_0 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMAX_1 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCA_OMAX_2 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_LUT_CONTROL_REG - Pipe1 LUT control register */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE2_CSCB_CONTROL_REG - Pipe1 Colorspace Converter B control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H00 - Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H10 - Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H20 - Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H01 - Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H11 - Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H21 - Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H02 - Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H12 - Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_H22 - Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_0 - Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_1 - Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_2 - Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MIN_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MIN_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MIN_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MAX_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MAX_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_IO_MAX_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_NORM - Pipe1 Colorspace Converter B (CSCB) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_NORM_CSCB_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE2_CSCB_NORM_CSCB_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_NORM_CSCB_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_NORM_CSCB_NORM_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_NORM_CSCB_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OO_0 - Pipe1 Colorspace Converter B (CSCB): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OO_0_CSCB_OO_0_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_0_CSCB_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_0_CSCB_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OO_0_CSCB_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OO_0_CSCB_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OO_1 - Pipe1 Colorspace Converter B (CSCB): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OO_1_CSCB_OO_1_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_1_CSCB_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_1_CSCB_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OO_1_CSCB_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OO_1_CSCB_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OO_2 - Pipe1 Colorspace Converter B (CSCB): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OO_2_CSCB_OO_2_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_2_CSCB_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OO_2_CSCB_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OO_2_CSCB_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OO_2_CSCB_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMIN_0 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMIN_1 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMIN_2 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMAX_0 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMAX_1 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_CSCB_OMAX_2 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE2_FL2FX - Pipe1 floating point to fixed point control */
/*! @{ */
#define MED_HDR10_HDR_PIPE2_FL2FX_ENABLE_MASK    (0x1U)
#define MED_HDR10_HDR_PIPE2_FL2FX_ENABLE_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE2_FL2FX_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE2_FL2FX_ENABLE_FOR_ALL_PELS_SHIFT (1U)
/*! @} */

/*! @name PIPE3_A0_LUT - A0 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE3_A0_LUT_PIPE3_A0_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE3_A0_LUT_PIPE3_A0_LUT_SHIFT (0U)
#define MED_HDR10_PIPE3_A0_LUT_PIPE3_A0_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE3_A0_LUT_PIPE3_A0_LUT_SHIFT)) & MED_HDR10_PIPE3_A0_LUT_PIPE3_A0_LUT_MASK)
/*! @} */

/*! @name PIPE3_A1_LUT - A1 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE3_A1_LUT_PIPE3_A1_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE3_A1_LUT_PIPE3_A1_LUT_SHIFT (0U)
#define MED_HDR10_PIPE3_A1_LUT_PIPE3_A1_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE3_A1_LUT_PIPE3_A1_LUT_SHIFT)) & MED_HDR10_PIPE3_A1_LUT_PIPE3_A1_LUT_MASK)
/*! @} */

/*! @name PIPE3_A2_LUT - A2 component Look-Up-Table. (LUT) */
/*! @{ */
#define MED_HDR10_PIPE3_A2_LUT_PIPE3_A2_LUT_MASK (0x3FFFU)
#define MED_HDR10_PIPE3_A2_LUT_PIPE3_A2_LUT_SHIFT (0U)
#define MED_HDR10_PIPE3_A2_LUT_PIPE3_A2_LUT(x)   (((uint32_t)(((uint32_t)(x)) << MED_HDR10_PIPE3_A2_LUT_PIPE3_A2_LUT_SHIFT)) & MED_HDR10_PIPE3_A2_LUT_PIPE3_A2_LUT_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_CONTROL_REG - Pipe1 Colorspace Converter A control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H00 - Pipe1 Colorspace Converter A (CSCA) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H10 - Pipe1 Colorspace Converter A (CSCA) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H20 - Pipe1 Colorspace Converter A (CSCA) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H01 - Pipe1 Colorspace Converter A (CSCA) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H11 - Pipe1 Colorspace Converter A (CSCA) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H21 - Pipe1 Colorspace Converter A (CSCA) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H02 - Pipe1 Colorspace Converter A (CSCA) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H12 - Pipe1 Colorspace Converter A (CSCA) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_H22 - Pipe1 Colorspace Converter A (CSCA) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_0 - Pipe1 Colorspace Converter A (CSCA) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_1 - Pipe1 Colorspace Converter A (CSCA) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_2 - Pipe1 Colorspace Converter A (CSCA) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MIN_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MIN_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MIN_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MAX_0 - Pipe1 Colorspace Converter A (CSCA) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MAX_1 - Pipe1 Colorspace Converter A (CSCA) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_IO_MAX_2 - Pipe1 Colorspace Converter A (CSCA) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_NORM - Pipe1 Colorspace Converter A (CSCA) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_NORM_CSCA_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE3_CSCA_NORM_CSCA_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_NORM_CSCA_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_NORM_CSCA_NORM_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_NORM_CSCA_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OO_0 - Pipe1 Colorspace Converter A (CSCA): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OO_0_CSCA_OO_0_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_0_CSCA_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_0_CSCA_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OO_0_CSCA_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OO_0_CSCA_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OO_1 - Pipe1 Colorspace Converter A (CSCA): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OO_1_CSCA_OO_1_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_1_CSCA_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_1_CSCA_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OO_1_CSCA_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OO_1_CSCA_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OO_2 - Pipe1 Colorspace Converter A (CSCA): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OO_2_CSCA_OO_2_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_2_CSCA_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OO_2_CSCA_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OO_2_CSCA_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OO_2_CSCA_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMIN_0 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMIN_1 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMIN_2 - Pipe1 Colorspace Converter A (CSCA): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMAX_0 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMAX_1 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCA_OMAX_2 - Pipe1 Colorspace Converter A (CSCA): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_LUT_CONTROL_REG - Pipe1 LUT control register */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE3_CSCB_CONTROL_REG - Pipe1 Colorspace Converter B control. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H00 - Pipe1 Colorspace Converter A (CSCB) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H00_H00_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H00_H00_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H00_H00(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H00_H00_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H00_H00_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H10 - Pipe1 Colorspace Converter B (CSCB) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H10_H10_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H10_H10_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H10_H10(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H10_H10_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H10_H10_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H20 - Pipe1 Colorspace Converter B (CSCB) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H20_H20_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H20_H20_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H20_H20(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H20_H20_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H20_H20_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H01 - Pipe1 Colorspace Converter B (CSCB) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H01_H01_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H01_H01_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H01_H01(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H01_H01_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H01_H01_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H11 - Pipe1 Colorspace Converter B (CSCB) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H11_H11_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H11_H11_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H11_H11(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H11_H11_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H11_H11_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H21 - Pipe1 Colorspace Converter B (CSCB) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H21_H21_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H21_H21_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H21_H21(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H21_H21_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H21_H21_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H02 - Pipe1 Colorspace Converter B (CSCB) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H02_H02_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H02_H02_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H02_H02(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H02_H02_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H02_H02_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H12 - Pipe1 Colorspace Converter B (CSCB) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H12_H12_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H12_H12_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H12_H12(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H12_H12_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H12_H12_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_H22 - Pipe1 Colorspace Converter B (CSCB) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_H22_H22_MASK    (0xFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_H22_H22_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_H22_H22(x)      (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_H22_H22_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_H22_H22_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_0 - Pipe1 Colorspace Converter B (CSCB) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_1 - Pipe1 Colorspace Converter B (CSCB) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_2 - Pipe1 Colorspace Converter B (CSCB) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MIN_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MIN_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MIN_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MAX_0 - Pipe1 Colorspace Converter B (CSCB) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MAX_1 - Pipe1 Colorspace Converter B (CSCB) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_IO_MAX_2 - Pipe1 Colorspace Converter B (CSCB) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_NORM - Pipe1 Colorspace Converter B (CSCB) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_NORM_CSCB_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_PIPE3_CSCB_NORM_CSCB_NORM_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_NORM_CSCB_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_NORM_CSCB_NORM_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_NORM_CSCB_NORM_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OO_0 - Pipe1 Colorspace Converter B (CSCB): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OO_0_CSCB_OO_0_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_0_CSCB_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_0_CSCB_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OO_0_CSCB_OO_0_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OO_0_CSCB_OO_0_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OO_1 - Pipe1 Colorspace Converter B (CSCB): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OO_1_CSCB_OO_1_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_1_CSCB_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_1_CSCB_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OO_1_CSCB_OO_1_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OO_1_CSCB_OO_1_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OO_2 - Pipe1 Colorspace Converter B (CSCB): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OO_2_CSCB_OO_2_MASK (0x1FFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_2_CSCB_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OO_2_CSCB_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OO_2_CSCB_OO_2_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OO_2_CSCB_OO_2_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMIN_0 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMIN_1 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMIN_2 - Pipe1 Colorspace Converter B (CSCB): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_POST_OFF_MIN_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMAX_0 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMAX_1 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_CSCB_OMAX_2 - Pipe1 Colorspace Converter B (CSCB): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_POST_OFF_MAX_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_PIPE3_FL2FX - Pipe1 floating point to fixed point control */
/*! @{ */
#define MED_HDR10_HDR_PIPE3_FL2FX_ENABLE_MASK    (0x1U)
#define MED_HDR10_HDR_PIPE3_FL2FX_ENABLE_SHIFT   (0U)
#define MED_HDR10_HDR_PIPE3_FL2FX_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_PIPE3_FL2FX_ENABLE_FOR_ALL_PELS_SHIFT (1U)
/*! @} */

/*! @name OPIPE_A0_TABLE - A0 component Linear-to-Non-linear conversion table */
/*! @{ */
#define MED_HDR10_OPIPE_A0_TABLE_OPIPE_A0_TABLE_MASK (0x3FFFU)
#define MED_HDR10_OPIPE_A0_TABLE_OPIPE_A0_TABLE_SHIFT (0U)
#define MED_HDR10_OPIPE_A0_TABLE_OPIPE_A0_TABLE(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_OPIPE_A0_TABLE_OPIPE_A0_TABLE_SHIFT)) & MED_HDR10_OPIPE_A0_TABLE_OPIPE_A0_TABLE_MASK)
/*! @} */

/*! @name OPIPE_A1_TABLE - A1 component Linear-to-Non-linear conversion table */
/*! @{ */
#define MED_HDR10_OPIPE_A1_TABLE_OPIPE_A1_TABLE_MASK (0x3FFFU)
#define MED_HDR10_OPIPE_A1_TABLE_OPIPE_A1_TABLE_SHIFT (0U)
#define MED_HDR10_OPIPE_A1_TABLE_OPIPE_A1_TABLE(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_OPIPE_A1_TABLE_OPIPE_A1_TABLE_SHIFT)) & MED_HDR10_OPIPE_A1_TABLE_OPIPE_A1_TABLE_MASK)
/*! @} */

/*! @name OPIPE_A2_TABLE - A2 component Linear-to-Non-linear conversion table */
/*! @{ */
#define MED_HDR10_OPIPE_A2_TABLE_OPIPE_A2_TABLE_MASK (0x3FFFU)
#define MED_HDR10_OPIPE_A2_TABLE_OPIPE_A2_TABLE_SHIFT (0U)
#define MED_HDR10_OPIPE_A2_TABLE_OPIPE_A2_TABLE(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_OPIPE_A2_TABLE_OPIPE_A2_TABLE_SHIFT)) & MED_HDR10_OPIPE_A2_TABLE_OPIPE_A2_TABLE_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_CONTROL_REG - HDR output stage Colorspace Converter (CSCO) control. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_ENABLE_MASK (0x1U)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_ENABLE_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_ENABLE_FOR_ALL_PELS_MASK (0x2U)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_ENABLE_FOR_ALL_PELS_SHIFT (1U)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_BYPASS_MASK (0x8000U)
#define MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_BYPASS_SHIFT (15U)
/*! @} */

/*! @name HDR_OPIPE_CSC_H00 - Pipe1 Colorspace Converter (CSC) h(0,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H00_H00_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H00_H00_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H00_H00(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H00_H00_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H00_H00_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H10 - Pipe1 Colorspace Converter (CSC) h(1,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H10_H10_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H10_H10_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H10_H10(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H10_H10_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H10_H10_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H20 - HDR OUTPUT Colorspace Converter (CSCO) h(2,0) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H20_H20_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H20_H20_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H20_H20(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H20_H20_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H20_H20_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H01 - HDR OUTPUT pipe Colorspace Converter (CSCO) h(0,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H01_H01_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H01_H01_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H01_H01(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H01_H01_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H01_H01_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H11 - HDR OUTPUT pipe Colorspace Converter (CSCO) h(1,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H11_H11_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H11_H11_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H11_H11(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H11_H11_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H11_H11_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H21 - HDR_output pipe Colorspace Converter (CSCO) h(2,1) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H21_H21_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H21_H21_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H21_H21(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H21_H21_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H21_H21_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H02 - HDR OUTPUT pipe Colorspace Converter (CSCO) h(0,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H02_H02_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H02_H02_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H02_H02(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H02_H02_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H02_H02_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_H12 - HDR OUPUT pipe Colorspace Converter (CSCO) h(1,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_H12_H12_MASK     (0xFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_H12_H12_SHIFT    (0U)
#define MED_HDR10_HDR_OPIPE_CSC_H12_H12(x)       (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_H12_H12_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_H12_H12_MASK)
/*! @} */

/*! @name HDR_ - HDR OUPUT pipe Colorspace Converter (CSCO) h(2,2) matrix coefficient */
/*! @{ */
#define MED_HDR10_HDR__H22_MASK                  (0xFFFFU)
#define MED_HDR10_HDR__H22_SHIFT                 (0U)
#define MED_HDR10_HDR__H22(x)                    (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR__H22_SHIFT)) & MED_HDR10_HDR__H22_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_IO_0 - HDR OUTPUT pipe Colorspace Converter (CSCO) component 0 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_IO_0_COMPO_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_IO_0_COMPO_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_IO_0_COMPO_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_IO_0_COMPO_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_IO_0_COMPO_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_IO_1 - HDR OUPTUT pipe Colorspace Converter (CSCO) component 1 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_IO_1_COMP1_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_IO_1_COMP1_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_IO_1_COMP1_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_IO_1_COMP1_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_IO_1_COMP1_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_IO_2 - HDR OUPUT pipe: Colorspace Converter (CSCO) component 2 pre-offset */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_IO_2_COMP2_PRE_OFFSET_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_IO_2_COMP2_PRE_OFFSET_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_IO_2_COMP2_PRE_OFFSET(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_IO_2_COMP2_PRE_OFFSET_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_IO_2_COMP2_PRE_OFFSET_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MIN_0 - HDR OUPTU pipe Colorspace Converter (CSCO) component 0 clip min. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MIN_0_COMP0_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_0_COMP0_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_0_COMP0_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MIN_0_COMP0_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MIN_0_COMP0_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MIN_1 - HDR OUPUT pipe Colorspace Converter (CSCO) component 1 clip min. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MIN_1_COMP1_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_1_COMP1_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_1_COMP1_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MIN_1_COMP1_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MIN_1_COMP1_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MIN_2 - HDR OUPTU pipe Colorspace Converter (CSCO) component 2 clip min. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MIN_2_COMP2_CLIP_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_2_COMP2_CLIP_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MIN_2_COMP2_CLIP_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MIN_2_COMP2_CLIP_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MIN_2_COMP2_CLIP_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MAX_0 - HDR OUPTUT pipe Colorspace Converter O (CSC) component 0 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MAX_0_COMP0_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_0_COMP0_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_0_COMP0_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MAX_0_COMP0_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MAX_0_COMP0_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MAX_1 - HDR OUTPUT pipe Colorspace Converter (CSCO) component 1 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MAX_1_COMP1_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_1_COMP1_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_1_COMP1_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MAX_1_COMP1_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MAX_1_COMP1_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_MAX_2 - HDR OUTPUT pipe Colorspace Converter (CSCO) component 2 clip max value. */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_MAX_2_COMP2_CLIP_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_2_COMP2_CLIP_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_MAX_2_COMP2_CLIP_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_MAX_2_COMP2_CLIP_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_MAX_2_COMP2_CLIP_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_NORM - HDR OUPUT pipe Colorspace Converter (CSCO) normalization factor */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_NORM_CSC_NORM_MASK (0x1FU)
#define MED_HDR10_HDR_OPIPE_CSC_NORM_CSC_NORM_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_NORM_CSC_NORM(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_NORM_CSC_NORM_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_NORM_CSC_NORM_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OO_0 - HDR OUPTUT pipe Colorspace Converter (CSC): Post offset component 0 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OO_0_CSC_OO_0_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_OO_0_CSC_OO_0_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OO_0_CSC_OO_0(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OO_0_CSC_OO_0_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OO_0_CSC_OO_0_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OO_1 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset component 1 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OO_1_CSC_OO_1_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_OO_1_CSC_OO_1_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OO_1_CSC_OO_1(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OO_1_CSC_OO_1_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OO_1_CSC_OO_1_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OO_2 - HDR OUPTUT pipe Colorspace Converter (CSC): Post offset component 2 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OO_2_CSC_OO_2_MASK (0xFFFFFFFU)
#define MED_HDR10_HDR_OPIPE_CSC_OO_2_CSC_OO_2_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OO_2_CSC_OO_2(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OO_2_CSC_OO_2_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OO_2_CSC_OO_2_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMIN_0 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_0_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_0_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_0_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMIN_0_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMIN_0_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMIN_1 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_1_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_1_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_1_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMIN_1_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMIN_1_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMIN_2 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset min clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_2_POST_OFF_MIN_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_2_POST_OFF_MIN_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMIN_2_POST_OFF_MIN(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMIN_2_POST_OFF_MIN_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMIN_2_POST_OFF_MIN_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMAX_0 - HDR OUPTUT pipe Colorspace Converter (CSC): Post offset max clip value for component 0 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_0_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_0_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_0_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMAX_0_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMAX_0_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMAX_1 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset max clip value for component 1 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_1_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_1_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_1_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMAX_1_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMAX_1_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_CSC_OMAX_2 - HDR OUTPUT pipe Colorspace Converter (CSC): Post offset max clip value for component 2 */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_2_POST_OFF_MAX_MASK (0x3FFU)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_2_POST_OFF_MAX_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_CSC_OMAX_2_POST_OFF_MAX(x) (((uint32_t)(((uint32_t)(x)) << MED_HDR10_HDR_OPIPE_CSC_OMAX_2_POST_OFF_MAX_SHIFT)) & MED_HDR10_HDR_OPIPE_CSC_OMAX_2_POST_OFF_MAX_MASK)
/*! @} */

/*! @name HDR_OPIPE_2NL_CONTROL_REG - HDR OUTPUT -TO NON LINEAR pipeline control */
/*! @{ */
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_PASS_THRU_MASK (0x1U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_PASS_THRU_SHIFT (0U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_DISABLE_FIXED_TO_FLOAT_MASK (0x2U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_DISABLE_FIXED_TO_FLOAT_SHIFT (1U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_LTNL_ENABLE_FOR_ALL_PELS_MASK (0x4U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_LTNL_ENABLE_FOR_ALL_PELS_SHIFT (2U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_FIX2FLT_ENABLE_FOR_ALL_PELS_MASK (0x8U)
#define MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_FIX2FLT_ENABLE_FOR_ALL_PELS_SHIFT (3U)
/*! @} */


/*!
 * @}
 */ /* end of group MED_HDR10_Register_Masks */


/* MED_HDR10 - Peripheral instance base addresses */
/** Peripheral DCSS__MED_HDR10 base pointer */
#define DCSS__MED_HDR10_BASE_PTR                 ((MED_HDR10_MemMapPtr)0x32E0C000u)
/** Array initializer of MED_HDR10 peripheral base pointers */
#define MED_HDR10_BASE_PTRS                      { DCSS__MED_HDR10_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MED_HDR10 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MED_HDR10_Register_Accessor_Macros MED_HDR10 - Register accessor macros
 * @{
 */


/* MED_HDR10 - Register instance definitions */
/* DCSS__MED_HDR10 */
#define DCSS__MED_HDR10_PIPE1_A0_LUT             MED_HDR10_PIPE1_A0_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE1_A1_LUT             MED_HDR10_PIPE1_A1_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE1_A2_LUT             MED_HDR10_PIPE1_A2_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG MED_HDR10_HDR_PIPE1_CSCA_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H00       MED_HDR10_HDR_PIPE1_CSCA_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H10       MED_HDR10_HDR_PIPE1_CSCA_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H20       MED_HDR10_HDR_PIPE1_CSCA_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H01       MED_HDR10_HDR_PIPE1_CSCA_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H11       MED_HDR10_HDR_PIPE1_CSCA_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H21       MED_HDR10_HDR_PIPE1_CSCA_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H02       MED_HDR10_HDR_PIPE1_CSCA_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H12       MED_HDR10_HDR_PIPE1_CSCA_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_H22       MED_HDR10_HDR_PIPE1_CSCA_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_0      MED_HDR10_HDR_PIPE1_CSCA_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_1      MED_HDR10_HDR_PIPE1_CSCA_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_2      MED_HDR10_HDR_PIPE1_CSCA_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0  MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1  MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2  MED_HDR10_HDR_PIPE1_CSCA_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0  MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1  MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2  MED_HDR10_HDR_PIPE1_CSCA_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_NORM      MED_HDR10_HDR_PIPE1_CSCA_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OO_0      MED_HDR10_HDR_PIPE1_CSCA_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OO_1      MED_HDR10_HDR_PIPE1_CSCA_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OO_2      MED_HDR10_HDR_PIPE1_CSCA_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMIN_0    MED_HDR10_HDR_PIPE1_CSCA_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMIN_1    MED_HDR10_HDR_PIPE1_CSCA_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMIN_2    MED_HDR10_HDR_PIPE1_CSCA_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMAX_0    MED_HDR10_HDR_PIPE1_CSCA_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMAX_1    MED_HDR10_HDR_PIPE1_CSCA_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCA_OMAX_2    MED_HDR10_HDR_PIPE1_CSCA_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_ENTRY_29       MED_HDR10_HDR_PIPE1_ENTRY_29_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG MED_HDR10_HDR_PIPE1_LUT_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG MED_HDR10_HDR_PIPE1_CSCB_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H00       MED_HDR10_HDR_PIPE1_CSCB_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H10       MED_HDR10_HDR_PIPE1_CSCB_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H20       MED_HDR10_HDR_PIPE1_CSCB_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H01       MED_HDR10_HDR_PIPE1_CSCB_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H11       MED_HDR10_HDR_PIPE1_CSCB_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H21       MED_HDR10_HDR_PIPE1_CSCB_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H02       MED_HDR10_HDR_PIPE1_CSCB_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H12       MED_HDR10_HDR_PIPE1_CSCB_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_H22       MED_HDR10_HDR_PIPE1_CSCB_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_0      MED_HDR10_HDR_PIPE1_CSCB_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_1      MED_HDR10_HDR_PIPE1_CSCB_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_2      MED_HDR10_HDR_PIPE1_CSCB_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0  MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1  MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2  MED_HDR10_HDR_PIPE1_CSCB_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0  MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1  MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2  MED_HDR10_HDR_PIPE1_CSCB_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_NORM      MED_HDR10_HDR_PIPE1_CSCB_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OO_0      MED_HDR10_HDR_PIPE1_CSCB_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OO_1      MED_HDR10_HDR_PIPE1_CSCB_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OO_2      MED_HDR10_HDR_PIPE1_CSCB_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMIN_0    MED_HDR10_HDR_PIPE1_CSCB_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMIN_1    MED_HDR10_HDR_PIPE1_CSCB_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMIN_2    MED_HDR10_HDR_PIPE1_CSCB_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMAX_0    MED_HDR10_HDR_PIPE1_CSCB_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMAX_1    MED_HDR10_HDR_PIPE1_CSCB_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_CSCB_OMAX_2    MED_HDR10_HDR_PIPE1_CSCB_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_FL2FX          MED_HDR10_HDR_PIPE1_FL2FX_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE1_ENTRY_30       MED_HDR10_HDR_PIPE1_ENTRY_30_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE2_A0_LUT             MED_HDR10_PIPE2_A0_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE2_A1_LUT             MED_HDR10_PIPE2_A1_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE2_A2_LUT             MED_HDR10_PIPE2_A2_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG MED_HDR10_HDR_PIPE2_CSCA_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H00       MED_HDR10_HDR_PIPE2_CSCA_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H10       MED_HDR10_HDR_PIPE2_CSCA_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H20       MED_HDR10_HDR_PIPE2_CSCA_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H01       MED_HDR10_HDR_PIPE2_CSCA_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H11       MED_HDR10_HDR_PIPE2_CSCA_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H21       MED_HDR10_HDR_PIPE2_CSCA_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H02       MED_HDR10_HDR_PIPE2_CSCA_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H12       MED_HDR10_HDR_PIPE2_CSCA_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_H22       MED_HDR10_HDR_PIPE2_CSCA_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_0      MED_HDR10_HDR_PIPE2_CSCA_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_1      MED_HDR10_HDR_PIPE2_CSCA_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_2      MED_HDR10_HDR_PIPE2_CSCA_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0  MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1  MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2  MED_HDR10_HDR_PIPE2_CSCA_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0  MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1  MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2  MED_HDR10_HDR_PIPE2_CSCA_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_NORM      MED_HDR10_HDR_PIPE2_CSCA_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OO_0      MED_HDR10_HDR_PIPE2_CSCA_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OO_1      MED_HDR10_HDR_PIPE2_CSCA_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OO_2      MED_HDR10_HDR_PIPE2_CSCA_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMIN_0    MED_HDR10_HDR_PIPE2_CSCA_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMIN_1    MED_HDR10_HDR_PIPE2_CSCA_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMIN_2    MED_HDR10_HDR_PIPE2_CSCA_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMAX_0    MED_HDR10_HDR_PIPE2_CSCA_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMAX_1    MED_HDR10_HDR_PIPE2_CSCA_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCA_OMAX_2    MED_HDR10_HDR_PIPE2_CSCA_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_ENTRY_29       MED_HDR10_HDR_PIPE2_ENTRY_29_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG MED_HDR10_HDR_PIPE2_LUT_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG MED_HDR10_HDR_PIPE2_CSCB_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H00       MED_HDR10_HDR_PIPE2_CSCB_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H10       MED_HDR10_HDR_PIPE2_CSCB_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H20       MED_HDR10_HDR_PIPE2_CSCB_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H01       MED_HDR10_HDR_PIPE2_CSCB_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H11       MED_HDR10_HDR_PIPE2_CSCB_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H21       MED_HDR10_HDR_PIPE2_CSCB_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H02       MED_HDR10_HDR_PIPE2_CSCB_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H12       MED_HDR10_HDR_PIPE2_CSCB_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_H22       MED_HDR10_HDR_PIPE2_CSCB_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_0      MED_HDR10_HDR_PIPE2_CSCB_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_1      MED_HDR10_HDR_PIPE2_CSCB_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_2      MED_HDR10_HDR_PIPE2_CSCB_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0  MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1  MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2  MED_HDR10_HDR_PIPE2_CSCB_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0  MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1  MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2  MED_HDR10_HDR_PIPE2_CSCB_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_NORM      MED_HDR10_HDR_PIPE2_CSCB_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OO_0      MED_HDR10_HDR_PIPE2_CSCB_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OO_1      MED_HDR10_HDR_PIPE2_CSCB_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OO_2      MED_HDR10_HDR_PIPE2_CSCB_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMIN_0    MED_HDR10_HDR_PIPE2_CSCB_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMIN_1    MED_HDR10_HDR_PIPE2_CSCB_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMIN_2    MED_HDR10_HDR_PIPE2_CSCB_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMAX_0    MED_HDR10_HDR_PIPE2_CSCB_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMAX_1    MED_HDR10_HDR_PIPE2_CSCB_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_CSCB_OMAX_2    MED_HDR10_HDR_PIPE2_CSCB_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_FL2FX          MED_HDR10_HDR_PIPE2_FL2FX_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE2_ENTRY_30       MED_HDR10_HDR_PIPE2_ENTRY_30_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE3_A0_LUT             MED_HDR10_PIPE3_A0_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE3_A1_LUT             MED_HDR10_PIPE3_A1_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_PIPE3_A2_LUT             MED_HDR10_PIPE3_A2_LUT_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG MED_HDR10_HDR_PIPE3_CSCA_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H00       MED_HDR10_HDR_PIPE3_CSCA_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H10       MED_HDR10_HDR_PIPE3_CSCA_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H20       MED_HDR10_HDR_PIPE3_CSCA_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H01       MED_HDR10_HDR_PIPE3_CSCA_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H11       MED_HDR10_HDR_PIPE3_CSCA_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H21       MED_HDR10_HDR_PIPE3_CSCA_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H02       MED_HDR10_HDR_PIPE3_CSCA_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H12       MED_HDR10_HDR_PIPE3_CSCA_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_H22       MED_HDR10_HDR_PIPE3_CSCA_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_0      MED_HDR10_HDR_PIPE3_CSCA_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_1      MED_HDR10_HDR_PIPE3_CSCA_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_2      MED_HDR10_HDR_PIPE3_CSCA_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0  MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1  MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2  MED_HDR10_HDR_PIPE3_CSCA_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0  MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1  MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2  MED_HDR10_HDR_PIPE3_CSCA_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_NORM      MED_HDR10_HDR_PIPE3_CSCA_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OO_0      MED_HDR10_HDR_PIPE3_CSCA_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OO_1      MED_HDR10_HDR_PIPE3_CSCA_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OO_2      MED_HDR10_HDR_PIPE3_CSCA_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMIN_0    MED_HDR10_HDR_PIPE3_CSCA_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMIN_1    MED_HDR10_HDR_PIPE3_CSCA_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMIN_2    MED_HDR10_HDR_PIPE3_CSCA_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMAX_0    MED_HDR10_HDR_PIPE3_CSCA_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMAX_1    MED_HDR10_HDR_PIPE3_CSCA_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCA_OMAX_2    MED_HDR10_HDR_PIPE3_CSCA_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_ENTRY_29       MED_HDR10_HDR_PIPE3_ENTRY_29_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG MED_HDR10_HDR_PIPE3_LUT_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG MED_HDR10_HDR_PIPE3_CSCB_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H00       MED_HDR10_HDR_PIPE3_CSCB_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H10       MED_HDR10_HDR_PIPE3_CSCB_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H20       MED_HDR10_HDR_PIPE3_CSCB_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H01       MED_HDR10_HDR_PIPE3_CSCB_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H11       MED_HDR10_HDR_PIPE3_CSCB_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H21       MED_HDR10_HDR_PIPE3_CSCB_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H02       MED_HDR10_HDR_PIPE3_CSCB_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H12       MED_HDR10_HDR_PIPE3_CSCB_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_H22       MED_HDR10_HDR_PIPE3_CSCB_H22_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_0      MED_HDR10_HDR_PIPE3_CSCB_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_1      MED_HDR10_HDR_PIPE3_CSCB_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_2      MED_HDR10_HDR_PIPE3_CSCB_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0  MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1  MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2  MED_HDR10_HDR_PIPE3_CSCB_IO_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0  MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1  MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2  MED_HDR10_HDR_PIPE3_CSCB_IO_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_NORM      MED_HDR10_HDR_PIPE3_CSCB_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OO_0      MED_HDR10_HDR_PIPE3_CSCB_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OO_1      MED_HDR10_HDR_PIPE3_CSCB_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OO_2      MED_HDR10_HDR_PIPE3_CSCB_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMIN_0    MED_HDR10_HDR_PIPE3_CSCB_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMIN_1    MED_HDR10_HDR_PIPE3_CSCB_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMIN_2    MED_HDR10_HDR_PIPE3_CSCB_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMAX_0    MED_HDR10_HDR_PIPE3_CSCB_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMAX_1    MED_HDR10_HDR_PIPE3_CSCB_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_CSCB_OMAX_2    MED_HDR10_HDR_PIPE3_CSCB_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_FL2FX          MED_HDR10_HDR_PIPE3_FL2FX_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_PIPE3_ENTRY_30       MED_HDR10_HDR_PIPE3_ENTRY_30_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_OPIPE_A0_TABLE           MED_HDR10_OPIPE_A0_TABLE_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_OPIPE_A1_TABLE           MED_HDR10_OPIPE_A1_TABLE_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_OPIPE_A2_TABLE           MED_HDR10_OPIPE_A2_TABLE_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG MED_HDR10_HDR_OPIPE_CSC_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H00        MED_HDR10_HDR_OPIPE_CSC_H00_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H10        MED_HDR10_HDR_OPIPE_CSC_H10_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H20        MED_HDR10_HDR_OPIPE_CSC_H20_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H01        MED_HDR10_HDR_OPIPE_CSC_H01_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H11        MED_HDR10_HDR_OPIPE_CSC_H11_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H21        MED_HDR10_HDR_OPIPE_CSC_H21_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H02        MED_HDR10_HDR_OPIPE_CSC_H02_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_H12        MED_HDR10_HDR_OPIPE_CSC_H12_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_                     MED_HDR10_HDR__REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_IO_0       MED_HDR10_HDR_OPIPE_CSC_IO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_IO_1       MED_HDR10_HDR_OPIPE_CSC_IO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_IO_2       MED_HDR10_HDR_OPIPE_CSC_IO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MIN_0      MED_HDR10_HDR_OPIPE_CSC_MIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MIN_1      MED_HDR10_HDR_OPIPE_CSC_MIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MIN_2      MED_HDR10_HDR_OPIPE_CSC_MIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MAX_0      MED_HDR10_HDR_OPIPE_CSC_MAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MAX_1      MED_HDR10_HDR_OPIPE_CSC_MAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_MAX_2      MED_HDR10_HDR_OPIPE_CSC_MAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_NORM       MED_HDR10_HDR_OPIPE_CSC_NORM_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OO_0       MED_HDR10_HDR_OPIPE_CSC_OO_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OO_1       MED_HDR10_HDR_OPIPE_CSC_OO_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OO_2       MED_HDR10_HDR_OPIPE_CSC_OO_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMIN_0     MED_HDR10_HDR_OPIPE_CSC_OMIN_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMIN_1     MED_HDR10_HDR_OPIPE_CSC_OMIN_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMIN_2     MED_HDR10_HDR_OPIPE_CSC_OMIN_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMAX_0     MED_HDR10_HDR_OPIPE_CSC_OMAX_0_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMAX_1     MED_HDR10_HDR_OPIPE_CSC_OMAX_1_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_CSC_OMAX_2     MED_HDR10_HDR_OPIPE_CSC_OMAX_2_REG(DCSS__MED_HDR10_BASE_PTR)
#define DCSS__MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG MED_HDR10_HDR_OPIPE_2NL_CONTROL_REG_REG(DCSS__MED_HDR10_BASE_PTR)

/*!
 * @}
 */ /* end of group MED_HDR10_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MED_HDR10_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_CSI2RX
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI2RX_Peripheral MIPI_CSI2RX
 * @{
 */

/** MIPI_CSI2RX - Peripheral register structure */
typedef struct MIPI_CSI2RX_MemMap {
  uint32_t CSI2RX_CFG_NUM_LANES;                   /**< , offset: 0x0 */
  uint32_t CSI2RX_CFG_DISABLE_DATA_LANES;          /**< , offset: 0x4 */
  uint32_t CSI2RX_BIT_ERR;                         /**< , offset: 0x8 */
  uint32_t CSI2RX_IRQ_STATUS;                      /**< , offset: 0xC */
  uint32_t CSI2RX_IRQ_MASK;                        /**< , offset: 0x10 */
  uint32_t CSI2RX_ULPS_STATUS;                     /**< , offset: 0x14 */
  uint32_t CSI2RX_PPI_ERRSOT_HS;                   /**< , offset: 0x18 */
  uint32_t CSI2RX_PPI_ERRSOTSYNC_HS;               /**< , offset: 0x1C */
  uint32_t CSI2RX_PPI_ERRESC;                      /**< , offset: 0x20 */
  uint32_t CSI2RX_PPI_ERRSYNCESC;                  /**< , offset: 0x24 */
  uint32_t CSI2RX_PPI_ERRCONTROL;                  /**< , offset: 0x28 */
  uint32_t CSI2RX_CFG_DISABLE_PAYLOAD_0;           /**< , offset: 0x2C */
  uint32_t CSI2RX_CFG_DISABLE_PAYLOAD_1;           /**< , offset: 0x30 */
} volatile *MIPI_CSI2RX_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_CSI2RX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI2RX_Register_Accessor_Macros MIPI_CSI2RX - Register accessor macros
 * @{
 */


/* MIPI_CSI2RX - Register accessors */
#define MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_REG(base) ((base)->CSI2RX_CFG_NUM_LANES)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_REG(base) ((base)->CSI2RX_CFG_DISABLE_DATA_LANES)
#define MIPI_CSI2RX_CSI2RX_BIT_ERR_REG(base)     ((base)->CSI2RX_BIT_ERR)
#define MIPI_CSI2RX_CSI2RX_IRQ_STATUS_REG(base)  ((base)->CSI2RX_IRQ_STATUS)
#define MIPI_CSI2RX_CSI2RX_IRQ_MASK_REG(base)    ((base)->CSI2RX_IRQ_MASK)
#define MIPI_CSI2RX_CSI2RX_ULPS_STATUS_REG(base) ((base)->CSI2RX_ULPS_STATUS)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_REG(base) ((base)->CSI2RX_PPI_ERRSOT_HS)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_REG(base) ((base)->CSI2RX_PPI_ERRSOTSYNC_HS)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRESC_REG(base)  ((base)->CSI2RX_PPI_ERRESC)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_REG(base) ((base)->CSI2RX_PPI_ERRSYNCESC)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_REG(base) ((base)->CSI2RX_PPI_ERRCONTROL)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_REG(base) ((base)->CSI2RX_CFG_DISABLE_PAYLOAD_0)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_REG(base) ((base)->CSI2RX_CFG_DISABLE_PAYLOAD_1)

/*!
 * @}
 */ /* end of group MIPI_CSI2RX_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_CSI2RX Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI2RX_Register_Masks MIPI_CSI2RX Register Masks
 * @{
 */

/*! @name CSI2RX_CFG_NUM_LANES -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_csi2rx_cfg_num_lanes_MASK (0x3U)
#define MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_csi2rx_cfg_num_lanes_SHIFT (0U)
/*! csi2rx_cfg_num_lanes - Sets the number of active lanes that are to be used for receiving data.
 *  0b00..1 Lane
 *  0b01..2 Lane
 *  0b10..3 Lane
 *  0b11..4 Lane
 */
#define MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_csi2rx_cfg_num_lanes(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_csi2rx_cfg_num_lanes_SHIFT)) & MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_csi2rx_cfg_num_lanes_MASK)
/*! @} */

/*! @name CSI2RX_CFG_DISABLE_DATA_LANES -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_csi2rx_cfg_disable_data_lanes_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_csi2rx_cfg_disable_data_lanes_SHIFT (0U)
/*! csi2rx_cfg_disable_data_lanes - Setting bits to a '1' value causes the DPHY Enable signal to deassert.
 *  0b0001..Data Lane 0
 *  0b0010..Data Lane 1
 *  0b0100..Data Lane 2
 *  0b1000..Data Lane 3
 */
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_csi2rx_cfg_disable_data_lanes(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_csi2rx_cfg_disable_data_lanes_SHIFT)) & MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_csi2rx_cfg_disable_data_lanes_MASK)
/*! @} */

/*! @name CSI2RX_BIT_ERR -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_BIT_ERR_csi2rx_bit_err_MASK (0x3FFU)
#define MIPI_CSI2RX_CSI2RX_BIT_ERR_csi2rx_bit_err_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_BIT_ERR_csi2rx_bit_err(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_BIT_ERR_csi2rx_bit_err_SHIFT)) & MIPI_CSI2RX_CSI2RX_BIT_ERR_csi2rx_bit_err_MASK)
/*! @} */

/*! @name CSI2RX_IRQ_STATUS -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_IRQ_STATUS_csi2rx_irq_status_MASK (0x1FFU)
#define MIPI_CSI2RX_CSI2RX_IRQ_STATUS_csi2rx_irq_status_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_IRQ_STATUS_csi2rx_irq_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_IRQ_STATUS_csi2rx_irq_status_SHIFT)) & MIPI_CSI2RX_CSI2RX_IRQ_STATUS_csi2rx_irq_status_MASK)
/*! @} */

/*! @name CSI2RX_IRQ_MASK -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_IRQ_MASK_csi2rx_irq_mask_MASK (0x1FFU)
#define MIPI_CSI2RX_CSI2RX_IRQ_MASK_csi2rx_irq_mask_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_IRQ_MASK_csi2rx_irq_mask(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_IRQ_MASK_csi2rx_irq_mask_SHIFT)) & MIPI_CSI2RX_CSI2RX_IRQ_MASK_csi2rx_irq_mask_MASK)
/*! @} */

/*! @name CSI2RX_ULPS_STATUS -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_ULPS_STATUS_csi2rx_ulps_status_MASK (0x3FFU)
#define MIPI_CSI2RX_CSI2RX_ULPS_STATUS_csi2rx_ulps_status_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_ULPS_STATUS_csi2rx_ulps_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_ULPS_STATUS_csi2rx_ulps_status_SHIFT)) & MIPI_CSI2RX_CSI2RX_ULPS_STATUS_csi2rx_ulps_status_MASK)
/*! @} */

/*! @name CSI2RX_PPI_ERRSOT_HS -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_csi2rx_ppi_errsot_hs_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_csi2rx_ppi_errsot_hs_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_csi2rx_ppi_errsot_hs(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_csi2rx_ppi_errsot_hs_SHIFT)) & MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_csi2rx_ppi_errsot_hs_MASK)
/*! @} */

/*! @name CSI2RX_PPI_ERRSOTSYNC_HS -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_csi2rx_ppi_errsotsync_hs_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_csi2rx_ppi_errsotsync_hs_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_csi2rx_ppi_errsotsync_hs(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_csi2rx_ppi_errsotsync_hs_SHIFT)) & MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_csi2rx_ppi_errsotsync_hs_MASK)
/*! @} */

/*! @name CSI2RX_PPI_ERRESC -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_PPI_ERRESC_csi2rx_ppi_erresc_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRESC_csi2rx_ppi_erresc_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRESC_csi2rx_ppi_erresc(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_PPI_ERRESC_csi2rx_ppi_erresc_SHIFT)) & MIPI_CSI2RX_CSI2RX_PPI_ERRESC_csi2rx_ppi_erresc_MASK)
/*! @} */

/*! @name CSI2RX_PPI_ERRSYNCESC -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_csi2rx_ppi_errsyncesc_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_csi2rx_ppi_errsyncesc_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_csi2rx_ppi_errsyncesc(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_csi2rx_ppi_errsyncesc_SHIFT)) & MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_csi2rx_ppi_errsyncesc_MASK)
/*! @} */

/*! @name CSI2RX_PPI_ERRCONTROL -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_csi2rx_ppi_errcontrol_MASK (0xFU)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_csi2rx_ppi_errcontrol_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_csi2rx_ppi_errcontrol(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_csi2rx_ppi_errcontrol_SHIFT)) & MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_csi2rx_ppi_errcontrol_MASK)
/*! @} */

/*! @name CSI2RX_CFG_DISABLE_PAYLOAD_0 -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_null_MASK (0x1U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_null_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_blank_MASK (0x2U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_blank_SHIFT (1U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_embedded_MASK (0x4U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_embedded_SHIFT (2U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_legacy_yuv_8_MASK (0x400U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_legacy_yuv_8_SHIFT (10U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_yuv_8_MASK (0x4000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_yuv_8_SHIFT (14U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_yuv_10_MASK (0x8000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_yuv_10_SHIFT (15U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb444_MASK (0x10000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb444_SHIFT (16U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb555_MASK (0x20000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb555_SHIFT (17U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb565_MASK (0x40000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb565_SHIFT (18U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb666_MASK (0x80000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb666_SHIFT (19U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb888_MASK (0x100000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_rgb888_SHIFT (20U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw6_MASK (0x1000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw6_SHIFT (24U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw7_MASK (0x2000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw7_SHIFT (25U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw8_MASK (0x4000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw8_SHIFT (26U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw10_MASK (0x8000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw10_SHIFT (27U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw12_MASK (0x10000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw12_SHIFT (28U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw14_MASK (0x20000000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_csi2rx_cfg_disable_payload_raw14_SHIFT (29U)
/*! @} */

/*! @name CSI2RX_CFG_DISABLE_PAYLOAD_1 -  */
/*! @{ */
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_30_MASK (0x1U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_30_SHIFT (0U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_31_MASK (0x2U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_31_SHIFT (1U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_32_MASK (0x4U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_32_SHIFT (2U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_33_MASK (0x8U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_33_SHIFT (3U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_34_MASK (0x10U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_34_SHIFT (4U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_35_MASK (0x20U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_35_SHIFT (5U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_36_MASK (0x40U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_36_SHIFT (6U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_37_MASK (0x80U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_udef_37_SHIFT (7U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_unsupported_MASK (0x10000U)
#define MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_csi2rx_cfg_disable_payload_unsupported_SHIFT (16U)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_CSI2RX_Register_Masks */


/* MIPI_CSI2RX - Peripheral instance base addresses */
/** Peripheral MIPI_CSI2RX1 base pointer */
#define MIPI_CSI2RX1_BASE_PTR                    ((MIPI_CSI2RX_MemMapPtr)0x30A70000u)
/** Peripheral MIPI_CSI2RX2 base pointer */
#define MIPI_CSI2RX2_BASE_PTR                    ((MIPI_CSI2RX_MemMapPtr)0x30B60000u)
/** Array initializer of MIPI_CSI2RX peripheral base pointers */
#define MIPI_CSI2RX_BASE_PTRS                    { MIPI_CSI2RX1_BASE_PTR, MIPI_CSI2RX2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_CSI2RX - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI2RX_Register_Accessor_Macros MIPI_CSI2RX - Register accessor macros
 * @{
 */


/* MIPI_CSI2RX - Register instance definitions */
/* MIPI_CSI2RX1 */
#define MIPI_CSI2RX1_CSI2RX_CFG_NUM_LANES        MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_CFG_DISABLE_DATA_LANES MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_BIT_ERR              MIPI_CSI2RX_CSI2RX_BIT_ERR_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_IRQ_STATUS           MIPI_CSI2RX_CSI2RX_IRQ_STATUS_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_IRQ_MASK             MIPI_CSI2RX_CSI2RX_IRQ_MASK_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_ULPS_STATUS          MIPI_CSI2RX_CSI2RX_ULPS_STATUS_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_PPI_ERRSOT_HS        MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_PPI_ERRSOTSYNC_HS    MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_PPI_ERRESC           MIPI_CSI2RX_CSI2RX_PPI_ERRESC_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_PPI_ERRSYNCESC       MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_PPI_ERRCONTROL       MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_CFG_DISABLE_PAYLOAD_0 MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_REG(MIPI_CSI2RX1_BASE_PTR)
#define MIPI_CSI2RX1_CSI2RX_CFG_DISABLE_PAYLOAD_1 MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_REG(MIPI_CSI2RX1_BASE_PTR)
/* MIPI_CSI2RX2 */
#define MIPI_CSI2RX2_CSI2RX_CFG_NUM_LANES        MIPI_CSI2RX_CSI2RX_CFG_NUM_LANES_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_CFG_DISABLE_DATA_LANES MIPI_CSI2RX_CSI2RX_CFG_DISABLE_DATA_LANES_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_BIT_ERR              MIPI_CSI2RX_CSI2RX_BIT_ERR_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_IRQ_STATUS           MIPI_CSI2RX_CSI2RX_IRQ_STATUS_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_IRQ_MASK             MIPI_CSI2RX_CSI2RX_IRQ_MASK_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_ULPS_STATUS          MIPI_CSI2RX_CSI2RX_ULPS_STATUS_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_PPI_ERRSOT_HS        MIPI_CSI2RX_CSI2RX_PPI_ERRSOT_HS_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_PPI_ERRSOTSYNC_HS    MIPI_CSI2RX_CSI2RX_PPI_ERRSOTSYNC_HS_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_PPI_ERRESC           MIPI_CSI2RX_CSI2RX_PPI_ERRESC_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_PPI_ERRSYNCESC       MIPI_CSI2RX_CSI2RX_PPI_ERRSYNCESC_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_PPI_ERRCONTROL       MIPI_CSI2RX_CSI2RX_PPI_ERRCONTROL_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_CFG_DISABLE_PAYLOAD_0 MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_0_REG(MIPI_CSI2RX2_BASE_PTR)
#define MIPI_CSI2RX2_CSI2RX_CFG_DISABLE_PAYLOAD_1 MIPI_CSI2RX_CSI2RX_CFG_DISABLE_PAYLOAD_1_REG(MIPI_CSI2RX2_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_CSI2RX_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_CSI2RX_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Peripheral MIPI_DSI_HOST
 * @{
 */

/** MIPI_DSI_HOST - Peripheral register structure */
typedef struct MIPI_DSI_HOST_MemMap {
  uint32_t DSI_HOST_CFG_NUM_LANES;                 /**< , offset: 0x0 */
  uint32_t DSI_HOST_CFG_NONCONTINUOUS_CLK;         /**< , offset: 0x4 */
  uint32_t DSI_HOST_CFG_T_PRE;                     /**< , offset: 0x8 */
  uint32_t DSI_HOST_CFG_T_POST;                    /**< , offset: 0xC */
  uint32_t DSI_HOST_CFG_TX_GAP;                    /**< , offset: 0x10 */
  uint32_t DSI_HOST_CFG_AUTOINSERT_EOTP;           /**< , offset: 0x14 */
  uint32_t DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP;     /**< , offset: 0x18 */
  uint32_t DSI_HOST_CFG_HTX_TO_COUNT;              /**< , offset: 0x1C */
  uint32_t DSI_HOST_CFG_LRX_H_TO_COUNT;            /**< , offset: 0x20 */
  uint32_t DSI_HOST_CFG_BTA_H_TO_COUNT;            /**< , offset: 0x24 */
  uint32_t DSI_HOST_CFG_TWAKEUP;                   /**< , offset: 0x28 */
  uint32_t DSI_HOST_CFG_STATUS_OUT;                /**< , offset: 0x2C */
  uint32_t DSI_HOST_RX_ERROR_STATUS;               /**< , offset: 0x30 */
} volatile *MIPI_DSI_HOST_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Accessor_Macros MIPI_DSI_HOST - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST - Register accessors */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(base) ((base)->DSI_HOST_CFG_NUM_LANES)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(base) ((base)->DSI_HOST_CFG_NONCONTINUOUS_CLK)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(base) ((base)->DSI_HOST_CFG_T_PRE)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(base) ((base)->DSI_HOST_CFG_T_POST)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(base) ((base)->DSI_HOST_CFG_TX_GAP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(base) ((base)->DSI_HOST_CFG_AUTOINSERT_EOTP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(base) ((base)->DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_HTX_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_LRX_H_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(base) ((base)->DSI_HOST_CFG_BTA_H_TO_COUNT)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(base) ((base)->DSI_HOST_CFG_TWAKEUP)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(base) ((base)->DSI_HOST_CFG_STATUS_OUT)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(base) ((base)->DSI_HOST_RX_ERROR_STATUS)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Masks MIPI_DSI_HOST Register Masks
 * @{
 */

/*! @name DSI_HOST_CFG_NUM_LANES -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK (0x3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_dsi_host_cfg_num_lanes_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_NONCONTINUOUS_CLK -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_dsi_host_cfg_noncontinuous_clk_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_T_PRE -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_dsi_host_cfg_t_pre_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_T_POST -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_dsi_host_cfg_t_post_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_TX_GAP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK (0x7FU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_dsi_host_cfg_tx_gap_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_AUTOINSERT_EOTP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_dsi_host_cfg_autoinsert_eotp_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK (0xFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_dsi_host_cfg_extra_cmds_after_eotp_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_HTX_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_dsi_host_cfg_htx_to_count_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_LRX_H_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_dsi_host_cfg_lrx_h_to_count_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_BTA_H_TO_COUNT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_dsi_host_cfg_bta_h_to_count_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_TWAKEUP -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK (0x7FFFFU)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_dsi_host_cfg_twakeup_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_STATUS_OUT -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_MASK (0x1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_ERROR_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_MASK (0x2U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_SOT_SYNC_ERROR_SHIFT (1U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_MASK (0x4U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_EOT_SYNC_ERROR_SHIFT (2U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_MASK (0x8U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ESCAPE_MODE_ENTRY_CMD_ERROR_SHIFT (3U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_MASK (0x10U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_LP_TX_SYNC_ERROR_SHIFT (4U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_MASK (0x20U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_PERIPH_TIMEOUT_ERROR_SHIFT (5U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_MASK (0x40U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_FALSE_CONTROL_ERROR_SHIFT (6U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_MASK (0x80U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CONTENTION_DETECT_SHIFT (7U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_MASK (0x100U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_SINGLE_BIT_SHIFT (8U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_MASK (0x200U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_ECC_ERROR_MULTI_BIT_SHIFT (9U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_MASK (0x400U)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_CHECKSUM_ERROR_SHIFT (10U)
/*! @} */

/*! @name DSI_HOST_RX_ERROR_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK (0x7FFU)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT (0U)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_SHIFT)) & MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_dsi_host_rx_error_status_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Masks */


/* MIPI_DSI_HOST - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST base pointer */
#define MIPI_DSI_HOST_BASE_PTR                   ((MIPI_DSI_HOST_MemMapPtr)0x30A10000u)
/** Array initializer of MIPI_DSI_HOST peripheral base pointers */
#define MIPI_DSI_HOST_BASE_PTRS                  { MIPI_DSI_HOST_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_Register_Accessor_Macros MIPI_DSI_HOST - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST - Register instance definitions */
/* MIPI_DSI_HOST */
#define MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES     MIPI_DSI_HOST_DSI_HOST_CFG_NUM_LANES_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK MIPI_DSI_HOST_DSI_HOST_CFG_NONCONTINUOUS_CLK_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE         MIPI_DSI_HOST_DSI_HOST_CFG_T_PRE_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_T_POST        MIPI_DSI_HOST_DSI_HOST_CFG_T_POST_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP        MIPI_DSI_HOST_DSI_HOST_CFG_TX_GAP_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_AUTOINSERT_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP MIPI_DSI_HOST_DSI_HOST_CFG_EXTRA_CMDS_AFTER_EOTP_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT  MIPI_DSI_HOST_DSI_HOST_CFG_HTX_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_LRX_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT MIPI_DSI_HOST_DSI_HOST_CFG_BTA_H_TO_COUNT_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP       MIPI_DSI_HOST_DSI_HOST_CFG_TWAKEUP_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT    MIPI_DSI_HOST_DSI_HOST_CFG_STATUS_OUT_REG(MIPI_DSI_HOST_BASE_PTR)
#define MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS   MIPI_DSI_HOST_DSI_HOST_RX_ERROR_STATUS_REG(MIPI_DSI_HOST_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Peripheral MIPI_DSI_HOST_APB_PKT_IF
 * @{
 */

/** MIPI_DSI_HOST_APB_PKT_IF - Peripheral register structure */
typedef struct MIPI_DSI_HOST_APB_PKT_IF_MemMap {
  uint32_t DSI_HOST_TX_PAYLOAD;                    /**< , offset: 0x0 */
  uint32_t DSI_HOST_PKT_CONTROL;                   /**< , offset: 0x4 */
  uint32_t DSI_HOST_SEND_PACKET;                   /**< , offset: 0x8 */
  uint32_t DSI_HOST_PKT_STATUS;                    /**< , offset: 0xC */
  uint32_t DSI_HOST_PKT_FIFO_WR_LEVEL;             /**< , offset: 0x10 */
  uint32_t DSI_HOST_PKT_FIFO_RD_LEVEL;             /**< , offset: 0x14 */
  uint32_t DSI_HOST_PKT_RX_PAYLOAD;                /**< , offset: 0x18 */
  uint32_t DSI_HOST_PKT_RX_PKT_HEADER;             /**< , offset: 0x1C */
  uint32_t DSI_HOST_IRQ_STATUS;                    /**< , offset: 0x20 */
  uint32_t DSI_HOST_IRQ_STATUS2;                   /**< , offset: 0x24 */
  uint32_t DSI_HOST_IRQ_MASK;                      /**< , offset: 0x28 */
  uint32_t DSI_HOST_IRQ_MASK2;                     /**< , offset: 0x2C */
} volatile *MIPI_DSI_HOST_APB_PKT_IF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Register_Accessor_Macros MIPI_DSI_HOST_APB_PKT_IF - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_APB_PKT_IF - Register accessors */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_REG(base) ((base)->DSI_HOST_TX_PAYLOAD)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_REG(base) ((base)->DSI_HOST_PKT_CONTROL)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_REG(base) ((base)->DSI_HOST_SEND_PACKET)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_REG(base) ((base)->DSI_HOST_PKT_STATUS)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(base) ((base)->DSI_HOST_PKT_FIFO_WR_LEVEL)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(base) ((base)->DSI_HOST_PKT_FIFO_RD_LEVEL)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_REG(base) ((base)->DSI_HOST_PKT_RX_PAYLOAD)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_REG(base) ((base)->DSI_HOST_PKT_RX_PKT_HEADER)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_REG(base) ((base)->DSI_HOST_IRQ_STATUS)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_REG(base) ((base)->DSI_HOST_IRQ_STATUS2)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_REG(base) ((base)->DSI_HOST_IRQ_MASK)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_REG(base) ((base)->DSI_HOST_IRQ_MASK2)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Register_Masks MIPI_DSI_HOST_APB_PKT_IF Register Masks
 * @{
 */

/*! @name DSI_HOST_TX_PAYLOAD -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_dsi_host_tx_payload_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_CONTROL -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK (0x7FFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_dsi_host_pkt_control_MASK)
/*! @} */

/*! @name DSI_HOST_SEND_PACKET -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_MASK (0x1U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_dsi_host_send_packet_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_PKT_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK (0x1FFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_dsi_host_pkt_status_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_FIFO_WR_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_dsi_host_pkt_fifo_wr_level_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_FIFO_RD_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_dsi_host_pkt_fifo_rd_level_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_RX_PAYLOAD -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_dsi_host_pkt_rx_payload_MASK)
/*! @} */

/*! @name DSI_HOST_PKT_RX_PKT_HEADER -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK (0xFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_dsi_host_pkt_rx_pkt_header_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_STATUS -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_dsi_host_irq_status_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_STATUS2 -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK (0x7U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_dsi_host_irq_status2_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_MASK -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK (0xFFFFFFFFU)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_dsi_host_irq_mask_MASK)
/*! @} */

/*! @name DSI_HOST_IRQ_MASK2 -  */
/*! @{ */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK (0x7U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT (0U)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_SHIFT)) & MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_dsi_host_irq_mask2_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Register_Masks */


/* MIPI_DSI_HOST_APB_PKT_IF - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_APB_PKT_IF base pointer */
#define MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR        ((MIPI_DSI_HOST_APB_PKT_IF_MemMapPtr)0x30A10280u)
/** Array initializer of MIPI_DSI_HOST_APB_PKT_IF peripheral base pointers */
#define MIPI_DSI_HOST_APB_PKT_IF_BASE_PTRS       { MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_APB_PKT_IF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_APB_PKT_IF_Register_Accessor_Macros MIPI_DSI_HOST_APB_PKT_IF - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_APB_PKT_IF - Register instance definitions */
/* MIPI_DSI_HOST_APB_PKT_IF */
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_TX_PAYLOAD_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_CONTROL_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_SEND_PACKET_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_STATUS_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_WR_LEVEL_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_FIFO_RD_LEVEL_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PAYLOAD_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_PKT_RX_PKT_HEADER_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2 MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_STATUS2_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)
#define MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2 MIPI_DSI_HOST_APB_PKT_IF_DSI_HOST_IRQ_MASK2_REG(MIPI_DSI_HOST_APB_PKT_IF_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_APB_PKT_IF_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Peripheral MIPI_DSI_HOST_DPI_INTFC
 * @{
 */

/** MIPI_DSI_HOST_DPI_INTFC - Peripheral register structure */
typedef struct MIPI_DSI_HOST_DPI_INTFC_MemMap {
  uint32_t DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE;    /**< , offset: 0x0 */
  uint32_t DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL; /**< , offset: 0x4 */
  uint32_t DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING; /**< , offset: 0x8 */
  uint32_t DSI_HOST_CFG_DPI_PIXEL_FORMAT;          /**< , offset: 0xC */
  uint32_t DSI_HOST_CFG_DPI_VSYNC_POLARITY;        /**< , offset: 0x10 */
  uint32_t DSI_HOST_CFG_DPI_HSYNC_POLARITY;        /**< , offset: 0x14 */
  uint32_t DSI_HOST_CFG_DPI_VIDEO_MODE;            /**< , offset: 0x18 */
  uint32_t DSI_HOST_CFG_DPI_HFP;                   /**< , offset: 0x1C */
  uint32_t DSI_HOST_CFG_DPI_HBP;                   /**< , offset: 0x20 */
  uint32_t DSI_HOST_CFG_DPI_HSA;                   /**< , offset: 0x24 */
  uint32_t DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS;      /**< , offset: 0x28 */
  uint32_t DSI_HOST_CFG_DPI_VBP;                   /**< , offset: 0x2C */
  uint32_t DSI_HOST_CFG_DPI_VFP;                   /**< , offset: 0x30 */
  uint32_t DSI_HOST_CFG_DPI_BLLP_MODE;             /**< , offset: 0x34 */
  uint32_t DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP;     /**< , offset: 0x38 */
  uint32_t DSI_HOST_CFG_DPI_VACTIVE;               /**< , offset: 0x3C */
  uint32_t DSI_HOST_CFG_DPI_VC;                    /**< , offset: 0x40 */
} volatile *MIPI_DSI_HOST_DPI_INTFC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Register_Accessor_Macros MIPI_DSI_HOST_DPI_INTFC - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_DPI_INTFC - Register accessors */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(base) ((base)->DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(base) ((base)->DSI_HOST_CFG_DPI_PIXEL_FORMAT)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(base) ((base)->DSI_HOST_CFG_DPI_VSYNC_POLARITY)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(base) ((base)->DSI_HOST_CFG_DPI_HSYNC_POLARITY)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(base) ((base)->DSI_HOST_CFG_DPI_VIDEO_MODE)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_REG(base) ((base)->DSI_HOST_CFG_DPI_HFP)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_REG(base) ((base)->DSI_HOST_CFG_DPI_HBP)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_REG(base) ((base)->DSI_HOST_CFG_DPI_HSA)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(base) ((base)->DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_REG(base) ((base)->DSI_HOST_CFG_DPI_VBP)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_REG(base) ((base)->DSI_HOST_CFG_DPI_VFP)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_REG(base) ((base)->DSI_HOST_CFG_DPI_BLLP_MODE)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(base) ((base)->DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_REG(base) ((base)->DSI_HOST_CFG_DPI_VACTIVE)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_REG(base) ((base)->DSI_HOST_CFG_DPI_VC)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Register_Masks MIPI_DSI_HOST_DPI_INTFC Register Masks
 * @{
 */

/*! @name DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_dsi_host_cfg_dpi_pixel_payload_size_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_dsi_host_cfg_dpi_pixel_fifo_send_level_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK (0x7U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_dsi_host_cfg_dpi_interface_color_coding_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_PIXEL_FORMAT -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_dsi_host_cfg_dpi_pixel_format_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VSYNC_POLARITY -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_dsi_host_cfg_dpi_vsync_polarity_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HSYNC_POLARITY -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_dsi_host_cfg_dpi_hsync_polarity_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VIDEO_MODE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_dsi_host_cfg_dpi_video_mode_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HFP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_dsi_host_cfg_dpi_hfp_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HBP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_dsi_host_cfg_dpi_hbp_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_HSA -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK (0xFFFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_dsi_host_cfg_dpi_hsa_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_dsi_host_cfg_dpi_enable_mult_pkts_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VBP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK (0xFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_dsi_host_cfg_dpi_vbp_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VFP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK (0xFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_dsi_host_cfg_dpi_vfp_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_BLLP_MODE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_dsi_host_cfg_dpi_bllp_mode_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_MASK (0x1U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_dsi_host_cfg_dpi_use_null_pkt_bllp_SHIFT (0U)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VACTIVE -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK (0x3FFFU)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_dsi_host_cfg_dpi_vactive_MASK)
/*! @} */

/*! @name DSI_HOST_CFG_DPI_VC -  */
/*! @{ */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK (0x3U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT (0U)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_SHIFT)) & MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_dsi_host_cfg_dpi_vc_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Register_Masks */


/* MIPI_DSI_HOST_DPI_INTFC - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_DPI_INTFC base pointer */
#define MIPI_DSI_HOST_DPI_INTFC_BASE_PTR         ((MIPI_DSI_HOST_DPI_INTFC_MemMapPtr)0x30A10200u)
/** Array initializer of MIPI_DSI_HOST_DPI_INTFC peripheral base pointers */
#define MIPI_DSI_HOST_DPI_INTFC_BASE_PTRS        { MIPI_DSI_HOST_DPI_INTFC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_DPI_INTFC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_DPI_INTFC_Register_Accessor_Macros MIPI_DSI_HOST_DPI_INTFC - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_DPI_INTFC - Register instance definitions */
/* MIPI_DSI_HOST_DPI_INTFC */
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_PAYLOAD_SIZE_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FIFO_SEND_LEVEL_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_INTERFACE_COLOR_CODING_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_PIXEL_FORMAT_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VSYNC_POLARITY_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSYNC_POLARITY_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VIDEO_MODE_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HFP_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HBP_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_HSA_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_ENABLE_MULT_PKTS_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VBP_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VFP_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_BLLP_MODE_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_USE_NULL_PKT_BLLP_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VACTIVE_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC MIPI_DSI_HOST_DPI_INTFC_DSI_HOST_CFG_DPI_VC_REG(MIPI_DSI_HOST_DPI_INTFC_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_DPI_INTFC_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Peripheral MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC
 * @{
 */

/** MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Peripheral register structure */
typedef struct MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_MemMap {
  uint32_t DPHY_PD_DPHY;                           /**< , offset: 0x0 */
  uint32_t DPHY_M_PRG_HS_PREPARE;                  /**< , offset: 0x4 */
  uint32_t DPHY_MC_PRG_HS_PREPARE;                 /**< , offset: 0x8 */
  uint32_t DPHY_M_PRG_HS_ZERO;                     /**< , offset: 0xC */
  uint32_t DPHY_MC_PRG_HS_ZERO;                    /**< , offset: 0x10 */
  uint32_t DPHY_M_PRG_HS_TRAIL;                    /**< , offset: 0x14 */
  uint32_t DPHY_MC_PRG_HS_TRAIL;                   /**< , offset: 0x18 */
  uint32_t DPHY_PD_PLL;                            /**< , offset: 0x1C */
  uint32_t DPHY_TST;                               /**< , offset: 0x20 */
  uint32_t DPHY_CN;                                /**< , offset: 0x24 */
  uint32_t DPHY_CM;                                /**< , offset: 0x28 */
  uint32_t DPHY_CO;                                /**< , offset: 0x2C */
  uint32_t DPHY_LOCK;                              /**< , offset: 0x30 */
  uint32_t DPHY_LOCK_BYP;                          /**< , offset: 0x34 */
  uint32_t DPHY_RTERM_SEL;                         /**< , offset: 0x38 */
  uint32_t DPHY_AUTO_PD_EN;                        /**< , offset: 0x3C */
  uint32_t DPHY_RXLPRP;                            /**< , offset: 0x40 */
  uint32_t DPHY_RXCDRP;                            /**< , offset: 0x44 */
} volatile *MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Accessor_Macros MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register accessors */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_REG(base) ((base)->DPHY_PD_DPHY)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_REG(base) ((base)->DPHY_M_PRG_HS_PREPARE)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_REG(base) ((base)->DPHY_MC_PRG_HS_PREPARE)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_REG(base) ((base)->DPHY_M_PRG_HS_ZERO)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_REG(base) ((base)->DPHY_MC_PRG_HS_ZERO)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_REG(base) ((base)->DPHY_M_PRG_HS_TRAIL)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_REG(base) ((base)->DPHY_MC_PRG_HS_TRAIL)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_REG(base) ((base)->DPHY_PD_PLL)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_REG(base) ((base)->DPHY_TST)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_REG(base) ((base)->DPHY_CN)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_REG(base) ((base)->DPHY_CM)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_REG(base) ((base)->DPHY_CO)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_REG(base) ((base)->DPHY_LOCK)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_REG(base) ((base)->DPHY_LOCK_BYP)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_REG(base) ((base)->DPHY_RTERM_SEL)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_REG(base) ((base)->DPHY_AUTO_PD_EN)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_REG(base) ((base)->DPHY_RXLPRP)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_REG(base) ((base)->DPHY_RXCDRP)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Masks MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC Register Masks
 * @{
 */

/*! @name DPHY_PD_DPHY -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_dphy_pd_dphy_SHIFT (0U)
/*! @} */

/*! @name DPHY_M_PRG_HS_PREPARE -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT (0U)
/*! dphy_m_prg_hs_prepare - DPHY m_PRG_HS_PREPARE input. Detailed information about this parameter
 *    programming is available in the MIPI-DSI DPHY section.
 *  0b00..1
 *  0b01..1.5
 *  0b10..2
 *  0b11..2.5
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_dphy_m_prg_hs_prepare_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_PREPARE -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_dphy_mc_prg_hs_prepare_SHIFT (0U)
/*! @} */

/*! @name DPHY_M_PRG_HS_ZERO -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK (0x1FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT (0U)
/*! dphy_m_prg_hs_zero - DPHY m_PRG_HS_ZERO input. Detailed information about this parameter
 *    programming is available in the MIPI-DSI DPHY section.
 *  0b00000..0
 *  0b00001..1
 *  0b00010..2
 *  0b00011..3
 *  0b00100..4
 *  0b00101..5
 *  0b00110..6
 *  0b00111..7
 *  0b01000..8
 *  0b01001..9
 *  0b01010..10
 *  0b01011..11
 *  0b01100..12
 *  0b01101..13
 *  0b01110..14
 *  0b01111..15
 *  0b10000..16
 *  0b10001..17
 *  0b10010..18
 *  0b10011..19
 *  0b10100..20
 *  0b10101..21
 *  0b10110..22
 *  0b10111..23
 *  0b11000..24
 *  0b11001..25
 *  0b11010..26
 *  0b11011..27
 *  0b11100..28
 *  0b11101..29
 *  0b11110..30
 *  0b11111..31
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_dphy_m_prg_hs_zero_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_ZERO -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK (0x3FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT (0U)
/*! dphy_mc_prg_hs_zero - DPHY mc_PRG_HS_ZERO input. Detailed information about this parameter
 *    programming is available in the MIPI-DSI DPHY section.
 *  0b100000..32
 *  0b100001..33
 *  0b100010..34
 *  0b100011..35
 *  0b100100..36
 *  0b100101..37
 *  0b100110..38
 *  0b100111..39
 *  0b101000..40
 *  0b101001..41
 *  0b101010..42
 *  0b101011..43
 *  0b101100..44
 *  0b101101..45
 *  0b101110..46
 *  0b101111..47
 *  0b110000..48
 *  0b110001..49
 *  0b110010..50
 *  0b110011..51
 *  0b110100..52
 *  0b110101..53
 *  0b110110..54
 *  0b110111..55
 *  0b111000..56
 *  0b111001..57
 *  0b111010..58
 *  0b111011..59
 *  0b111100..60
 *  0b111101..61
 *  0b111110..62
 *  0b111111..63
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_dphy_mc_prg_hs_zero_MASK)
/*! @} */

/*! @name DPHY_M_PRG_HS_TRAIL -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT (0U)
/*! dphy_m_prg_hs_trail - DPHY m_PRG_HS_TRAIL input. Detailed information about this parameter
 *    programming is available in the MIPI-DSI DPHY section.
 *  0b0000..0
 *  0b0001..1
 *  0b0010..2
 *  0b0011..3
 *  0b0100..4
 *  0b0101..5
 *  0b0110..6
 *  0b0111..7
 *  0b1000..8
 *  0b1001..9
 *  0b1010..10
 *  0b1011..11
 *  0b1100..12
 *  0b1101..13
 *  0b1110..14
 *  0b1111..15
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_dphy_m_prg_hs_trail_MASK)
/*! @} */

/*! @name DPHY_MC_PRG_HS_TRAIL -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK (0xFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT (0U)
/*! dphy_mc_prg_hs_trail - DPHY mc_PRG_HS_TRAIL input. Detailed information about this parameter
 *    programming is available in the MIPI-DSI DPHY section.
 *  0b0000..0
 *  0b0001..1
 *  0b0010..2
 *  0b0011..3
 *  0b0100..4
 *  0b0101..5
 *  0b0110..6
 *  0b0111..7
 *  0b1000..8
 *  0b1001..9
 *  0b1010..10
 *  0b1011..11
 *  0b1100..12
 *  0b1101..13
 *  0b1110..14
 *  0b1111..15
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_dphy_mc_prg_hs_trail_MASK)
/*! @} */

/*! @name DPHY_PD_PLL -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_PD_SHIFT (0U)
/*! @} */

/*! @name DPHY_TST -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_MASK (0x3FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_TST_MASK)
/*! @} */

/*! @name DPHY_CN -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_MASK (0x1FU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_SHIFT (0U)
/*! CN
 *  0b11111..Divide by 1
 *  0b00000..Divide by 2
 *  0b10000..Divide by 3
 *  0b11000..Divide by 4
 *  0b11100..Divide by 5
 *  0b01110..Divide by 6
 *  0b00111..Divide by 7
 *  0b10011..Divide by 8
 *  0b01001..Divide by 9
 *  0b00100..Divide by 10
 *  0b00010..Divide by 11
 *  0b10001..Divide by 12
 *  0b01000..Divide by 13
 *  0b10100..Divide by 14
 *  0b01010..Divide by 15
 *  0b10101..Divide by 16
 *  0b11010..Divide by 17
 *  0b11101..Divide by 18
 *  0b11110..Divide by 19
 *  0b01111..Divide by 20
 *  0b10111..Divide by 21
 *  0b11011..Divide by 22
 *  0b01101..Divide by 23
 *  0b10110..Divide by 24
 *  0b01011..Divide by 25
 *  0b00101..Divide by 26
 *  0b10010..Divide by 27
 *  0b11001..Divide by 28
 *  0b01100..Divide by 29
 *  0b00110..Divide by 30
 *  0b00011..Divide by 31
 *  0b00001..Divide by 32
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_CN_MASK)
/*! @} */

/*! @name DPHY_CM -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_MASK (0xFFU)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_SHIFT (0U)
/*! CM
 *  0b111x0000..Divide by 16
 *  0b111x1111..Divide by 31
 *  0b11000000..Divide by 32
 *  0b11011111..Divide by 63
 *  0b10000000..Divide by 64
 *  0b10111111..Divide by 127
 *  0b00000000..Divide by 128
 *  0b01111111..Divide by 255
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_CM_MASK)
/*! @} */

/*! @name DPHY_CO -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_SHIFT (0U)
/*! CO
 *  0b00..Divide by 1
 *  0b01..Divide by 2
 *  0b10..Divide by 4
 *  0b11..Divide by 8
 */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_CO_MASK)
/*! @} */

/*! @name DPHY_LOCK -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_LOCK_SHIFT (0U)
/*! @} */

/*! @name DPHY_LOCK_BYP -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_dphy_lock_byp_SHIFT (0U)
/*! @} */

/*! @name DPHY_RTERM_SEL -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_dphy_rterm_sel_SHIFT (0U)
/*! @} */

/*! @name DPHY_AUTO_PD_EN -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_MASK (0x1U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_dphy_auto_pd_en_SHIFT (0U)
/*! @} */

/*! @name DPHY_RXLPRP -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_dphy_rxlprp_MASK)
/*! @} */

/*! @name DPHY_RXCDRP -  */
/*! @{ */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_MASK (0x3U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_SHIFT (0U)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_SHIFT)) & MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_dphy_rxcdrp_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Masks */


/* MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Peripheral instance base addresses */
/** Peripheral MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC base pointer */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR ((MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_MemMapPtr)0x30A10300u)
/** Array initializer of MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC peripheral base
 * pointers */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTRS { MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Accessor_Macros MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register accessor macros
 * @{
 */


/* MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC - Register instance definitions */
/* MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC */
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_DPHY_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_PREPARE_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_ZERO_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_ZERO_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_M_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_MC_PRG_HS_TRAIL_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_PD_PLL_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_TST_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CN_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CM_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_CO_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_LOCK_BYP_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RTERM_SEL_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_AUTO_PD_EN_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXLPRP_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)
#define MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_DPHY_RXCDRP_REG(MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_HOST_FSL_IP1_DPHY_INTFC_Peripheral */


/* ----------------------------------------------------------------------------
   -- MU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Peripheral MU
 * @{
 */

/** MU - Peripheral register structure */
typedef struct MU_MemMap {
  uint32_t TR[4];                                  /**< Processor A Transmit Register 0..Processor A Transmit Register 3, array offset: 0x0, array step: 0x4 */
  uint32_t RR[4];                                  /**< Processor A Receive Register 0..Processor A Receive Register 3, array offset: 0x10, array step: 0x4 */
  uint32_t SR;                                     /**< Processor A Status Register, offset: 0x20 */
  uint32_t CR;                                     /**< Processor A Control Register, offset: 0x24 */
} volatile *MU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register accessors */
#define MU_TR_REG(base,index)                    ((base)->TR[index])
#define MU_RR_REG(base,index)                    ((base)->RR[index])
#define MU_SR_REG(base)                          ((base)->SR)
#define MU_CR_REG(base)                          ((base)->CR)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Masks MU Register Masks
 * @{
 */

/*! @name TR - Processor A Transmit Register 0..Processor A Transmit Register 3 */
/*! @{ */
#define MU_TR_ATR0_MASK                          (0xFFFFFFFFU)
#define MU_TR_ATR0_SHIFT                         (0U)
#define MU_TR_ATR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_ATR0_SHIFT)) & MU_TR_ATR0_MASK)
#define MU_TR_ATR1_MASK                          (0xFFFFFFFFU)
#define MU_TR_ATR1_SHIFT                         (0U)
#define MU_TR_ATR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_ATR1_SHIFT)) & MU_TR_ATR1_MASK)
#define MU_TR_ATR2_MASK                          (0xFFFFFFFFU)
#define MU_TR_ATR2_SHIFT                         (0U)
#define MU_TR_ATR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_ATR2_SHIFT)) & MU_TR_ATR2_MASK)
#define MU_TR_ATR3_MASK                          (0xFFFFFFFFU)
#define MU_TR_ATR3_SHIFT                         (0U)
#define MU_TR_ATR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_ATR3_SHIFT)) & MU_TR_ATR3_MASK)
/*! @} */

/* The count of MU_TR */
#define MU_TR_COUNT                              (4U)

/*! @name RR - Processor A Receive Register 0..Processor A Receive Register 3 */
/*! @{ */
#define MU_RR_ARR0_MASK                          (0xFFFFFFFFU)
#define MU_RR_ARR0_SHIFT                         (0U)
#define MU_RR_ARR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_ARR0_SHIFT)) & MU_RR_ARR0_MASK)
#define MU_RR_ARR1_MASK                          (0xFFFFFFFFU)
#define MU_RR_ARR1_SHIFT                         (0U)
#define MU_RR_ARR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_ARR1_SHIFT)) & MU_RR_ARR1_MASK)
#define MU_RR_ARR2_MASK                          (0xFFFFFFFFU)
#define MU_RR_ARR2_SHIFT                         (0U)
#define MU_RR_ARR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_ARR2_SHIFT)) & MU_RR_ARR2_MASK)
#define MU_RR_ARR3_MASK                          (0xFFFFFFFFU)
#define MU_RR_ARR3_SHIFT                         (0U)
#define MU_RR_ARR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_ARR3_SHIFT)) & MU_RR_ARR3_MASK)
/*! @} */

/* The count of MU_RR */
#define MU_RR_COUNT                              (4U)

/*! @name SR - Processor A Status Register */
/*! @{ */
#define MU_SR_Fn_MASK                            (0x7U)
#define MU_SR_Fn_SHIFT                           (0U)
/*! Fn
 *  0b000..BAFn bit in BCR register is written 0 (default).
 *  0b001..BAFn bit in BCR register is written 1.
 */
#define MU_SR_Fn(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_Fn_SHIFT)) & MU_SR_Fn_MASK)
#define MU_SR_EP_MASK                            (0x10U)
#define MU_SR_EP_SHIFT                           (4U)
#define MU_SR_BRS_MASK                           (0x80U)
#define MU_SR_BRS_SHIFT                          (7U)
#define MU_SR_FUP_MASK                           (0x100U)
#define MU_SR_FUP_SHIFT                          (8U)
#define MU_SR_BRDIP_MASK                         (0x200U)
#define MU_SR_BRDIP_SHIFT                        (9U)
#define MU_SR_TEn_MASK                           (0xF00000U)
#define MU_SR_TEn_SHIFT                          (20U)
/*! TEn
 *  0b0000..ATRn register is not empty.
 *  0b0001..ATRn register is empty (default).
 */
#define MU_SR_TEn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_TEn_SHIFT)) & MU_SR_TEn_MASK)
#define MU_SR_RFn_MASK                           (0xF000000U)
#define MU_SR_RFn_SHIFT                          (24U)
/*! RFn
 *  0b0000..ARRn register is not full (default).
 *  0b0001..ARRn register has received data from BTRn register and is ready to be read by the Processor A.
 */
#define MU_SR_RFn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_RFn_SHIFT)) & MU_SR_RFn_MASK)
#define MU_SR_GIPn_MASK                          (0xF0000000U)
#define MU_SR_GIPn_SHIFT                         (28U)
/*! GIPn
 *  0b0000..Processor A general purpose interrupt n is not pending. (default)
 *  0b0001..Processor A general purpose interrupt n is pending.
 */
#define MU_SR_GIPn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_SR_GIPn_SHIFT)) & MU_SR_GIPn_MASK)
/*! @} */

/*! @name CR - Processor A Control Register */
/*! @{ */
#define MU_CR_ABFn_MASK                          (0x7U)
#define MU_CR_ABFn_SHIFT                         (0U)
/*! ABFn
 *  0b000..N/A. Self clearing bit (default).
 *  0b001..Asserts the Processor A MU reset.
 */
#define MU_CR_ABFn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_ABFn_SHIFT)) & MU_CR_ABFn_MASK)
#define MU_CR_BHR_MASK                           (0x10U)
#define MU_CR_BHR_SHIFT                          (4U)
#define MU_CR_MUR_MASK                           (0x20U)
#define MU_CR_MUR_SHIFT                          (5U)
#define MU_CR_BRDIE_MASK                         (0x40U)
#define MU_CR_BRDIE_SHIFT                        (6U)
#define MU_CR_GIRn_MASK                          (0xF0000U)
#define MU_CR_GIRn_SHIFT                         (16U)
/*! GIRn
 *  0b0000..Processor A General Interrupt n is not requested to the Processor B (default).
 *  0b0001..Processor A General Interrupt n is requested to the Processor B.
 */
#define MU_CR_GIRn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIRn_SHIFT)) & MU_CR_GIRn_MASK)
#define MU_CR_TIEn_MASK                          (0xF00000U)
#define MU_CR_TIEn_SHIFT                         (20U)
/*! TIEn
 *  0b0000..Disables Processor A Transmit Interrupt n. (default)
 *  0b0001..Enables Processor A Transmit Interrupt n.
 */
#define MU_CR_TIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_TIEn_SHIFT)) & MU_CR_TIEn_MASK)
#define MU_CR_RIEn_MASK                          (0xF000000U)
#define MU_CR_RIEn_SHIFT                         (24U)
/*! RIEn
 *  0b0000..Disables Processor A Receive Interrupt n. (default)
 *  0b0001..Enables Processor A Receive Interrupt n.
 */
#define MU_CR_RIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_RIEn_SHIFT)) & MU_CR_RIEn_MASK)
#define MU_CR_GIEn_MASK                          (0xF0000000U)
#define MU_CR_GIEn_SHIFT                         (28U)
/*! GIEn
 *  0b0000..Disables Processor A General Interrupt n. (default)
 *  0b0001..Enables Processor A General Interrupt n.
 */
#define MU_CR_GIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIEn_SHIFT)) & MU_CR_GIEn_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MU_Register_Masks */


/* MU - Peripheral instance base addresses */
/** Peripheral MUA base pointer */
#define MUA_BASE_PTR                             ((MU_MemMapPtr)0x30AA0000u)
/** Array initializer of MU peripheral base pointers */
#define MU_BASE_PTRS                             { MUA_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register instance definitions */
/* MUA */
#define MUA_ATR0                                 MU_TR_REG(MUA_BASE_PTR,0)
#define MUA_ATR1                                 MU_TR_REG(MUA_BASE_PTR,1)
#define MUA_ATR2                                 MU_TR_REG(MUA_BASE_PTR,2)
#define MUA_ATR3                                 MU_TR_REG(MUA_BASE_PTR,3)
#define MUA_ARR0                                 MU_RR_REG(MUA_BASE_PTR,0)
#define MUA_ARR1                                 MU_RR_REG(MUA_BASE_PTR,1)
#define MUA_ARR2                                 MU_RR_REG(MUA_BASE_PTR,2)
#define MUA_ARR3                                 MU_RR_REG(MUA_BASE_PTR,3)
#define MUA_ASR                                  MU_SR_REG(MUA_BASE_PTR)
#define MUA_ACR                                  MU_CR_REG(MUA_BASE_PTR)

/* MU - Register array accessors */
#define MUA_TR(index)                            MU_TR_REG(MUA_BASE_PTR,index)
#define MUA_RR(index)                            MU_RR_REG(MUA_BASE_PTR,index)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MU_Peripheral */


/* ----------------------------------------------------------------------------
   -- OCOTP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Peripheral OCOTP
 * @{
 */

/** OCOTP - Peripheral register structure */
typedef struct OCOTP_MemMap {
  uint32_t CTRL;                                   /**< OTP Controller Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< OTP Controller Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< OTP Controller Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< OTP Controller Control Register, offset: 0xC */
  uint32_t TIMING;                                 /**< OTP Controller Timing Register, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t DATA;                                   /**< OTP Controller Write Data Register, offset: 0x20 */
  uint8_t RESERVED_1[12];
  uint32_t READ_CTRL;                              /**< OTP Controller Write Data Register, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t READ_FUSE_DATA;                         /**< OTP Controller Read Data Register, offset: 0x40 */
  uint8_t RESERVED_3[12];
  uint32_t SW_STICKY;                              /**< Sticky bit Register, offset: 0x50 */
  uint8_t RESERVED_4[12];
  uint32_t SCS;                                    /**< Software Controllable Signals Register, offset: 0x60 */
  uint32_t SCS_SET;                                /**< Software Controllable Signals Register, offset: 0x64 */
  uint32_t SCS_CLR;                                /**< Software Controllable Signals Register, offset: 0x68 */
  uint32_t SCS_TOG;                                /**< Software Controllable Signals Register, offset: 0x6C */
  uint8_t RESERVED_5[32];
  uint32_t VERSION;                                /**< OTP Controller Version Register, offset: 0x90 */
  uint8_t RESERVED_6[876];
  uint32_t LOCK;                                   /**< Value of OTP Bank0 Word0 (Lock controls), offset: 0x400 */
  uint8_t RESERVED_7[12];
  uint32_t TESTER0;                                /**< Value of OTP Bank0 Word1 (Tester Info.), offset: 0x410 */
  uint8_t RESERVED_8[12];
  uint32_t TESTER1;                                /**< Value of OTP Bank0 Word2 (tester Info.), offset: 0x420 */
  uint8_t RESERVED_9[12];
  uint32_t TESTER2;                                /**< Value of OTP Bank0 Word3 (Tester Info.), offset: 0x430 */
  uint8_t RESERVED_10[12];
  uint32_t TESTER3;                                /**< Value of OTP Bank1 Word0 (Tester Info.), offset: 0x440 */
  uint8_t RESERVED_11[12];
  uint32_t TESTER4;                                /**< Value of OTP Bank1 Word1 (Tester Info.), offset: 0x450 */
  uint8_t RESERVED_12[12];
  uint32_t TESTER5;                                /**< Value of OTP Bank1 Word2 (Tester Info.), offset: 0x460 */
  uint8_t RESERVED_13[12];
  uint32_t BOOT_CFG0;                              /**< Value of OTP Bank1 Word3 (Boot Configuration Info.), offset: 0x470 */
  uint8_t RESERVED_14[12];
  uint32_t BOOT_CFG1;                              /**< Value of OTP Bank2 Word0 (Boot Configuration Info.), offset: 0x480 */
  uint8_t RESERVED_15[12];
  uint32_t BOOT_CFG2;                              /**< Value of OTP Bank2 Word1 (Boot Configuration Info.), offset: 0x490 */
  uint8_t RESERVED_16[12];
  uint32_t BOOT_CFG3;                              /**< Value of OTP Bank2 Word2 (Boot Configuration Info.), offset: 0x4A0 */
  uint8_t RESERVED_17[12];
  uint32_t BOOT_CFG4;                              /**< Value of OTP Bank2 Word3 (BOOT Configuration Info.), offset: 0x4B0 */
  uint8_t RESERVED_18[12];
  uint32_t MEM_TRIM0;                              /**< Value of OTP Bank3 Word0 (Memory Related Info.), offset: 0x4C0 */
  uint8_t RESERVED_19[12];
  uint32_t MEM_TRIM1;                              /**< Value of OTP Bank3 Word1 (Memory Related Info.), offset: 0x4D0 */
  uint8_t RESERVED_20[12];
  uint32_t ANA0;                                   /**< Value of OTP Bank3 Word2 (Analog Info.), offset: 0x4E0 */
  uint8_t RESERVED_21[12];
  uint32_t ANA1;                                   /**< Value of OTP Bank3 Word3 (Analog Info.), offset: 0x4F0 */
  uint8_t RESERVED_22[140];
  uint32_t SRK0;                                   /**< Shadow Register for OTP Bank6 Word0 (SRK Hash), offset: 0x580 */
  uint8_t RESERVED_23[12];
  uint32_t SRK1;                                   /**< Shadow Register for OTP Bank6 Word1 (SRK Hash), offset: 0x590 */
  uint8_t RESERVED_24[12];
  uint32_t SRK2;                                   /**< Shadow Register for OTP Bank6 Word2 (SRK Hash), offset: 0x5A0 */
  uint8_t RESERVED_25[12];
  uint32_t SRK3;                                   /**< Shadow Register for OTP Bank6 Word3 (SRK Hash), offset: 0x5B0 */
  uint8_t RESERVED_26[12];
  uint32_t SRK4;                                   /**< Shadow Register for OTP Bank7 Word0 (SRK Hash), offset: 0x5C0 */
  uint8_t RESERVED_27[12];
  uint32_t SRK5;                                   /**< Shadow Register for OTP Bank7 Word1 (SRK Hash), offset: 0x5D0 */
  uint8_t RESERVED_28[12];
  uint32_t SRK6;                                   /**< Shadow Register for OTP Bank7 Word2 (SRK Hash), offset: 0x5E0 */
  uint8_t RESERVED_29[12];
  uint32_t SRK7;                                   /**< Shadow Register for OTP Bank7 Word3 (SRK Hash), offset: 0x5F0 */
  uint8_t RESERVED_30[12];
  uint32_t SJC_RESP0;                              /**< Value of OTP Bank8 Word0 (Secure JTAG Response Field), offset: 0x600 */
  uint8_t RESERVED_31[12];
  uint32_t SJC_RESP1;                              /**< Value of OTP Bank8 Word1 (Secure JTAG Response Field), offset: 0x610 */
  uint8_t RESERVED_32[12];
  uint32_t USB_ID;                                 /**< Value of OTP Bank8 Word2 (USB ID info), offset: 0x620 */
  uint8_t RESERVED_33[12];
  uint32_t FIELD_RETURN;                           /**< Value of OTP Bank5 Word6 (Field Return), offset: 0x630 */
  uint8_t RESERVED_34[12];
  uint32_t MAC_ADDR0;                              /**< Value of OTP Bank9 Word0 (MAC Address), offset: 0x640 */
  uint8_t RESERVED_35[12];
  uint32_t MAC_ADDR1;                              /**< Value of OTP Bank9 Word1 (MAC Address), offset: 0x650 */
  uint8_t RESERVED_36[12];
  uint32_t MAC_ADDR2;                              /**< Value of OTP Bank9 Word2 (MAC Address), offset: 0x660 */
  uint8_t RESERVED_37[12];
  uint32_t SRK_REVOKE;                             /**< Value of OTP Bank9 Word3 (SRK Revoke), offset: 0x670 */
  uint8_t RESERVED_38[12];
  uint32_t MAU_KEY0;                               /**< Shadow Register for OTP Bank10 Word0 (MAU Key), offset: 0x680 */
  uint8_t RESERVED_39[12];
  uint32_t MAU_KEY1;                               /**< Shadow Register for OTP Bank10 Word1 (MAU Key), offset: 0x690 */
  uint8_t RESERVED_40[12];
  uint32_t MAU_KEY2;                               /**< Shadow Register for OTP Bank10 Word2 (MAU Key), offset: 0x6A0 */
  uint8_t RESERVED_41[12];
  uint32_t MAU_KEY3;                               /**< Shadow Register for OTP Bank10 Word3 (MAU Key), offset: 0x6B0 */
  uint8_t RESERVED_42[12];
  uint32_t MAU_KEY4;                               /**< Shadow Register for OTP Bank11 Word0 (MAU Key), offset: 0x6C0 */
  uint8_t RESERVED_43[12];
  uint32_t MAU_KEY5;                               /**< Shadow Register for OTP Bank11 Word1 (MAU Key), offset: 0x6D0 */
  uint8_t RESERVED_44[12];
  uint32_t MAU_KEY6;                               /**< Shadow Register for OTP Bank11 Word2 (MAU Key), offset: 0x6E0 */
  uint8_t RESERVED_45[12];
  uint32_t MAU_KEY7;                               /**< Shadow Register for OTP Bank11 Word3 (MAU Key), offset: 0x6F0 */
  uint8_t RESERVED_46[140];
  uint32_t GP10;                                   /**< Value of OTP Bank14 Word0 (), offset: 0x780 */
  uint8_t RESERVED_47[12];
  uint32_t GP11;                                   /**< Value of OTP Bank14 Word1 (), offset: 0x790 */
  uint8_t RESERVED_48[12];
  uint32_t GP20;                                   /**< Value of OTP Bank14 Word2 (), offset: 0x7A0 */
  uint8_t RESERVED_49[12];
  uint32_t GP21;                                   /**< Value of OTP Bank14 Word3 (), offset: 0x7B0 */
  uint8_t RESERVED_50[12];
  uint32_t GP_CRC0;                                /**< Value of OTP Bank15 Word0 (CRC Key), offset: 0x7C0 */
  uint8_t RESERVED_51[12];
  uint32_t GP_CRC1;                                /**< Value of OTP Bank15 Word1 (CRC Key), offset: 0x7D0 */
  uint8_t RESERVED_52[12];
  uint32_t GP_CRC2;                                /**< Value of OTP Bank15 Word2 (CRC Key), offset: 0x7E0 */
  uint8_t RESERVED_53[12];
  uint32_t GROUP_MASK;                             /**< Value of OTP Bank15 Word3 (CRC Key), offset: 0x7F0 */
  uint8_t RESERVED_54[12];
  uint32_t HDMI_FW_SRK0;                           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x800 */
  uint8_t RESERVED_55[12];
  uint32_t HDMI_FW_SRK1;                           /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x810 */
  uint8_t RESERVED_56[12];
  uint32_t HDMI_FW_SRK2;                           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x820 */
  uint8_t RESERVED_57[12];
  uint32_t HDMI_FW_SRK3;                           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x830 */
  uint8_t RESERVED_58[12];
  uint32_t HDMI_FW_SRK4;                           /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x840 */
  uint8_t RESERVED_59[12];
  uint32_t HDMI_FW_SRK5;                           /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x850 */
  uint8_t RESERVED_60[12];
  uint32_t HDMI_FW_SRK6;                           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x860 */
  uint8_t RESERVED_61[12];
  uint32_t HDMI_FW_SRK7;                           /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x870 */
  uint8_t RESERVED_62[12];
  uint32_t HDMI_KMEK0;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x880 */
  uint8_t RESERVED_63[12];
  uint32_t HDMI_KMEK1;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x890 */
  uint8_t RESERVED_64[12];
  uint32_t HDMI_KMEK2;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x8A0 */
  uint8_t RESERVED_65[12];
  uint32_t HDMI_KMEK3;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x8B0 */
  uint8_t RESERVED_66[76];
  uint32_t HDCP_TX_CONS0;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x900 */
  uint8_t RESERVED_67[12];
  uint32_t HDCP_TX_CONS1;                          /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x910 */
  uint8_t RESERVED_68[12];
  uint32_t HDCP_TX_CONS2;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x920 */
  uint8_t RESERVED_69[12];
  uint32_t HDCP_TX_CONS3;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x930 */
  uint8_t RESERVED_70[12];
  uint32_t HDCP_TX_CERT0;                          /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x940 */
  uint8_t RESERVED_71[12];
  uint32_t HDCP_TX_CERT1;                          /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x950 */
  uint8_t RESERVED_72[12];
  uint32_t HDCP_TX_CERT2;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x960 */
  uint8_t RESERVED_73[12];
  uint32_t HDCP_TX_CERT3;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x970 */
  uint8_t RESERVED_74[12];
  uint32_t HDCP_TX_CERT4;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x980 */
  uint8_t RESERVED_75[12];
  uint32_t HDCP_TX_CERT5;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x990 */
  uint8_t RESERVED_76[12];
  uint32_t HDCP_TX_CERT6;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9A0 */
  uint8_t RESERVED_77[12];
  uint32_t HDCP_TX_CERT7;                          /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9B0 */
  uint8_t RESERVED_78[12];
  uint32_t HDCP_TX_CERT8;                          /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x9C0 */
  uint8_t RESERVED_79[12];
  uint32_t HDCP_TX_CERT9;                          /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x9D0 */
  uint8_t RESERVED_80[12];
  uint32_t HDCP_TX_CERT10;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9E0 */
  uint8_t RESERVED_81[12];
  uint32_t HDCP_TX_CERT11;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x9F0 */
  uint8_t RESERVED_82[12];
  uint32_t HDCP_TX_CERT12;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA00 */
  uint8_t RESERVED_83[12];
  uint32_t HDCP_TX_CERT13;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xA10 */
  uint8_t RESERVED_84[12];
  uint32_t HDCP_TX_CERT14;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA20 */
  uint8_t RESERVED_85[12];
  uint32_t HDCP_TX_CERT15;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA30 */
  uint8_t RESERVED_86[12];
  uint32_t HDCP_TX_CERT16;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xA40 */
  uint8_t RESERVED_87[12];
  uint32_t HDCP_TX_CERT17;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xA50 */
  uint8_t RESERVED_88[12];
  uint32_t HDCP_TX_CERT18;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA60 */
  uint8_t RESERVED_89[12];
  uint32_t HDCP_TX_CERT19;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA70 */
  uint8_t RESERVED_90[12];
  uint32_t HDCP_TX_CERT20;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA80 */
  uint8_t RESERVED_91[12];
  uint32_t HDCP_TX_CERT21;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xA90 */
  uint8_t RESERVED_92[12];
  uint32_t HDCP_TX_CERT22;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAA0 */
  uint8_t RESERVED_93[12];
  uint32_t HDCP_TX_CERT23;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAB0 */
  uint8_t RESERVED_94[12];
  uint32_t HDCP_TX_CERT24;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xAC0 */
  uint8_t RESERVED_95[12];
  uint32_t HDCP_TX_CERT25;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xAD0 */
  uint8_t RESERVED_96[12];
  uint32_t HDCP_TX_CERT26;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAE0 */
  uint8_t RESERVED_97[12];
  uint32_t HDCP_TX_CERT27;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xAF0 */
  uint8_t RESERVED_98[12];
  uint32_t HDCP_TX_CERT28;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB00 */
  uint8_t RESERVED_99[12];
  uint32_t HDCP_TX_CERT29;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xB10 */
  uint8_t RESERVED_100[12];
  uint32_t HDCP_TX_CERT30;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB20 */
  uint8_t RESERVED_101[12];
  uint32_t HDCP_TX_CERT31;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB30 */
  uint8_t RESERVED_102[12];
  uint32_t HDCP_TX_CERT32;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xB40 */
  uint8_t RESERVED_103[12];
  uint32_t HDCP_TX_CERT33;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xB50 */
  uint8_t RESERVED_104[12];
  uint32_t HDCP_TX_CERT34;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB60 */
  uint8_t RESERVED_105[12];
  uint32_t HDCP_TX_CERT35;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB70 */
  uint8_t RESERVED_106[12];
  uint32_t HDCP_TX_CERT36;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB80 */
  uint8_t RESERVED_107[12];
  uint32_t HDCP_TX_CERT37;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xB90 */
  uint8_t RESERVED_108[12];
  uint32_t HDCP_TX_CERT38;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBA0 */
  uint8_t RESERVED_109[12];
  uint32_t HDCP_TX_CERT39;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBB0 */
  uint8_t RESERVED_110[12];
  uint32_t HDCP_TX_CERT40;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xBC0 */
  uint8_t RESERVED_111[12];
  uint32_t HDCP_TX_CERT41;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xBD0 */
  uint8_t RESERVED_112[12];
  uint32_t HDCP_TX_CERT42;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBE0 */
  uint8_t RESERVED_113[12];
  uint32_t HDCP_TX_CERT43;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xBF0 */
  uint8_t RESERVED_114[12];
  uint32_t HDCP_TX_CERT44;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC00 */
  uint8_t RESERVED_115[12];
  uint32_t HDCP_TX_CERT45;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xC10 */
  uint8_t RESERVED_116[12];
  uint32_t HDCP_TX_CERT46;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC20 */
  uint8_t RESERVED_117[12];
  uint32_t HDCP_TX_CERT47;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC30 */
  uint8_t RESERVED_118[12];
  uint32_t HDCP_TX_CERT48;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xC40 */
  uint8_t RESERVED_119[12];
  uint32_t HDCP_TX_CERT49;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xC50 */
  uint8_t RESERVED_120[12];
  uint32_t HDCP_TX_CERT50;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC60 */
  uint8_t RESERVED_121[12];
  uint32_t HDCP_TX_CERT51;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC70 */
  uint8_t RESERVED_122[12];
  uint32_t HDCP_TX_CERT52;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC80 */
  uint8_t RESERVED_123[12];
  uint32_t HDCP_TX_CERT53;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xC90 */
  uint8_t RESERVED_124[12];
  uint32_t HDCP_TX_CERT54;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCA0 */
  uint8_t RESERVED_125[12];
  uint32_t HDCP_TX_CERT55;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCB0 */
  uint8_t RESERVED_126[12];
  uint32_t HDCP_TX_CERT56;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xCC0 */
  uint8_t RESERVED_127[12];
  uint32_t HDCP_TX_CERT57;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xCD0 */
  uint8_t RESERVED_128[12];
  uint32_t HDCP_TX_CERT58;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCE0 */
  uint8_t RESERVED_129[12];
  uint32_t HDCP_TX_CERT59;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xCF0 */
  uint8_t RESERVED_130[12];
  uint32_t HDCP_TX_CERT60;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD00 */
  uint8_t RESERVED_131[12];
  uint32_t HDCP_TX_CERT61;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xD10 */
  uint8_t RESERVED_132[12];
  uint32_t HDCP_TX_CERT62;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD20 */
  uint8_t RESERVED_133[12];
  uint32_t HDCP_TX_CERT63;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD30 */
  uint8_t RESERVED_134[12];
  uint32_t HDCP_TX_CERT64;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xD40 */
  uint8_t RESERVED_135[12];
  uint32_t HDCP_TX_CERT65;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xD50 */
  uint8_t RESERVED_136[12];
  uint32_t HDCP_TX_CERT66;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD60 */
  uint8_t RESERVED_137[12];
  uint32_t HDCP_TX_CERT67;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD70 */
  uint8_t RESERVED_138[12];
  uint32_t HDCP_TX_CERT68;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD80 */
  uint8_t RESERVED_139[12];
  uint32_t HDCP_TX_CERT69;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xD90 */
  uint8_t RESERVED_140[12];
  uint32_t HDCP_TX_CERT70;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDA0 */
  uint8_t RESERVED_141[12];
  uint32_t HDCP_TX_CERT71;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDB0 */
  uint8_t RESERVED_142[12];
  uint32_t HDCP_TX_CERT72;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xDC0 */
  uint8_t RESERVED_143[12];
  uint32_t HDCP_TX_CERT73;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xDD0 */
  uint8_t RESERVED_144[12];
  uint32_t HDCP_TX_CERT74;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDE0 */
  uint8_t RESERVED_145[12];
  uint32_t HDCP_TX_CERT75;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xDF0 */
  uint8_t RESERVED_146[12];
  uint32_t HDCP_TX_CERT76;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE00 */
  uint8_t RESERVED_147[12];
  uint32_t HDCP_TX_CERT77;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xE10 */
  uint8_t RESERVED_148[12];
  uint32_t HDCP_TX_CERT78;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE20 */
  uint8_t RESERVED_149[12];
  uint32_t HDCP_TX_CERT79;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE30 */
  uint8_t RESERVED_150[12];
  uint32_t HDCP_TX_CERT80;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xE40 */
  uint8_t RESERVED_151[12];
  uint32_t HDCP_TX_CERT81;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xE50 */
  uint8_t RESERVED_152[12];
  uint32_t HDCP_TX_CERT82;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE60 */
  uint8_t RESERVED_153[12];
  uint32_t HDCP_TX_CERT83;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE70 */
  uint8_t RESERVED_154[12];
  uint32_t HDCP_TX_CERT84;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE80 */
  uint8_t RESERVED_155[12];
  uint32_t HDCP_TX_CERT85;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xE90 */
  uint8_t RESERVED_156[12];
  uint32_t HDCP_TX_CERT86;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEA0 */
  uint8_t RESERVED_157[12];
  uint32_t HDCP_TX_CERT87;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEB0 */
  uint8_t RESERVED_158[12];
  uint32_t HDCP_TX_CERT88;                         /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xEC0 */
  uint8_t RESERVED_159[12];
  uint32_t HDCP_TX_CERT89;                         /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xED0 */
  uint8_t RESERVED_160[12];
  uint32_t HDCP_TX_CERT90;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEE0 */
  uint8_t RESERVED_161[12];
  uint32_t HDCP_TX_CERT91;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xEF0 */
  uint8_t RESERVED_162[12];
  uint32_t HDCP_TX_CERT92;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF00 */
  uint8_t RESERVED_163[12];
  uint32_t HDCP_TX_CERT93;                         /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0xF10 */
  uint8_t RESERVED_164[12];
  uint32_t HDCP_TX_CERT94;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF20 */
  uint8_t RESERVED_165[12];
  uint32_t HDCP_TX_CERT95;                         /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF30 */
  uint8_t RESERVED_166[12];
  uint32_t HDCP_KEY0;                              /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xF40 */
  uint8_t RESERVED_167[12];
  uint32_t HDCP_KEY1;                              /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xF50 */
  uint8_t RESERVED_168[12];
  uint32_t HDCP_KEY2;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF60 */
  uint8_t RESERVED_169[12];
  uint32_t HDCP_KEY3;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF70 */
  uint8_t RESERVED_170[12];
  uint32_t HDCP_KEY4;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF80 */
  uint8_t RESERVED_171[12];
  uint32_t HDCP_KEY5;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xF90 */
  uint8_t RESERVED_172[12];
  uint32_t HDCP_KEY6;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFA0 */
  uint8_t RESERVED_173[12];
  uint32_t HDCP_KEY7;                              /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFB0 */
  uint8_t RESERVED_174[12];
  uint32_t HDCP_KEY8;                              /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0xFC0 */
  uint8_t RESERVED_175[12];
  uint32_t HDCP_KEY9;                              /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0xFD0 */
  uint8_t RESERVED_176[12];
  uint32_t HDCP_KEY10;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFE0 */
  uint8_t RESERVED_177[12];
  uint32_t HDCP_KEY11;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0xFF0 */
  uint8_t RESERVED_178[12];
  uint32_t HDCP_KEY12;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1000 */
  uint8_t RESERVED_179[12];
  uint32_t HDCP_KEY13;                             /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1010 */
  uint8_t RESERVED_180[12];
  uint32_t HDCP_KEY14;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1020 */
  uint8_t RESERVED_181[12];
  uint32_t HDCP_KEY15;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1030 */
  uint8_t RESERVED_182[12];
  uint32_t HDCP_KEY16;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1040 */
  uint8_t RESERVED_183[12];
  uint32_t HDCP_KEY17;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1050 */
  uint8_t RESERVED_184[12];
  uint32_t HDCP_KEY18;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1060 */
  uint8_t RESERVED_185[12];
  uint32_t HDCP_KEY19;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1070 */
  uint8_t RESERVED_186[12];
  uint32_t HDCP_KEY20;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1080 */
  uint8_t RESERVED_187[12];
  uint32_t HDCP_KEY21;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1090 */
  uint8_t RESERVED_188[12];
  uint32_t HDCP_KEY22;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10A0 */
  uint8_t RESERVED_189[12];
  uint32_t HDCP_KEY23;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10B0 */
  uint8_t RESERVED_190[12];
  uint32_t HDCP_KEY24;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x10C0 */
  uint8_t RESERVED_191[12];
  uint32_t HDCP_KEY25;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x10D0 */
  uint8_t RESERVED_192[12];
  uint32_t HDCP_KEY26;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10E0 */
  uint8_t RESERVED_193[12];
  uint32_t HDCP_KEY27;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x10F0 */
  uint8_t RESERVED_194[12];
  uint32_t HDCP_KEY28;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1100 */
  uint8_t RESERVED_195[12];
  uint32_t HDCP_KEY29;                             /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1110 */
  uint8_t RESERVED_196[12];
  uint32_t HDCP_KEY30;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1120 */
  uint8_t RESERVED_197[12];
  uint32_t HDCP_KEY31;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1130 */
  uint8_t RESERVED_198[12];
  uint32_t HDCP_KEY32;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1140 */
  uint8_t RESERVED_199[12];
  uint32_t HDCP_KEY33;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1150 */
  uint8_t RESERVED_200[12];
  uint32_t HDCP_KEY34;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1160 */
  uint8_t RESERVED_201[12];
  uint32_t HDCP_KEY35;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1170 */
  uint8_t RESERVED_202[12];
  uint32_t HDCP_KEY36;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1180 */
  uint8_t RESERVED_203[12];
  uint32_t HDCP_KEY37;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1190 */
  uint8_t RESERVED_204[12];
  uint32_t HDCP_KEY38;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11A0 */
  uint8_t RESERVED_205[12];
  uint32_t HDCP_KEY39;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11B0 */
  uint8_t RESERVED_206[12];
  uint32_t HDCP_KEY40;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x11C0 */
  uint8_t RESERVED_207[12];
  uint32_t HDCP_KEY41;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x11D0 */
  uint8_t RESERVED_208[12];
  uint32_t HDCP_KEY42;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11E0 */
  uint8_t RESERVED_209[12];
  uint32_t HDCP_KEY43;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x11F0 */
  uint8_t RESERVED_210[12];
  uint32_t HDCP_KEY44;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1200 */
  uint8_t RESERVED_211[12];
  uint32_t HDCP_KEY45;                             /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1210 */
  uint8_t RESERVED_212[12];
  uint32_t HDCP_KEY46;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1220 */
  uint8_t RESERVED_213[12];
  uint32_t HDCP_KEY47;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1230 */
  uint8_t RESERVED_214[12];
  uint32_t HDCP_KEY48;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1240 */
  uint8_t RESERVED_215[12];
  uint32_t HDCP_KEY49;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1250 */
  uint8_t RESERVED_216[12];
  uint32_t HDCP_KEY50;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1260 */
  uint8_t RESERVED_217[12];
  uint32_t HDCP_KEY51;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1270 */
  uint8_t RESERVED_218[12];
  uint32_t HDCP_KEY52;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1280 */
  uint8_t RESERVED_219[12];
  uint32_t HDCP_KEY53;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1290 */
  uint8_t RESERVED_220[12];
  uint32_t HDCP_KEY54;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12A0 */
  uint8_t RESERVED_221[12];
  uint32_t HDCP_KEY55;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12B0 */
  uint8_t RESERVED_222[12];
  uint32_t HDCP_KEY56;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x12C0 */
  uint8_t RESERVED_223[12];
  uint32_t HDCP_KEY57;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x12D0 */
  uint8_t RESERVED_224[12];
  uint32_t HDCP_KEY58;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12E0 */
  uint8_t RESERVED_225[12];
  uint32_t HDCP_KEY59;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x12F0 */
  uint8_t RESERVED_226[12];
  uint32_t HDCP_KEY60;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1300 */
  uint8_t RESERVED_227[12];
  uint32_t HDCP_KEY61;                             /**< Value of OTP Bank16 Word1 (HDCP Key), offset: 0x1310 */
  uint8_t RESERVED_228[12];
  uint32_t HDCP_KEY62;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1320 */
  uint8_t RESERVED_229[12];
  uint32_t HDCP_KEY63;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1330 */
  uint8_t RESERVED_230[12];
  uint32_t HDCP_KEY64;                             /**< Value of OTP Bank17 Word0 (HDCP Key), offset: 0x1340 */
  uint8_t RESERVED_231[12];
  uint32_t HDCP_KEY65;                             /**< Value of OTP Bank17 Word1 (HDCP Key), offset: 0x1350 */
  uint8_t RESERVED_232[12];
  uint32_t HDCP_KEY66;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1360 */
  uint8_t RESERVED_233[12];
  uint32_t HDCP_KEY67;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1370 */
  uint8_t RESERVED_234[12];
  uint32_t HDCP_KEY68;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1380 */
  uint8_t RESERVED_235[12];
  uint32_t HDCP_KEY69;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x1390 */
  uint8_t RESERVED_236[12];
  uint32_t HDCP_KEY70;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x13A0 */
  uint8_t RESERVED_237[12];
  uint32_t HDCP_KEY71;                             /**< Value of OTP Bank16 Word0 (HDCP Key), offset: 0x13B0 */
} volatile *OCOTP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register accessors */
#define OCOTP_CTRL_REG(base)                     ((base)->CTRL)
#define OCOTP_CTRL_SET_REG(base)                 ((base)->CTRL_SET)
#define OCOTP_CTRL_CLR_REG(base)                 ((base)->CTRL_CLR)
#define OCOTP_CTRL_TOG_REG(base)                 ((base)->CTRL_TOG)
#define OCOTP_TIMING_REG(base)                   ((base)->TIMING)
#define OCOTP_DATA_REG(base)                     ((base)->DATA)
#define OCOTP_READ_CTRL_REG(base)                ((base)->READ_CTRL)
#define OCOTP_READ_FUSE_DATA_REG(base)           ((base)->READ_FUSE_DATA)
#define OCOTP_SW_STICKY_REG(base)                ((base)->SW_STICKY)
#define OCOTP_SCS_REG(base)                      ((base)->SCS)
#define OCOTP_SCS_SET_REG(base)                  ((base)->SCS_SET)
#define OCOTP_SCS_CLR_REG(base)                  ((base)->SCS_CLR)
#define OCOTP_SCS_TOG_REG(base)                  ((base)->SCS_TOG)
#define OCOTP_VERSION_REG(base)                  ((base)->VERSION)
#define OCOTP_LOCK_REG(base)                     ((base)->LOCK)
#define OCOTP_TESTER0_REG(base)                  ((base)->TESTER0)
#define OCOTP_TESTER1_REG(base)                  ((base)->TESTER1)
#define OCOTP_TESTER2_REG(base)                  ((base)->TESTER2)
#define OCOTP_TESTER3_REG(base)                  ((base)->TESTER3)
#define OCOTP_TESTER4_REG(base)                  ((base)->TESTER4)
#define OCOTP_TESTER5_REG(base)                  ((base)->TESTER5)
#define OCOTP_BOOT_CFG0_REG(base)                ((base)->BOOT_CFG0)
#define OCOTP_BOOT_CFG1_REG(base)                ((base)->BOOT_CFG1)
#define OCOTP_BOOT_CFG2_REG(base)                ((base)->BOOT_CFG2)
#define OCOTP_BOOT_CFG3_REG(base)                ((base)->BOOT_CFG3)
#define OCOTP_BOOT_CFG4_REG(base)                ((base)->BOOT_CFG4)
#define OCOTP_MEM_TRIM0_REG(base)                ((base)->MEM_TRIM0)
#define OCOTP_MEM_TRIM1_REG(base)                ((base)->MEM_TRIM1)
#define OCOTP_ANA0_REG(base)                     ((base)->ANA0)
#define OCOTP_ANA1_REG(base)                     ((base)->ANA1)
#define OCOTP_SRK0_REG(base)                     ((base)->SRK0)
#define OCOTP_SRK1_REG(base)                     ((base)->SRK1)
#define OCOTP_SRK2_REG(base)                     ((base)->SRK2)
#define OCOTP_SRK3_REG(base)                     ((base)->SRK3)
#define OCOTP_SRK4_REG(base)                     ((base)->SRK4)
#define OCOTP_SRK5_REG(base)                     ((base)->SRK5)
#define OCOTP_SRK6_REG(base)                     ((base)->SRK6)
#define OCOTP_SRK7_REG(base)                     ((base)->SRK7)
#define OCOTP_SJC_RESP0_REG(base)                ((base)->SJC_RESP0)
#define OCOTP_SJC_RESP1_REG(base)                ((base)->SJC_RESP1)
#define OCOTP_USB_ID_REG(base)                   ((base)->USB_ID)
#define OCOTP_FIELD_RETURN_REG(base)             ((base)->FIELD_RETURN)
#define OCOTP_MAC_ADDR0_REG(base)                ((base)->MAC_ADDR0)
#define OCOTP_MAC_ADDR1_REG(base)                ((base)->MAC_ADDR1)
#define OCOTP_MAC_ADDR2_REG(base)                ((base)->MAC_ADDR2)
#define OCOTP_SRK_REVOKE_REG(base)               ((base)->SRK_REVOKE)
#define OCOTP_MAU_KEY0_REG(base)                 ((base)->MAU_KEY0)
#define OCOTP_MAU_KEY1_REG(base)                 ((base)->MAU_KEY1)
#define OCOTP_MAU_KEY2_REG(base)                 ((base)->MAU_KEY2)
#define OCOTP_MAU_KEY3_REG(base)                 ((base)->MAU_KEY3)
#define OCOTP_MAU_KEY4_REG(base)                 ((base)->MAU_KEY4)
#define OCOTP_MAU_KEY5_REG(base)                 ((base)->MAU_KEY5)
#define OCOTP_MAU_KEY6_REG(base)                 ((base)->MAU_KEY6)
#define OCOTP_MAU_KEY7_REG(base)                 ((base)->MAU_KEY7)
#define OCOTP_GP10_REG(base)                     ((base)->GP10)
#define OCOTP_GP11_REG(base)                     ((base)->GP11)
#define OCOTP_GP20_REG(base)                     ((base)->GP20)
#define OCOTP_GP21_REG(base)                     ((base)->GP21)
#define OCOTP_GP_CRC0_REG(base)                  ((base)->GP_CRC0)
#define OCOTP_GP_CRC1_REG(base)                  ((base)->GP_CRC1)
#define OCOTP_GP_CRC2_REG(base)                  ((base)->GP_CRC2)
#define OCOTP_GROUP_MASK_REG(base)               ((base)->GROUP_MASK)
#define OCOTP_HDMI_FW_SRK0_REG(base)             ((base)->HDMI_FW_SRK0)
#define OCOTP_HDMI_FW_SRK1_REG(base)             ((base)->HDMI_FW_SRK1)
#define OCOTP_HDMI_FW_SRK2_REG(base)             ((base)->HDMI_FW_SRK2)
#define OCOTP_HDMI_FW_SRK3_REG(base)             ((base)->HDMI_FW_SRK3)
#define OCOTP_HDMI_FW_SRK4_REG(base)             ((base)->HDMI_FW_SRK4)
#define OCOTP_HDMI_FW_SRK5_REG(base)             ((base)->HDMI_FW_SRK5)
#define OCOTP_HDMI_FW_SRK6_REG(base)             ((base)->HDMI_FW_SRK6)
#define OCOTP_HDMI_FW_SRK7_REG(base)             ((base)->HDMI_FW_SRK7)
#define OCOTP_HDMI_KMEK0_REG(base)               ((base)->HDMI_KMEK0)
#define OCOTP_HDMI_KMEK1_REG(base)               ((base)->HDMI_KMEK1)
#define OCOTP_HDMI_KMEK2_REG(base)               ((base)->HDMI_KMEK2)
#define OCOTP_HDMI_KMEK3_REG(base)               ((base)->HDMI_KMEK3)
#define OCOTP_HDCP_TX_CONS0_REG(base)            ((base)->HDCP_TX_CONS0)
#define OCOTP_HDCP_TX_CONS1_REG(base)            ((base)->HDCP_TX_CONS1)
#define OCOTP_HDCP_TX_CONS2_REG(base)            ((base)->HDCP_TX_CONS2)
#define OCOTP_HDCP_TX_CONS3_REG(base)            ((base)->HDCP_TX_CONS3)
#define OCOTP_HDCP_TX_CERT0_REG(base)            ((base)->HDCP_TX_CERT0)
#define OCOTP_HDCP_TX_CERT1_REG(base)            ((base)->HDCP_TX_CERT1)
#define OCOTP_HDCP_TX_CERT2_REG(base)            ((base)->HDCP_TX_CERT2)
#define OCOTP_HDCP_TX_CERT3_REG(base)            ((base)->HDCP_TX_CERT3)
#define OCOTP_HDCP_TX_CERT4_REG(base)            ((base)->HDCP_TX_CERT4)
#define OCOTP_HDCP_TX_CERT5_REG(base)            ((base)->HDCP_TX_CERT5)
#define OCOTP_HDCP_TX_CERT6_REG(base)            ((base)->HDCP_TX_CERT6)
#define OCOTP_HDCP_TX_CERT7_REG(base)            ((base)->HDCP_TX_CERT7)
#define OCOTP_HDCP_TX_CERT8_REG(base)            ((base)->HDCP_TX_CERT8)
#define OCOTP_HDCP_TX_CERT9_REG(base)            ((base)->HDCP_TX_CERT9)
#define OCOTP_HDCP_TX_CERT10_REG(base)           ((base)->HDCP_TX_CERT10)
#define OCOTP_HDCP_TX_CERT11_REG(base)           ((base)->HDCP_TX_CERT11)
#define OCOTP_HDCP_TX_CERT12_REG(base)           ((base)->HDCP_TX_CERT12)
#define OCOTP_HDCP_TX_CERT13_REG(base)           ((base)->HDCP_TX_CERT13)
#define OCOTP_HDCP_TX_CERT14_REG(base)           ((base)->HDCP_TX_CERT14)
#define OCOTP_HDCP_TX_CERT15_REG(base)           ((base)->HDCP_TX_CERT15)
#define OCOTP_HDCP_TX_CERT16_REG(base)           ((base)->HDCP_TX_CERT16)
#define OCOTP_HDCP_TX_CERT17_REG(base)           ((base)->HDCP_TX_CERT17)
#define OCOTP_HDCP_TX_CERT18_REG(base)           ((base)->HDCP_TX_CERT18)
#define OCOTP_HDCP_TX_CERT19_REG(base)           ((base)->HDCP_TX_CERT19)
#define OCOTP_HDCP_TX_CERT20_REG(base)           ((base)->HDCP_TX_CERT20)
#define OCOTP_HDCP_TX_CERT21_REG(base)           ((base)->HDCP_TX_CERT21)
#define OCOTP_HDCP_TX_CERT22_REG(base)           ((base)->HDCP_TX_CERT22)
#define OCOTP_HDCP_TX_CERT23_REG(base)           ((base)->HDCP_TX_CERT23)
#define OCOTP_HDCP_TX_CERT24_REG(base)           ((base)->HDCP_TX_CERT24)
#define OCOTP_HDCP_TX_CERT25_REG(base)           ((base)->HDCP_TX_CERT25)
#define OCOTP_HDCP_TX_CERT26_REG(base)           ((base)->HDCP_TX_CERT26)
#define OCOTP_HDCP_TX_CERT27_REG(base)           ((base)->HDCP_TX_CERT27)
#define OCOTP_HDCP_TX_CERT28_REG(base)           ((base)->HDCP_TX_CERT28)
#define OCOTP_HDCP_TX_CERT29_REG(base)           ((base)->HDCP_TX_CERT29)
#define OCOTP_HDCP_TX_CERT30_REG(base)           ((base)->HDCP_TX_CERT30)
#define OCOTP_HDCP_TX_CERT31_REG(base)           ((base)->HDCP_TX_CERT31)
#define OCOTP_HDCP_TX_CERT32_REG(base)           ((base)->HDCP_TX_CERT32)
#define OCOTP_HDCP_TX_CERT33_REG(base)           ((base)->HDCP_TX_CERT33)
#define OCOTP_HDCP_TX_CERT34_REG(base)           ((base)->HDCP_TX_CERT34)
#define OCOTP_HDCP_TX_CERT35_REG(base)           ((base)->HDCP_TX_CERT35)
#define OCOTP_HDCP_TX_CERT36_REG(base)           ((base)->HDCP_TX_CERT36)
#define OCOTP_HDCP_TX_CERT37_REG(base)           ((base)->HDCP_TX_CERT37)
#define OCOTP_HDCP_TX_CERT38_REG(base)           ((base)->HDCP_TX_CERT38)
#define OCOTP_HDCP_TX_CERT39_REG(base)           ((base)->HDCP_TX_CERT39)
#define OCOTP_HDCP_TX_CERT40_REG(base)           ((base)->HDCP_TX_CERT40)
#define OCOTP_HDCP_TX_CERT41_REG(base)           ((base)->HDCP_TX_CERT41)
#define OCOTP_HDCP_TX_CERT42_REG(base)           ((base)->HDCP_TX_CERT42)
#define OCOTP_HDCP_TX_CERT43_REG(base)           ((base)->HDCP_TX_CERT43)
#define OCOTP_HDCP_TX_CERT44_REG(base)           ((base)->HDCP_TX_CERT44)
#define OCOTP_HDCP_TX_CERT45_REG(base)           ((base)->HDCP_TX_CERT45)
#define OCOTP_HDCP_TX_CERT46_REG(base)           ((base)->HDCP_TX_CERT46)
#define OCOTP_HDCP_TX_CERT47_REG(base)           ((base)->HDCP_TX_CERT47)
#define OCOTP_HDCP_TX_CERT48_REG(base)           ((base)->HDCP_TX_CERT48)
#define OCOTP_HDCP_TX_CERT49_REG(base)           ((base)->HDCP_TX_CERT49)
#define OCOTP_HDCP_TX_CERT50_REG(base)           ((base)->HDCP_TX_CERT50)
#define OCOTP_HDCP_TX_CERT51_REG(base)           ((base)->HDCP_TX_CERT51)
#define OCOTP_HDCP_TX_CERT52_REG(base)           ((base)->HDCP_TX_CERT52)
#define OCOTP_HDCP_TX_CERT53_REG(base)           ((base)->HDCP_TX_CERT53)
#define OCOTP_HDCP_TX_CERT54_REG(base)           ((base)->HDCP_TX_CERT54)
#define OCOTP_HDCP_TX_CERT55_REG(base)           ((base)->HDCP_TX_CERT55)
#define OCOTP_HDCP_TX_CERT56_REG(base)           ((base)->HDCP_TX_CERT56)
#define OCOTP_HDCP_TX_CERT57_REG(base)           ((base)->HDCP_TX_CERT57)
#define OCOTP_HDCP_TX_CERT58_REG(base)           ((base)->HDCP_TX_CERT58)
#define OCOTP_HDCP_TX_CERT59_REG(base)           ((base)->HDCP_TX_CERT59)
#define OCOTP_HDCP_TX_CERT60_REG(base)           ((base)->HDCP_TX_CERT60)
#define OCOTP_HDCP_TX_CERT61_REG(base)           ((base)->HDCP_TX_CERT61)
#define OCOTP_HDCP_TX_CERT62_REG(base)           ((base)->HDCP_TX_CERT62)
#define OCOTP_HDCP_TX_CERT63_REG(base)           ((base)->HDCP_TX_CERT63)
#define OCOTP_HDCP_TX_CERT64_REG(base)           ((base)->HDCP_TX_CERT64)
#define OCOTP_HDCP_TX_CERT65_REG(base)           ((base)->HDCP_TX_CERT65)
#define OCOTP_HDCP_TX_CERT66_REG(base)           ((base)->HDCP_TX_CERT66)
#define OCOTP_HDCP_TX_CERT67_REG(base)           ((base)->HDCP_TX_CERT67)
#define OCOTP_HDCP_TX_CERT68_REG(base)           ((base)->HDCP_TX_CERT68)
#define OCOTP_HDCP_TX_CERT69_REG(base)           ((base)->HDCP_TX_CERT69)
#define OCOTP_HDCP_TX_CERT70_REG(base)           ((base)->HDCP_TX_CERT70)
#define OCOTP_HDCP_TX_CERT71_REG(base)           ((base)->HDCP_TX_CERT71)
#define OCOTP_HDCP_TX_CERT72_REG(base)           ((base)->HDCP_TX_CERT72)
#define OCOTP_HDCP_TX_CERT73_REG(base)           ((base)->HDCP_TX_CERT73)
#define OCOTP_HDCP_TX_CERT74_REG(base)           ((base)->HDCP_TX_CERT74)
#define OCOTP_HDCP_TX_CERT75_REG(base)           ((base)->HDCP_TX_CERT75)
#define OCOTP_HDCP_TX_CERT76_REG(base)           ((base)->HDCP_TX_CERT76)
#define OCOTP_HDCP_TX_CERT77_REG(base)           ((base)->HDCP_TX_CERT77)
#define OCOTP_HDCP_TX_CERT78_REG(base)           ((base)->HDCP_TX_CERT78)
#define OCOTP_HDCP_TX_CERT79_REG(base)           ((base)->HDCP_TX_CERT79)
#define OCOTP_HDCP_TX_CERT80_REG(base)           ((base)->HDCP_TX_CERT80)
#define OCOTP_HDCP_TX_CERT81_REG(base)           ((base)->HDCP_TX_CERT81)
#define OCOTP_HDCP_TX_CERT82_REG(base)           ((base)->HDCP_TX_CERT82)
#define OCOTP_HDCP_TX_CERT83_REG(base)           ((base)->HDCP_TX_CERT83)
#define OCOTP_HDCP_TX_CERT84_REG(base)           ((base)->HDCP_TX_CERT84)
#define OCOTP_HDCP_TX_CERT85_REG(base)           ((base)->HDCP_TX_CERT85)
#define OCOTP_HDCP_TX_CERT86_REG(base)           ((base)->HDCP_TX_CERT86)
#define OCOTP_HDCP_TX_CERT87_REG(base)           ((base)->HDCP_TX_CERT87)
#define OCOTP_HDCP_TX_CERT88_REG(base)           ((base)->HDCP_TX_CERT88)
#define OCOTP_HDCP_TX_CERT89_REG(base)           ((base)->HDCP_TX_CERT89)
#define OCOTP_HDCP_TX_CERT90_REG(base)           ((base)->HDCP_TX_CERT90)
#define OCOTP_HDCP_TX_CERT91_REG(base)           ((base)->HDCP_TX_CERT91)
#define OCOTP_HDCP_TX_CERT92_REG(base)           ((base)->HDCP_TX_CERT92)
#define OCOTP_HDCP_TX_CERT93_REG(base)           ((base)->HDCP_TX_CERT93)
#define OCOTP_HDCP_TX_CERT94_REG(base)           ((base)->HDCP_TX_CERT94)
#define OCOTP_HDCP_TX_CERT95_REG(base)           ((base)->HDCP_TX_CERT95)
#define OCOTP_HDCP_KEY0_REG(base)                ((base)->HDCP_KEY0)
#define OCOTP_HDCP_KEY1_REG(base)                ((base)->HDCP_KEY1)
#define OCOTP_HDCP_KEY2_REG(base)                ((base)->HDCP_KEY2)
#define OCOTP_HDCP_KEY3_REG(base)                ((base)->HDCP_KEY3)
#define OCOTP_HDCP_KEY4_REG(base)                ((base)->HDCP_KEY4)
#define OCOTP_HDCP_KEY5_REG(base)                ((base)->HDCP_KEY5)
#define OCOTP_HDCP_KEY6_REG(base)                ((base)->HDCP_KEY6)
#define OCOTP_HDCP_KEY7_REG(base)                ((base)->HDCP_KEY7)
#define OCOTP_HDCP_KEY8_REG(base)                ((base)->HDCP_KEY8)
#define OCOTP_HDCP_KEY9_REG(base)                ((base)->HDCP_KEY9)
#define OCOTP_HDCP_KEY10_REG(base)               ((base)->HDCP_KEY10)
#define OCOTP_HDCP_KEY11_REG(base)               ((base)->HDCP_KEY11)
#define OCOTP_HDCP_KEY12_REG(base)               ((base)->HDCP_KEY12)
#define OCOTP_HDCP_KEY13_REG(base)               ((base)->HDCP_KEY13)
#define OCOTP_HDCP_KEY14_REG(base)               ((base)->HDCP_KEY14)
#define OCOTP_HDCP_KEY15_REG(base)               ((base)->HDCP_KEY15)
#define OCOTP_HDCP_KEY16_REG(base)               ((base)->HDCP_KEY16)
#define OCOTP_HDCP_KEY17_REG(base)               ((base)->HDCP_KEY17)
#define OCOTP_HDCP_KEY18_REG(base)               ((base)->HDCP_KEY18)
#define OCOTP_HDCP_KEY19_REG(base)               ((base)->HDCP_KEY19)
#define OCOTP_HDCP_KEY20_REG(base)               ((base)->HDCP_KEY20)
#define OCOTP_HDCP_KEY21_REG(base)               ((base)->HDCP_KEY21)
#define OCOTP_HDCP_KEY22_REG(base)               ((base)->HDCP_KEY22)
#define OCOTP_HDCP_KEY23_REG(base)               ((base)->HDCP_KEY23)
#define OCOTP_HDCP_KEY24_REG(base)               ((base)->HDCP_KEY24)
#define OCOTP_HDCP_KEY25_REG(base)               ((base)->HDCP_KEY25)
#define OCOTP_HDCP_KEY26_REG(base)               ((base)->HDCP_KEY26)
#define OCOTP_HDCP_KEY27_REG(base)               ((base)->HDCP_KEY27)
#define OCOTP_HDCP_KEY28_REG(base)               ((base)->HDCP_KEY28)
#define OCOTP_HDCP_KEY29_REG(base)               ((base)->HDCP_KEY29)
#define OCOTP_HDCP_KEY30_REG(base)               ((base)->HDCP_KEY30)
#define OCOTP_HDCP_KEY31_REG(base)               ((base)->HDCP_KEY31)
#define OCOTP_HDCP_KEY32_REG(base)               ((base)->HDCP_KEY32)
#define OCOTP_HDCP_KEY33_REG(base)               ((base)->HDCP_KEY33)
#define OCOTP_HDCP_KEY34_REG(base)               ((base)->HDCP_KEY34)
#define OCOTP_HDCP_KEY35_REG(base)               ((base)->HDCP_KEY35)
#define OCOTP_HDCP_KEY36_REG(base)               ((base)->HDCP_KEY36)
#define OCOTP_HDCP_KEY37_REG(base)               ((base)->HDCP_KEY37)
#define OCOTP_HDCP_KEY38_REG(base)               ((base)->HDCP_KEY38)
#define OCOTP_HDCP_KEY39_REG(base)               ((base)->HDCP_KEY39)
#define OCOTP_HDCP_KEY40_REG(base)               ((base)->HDCP_KEY40)
#define OCOTP_HDCP_KEY41_REG(base)               ((base)->HDCP_KEY41)
#define OCOTP_HDCP_KEY42_REG(base)               ((base)->HDCP_KEY42)
#define OCOTP_HDCP_KEY43_REG(base)               ((base)->HDCP_KEY43)
#define OCOTP_HDCP_KEY44_REG(base)               ((base)->HDCP_KEY44)
#define OCOTP_HDCP_KEY45_REG(base)               ((base)->HDCP_KEY45)
#define OCOTP_HDCP_KEY46_REG(base)               ((base)->HDCP_KEY46)
#define OCOTP_HDCP_KEY47_REG(base)               ((base)->HDCP_KEY47)
#define OCOTP_HDCP_KEY48_REG(base)               ((base)->HDCP_KEY48)
#define OCOTP_HDCP_KEY49_REG(base)               ((base)->HDCP_KEY49)
#define OCOTP_HDCP_KEY50_REG(base)               ((base)->HDCP_KEY50)
#define OCOTP_HDCP_KEY51_REG(base)               ((base)->HDCP_KEY51)
#define OCOTP_HDCP_KEY52_REG(base)               ((base)->HDCP_KEY52)
#define OCOTP_HDCP_KEY53_REG(base)               ((base)->HDCP_KEY53)
#define OCOTP_HDCP_KEY54_REG(base)               ((base)->HDCP_KEY54)
#define OCOTP_HDCP_KEY55_REG(base)               ((base)->HDCP_KEY55)
#define OCOTP_HDCP_KEY56_REG(base)               ((base)->HDCP_KEY56)
#define OCOTP_HDCP_KEY57_REG(base)               ((base)->HDCP_KEY57)
#define OCOTP_HDCP_KEY58_REG(base)               ((base)->HDCP_KEY58)
#define OCOTP_HDCP_KEY59_REG(base)               ((base)->HDCP_KEY59)
#define OCOTP_HDCP_KEY60_REG(base)               ((base)->HDCP_KEY60)
#define OCOTP_HDCP_KEY61_REG(base)               ((base)->HDCP_KEY61)
#define OCOTP_HDCP_KEY62_REG(base)               ((base)->HDCP_KEY62)
#define OCOTP_HDCP_KEY63_REG(base)               ((base)->HDCP_KEY63)
#define OCOTP_HDCP_KEY64_REG(base)               ((base)->HDCP_KEY64)
#define OCOTP_HDCP_KEY65_REG(base)               ((base)->HDCP_KEY65)
#define OCOTP_HDCP_KEY66_REG(base)               ((base)->HDCP_KEY66)
#define OCOTP_HDCP_KEY67_REG(base)               ((base)->HDCP_KEY67)
#define OCOTP_HDCP_KEY68_REG(base)               ((base)->HDCP_KEY68)
#define OCOTP_HDCP_KEY69_REG(base)               ((base)->HDCP_KEY69)
#define OCOTP_HDCP_KEY70_REG(base)               ((base)->HDCP_KEY70)
#define OCOTP_HDCP_KEY71_REG(base)               ((base)->HDCP_KEY71)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OCOTP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Masks OCOTP Register Masks
 * @{
 */

/*! @name CTRL - OTP Controller Control Register */
/*! @{ */
#define OCOTP_CTRL_ADDR_MASK                     (0xFFU)
#define OCOTP_CTRL_ADDR_SHIFT                    (0U)
#define OCOTP_CTRL_ADDR(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_ADDR_SHIFT)) & OCOTP_CTRL_ADDR_MASK)
#define OCOTP_CTRL_BUSY_MASK                     (0x100U)
#define OCOTP_CTRL_BUSY_SHIFT                    (8U)
#define OCOTP_CTRL_ERROR_MASK                    (0x200U)
#define OCOTP_CTRL_ERROR_SHIFT                   (9U)
#define OCOTP_CTRL_RELOAD_SHADOWS_MASK           (0x400U)
#define OCOTP_CTRL_RELOAD_SHADOWS_SHIFT          (10U)
#define OCOTP_CTRL_WR_UNLOCK_MASK                (0xFFFF0000U)
#define OCOTP_CTRL_WR_UNLOCK_SHIFT               (16U)
#define OCOTP_CTRL_WR_UNLOCK(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_WR_UNLOCK_MASK)
/*! @} */

/*! @name CTRL_SET - OTP Controller Control Register */
/*! @{ */
#define OCOTP_CTRL_SET_ADDR_MASK                 (0xFFU)
#define OCOTP_CTRL_SET_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_SET_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_SET_ADDR_SHIFT)) & OCOTP_CTRL_SET_ADDR_MASK)
#define OCOTP_CTRL_SET_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_SET_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_SET_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_SET_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_SET_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_SET_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_SET_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_SET_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_SET_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_SET_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_SET_WR_UNLOCK_MASK)
/*! @} */

/*! @name CTRL_CLR - OTP Controller Control Register */
/*! @{ */
#define OCOTP_CTRL_CLR_ADDR_MASK                 (0xFFU)
#define OCOTP_CTRL_CLR_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_CLR_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_CLR_ADDR_SHIFT)) & OCOTP_CTRL_CLR_ADDR_MASK)
#define OCOTP_CTRL_CLR_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_CLR_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_CLR_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_CLR_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_CLR_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_CLR_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_CLR_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_CLR_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_CLR_WR_UNLOCK_MASK)
/*! @} */

/*! @name CTRL_TOG - OTP Controller Control Register */
/*! @{ */
#define OCOTP_CTRL_TOG_ADDR_MASK                 (0xFFU)
#define OCOTP_CTRL_TOG_ADDR_SHIFT                (0U)
#define OCOTP_CTRL_TOG_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_TOG_ADDR_SHIFT)) & OCOTP_CTRL_TOG_ADDR_MASK)
#define OCOTP_CTRL_TOG_BUSY_MASK                 (0x100U)
#define OCOTP_CTRL_TOG_BUSY_SHIFT                (8U)
#define OCOTP_CTRL_TOG_ERROR_MASK                (0x200U)
#define OCOTP_CTRL_TOG_ERROR_SHIFT               (9U)
#define OCOTP_CTRL_TOG_RELOAD_SHADOWS_MASK       (0x400U)
#define OCOTP_CTRL_TOG_RELOAD_SHADOWS_SHIFT      (10U)
#define OCOTP_CTRL_TOG_WR_UNLOCK_MASK            (0xFFFF0000U)
#define OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT           (16U)
#define OCOTP_CTRL_TOG_WR_UNLOCK(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT)) & OCOTP_CTRL_TOG_WR_UNLOCK_MASK)
/*! @} */

/*! @name TIMING - OTP Controller Timing Register */
/*! @{ */
#define OCOTP_TIMING_STROBE_PROG_MASK            (0xFFFU)
#define OCOTP_TIMING_STROBE_PROG_SHIFT           (0U)
#define OCOTP_TIMING_STROBE_PROG(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_STROBE_PROG_SHIFT)) & OCOTP_TIMING_STROBE_PROG_MASK)
#define OCOTP_TIMING_RELAX_MASK                  (0xF000U)
#define OCOTP_TIMING_RELAX_SHIFT                 (12U)
#define OCOTP_TIMING_RELAX(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_RELAX_SHIFT)) & OCOTP_TIMING_RELAX_MASK)
#define OCOTP_TIMING_STROBE_READ_MASK            (0x3F0000U)
#define OCOTP_TIMING_STROBE_READ_SHIFT           (16U)
#define OCOTP_TIMING_STROBE_READ(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_STROBE_READ_SHIFT)) & OCOTP_TIMING_STROBE_READ_MASK)
#define OCOTP_TIMING_WAIT_MASK                   (0xFC00000U)
#define OCOTP_TIMING_WAIT_SHIFT                  (22U)
#define OCOTP_TIMING_WAIT(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_WAIT_SHIFT)) & OCOTP_TIMING_WAIT_MASK)
#define OCOTP_TIMING_RSRVD0_MASK                 (0xF0000000U)
#define OCOTP_TIMING_RSRVD0_SHIFT                (28U)
#define OCOTP_TIMING_RSRVD0(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_TIMING_RSRVD0_SHIFT)) & OCOTP_TIMING_RSRVD0_MASK)
/*! @} */

/*! @name DATA - OTP Controller Write Data Register */
/*! @{ */
#define OCOTP_DATA_DATA_MASK                     (0xFFFFFFFFU)
#define OCOTP_DATA_DATA_SHIFT                    (0U)
#define OCOTP_DATA_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_DATA_DATA_SHIFT)) & OCOTP_DATA_DATA_MASK)
/*! @} */

/*! @name READ_CTRL - OTP Controller Write Data Register */
/*! @{ */
#define OCOTP_READ_CTRL_READ_FUSE_MASK           (0x1U)
#define OCOTP_READ_CTRL_READ_FUSE_SHIFT          (0U)
#define OCOTP_READ_CTRL_RSVD0_MASK               (0xFFFFFFFEU)
#define OCOTP_READ_CTRL_RSVD0_SHIFT              (1U)
#define OCOTP_READ_CTRL_RSVD0(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_READ_CTRL_RSVD0_SHIFT)) & OCOTP_READ_CTRL_RSVD0_MASK)
/*! @} */

/*! @name READ_FUSE_DATA - OTP Controller Read Data Register */
/*! @{ */
#define OCOTP_READ_FUSE_DATA_DATA_MASK           (0xFFFFFFFFU)
#define OCOTP_READ_FUSE_DATA_DATA_SHIFT          (0U)
#define OCOTP_READ_FUSE_DATA_DATA(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_READ_FUSE_DATA_DATA_SHIFT)) & OCOTP_READ_FUSE_DATA_DATA_MASK)
/*! @} */

/*! @name SW_STICKY - Sticky bit Register */
/*! @{ */
#define OCOTP_SW_STICKY_RSVD0_MASK               (0x1U)
#define OCOTP_SW_STICKY_RSVD0_SHIFT              (0U)
#define OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK     (0x2U)
#define OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT    (1U)
#define OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK   (0x4U)
#define OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT  (2U)
#define OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK      (0x8U)
#define OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT     (3U)
#define OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK  (0x10U)
#define OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT (4U)
#define OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_MASK (0x20U)
#define OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_SHIFT (5U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_MASK (0x40U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_SHIFT (6U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_MASK (0x80U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_SHIFT (7U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_MASK (0x100U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_SHIFT (8U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_MASK (0x200U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_SHIFT (9U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_MASK (0x400U)
#define OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_SHIFT (10U)
#define OCOTP_SW_STICKY_RSVD1_MASK               (0xFFFFF800U)
#define OCOTP_SW_STICKY_RSVD1_SHIFT              (11U)
#define OCOTP_SW_STICKY_RSVD1(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_SW_STICKY_RSVD1_SHIFT)) & OCOTP_SW_STICKY_RSVD1_MASK)
/*! @} */

/*! @name SCS - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_SCS_HAB_JDE_MASK                   (0x1U)
#define OCOTP_SCS_HAB_JDE_SHIFT                  (0U)
#define OCOTP_SCS_SPARE_MASK                     (0x7FFFFFFEU)
#define OCOTP_SCS_SPARE_SHIFT                    (1U)
#define OCOTP_SCS_SPARE(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_SPARE_SHIFT)) & OCOTP_SCS_SPARE_MASK)
#define OCOTP_SCS_LOCK_MASK                      (0x80000000U)
#define OCOTP_SCS_LOCK_SHIFT                     (31U)
/*! @} */

/*! @name SCS_SET - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_SCS_SET_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_SET_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_SET_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_SET_SPARE_SHIFT                (1U)
#define OCOTP_SCS_SET_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_SET_SPARE_SHIFT)) & OCOTP_SCS_SET_SPARE_MASK)
#define OCOTP_SCS_SET_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_SET_LOCK_SHIFT                 (31U)
/*! @} */

/*! @name SCS_CLR - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_SCS_CLR_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_CLR_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_CLR_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_CLR_SPARE_SHIFT                (1U)
#define OCOTP_SCS_CLR_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_CLR_SPARE_SHIFT)) & OCOTP_SCS_CLR_SPARE_MASK)
#define OCOTP_SCS_CLR_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_CLR_LOCK_SHIFT                 (31U)
/*! @} */

/*! @name SCS_TOG - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_SCS_TOG_HAB_JDE_MASK               (0x1U)
#define OCOTP_SCS_TOG_HAB_JDE_SHIFT              (0U)
#define OCOTP_SCS_TOG_SPARE_MASK                 (0x7FFFFFFEU)
#define OCOTP_SCS_TOG_SPARE_SHIFT                (1U)
#define OCOTP_SCS_TOG_SPARE(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_SCS_TOG_SPARE_SHIFT)) & OCOTP_SCS_TOG_SPARE_MASK)
#define OCOTP_SCS_TOG_LOCK_MASK                  (0x80000000U)
#define OCOTP_SCS_TOG_LOCK_SHIFT                 (31U)
/*! @} */

/*! @name VERSION - OTP Controller Version Register */
/*! @{ */
#define OCOTP_VERSION_STEP_MASK                  (0xFFFFU)
#define OCOTP_VERSION_STEP_SHIFT                 (0U)
#define OCOTP_VERSION_STEP(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_STEP_SHIFT)) & OCOTP_VERSION_STEP_MASK)
#define OCOTP_VERSION_MINOR_MASK                 (0xFF0000U)
#define OCOTP_VERSION_MINOR_SHIFT                (16U)
#define OCOTP_VERSION_MINOR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_MINOR_SHIFT)) & OCOTP_VERSION_MINOR_MASK)
#define OCOTP_VERSION_MAJOR_MASK                 (0xFF000000U)
#define OCOTP_VERSION_MAJOR_SHIFT                (24U)
#define OCOTP_VERSION_MAJOR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_VERSION_MAJOR_SHIFT)) & OCOTP_VERSION_MAJOR_MASK)
/*! @} */

/*! @name LOCK - Value of OTP Bank0 Word0 (Lock controls) */
/*! @{ */
#define OCOTP_LOCK_TESTER_MASK                   (0x3U)
#define OCOTP_LOCK_TESTER_SHIFT                  (0U)
#define OCOTP_LOCK_TESTER(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_TESTER_SHIFT)) & OCOTP_LOCK_TESTER_MASK)
#define OCOTP_LOCK_BOOT_CFG_MASK                 (0xCU)
#define OCOTP_LOCK_BOOT_CFG_SHIFT                (2U)
#define OCOTP_LOCK_BOOT_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_BOOT_CFG_SHIFT)) & OCOTP_LOCK_BOOT_CFG_MASK)
#define OCOTP_LOCK_MEM_TRIM_MASK                 (0x30U)
#define OCOTP_LOCK_MEM_TRIM_SHIFT                (4U)
#define OCOTP_LOCK_MEM_TRIM(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_MEM_TRIM_SHIFT)) & OCOTP_LOCK_MEM_TRIM_MASK)
#define OCOTP_LOCK_ANALOG_MASK                   (0xC0U)
#define OCOTP_LOCK_ANALOG_SHIFT                  (6U)
#define OCOTP_LOCK_ANALOG(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_ANALOG_SHIFT)) & OCOTP_LOCK_ANALOG_MASK)
#define OCOTP_LOCK_OTPMK_MASK                    (0x100U)
#define OCOTP_LOCK_OTPMK_SHIFT                   (8U)
#define OCOTP_LOCK_SRK_MASK                      (0x200U)
#define OCOTP_LOCK_SRK_SHIFT                     (9U)
#define OCOTP_LOCK_SJC_RESP_MASK                 (0x400U)
#define OCOTP_LOCK_SJC_RESP_SHIFT                (10U)
#define OCOTP_LOCK_GROUP_MASK_MASK               (0x800U)
#define OCOTP_LOCK_GROUP_MASK_SHIFT              (11U)
#define OCOTP_LOCK_USB_ID_MASK                   (0x3000U)
#define OCOTP_LOCK_USB_ID_SHIFT                  (12U)
#define OCOTP_LOCK_USB_ID(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_USB_ID_SHIFT)) & OCOTP_LOCK_USB_ID_MASK)
#define OCOTP_LOCK_MAC_ADDR_MASK                 (0xC000U)
#define OCOTP_LOCK_MAC_ADDR_SHIFT                (14U)
#define OCOTP_LOCK_MAC_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_MAC_ADDR_SHIFT)) & OCOTP_LOCK_MAC_ADDR_MASK)
#define OCOTP_LOCK_MAU_KEY_MASK                  (0x10000U)
#define OCOTP_LOCK_MAU_KEY_SHIFT                 (16U)
#define OCOTP_LOCK_ROM_PATCH_MASK                (0x20000U)
#define OCOTP_LOCK_ROM_PATCH_SHIFT               (17U)
#define OCOTP_LOCK_GP_CRC_MASK                   (0xC0000U)
#define OCOTP_LOCK_GP_CRC_SHIFT                  (18U)
#define OCOTP_LOCK_GP_CRC(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP_CRC_SHIFT)) & OCOTP_LOCK_GP_CRC_MASK)
#define OCOTP_LOCK_GP1_MASK                      (0x300000U)
#define OCOTP_LOCK_GP1_SHIFT                     (20U)
#define OCOTP_LOCK_GP1(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP1_SHIFT)) & OCOTP_LOCK_GP1_MASK)
#define OCOTP_LOCK_GP2_MASK                      (0xC00000U)
#define OCOTP_LOCK_GP2_SHIFT                     (22U)
#define OCOTP_LOCK_GP2(x)                        (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_GP2_SHIFT)) & OCOTP_LOCK_GP2_MASK)
#define OCOTP_LOCK_HDMI_KEY_MASK                 (0x3000000U)
#define OCOTP_LOCK_HDMI_KEY_SHIFT                (24U)
#define OCOTP_LOCK_HDMI_KEY(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_HDMI_KEY_SHIFT)) & OCOTP_LOCK_HDMI_KEY_MASK)
#define OCOTP_LOCK_HDMI_CRC_MASK                 (0xC000000U)
#define OCOTP_LOCK_HDMI_CRC_SHIFT                (26U)
#define OCOTP_LOCK_HDMI_CRC(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_HDMI_CRC_SHIFT)) & OCOTP_LOCK_HDMI_CRC_MASK)
#define OCOTP_LOCK_HDCP_KEY_MASK                 (0x30000000U)
#define OCOTP_LOCK_HDCP_KEY_SHIFT                (28U)
#define OCOTP_LOCK_HDCP_KEY(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_HDCP_KEY_SHIFT)) & OCOTP_LOCK_HDCP_KEY_MASK)
#define OCOTP_LOCK_HDCP_CRC_MASK                 (0xC0000000U)
#define OCOTP_LOCK_HDCP_CRC_SHIFT                (30U)
#define OCOTP_LOCK_HDCP_CRC(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_LOCK_HDCP_CRC_SHIFT)) & OCOTP_LOCK_HDCP_CRC_MASK)
/*! @} */

/*! @name TESTER0 - Value of OTP Bank0 Word1 (Tester Info.) */
/*! @{ */
#define OCOTP_TESTER0_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER0_BITS_SHIFT                 (0U)
#define OCOTP_TESTER0_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER0_BITS_SHIFT)) & OCOTP_TESTER0_BITS_MASK)
/*! @} */

/*! @name TESTER1 - Value of OTP Bank0 Word2 (tester Info.) */
/*! @{ */
#define OCOTP_TESTER1_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER1_BITS_SHIFT                 (0U)
#define OCOTP_TESTER1_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER1_BITS_SHIFT)) & OCOTP_TESTER1_BITS_MASK)
/*! @} */

/*! @name TESTER2 - Value of OTP Bank0 Word3 (Tester Info.) */
/*! @{ */
#define OCOTP_TESTER2_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER2_BITS_SHIFT                 (0U)
#define OCOTP_TESTER2_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER2_BITS_SHIFT)) & OCOTP_TESTER2_BITS_MASK)
/*! @} */

/*! @name TESTER3 - Value of OTP Bank1 Word0 (Tester Info.) */
/*! @{ */
#define OCOTP_TESTER3_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER3_BITS_SHIFT                 (0U)
#define OCOTP_TESTER3_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER3_BITS_SHIFT)) & OCOTP_TESTER3_BITS_MASK)
/*! @} */

/*! @name TESTER4 - Value of OTP Bank1 Word1 (Tester Info.) */
/*! @{ */
#define OCOTP_TESTER4_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER4_BITS_SHIFT                 (0U)
#define OCOTP_TESTER4_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER4_BITS_SHIFT)) & OCOTP_TESTER4_BITS_MASK)
/*! @} */

/*! @name TESTER5 - Value of OTP Bank1 Word2 (Tester Info.) */
/*! @{ */
#define OCOTP_TESTER5_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_TESTER5_BITS_SHIFT                 (0U)
#define OCOTP_TESTER5_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_TESTER5_BITS_SHIFT)) & OCOTP_TESTER5_BITS_MASK)
/*! @} */

/*! @name BOOT_CFG0 - Value of OTP Bank1 Word3 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_BOOT_CFG0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_BOOT_CFG0_BITS_SHIFT               (0U)
#define OCOTP_BOOT_CFG0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_BOOT_CFG0_BITS_SHIFT)) & OCOTP_BOOT_CFG0_BITS_MASK)
/*! @} */

/*! @name BOOT_CFG1 - Value of OTP Bank2 Word0 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_BOOT_CFG1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_BOOT_CFG1_BITS_SHIFT               (0U)
#define OCOTP_BOOT_CFG1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_BOOT_CFG1_BITS_SHIFT)) & OCOTP_BOOT_CFG1_BITS_MASK)
/*! @} */

/*! @name BOOT_CFG2 - Value of OTP Bank2 Word1 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_BOOT_CFG2_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_BOOT_CFG2_BITS_SHIFT               (0U)
#define OCOTP_BOOT_CFG2_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_BOOT_CFG2_BITS_SHIFT)) & OCOTP_BOOT_CFG2_BITS_MASK)
/*! @} */

/*! @name BOOT_CFG3 - Value of OTP Bank2 Word2 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_BOOT_CFG3_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_BOOT_CFG3_BITS_SHIFT               (0U)
#define OCOTP_BOOT_CFG3_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_BOOT_CFG3_BITS_SHIFT)) & OCOTP_BOOT_CFG3_BITS_MASK)
/*! @} */

/*! @name BOOT_CFG4 - Value of OTP Bank2 Word3 (BOOT Configuration Info.) */
/*! @{ */
#define OCOTP_BOOT_CFG4_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_BOOT_CFG4_BITS_SHIFT               (0U)
#define OCOTP_BOOT_CFG4_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_BOOT_CFG4_BITS_SHIFT)) & OCOTP_BOOT_CFG4_BITS_MASK)
/*! @} */

/*! @name MEM_TRIM0 - Value of OTP Bank3 Word0 (Memory Related Info.) */
/*! @{ */
#define OCOTP_MEM_TRIM0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_MEM_TRIM0_BITS_SHIFT               (0U)
#define OCOTP_MEM_TRIM0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM_TRIM0_BITS_SHIFT)) & OCOTP_MEM_TRIM0_BITS_MASK)
/*! @} */

/*! @name MEM_TRIM1 - Value of OTP Bank3 Word1 (Memory Related Info.) */
/*! @{ */
#define OCOTP_MEM_TRIM1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_MEM_TRIM1_BITS_SHIFT               (0U)
#define OCOTP_MEM_TRIM1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_MEM_TRIM1_BITS_SHIFT)) & OCOTP_MEM_TRIM1_BITS_MASK)
/*! @} */

/*! @name ANA0 - Value of OTP Bank3 Word2 (Analog Info.) */
/*! @{ */
#define OCOTP_ANA0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_ANA0_BITS_SHIFT                    (0U)
#define OCOTP_ANA0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_ANA0_BITS_SHIFT)) & OCOTP_ANA0_BITS_MASK)
/*! @} */

/*! @name ANA1 - Value of OTP Bank3 Word3 (Analog Info.) */
/*! @{ */
#define OCOTP_ANA1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_ANA1_BITS_SHIFT                    (0U)
#define OCOTP_ANA1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_ANA1_BITS_SHIFT)) & OCOTP_ANA1_BITS_MASK)
/*! @} */

/*! @name SRK0 - Shadow Register for OTP Bank6 Word0 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK0_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK0_BITS_SHIFT                    (0U)
#define OCOTP_SRK0_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK0_BITS_SHIFT)) & OCOTP_SRK0_BITS_MASK)
/*! @} */

/*! @name SRK1 - Shadow Register for OTP Bank6 Word1 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK1_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK1_BITS_SHIFT                    (0U)
#define OCOTP_SRK1_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK1_BITS_SHIFT)) & OCOTP_SRK1_BITS_MASK)
/*! @} */

/*! @name SRK2 - Shadow Register for OTP Bank6 Word2 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK2_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK2_BITS_SHIFT                    (0U)
#define OCOTP_SRK2_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK2_BITS_SHIFT)) & OCOTP_SRK2_BITS_MASK)
/*! @} */

/*! @name SRK3 - Shadow Register for OTP Bank6 Word3 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK3_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK3_BITS_SHIFT                    (0U)
#define OCOTP_SRK3_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK3_BITS_SHIFT)) & OCOTP_SRK3_BITS_MASK)
/*! @} */

/*! @name SRK4 - Shadow Register for OTP Bank7 Word0 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK4_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK4_BITS_SHIFT                    (0U)
#define OCOTP_SRK4_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK4_BITS_SHIFT)) & OCOTP_SRK4_BITS_MASK)
/*! @} */

/*! @name SRK5 - Shadow Register for OTP Bank7 Word1 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK5_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK5_BITS_SHIFT                    (0U)
#define OCOTP_SRK5_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK5_BITS_SHIFT)) & OCOTP_SRK5_BITS_MASK)
/*! @} */

/*! @name SRK6 - Shadow Register for OTP Bank7 Word2 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK6_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK6_BITS_SHIFT                    (0U)
#define OCOTP_SRK6_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK6_BITS_SHIFT)) & OCOTP_SRK6_BITS_MASK)
/*! @} */

/*! @name SRK7 - Shadow Register for OTP Bank7 Word3 (SRK Hash) */
/*! @{ */
#define OCOTP_SRK7_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_SRK7_BITS_SHIFT                    (0U)
#define OCOTP_SRK7_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK7_BITS_SHIFT)) & OCOTP_SRK7_BITS_MASK)
/*! @} */

/*! @name SJC_RESP0 - Value of OTP Bank8 Word0 (Secure JTAG Response Field) */
/*! @{ */
#define OCOTP_SJC_RESP0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_SJC_RESP0_BITS_SHIFT               (0U)
#define OCOTP_SJC_RESP0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_SJC_RESP0_BITS_SHIFT)) & OCOTP_SJC_RESP0_BITS_MASK)
/*! @} */

/*! @name SJC_RESP1 - Value of OTP Bank8 Word1 (Secure JTAG Response Field) */
/*! @{ */
#define OCOTP_SJC_RESP1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_SJC_RESP1_BITS_SHIFT               (0U)
#define OCOTP_SJC_RESP1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_SJC_RESP1_BITS_SHIFT)) & OCOTP_SJC_RESP1_BITS_MASK)
/*! @} */

/*! @name USB_ID - Value of OTP Bank8 Word2 (USB ID info) */
/*! @{ */
#define OCOTP_USB_ID_BITS_MASK                   (0xFFFFFFFFU)
#define OCOTP_USB_ID_BITS_SHIFT                  (0U)
#define OCOTP_USB_ID_BITS(x)                     (((uint32_t)(((uint32_t)(x)) << OCOTP_USB_ID_BITS_SHIFT)) & OCOTP_USB_ID_BITS_MASK)
/*! @} */

/*! @name FIELD_RETURN - Value of OTP Bank5 Word6 (Field Return) */
/*! @{ */
#define OCOTP_FIELD_RETURN_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_FIELD_RETURN_BITS_SHIFT            (0U)
#define OCOTP_FIELD_RETURN_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_FIELD_RETURN_BITS_SHIFT)) & OCOTP_FIELD_RETURN_BITS_MASK)
/*! @} */

/*! @name MAC_ADDR0 - Value of OTP Bank9 Word0 (MAC Address) */
/*! @{ */
#define OCOTP_MAC_ADDR0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_MAC_ADDR0_BITS_SHIFT               (0U)
#define OCOTP_MAC_ADDR0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_MAC_ADDR0_BITS_SHIFT)) & OCOTP_MAC_ADDR0_BITS_MASK)
/*! @} */

/*! @name MAC_ADDR1 - Value of OTP Bank9 Word1 (MAC Address) */
/*! @{ */
#define OCOTP_MAC_ADDR1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_MAC_ADDR1_BITS_SHIFT               (0U)
#define OCOTP_MAC_ADDR1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_MAC_ADDR1_BITS_SHIFT)) & OCOTP_MAC_ADDR1_BITS_MASK)
/*! @} */

/*! @name MAC_ADDR2 - Value of OTP Bank9 Word2 (MAC Address) */
/*! @{ */
#define OCOTP_MAC_ADDR2_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_MAC_ADDR2_BITS_SHIFT               (0U)
#define OCOTP_MAC_ADDR2_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_MAC_ADDR2_BITS_SHIFT)) & OCOTP_MAC_ADDR2_BITS_MASK)
/*! @} */

/*! @name SRK_REVOKE - Value of OTP Bank9 Word3 (SRK Revoke) */
/*! @{ */
#define OCOTP_SRK_REVOKE_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_SRK_REVOKE_BITS_SHIFT              (0U)
#define OCOTP_SRK_REVOKE_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_SRK_REVOKE_BITS_SHIFT)) & OCOTP_SRK_REVOKE_BITS_MASK)
/*! @} */

/*! @name MAU_KEY0 - Shadow Register for OTP Bank10 Word0 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY0_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY0_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY0_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY0_BITS_SHIFT)) & OCOTP_MAU_KEY0_BITS_MASK)
/*! @} */

/*! @name MAU_KEY1 - Shadow Register for OTP Bank10 Word1 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY1_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY1_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY1_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY1_BITS_SHIFT)) & OCOTP_MAU_KEY1_BITS_MASK)
/*! @} */

/*! @name MAU_KEY2 - Shadow Register for OTP Bank10 Word2 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY2_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY2_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY2_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY2_BITS_SHIFT)) & OCOTP_MAU_KEY2_BITS_MASK)
/*! @} */

/*! @name MAU_KEY3 - Shadow Register for OTP Bank10 Word3 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY3_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY3_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY3_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY3_BITS_SHIFT)) & OCOTP_MAU_KEY3_BITS_MASK)
/*! @} */

/*! @name MAU_KEY4 - Shadow Register for OTP Bank11 Word0 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY4_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY4_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY4_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY4_BITS_SHIFT)) & OCOTP_MAU_KEY4_BITS_MASK)
/*! @} */

/*! @name MAU_KEY5 - Shadow Register for OTP Bank11 Word1 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY5_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY5_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY5_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY5_BITS_SHIFT)) & OCOTP_MAU_KEY5_BITS_MASK)
/*! @} */

/*! @name MAU_KEY6 - Shadow Register for OTP Bank11 Word2 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY6_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY6_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY6_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY6_BITS_SHIFT)) & OCOTP_MAU_KEY6_BITS_MASK)
/*! @} */

/*! @name MAU_KEY7 - Shadow Register for OTP Bank11 Word3 (MAU Key) */
/*! @{ */
#define OCOTP_MAU_KEY7_BITS_MASK                 (0xFFFFFFFFU)
#define OCOTP_MAU_KEY7_BITS_SHIFT                (0U)
#define OCOTP_MAU_KEY7_BITS(x)                   (((uint32_t)(((uint32_t)(x)) << OCOTP_MAU_KEY7_BITS_SHIFT)) & OCOTP_MAU_KEY7_BITS_MASK)
/*! @} */

/*! @name GP10 - Value of OTP Bank14 Word0 () */
/*! @{ */
#define OCOTP_GP10_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_GP10_BITS_SHIFT                    (0U)
#define OCOTP_GP10_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_GP10_BITS_SHIFT)) & OCOTP_GP10_BITS_MASK)
/*! @} */

/*! @name GP11 - Value of OTP Bank14 Word1 () */
/*! @{ */
#define OCOTP_GP11_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_GP11_BITS_SHIFT                    (0U)
#define OCOTP_GP11_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_GP11_BITS_SHIFT)) & OCOTP_GP11_BITS_MASK)
/*! @} */

/*! @name GP20 - Value of OTP Bank14 Word2 () */
/*! @{ */
#define OCOTP_GP20_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_GP20_BITS_SHIFT                    (0U)
#define OCOTP_GP20_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_GP20_BITS_SHIFT)) & OCOTP_GP20_BITS_MASK)
/*! @} */

/*! @name GP21 - Value of OTP Bank14 Word3 () */
/*! @{ */
#define OCOTP_GP21_BITS_MASK                     (0xFFFFFFFFU)
#define OCOTP_GP21_BITS_SHIFT                    (0U)
#define OCOTP_GP21_BITS(x)                       (((uint32_t)(((uint32_t)(x)) << OCOTP_GP21_BITS_SHIFT)) & OCOTP_GP21_BITS_MASK)
/*! @} */

/*! @name GP_CRC0 - Value of OTP Bank15 Word0 (CRC Key) */
/*! @{ */
#define OCOTP_GP_CRC0_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_GP_CRC0_BITS_SHIFT                 (0U)
#define OCOTP_GP_CRC0_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_GP_CRC0_BITS_SHIFT)) & OCOTP_GP_CRC0_BITS_MASK)
/*! @} */

/*! @name GP_CRC1 - Value of OTP Bank15 Word1 (CRC Key) */
/*! @{ */
#define OCOTP_GP_CRC1_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_GP_CRC1_BITS_SHIFT                 (0U)
#define OCOTP_GP_CRC1_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_GP_CRC1_BITS_SHIFT)) & OCOTP_GP_CRC1_BITS_MASK)
/*! @} */

/*! @name GP_CRC2 - Value of OTP Bank15 Word2 (CRC Key) */
/*! @{ */
#define OCOTP_GP_CRC2_BITS_MASK                  (0xFFFFFFFFU)
#define OCOTP_GP_CRC2_BITS_SHIFT                 (0U)
#define OCOTP_GP_CRC2_BITS(x)                    (((uint32_t)(((uint32_t)(x)) << OCOTP_GP_CRC2_BITS_SHIFT)) & OCOTP_GP_CRC2_BITS_MASK)
/*! @} */

/*! @name GROUP_MASK - Value of OTP Bank15 Word3 (CRC Key) */
/*! @{ */
#define OCOTP_GROUP_MASK_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_GROUP_MASK_BITS_SHIFT              (0U)
#define OCOTP_GROUP_MASK_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_GROUP_MASK_BITS_SHIFT)) & OCOTP_GROUP_MASK_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK0 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK0_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK0_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK0_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK0_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK0_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK1 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK1_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK1_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK1_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK1_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK1_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK2 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK2_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK2_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK2_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK2_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK2_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK3 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK3_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK3_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK3_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK3_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK3_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK4 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK4_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK4_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK4_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK4_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK4_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK5 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK5_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK5_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK5_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK5_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK5_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK6 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK6_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK6_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK6_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK6_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK6_BITS_MASK)
/*! @} */

/*! @name HDMI_FW_SRK7 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_FW_SRK7_BITS_MASK             (0xFFFFFFFFU)
#define OCOTP_HDMI_FW_SRK7_BITS_SHIFT            (0U)
#define OCOTP_HDMI_FW_SRK7_BITS(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_FW_SRK7_BITS_SHIFT)) & OCOTP_HDMI_FW_SRK7_BITS_MASK)
/*! @} */

/*! @name HDMI_KMEK0 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_KMEK0_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDMI_KMEK0_BITS_SHIFT              (0U)
#define OCOTP_HDMI_KMEK0_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_KMEK0_BITS_SHIFT)) & OCOTP_HDMI_KMEK0_BITS_MASK)
/*! @} */

/*! @name HDMI_KMEK1 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_KMEK1_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDMI_KMEK1_BITS_SHIFT              (0U)
#define OCOTP_HDMI_KMEK1_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_KMEK1_BITS_SHIFT)) & OCOTP_HDMI_KMEK1_BITS_MASK)
/*! @} */

/*! @name HDMI_KMEK2 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_KMEK2_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDMI_KMEK2_BITS_SHIFT              (0U)
#define OCOTP_HDMI_KMEK2_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_KMEK2_BITS_SHIFT)) & OCOTP_HDMI_KMEK2_BITS_MASK)
/*! @} */

/*! @name HDMI_KMEK3 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDMI_KMEK3_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDMI_KMEK3_BITS_SHIFT              (0U)
#define OCOTP_HDMI_KMEK3_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDMI_KMEK3_BITS_SHIFT)) & OCOTP_HDMI_KMEK3_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CONS0 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CONS0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CONS0_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CONS0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CONS0_BITS_SHIFT)) & OCOTP_HDCP_TX_CONS0_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CONS1 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CONS1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CONS1_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CONS1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CONS1_BITS_SHIFT)) & OCOTP_HDCP_TX_CONS1_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CONS2 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CONS2_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CONS2_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CONS2_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CONS2_BITS_SHIFT)) & OCOTP_HDCP_TX_CONS2_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CONS3 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CONS3_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CONS3_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CONS3_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CONS3_BITS_SHIFT)) & OCOTP_HDCP_TX_CONS3_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT0 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT0_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT0_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT0_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT1 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT1_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT1_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT1_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT2 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT2_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT2_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT2_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT2_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT2_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT3 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT3_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT3_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT3_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT3_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT3_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT4 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT4_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT4_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT4_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT4_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT4_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT5 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT5_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT5_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT5_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT5_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT5_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT6 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT6_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT6_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT6_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT6_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT6_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT7 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT7_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT7_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT7_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT7_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT7_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT8 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT8_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT8_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT8_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT8_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT8_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT9 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT9_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT9_BITS_SHIFT           (0U)
#define OCOTP_HDCP_TX_CERT9_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT9_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT9_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT10 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT10_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT10_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT10_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT10_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT10_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT11 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT11_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT11_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT11_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT11_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT11_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT12 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT12_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT12_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT12_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT12_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT12_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT13 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT13_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT13_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT13_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT13_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT13_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT14 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT14_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT14_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT14_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT14_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT14_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT15 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT15_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT15_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT15_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT15_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT15_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT16 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT16_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT16_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT16_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT16_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT16_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT17 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT17_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT17_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT17_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT17_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT17_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT18 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT18_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT18_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT18_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT18_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT18_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT19 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT19_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT19_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT19_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT19_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT19_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT20 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT20_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT20_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT20_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT20_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT20_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT21 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT21_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT21_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT21_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT21_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT21_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT22 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT22_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT22_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT22_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT22_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT22_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT23 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT23_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT23_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT23_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT23_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT23_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT24 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT24_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT24_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT24_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT24_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT24_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT25 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT25_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT25_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT25_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT25_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT25_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT26 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT26_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT26_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT26_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT26_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT26_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT27 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT27_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT27_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT27_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT27_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT27_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT28 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT28_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT28_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT28_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT28_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT28_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT29 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT29_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT29_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT29_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT29_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT29_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT30 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT30_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT30_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT30_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT30_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT30_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT31 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT31_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT31_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT31_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT31_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT31_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT32 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT32_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT32_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT32_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT32_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT32_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT33 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT33_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT33_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT33_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT33_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT33_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT34 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT34_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT34_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT34_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT34_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT34_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT35 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT35_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT35_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT35_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT35_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT35_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT36 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT36_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT36_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT36_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT36_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT36_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT37 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT37_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT37_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT37_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT37_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT37_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT38 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT38_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT38_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT38_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT38_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT38_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT39 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT39_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT39_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT39_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT39_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT39_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT40 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT40_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT40_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT40_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT40_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT40_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT41 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT41_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT41_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT41_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT41_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT41_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT42 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT42_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT42_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT42_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT42_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT42_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT43 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT43_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT43_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT43_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT43_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT43_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT44 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT44_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT44_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT44_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT44_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT44_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT45 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT45_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT45_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT45_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT45_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT45_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT46 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT46_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT46_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT46_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT46_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT46_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT47 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT47_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT47_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT47_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT47_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT47_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT48 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT48_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT48_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT48_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT48_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT48_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT49 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT49_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT49_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT49_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT49_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT49_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT50 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT50_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT50_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT50_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT50_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT50_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT51 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT51_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT51_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT51_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT51_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT51_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT52 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT52_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT52_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT52_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT52_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT52_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT53 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT53_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT53_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT53_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT53_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT53_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT54 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT54_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT54_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT54_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT54_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT54_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT55 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT55_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT55_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT55_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT55_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT55_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT56 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT56_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT56_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT56_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT56_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT56_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT57 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT57_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT57_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT57_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT57_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT57_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT58 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT58_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT58_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT58_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT58_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT58_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT59 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT59_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT59_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT59_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT59_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT59_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT60 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT60_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT60_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT60_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT60_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT60_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT61 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT61_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT61_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT61_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT61_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT61_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT62 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT62_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT62_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT62_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT62_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT62_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT63 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT63_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT63_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT63_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT63_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT63_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT64 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT64_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT64_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT64_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT64_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT64_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT65 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT65_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT65_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT65_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT65_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT65_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT66 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT66_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT66_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT66_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT66_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT66_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT67 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT67_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT67_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT67_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT67_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT67_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT68 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT68_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT68_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT68_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT68_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT68_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT69 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT69_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT69_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT69_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT69_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT69_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT70 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT70_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT70_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT70_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT70_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT70_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT71 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT71_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT71_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT71_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT71_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT71_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT72 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT72_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT72_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT72_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT72_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT72_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT73 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT73_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT73_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT73_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT73_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT73_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT74 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT74_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT74_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT74_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT74_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT74_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT75 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT75_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT75_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT75_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT75_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT75_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT76 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT76_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT76_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT76_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT76_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT76_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT77 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT77_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT77_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT77_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT77_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT77_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT78 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT78_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT78_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT78_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT78_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT78_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT79 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT79_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT79_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT79_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT79_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT79_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT80 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT80_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT80_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT80_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT80_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT80_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT81 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT81_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT81_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT81_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT81_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT81_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT82 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT82_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT82_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT82_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT82_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT82_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT83 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT83_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT83_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT83_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT83_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT83_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT84 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT84_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT84_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT84_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT84_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT84_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT85 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT85_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT85_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT85_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT85_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT85_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT86 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT86_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT86_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT86_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT86_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT86_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT87 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT87_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT87_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT87_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT87_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT87_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT88 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT88_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT88_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT88_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT88_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT88_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT89 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT89_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT89_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT89_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT89_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT89_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT90 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT90_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT90_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT90_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT90_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT90_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT91 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT91_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT91_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT91_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT91_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT91_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT92 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT92_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT92_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT92_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT92_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT92_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT93 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT93_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT93_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT93_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT93_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT93_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT94 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT94_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT94_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT94_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT94_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT94_BITS_MASK)
/*! @} */

/*! @name HDCP_TX_CERT95 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_TX_CERT95_BITS_MASK           (0xFFFFFFFFU)
#define OCOTP_HDCP_TX_CERT95_BITS_SHIFT          (0U)
#define OCOTP_HDCP_TX_CERT95_BITS(x)             (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_TX_CERT95_BITS_SHIFT)) & OCOTP_HDCP_TX_CERT95_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY0 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY0_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY0_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY0_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY0_BITS_SHIFT)) & OCOTP_HDCP_KEY0_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY1 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY1_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY1_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY1_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY1_BITS_SHIFT)) & OCOTP_HDCP_KEY1_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY2 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY2_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY2_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY2_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY2_BITS_SHIFT)) & OCOTP_HDCP_KEY2_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY3 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY3_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY3_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY3_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY3_BITS_SHIFT)) & OCOTP_HDCP_KEY3_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY4 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY4_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY4_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY4_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY4_BITS_SHIFT)) & OCOTP_HDCP_KEY4_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY5 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY5_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY5_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY5_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY5_BITS_SHIFT)) & OCOTP_HDCP_KEY5_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY6 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY6_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY6_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY6_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY6_BITS_SHIFT)) & OCOTP_HDCP_KEY6_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY7 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY7_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY7_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY7_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY7_BITS_SHIFT)) & OCOTP_HDCP_KEY7_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY8 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY8_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY8_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY8_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY8_BITS_SHIFT)) & OCOTP_HDCP_KEY8_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY9 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY9_BITS_MASK                (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY9_BITS_SHIFT               (0U)
#define OCOTP_HDCP_KEY9_BITS(x)                  (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY9_BITS_SHIFT)) & OCOTP_HDCP_KEY9_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY10 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY10_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY10_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY10_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY10_BITS_SHIFT)) & OCOTP_HDCP_KEY10_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY11 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY11_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY11_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY11_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY11_BITS_SHIFT)) & OCOTP_HDCP_KEY11_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY12 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY12_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY12_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY12_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY12_BITS_SHIFT)) & OCOTP_HDCP_KEY12_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY13 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY13_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY13_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY13_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY13_BITS_SHIFT)) & OCOTP_HDCP_KEY13_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY14 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY14_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY14_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY14_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY14_BITS_SHIFT)) & OCOTP_HDCP_KEY14_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY15 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY15_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY15_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY15_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY15_BITS_SHIFT)) & OCOTP_HDCP_KEY15_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY16 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY16_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY16_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY16_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY16_BITS_SHIFT)) & OCOTP_HDCP_KEY16_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY17 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY17_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY17_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY17_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY17_BITS_SHIFT)) & OCOTP_HDCP_KEY17_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY18 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY18_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY18_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY18_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY18_BITS_SHIFT)) & OCOTP_HDCP_KEY18_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY19 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY19_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY19_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY19_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY19_BITS_SHIFT)) & OCOTP_HDCP_KEY19_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY20 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY20_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY20_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY20_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY20_BITS_SHIFT)) & OCOTP_HDCP_KEY20_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY21 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY21_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY21_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY21_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY21_BITS_SHIFT)) & OCOTP_HDCP_KEY21_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY22 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY22_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY22_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY22_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY22_BITS_SHIFT)) & OCOTP_HDCP_KEY22_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY23 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY23_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY23_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY23_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY23_BITS_SHIFT)) & OCOTP_HDCP_KEY23_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY24 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY24_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY24_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY24_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY24_BITS_SHIFT)) & OCOTP_HDCP_KEY24_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY25 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY25_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY25_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY25_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY25_BITS_SHIFT)) & OCOTP_HDCP_KEY25_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY26 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY26_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY26_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY26_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY26_BITS_SHIFT)) & OCOTP_HDCP_KEY26_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY27 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY27_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY27_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY27_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY27_BITS_SHIFT)) & OCOTP_HDCP_KEY27_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY28 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY28_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY28_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY28_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY28_BITS_SHIFT)) & OCOTP_HDCP_KEY28_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY29 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY29_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY29_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY29_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY29_BITS_SHIFT)) & OCOTP_HDCP_KEY29_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY30 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY30_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY30_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY30_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY30_BITS_SHIFT)) & OCOTP_HDCP_KEY30_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY31 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY31_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY31_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY31_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY31_BITS_SHIFT)) & OCOTP_HDCP_KEY31_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY32 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY32_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY32_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY32_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY32_BITS_SHIFT)) & OCOTP_HDCP_KEY32_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY33 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY33_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY33_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY33_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY33_BITS_SHIFT)) & OCOTP_HDCP_KEY33_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY34 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY34_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY34_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY34_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY34_BITS_SHIFT)) & OCOTP_HDCP_KEY34_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY35 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY35_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY35_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY35_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY35_BITS_SHIFT)) & OCOTP_HDCP_KEY35_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY36 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY36_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY36_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY36_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY36_BITS_SHIFT)) & OCOTP_HDCP_KEY36_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY37 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY37_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY37_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY37_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY37_BITS_SHIFT)) & OCOTP_HDCP_KEY37_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY38 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY38_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY38_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY38_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY38_BITS_SHIFT)) & OCOTP_HDCP_KEY38_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY39 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY39_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY39_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY39_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY39_BITS_SHIFT)) & OCOTP_HDCP_KEY39_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY40 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY40_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY40_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY40_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY40_BITS_SHIFT)) & OCOTP_HDCP_KEY40_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY41 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY41_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY41_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY41_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY41_BITS_SHIFT)) & OCOTP_HDCP_KEY41_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY42 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY42_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY42_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY42_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY42_BITS_SHIFT)) & OCOTP_HDCP_KEY42_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY43 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY43_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY43_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY43_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY43_BITS_SHIFT)) & OCOTP_HDCP_KEY43_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY44 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY44_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY44_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY44_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY44_BITS_SHIFT)) & OCOTP_HDCP_KEY44_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY45 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY45_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY45_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY45_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY45_BITS_SHIFT)) & OCOTP_HDCP_KEY45_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY46 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY46_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY46_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY46_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY46_BITS_SHIFT)) & OCOTP_HDCP_KEY46_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY47 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY47_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY47_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY47_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY47_BITS_SHIFT)) & OCOTP_HDCP_KEY47_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY48 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY48_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY48_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY48_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY48_BITS_SHIFT)) & OCOTP_HDCP_KEY48_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY49 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY49_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY49_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY49_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY49_BITS_SHIFT)) & OCOTP_HDCP_KEY49_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY50 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY50_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY50_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY50_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY50_BITS_SHIFT)) & OCOTP_HDCP_KEY50_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY51 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY51_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY51_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY51_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY51_BITS_SHIFT)) & OCOTP_HDCP_KEY51_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY52 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY52_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY52_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY52_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY52_BITS_SHIFT)) & OCOTP_HDCP_KEY52_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY53 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY53_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY53_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY53_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY53_BITS_SHIFT)) & OCOTP_HDCP_KEY53_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY54 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY54_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY54_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY54_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY54_BITS_SHIFT)) & OCOTP_HDCP_KEY54_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY55 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY55_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY55_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY55_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY55_BITS_SHIFT)) & OCOTP_HDCP_KEY55_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY56 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY56_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY56_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY56_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY56_BITS_SHIFT)) & OCOTP_HDCP_KEY56_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY57 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY57_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY57_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY57_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY57_BITS_SHIFT)) & OCOTP_HDCP_KEY57_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY58 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY58_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY58_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY58_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY58_BITS_SHIFT)) & OCOTP_HDCP_KEY58_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY59 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY59_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY59_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY59_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY59_BITS_SHIFT)) & OCOTP_HDCP_KEY59_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY60 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY60_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY60_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY60_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY60_BITS_SHIFT)) & OCOTP_HDCP_KEY60_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY61 - Value of OTP Bank16 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY61_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY61_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY61_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY61_BITS_SHIFT)) & OCOTP_HDCP_KEY61_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY62 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY62_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY62_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY62_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY62_BITS_SHIFT)) & OCOTP_HDCP_KEY62_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY63 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY63_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY63_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY63_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY63_BITS_SHIFT)) & OCOTP_HDCP_KEY63_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY64 - Value of OTP Bank17 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY64_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY64_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY64_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY64_BITS_SHIFT)) & OCOTP_HDCP_KEY64_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY65 - Value of OTP Bank17 Word1 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY65_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY65_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY65_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY65_BITS_SHIFT)) & OCOTP_HDCP_KEY65_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY66 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY66_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY66_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY66_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY66_BITS_SHIFT)) & OCOTP_HDCP_KEY66_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY67 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY67_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY67_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY67_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY67_BITS_SHIFT)) & OCOTP_HDCP_KEY67_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY68 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY68_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY68_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY68_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY68_BITS_SHIFT)) & OCOTP_HDCP_KEY68_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY69 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY69_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY69_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY69_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY69_BITS_SHIFT)) & OCOTP_HDCP_KEY69_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY70 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY70_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY70_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY70_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY70_BITS_SHIFT)) & OCOTP_HDCP_KEY70_BITS_MASK)
/*! @} */

/*! @name HDCP_KEY71 - Value of OTP Bank16 Word0 (HDCP Key) */
/*! @{ */
#define OCOTP_HDCP_KEY71_BITS_MASK               (0xFFFFFFFFU)
#define OCOTP_HDCP_KEY71_BITS_SHIFT              (0U)
#define OCOTP_HDCP_KEY71_BITS(x)                 (((uint32_t)(((uint32_t)(x)) << OCOTP_HDCP_KEY71_BITS_SHIFT)) & OCOTP_HDCP_KEY71_BITS_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group OCOTP_Register_Masks */


/* OCOTP - Peripheral instance base addresses */
/** Peripheral OCOTP base pointer */
#define OCOTP_BASE_PTR                           ((OCOTP_MemMapPtr)0x30350000u)
/** Array initializer of OCOTP peripheral base pointers */
#define OCOTP_BASE_PTRS                          { OCOTP_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register instance definitions */
/* OCOTP */
#define OCOTP_HW_OCOTP_CTRL                      OCOTP_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_SET                  OCOTP_CTRL_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_CLR                  OCOTP_CTRL_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_TOG                  OCOTP_CTRL_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TIMING                    OCOTP_TIMING_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_DATA                      OCOTP_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_CTRL                 OCOTP_READ_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA            OCOTP_READ_FUSE_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_STICKY                 OCOTP_SW_STICKY_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS                       OCOTP_SCS_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_SET                   OCOTP_SCS_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_CLR                   OCOTP_SCS_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_TOG                   OCOTP_SCS_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_VERSION                   OCOTP_VERSION_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_LOCK                      OCOTP_LOCK_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER0                   OCOTP_TESTER0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER1                   OCOTP_TESTER1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER2                   OCOTP_TESTER2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER3                   OCOTP_TESTER3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER4                   OCOTP_TESTER4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER5                   OCOTP_TESTER5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG0                 OCOTP_BOOT_CFG0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG1                 OCOTP_BOOT_CFG1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG2                 OCOTP_BOOT_CFG2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG3                 OCOTP_BOOT_CFG3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG4                 OCOTP_BOOT_CFG4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM_TRIM0                 OCOTP_MEM_TRIM0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM_TRIM1                 OCOTP_MEM_TRIM1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA0                      OCOTP_ANA0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA1                      OCOTP_ANA1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK0                      OCOTP_SRK0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK1                      OCOTP_SRK1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK2                      OCOTP_SRK2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK3                      OCOTP_SRK3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK4                      OCOTP_SRK4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK5                      OCOTP_SRK5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK6                      OCOTP_SRK6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK7                      OCOTP_SRK7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP0                 OCOTP_SJC_RESP0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP1                 OCOTP_SJC_RESP1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_USB_ID                    OCOTP_USB_ID_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_FIELD_RETURN              OCOTP_FIELD_RETURN_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR0                 OCOTP_MAC_ADDR0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR1                 OCOTP_MAC_ADDR1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR2                 OCOTP_MAC_ADDR2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK_REVOKE                OCOTP_SRK_REVOKE_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY0                  OCOTP_MAU_KEY0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY1                  OCOTP_MAU_KEY1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY2                  OCOTP_MAU_KEY2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY3                  OCOTP_MAU_KEY3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY4                  OCOTP_MAU_KEY4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY5                  OCOTP_MAU_KEY5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY6                  OCOTP_MAU_KEY6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY7                  OCOTP_MAU_KEY7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP10                      OCOTP_GP10_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP11                      OCOTP_GP11_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP20                      OCOTP_GP20_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP21                      OCOTP_GP21_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP_CRC0                   OCOTP_GP_CRC0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP_CRC1                   OCOTP_GP_CRC1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP_CRC2                   OCOTP_GP_CRC2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GROUP_MASK                OCOTP_GROUP_MASK_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK0              OCOTP_HDMI_FW_SRK0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK1              OCOTP_HDMI_FW_SRK1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK2              OCOTP_HDMI_FW_SRK2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK3              OCOTP_HDMI_FW_SRK3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK4              OCOTP_HDMI_FW_SRK4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK5              OCOTP_HDMI_FW_SRK5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK6              OCOTP_HDMI_FW_SRK6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_FW_SRK7              OCOTP_HDMI_FW_SRK7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_KMEK0                OCOTP_HDMI_KMEK0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_KMEK1                OCOTP_HDMI_KMEK1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_KMEK2                OCOTP_HDMI_KMEK2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDMI_KMEK3                OCOTP_HDMI_KMEK3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS0             OCOTP_HDCP_TX_CONS0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS1             OCOTP_HDCP_TX_CONS1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS2             OCOTP_HDCP_TX_CONS2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CONS3             OCOTP_HDCP_TX_CONS3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT0             OCOTP_HDCP_TX_CERT0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT1             OCOTP_HDCP_TX_CERT1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT2             OCOTP_HDCP_TX_CERT2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT3             OCOTP_HDCP_TX_CERT3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT4             OCOTP_HDCP_TX_CERT4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT5             OCOTP_HDCP_TX_CERT5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT6             OCOTP_HDCP_TX_CERT6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT7             OCOTP_HDCP_TX_CERT7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT8             OCOTP_HDCP_TX_CERT8_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT9             OCOTP_HDCP_TX_CERT9_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT10            OCOTP_HDCP_TX_CERT10_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT11            OCOTP_HDCP_TX_CERT11_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT12            OCOTP_HDCP_TX_CERT12_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT13            OCOTP_HDCP_TX_CERT13_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT14            OCOTP_HDCP_TX_CERT14_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT15            OCOTP_HDCP_TX_CERT15_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT16            OCOTP_HDCP_TX_CERT16_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT17            OCOTP_HDCP_TX_CERT17_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT18            OCOTP_HDCP_TX_CERT18_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT19            OCOTP_HDCP_TX_CERT19_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT20            OCOTP_HDCP_TX_CERT20_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT21            OCOTP_HDCP_TX_CERT21_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT22            OCOTP_HDCP_TX_CERT22_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT23            OCOTP_HDCP_TX_CERT23_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT24            OCOTP_HDCP_TX_CERT24_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT25            OCOTP_HDCP_TX_CERT25_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT26            OCOTP_HDCP_TX_CERT26_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT27            OCOTP_HDCP_TX_CERT27_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT28            OCOTP_HDCP_TX_CERT28_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT29            OCOTP_HDCP_TX_CERT29_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT30            OCOTP_HDCP_TX_CERT30_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT31            OCOTP_HDCP_TX_CERT31_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT32            OCOTP_HDCP_TX_CERT32_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT33            OCOTP_HDCP_TX_CERT33_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT34            OCOTP_HDCP_TX_CERT34_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT35            OCOTP_HDCP_TX_CERT35_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT36            OCOTP_HDCP_TX_CERT36_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT37            OCOTP_HDCP_TX_CERT37_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT38            OCOTP_HDCP_TX_CERT38_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT39            OCOTP_HDCP_TX_CERT39_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT40            OCOTP_HDCP_TX_CERT40_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT41            OCOTP_HDCP_TX_CERT41_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT42            OCOTP_HDCP_TX_CERT42_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT43            OCOTP_HDCP_TX_CERT43_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT44            OCOTP_HDCP_TX_CERT44_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT45            OCOTP_HDCP_TX_CERT45_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT46            OCOTP_HDCP_TX_CERT46_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT47            OCOTP_HDCP_TX_CERT47_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT48            OCOTP_HDCP_TX_CERT48_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT49            OCOTP_HDCP_TX_CERT49_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT50            OCOTP_HDCP_TX_CERT50_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT51            OCOTP_HDCP_TX_CERT51_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT52            OCOTP_HDCP_TX_CERT52_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT53            OCOTP_HDCP_TX_CERT53_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT54            OCOTP_HDCP_TX_CERT54_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT55            OCOTP_HDCP_TX_CERT55_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT56            OCOTP_HDCP_TX_CERT56_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT57            OCOTP_HDCP_TX_CERT57_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT58            OCOTP_HDCP_TX_CERT58_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT59            OCOTP_HDCP_TX_CERT59_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT60            OCOTP_HDCP_TX_CERT60_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT61            OCOTP_HDCP_TX_CERT61_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT62            OCOTP_HDCP_TX_CERT62_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT63            OCOTP_HDCP_TX_CERT63_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT64            OCOTP_HDCP_TX_CERT64_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT65            OCOTP_HDCP_TX_CERT65_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT66            OCOTP_HDCP_TX_CERT66_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT67            OCOTP_HDCP_TX_CERT67_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT68            OCOTP_HDCP_TX_CERT68_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT69            OCOTP_HDCP_TX_CERT69_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT70            OCOTP_HDCP_TX_CERT70_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT71            OCOTP_HDCP_TX_CERT71_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT72            OCOTP_HDCP_TX_CERT72_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT73            OCOTP_HDCP_TX_CERT73_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT74            OCOTP_HDCP_TX_CERT74_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT75            OCOTP_HDCP_TX_CERT75_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT76            OCOTP_HDCP_TX_CERT76_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT77            OCOTP_HDCP_TX_CERT77_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT78            OCOTP_HDCP_TX_CERT78_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT79            OCOTP_HDCP_TX_CERT79_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT80            OCOTP_HDCP_TX_CERT80_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT81            OCOTP_HDCP_TX_CERT81_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT82            OCOTP_HDCP_TX_CERT82_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT83            OCOTP_HDCP_TX_CERT83_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT84            OCOTP_HDCP_TX_CERT84_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT85            OCOTP_HDCP_TX_CERT85_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT86            OCOTP_HDCP_TX_CERT86_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT87            OCOTP_HDCP_TX_CERT87_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT88            OCOTP_HDCP_TX_CERT88_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT89            OCOTP_HDCP_TX_CERT89_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT90            OCOTP_HDCP_TX_CERT90_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT91            OCOTP_HDCP_TX_CERT91_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT92            OCOTP_HDCP_TX_CERT92_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT93            OCOTP_HDCP_TX_CERT93_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT94            OCOTP_HDCP_TX_CERT94_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_TX_CERT95            OCOTP_HDCP_TX_CERT95_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY0                 OCOTP_HDCP_KEY0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY1                 OCOTP_HDCP_KEY1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY2                 OCOTP_HDCP_KEY2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY3                 OCOTP_HDCP_KEY3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY4                 OCOTP_HDCP_KEY4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY5                 OCOTP_HDCP_KEY5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY6                 OCOTP_HDCP_KEY6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY7                 OCOTP_HDCP_KEY7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY8                 OCOTP_HDCP_KEY8_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY9                 OCOTP_HDCP_KEY9_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY10                OCOTP_HDCP_KEY10_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY11                OCOTP_HDCP_KEY11_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY12                OCOTP_HDCP_KEY12_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY13                OCOTP_HDCP_KEY13_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY14                OCOTP_HDCP_KEY14_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY15                OCOTP_HDCP_KEY15_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY16                OCOTP_HDCP_KEY16_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY17                OCOTP_HDCP_KEY17_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY18                OCOTP_HDCP_KEY18_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY19                OCOTP_HDCP_KEY19_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY20                OCOTP_HDCP_KEY20_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY21                OCOTP_HDCP_KEY21_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY22                OCOTP_HDCP_KEY22_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY23                OCOTP_HDCP_KEY23_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY24                OCOTP_HDCP_KEY24_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY25                OCOTP_HDCP_KEY25_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY26                OCOTP_HDCP_KEY26_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY27                OCOTP_HDCP_KEY27_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY28                OCOTP_HDCP_KEY28_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY29                OCOTP_HDCP_KEY29_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY30                OCOTP_HDCP_KEY30_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY31                OCOTP_HDCP_KEY31_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY32                OCOTP_HDCP_KEY32_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY33                OCOTP_HDCP_KEY33_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY34                OCOTP_HDCP_KEY34_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY35                OCOTP_HDCP_KEY35_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY36                OCOTP_HDCP_KEY36_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY37                OCOTP_HDCP_KEY37_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY38                OCOTP_HDCP_KEY38_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY39                OCOTP_HDCP_KEY39_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY40                OCOTP_HDCP_KEY40_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY41                OCOTP_HDCP_KEY41_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY42                OCOTP_HDCP_KEY42_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY43                OCOTP_HDCP_KEY43_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY44                OCOTP_HDCP_KEY44_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY45                OCOTP_HDCP_KEY45_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY46                OCOTP_HDCP_KEY46_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY47                OCOTP_HDCP_KEY47_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY48                OCOTP_HDCP_KEY48_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY49                OCOTP_HDCP_KEY49_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY50                OCOTP_HDCP_KEY50_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY51                OCOTP_HDCP_KEY51_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY52                OCOTP_HDCP_KEY52_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY53                OCOTP_HDCP_KEY53_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY54                OCOTP_HDCP_KEY54_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY55                OCOTP_HDCP_KEY55_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY56                OCOTP_HDCP_KEY56_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY57                OCOTP_HDCP_KEY57_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY58                OCOTP_HDCP_KEY58_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY59                OCOTP_HDCP_KEY59_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY60                OCOTP_HDCP_KEY60_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY61                OCOTP_HDCP_KEY61_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY62                OCOTP_HDCP_KEY62_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY63                OCOTP_HDCP_KEY63_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY64                OCOTP_HDCP_KEY64_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY65                OCOTP_HDCP_KEY65_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY66                OCOTP_HDCP_KEY66_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY67                OCOTP_HDCP_KEY67_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY68                OCOTP_HDCP_KEY68_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY69                OCOTP_HDCP_KEY69_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY70                OCOTP_HDCP_KEY70_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_HDCP_KEY71                OCOTP_HDCP_KEY71_REG(OCOTP_BASE_PTR)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OCOTP_Peripheral */


/* ----------------------------------------------------------------------------
   -- PWM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Peripheral PWM
 * @{
 */

/** PWM - Peripheral register structure */
typedef struct PWM_MemMap {
  uint32_t PWMCR;                                  /**< PWM Control Register, offset: 0x0 */
  uint32_t PWMSR;                                  /**< PWM Status Register, offset: 0x4 */
  uint32_t PWMIR;                                  /**< PWM Interrupt Register, offset: 0x8 */
  uint32_t PWMSAR;                                 /**< PWM Sample Register, offset: 0xC */
  uint32_t PWMPR;                                  /**< PWM Period Register, offset: 0x10 */
  uint32_t PWMCNR;                                 /**< PWM Counter Register, offset: 0x14 */
} volatile *PWM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register accessors */
#define PWM_PWMCR_REG(base)                      ((base)->PWMCR)
#define PWM_PWMSR_REG(base)                      ((base)->PWMSR)
#define PWM_PWMIR_REG(base)                      ((base)->PWMIR)
#define PWM_PWMSAR_REG(base)                     ((base)->PWMSAR)
#define PWM_PWMPR_REG(base)                      ((base)->PWMPR)
#define PWM_PWMCNR_REG(base)                     ((base)->PWMCNR)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PWM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Masks PWM Register Masks
 * @{
 */

/*! @name PWMCR - PWM Control Register */
/*! @{ */
#define PWM_PWMCR_EN_MASK                        (0x1U)
#define PWM_PWMCR_EN_SHIFT                       (0U)
#define PWM_PWMCR_REPEAT_MASK                    (0x6U)
#define PWM_PWMCR_REPEAT_SHIFT                   (1U)
/*! REPEAT
 *  0b00..Use each sample once
 *  0b01..Use each sample twice
 *  0b10..Use each sample four times
 *  0b11..Use each sample eight times
 */
#define PWM_PWMCR_REPEAT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_REPEAT_SHIFT)) & PWM_PWMCR_REPEAT_MASK)
#define PWM_PWMCR_SWR_MASK                       (0x8U)
#define PWM_PWMCR_SWR_SHIFT                      (3U)
#define PWM_PWMCR_PRESCALER_MASK                 (0xFFF0U)
#define PWM_PWMCR_PRESCALER_SHIFT                (4U)
/*! PRESCALER
 *  0b000000000000..Divide by 1
 *  0b000000000001..Divide by 2
 *  0b111111111111..Divide by 4096
 */
#define PWM_PWMCR_PRESCALER(x)                   (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_PRESCALER_SHIFT)) & PWM_PWMCR_PRESCALER_MASK)
#define PWM_PWMCR_CLKSRC_MASK                    (0x30000U)
#define PWM_PWMCR_CLKSRC_SHIFT                   (16U)
/*! CLKSRC
 *  0b00..Clock is off
 *  0b01..ipg_clk
 *  0b10..ipg_clk_highfreq
 *  0b11..ipg_clk_32k
 */
#define PWM_PWMCR_CLKSRC(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_CLKSRC_SHIFT)) & PWM_PWMCR_CLKSRC_MASK)
#define PWM_PWMCR_POUTC_MASK                     (0xC0000U)
#define PWM_PWMCR_POUTC_SHIFT                    (18U)
/*! POUTC
 *  0b00..Output pin is set at rollover and cleared at comparison
 *  0b01..Output pin is cleared at rollover and set at comparison
 *  0b10..PWM output is disconnected
 *  0b11..PWM output is disconnected
 */
#define PWM_PWMCR_POUTC(x)                       (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_POUTC_SHIFT)) & PWM_PWMCR_POUTC_MASK)
#define PWM_PWMCR_HCTR_MASK                      (0x100000U)
#define PWM_PWMCR_HCTR_SHIFT                     (20U)
#define PWM_PWMCR_BCTR_MASK                      (0x200000U)
#define PWM_PWMCR_BCTR_SHIFT                     (21U)
#define PWM_PWMCR_DBGEN_MASK                     (0x400000U)
#define PWM_PWMCR_DBGEN_SHIFT                    (22U)
#define PWM_PWMCR_WAITEN_MASK                    (0x800000U)
#define PWM_PWMCR_WAITEN_SHIFT                   (23U)
#define PWM_PWMCR_DOZEN_MASK                     (0x1000000U)
#define PWM_PWMCR_DOZEN_SHIFT                    (24U)
#define PWM_PWMCR_STOPEN_MASK                    (0x2000000U)
#define PWM_PWMCR_STOPEN_SHIFT                   (25U)
#define PWM_PWMCR_FWM_MASK                       (0xC000000U)
#define PWM_PWMCR_FWM_SHIFT                      (26U)
/*! FWM
 *  0b00..FIFO empty flag is set when there are more than or equal to 1 empty slots in FIFO
 *  0b01..FIFO empty flag is set when there are more than or equal to 2 empty slots in FIFO
 *  0b10..FIFO empty flag is set when there are more than or equal to 3 empty slots in FIFO
 *  0b11..FIFO empty flag is set when there are more than or equal to 4 empty slots in FIFO
 */
#define PWM_PWMCR_FWM(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_FWM_SHIFT)) & PWM_PWMCR_FWM_MASK)
/*! @} */

/*! @name PWMSR - PWM Status Register */
/*! @{ */
#define PWM_PWMSR_FIFOAV_MASK                    (0x7U)
#define PWM_PWMSR_FIFOAV_SHIFT                   (0U)
/*! FIFOAV
 *  0b000..No data available
 *  0b001..1 word of data in FIFO
 *  0b010..2 words of data in FIFO
 *  0b011..3 words of data in FIFO
 *  0b100..4 words of data in FIFO
 *  0b101..unused
 *  0b110..unused
 *  0b111..unused
 */
#define PWM_PWMSR_FIFOAV(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_FIFOAV_SHIFT)) & PWM_PWMSR_FIFOAV_MASK)
#define PWM_PWMSR_FE_MASK                        (0x8U)
#define PWM_PWMSR_FE_SHIFT                       (3U)
#define PWM_PWMSR_ROV_MASK                       (0x10U)
#define PWM_PWMSR_ROV_SHIFT                      (4U)
#define PWM_PWMSR_CMP_MASK                       (0x20U)
#define PWM_PWMSR_CMP_SHIFT                      (5U)
#define PWM_PWMSR_FWE_MASK                       (0x40U)
#define PWM_PWMSR_FWE_SHIFT                      (6U)
/*! @} */

/*! @name PWMIR - PWM Interrupt Register */
/*! @{ */
#define PWM_PWMIR_FIE_MASK                       (0x1U)
#define PWM_PWMIR_FIE_SHIFT                      (0U)
#define PWM_PWMIR_RIE_MASK                       (0x2U)
#define PWM_PWMIR_RIE_SHIFT                      (1U)
#define PWM_PWMIR_CIE_MASK                       (0x4U)
#define PWM_PWMIR_CIE_SHIFT                      (2U)
/*! @} */

/*! @name PWMSAR - PWM Sample Register */
/*! @{ */
#define PWM_PWMSAR_SAMPLE_MASK                   (0xFFFFU)
#define PWM_PWMSAR_SAMPLE_SHIFT                  (0U)
#define PWM_PWMSAR_SAMPLE(x)                     (((uint32_t)(((uint32_t)(x)) << PWM_PWMSAR_SAMPLE_SHIFT)) & PWM_PWMSAR_SAMPLE_MASK)
/*! @} */

/*! @name PWMPR - PWM Period Register */
/*! @{ */
#define PWM_PWMPR_PERIOD_MASK                    (0xFFFFU)
#define PWM_PWMPR_PERIOD_SHIFT                   (0U)
#define PWM_PWMPR_PERIOD(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMPR_PERIOD_SHIFT)) & PWM_PWMPR_PERIOD_MASK)
/*! @} */

/*! @name PWMCNR - PWM Counter Register */
/*! @{ */
#define PWM_PWMCNR_COUNT_MASK                    (0xFFFFU)
#define PWM_PWMCNR_COUNT_SHIFT                   (0U)
#define PWM_PWMCNR_COUNT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCNR_COUNT_SHIFT)) & PWM_PWMCNR_COUNT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PWM_Register_Masks */


/* PWM - Peripheral instance base addresses */
/** Peripheral PWM1 base pointer */
#define PWM1_BASE_PTR                            ((PWM_MemMapPtr)0x30660000u)
/** Peripheral PWM2 base pointer */
#define PWM2_BASE_PTR                            ((PWM_MemMapPtr)0x30670000u)
/** Peripheral PWM3 base pointer */
#define PWM3_BASE_PTR                            ((PWM_MemMapPtr)0x30680000u)
/** Peripheral PWM4 base pointer */
#define PWM4_BASE_PTR                            ((PWM_MemMapPtr)0x30690000u)
/** Array initializer of PWM peripheral base pointers */
#define PWM_BASE_PTRS                            { PWM1_BASE_PTR, PWM2_BASE_PTR, PWM3_BASE_PTR, PWM4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register instance definitions */
/* PWM1 */
#define PWM1_PWMCR                               PWM_PWMCR_REG(PWM1_BASE_PTR)
#define PWM1_PWMSR                               PWM_PWMSR_REG(PWM1_BASE_PTR)
#define PWM1_PWMIR                               PWM_PWMIR_REG(PWM1_BASE_PTR)
#define PWM1_PWMSAR                              PWM_PWMSAR_REG(PWM1_BASE_PTR)
#define PWM1_PWMPR                               PWM_PWMPR_REG(PWM1_BASE_PTR)
#define PWM1_PWMCNR                              PWM_PWMCNR_REG(PWM1_BASE_PTR)
/* PWM2 */
#define PWM2_PWMCR                               PWM_PWMCR_REG(PWM2_BASE_PTR)
#define PWM2_PWMSR                               PWM_PWMSR_REG(PWM2_BASE_PTR)
#define PWM2_PWMIR                               PWM_PWMIR_REG(PWM2_BASE_PTR)
#define PWM2_PWMSAR                              PWM_PWMSAR_REG(PWM2_BASE_PTR)
#define PWM2_PWMPR                               PWM_PWMPR_REG(PWM2_BASE_PTR)
#define PWM2_PWMCNR                              PWM_PWMCNR_REG(PWM2_BASE_PTR)
/* PWM3 */
#define PWM3_PWMCR                               PWM_PWMCR_REG(PWM3_BASE_PTR)
#define PWM3_PWMSR                               PWM_PWMSR_REG(PWM3_BASE_PTR)
#define PWM3_PWMIR                               PWM_PWMIR_REG(PWM3_BASE_PTR)
#define PWM3_PWMSAR                              PWM_PWMSAR_REG(PWM3_BASE_PTR)
#define PWM3_PWMPR                               PWM_PWMPR_REG(PWM3_BASE_PTR)
#define PWM3_PWMCNR                              PWM_PWMCNR_REG(PWM3_BASE_PTR)
/* PWM4 */
#define PWM4_PWMCR                               PWM_PWMCR_REG(PWM4_BASE_PTR)
#define PWM4_PWMSR                               PWM_PWMSR_REG(PWM4_BASE_PTR)
#define PWM4_PWMIR                               PWM_PWMIR_REG(PWM4_BASE_PTR)
#define PWM4_PWMSAR                              PWM_PWMSAR_REG(PWM4_BASE_PTR)
#define PWM4_PWMPR                               PWM_PWMPR_REG(PWM4_BASE_PTR)
#define PWM4_PWMCNR                              PWM_PWMCNR_REG(PWM4_BASE_PTR)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PWM_Peripheral */


/* ----------------------------------------------------------------------------
   -- QuadSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Peripheral QuadSPI
 * @{
 */

/** QuadSPI - Peripheral register structure */
typedef struct QuadSPI_MemMap {
  uint32_t MCR;                                    /**< Module Configuration Register, offset: 0x0 */
  uint8_t RESERVED_0[4];
  uint32_t IPCR;                                   /**< IP Configuration Register, offset: 0x8 */
  uint32_t FLSHCR;                                 /**< Flash Configuration Register, offset: 0xC */
  uint32_t BUF0CR;                                 /**< Buffer0 Configuration Register, offset: 0x10 */
  uint32_t BUF1CR;                                 /**< Buffer1 Configuration Register, offset: 0x14 */
  uint32_t BUF2CR;                                 /**< Buffer2 Configuration Register, offset: 0x18 */
  uint32_t BUF3CR;                                 /**< Buffer3 Configuration Register, offset: 0x1C */
  uint32_t BFGENCR;                                /**< Buffer Generic Configuration Register, offset: 0x20 */
  uint8_t RESERVED_1[12];
  uint32_t BUF0IND;                                /**< Buffer0 Top Index Register, offset: 0x30 */
  uint32_t BUF1IND;                                /**< Buffer1 Top Index Register, offset: 0x34 */
  uint32_t BUF2IND;                                /**< Buffer2 Top Index Register, offset: 0x38 */
  uint8_t RESERVED_2[196];
  uint32_t SFAR;                                   /**< Serial Flash Address Register, offset: 0x100 */
  uint8_t RESERVED_3[4];
  uint32_t SMPR;                                   /**< Sampling Register, offset: 0x108 */
  uint32_t RBSR;                                   /**< RX Buffer Status Register, offset: 0x10C */
  uint32_t RBCT;                                   /**< RX Buffer Control Register, offset: 0x110 */
  uint8_t RESERVED_4[60];
  uint32_t TBSR;                                   /**< TX Buffer Status Register, offset: 0x150 */
  uint32_t TBDR;                                   /**< TX Buffer Data Register, offset: 0x154 */
  uint8_t RESERVED_5[4];
  uint32_t SR;                                     /**< Status Register, offset: 0x15C */
  uint32_t FR;                                     /**< Flag Register, offset: 0x160 */
  uint32_t RSER;                                   /**< Interrupt and DMA Request Select and Enable Register, offset: 0x164 */
  uint32_t SPNDST;                                 /**< Sequence Suspend Status Register, offset: 0x168 */
  uint32_t SPTRCLR;                                /**< Sequence Pointer Clear Register, offset: 0x16C */
  uint8_t RESERVED_6[16];
  uint32_t SFA1AD;                                 /**< Serial Flash A1 Top Address, offset: 0x180 */
  uint32_t SFA2AD;                                 /**< Serial Flash A2 Top Address, offset: 0x184 */
  uint32_t SFB1AD;                                 /**< Serial Flash B1Top Address, offset: 0x188 */
  uint32_t SFB2AD;                                 /**< Serial Flash B2Top Address, offset: 0x18C */
  uint8_t RESERVED_7[112];
  uint32_t RBDR[32];                               /**< RX Buffer Data Register, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_8[128];
  uint32_t LUTKEY;                                 /**< LUT Key Register, offset: 0x300 */
  uint32_t LCKCR;                                  /**< LUT Lock Configuration Register, offset: 0x304 */
  uint8_t RESERVED_9[8];
  uint32_t LUT[64];                                /**< Look-up Table register, array offset: 0x310, array step: 0x4 */
} volatile *QuadSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- QuadSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Register_Accessor_Macros QuadSPI - Register accessor macros
 * @{
 */


/* QuadSPI - Register accessors */
#define QuadSPI_MCR_REG(base)                    ((base)->MCR)
#define QuadSPI_IPCR_REG(base)                   ((base)->IPCR)
#define QuadSPI_FLSHCR_REG(base)                 ((base)->FLSHCR)
#define QuadSPI_BUF0CR_REG(base)                 ((base)->BUF0CR)
#define QuadSPI_BUF1CR_REG(base)                 ((base)->BUF1CR)
#define QuadSPI_BUF2CR_REG(base)                 ((base)->BUF2CR)
#define QuadSPI_BUF3CR_REG(base)                 ((base)->BUF3CR)
#define QuadSPI_BFGENCR_REG(base)                ((base)->BFGENCR)
#define QuadSPI_BUF0IND_REG(base)                ((base)->BUF0IND)
#define QuadSPI_BUF1IND_REG(base)                ((base)->BUF1IND)
#define QuadSPI_BUF2IND_REG(base)                ((base)->BUF2IND)
#define QuadSPI_SFAR_REG(base)                   ((base)->SFAR)
#define QuadSPI_SMPR_REG(base)                   ((base)->SMPR)
#define QuadSPI_RBSR_REG(base)                   ((base)->RBSR)
#define QuadSPI_RBCT_REG(base)                   ((base)->RBCT)
#define QuadSPI_TBSR_REG(base)                   ((base)->TBSR)
#define QuadSPI_TBDR_REG(base)                   ((base)->TBDR)
#define QuadSPI_SR_REG(base)                     ((base)->SR)
#define QuadSPI_FR_REG(base)                     ((base)->FR)
#define QuadSPI_RSER_REG(base)                   ((base)->RSER)
#define QuadSPI_SPNDST_REG(base)                 ((base)->SPNDST)
#define QuadSPI_SPTRCLR_REG(base)                ((base)->SPTRCLR)
#define QuadSPI_SFA1AD_REG(base)                 ((base)->SFA1AD)
#define QuadSPI_SFA2AD_REG(base)                 ((base)->SFA2AD)
#define QuadSPI_SFB1AD_REG(base)                 ((base)->SFB1AD)
#define QuadSPI_SFB2AD_REG(base)                 ((base)->SFB2AD)
#define QuadSPI_RBDR_REG(base,index)             ((base)->RBDR[index])
#define QuadSPI_LUTKEY_REG(base)                 ((base)->LUTKEY)
#define QuadSPI_LCKCR_REG(base)                  ((base)->LCKCR)
#define QuadSPI_LUT_REG(base,index)              ((base)->LUT[index])

/*!
 * @}
 */ /* end of group QuadSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- QuadSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Register_Masks QuadSPI Register Masks
 * @{
 */

/*! @name MCR - Module Configuration Register */
/*! @{ */
#define QuadSPI_MCR_SWRSTSD_MASK                 (0x1U)
#define QuadSPI_MCR_SWRSTSD_SHIFT                (0U)
#define QuadSPI_MCR_SWRSTHD_MASK                 (0x2U)
#define QuadSPI_MCR_SWRSTHD_SHIFT                (1U)
#define QuadSPI_MCR_END_CFG_MASK                 (0xCU)
#define QuadSPI_MCR_END_CFG_SHIFT                (2U)
#define QuadSPI_MCR_END_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_MCR_END_CFG_SHIFT)) & QuadSPI_MCR_END_CFG_MASK)
#define QuadSPI_MCR_DQS_EN_MASK                  (0x40U)
#define QuadSPI_MCR_DQS_EN_SHIFT                 (6U)
#define QuadSPI_MCR_DDR_EN_MASK                  (0x80U)
#define QuadSPI_MCR_DDR_EN_SHIFT                 (7U)
#define QuadSPI_MCR_CLR_RXF_MASK                 (0x400U)
#define QuadSPI_MCR_CLR_RXF_SHIFT                (10U)
#define QuadSPI_MCR_CLR_TXF_MASK                 (0x800U)
#define QuadSPI_MCR_CLR_TXF_SHIFT                (11U)
#define QuadSPI_MCR_MDIS_MASK                    (0x4000U)
#define QuadSPI_MCR_MDIS_SHIFT                   (14U)
#define QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_MASK   (0x1000000U)
#define QuadSPI_MCR_DQS_LOOPBACK_FROM_PAD_SHIFT  (24U)
#define QuadSPI_MCR_DQS_LOOPBACK_EN_MASK         (0x2000000U)
#define QuadSPI_MCR_DQS_LOOPBACK_EN_SHIFT        (25U)
#define QuadSPI_MCR_DQS_PHASE_EN_MASK            (0x4000000U)
#define QuadSPI_MCR_DQS_PHASE_EN_SHIFT           (26U)
/*! @} */

/*! @name IPCR - IP Configuration Register */
/*! @{ */
#define QuadSPI_IPCR_IDATSZ_MASK                 (0xFFFFU)
#define QuadSPI_IPCR_IDATSZ_SHIFT                (0U)
#define QuadSPI_IPCR_IDATSZ(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_IPCR_IDATSZ_SHIFT)) & QuadSPI_IPCR_IDATSZ_MASK)
#define QuadSPI_IPCR_PAR_EN_MASK                 (0x10000U)
#define QuadSPI_IPCR_PAR_EN_SHIFT                (16U)
#define QuadSPI_IPCR_SEQID_MASK                  (0xF000000U)
#define QuadSPI_IPCR_SEQID_SHIFT                 (24U)
#define QuadSPI_IPCR_SEQID(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_IPCR_SEQID_SHIFT)) & QuadSPI_IPCR_SEQID_MASK)
/*! @} */

/*! @name FLSHCR - Flash Configuration Register */
/*! @{ */
#define QuadSPI_FLSHCR_TCSS_MASK                 (0xFU)
#define QuadSPI_FLSHCR_TCSS_SHIFT                (0U)
#define QuadSPI_FLSHCR_TCSS(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TCSS_SHIFT)) & QuadSPI_FLSHCR_TCSS_MASK)
#define QuadSPI_FLSHCR_TCSH_MASK                 (0xF00U)
#define QuadSPI_FLSHCR_TCSH_SHIFT                (8U)
#define QuadSPI_FLSHCR_TCSH(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TCSH_SHIFT)) & QuadSPI_FLSHCR_TCSH_MASK)
#define QuadSPI_FLSHCR_TDH_MASK                  (0x30000U)
#define QuadSPI_FLSHCR_TDH_SHIFT                 (16U)
/*! TDH
 *  0b00..Data aligned with the posedge of Internal reference clock of QuadSPI
 *  0b01..Data aligned with 2x serial flash half clock
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define QuadSPI_FLSHCR_TDH(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_FLSHCR_TDH_SHIFT)) & QuadSPI_FLSHCR_TDH_MASK)
/*! @} */

/*! @name BUF0CR - Buffer0 Configuration Register */
/*! @{ */
#define QuadSPI_BUF0CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF0CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF0CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0CR_MSTRID_SHIFT)) & QuadSPI_BUF0CR_MSTRID_MASK)
#define QuadSPI_BUF0CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF0CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF0CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0CR_ADATSZ_SHIFT)) & QuadSPI_BUF0CR_ADATSZ_MASK)
#define QuadSPI_BUF0CR_HP_EN_MASK                (0x80000000U)
#define QuadSPI_BUF0CR_HP_EN_SHIFT               (31U)
/*! @} */

/*! @name BUF1CR - Buffer1 Configuration Register */
/*! @{ */
#define QuadSPI_BUF1CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF1CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF1CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1CR_MSTRID_SHIFT)) & QuadSPI_BUF1CR_MSTRID_MASK)
#define QuadSPI_BUF1CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF1CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF1CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1CR_ADATSZ_SHIFT)) & QuadSPI_BUF1CR_ADATSZ_MASK)
/*! @} */

/*! @name BUF2CR - Buffer2 Configuration Register */
/*! @{ */
#define QuadSPI_BUF2CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF2CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF2CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2CR_MSTRID_SHIFT)) & QuadSPI_BUF2CR_MSTRID_MASK)
#define QuadSPI_BUF2CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF2CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF2CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2CR_ADATSZ_SHIFT)) & QuadSPI_BUF2CR_ADATSZ_MASK)
/*! @} */

/*! @name BUF3CR - Buffer3 Configuration Register */
/*! @{ */
#define QuadSPI_BUF3CR_MSTRID_MASK               (0xFU)
#define QuadSPI_BUF3CR_MSTRID_SHIFT              (0U)
#define QuadSPI_BUF3CR_MSTRID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF3CR_MSTRID_SHIFT)) & QuadSPI_BUF3CR_MSTRID_MASK)
#define QuadSPI_BUF3CR_ADATSZ_MASK               (0xFF00U)
#define QuadSPI_BUF3CR_ADATSZ_SHIFT              (8U)
#define QuadSPI_BUF3CR_ADATSZ(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF3CR_ADATSZ_SHIFT)) & QuadSPI_BUF3CR_ADATSZ_MASK)
#define QuadSPI_BUF3CR_ALLMST_MASK               (0x80000000U)
#define QuadSPI_BUF3CR_ALLMST_SHIFT              (31U)
/*! @} */

/*! @name BFGENCR - Buffer Generic Configuration Register */
/*! @{ */
#define QuadSPI_BFGENCR_SEQID_MASK               (0xF000U)
#define QuadSPI_BFGENCR_SEQID_SHIFT              (12U)
#define QuadSPI_BFGENCR_SEQID(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_BFGENCR_SEQID_SHIFT)) & QuadSPI_BFGENCR_SEQID_MASK)
#define QuadSPI_BFGENCR_PAR_EN_MASK              (0x10000U)
#define QuadSPI_BFGENCR_PAR_EN_SHIFT             (16U)
/*! @} */

/*! @name BUF0IND - Buffer0 Top Index Register */
/*! @{ */
#define QuadSPI_BUF0IND_TPINDX0_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF0IND_TPINDX0_SHIFT            (3U)
#define QuadSPI_BUF0IND_TPINDX0(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF0IND_TPINDX0_SHIFT)) & QuadSPI_BUF0IND_TPINDX0_MASK)
/*! @} */

/*! @name BUF1IND - Buffer1 Top Index Register */
/*! @{ */
#define QuadSPI_BUF1IND_TPINDX1_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF1IND_TPINDX1_SHIFT            (3U)
#define QuadSPI_BUF1IND_TPINDX1(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF1IND_TPINDX1_SHIFT)) & QuadSPI_BUF1IND_TPINDX1_MASK)
/*! @} */

/*! @name BUF2IND - Buffer2 Top Index Register */
/*! @{ */
#define QuadSPI_BUF2IND_TPINDX2_MASK             (0xFFFFFFF8U)
#define QuadSPI_BUF2IND_TPINDX2_SHIFT            (3U)
#define QuadSPI_BUF2IND_TPINDX2(x)               (((uint32_t)(((uint32_t)(x)) << QuadSPI_BUF2IND_TPINDX2_SHIFT)) & QuadSPI_BUF2IND_TPINDX2_MASK)
/*! @} */

/*! @name SFAR - Serial Flash Address Register */
/*! @{ */
#define QuadSPI_SFAR_SFADR_MASK                  (0xFFFFFFFFU)
#define QuadSPI_SFAR_SFADR_SHIFT                 (0U)
#define QuadSPI_SFAR_SFADR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFAR_SFADR_SHIFT)) & QuadSPI_SFAR_SFADR_MASK)
/*! @} */

/*! @name SMPR - Sampling Register */
/*! @{ */
#define QuadSPI_SMPR_SDRSMP_MASK                 (0x60U)
#define QuadSPI_SMPR_SDRSMP_SHIFT                (5U)
#define QuadSPI_SMPR_SDRSMP(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_SMPR_SDRSMP_SHIFT)) & QuadSPI_SMPR_SDRSMP_MASK)
#define QuadSPI_SMPR_DDRSMP_MASK                 (0x70000U)
#define QuadSPI_SMPR_DDRSMP_SHIFT                (16U)
#define QuadSPI_SMPR_DDRSMP(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_SMPR_DDRSMP_SHIFT)) & QuadSPI_SMPR_DDRSMP_MASK)
/*! @} */

/*! @name RBSR - RX Buffer Status Register */
/*! @{ */
#define QuadSPI_RBSR_RDBFL_MASK                  (0x3F00U)
#define QuadSPI_RBSR_RDBFL_SHIFT                 (8U)
#define QuadSPI_RBSR_RDBFL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBSR_RDBFL_SHIFT)) & QuadSPI_RBSR_RDBFL_MASK)
#define QuadSPI_RBSR_RDCTR_MASK                  (0xFFFF0000U)
#define QuadSPI_RBSR_RDCTR_SHIFT                 (16U)
#define QuadSPI_RBSR_RDCTR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBSR_RDCTR_SHIFT)) & QuadSPI_RBSR_RDCTR_MASK)
/*! @} */

/*! @name RBCT - RX Buffer Control Register */
/*! @{ */
#define QuadSPI_RBCT_WMRK_MASK                   (0x1FU)
#define QuadSPI_RBCT_WMRK_SHIFT                  (0U)
#define QuadSPI_RBCT_WMRK(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBCT_WMRK_SHIFT)) & QuadSPI_RBCT_WMRK_MASK)
#define QuadSPI_RBCT_RXBRD_MASK                  (0x100U)
#define QuadSPI_RBCT_RXBRD_SHIFT                 (8U)
/*! @} */

/*! @name TBSR - TX Buffer Status Register */
/*! @{ */
#define QuadSPI_TBSR_TRBFL_MASK                  (0x1F00U)
#define QuadSPI_TBSR_TRBFL_SHIFT                 (8U)
#define QuadSPI_TBSR_TRBFL(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBSR_TRBFL_SHIFT)) & QuadSPI_TBSR_TRBFL_MASK)
#define QuadSPI_TBSR_TRCTR_MASK                  (0xFFFF0000U)
#define QuadSPI_TBSR_TRCTR_SHIFT                 (16U)
#define QuadSPI_TBSR_TRCTR(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBSR_TRCTR_SHIFT)) & QuadSPI_TBSR_TRCTR_MASK)
/*! @} */

/*! @name TBDR - TX Buffer Data Register */
/*! @{ */
#define QuadSPI_TBDR_TXDATA_MASK                 (0xFFFFFFFFU)
#define QuadSPI_TBDR_TXDATA_SHIFT                (0U)
#define QuadSPI_TBDR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_TBDR_TXDATA_SHIFT)) & QuadSPI_TBDR_TXDATA_MASK)
/*! @} */

/*! @name SR - Status Register */
/*! @{ */
#define QuadSPI_SR_BUSY_MASK                     (0x1U)
#define QuadSPI_SR_BUSY_SHIFT                    (0U)
#define QuadSPI_SR_IP_ACC_MASK                   (0x2U)
#define QuadSPI_SR_IP_ACC_SHIFT                  (1U)
#define QuadSPI_SR_AHB_ACC_MASK                  (0x4U)
#define QuadSPI_SR_AHB_ACC_SHIFT                 (2U)
#define QuadSPI_SR_AHBGNT_MASK                   (0x20U)
#define QuadSPI_SR_AHBGNT_SHIFT                  (5U)
#define QuadSPI_SR_AHBTRN_MASK                   (0x40U)
#define QuadSPI_SR_AHBTRN_SHIFT                  (6U)
#define QuadSPI_SR_AHB0NE_MASK                   (0x80U)
#define QuadSPI_SR_AHB0NE_SHIFT                  (7U)
#define QuadSPI_SR_AHB1NE_MASK                   (0x100U)
#define QuadSPI_SR_AHB1NE_SHIFT                  (8U)
#define QuadSPI_SR_AHB2NE_MASK                   (0x200U)
#define QuadSPI_SR_AHB2NE_SHIFT                  (9U)
#define QuadSPI_SR_AHB3NE_MASK                   (0x400U)
#define QuadSPI_SR_AHB3NE_SHIFT                  (10U)
#define QuadSPI_SR_AHB0FUL_MASK                  (0x800U)
#define QuadSPI_SR_AHB0FUL_SHIFT                 (11U)
#define QuadSPI_SR_AHB1FUL_MASK                  (0x1000U)
#define QuadSPI_SR_AHB1FUL_SHIFT                 (12U)
#define QuadSPI_SR_AHB2FUL_MASK                  (0x2000U)
#define QuadSPI_SR_AHB2FUL_SHIFT                 (13U)
#define QuadSPI_SR_AHB3FUL_MASK                  (0x4000U)
#define QuadSPI_SR_AHB3FUL_SHIFT                 (14U)
#define QuadSPI_SR_RXWE_MASK                     (0x10000U)
#define QuadSPI_SR_RXWE_SHIFT                    (16U)
#define QuadSPI_SR_RXFULL_MASK                   (0x80000U)
#define QuadSPI_SR_RXFULL_SHIFT                  (19U)
#define QuadSPI_SR_RXDMA_MASK                    (0x800000U)
#define QuadSPI_SR_RXDMA_SHIFT                   (23U)
#define QuadSPI_SR_TXEDA_MASK                    (0x1000000U)
#define QuadSPI_SR_TXEDA_SHIFT                   (24U)
#define QuadSPI_SR_TXFULL_MASK                   (0x8000000U)
#define QuadSPI_SR_TXFULL_SHIFT                  (27U)
#define QuadSPI_SR_DLPSMP_MASK                   (0xE0000000U)
#define QuadSPI_SR_DLPSMP_SHIFT                  (29U)
#define QuadSPI_SR_DLPSMP(x)                     (((uint32_t)(((uint32_t)(x)) << QuadSPI_SR_DLPSMP_SHIFT)) & QuadSPI_SR_DLPSMP_MASK)
/*! @} */

/*! @name FR - Flag Register */
/*! @{ */
#define QuadSPI_FR_TFF_MASK                      (0x1U)
#define QuadSPI_FR_TFF_SHIFT                     (0U)
#define QuadSPI_FR_IPGEF_MASK                    (0x10U)
#define QuadSPI_FR_IPGEF_SHIFT                   (4U)
#define QuadSPI_FR_IPIEF_MASK                    (0x40U)
#define QuadSPI_FR_IPIEF_SHIFT                   (6U)
#define QuadSPI_FR_IPAEF_MASK                    (0x80U)
#define QuadSPI_FR_IPAEF_SHIFT                   (7U)
#define QuadSPI_FR_IUEF_MASK                     (0x800U)
#define QuadSPI_FR_IUEF_SHIFT                    (11U)
#define QuadSPI_FR_ABOF_MASK                     (0x1000U)
#define QuadSPI_FR_ABOF_SHIFT                    (12U)
#define QuadSPI_FR_ABSEF_MASK                    (0x8000U)
#define QuadSPI_FR_ABSEF_SHIFT                   (15U)
#define QuadSPI_FR_RBDF_MASK                     (0x10000U)
#define QuadSPI_FR_RBDF_SHIFT                    (16U)
#define QuadSPI_FR_RBOF_MASK                     (0x20000U)
#define QuadSPI_FR_RBOF_SHIFT                    (17U)
#define QuadSPI_FR_ILLINE_MASK                   (0x800000U)
#define QuadSPI_FR_ILLINE_SHIFT                  (23U)
#define QuadSPI_FR_TBUF_MASK                     (0x4000000U)
#define QuadSPI_FR_TBUF_SHIFT                    (26U)
#define QuadSPI_FR_TBFF_MASK                     (0x8000000U)
#define QuadSPI_FR_TBFF_SHIFT                    (27U)
#define QuadSPI_FR_DLPFF_MASK                    (0x80000000U)
#define QuadSPI_FR_DLPFF_SHIFT                   (31U)
/*! @} */

/*! @name RSER - Interrupt and DMA Request Select and Enable Register */
/*! @{ */
#define QuadSPI_RSER_TFIE_MASK                   (0x1U)
#define QuadSPI_RSER_TFIE_SHIFT                  (0U)
#define QuadSPI_RSER_IPGEIE_MASK                 (0x10U)
#define QuadSPI_RSER_IPGEIE_SHIFT                (4U)
#define QuadSPI_RSER_IPIEIE_MASK                 (0x40U)
#define QuadSPI_RSER_IPIEIE_SHIFT                (6U)
#define QuadSPI_RSER_IPAEIE_MASK                 (0x80U)
#define QuadSPI_RSER_IPAEIE_SHIFT                (7U)
#define QuadSPI_RSER_IUEIE_MASK                  (0x800U)
#define QuadSPI_RSER_IUEIE_SHIFT                 (11U)
#define QuadSPI_RSER_ABOIE_MASK                  (0x1000U)
#define QuadSPI_RSER_ABOIE_SHIFT                 (12U)
#define QuadSPI_RSER_ABSEIE_MASK                 (0x8000U)
#define QuadSPI_RSER_ABSEIE_SHIFT                (15U)
#define QuadSPI_RSER_RBDIE_MASK                  (0x10000U)
#define QuadSPI_RSER_RBDIE_SHIFT                 (16U)
#define QuadSPI_RSER_RBOIE_MASK                  (0x20000U)
#define QuadSPI_RSER_RBOIE_SHIFT                 (17U)
#define QuadSPI_RSER_RBDDE_MASK                  (0x200000U)
#define QuadSPI_RSER_RBDDE_SHIFT                 (21U)
#define QuadSPI_RSER_ILLINIE_MASK                (0x800000U)
#define QuadSPI_RSER_ILLINIE_SHIFT               (23U)
#define QuadSPI_RSER_TBUIE_MASK                  (0x4000000U)
#define QuadSPI_RSER_TBUIE_SHIFT                 (26U)
#define QuadSPI_RSER_TBFIE_MASK                  (0x8000000U)
#define QuadSPI_RSER_TBFIE_SHIFT                 (27U)
#define QuadSPI_RSER_DLPFIE_MASK                 (0x80000000U)
#define QuadSPI_RSER_DLPFIE_SHIFT                (31U)
/*! @} */

/*! @name SPNDST - Sequence Suspend Status Register */
/*! @{ */
#define QuadSPI_SPNDST_SUSPND_MASK               (0x1U)
#define QuadSPI_SPNDST_SUSPND_SHIFT              (0U)
#define QuadSPI_SPNDST_SPDBUF_MASK               (0xC0U)
#define QuadSPI_SPNDST_SPDBUF_SHIFT              (6U)
#define QuadSPI_SPNDST_SPDBUF(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPNDST_SPDBUF_SHIFT)) & QuadSPI_SPNDST_SPDBUF_MASK)
#define QuadSPI_SPNDST_DATLFT_MASK               (0xFE00U)
#define QuadSPI_SPNDST_DATLFT_SHIFT              (9U)
#define QuadSPI_SPNDST_DATLFT(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SPNDST_DATLFT_SHIFT)) & QuadSPI_SPNDST_DATLFT_MASK)
/*! @} */

/*! @name SPTRCLR - Sequence Pointer Clear Register */
/*! @{ */
#define QuadSPI_SPTRCLR_BFPTRC_MASK              (0x1U)
#define QuadSPI_SPTRCLR_BFPTRC_SHIFT             (0U)
#define QuadSPI_SPTRCLR_IPPTRC_MASK              (0x100U)
#define QuadSPI_SPTRCLR_IPPTRC_SHIFT             (8U)
/*! @} */

/*! @name SFA1AD - Serial Flash A1 Top Address */
/*! @{ */
#define QuadSPI_SFA1AD_TPADA1_MASK               (0xFFFFFC00U)
#define QuadSPI_SFA1AD_TPADA1_SHIFT              (10U)
#define QuadSPI_SFA1AD_TPADA1(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFA1AD_TPADA1_SHIFT)) & QuadSPI_SFA1AD_TPADA1_MASK)
/*! @} */

/*! @name SFA2AD - Serial Flash A2 Top Address */
/*! @{ */
#define QuadSPI_SFA2AD_TPADA2_MASK               (0xFFFFFC00U)
#define QuadSPI_SFA2AD_TPADA2_SHIFT              (10U)
#define QuadSPI_SFA2AD_TPADA2(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFA2AD_TPADA2_SHIFT)) & QuadSPI_SFA2AD_TPADA2_MASK)
/*! @} */

/*! @name SFB1AD - Serial Flash B1Top Address */
/*! @{ */
#define QuadSPI_SFB1AD_TPADB1_MASK               (0xFFFFFC00U)
#define QuadSPI_SFB1AD_TPADB1_SHIFT              (10U)
#define QuadSPI_SFB1AD_TPADB1(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFB1AD_TPADB1_SHIFT)) & QuadSPI_SFB1AD_TPADB1_MASK)
/*! @} */

/*! @name SFB2AD - Serial Flash B2Top Address */
/*! @{ */
#define QuadSPI_SFB2AD_TPADB2_MASK               (0xFFFFFC00U)
#define QuadSPI_SFB2AD_TPADB2_SHIFT              (10U)
#define QuadSPI_SFB2AD_TPADB2(x)                 (((uint32_t)(((uint32_t)(x)) << QuadSPI_SFB2AD_TPADB2_SHIFT)) & QuadSPI_SFB2AD_TPADB2_MASK)
/*! @} */

/*! @name RBDR - RX Buffer Data Register */
/*! @{ */
#define QuadSPI_RBDR_RXDATA_MASK                 (0xFFFFFFFFU)
#define QuadSPI_RBDR_RXDATA_SHIFT                (0U)
#define QuadSPI_RBDR_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << QuadSPI_RBDR_RXDATA_SHIFT)) & QuadSPI_RBDR_RXDATA_MASK)
/*! @} */

/* The count of QuadSPI_RBDR */
#define QuadSPI_RBDR_COUNT                       (32U)

/*! @name LUTKEY - LUT Key Register */
/*! @{ */
#define QuadSPI_LUTKEY_KEY_MASK                  (0xFFFFFFFFU)
#define QuadSPI_LUTKEY_KEY_SHIFT                 (0U)
#define QuadSPI_LUTKEY_KEY(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUTKEY_KEY_SHIFT)) & QuadSPI_LUTKEY_KEY_MASK)
/*! @} */

/*! @name LCKCR - LUT Lock Configuration Register */
/*! @{ */
#define QuadSPI_LCKCR_LOCK_MASK                  (0x1U)
#define QuadSPI_LCKCR_LOCK_SHIFT                 (0U)
#define QuadSPI_LCKCR_UNLOCK_MASK                (0x2U)
#define QuadSPI_LCKCR_UNLOCK_SHIFT               (1U)
/*! @} */

/*! @name LUT - Look-up Table register */
/*! @{ */
#define QuadSPI_LUT_OPRND0_MASK                  (0xFFU)
#define QuadSPI_LUT_OPRND0_SHIFT                 (0U)
#define QuadSPI_LUT_OPRND0(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_OPRND0_SHIFT)) & QuadSPI_LUT_OPRND0_MASK)
#define QuadSPI_LUT_PAD0_MASK                    (0x300U)
#define QuadSPI_LUT_PAD0_SHIFT                   (8U)
/*! PAD0 - Pad information for INSTR0.
 *  0b00..1 Pad
 *  0b01..2 Pads
 *  0b10..4 Pads
 *  0b11..NA
 */
#define QuadSPI_LUT_PAD0(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_PAD0_SHIFT)) & QuadSPI_LUT_PAD0_MASK)
#define QuadSPI_LUT_INSTR0_MASK                  (0xFC00U)
#define QuadSPI_LUT_INSTR0_SHIFT                 (10U)
#define QuadSPI_LUT_INSTR0(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_INSTR0_SHIFT)) & QuadSPI_LUT_INSTR0_MASK)
#define QuadSPI_LUT_OPRND1_MASK                  (0xFF0000U)
#define QuadSPI_LUT_OPRND1_SHIFT                 (16U)
#define QuadSPI_LUT_OPRND1(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_OPRND1_SHIFT)) & QuadSPI_LUT_OPRND1_MASK)
#define QuadSPI_LUT_PAD1_MASK                    (0x3000000U)
#define QuadSPI_LUT_PAD1_SHIFT                   (24U)
/*! PAD1 - Pad information for INSTR1.
 *  0b00..1 Pad
 *  0b01..2 Pads
 *  0b10..4 Pads
 *  0b11..NA
 */
#define QuadSPI_LUT_PAD1(x)                      (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_PAD1_SHIFT)) & QuadSPI_LUT_PAD1_MASK)
#define QuadSPI_LUT_INSTR1_MASK                  (0xFC000000U)
#define QuadSPI_LUT_INSTR1_SHIFT                 (26U)
#define QuadSPI_LUT_INSTR1(x)                    (((uint32_t)(((uint32_t)(x)) << QuadSPI_LUT_INSTR1_SHIFT)) & QuadSPI_LUT_INSTR1_MASK)
/*! @} */

/* The count of QuadSPI_LUT */
#define QuadSPI_LUT_COUNT                        (64U)


/*!
 * @}
 */ /* end of group QuadSPI_Register_Masks */


/* QuadSPI - Peripheral instance base addresses */
/** Peripheral QuadSPI base pointer */
#define QuadSPI_BASE_PTR                         ((QuadSPI_MemMapPtr)0x30BB0000u)
/** Array initializer of QuadSPI peripheral base pointers */
#define QuadSPI_BASE_PTRS                        { QuadSPI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- QuadSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup QuadSPI_Register_Accessor_Macros QuadSPI - Register accessor macros
 * @{
 */


/* QuadSPI - Register instance definitions */
/* QuadSPI */
#define QuadSPI_MCR                              QuadSPI_MCR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_IPCR                             QuadSPI_IPCR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_FLSHCR                           QuadSPI_FLSHCR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF0CR                           QuadSPI_BUF0CR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF1CR                           QuadSPI_BUF1CR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF2CR                           QuadSPI_BUF2CR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF3CR                           QuadSPI_BUF3CR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BFGENCR                          QuadSPI_BFGENCR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF0IND                          QuadSPI_BUF0IND_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF1IND                          QuadSPI_BUF1IND_REG(QuadSPI_BASE_PTR)
#define QuadSPI_BUF2IND                          QuadSPI_BUF2IND_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SFAR                             QuadSPI_SFAR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SMPR                             QuadSPI_SMPR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_RBSR                             QuadSPI_RBSR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_RBCT                             QuadSPI_RBCT_REG(QuadSPI_BASE_PTR)
#define QuadSPI_TBSR                             QuadSPI_TBSR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_TBDR                             QuadSPI_TBDR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SR                               QuadSPI_SR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_FR                               QuadSPI_FR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_RSER                             QuadSPI_RSER_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SPNDST                           QuadSPI_SPNDST_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SPTRCLR                          QuadSPI_SPTRCLR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SFA1AD                           QuadSPI_SFA1AD_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SFA2AD                           QuadSPI_SFA2AD_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SFB1AD                           QuadSPI_SFB1AD_REG(QuadSPI_BASE_PTR)
#define QuadSPI_SFB2AD                           QuadSPI_SFB2AD_REG(QuadSPI_BASE_PTR)
#define QuadSPI_RBDR0                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,0)
#define QuadSPI_RBDR1                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,1)
#define QuadSPI_RBDR2                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,2)
#define QuadSPI_RBDR3                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,3)
#define QuadSPI_RBDR4                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,4)
#define QuadSPI_RBDR5                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,5)
#define QuadSPI_RBDR6                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,6)
#define QuadSPI_RBDR7                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,7)
#define QuadSPI_RBDR8                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,8)
#define QuadSPI_RBDR9                            QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,9)
#define QuadSPI_RBDR10                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,10)
#define QuadSPI_RBDR11                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,11)
#define QuadSPI_RBDR12                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,12)
#define QuadSPI_RBDR13                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,13)
#define QuadSPI_RBDR14                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,14)
#define QuadSPI_RBDR15                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,15)
#define QuadSPI_RBDR16                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,16)
#define QuadSPI_RBDR17                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,17)
#define QuadSPI_RBDR18                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,18)
#define QuadSPI_RBDR19                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,19)
#define QuadSPI_RBDR20                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,20)
#define QuadSPI_RBDR21                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,21)
#define QuadSPI_RBDR22                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,22)
#define QuadSPI_RBDR23                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,23)
#define QuadSPI_RBDR24                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,24)
#define QuadSPI_RBDR25                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,25)
#define QuadSPI_RBDR26                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,26)
#define QuadSPI_RBDR27                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,27)
#define QuadSPI_RBDR28                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,28)
#define QuadSPI_RBDR29                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,29)
#define QuadSPI_RBDR30                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,30)
#define QuadSPI_RBDR31                           QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,31)
#define QuadSPI_LUTKEY                           QuadSPI_LUTKEY_REG(QuadSPI_BASE_PTR)
#define QuadSPI_LCKCR                            QuadSPI_LCKCR_REG(QuadSPI_BASE_PTR)
#define QuadSPI_LUT0                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,0)
#define QuadSPI_LUT1                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,1)
#define QuadSPI_LUT2                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,2)
#define QuadSPI_LUT3                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,3)
#define QuadSPI_LUT4                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,4)
#define QuadSPI_LUT5                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,5)
#define QuadSPI_LUT6                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,6)
#define QuadSPI_LUT7                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,7)
#define QuadSPI_LUT8                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,8)
#define QuadSPI_LUT9                             QuadSPI_LUT_REG(QuadSPI_BASE_PTR,9)
#define QuadSPI_LUT10                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,10)
#define QuadSPI_LUT11                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,11)
#define QuadSPI_LUT12                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,12)
#define QuadSPI_LUT13                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,13)
#define QuadSPI_LUT14                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,14)
#define QuadSPI_LUT15                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,15)
#define QuadSPI_LUT16                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,16)
#define QuadSPI_LUT17                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,17)
#define QuadSPI_LUT18                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,18)
#define QuadSPI_LUT19                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,19)
#define QuadSPI_LUT20                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,20)
#define QuadSPI_LUT21                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,21)
#define QuadSPI_LUT22                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,22)
#define QuadSPI_LUT23                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,23)
#define QuadSPI_LUT24                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,24)
#define QuadSPI_LUT25                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,25)
#define QuadSPI_LUT26                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,26)
#define QuadSPI_LUT27                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,27)
#define QuadSPI_LUT28                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,28)
#define QuadSPI_LUT29                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,29)
#define QuadSPI_LUT30                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,30)
#define QuadSPI_LUT31                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,31)
#define QuadSPI_LUT32                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,32)
#define QuadSPI_LUT33                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,33)
#define QuadSPI_LUT34                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,34)
#define QuadSPI_LUT35                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,35)
#define QuadSPI_LUT36                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,36)
#define QuadSPI_LUT37                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,37)
#define QuadSPI_LUT38                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,38)
#define QuadSPI_LUT39                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,39)
#define QuadSPI_LUT40                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,40)
#define QuadSPI_LUT41                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,41)
#define QuadSPI_LUT42                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,42)
#define QuadSPI_LUT43                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,43)
#define QuadSPI_LUT44                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,44)
#define QuadSPI_LUT45                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,45)
#define QuadSPI_LUT46                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,46)
#define QuadSPI_LUT47                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,47)
#define QuadSPI_LUT48                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,48)
#define QuadSPI_LUT49                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,49)
#define QuadSPI_LUT50                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,50)
#define QuadSPI_LUT51                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,51)
#define QuadSPI_LUT52                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,52)
#define QuadSPI_LUT53                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,53)
#define QuadSPI_LUT54                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,54)
#define QuadSPI_LUT55                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,55)
#define QuadSPI_LUT56                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,56)
#define QuadSPI_LUT57                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,57)
#define QuadSPI_LUT58                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,58)
#define QuadSPI_LUT59                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,59)
#define QuadSPI_LUT60                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,60)
#define QuadSPI_LUT61                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,61)
#define QuadSPI_LUT62                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,62)
#define QuadSPI_LUT63                            QuadSPI_LUT_REG(QuadSPI_BASE_PTR,63)

/* QuadSPI - Register array accessors */
#define QuadSPI_RBDR(index)                      QuadSPI_RBDR_REG(QuadSPI_BASE_PTR,index)
#define QuadSPI_LUT(index)                       QuadSPI_LUT_REG(QuadSPI_BASE_PTR,index)

/*!
 * @}
 */ /* end of group QuadSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group QuadSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- RDC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Peripheral RDC
 * @{
 */

/** RDC - Peripheral register structure */
typedef struct RDC_MemMap {
  uint32_t VIR;                                    /**< Version Information, offset: 0x0 */
  uint8_t RESERVED_0[32];
  uint32_t STAT;                                   /**< Status, offset: 0x24 */
  uint32_t INTCTRL;                                /**< Interrupt and Control, offset: 0x28 */
  uint32_t INTSTAT;                                /**< Interrupt Status, offset: 0x2C */
  uint8_t RESERVED_1[464];
  uint32_t MDA[27];                                /**< Master Domain Assignment, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_2[404];
  uint32_t PDAP[118];                              /**< Peripheral Domain Access Permissions, array offset: 0x400, array step: 0x4 */
  uint8_t RESERVED_3[552];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    uint32_t MRSA;                                   /**< Memory Region Start Address, array offset: 0x800, array step: 0x10 */
    uint32_t MREA;                                   /**< Memory Region End Address, array offset: 0x804, array step: 0x10 */
    uint32_t MRC;                                    /**< Memory Region Control, array offset: 0x808, array step: 0x10 */
    uint32_t MRVS;                                   /**< Memory Region Violation Status, array offset: 0x80C, array step: 0x10 */
  } MR[52];
} volatile *RDC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Accessor_Macros RDC - Register accessor macros
 * @{
 */


/* RDC - Register accessors */
#define RDC_VIR_REG(base)                        ((base)->VIR)
#define RDC_STAT_REG(base)                       ((base)->STAT)
#define RDC_INTCTRL_REG(base)                    ((base)->INTCTRL)
#define RDC_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define RDC_MDA_REG(base,index)                  ((base)->MDA[index])
#define RDC_PDAP_REG(base,index)                 ((base)->PDAP[index])
#define RDC_MRSA_REG(base,index)                 ((base)->MR[index].MRSA)
#define RDC_MREA_REG(base,index)                 ((base)->MR[index].MREA)
#define RDC_MRC_REG(base,index)                  ((base)->MR[index].MRC)
#define RDC_MRVS_REG(base,index)                 ((base)->MR[index].MRVS)

/*!
 * @}
 */ /* end of group RDC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RDC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Masks RDC Register Masks
 * @{
 */

/*! @name VIR - Version Information */
/*! @{ */
#define RDC_VIR_NDID_MASK                        (0xFU)
#define RDC_VIR_NDID_SHIFT                       (0U)
#define RDC_VIR_NDID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NDID_SHIFT)) & RDC_VIR_NDID_MASK)
#define RDC_VIR_NMSTR_MASK                       (0xFF0U)
#define RDC_VIR_NMSTR_SHIFT                      (4U)
#define RDC_VIR_NMSTR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NMSTR_SHIFT)) & RDC_VIR_NMSTR_MASK)
#define RDC_VIR_NPER_MASK                        (0xFF000U)
#define RDC_VIR_NPER_SHIFT                       (12U)
#define RDC_VIR_NPER(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NPER_SHIFT)) & RDC_VIR_NPER_MASK)
#define RDC_VIR_NRGN_MASK                        (0xFF00000U)
#define RDC_VIR_NRGN_SHIFT                       (20U)
#define RDC_VIR_NRGN(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NRGN_SHIFT)) & RDC_VIR_NRGN_MASK)
/*! @} */

/*! @name STAT - Status */
/*! @{ */
#define RDC_STAT_DID_MASK                        (0xFU)
#define RDC_STAT_DID_SHIFT                       (0U)
#define RDC_STAT_DID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_STAT_DID_SHIFT)) & RDC_STAT_DID_MASK)
#define RDC_STAT_PDS_MASK                        (0x100U)
#define RDC_STAT_PDS_SHIFT                       (8U)
/*! @} */

/*! @name INTCTRL - Interrupt and Control */
/*! @{ */
#define RDC_INTCTRL_RCI_EN_MASK                  (0x1U)
#define RDC_INTCTRL_RCI_EN_SHIFT                 (0U)
/*! @} */

/*! @name INTSTAT - Interrupt Status */
/*! @{ */
#define RDC_INTSTAT_INT_MASK                     (0x1U)
#define RDC_INTSTAT_INT_SHIFT                    (0U)
/*! @} */

/*! @name MDA - Master Domain Assignment */
/*! @{ */
#define RDC_MDA_DID_MASK                         (0x3U)
#define RDC_MDA_DID_SHIFT                        (0U)
/*! DID - Domain ID
 *  0b00..Master assigned to Processing Domain 0
 *  0b01..Master assigned to Processing Domain 1
 *  0b10..Master assigned to Processing Domain 2
 *  0b11..Master assigned to Processing Domain 3
 */
#define RDC_MDA_DID(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MDA_DID_SHIFT)) & RDC_MDA_DID_MASK)
#define RDC_MDA_LCK_MASK                         (0x80000000U)
#define RDC_MDA_LCK_SHIFT                        (31U)
/*! @} */

/* The count of RDC_MDA */
#define RDC_MDA_COUNT                            (27U)

/*! @name PDAP - Peripheral Domain Access Permissions */
/*! @{ */
#define RDC_PDAP_D0W_MASK                        (0x1U)
#define RDC_PDAP_D0W_SHIFT                       (0U)
#define RDC_PDAP_D0R_MASK                        (0x2U)
#define RDC_PDAP_D0R_SHIFT                       (1U)
#define RDC_PDAP_D1W_MASK                        (0x4U)
#define RDC_PDAP_D1W_SHIFT                       (2U)
#define RDC_PDAP_D1R_MASK                        (0x8U)
#define RDC_PDAP_D1R_SHIFT                       (3U)
#define RDC_PDAP_D2W_MASK                        (0x10U)
#define RDC_PDAP_D2W_SHIFT                       (4U)
#define RDC_PDAP_D2R_MASK                        (0x20U)
#define RDC_PDAP_D2R_SHIFT                       (5U)
#define RDC_PDAP_D3W_MASK                        (0x40U)
#define RDC_PDAP_D3W_SHIFT                       (6U)
#define RDC_PDAP_D3R_MASK                        (0x80U)
#define RDC_PDAP_D3R_SHIFT                       (7U)
#define RDC_PDAP_SREQ_MASK                       (0x40000000U)
#define RDC_PDAP_SREQ_SHIFT                      (30U)
#define RDC_PDAP_LCK_MASK                        (0x80000000U)
#define RDC_PDAP_LCK_SHIFT                       (31U)
/*! @} */

/* The count of RDC_PDAP */
#define RDC_PDAP_COUNT                           (118U)

/*! @name MRSA - Memory Region Start Address */
/*! @{ */
#define RDC_MRSA_SADR_MASK                       (0xFFFFFF80U)
#define RDC_MRSA_SADR_SHIFT                      (7U)
#define RDC_MRSA_SADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRSA_SADR_SHIFT)) & RDC_MRSA_SADR_MASK)
/*! @} */

/* The count of RDC_MRSA */
#define RDC_MRSA_COUNT                           (52U)

/*! @name MREA - Memory Region End Address */
/*! @{ */
#define RDC_MREA_EADR_MASK                       (0xFFFFFF80U)
#define RDC_MREA_EADR_SHIFT                      (7U)
#define RDC_MREA_EADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MREA_EADR_SHIFT)) & RDC_MREA_EADR_MASK)
/*! @} */

/* The count of RDC_MREA */
#define RDC_MREA_COUNT                           (52U)

/*! @name MRC - Memory Region Control */
/*! @{ */
#define RDC_MRC_D0W_MASK                         (0x1U)
#define RDC_MRC_D0W_SHIFT                        (0U)
#define RDC_MRC_D0R_MASK                         (0x2U)
#define RDC_MRC_D0R_SHIFT                        (1U)
#define RDC_MRC_D1W_MASK                         (0x4U)
#define RDC_MRC_D1W_SHIFT                        (2U)
#define RDC_MRC_D1R_MASK                         (0x8U)
#define RDC_MRC_D1R_SHIFT                        (3U)
#define RDC_MRC_D2W_MASK                         (0x10U)
#define RDC_MRC_D2W_SHIFT                        (4U)
#define RDC_MRC_D2R_MASK                         (0x20U)
#define RDC_MRC_D2R_SHIFT                        (5U)
#define RDC_MRC_D3W_MASK                         (0x40U)
#define RDC_MRC_D3W_SHIFT                        (6U)
#define RDC_MRC_D3R_MASK                         (0x80U)
#define RDC_MRC_D3R_SHIFT                        (7U)
#define RDC_MRC_ENA_MASK                         (0x40000000U)
#define RDC_MRC_ENA_SHIFT                        (30U)
#define RDC_MRC_LCK_MASK                         (0x80000000U)
#define RDC_MRC_LCK_SHIFT                        (31U)
/*! @} */

/* The count of RDC_MRC */
#define RDC_MRC_COUNT                            (52U)

/*! @name MRVS - Memory Region Violation Status */
/*! @{ */
#define RDC_MRVS_VDID_MASK                       (0x3U)
#define RDC_MRVS_VDID_SHIFT                      (0U)
/*! VDID - Violating Domain ID
 *  0b00..Processing Domain 0
 *  0b01..Processing Domain 1
 *  0b10..Processing Domain 2
 *  0b11..Processing Domain 3
 */
#define RDC_MRVS_VDID(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VDID_SHIFT)) & RDC_MRVS_VDID_MASK)
#define RDC_MRVS_AD_MASK                         (0x10U)
#define RDC_MRVS_AD_SHIFT                        (4U)
#define RDC_MRVS_VADR_MASK                       (0xFFFFFFE0U)
#define RDC_MRVS_VADR_SHIFT                      (5U)
#define RDC_MRVS_VADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VADR_SHIFT)) & RDC_MRVS_VADR_MASK)
/*! @} */

/* The count of RDC_MRVS */
#define RDC_MRVS_COUNT                           (52U)


/*!
 * @}
 */ /* end of group RDC_Register_Masks */


/* RDC - Peripheral instance base addresses */
/** Peripheral RDC base pointer */
#define RDC_BASE_PTR                             ((RDC_MemMapPtr)0x303D0000u)
/** Array initializer of RDC peripheral base pointers */
#define RDC_BASE_PTRS                            { RDC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Accessor_Macros RDC - Register accessor macros
 * @{
 */


/* RDC - Register instance definitions */
/* RDC */
#define RDC_VIR                                  RDC_VIR_REG(RDC_BASE_PTR)
#define RDC_STAT                                 RDC_STAT_REG(RDC_BASE_PTR)
#define RDC_INTCTRL                              RDC_INTCTRL_REG(RDC_BASE_PTR)
#define RDC_INTSTAT                              RDC_INTSTAT_REG(RDC_BASE_PTR)
#define RDC_MDA0                                 RDC_MDA_REG(RDC_BASE_PTR,0)
#define RDC_MDA1                                 RDC_MDA_REG(RDC_BASE_PTR,1)
#define RDC_MDA2                                 RDC_MDA_REG(RDC_BASE_PTR,2)
#define RDC_MDA3                                 RDC_MDA_REG(RDC_BASE_PTR,3)
#define RDC_MDA4                                 RDC_MDA_REG(RDC_BASE_PTR,4)
#define RDC_MDA5                                 RDC_MDA_REG(RDC_BASE_PTR,5)
#define RDC_MDA6                                 RDC_MDA_REG(RDC_BASE_PTR,6)
#define RDC_MDA7                                 RDC_MDA_REG(RDC_BASE_PTR,7)
#define RDC_MDA8                                 RDC_MDA_REG(RDC_BASE_PTR,8)
#define RDC_MDA9                                 RDC_MDA_REG(RDC_BASE_PTR,9)
#define RDC_MDA10                                RDC_MDA_REG(RDC_BASE_PTR,10)
#define RDC_MDA11                                RDC_MDA_REG(RDC_BASE_PTR,11)
#define RDC_MDA12                                RDC_MDA_REG(RDC_BASE_PTR,12)
#define RDC_MDA13                                RDC_MDA_REG(RDC_BASE_PTR,13)
#define RDC_MDA14                                RDC_MDA_REG(RDC_BASE_PTR,14)
#define RDC_MDA15                                RDC_MDA_REG(RDC_BASE_PTR,15)
#define RDC_MDA16                                RDC_MDA_REG(RDC_BASE_PTR,16)
#define RDC_MDA17                                RDC_MDA_REG(RDC_BASE_PTR,17)
#define RDC_MDA18                                RDC_MDA_REG(RDC_BASE_PTR,18)
#define RDC_MDA19                                RDC_MDA_REG(RDC_BASE_PTR,19)
#define RDC_MDA20                                RDC_MDA_REG(RDC_BASE_PTR,20)
#define RDC_MDA21                                RDC_MDA_REG(RDC_BASE_PTR,21)
#define RDC_MDA22                                RDC_MDA_REG(RDC_BASE_PTR,22)
#define RDC_MDA23                                RDC_MDA_REG(RDC_BASE_PTR,23)
#define RDC_MDA24                                RDC_MDA_REG(RDC_BASE_PTR,24)
#define RDC_MDA25                                RDC_MDA_REG(RDC_BASE_PTR,25)
#define RDC_MDA26                                RDC_MDA_REG(RDC_BASE_PTR,26)
#define RDC_PDAP0                                RDC_PDAP_REG(RDC_BASE_PTR,0)
#define RDC_PDAP1                                RDC_PDAP_REG(RDC_BASE_PTR,1)
#define RDC_PDAP2                                RDC_PDAP_REG(RDC_BASE_PTR,2)
#define RDC_PDAP3                                RDC_PDAP_REG(RDC_BASE_PTR,3)
#define RDC_PDAP4                                RDC_PDAP_REG(RDC_BASE_PTR,4)
#define RDC_PDAP5                                RDC_PDAP_REG(RDC_BASE_PTR,5)
#define RDC_PDAP6                                RDC_PDAP_REG(RDC_BASE_PTR,6)
#define RDC_PDAP7                                RDC_PDAP_REG(RDC_BASE_PTR,7)
#define RDC_PDAP8                                RDC_PDAP_REG(RDC_BASE_PTR,8)
#define RDC_PDAP9                                RDC_PDAP_REG(RDC_BASE_PTR,9)
#define RDC_PDAP10                               RDC_PDAP_REG(RDC_BASE_PTR,10)
#define RDC_PDAP11                               RDC_PDAP_REG(RDC_BASE_PTR,11)
#define RDC_PDAP12                               RDC_PDAP_REG(RDC_BASE_PTR,12)
#define RDC_PDAP13                               RDC_PDAP_REG(RDC_BASE_PTR,13)
#define RDC_PDAP14                               RDC_PDAP_REG(RDC_BASE_PTR,14)
#define RDC_PDAP15                               RDC_PDAP_REG(RDC_BASE_PTR,15)
#define RDC_PDAP16                               RDC_PDAP_REG(RDC_BASE_PTR,16)
#define RDC_PDAP17                               RDC_PDAP_REG(RDC_BASE_PTR,17)
#define RDC_PDAP18                               RDC_PDAP_REG(RDC_BASE_PTR,18)
#define RDC_PDAP19                               RDC_PDAP_REG(RDC_BASE_PTR,19)
#define RDC_PDAP20                               RDC_PDAP_REG(RDC_BASE_PTR,20)
#define RDC_PDAP21                               RDC_PDAP_REG(RDC_BASE_PTR,21)
#define RDC_PDAP22                               RDC_PDAP_REG(RDC_BASE_PTR,22)
#define RDC_PDAP23                               RDC_PDAP_REG(RDC_BASE_PTR,23)
#define RDC_PDAP24                               RDC_PDAP_REG(RDC_BASE_PTR,24)
#define RDC_PDAP25                               RDC_PDAP_REG(RDC_BASE_PTR,25)
#define RDC_PDAP26                               RDC_PDAP_REG(RDC_BASE_PTR,26)
#define RDC_PDAP27                               RDC_PDAP_REG(RDC_BASE_PTR,27)
#define RDC_PDAP28                               RDC_PDAP_REG(RDC_BASE_PTR,28)
#define RDC_PDAP29                               RDC_PDAP_REG(RDC_BASE_PTR,29)
#define RDC_PDAP30                               RDC_PDAP_REG(RDC_BASE_PTR,30)
#define RDC_PDAP31                               RDC_PDAP_REG(RDC_BASE_PTR,31)
#define RDC_PDAP32                               RDC_PDAP_REG(RDC_BASE_PTR,32)
#define RDC_PDAP33                               RDC_PDAP_REG(RDC_BASE_PTR,33)
#define RDC_PDAP34                               RDC_PDAP_REG(RDC_BASE_PTR,34)
#define RDC_PDAP35                               RDC_PDAP_REG(RDC_BASE_PTR,35)
#define RDC_PDAP36                               RDC_PDAP_REG(RDC_BASE_PTR,36)
#define RDC_PDAP37                               RDC_PDAP_REG(RDC_BASE_PTR,37)
#define RDC_PDAP38                               RDC_PDAP_REG(RDC_BASE_PTR,38)
#define RDC_PDAP39                               RDC_PDAP_REG(RDC_BASE_PTR,39)
#define RDC_PDAP40                               RDC_PDAP_REG(RDC_BASE_PTR,40)
#define RDC_PDAP41                               RDC_PDAP_REG(RDC_BASE_PTR,41)
#define RDC_PDAP42                               RDC_PDAP_REG(RDC_BASE_PTR,42)
#define RDC_PDAP43                               RDC_PDAP_REG(RDC_BASE_PTR,43)
#define RDC_PDAP44                               RDC_PDAP_REG(RDC_BASE_PTR,44)
#define RDC_PDAP45                               RDC_PDAP_REG(RDC_BASE_PTR,45)
#define RDC_PDAP46                               RDC_PDAP_REG(RDC_BASE_PTR,46)
#define RDC_PDAP47                               RDC_PDAP_REG(RDC_BASE_PTR,47)
#define RDC_PDAP48                               RDC_PDAP_REG(RDC_BASE_PTR,48)
#define RDC_PDAP49                               RDC_PDAP_REG(RDC_BASE_PTR,49)
#define RDC_PDAP50                               RDC_PDAP_REG(RDC_BASE_PTR,50)
#define RDC_PDAP51                               RDC_PDAP_REG(RDC_BASE_PTR,51)
#define RDC_PDAP52                               RDC_PDAP_REG(RDC_BASE_PTR,52)
#define RDC_PDAP53                               RDC_PDAP_REG(RDC_BASE_PTR,53)
#define RDC_PDAP54                               RDC_PDAP_REG(RDC_BASE_PTR,54)
#define RDC_PDAP55                               RDC_PDAP_REG(RDC_BASE_PTR,55)
#define RDC_PDAP56                               RDC_PDAP_REG(RDC_BASE_PTR,56)
#define RDC_PDAP57                               RDC_PDAP_REG(RDC_BASE_PTR,57)
#define RDC_PDAP58                               RDC_PDAP_REG(RDC_BASE_PTR,58)
#define RDC_PDAP59                               RDC_PDAP_REG(RDC_BASE_PTR,59)
#define RDC_PDAP60                               RDC_PDAP_REG(RDC_BASE_PTR,60)
#define RDC_PDAP61                               RDC_PDAP_REG(RDC_BASE_PTR,61)
#define RDC_PDAP62                               RDC_PDAP_REG(RDC_BASE_PTR,62)
#define RDC_PDAP63                               RDC_PDAP_REG(RDC_BASE_PTR,63)
#define RDC_PDAP64                               RDC_PDAP_REG(RDC_BASE_PTR,64)
#define RDC_PDAP65                               RDC_PDAP_REG(RDC_BASE_PTR,65)
#define RDC_PDAP66                               RDC_PDAP_REG(RDC_BASE_PTR,66)
#define RDC_PDAP67                               RDC_PDAP_REG(RDC_BASE_PTR,67)
#define RDC_PDAP68                               RDC_PDAP_REG(RDC_BASE_PTR,68)
#define RDC_PDAP69                               RDC_PDAP_REG(RDC_BASE_PTR,69)
#define RDC_PDAP70                               RDC_PDAP_REG(RDC_BASE_PTR,70)
#define RDC_PDAP71                               RDC_PDAP_REG(RDC_BASE_PTR,71)
#define RDC_PDAP72                               RDC_PDAP_REG(RDC_BASE_PTR,72)
#define RDC_PDAP73                               RDC_PDAP_REG(RDC_BASE_PTR,73)
#define RDC_PDAP74                               RDC_PDAP_REG(RDC_BASE_PTR,74)
#define RDC_PDAP75                               RDC_PDAP_REG(RDC_BASE_PTR,75)
#define RDC_PDAP76                               RDC_PDAP_REG(RDC_BASE_PTR,76)
#define RDC_PDAP77                               RDC_PDAP_REG(RDC_BASE_PTR,77)
#define RDC_PDAP78                               RDC_PDAP_REG(RDC_BASE_PTR,78)
#define RDC_PDAP79                               RDC_PDAP_REG(RDC_BASE_PTR,79)
#define RDC_PDAP80                               RDC_PDAP_REG(RDC_BASE_PTR,80)
#define RDC_PDAP81                               RDC_PDAP_REG(RDC_BASE_PTR,81)
#define RDC_PDAP82                               RDC_PDAP_REG(RDC_BASE_PTR,82)
#define RDC_PDAP83                               RDC_PDAP_REG(RDC_BASE_PTR,83)
#define RDC_PDAP84                               RDC_PDAP_REG(RDC_BASE_PTR,84)
#define RDC_PDAP85                               RDC_PDAP_REG(RDC_BASE_PTR,85)
#define RDC_PDAP86                               RDC_PDAP_REG(RDC_BASE_PTR,86)
#define RDC_PDAP87                               RDC_PDAP_REG(RDC_BASE_PTR,87)
#define RDC_PDAP88                               RDC_PDAP_REG(RDC_BASE_PTR,88)
#define RDC_PDAP89                               RDC_PDAP_REG(RDC_BASE_PTR,89)
#define RDC_PDAP90                               RDC_PDAP_REG(RDC_BASE_PTR,90)
#define RDC_PDAP91                               RDC_PDAP_REG(RDC_BASE_PTR,91)
#define RDC_PDAP92                               RDC_PDAP_REG(RDC_BASE_PTR,92)
#define RDC_PDAP93                               RDC_PDAP_REG(RDC_BASE_PTR,93)
#define RDC_PDAP94                               RDC_PDAP_REG(RDC_BASE_PTR,94)
#define RDC_PDAP95                               RDC_PDAP_REG(RDC_BASE_PTR,95)
#define RDC_PDAP96                               RDC_PDAP_REG(RDC_BASE_PTR,96)
#define RDC_PDAP97                               RDC_PDAP_REG(RDC_BASE_PTR,97)
#define RDC_PDAP98                               RDC_PDAP_REG(RDC_BASE_PTR,98)
#define RDC_PDAP99                               RDC_PDAP_REG(RDC_BASE_PTR,99)
#define RDC_PDAP100                              RDC_PDAP_REG(RDC_BASE_PTR,100)
#define RDC_PDAP101                              RDC_PDAP_REG(RDC_BASE_PTR,101)
#define RDC_PDAP102                              RDC_PDAP_REG(RDC_BASE_PTR,102)
#define RDC_PDAP103                              RDC_PDAP_REG(RDC_BASE_PTR,103)
#define RDC_PDAP104                              RDC_PDAP_REG(RDC_BASE_PTR,104)
#define RDC_PDAP105                              RDC_PDAP_REG(RDC_BASE_PTR,105)
#define RDC_PDAP106                              RDC_PDAP_REG(RDC_BASE_PTR,106)
#define RDC_PDAP107                              RDC_PDAP_REG(RDC_BASE_PTR,107)
#define RDC_PDAP108                              RDC_PDAP_REG(RDC_BASE_PTR,108)
#define RDC_PDAP109                              RDC_PDAP_REG(RDC_BASE_PTR,109)
#define RDC_PDAP110                              RDC_PDAP_REG(RDC_BASE_PTR,110)
#define RDC_PDAP111                              RDC_PDAP_REG(RDC_BASE_PTR,111)
#define RDC_PDAP112                              RDC_PDAP_REG(RDC_BASE_PTR,112)
#define RDC_PDAP113                              RDC_PDAP_REG(RDC_BASE_PTR,113)
#define RDC_PDAP114                              RDC_PDAP_REG(RDC_BASE_PTR,114)
#define RDC_PDAP115                              RDC_PDAP_REG(RDC_BASE_PTR,115)
#define RDC_PDAP116                              RDC_PDAP_REG(RDC_BASE_PTR,116)
#define RDC_PDAP117                              RDC_PDAP_REG(RDC_BASE_PTR,117)
#define RDC_MRSA0                                RDC_MRSA_REG(RDC_BASE_PTR,0)
#define RDC_MREA0                                RDC_MREA_REG(RDC_BASE_PTR,0)
#define RDC_MRC0                                 RDC_MRC_REG(RDC_BASE_PTR,0)
#define RDC_MRVS0                                RDC_MRVS_REG(RDC_BASE_PTR,0)
#define RDC_MRSA1                                RDC_MRSA_REG(RDC_BASE_PTR,1)
#define RDC_MREA1                                RDC_MREA_REG(RDC_BASE_PTR,1)
#define RDC_MRC1                                 RDC_MRC_REG(RDC_BASE_PTR,1)
#define RDC_MRVS1                                RDC_MRVS_REG(RDC_BASE_PTR,1)
#define RDC_MRSA2                                RDC_MRSA_REG(RDC_BASE_PTR,2)
#define RDC_MREA2                                RDC_MREA_REG(RDC_BASE_PTR,2)
#define RDC_MRC2                                 RDC_MRC_REG(RDC_BASE_PTR,2)
#define RDC_MRVS2                                RDC_MRVS_REG(RDC_BASE_PTR,2)
#define RDC_MRSA3                                RDC_MRSA_REG(RDC_BASE_PTR,3)
#define RDC_MREA3                                RDC_MREA_REG(RDC_BASE_PTR,3)
#define RDC_MRC3                                 RDC_MRC_REG(RDC_BASE_PTR,3)
#define RDC_MRVS3                                RDC_MRVS_REG(RDC_BASE_PTR,3)
#define RDC_MRSA4                                RDC_MRSA_REG(RDC_BASE_PTR,4)
#define RDC_MREA4                                RDC_MREA_REG(RDC_BASE_PTR,4)
#define RDC_MRC4                                 RDC_MRC_REG(RDC_BASE_PTR,4)
#define RDC_MRVS4                                RDC_MRVS_REG(RDC_BASE_PTR,4)
#define RDC_MRSA5                                RDC_MRSA_REG(RDC_BASE_PTR,5)
#define RDC_MREA5                                RDC_MREA_REG(RDC_BASE_PTR,5)
#define RDC_MRC5                                 RDC_MRC_REG(RDC_BASE_PTR,5)
#define RDC_MRVS5                                RDC_MRVS_REG(RDC_BASE_PTR,5)
#define RDC_MRSA6                                RDC_MRSA_REG(RDC_BASE_PTR,6)
#define RDC_MREA6                                RDC_MREA_REG(RDC_BASE_PTR,6)
#define RDC_MRC6                                 RDC_MRC_REG(RDC_BASE_PTR,6)
#define RDC_MRVS6                                RDC_MRVS_REG(RDC_BASE_PTR,6)
#define RDC_MRSA7                                RDC_MRSA_REG(RDC_BASE_PTR,7)
#define RDC_MREA7                                RDC_MREA_REG(RDC_BASE_PTR,7)
#define RDC_MRC7                                 RDC_MRC_REG(RDC_BASE_PTR,7)
#define RDC_MRVS7                                RDC_MRVS_REG(RDC_BASE_PTR,7)
#define RDC_MRSA8                                RDC_MRSA_REG(RDC_BASE_PTR,8)
#define RDC_MREA8                                RDC_MREA_REG(RDC_BASE_PTR,8)
#define RDC_MRC8                                 RDC_MRC_REG(RDC_BASE_PTR,8)
#define RDC_MRVS8                                RDC_MRVS_REG(RDC_BASE_PTR,8)
#define RDC_MRSA9                                RDC_MRSA_REG(RDC_BASE_PTR,9)
#define RDC_MREA9                                RDC_MREA_REG(RDC_BASE_PTR,9)
#define RDC_MRC9                                 RDC_MRC_REG(RDC_BASE_PTR,9)
#define RDC_MRVS9                                RDC_MRVS_REG(RDC_BASE_PTR,9)
#define RDC_MRSA10                               RDC_MRSA_REG(RDC_BASE_PTR,10)
#define RDC_MREA10                               RDC_MREA_REG(RDC_BASE_PTR,10)
#define RDC_MRC10                                RDC_MRC_REG(RDC_BASE_PTR,10)
#define RDC_MRVS10                               RDC_MRVS_REG(RDC_BASE_PTR,10)
#define RDC_MRSA11                               RDC_MRSA_REG(RDC_BASE_PTR,11)
#define RDC_MREA11                               RDC_MREA_REG(RDC_BASE_PTR,11)
#define RDC_MRC11                                RDC_MRC_REG(RDC_BASE_PTR,11)
#define RDC_MRVS11                               RDC_MRVS_REG(RDC_BASE_PTR,11)
#define RDC_MRSA12                               RDC_MRSA_REG(RDC_BASE_PTR,12)
#define RDC_MREA12                               RDC_MREA_REG(RDC_BASE_PTR,12)
#define RDC_MRC12                                RDC_MRC_REG(RDC_BASE_PTR,12)
#define RDC_MRVS12                               RDC_MRVS_REG(RDC_BASE_PTR,12)
#define RDC_MRSA13                               RDC_MRSA_REG(RDC_BASE_PTR,13)
#define RDC_MREA13                               RDC_MREA_REG(RDC_BASE_PTR,13)
#define RDC_MRC13                                RDC_MRC_REG(RDC_BASE_PTR,13)
#define RDC_MRVS13                               RDC_MRVS_REG(RDC_BASE_PTR,13)
#define RDC_MRSA14                               RDC_MRSA_REG(RDC_BASE_PTR,14)
#define RDC_MREA14                               RDC_MREA_REG(RDC_BASE_PTR,14)
#define RDC_MRC14                                RDC_MRC_REG(RDC_BASE_PTR,14)
#define RDC_MRVS14                               RDC_MRVS_REG(RDC_BASE_PTR,14)
#define RDC_MRSA15                               RDC_MRSA_REG(RDC_BASE_PTR,15)
#define RDC_MREA15                               RDC_MREA_REG(RDC_BASE_PTR,15)
#define RDC_MRC15                                RDC_MRC_REG(RDC_BASE_PTR,15)
#define RDC_MRVS15                               RDC_MRVS_REG(RDC_BASE_PTR,15)
#define RDC_MRSA16                               RDC_MRSA_REG(RDC_BASE_PTR,16)
#define RDC_MREA16                               RDC_MREA_REG(RDC_BASE_PTR,16)
#define RDC_MRC16                                RDC_MRC_REG(RDC_BASE_PTR,16)
#define RDC_MRVS16                               RDC_MRVS_REG(RDC_BASE_PTR,16)
#define RDC_MRSA17                               RDC_MRSA_REG(RDC_BASE_PTR,17)
#define RDC_MREA17                               RDC_MREA_REG(RDC_BASE_PTR,17)
#define RDC_MRC17                                RDC_MRC_REG(RDC_BASE_PTR,17)
#define RDC_MRVS17                               RDC_MRVS_REG(RDC_BASE_PTR,17)
#define RDC_MRSA18                               RDC_MRSA_REG(RDC_BASE_PTR,18)
#define RDC_MREA18                               RDC_MREA_REG(RDC_BASE_PTR,18)
#define RDC_MRC18                                RDC_MRC_REG(RDC_BASE_PTR,18)
#define RDC_MRVS18                               RDC_MRVS_REG(RDC_BASE_PTR,18)
#define RDC_MRSA19                               RDC_MRSA_REG(RDC_BASE_PTR,19)
#define RDC_MREA19                               RDC_MREA_REG(RDC_BASE_PTR,19)
#define RDC_MRC19                                RDC_MRC_REG(RDC_BASE_PTR,19)
#define RDC_MRVS19                               RDC_MRVS_REG(RDC_BASE_PTR,19)
#define RDC_MRSA20                               RDC_MRSA_REG(RDC_BASE_PTR,20)
#define RDC_MREA20                               RDC_MREA_REG(RDC_BASE_PTR,20)
#define RDC_MRC20                                RDC_MRC_REG(RDC_BASE_PTR,20)
#define RDC_MRVS20                               RDC_MRVS_REG(RDC_BASE_PTR,20)
#define RDC_MRSA21                               RDC_MRSA_REG(RDC_BASE_PTR,21)
#define RDC_MREA21                               RDC_MREA_REG(RDC_BASE_PTR,21)
#define RDC_MRC21                                RDC_MRC_REG(RDC_BASE_PTR,21)
#define RDC_MRVS21                               RDC_MRVS_REG(RDC_BASE_PTR,21)
#define RDC_MRSA22                               RDC_MRSA_REG(RDC_BASE_PTR,22)
#define RDC_MREA22                               RDC_MREA_REG(RDC_BASE_PTR,22)
#define RDC_MRC22                                RDC_MRC_REG(RDC_BASE_PTR,22)
#define RDC_MRVS22                               RDC_MRVS_REG(RDC_BASE_PTR,22)
#define RDC_MRSA23                               RDC_MRSA_REG(RDC_BASE_PTR,23)
#define RDC_MREA23                               RDC_MREA_REG(RDC_BASE_PTR,23)
#define RDC_MRC23                                RDC_MRC_REG(RDC_BASE_PTR,23)
#define RDC_MRVS23                               RDC_MRVS_REG(RDC_BASE_PTR,23)
#define RDC_MRSA24                               RDC_MRSA_REG(RDC_BASE_PTR,24)
#define RDC_MREA24                               RDC_MREA_REG(RDC_BASE_PTR,24)
#define RDC_MRC24                                RDC_MRC_REG(RDC_BASE_PTR,24)
#define RDC_MRVS24                               RDC_MRVS_REG(RDC_BASE_PTR,24)
#define RDC_MRSA25                               RDC_MRSA_REG(RDC_BASE_PTR,25)
#define RDC_MREA25                               RDC_MREA_REG(RDC_BASE_PTR,25)
#define RDC_MRC25                                RDC_MRC_REG(RDC_BASE_PTR,25)
#define RDC_MRVS25                               RDC_MRVS_REG(RDC_BASE_PTR,25)
#define RDC_MRSA26                               RDC_MRSA_REG(RDC_BASE_PTR,26)
#define RDC_MREA26                               RDC_MREA_REG(RDC_BASE_PTR,26)
#define RDC_MRC26                                RDC_MRC_REG(RDC_BASE_PTR,26)
#define RDC_MRVS26                               RDC_MRVS_REG(RDC_BASE_PTR,26)
#define RDC_MRSA27                               RDC_MRSA_REG(RDC_BASE_PTR,27)
#define RDC_MREA27                               RDC_MREA_REG(RDC_BASE_PTR,27)
#define RDC_MRC27                                RDC_MRC_REG(RDC_BASE_PTR,27)
#define RDC_MRVS27                               RDC_MRVS_REG(RDC_BASE_PTR,27)
#define RDC_MRSA28                               RDC_MRSA_REG(RDC_BASE_PTR,28)
#define RDC_MREA28                               RDC_MREA_REG(RDC_BASE_PTR,28)
#define RDC_MRC28                                RDC_MRC_REG(RDC_BASE_PTR,28)
#define RDC_MRVS28                               RDC_MRVS_REG(RDC_BASE_PTR,28)
#define RDC_MRSA29                               RDC_MRSA_REG(RDC_BASE_PTR,29)
#define RDC_MREA29                               RDC_MREA_REG(RDC_BASE_PTR,29)
#define RDC_MRC29                                RDC_MRC_REG(RDC_BASE_PTR,29)
#define RDC_MRVS29                               RDC_MRVS_REG(RDC_BASE_PTR,29)
#define RDC_MRSA30                               RDC_MRSA_REG(RDC_BASE_PTR,30)
#define RDC_MREA30                               RDC_MREA_REG(RDC_BASE_PTR,30)
#define RDC_MRC30                                RDC_MRC_REG(RDC_BASE_PTR,30)
#define RDC_MRVS30                               RDC_MRVS_REG(RDC_BASE_PTR,30)
#define RDC_MRSA31                               RDC_MRSA_REG(RDC_BASE_PTR,31)
#define RDC_MREA31                               RDC_MREA_REG(RDC_BASE_PTR,31)
#define RDC_MRC31                                RDC_MRC_REG(RDC_BASE_PTR,31)
#define RDC_MRVS31                               RDC_MRVS_REG(RDC_BASE_PTR,31)
#define RDC_MRSA32                               RDC_MRSA_REG(RDC_BASE_PTR,32)
#define RDC_MREA32                               RDC_MREA_REG(RDC_BASE_PTR,32)
#define RDC_MRC32                                RDC_MRC_REG(RDC_BASE_PTR,32)
#define RDC_MRVS32                               RDC_MRVS_REG(RDC_BASE_PTR,32)
#define RDC_MRSA33                               RDC_MRSA_REG(RDC_BASE_PTR,33)
#define RDC_MREA33                               RDC_MREA_REG(RDC_BASE_PTR,33)
#define RDC_MRC33                                RDC_MRC_REG(RDC_BASE_PTR,33)
#define RDC_MRVS33                               RDC_MRVS_REG(RDC_BASE_PTR,33)
#define RDC_MRSA34                               RDC_MRSA_REG(RDC_BASE_PTR,34)
#define RDC_MREA34                               RDC_MREA_REG(RDC_BASE_PTR,34)
#define RDC_MRC34                                RDC_MRC_REG(RDC_BASE_PTR,34)
#define RDC_MRVS34                               RDC_MRVS_REG(RDC_BASE_PTR,34)
#define RDC_MRSA35                               RDC_MRSA_REG(RDC_BASE_PTR,35)
#define RDC_MREA35                               RDC_MREA_REG(RDC_BASE_PTR,35)
#define RDC_MRC35                                RDC_MRC_REG(RDC_BASE_PTR,35)
#define RDC_MRVS35                               RDC_MRVS_REG(RDC_BASE_PTR,35)
#define RDC_MRSA36                               RDC_MRSA_REG(RDC_BASE_PTR,36)
#define RDC_MREA36                               RDC_MREA_REG(RDC_BASE_PTR,36)
#define RDC_MRC36                                RDC_MRC_REG(RDC_BASE_PTR,36)
#define RDC_MRVS36                               RDC_MRVS_REG(RDC_BASE_PTR,36)
#define RDC_MRSA37                               RDC_MRSA_REG(RDC_BASE_PTR,37)
#define RDC_MREA37                               RDC_MREA_REG(RDC_BASE_PTR,37)
#define RDC_MRC37                                RDC_MRC_REG(RDC_BASE_PTR,37)
#define RDC_MRVS37                               RDC_MRVS_REG(RDC_BASE_PTR,37)
#define RDC_MRSA38                               RDC_MRSA_REG(RDC_BASE_PTR,38)
#define RDC_MREA38                               RDC_MREA_REG(RDC_BASE_PTR,38)
#define RDC_MRC38                                RDC_MRC_REG(RDC_BASE_PTR,38)
#define RDC_MRVS38                               RDC_MRVS_REG(RDC_BASE_PTR,38)
#define RDC_MRSA39                               RDC_MRSA_REG(RDC_BASE_PTR,39)
#define RDC_MREA39                               RDC_MREA_REG(RDC_BASE_PTR,39)
#define RDC_MRC39                                RDC_MRC_REG(RDC_BASE_PTR,39)
#define RDC_MRVS39                               RDC_MRVS_REG(RDC_BASE_PTR,39)
#define RDC_MRSA40                               RDC_MRSA_REG(RDC_BASE_PTR,40)
#define RDC_MREA40                               RDC_MREA_REG(RDC_BASE_PTR,40)
#define RDC_MRC40                                RDC_MRC_REG(RDC_BASE_PTR,40)
#define RDC_MRVS40                               RDC_MRVS_REG(RDC_BASE_PTR,40)
#define RDC_MRSA41                               RDC_MRSA_REG(RDC_BASE_PTR,41)
#define RDC_MREA41                               RDC_MREA_REG(RDC_BASE_PTR,41)
#define RDC_MRC41                                RDC_MRC_REG(RDC_BASE_PTR,41)
#define RDC_MRVS41                               RDC_MRVS_REG(RDC_BASE_PTR,41)
#define RDC_MRSA42                               RDC_MRSA_REG(RDC_BASE_PTR,42)
#define RDC_MREA42                               RDC_MREA_REG(RDC_BASE_PTR,42)
#define RDC_MRC42                                RDC_MRC_REG(RDC_BASE_PTR,42)
#define RDC_MRVS42                               RDC_MRVS_REG(RDC_BASE_PTR,42)
#define RDC_MRSA43                               RDC_MRSA_REG(RDC_BASE_PTR,43)
#define RDC_MREA43                               RDC_MREA_REG(RDC_BASE_PTR,43)
#define RDC_MRC43                                RDC_MRC_REG(RDC_BASE_PTR,43)
#define RDC_MRVS43                               RDC_MRVS_REG(RDC_BASE_PTR,43)
#define RDC_MRSA44                               RDC_MRSA_REG(RDC_BASE_PTR,44)
#define RDC_MREA44                               RDC_MREA_REG(RDC_BASE_PTR,44)
#define RDC_MRC44                                RDC_MRC_REG(RDC_BASE_PTR,44)
#define RDC_MRVS44                               RDC_MRVS_REG(RDC_BASE_PTR,44)
#define RDC_MRSA45                               RDC_MRSA_REG(RDC_BASE_PTR,45)
#define RDC_MREA45                               RDC_MREA_REG(RDC_BASE_PTR,45)
#define RDC_MRC45                                RDC_MRC_REG(RDC_BASE_PTR,45)
#define RDC_MRVS45                               RDC_MRVS_REG(RDC_BASE_PTR,45)
#define RDC_MRSA46                               RDC_MRSA_REG(RDC_BASE_PTR,46)
#define RDC_MREA46                               RDC_MREA_REG(RDC_BASE_PTR,46)
#define RDC_MRC46                                RDC_MRC_REG(RDC_BASE_PTR,46)
#define RDC_MRVS46                               RDC_MRVS_REG(RDC_BASE_PTR,46)
#define RDC_MRSA47                               RDC_MRSA_REG(RDC_BASE_PTR,47)
#define RDC_MREA47                               RDC_MREA_REG(RDC_BASE_PTR,47)
#define RDC_MRC47                                RDC_MRC_REG(RDC_BASE_PTR,47)
#define RDC_MRVS47                               RDC_MRVS_REG(RDC_BASE_PTR,47)
#define RDC_MRSA48                               RDC_MRSA_REG(RDC_BASE_PTR,48)
#define RDC_MREA48                               RDC_MREA_REG(RDC_BASE_PTR,48)
#define RDC_MRC48                                RDC_MRC_REG(RDC_BASE_PTR,48)
#define RDC_MRVS48                               RDC_MRVS_REG(RDC_BASE_PTR,48)
#define RDC_MRSA49                               RDC_MRSA_REG(RDC_BASE_PTR,49)
#define RDC_MREA49                               RDC_MREA_REG(RDC_BASE_PTR,49)
#define RDC_MRC49                                RDC_MRC_REG(RDC_BASE_PTR,49)
#define RDC_MRVS49                               RDC_MRVS_REG(RDC_BASE_PTR,49)
#define RDC_MRSA50                               RDC_MRSA_REG(RDC_BASE_PTR,50)
#define RDC_MREA50                               RDC_MREA_REG(RDC_BASE_PTR,50)
#define RDC_MRC50                                RDC_MRC_REG(RDC_BASE_PTR,50)
#define RDC_MRVS50                               RDC_MRVS_REG(RDC_BASE_PTR,50)
#define RDC_MRSA51                               RDC_MRSA_REG(RDC_BASE_PTR,51)
#define RDC_MREA51                               RDC_MREA_REG(RDC_BASE_PTR,51)
#define RDC_MRC51                                RDC_MRC_REG(RDC_BASE_PTR,51)
#define RDC_MRVS51                               RDC_MRVS_REG(RDC_BASE_PTR,51)

/* RDC - Register array accessors */
#define RDC_MDA(index)                           RDC_MDA_REG(RDC_BASE_PTR,index)
#define RDC_PDAP(index)                          RDC_PDAP_REG(RDC_BASE_PTR,index)
#define RDC_MRSA(index)                          RDC_MRSA_REG(RDC_BASE_PTR,index)
#define RDC_MREA(index)                          RDC_MREA_REG(RDC_BASE_PTR,index)
#define RDC_MRC(index)                           RDC_MRC_REG(RDC_BASE_PTR,index)
#define RDC_MRVS(index)                          RDC_MRVS_REG(RDC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group RDC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RDC_Peripheral */


/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Peripheral RDC_SEMAPHORE
 * @{
 */

/** RDC_SEMAPHORE - Peripheral register structure */
typedef struct RDC_SEMAPHORE_MemMap {
  uint8_t GATE0;                                   /**< Gate Register, offset: 0x0 */
  uint8_t GATE1;                                   /**< Gate Register, offset: 0x1 */
  uint8_t GATE2;                                   /**< Gate Register, offset: 0x2 */
  uint8_t GATE3;                                   /**< Gate Register, offset: 0x3 */
  uint8_t GATE4;                                   /**< Gate Register, offset: 0x4 */
  uint8_t GATE5;                                   /**< Gate Register, offset: 0x5 */
  uint8_t GATE6;                                   /**< Gate Register, offset: 0x6 */
  uint8_t GATE7;                                   /**< Gate Register, offset: 0x7 */
  uint8_t GATE8;                                   /**< Gate Register, offset: 0x8 */
  uint8_t GATE9;                                   /**< Gate Register, offset: 0x9 */
  uint8_t GATE10;                                  /**< Gate Register, offset: 0xA */
  uint8_t GATE11;                                  /**< Gate Register, offset: 0xB */
  uint8_t GATE12;                                  /**< Gate Register, offset: 0xC */
  uint8_t GATE13;                                  /**< Gate Register, offset: 0xD */
  uint8_t GATE14;                                  /**< Gate Register, offset: 0xE */
  uint8_t GATE15;                                  /**< Gate Register, offset: 0xF */
  uint8_t GATE16;                                  /**< Gate Register, offset: 0x10 */
  uint8_t GATE17;                                  /**< Gate Register, offset: 0x11 */
  uint8_t GATE18;                                  /**< Gate Register, offset: 0x12 */
  uint8_t GATE19;                                  /**< Gate Register, offset: 0x13 */
  uint8_t GATE20;                                  /**< Gate Register, offset: 0x14 */
  uint8_t GATE21;                                  /**< Gate Register, offset: 0x15 */
  uint8_t GATE22;                                  /**< Gate Register, offset: 0x16 */
  uint8_t GATE23;                                  /**< Gate Register, offset: 0x17 */
  uint8_t GATE24;                                  /**< Gate Register, offset: 0x18 */
  uint8_t GATE25;                                  /**< Gate Register, offset: 0x19 */
  uint8_t GATE26;                                  /**< Gate Register, offset: 0x1A */
  uint8_t GATE27;                                  /**< Gate Register, offset: 0x1B */
  uint8_t GATE28;                                  /**< Gate Register, offset: 0x1C */
  uint8_t GATE29;                                  /**< Gate Register, offset: 0x1D */
  uint8_t GATE30;                                  /**< Gate Register, offset: 0x1E */
  uint8_t GATE31;                                  /**< Gate Register, offset: 0x1F */
  uint8_t GATE32;                                  /**< Gate Register, offset: 0x20 */
  uint8_t GATE33;                                  /**< Gate Register, offset: 0x21 */
  uint8_t GATE34;                                  /**< Gate Register, offset: 0x22 */
  uint8_t GATE35;                                  /**< Gate Register, offset: 0x23 */
  uint8_t GATE36;                                  /**< Gate Register, offset: 0x24 */
  uint8_t GATE37;                                  /**< Gate Register, offset: 0x25 */
  uint8_t GATE38;                                  /**< Gate Register, offset: 0x26 */
  uint8_t GATE39;                                  /**< Gate Register, offset: 0x27 */
  uint8_t GATE40;                                  /**< Gate Register, offset: 0x28 */
  uint8_t GATE41;                                  /**< Gate Register, offset: 0x29 */
  uint8_t GATE42;                                  /**< Gate Register, offset: 0x2A */
  uint8_t GATE43;                                  /**< Gate Register, offset: 0x2B */
  uint8_t GATE44;                                  /**< Gate Register, offset: 0x2C */
  uint8_t GATE45;                                  /**< Gate Register, offset: 0x2D */
  uint8_t GATE46;                                  /**< Gate Register, offset: 0x2E */
  uint8_t GATE47;                                  /**< Gate Register, offset: 0x2F */
  uint8_t GATE48;                                  /**< Gate Register, offset: 0x30 */
  uint8_t GATE49;                                  /**< Gate Register, offset: 0x31 */
  uint8_t GATE50;                                  /**< Gate Register, offset: 0x32 */
  uint8_t GATE51;                                  /**< Gate Register, offset: 0x33 */
  uint8_t GATE52;                                  /**< Gate Register, offset: 0x34 */
  uint8_t GATE53;                                  /**< Gate Register, offset: 0x35 */
  uint8_t GATE54;                                  /**< Gate Register, offset: 0x36 */
  uint8_t GATE55;                                  /**< Gate Register, offset: 0x37 */
  uint8_t GATE56;                                  /**< Gate Register, offset: 0x38 */
  uint8_t GATE57;                                  /**< Gate Register, offset: 0x39 */
  uint8_t GATE58;                                  /**< Gate Register, offset: 0x3A */
  uint8_t GATE59;                                  /**< Gate Register, offset: 0x3B */
  uint8_t GATE60;                                  /**< Gate Register, offset: 0x3C */
  uint8_t GATE61;                                  /**< Gate Register, offset: 0x3D */
  uint8_t GATE62;                                  /**< Gate Register, offset: 0x3E */
  uint8_t GATE63;                                  /**< Gate Register, offset: 0x3F */
  union {                                          /* offset: 0x40 */
    uint16_t RSTGT_R;                                /**< Reset Gate Read, offset: 0x40 */
    uint16_t RSTGT_W;                                /**< Reset Gate Write, offset: 0x40 */
  };
} volatile *RDC_SEMAPHORE_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Accessor_Macros RDC_SEMAPHORE - Register accessor macros
 * @{
 */


/* RDC_SEMAPHORE - Register accessors */
#define RDC_SEMAPHORE_GATE0_REG(base)            ((base)->GATE0)
#define RDC_SEMAPHORE_GATE1_REG(base)            ((base)->GATE1)
#define RDC_SEMAPHORE_GATE2_REG(base)            ((base)->GATE2)
#define RDC_SEMAPHORE_GATE3_REG(base)            ((base)->GATE3)
#define RDC_SEMAPHORE_GATE4_REG(base)            ((base)->GATE4)
#define RDC_SEMAPHORE_GATE5_REG(base)            ((base)->GATE5)
#define RDC_SEMAPHORE_GATE6_REG(base)            ((base)->GATE6)
#define RDC_SEMAPHORE_GATE7_REG(base)            ((base)->GATE7)
#define RDC_SEMAPHORE_GATE8_REG(base)            ((base)->GATE8)
#define RDC_SEMAPHORE_GATE9_REG(base)            ((base)->GATE9)
#define RDC_SEMAPHORE_GATE10_REG(base)           ((base)->GATE10)
#define RDC_SEMAPHORE_GATE11_REG(base)           ((base)->GATE11)
#define RDC_SEMAPHORE_GATE12_REG(base)           ((base)->GATE12)
#define RDC_SEMAPHORE_GATE13_REG(base)           ((base)->GATE13)
#define RDC_SEMAPHORE_GATE14_REG(base)           ((base)->GATE14)
#define RDC_SEMAPHORE_GATE15_REG(base)           ((base)->GATE15)
#define RDC_SEMAPHORE_GATE16_REG(base)           ((base)->GATE16)
#define RDC_SEMAPHORE_GATE17_REG(base)           ((base)->GATE17)
#define RDC_SEMAPHORE_GATE18_REG(base)           ((base)->GATE18)
#define RDC_SEMAPHORE_GATE19_REG(base)           ((base)->GATE19)
#define RDC_SEMAPHORE_GATE20_REG(base)           ((base)->GATE20)
#define RDC_SEMAPHORE_GATE21_REG(base)           ((base)->GATE21)
#define RDC_SEMAPHORE_GATE22_REG(base)           ((base)->GATE22)
#define RDC_SEMAPHORE_GATE23_REG(base)           ((base)->GATE23)
#define RDC_SEMAPHORE_GATE24_REG(base)           ((base)->GATE24)
#define RDC_SEMAPHORE_GATE25_REG(base)           ((base)->GATE25)
#define RDC_SEMAPHORE_GATE26_REG(base)           ((base)->GATE26)
#define RDC_SEMAPHORE_GATE27_REG(base)           ((base)->GATE27)
#define RDC_SEMAPHORE_GATE28_REG(base)           ((base)->GATE28)
#define RDC_SEMAPHORE_GATE29_REG(base)           ((base)->GATE29)
#define RDC_SEMAPHORE_GATE30_REG(base)           ((base)->GATE30)
#define RDC_SEMAPHORE_GATE31_REG(base)           ((base)->GATE31)
#define RDC_SEMAPHORE_GATE32_REG(base)           ((base)->GATE32)
#define RDC_SEMAPHORE_GATE33_REG(base)           ((base)->GATE33)
#define RDC_SEMAPHORE_GATE34_REG(base)           ((base)->GATE34)
#define RDC_SEMAPHORE_GATE35_REG(base)           ((base)->GATE35)
#define RDC_SEMAPHORE_GATE36_REG(base)           ((base)->GATE36)
#define RDC_SEMAPHORE_GATE37_REG(base)           ((base)->GATE37)
#define RDC_SEMAPHORE_GATE38_REG(base)           ((base)->GATE38)
#define RDC_SEMAPHORE_GATE39_REG(base)           ((base)->GATE39)
#define RDC_SEMAPHORE_GATE40_REG(base)           ((base)->GATE40)
#define RDC_SEMAPHORE_GATE41_REG(base)           ((base)->GATE41)
#define RDC_SEMAPHORE_GATE42_REG(base)           ((base)->GATE42)
#define RDC_SEMAPHORE_GATE43_REG(base)           ((base)->GATE43)
#define RDC_SEMAPHORE_GATE44_REG(base)           ((base)->GATE44)
#define RDC_SEMAPHORE_GATE45_REG(base)           ((base)->GATE45)
#define RDC_SEMAPHORE_GATE46_REG(base)           ((base)->GATE46)
#define RDC_SEMAPHORE_GATE47_REG(base)           ((base)->GATE47)
#define RDC_SEMAPHORE_GATE48_REG(base)           ((base)->GATE48)
#define RDC_SEMAPHORE_GATE49_REG(base)           ((base)->GATE49)
#define RDC_SEMAPHORE_GATE50_REG(base)           ((base)->GATE50)
#define RDC_SEMAPHORE_GATE51_REG(base)           ((base)->GATE51)
#define RDC_SEMAPHORE_GATE52_REG(base)           ((base)->GATE52)
#define RDC_SEMAPHORE_GATE53_REG(base)           ((base)->GATE53)
#define RDC_SEMAPHORE_GATE54_REG(base)           ((base)->GATE54)
#define RDC_SEMAPHORE_GATE55_REG(base)           ((base)->GATE55)
#define RDC_SEMAPHORE_GATE56_REG(base)           ((base)->GATE56)
#define RDC_SEMAPHORE_GATE57_REG(base)           ((base)->GATE57)
#define RDC_SEMAPHORE_GATE58_REG(base)           ((base)->GATE58)
#define RDC_SEMAPHORE_GATE59_REG(base)           ((base)->GATE59)
#define RDC_SEMAPHORE_GATE60_REG(base)           ((base)->GATE60)
#define RDC_SEMAPHORE_GATE61_REG(base)           ((base)->GATE61)
#define RDC_SEMAPHORE_GATE62_REG(base)           ((base)->GATE62)
#define RDC_SEMAPHORE_GATE63_REG(base)           ((base)->GATE63)
#define RDC_SEMAPHORE_RSTGT_R_REG(base)          ((base)->RSTGT_R)
#define RDC_SEMAPHORE_RSTGT_W_REG(base)          ((base)->RSTGT_W)

/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Masks RDC_SEMAPHORE Register Masks
 * @{
 */

/*! @name GATE0 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE0_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE0_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE0_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE0_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE0_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE0_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE0_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE0_LDOM_MASK)
/*! @} */

/*! @name GATE1 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE1_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE1_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE1_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE1_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE1_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE1_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE1_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE1_LDOM_MASK)
/*! @} */

/*! @name GATE2 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE2_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE2_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE2_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE2_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE2_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE2_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE2_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE2_LDOM_MASK)
/*! @} */

/*! @name GATE3 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE3_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE3_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE3_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE3_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE3_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE3_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE3_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE3_LDOM_MASK)
/*! @} */

/*! @name GATE4 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE4_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE4_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE4_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE4_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE4_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE4_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE4_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE4_LDOM_MASK)
/*! @} */

/*! @name GATE5 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE5_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE5_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE5_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE5_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE5_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE5_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE5_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE5_LDOM_MASK)
/*! @} */

/*! @name GATE6 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE6_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE6_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE6_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE6_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE6_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE6_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE6_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE6_LDOM_MASK)
/*! @} */

/*! @name GATE7 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE7_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE7_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE7_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE7_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE7_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE7_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE7_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE7_LDOM_MASK)
/*! @} */

/*! @name GATE8 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE8_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE8_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE8_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE8_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE8_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE8_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE8_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE8_LDOM_MASK)
/*! @} */

/*! @name GATE9 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE9_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE9_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE9_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE9_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE9_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE9_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE9_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE9_LDOM_MASK)
/*! @} */

/*! @name GATE10 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE10_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE10_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE10_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE10_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE10_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE10_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE10_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE10_LDOM_MASK)
/*! @} */

/*! @name GATE11 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE11_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE11_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE11_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE11_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE11_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE11_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE11_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE11_LDOM_MASK)
/*! @} */

/*! @name GATE12 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE12_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE12_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE12_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE12_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE12_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE12_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE12_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE12_LDOM_MASK)
/*! @} */

/*! @name GATE13 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE13_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE13_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE13_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE13_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE13_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE13_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE13_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE13_LDOM_MASK)
/*! @} */

/*! @name GATE14 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE14_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE14_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE14_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE14_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE14_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE14_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE14_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE14_LDOM_MASK)
/*! @} */

/*! @name GATE15 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE15_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE15_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE15_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE15_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE15_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE15_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE15_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE15_LDOM_MASK)
/*! @} */

/*! @name GATE16 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE16_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE16_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE16_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE16_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE16_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE16_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE16_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE16_LDOM_MASK)
/*! @} */

/*! @name GATE17 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE17_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE17_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE17_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE17_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE17_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE17_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE17_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE17_LDOM_MASK)
/*! @} */

/*! @name GATE18 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE18_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE18_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE18_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE18_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE18_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE18_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE18_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE18_LDOM_MASK)
/*! @} */

/*! @name GATE19 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE19_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE19_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE19_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE19_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE19_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE19_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE19_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE19_LDOM_MASK)
/*! @} */

/*! @name GATE20 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE20_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE20_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE20_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE20_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE20_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE20_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE20_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE20_LDOM_MASK)
/*! @} */

/*! @name GATE21 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE21_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE21_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE21_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE21_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE21_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE21_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE21_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE21_LDOM_MASK)
/*! @} */

/*! @name GATE22 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE22_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE22_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE22_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE22_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE22_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE22_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE22_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE22_LDOM_MASK)
/*! @} */

/*! @name GATE23 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE23_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE23_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE23_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE23_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE23_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE23_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE23_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE23_LDOM_MASK)
/*! @} */

/*! @name GATE24 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE24_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE24_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE24_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE24_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE24_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE24_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE24_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE24_LDOM_MASK)
/*! @} */

/*! @name GATE25 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE25_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE25_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE25_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE25_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE25_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE25_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE25_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE25_LDOM_MASK)
/*! @} */

/*! @name GATE26 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE26_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE26_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE26_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE26_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE26_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE26_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE26_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE26_LDOM_MASK)
/*! @} */

/*! @name GATE27 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE27_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE27_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE27_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE27_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE27_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE27_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE27_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE27_LDOM_MASK)
/*! @} */

/*! @name GATE28 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE28_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE28_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE28_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE28_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE28_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE28_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE28_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE28_LDOM_MASK)
/*! @} */

/*! @name GATE29 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE29_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE29_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE29_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE29_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE29_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE29_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE29_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE29_LDOM_MASK)
/*! @} */

/*! @name GATE30 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE30_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE30_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE30_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE30_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE30_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE30_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE30_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE30_LDOM_MASK)
/*! @} */

/*! @name GATE31 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE31_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE31_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE31_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE31_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE31_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE31_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE31_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE31_LDOM_MASK)
/*! @} */

/*! @name GATE32 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE32_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE32_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE32_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE32_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE32_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE32_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE32_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE32_LDOM_MASK)
/*! @} */

/*! @name GATE33 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE33_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE33_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE33_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE33_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE33_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE33_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE33_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE33_LDOM_MASK)
/*! @} */

/*! @name GATE34 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE34_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE34_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE34_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE34_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE34_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE34_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE34_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE34_LDOM_MASK)
/*! @} */

/*! @name GATE35 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE35_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE35_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE35_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE35_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE35_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE35_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE35_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE35_LDOM_MASK)
/*! @} */

/*! @name GATE36 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE36_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE36_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE36_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE36_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE36_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE36_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE36_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE36_LDOM_MASK)
/*! @} */

/*! @name GATE37 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE37_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE37_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE37_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE37_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE37_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE37_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE37_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE37_LDOM_MASK)
/*! @} */

/*! @name GATE38 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE38_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE38_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE38_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE38_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE38_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE38_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE38_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE38_LDOM_MASK)
/*! @} */

/*! @name GATE39 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE39_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE39_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE39_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE39_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE39_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE39_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE39_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE39_LDOM_MASK)
/*! @} */

/*! @name GATE40 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE40_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE40_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE40_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE40_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE40_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE40_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE40_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE40_LDOM_MASK)
/*! @} */

/*! @name GATE41 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE41_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE41_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE41_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE41_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE41_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE41_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE41_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE41_LDOM_MASK)
/*! @} */

/*! @name GATE42 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE42_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE42_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE42_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE42_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE42_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE42_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE42_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE42_LDOM_MASK)
/*! @} */

/*! @name GATE43 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE43_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE43_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE43_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE43_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE43_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE43_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE43_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE43_LDOM_MASK)
/*! @} */

/*! @name GATE44 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE44_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE44_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE44_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE44_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE44_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE44_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE44_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE44_LDOM_MASK)
/*! @} */

/*! @name GATE45 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE45_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE45_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE45_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE45_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE45_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE45_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE45_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE45_LDOM_MASK)
/*! @} */

/*! @name GATE46 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE46_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE46_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE46_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE46_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE46_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE46_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE46_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE46_LDOM_MASK)
/*! @} */

/*! @name GATE47 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE47_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE47_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE47_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE47_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE47_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE47_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE47_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE47_LDOM_MASK)
/*! @} */

/*! @name GATE48 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE48_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE48_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE48_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE48_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE48_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE48_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE48_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE48_LDOM_MASK)
/*! @} */

/*! @name GATE49 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE49_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE49_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE49_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE49_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE49_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE49_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE49_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE49_LDOM_MASK)
/*! @} */

/*! @name GATE50 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE50_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE50_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE50_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE50_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE50_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE50_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE50_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE50_LDOM_MASK)
/*! @} */

/*! @name GATE51 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE51_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE51_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE51_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE51_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE51_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE51_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE51_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE51_LDOM_MASK)
/*! @} */

/*! @name GATE52 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE52_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE52_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE52_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE52_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE52_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE52_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE52_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE52_LDOM_MASK)
/*! @} */

/*! @name GATE53 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE53_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE53_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE53_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE53_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE53_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE53_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE53_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE53_LDOM_MASK)
/*! @} */

/*! @name GATE54 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE54_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE54_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE54_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE54_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE54_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE54_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE54_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE54_LDOM_MASK)
/*! @} */

/*! @name GATE55 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE55_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE55_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE55_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE55_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE55_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE55_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE55_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE55_LDOM_MASK)
/*! @} */

/*! @name GATE56 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE56_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE56_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE56_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE56_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE56_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE56_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE56_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE56_LDOM_MASK)
/*! @} */

/*! @name GATE57 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE57_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE57_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE57_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE57_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE57_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE57_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE57_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE57_LDOM_MASK)
/*! @} */

/*! @name GATE58 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE58_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE58_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE58_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE58_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE58_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE58_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE58_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE58_LDOM_MASK)
/*! @} */

/*! @name GATE59 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE59_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE59_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE59_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE59_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE59_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE59_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE59_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE59_LDOM_MASK)
/*! @} */

/*! @name GATE60 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE60_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE60_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE60_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE60_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE60_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE60_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE60_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE60_LDOM_MASK)
/*! @} */

/*! @name GATE61 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE61_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE61_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE61_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE61_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE61_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE61_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE61_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE61_LDOM_MASK)
/*! @} */

/*! @name GATE62 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE62_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE62_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE62_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE62_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE62_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE62_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE62_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE62_LDOM_MASK)
/*! @} */

/*! @name GATE63 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE63_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE63_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE63_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE63_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE63_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE63_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE63_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE63_LDOM_MASK)
/*! @} */

/*! @name RSTGT_R - Reset Gate Read */
/*! @{ */
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK        (0xFU)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK        (0x30U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT       (4U)
/*! RSTGSM
 *  0b00..Idle, waiting for the first data pattern write.
 *  0b01..Waiting for the second data pattern write.
 *  0b10..The 2-write sequence has completed. Generate the specified gate reset(s). After the reset is performed,
 *        this machine returns to the idle (waiting for first data pattern write) state. The "01" state persists
 *        for only one clock cycle. Software will never be able to observe this state.
 *  0b11..This state encoding is never used and therefore reserved.
 */
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK)
/*! @} */

/*! @name RSTGT_W - Reset Gate Write */
/*! @{ */
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK        (0xFFU)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Masks */


/* RDC_SEMAPHORE - Peripheral instance base addresses */
/** Peripheral RDC_SEMAPHORE1 base pointer */
#define RDC_SEMAPHORE1_BASE_PTR                  ((RDC_SEMAPHORE_MemMapPtr)0x303B0000u)
/** Peripheral RDC_SEMAPHORE2 base pointer */
#define RDC_SEMAPHORE2_BASE_PTR                  ((RDC_SEMAPHORE_MemMapPtr)0x303C0000u)
/** Array initializer of RDC_SEMAPHORE peripheral base pointers */
#define RDC_SEMAPHORE_BASE_PTRS                  { RDC_SEMAPHORE1_BASE_PTR, RDC_SEMAPHORE2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Accessor_Macros RDC_SEMAPHORE - Register accessor macros
 * @{
 */


/* RDC_SEMAPHORE - Register instance definitions */
/* RDC_SEMAPHORE1 */
#define RDC_SEMAPHORE1_GATE0                     RDC_SEMAPHORE_GATE0_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE1                     RDC_SEMAPHORE_GATE1_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE2                     RDC_SEMAPHORE_GATE2_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE3                     RDC_SEMAPHORE_GATE3_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE4                     RDC_SEMAPHORE_GATE4_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE5                     RDC_SEMAPHORE_GATE5_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE6                     RDC_SEMAPHORE_GATE6_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE7                     RDC_SEMAPHORE_GATE7_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE8                     RDC_SEMAPHORE_GATE8_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE9                     RDC_SEMAPHORE_GATE9_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE10                    RDC_SEMAPHORE_GATE10_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE11                    RDC_SEMAPHORE_GATE11_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE12                    RDC_SEMAPHORE_GATE12_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE13                    RDC_SEMAPHORE_GATE13_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE14                    RDC_SEMAPHORE_GATE14_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE15                    RDC_SEMAPHORE_GATE15_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE16                    RDC_SEMAPHORE_GATE16_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE17                    RDC_SEMAPHORE_GATE17_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE18                    RDC_SEMAPHORE_GATE18_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE19                    RDC_SEMAPHORE_GATE19_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE20                    RDC_SEMAPHORE_GATE20_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE21                    RDC_SEMAPHORE_GATE21_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE22                    RDC_SEMAPHORE_GATE22_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE23                    RDC_SEMAPHORE_GATE23_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE24                    RDC_SEMAPHORE_GATE24_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE25                    RDC_SEMAPHORE_GATE25_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE26                    RDC_SEMAPHORE_GATE26_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE27                    RDC_SEMAPHORE_GATE27_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE28                    RDC_SEMAPHORE_GATE28_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE29                    RDC_SEMAPHORE_GATE29_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE30                    RDC_SEMAPHORE_GATE30_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE31                    RDC_SEMAPHORE_GATE31_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE32                    RDC_SEMAPHORE_GATE32_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE33                    RDC_SEMAPHORE_GATE33_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE34                    RDC_SEMAPHORE_GATE34_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE35                    RDC_SEMAPHORE_GATE35_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE36                    RDC_SEMAPHORE_GATE36_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE37                    RDC_SEMAPHORE_GATE37_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE38                    RDC_SEMAPHORE_GATE38_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE39                    RDC_SEMAPHORE_GATE39_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE40                    RDC_SEMAPHORE_GATE40_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE41                    RDC_SEMAPHORE_GATE41_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE42                    RDC_SEMAPHORE_GATE42_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE43                    RDC_SEMAPHORE_GATE43_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE44                    RDC_SEMAPHORE_GATE44_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE45                    RDC_SEMAPHORE_GATE45_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE46                    RDC_SEMAPHORE_GATE46_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE47                    RDC_SEMAPHORE_GATE47_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE48                    RDC_SEMAPHORE_GATE48_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE49                    RDC_SEMAPHORE_GATE49_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE50                    RDC_SEMAPHORE_GATE50_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE51                    RDC_SEMAPHORE_GATE51_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE52                    RDC_SEMAPHORE_GATE52_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE53                    RDC_SEMAPHORE_GATE53_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE54                    RDC_SEMAPHORE_GATE54_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE55                    RDC_SEMAPHORE_GATE55_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE56                    RDC_SEMAPHORE_GATE56_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE57                    RDC_SEMAPHORE_GATE57_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE58                    RDC_SEMAPHORE_GATE58_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE59                    RDC_SEMAPHORE_GATE59_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE60                    RDC_SEMAPHORE_GATE60_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE61                    RDC_SEMAPHORE_GATE61_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE62                    RDC_SEMAPHORE_GATE62_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE63                    RDC_SEMAPHORE_GATE63_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_RSTGT_R                   RDC_SEMAPHORE_RSTGT_R_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_RSTGT_W                   RDC_SEMAPHORE_RSTGT_W_REG(RDC_SEMAPHORE1_BASE_PTR)
/* RDC_SEMAPHORE2 */
#define RDC_SEMAPHORE2_GATE0                     RDC_SEMAPHORE_GATE0_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE1                     RDC_SEMAPHORE_GATE1_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE2                     RDC_SEMAPHORE_GATE2_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE3                     RDC_SEMAPHORE_GATE3_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE4                     RDC_SEMAPHORE_GATE4_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE5                     RDC_SEMAPHORE_GATE5_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE6                     RDC_SEMAPHORE_GATE6_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE7                     RDC_SEMAPHORE_GATE7_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE8                     RDC_SEMAPHORE_GATE8_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE9                     RDC_SEMAPHORE_GATE9_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE10                    RDC_SEMAPHORE_GATE10_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE11                    RDC_SEMAPHORE_GATE11_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE12                    RDC_SEMAPHORE_GATE12_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE13                    RDC_SEMAPHORE_GATE13_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE14                    RDC_SEMAPHORE_GATE14_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE15                    RDC_SEMAPHORE_GATE15_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE16                    RDC_SEMAPHORE_GATE16_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE17                    RDC_SEMAPHORE_GATE17_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE18                    RDC_SEMAPHORE_GATE18_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE19                    RDC_SEMAPHORE_GATE19_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE20                    RDC_SEMAPHORE_GATE20_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE21                    RDC_SEMAPHORE_GATE21_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE22                    RDC_SEMAPHORE_GATE22_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE23                    RDC_SEMAPHORE_GATE23_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE24                    RDC_SEMAPHORE_GATE24_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE25                    RDC_SEMAPHORE_GATE25_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE26                    RDC_SEMAPHORE_GATE26_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE27                    RDC_SEMAPHORE_GATE27_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE28                    RDC_SEMAPHORE_GATE28_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE29                    RDC_SEMAPHORE_GATE29_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE30                    RDC_SEMAPHORE_GATE30_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE31                    RDC_SEMAPHORE_GATE31_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE32                    RDC_SEMAPHORE_GATE32_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE33                    RDC_SEMAPHORE_GATE33_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE34                    RDC_SEMAPHORE_GATE34_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE35                    RDC_SEMAPHORE_GATE35_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE36                    RDC_SEMAPHORE_GATE36_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE37                    RDC_SEMAPHORE_GATE37_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE38                    RDC_SEMAPHORE_GATE38_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE39                    RDC_SEMAPHORE_GATE39_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE40                    RDC_SEMAPHORE_GATE40_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE41                    RDC_SEMAPHORE_GATE41_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE42                    RDC_SEMAPHORE_GATE42_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE43                    RDC_SEMAPHORE_GATE43_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE44                    RDC_SEMAPHORE_GATE44_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE45                    RDC_SEMAPHORE_GATE45_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE46                    RDC_SEMAPHORE_GATE46_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE47                    RDC_SEMAPHORE_GATE47_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE48                    RDC_SEMAPHORE_GATE48_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE49                    RDC_SEMAPHORE_GATE49_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE50                    RDC_SEMAPHORE_GATE50_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE51                    RDC_SEMAPHORE_GATE51_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE52                    RDC_SEMAPHORE_GATE52_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE53                    RDC_SEMAPHORE_GATE53_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE54                    RDC_SEMAPHORE_GATE54_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE55                    RDC_SEMAPHORE_GATE55_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE56                    RDC_SEMAPHORE_GATE56_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE57                    RDC_SEMAPHORE_GATE57_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE58                    RDC_SEMAPHORE_GATE58_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE59                    RDC_SEMAPHORE_GATE59_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE60                    RDC_SEMAPHORE_GATE60_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE61                    RDC_SEMAPHORE_GATE61_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE62                    RDC_SEMAPHORE_GATE62_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE63                    RDC_SEMAPHORE_GATE63_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_RSTGT_R                   RDC_SEMAPHORE_RSTGT_R_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_RSTGT_W                   RDC_SEMAPHORE_RSTGT_W_REG(RDC_SEMAPHORE2_BASE_PTR)

/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Peripheral */


/* ----------------------------------------------------------------------------
   -- RD_SRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RD_SRC_Peripheral RD_SRC
 * @{
 */

/** RD_SRC - Peripheral register structure */
typedef struct RD_SRC_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< Control register for Read surface., offset: 0x0 */
    uint32_t SET;                                    /**< Control register for Read surface., offset: 0x4 */
    uint32_t CLR;                                    /**< Control register for Read surface., offset: 0x8 */
    uint32_t TOG;                                    /**< Control register for Read surface., offset: 0xC */
  } CTRL_STATUS;
  uint32_t BASE_ADDR;                              /**< Read Surface Base address, offset: 0x10 */
  uint32_t PITCH;                                  /**< Read surface vertical pitch, offset: 0x14 */
  uint32_t WIDTH;                                  /**< Source frame buffer width, offset: 0x18 */
  uint32_t HEIGHT;                                 /**< Height of frame to be read, offset: 0x1C */
} volatile *RD_SRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RD_SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RD_SRC_Register_Accessor_Macros RD_SRC - Register accessor macros
 * @{
 */


/* RD_SRC - Register accessors */
#define RD_SRC_CTRL_STATUS_REG(base)             ((base)->CTRL_STATUS.RW)
#define RD_SRC_CTRL_STATUS_SET_REG(base)         ((base)->CTRL_STATUS.SET)
#define RD_SRC_CTRL_STATUS_CLR_REG(base)         ((base)->CTRL_STATUS.CLR)
#define RD_SRC_CTRL_STATUS_TOG_REG(base)         ((base)->CTRL_STATUS.TOG)
#define RD_SRC_BASE_ADDR_REG(base)               ((base)->BASE_ADDR)
#define RD_SRC_PITCH_REG(base)                   ((base)->PITCH)
#define RD_SRC_WIDTH_REG(base)                   ((base)->WIDTH)
#define RD_SRC_HEIGHT_REG(base)                  ((base)->HEIGHT)

/*!
 * @}
 */ /* end of group RD_SRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RD_SRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RD_SRC_Register_Masks RD_SRC Register Masks
 * @{
 */

/*! @name CTRL_STATUS - Control register for Read surface. */
/*! @{ */
#define RD_SRC_CTRL_STATUS_ENABLE_MASK           (0x1U)
#define RD_SRC_CTRL_STATUS_ENABLE_SHIFT          (0U)
#define RD_SRC_CTRL_STATUS_BPP_MASK              (0x1CU)
#define RD_SRC_CTRL_STATUS_BPP_SHIFT             (2U)
#define RD_SRC_CTRL_STATUS_BPP(x)                (((uint32_t)(((uint32_t)(x)) << RD_SRC_CTRL_STATUS_BPP_SHIFT)) & RD_SRC_CTRL_STATUS_BPP_MASK)
#define RD_SRC_CTRL_STATUS_T_SIZE_MASK           (0x60U)
#define RD_SRC_CTRL_STATUS_T_SIZE_SHIFT          (5U)
#define RD_SRC_CTRL_STATUS_T_SIZE(x)             (((uint32_t)(((uint32_t)(x)) << RD_SRC_CTRL_STATUS_T_SIZE_SHIFT)) & RD_SRC_CTRL_STATUS_T_SIZE_MASK)
#define RD_SRC_CTRL_STATUS_P_SIZE_MASK           (0x380U)
#define RD_SRC_CTRL_STATUS_P_SIZE_SHIFT          (7U)
#define RD_SRC_CTRL_STATUS_P_SIZE(x)             (((uint32_t)(((uint32_t)(x)) << RD_SRC_CTRL_STATUS_P_SIZE_SHIFT)) & RD_SRC_CTRL_STATUS_P_SIZE_MASK)
#define RD_SRC_CTRL_STATUS_FRAME_COMP_EN_MASK    (0x4000U)
#define RD_SRC_CTRL_STATUS_FRAME_COMP_EN_SHIFT   (14U)
#define RD_SRC_CTRL_STATUS_RD_ERR_EN_MASK        (0x8000U)
#define RD_SRC_CTRL_STATUS_RD_ERR_EN_SHIFT       (15U)
#define RD_SRC_CTRL_STATUS_FIFO_SIZE_MASK        (0x7F0000U)
#define RD_SRC_CTRL_STATUS_FIFO_SIZE_SHIFT       (16U)
#define RD_SRC_CTRL_STATUS_FIFO_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << RD_SRC_CTRL_STATUS_FIFO_SIZE_SHIFT)) & RD_SRC_CTRL_STATUS_FIFO_SIZE_MASK)
#define RD_SRC_CTRL_STATUS_FRAME_COMP_MASK       (0x40000000U)
#define RD_SRC_CTRL_STATUS_FRAME_COMP_SHIFT      (30U)
#define RD_SRC_CTRL_STATUS_RD_ERR_MASK           (0x80000000U)
#define RD_SRC_CTRL_STATUS_RD_ERR_SHIFT          (31U)
/*! @} */

/*! @name BASE_ADDR - Read Surface Base address */
/*! @{ */
#define RD_SRC_BASE_ADDR_BASE_ADDR_MASK          (0xFFFFFFFFU)
#define RD_SRC_BASE_ADDR_BASE_ADDR_SHIFT         (0U)
#define RD_SRC_BASE_ADDR_BASE_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << RD_SRC_BASE_ADDR_BASE_ADDR_SHIFT)) & RD_SRC_BASE_ADDR_BASE_ADDR_MASK)
/*! @} */

/*! @name PITCH - Read surface vertical pitch */
/*! @{ */
#define RD_SRC_PITCH_PITCH_MASK                  (0xFFFFU)
#define RD_SRC_PITCH_PITCH_SHIFT                 (0U)
#define RD_SRC_PITCH_PITCH(x)                    (((uint32_t)(((uint32_t)(x)) << RD_SRC_PITCH_PITCH_SHIFT)) & RD_SRC_PITCH_PITCH_MASK)
/*! @} */

/*! @name WIDTH - Source frame buffer width */
/*! @{ */
#define RD_SRC_WIDTH_WIDTH_MASK                  (0xFFFFU)
#define RD_SRC_WIDTH_WIDTH_SHIFT                 (0U)
#define RD_SRC_WIDTH_WIDTH(x)                    (((uint32_t)(((uint32_t)(x)) << RD_SRC_WIDTH_WIDTH_SHIFT)) & RD_SRC_WIDTH_WIDTH_MASK)
/*! @} */

/*! @name HEIGHT - Height of frame to be read */
/*! @{ */
#define RD_SRC_HEIGHT_HEIGHT_MASK                (0xFFFFU)
#define RD_SRC_HEIGHT_HEIGHT_SHIFT               (0U)
#define RD_SRC_HEIGHT_HEIGHT(x)                  (((uint32_t)(((uint32_t)(x)) << RD_SRC_HEIGHT_HEIGHT_SHIFT)) & RD_SRC_HEIGHT_HEIGHT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group RD_SRC_Register_Masks */


/* RD_SRC - Peripheral instance base addresses */
/** Peripheral DCSS__RD_SRC base pointer */
#define DCSS__RD_SRC_BASE_PTR                    ((RD_SRC_MemMapPtr)0x32E22000u)
/** Array initializer of RD_SRC peripheral base pointers */
#define RD_SRC_BASE_PTRS                         { DCSS__RD_SRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RD_SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RD_SRC_Register_Accessor_Macros RD_SRC - Register accessor macros
 * @{
 */


/* RD_SRC - Register instance definitions */
/* DCSS__RD_SRC */
#define DCSS__RD_SRC_CTRL_STATUS                 RD_SRC_CTRL_STATUS_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_CTRL_STATUS_SET             RD_SRC_CTRL_STATUS_SET_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_CTRL_STATUS_CLR             RD_SRC_CTRL_STATUS_CLR_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_CTRL_STATUS_TOG             RD_SRC_CTRL_STATUS_TOG_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_BASE_ADDR                   RD_SRC_BASE_ADDR_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_PITCH                       RD_SRC_PITCH_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_WIDTH                       RD_SRC_WIDTH_REG(DCSS__RD_SRC_BASE_PTR)
#define DCSS__RD_SRC_HEIGHT                      RD_SRC_HEIGHT_REG(DCSS__RD_SRC_BASE_PTR)

/*!
 * @}
 */ /* end of group RD_SRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RD_SRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- ROMC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Peripheral ROMC
 * @{
 */

/** ROMC - Peripheral register structure */
typedef struct ROMC_MemMap {
  uint8_t RESERVED_0[212];
  uint32_t ROMPATCHD[8];                           /**< ROMC Data Registers, array offset: 0xD4, array step: 0x4 */
  uint32_t ROMPATCHCNTL;                           /**< ROMC Control Register, offset: 0xF4 */
  uint32_t ROMPATCHENH;                            /**< ROMC Enable Register High, offset: 0xF8 */
  uint32_t ROMPATCHENL;                            /**< ROMC Enable Register Low, offset: 0xFC */
  uint32_t ROMPATCHA[16];                          /**< ROMC Address Registers, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_1[200];
  uint32_t ROMPATCHSR;                             /**< ROMC Status Register, offset: 0x208 */
} volatile *ROMC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ROMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Accessor_Macros ROMC - Register accessor macros
 * @{
 */


/* ROMC - Register accessors */
#define ROMC_ROMPATCHD_REG(base,index)           ((base)->ROMPATCHD[index])
#define ROMC_ROMPATCHCNTL_REG(base)              ((base)->ROMPATCHCNTL)
#define ROMC_ROMPATCHENH_REG(base)               ((base)->ROMPATCHENH)
#define ROMC_ROMPATCHENL_REG(base)               ((base)->ROMPATCHENL)
#define ROMC_ROMPATCHA_REG(base,index)           ((base)->ROMPATCHA[index])
#define ROMC_ROMPATCHSR_REG(base)                ((base)->ROMPATCHSR)

/*!
 * @}
 */ /* end of group ROMC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ROMC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Masks ROMC Register Masks
 * @{
 */

/*! @name ROMPATCHD - ROMC Data Registers */
/*! @{ */
#define ROMC_ROMPATCHD_DATAX_MASK                (0xFFFFFFFFU)
#define ROMC_ROMPATCHD_DATAX_SHIFT               (0U)
#define ROMC_ROMPATCHD_DATAX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHD_DATAX_SHIFT)) & ROMC_ROMPATCHD_DATAX_MASK)
/*! @} */

/* The count of ROMC_ROMPATCHD */
#define ROMC_ROMPATCHD_COUNT                     (8U)

/*! @name ROMPATCHCNTL - ROMC Control Register */
/*! @{ */
#define ROMC_ROMPATCHCNTL_DATAFIX_MASK           (0xFFU)
#define ROMC_ROMPATCHCNTL_DATAFIX_SHIFT          (0U)
/*! DATAFIX
 *  0b00000000..Address comparator triggers a opcode patch
 *  0b00000001..Address comparator triggers a data fix
 */
#define ROMC_ROMPATCHCNTL_DATAFIX(x)             (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHCNTL_DATAFIX_SHIFT)) & ROMC_ROMPATCHCNTL_DATAFIX_MASK)
#define ROMC_ROMPATCHCNTL_DIS_MASK               (0x20000000U)
#define ROMC_ROMPATCHCNTL_DIS_SHIFT              (29U)
/*! @} */

/*! @name ROMPATCHENL - ROMC Enable Register Low */
/*! @{ */
#define ROMC_ROMPATCHENL_ENABLE_MASK             (0xFFFFU)
#define ROMC_ROMPATCHENL_ENABLE_SHIFT            (0U)
/*! ENABLE
 *  0b0000000000000000..Address comparator disabled
 *  0b0000000000000001..Address comparator enabled, ROMC will trigger a opcode patch or data fix event upon matching of the associated address
 */
#define ROMC_ROMPATCHENL_ENABLE(x)               (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHENL_ENABLE_SHIFT)) & ROMC_ROMPATCHENL_ENABLE_MASK)
/*! @} */

/*! @name ROMPATCHA - ROMC Address Registers */
/*! @{ */
#define ROMC_ROMPATCHA_THUMBX_MASK               (0x1U)
#define ROMC_ROMPATCHA_THUMBX_SHIFT              (0U)
#define ROMC_ROMPATCHA_ADDRX_MASK                (0x7FFFFEU)
#define ROMC_ROMPATCHA_ADDRX_SHIFT               (1U)
#define ROMC_ROMPATCHA_ADDRX(x)                  (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHA_ADDRX_SHIFT)) & ROMC_ROMPATCHA_ADDRX_MASK)
/*! @} */

/* The count of ROMC_ROMPATCHA */
#define ROMC_ROMPATCHA_COUNT                     (16U)

/*! @name ROMPATCHSR - ROMC Status Register */
/*! @{ */
#define ROMC_ROMPATCHSR_SOURCE_MASK              (0x3FU)
#define ROMC_ROMPATCHSR_SOURCE_SHIFT             (0U)
/*! SOURCE
 *  0b000000..Address Comparator 0 matched
 *  0b000001..Address Comparator 1 matched
 *  0b001111..Address Comparator 15 matched
 */
#define ROMC_ROMPATCHSR_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << ROMC_ROMPATCHSR_SOURCE_SHIFT)) & ROMC_ROMPATCHSR_SOURCE_MASK)
#define ROMC_ROMPATCHSR_SW_MASK                  (0x20000U)
#define ROMC_ROMPATCHSR_SW_SHIFT                 (17U)
/*! @} */


/*!
 * @}
 */ /* end of group ROMC_Register_Masks */


/* ROMC - Peripheral instance base addresses */
/** Peripheral ROMC base pointer */
#define ROMC_BASE_PTR                            ((ROMC_MemMapPtr)0x30310000u)
/** Array initializer of ROMC peripheral base pointers */
#define ROMC_BASE_PTRS                           { ROMC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ROMC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ROMC_Register_Accessor_Macros ROMC - Register accessor macros
 * @{
 */


/* ROMC - Register instance definitions */
/* ROMC */
#define ROMC_ROMPATCH7D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,0)
#define ROMC_ROMPATCH6D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,1)
#define ROMC_ROMPATCH5D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,2)
#define ROMC_ROMPATCH4D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,3)
#define ROMC_ROMPATCH3D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,4)
#define ROMC_ROMPATCH2D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,5)
#define ROMC_ROMPATCH1D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,6)
#define ROMC_ROMPATCH0D                          ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,7)
#define ROMC_ROMPATCHCNTL                        ROMC_ROMPATCHCNTL_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCHENH                         ROMC_ROMPATCHENH_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCHENL                         ROMC_ROMPATCHENL_REG(ROMC_BASE_PTR)
#define ROMC_ROMPATCH0A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,0)
#define ROMC_ROMPATCH1A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,1)
#define ROMC_ROMPATCH2A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,2)
#define ROMC_ROMPATCH3A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,3)
#define ROMC_ROMPATCH4A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,4)
#define ROMC_ROMPATCH5A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,5)
#define ROMC_ROMPATCH6A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,6)
#define ROMC_ROMPATCH7A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,7)
#define ROMC_ROMPATCH8A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,8)
#define ROMC_ROMPATCH9A                          ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,9)
#define ROMC_ROMPATCH10A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,10)
#define ROMC_ROMPATCH11A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,11)
#define ROMC_ROMPATCH12A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,12)
#define ROMC_ROMPATCH13A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,13)
#define ROMC_ROMPATCH14A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,14)
#define ROMC_ROMPATCH15A                         ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,15)
#define ROMC_ROMPATCHSR                          ROMC_ROMPATCHSR_REG(ROMC_BASE_PTR)

/* ROMC - Register array accessors */
#define ROMC_ROMPATCHD(index)                    ROMC_ROMPATCHD_REG(ROMC_BASE_PTR,index)
#define ROMC_ROMPATCHA(index)                    ROMC_ROMPATCHA_REG(ROMC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ROMC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ROMC_Peripheral */


/* ----------------------------------------------------------------------------
   -- SDMAARM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Peripheral SDMAARM
 * @{
 */

/** SDMAARM - Peripheral register structure */
typedef struct SDMAARM_MemMap {
  uint32_t MC0PTR;                                 /**< Arm platform Channel 0 Pointer, offset: 0x0 */
  uint32_t INTR;                                   /**< Channel Interrupts, offset: 0x4 */
  uint32_t STOP_STAT;                              /**< Channel Stop/Channel Status, offset: 0x8 */
  uint32_t HSTART;                                 /**< Channel Start, offset: 0xC */
  uint32_t EVTOVR;                                 /**< Channel Event Override, offset: 0x10 */
  uint32_t DSPOVR;                                 /**< Channel BP Override, offset: 0x14 */
  uint32_t HOSTOVR;                                /**< Channel Arm platform Override, offset: 0x18 */
  uint32_t EVTPEND;                                /**< Channel Event Pending, offset: 0x1C */
  uint8_t RESERVED_0[4];
  uint32_t RESET;                                  /**< Reset Register, offset: 0x24 */
  uint32_t EVTERR;                                 /**< DMA Request Error Register, offset: 0x28 */
  uint32_t INTRMASK;                               /**< Channel Arm platform Interrupt Mask, offset: 0x2C */
  uint32_t PSW;                                    /**< Schedule Status, offset: 0x30 */
  uint32_t EVTERRDBG;                              /**< DMA Request Error Register, offset: 0x34 */
  uint32_t CONFIG;                                 /**< Configuration Register, offset: 0x38 */
  uint32_t SDMA_LOCK;                              /**< SDMA LOCK, offset: 0x3C */
  uint32_t ONCE_ENB;                               /**< OnCE Enable, offset: 0x40 */
  uint32_t ONCE_DATA;                              /**< OnCE Data Register, offset: 0x44 */
  uint32_t ONCE_INSTR;                             /**< OnCE Instruction Register, offset: 0x48 */
  uint32_t ONCE_STAT;                              /**< OnCE Status Register, offset: 0x4C */
  uint32_t ONCE_CMD;                               /**< OnCE Command Register, offset: 0x50 */
  uint8_t RESERVED_1[4];
  uint32_t ILLINSTADDR;                            /**< Illegal Instruction Trap Address, offset: 0x58 */
  uint32_t CHN0ADDR;                               /**< Channel 0 Boot Address, offset: 0x5C */
  uint32_t EVT_MIRROR;                             /**< DMA Requests, offset: 0x60 */
  uint32_t EVT_MIRROR2;                            /**< DMA Requests 2, offset: 0x64 */
  uint8_t RESERVED_2[8];
  uint32_t XTRIG_CONF1;                            /**< Cross-Trigger Events Configuration Register 1, offset: 0x70 */
  uint32_t XTRIG_CONF2;                            /**< Cross-Trigger Events Configuration Register 2, offset: 0x74 */
  uint8_t RESERVED_3[136];
  uint32_t SDMA_CHNPRI[32];                        /**< Channel Priority Registers, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_4[128];
  uint32_t CHNENBL[48];                            /**< Channel Enable RAM, array offset: 0x200, array step: 0x4 */
} volatile *SDMAARM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SDMAARM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Accessor_Macros SDMAARM - Register accessor macros
 * @{
 */


/* SDMAARM - Register accessors */
#define SDMAARM_MC0PTR_REG(base)                 ((base)->MC0PTR)
#define SDMAARM_INTR_REG(base)                   ((base)->INTR)
#define SDMAARM_STOP_STAT_REG(base)              ((base)->STOP_STAT)
#define SDMAARM_HSTART_REG(base)                 ((base)->HSTART)
#define SDMAARM_EVTOVR_REG(base)                 ((base)->EVTOVR)
#define SDMAARM_DSPOVR_REG(base)                 ((base)->DSPOVR)
#define SDMAARM_HOSTOVR_REG(base)                ((base)->HOSTOVR)
#define SDMAARM_EVTPEND_REG(base)                ((base)->EVTPEND)
#define SDMAARM_RESET_REG(base)                  ((base)->RESET)
#define SDMAARM_EVTERR_REG(base)                 ((base)->EVTERR)
#define SDMAARM_INTRMASK_REG(base)               ((base)->INTRMASK)
#define SDMAARM_PSW_REG(base)                    ((base)->PSW)
#define SDMAARM_EVTERRDBG_REG(base)              ((base)->EVTERRDBG)
#define SDMAARM_CONFIG_REG(base)                 ((base)->CONFIG)
#define SDMAARM_SDMA_LOCK_REG(base)              ((base)->SDMA_LOCK)
#define SDMAARM_ONCE_ENB_REG(base)               ((base)->ONCE_ENB)
#define SDMAARM_ONCE_DATA_REG(base)              ((base)->ONCE_DATA)
#define SDMAARM_ONCE_INSTR_REG(base)             ((base)->ONCE_INSTR)
#define SDMAARM_ONCE_STAT_REG(base)              ((base)->ONCE_STAT)
#define SDMAARM_ONCE_CMD_REG(base)               ((base)->ONCE_CMD)
#define SDMAARM_ILLINSTADDR_REG(base)            ((base)->ILLINSTADDR)
#define SDMAARM_CHN0ADDR_REG(base)               ((base)->CHN0ADDR)
#define SDMAARM_EVT_MIRROR_REG(base)             ((base)->EVT_MIRROR)
#define SDMAARM_EVT_MIRROR2_REG(base)            ((base)->EVT_MIRROR2)
#define SDMAARM_XTRIG_CONF1_REG(base)            ((base)->XTRIG_CONF1)
#define SDMAARM_XTRIG_CONF2_REG(base)            ((base)->XTRIG_CONF2)
#define SDMAARM_SDMA_CHNPRI_REG(base,index)      ((base)->SDMA_CHNPRI[index])
#define SDMAARM_CHNENBL_REG(base,index)          ((base)->CHNENBL[index])

/*!
 * @}
 */ /* end of group SDMAARM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SDMAARM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Masks SDMAARM Register Masks
 * @{
 */

/*! @name MC0PTR - Arm platform Channel 0 Pointer */
/*! @{ */
#define SDMAARM_MC0PTR_MC0PTR_MASK               (0xFFFFFFFFU)
#define SDMAARM_MC0PTR_MC0PTR_SHIFT              (0U)
#define SDMAARM_MC0PTR_MC0PTR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_MC0PTR_MC0PTR_SHIFT)) & SDMAARM_MC0PTR_MC0PTR_MASK)
/*! @} */

/*! @name INTR - Channel Interrupts */
/*! @{ */
#define SDMAARM_INTR_HI_MASK                     (0xFFFFFFFFU)
#define SDMAARM_INTR_HI_SHIFT                    (0U)
#define SDMAARM_INTR_HI(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTR_HI_SHIFT)) & SDMAARM_INTR_HI_MASK)
/*! @} */

/*! @name STOP_STAT - Channel Stop/Channel Status */
/*! @{ */
#define SDMAARM_STOP_STAT_HE_MASK                (0xFFFFFFFFU)
#define SDMAARM_STOP_STAT_HE_SHIFT               (0U)
#define SDMAARM_STOP_STAT_HE(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_STOP_STAT_HE_SHIFT)) & SDMAARM_STOP_STAT_HE_MASK)
/*! @} */

/*! @name HSTART - Channel Start */
/*! @{ */
#define SDMAARM_HSTART_HSTART_HE_MASK            (0xFFFFFFFFU)
#define SDMAARM_HSTART_HSTART_HE_SHIFT           (0U)
#define SDMAARM_HSTART_HSTART_HE(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_HSTART_HSTART_HE_SHIFT)) & SDMAARM_HSTART_HSTART_HE_MASK)
/*! @} */

/*! @name EVTOVR - Channel Event Override */
/*! @{ */
#define SDMAARM_EVTOVR_EO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_EVTOVR_EO_SHIFT                  (0U)
#define SDMAARM_EVTOVR_EO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTOVR_EO_SHIFT)) & SDMAARM_EVTOVR_EO_MASK)
/*! @} */

/*! @name DSPOVR - Channel BP Override */
/*! @{ */
#define SDMAARM_DSPOVR_DO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_DSPOVR_DO_SHIFT                  (0U)
/*! DO
 *  0b00000000000000000000000000000000..- Reserved
 *  0b00000000000000000000000000000001..- Reset value.
 */
#define SDMAARM_DSPOVR_DO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_DSPOVR_DO_SHIFT)) & SDMAARM_DSPOVR_DO_MASK)
/*! @} */

/*! @name HOSTOVR - Channel Arm platform Override */
/*! @{ */
#define SDMAARM_HOSTOVR_HO_MASK                  (0xFFFFFFFFU)
#define SDMAARM_HOSTOVR_HO_SHIFT                 (0U)
#define SDMAARM_HOSTOVR_HO(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_HOSTOVR_HO_SHIFT)) & SDMAARM_HOSTOVR_HO_MASK)
/*! @} */

/*! @name EVTPEND - Channel Event Pending */
/*! @{ */
#define SDMAARM_EVTPEND_EP_MASK                  (0xFFFFFFFFU)
#define SDMAARM_EVTPEND_EP_SHIFT                 (0U)
#define SDMAARM_EVTPEND_EP(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTPEND_EP_SHIFT)) & SDMAARM_EVTPEND_EP_MASK)
/*! @} */

/*! @name RESET - Reset Register */
/*! @{ */
#define SDMAARM_RESET_RESET_MASK                 (0x1U)
#define SDMAARM_RESET_RESET_SHIFT                (0U)
#define SDMAARM_RESET_RESCHED_MASK               (0x2U)
#define SDMAARM_RESET_RESCHED_SHIFT              (1U)
/*! @} */

/*! @name EVTERR - DMA Request Error Register */
/*! @{ */
#define SDMAARM_EVTERR_CHNERR_MASK               (0xFFFFFFFFU)
#define SDMAARM_EVTERR_CHNERR_SHIFT              (0U)
#define SDMAARM_EVTERR_CHNERR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERR_CHNERR_SHIFT)) & SDMAARM_EVTERR_CHNERR_MASK)
/*! @} */

/*! @name INTRMASK - Channel Arm platform Interrupt Mask */
/*! @{ */
#define SDMAARM_INTRMASK_HIMASK_MASK             (0xFFFFFFFFU)
#define SDMAARM_INTRMASK_HIMASK_SHIFT            (0U)
#define SDMAARM_INTRMASK_HIMASK(x)               (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTRMASK_HIMASK_SHIFT)) & SDMAARM_INTRMASK_HIMASK_MASK)
/*! @} */

/*! @name PSW - Schedule Status */
/*! @{ */
#define SDMAARM_PSW_CCR_MASK                     (0xFU)
#define SDMAARM_PSW_CCR_SHIFT                    (0U)
#define SDMAARM_PSW_CCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCR_SHIFT)) & SDMAARM_PSW_CCR_MASK)
#define SDMAARM_PSW_CCP_MASK                     (0xF0U)
#define SDMAARM_PSW_CCP_SHIFT                    (4U)
/*! CCP
 *  0b0000..No running channel
 *  0b0001..Active channel priority
 */
#define SDMAARM_PSW_CCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCP_SHIFT)) & SDMAARM_PSW_CCP_MASK)
#define SDMAARM_PSW_NCR_MASK                     (0x1F00U)
#define SDMAARM_PSW_NCR_SHIFT                    (8U)
#define SDMAARM_PSW_NCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCR_SHIFT)) & SDMAARM_PSW_NCR_MASK)
#define SDMAARM_PSW_NCP_MASK                     (0xE000U)
#define SDMAARM_PSW_NCP_SHIFT                    (13U)
/*! NCP
 *  0b000..No running channel
 *  0b001..Active channel priority
 */
#define SDMAARM_PSW_NCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCP_SHIFT)) & SDMAARM_PSW_NCP_MASK)
/*! @} */

/*! @name EVTERRDBG - DMA Request Error Register */
/*! @{ */
#define SDMAARM_EVTERRDBG_CHNERR_MASK            (0xFFFFFFFFU)
#define SDMAARM_EVTERRDBG_CHNERR_SHIFT           (0U)
#define SDMAARM_EVTERRDBG_CHNERR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERRDBG_CHNERR_SHIFT)) & SDMAARM_EVTERRDBG_CHNERR_MASK)
/*! @} */

/*! @name CONFIG - Configuration Register */
/*! @{ */
#define SDMAARM_CONFIG_CSM_MASK                  (0x3U)
#define SDMAARM_CONFIG_CSM_SHIFT                 (0U)
/*! CSM
 *  0b00..static
 *  0b01..dynamic low power
 *  0b10..dynamic with no loop
 *  0b11..dynamic
 */
#define SDMAARM_CONFIG_CSM(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_CSM_SHIFT)) & SDMAARM_CONFIG_CSM_MASK)
#define SDMAARM_CONFIG_ACR_MASK                  (0x10U)
#define SDMAARM_CONFIG_ACR_SHIFT                 (4U)
#define SDMAARM_CONFIG_RTDOBS_MASK               (0x800U)
#define SDMAARM_CONFIG_RTDOBS_SHIFT              (11U)
#define SDMAARM_CONFIG_DSPDMA_MASK               (0x1000U)
#define SDMAARM_CONFIG_DSPDMA_SHIFT              (12U)
/*! @} */

/*! @name SDMA_LOCK - SDMA LOCK */
/*! @{ */
#define SDMAARM_SDMA_LOCK_LOCK_MASK              (0x1U)
#define SDMAARM_SDMA_LOCK_LOCK_SHIFT             (0U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_MASK   (0x2U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_SHIFT  (1U)
/*! @} */

/*! @name ONCE_ENB - OnCE Enable */
/*! @{ */
#define SDMAARM_ONCE_ENB_ENB_MASK                (0x1U)
#define SDMAARM_ONCE_ENB_ENB_SHIFT               (0U)
/*! @} */

/*! @name ONCE_DATA - OnCE Data Register */
/*! @{ */
#define SDMAARM_ONCE_DATA_DATA_MASK              (0xFFFFFFFFU)
#define SDMAARM_ONCE_DATA_DATA_SHIFT             (0U)
#define SDMAARM_ONCE_DATA_DATA(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_DATA_DATA_SHIFT)) & SDMAARM_ONCE_DATA_DATA_MASK)
/*! @} */

/*! @name ONCE_INSTR - OnCE Instruction Register */
/*! @{ */
#define SDMAARM_ONCE_INSTR_INSTR_MASK            (0xFFFFU)
#define SDMAARM_ONCE_INSTR_INSTR_SHIFT           (0U)
#define SDMAARM_ONCE_INSTR_INSTR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_INSTR_INSTR_SHIFT)) & SDMAARM_ONCE_INSTR_INSTR_MASK)
/*! @} */

/*! @name ONCE_STAT - OnCE Status Register */
/*! @{ */
#define SDMAARM_ONCE_STAT_ECDR_MASK              (0x7U)
#define SDMAARM_ONCE_STAT_ECDR_SHIFT             (0U)
/*! ECDR
 *  0b000..1 matched addra_cond
 *  0b001..1 matched addrb_cond
 *  0b010..1 matched data_cond
 */
#define SDMAARM_ONCE_STAT_ECDR(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_ECDR_SHIFT)) & SDMAARM_ONCE_STAT_ECDR_MASK)
#define SDMAARM_ONCE_STAT_MST_MASK               (0x80U)
#define SDMAARM_ONCE_STAT_MST_SHIFT              (7U)
#define SDMAARM_ONCE_STAT_SWB_MASK               (0x100U)
#define SDMAARM_ONCE_STAT_SWB_SHIFT              (8U)
#define SDMAARM_ONCE_STAT_ODR_MASK               (0x200U)
#define SDMAARM_ONCE_STAT_ODR_SHIFT              (9U)
#define SDMAARM_ONCE_STAT_EDR_MASK               (0x400U)
#define SDMAARM_ONCE_STAT_EDR_SHIFT              (10U)
#define SDMAARM_ONCE_STAT_RCV_MASK               (0x800U)
#define SDMAARM_ONCE_STAT_RCV_SHIFT              (11U)
#define SDMAARM_ONCE_STAT_PST_MASK               (0xF000U)
#define SDMAARM_ONCE_STAT_PST_SHIFT              (12U)
/*! PST
 *  0b0000..Program
 *  0b0001..Data
 *  0b0010..Change of Flow
 *  0b0011..Change of Flow in Loop
 *  0b0100..Debug
 *  0b0101..Functional Unit
 *  0b0110..Sleep
 *  0b0111..Save
 *  0b1000..Program in Sleep
 *  0b1001..Data in Sleep
 *  0b0010..Change of Flow in Sleep
 *  0b0011..Change Flow in Loop in Sleep
 *  0b1100..Debug in Sleep
 *  0b1101..Functional Unit in Sleep
 *  0b1110..Sleep after Reset
 *  0b1111..Restore
 */
#define SDMAARM_ONCE_STAT_PST(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_PST_SHIFT)) & SDMAARM_ONCE_STAT_PST_MASK)
/*! @} */

/*! @name ONCE_CMD - OnCE Command Register */
/*! @{ */
#define SDMAARM_ONCE_CMD_CMD_MASK                (0xFU)
#define SDMAARM_ONCE_CMD_CMD_SHIFT               (0U)
/*! CMD
 *  0b0000..rstatus
 *  0b0001..dmov
 *  0b0010..exec_once
 *  0b0011..run_core
 *  0b0100..exec_core
 *  0b0101..debug_rqst
 *  0b0110..rbuffer
 */
#define SDMAARM_ONCE_CMD_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_CMD_CMD_SHIFT)) & SDMAARM_ONCE_CMD_CMD_MASK)
/*! @} */

/*! @name ILLINSTADDR - Illegal Instruction Trap Address */
/*! @{ */
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK     (0x3FFFU)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT    (0U)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR(x)       (((uint32_t)(((uint32_t)(x)) << SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT)) & SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK)
/*! @} */

/*! @name CHN0ADDR - Channel 0 Boot Address */
/*! @{ */
#define SDMAARM_CHN0ADDR_CHN0ADDR_MASK           (0x3FFFU)
#define SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT          (0U)
#define SDMAARM_CHN0ADDR_CHN0ADDR(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT)) & SDMAARM_CHN0ADDR_CHN0ADDR_MASK)
#define SDMAARM_CHN0ADDR_SMSZ_MASK               (0x4000U)
#define SDMAARM_CHN0ADDR_SMSZ_SHIFT              (14U)
/*! @} */

/*! @name EVT_MIRROR - DMA Requests */
/*! @{ */
#define SDMAARM_EVT_MIRROR_EVENTS_MASK           (0xFFFFFFFFU)
#define SDMAARM_EVT_MIRROR_EVENTS_SHIFT          (0U)
/*! EVENTS
 *  0b00000000000000000000000000000000..DMA request event not pending
 *  0b00000000000000000000000000000001..DMA request event pending
 */
#define SDMAARM_EVT_MIRROR_EVENTS(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR_EVENTS_MASK)
/*! @} */

/*! @name EVT_MIRROR2 - DMA Requests 2 */
/*! @{ */
#define SDMAARM_EVT_MIRROR2_EVENTS_MASK          (0xFFFFU)
#define SDMAARM_EVT_MIRROR2_EVENTS_SHIFT         (0U)
/*! EVENTS
 *  0b0000000000000000..- DMA request event not pending
 */
#define SDMAARM_EVT_MIRROR2_EVENTS(x)            (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR2_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR2_EVENTS_MASK)
/*! @} */

/*! @name XTRIG_CONF1 - Cross-Trigger Events Configuration Register 1 */
/*! @{ */
#define SDMAARM_XTRIG_CONF1_NUM0_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF1_NUM0_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF1_NUM0(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM0_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM0_MASK)
#define SDMAARM_XTRIG_CONF1_CNF0_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF1_CNF0_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF1_NUM1_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF1_NUM1_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF1_NUM1(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM1_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM1_MASK)
#define SDMAARM_XTRIG_CONF1_CNF1_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF1_CNF1_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF1_NUM2_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF1_NUM2_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF1_NUM2(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM2_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM2_MASK)
#define SDMAARM_XTRIG_CONF1_CNF2_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF1_CNF2_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF1_NUM3_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF1_NUM3_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF1_NUM3(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM3_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM3_MASK)
#define SDMAARM_XTRIG_CONF1_CNF3_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF1_CNF3_SHIFT           (30U)
/*! @} */

/*! @name XTRIG_CONF2 - Cross-Trigger Events Configuration Register 2 */
/*! @{ */
#define SDMAARM_XTRIG_CONF2_NUM4_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF2_NUM4_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF2_NUM4(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM4_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM4_MASK)
#define SDMAARM_XTRIG_CONF2_CNF4_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF2_CNF4_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF2_NUM5_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF2_NUM5_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF2_NUM5(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM5_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM5_MASK)
#define SDMAARM_XTRIG_CONF2_CNF5_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF2_CNF5_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF2_NUM6_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF2_NUM6_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF2_NUM6(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM6_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM6_MASK)
#define SDMAARM_XTRIG_CONF2_CNF6_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF2_CNF6_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF2_NUM7_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF2_NUM7_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF2_NUM7(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM7_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM7_MASK)
#define SDMAARM_XTRIG_CONF2_CNF7_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF2_CNF7_SHIFT           (30U)
/*! @} */

/*! @name SDMA_CHNPRI - Channel Priority Registers */
/*! @{ */
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK         (0x7U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT        (0U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn(x)           (((uint32_t)(((uint32_t)(x)) << SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT)) & SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK)
/*! @} */

/* The count of SDMAARM_SDMA_CHNPRI */
#define SDMAARM_SDMA_CHNPRI_COUNT                (32U)

/*! @name CHNENBL - Channel Enable RAM */
/*! @{ */
#define SDMAARM_CHNENBL_ENBLn_MASK               (0xFFFFFFFFU)
#define SDMAARM_CHNENBL_ENBLn_SHIFT              (0U)
#define SDMAARM_CHNENBL_ENBLn(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHNENBL_ENBLn_SHIFT)) & SDMAARM_CHNENBL_ENBLn_MASK)
/*! @} */

/* The count of SDMAARM_CHNENBL */
#define SDMAARM_CHNENBL_COUNT                    (48U)


/*!
 * @}
 */ /* end of group SDMAARM_Register_Masks */


/* SDMAARM - Peripheral instance base addresses */
/** Peripheral SDMAARM1 base pointer */
#define SDMAARM1_BASE_PTR                        ((SDMAARM_MemMapPtr)0x30BD0000u)
/** Peripheral SDMAARM2 base pointer */
#define SDMAARM2_BASE_PTR                        ((SDMAARM_MemMapPtr)0x302C0000u)
/** Array initializer of SDMAARM peripheral base pointers */
#define SDMAARM_BASE_PTRS                        { SDMAARM1_BASE_PTR, SDMAARM2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SDMAARM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Accessor_Macros SDMAARM - Register accessor macros
 * @{
 */


/* SDMAARM - Register instance definitions */
/* SDMAARM1 */
#define SDMAARM1_MC0PTR                          SDMAARM_MC0PTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_INTR                            SDMAARM_INTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_STOP_STAT                       SDMAARM_STOP_STAT_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_HSTART                          SDMAARM_HSTART_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTOVR                          SDMAARM_EVTOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_DSPOVR                          SDMAARM_DSPOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_HOSTOVR                         SDMAARM_HOSTOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTPEND                         SDMAARM_EVTPEND_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_RESET                           SDMAARM_RESET_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTERR                          SDMAARM_EVTERR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_INTRMASK                        SDMAARM_INTRMASK_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_PSW                             SDMAARM_PSW_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTERRDBG                       SDMAARM_EVTERRDBG_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_CONFIG                          SDMAARM_CONFIG_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_SDMA_LOCK                       SDMAARM_SDMA_LOCK_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_ENB                        SDMAARM_ONCE_ENB_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_DATA                       SDMAARM_ONCE_DATA_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_INSTR                      SDMAARM_ONCE_INSTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_STAT                       SDMAARM_ONCE_STAT_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_CMD                        SDMAARM_ONCE_CMD_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ILLINSTADDR                     SDMAARM_ILLINSTADDR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_CHN0ADDR                        SDMAARM_CHN0ADDR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVT_MIRROR                      SDMAARM_EVT_MIRROR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVT_MIRROR2                     SDMAARM_EVT_MIRROR2_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_XTRIG_CONF1                     SDMAARM_XTRIG_CONF1_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_XTRIG_CONF2                     SDMAARM_XTRIG_CONF2_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_SDMA_CHNPRI0                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,0)
#define SDMAARM1_SDMA_CHNPRI1                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,1)
#define SDMAARM1_SDMA_CHNPRI2                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,2)
#define SDMAARM1_SDMA_CHNPRI3                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,3)
#define SDMAARM1_SDMA_CHNPRI4                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,4)
#define SDMAARM1_SDMA_CHNPRI5                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,5)
#define SDMAARM1_SDMA_CHNPRI6                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,6)
#define SDMAARM1_SDMA_CHNPRI7                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,7)
#define SDMAARM1_SDMA_CHNPRI8                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,8)
#define SDMAARM1_SDMA_CHNPRI9                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,9)
#define SDMAARM1_SDMA_CHNPRI10                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,10)
#define SDMAARM1_SDMA_CHNPRI11                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,11)
#define SDMAARM1_SDMA_CHNPRI12                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,12)
#define SDMAARM1_SDMA_CHNPRI13                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,13)
#define SDMAARM1_SDMA_CHNPRI14                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,14)
#define SDMAARM1_SDMA_CHNPRI15                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,15)
#define SDMAARM1_SDMA_CHNPRI16                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,16)
#define SDMAARM1_SDMA_CHNPRI17                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,17)
#define SDMAARM1_SDMA_CHNPRI18                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,18)
#define SDMAARM1_SDMA_CHNPRI19                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,19)
#define SDMAARM1_SDMA_CHNPRI20                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,20)
#define SDMAARM1_SDMA_CHNPRI21                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,21)
#define SDMAARM1_SDMA_CHNPRI22                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,22)
#define SDMAARM1_SDMA_CHNPRI23                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,23)
#define SDMAARM1_SDMA_CHNPRI24                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,24)
#define SDMAARM1_SDMA_CHNPRI25                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,25)
#define SDMAARM1_SDMA_CHNPRI26                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,26)
#define SDMAARM1_SDMA_CHNPRI27                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,27)
#define SDMAARM1_SDMA_CHNPRI28                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,28)
#define SDMAARM1_SDMA_CHNPRI29                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,29)
#define SDMAARM1_SDMA_CHNPRI30                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,30)
#define SDMAARM1_SDMA_CHNPRI31                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,31)
#define SDMAARM1_CHNENBL0                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,0)
#define SDMAARM1_CHNENBL1                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,1)
#define SDMAARM1_CHNENBL2                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,2)
#define SDMAARM1_CHNENBL3                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,3)
#define SDMAARM1_CHNENBL4                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,4)
#define SDMAARM1_CHNENBL5                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,5)
#define SDMAARM1_CHNENBL6                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,6)
#define SDMAARM1_CHNENBL7                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,7)
#define SDMAARM1_CHNENBL8                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,8)
#define SDMAARM1_CHNENBL9                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,9)
#define SDMAARM1_CHNENBL10                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,10)
#define SDMAARM1_CHNENBL11                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,11)
#define SDMAARM1_CHNENBL12                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,12)
#define SDMAARM1_CHNENBL13                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,13)
#define SDMAARM1_CHNENBL14                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,14)
#define SDMAARM1_CHNENBL15                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,15)
#define SDMAARM1_CHNENBL16                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,16)
#define SDMAARM1_CHNENBL17                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,17)
#define SDMAARM1_CHNENBL18                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,18)
#define SDMAARM1_CHNENBL19                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,19)
#define SDMAARM1_CHNENBL20                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,20)
#define SDMAARM1_CHNENBL21                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,21)
#define SDMAARM1_CHNENBL22                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,22)
#define SDMAARM1_CHNENBL23                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,23)
#define SDMAARM1_CHNENBL24                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,24)
#define SDMAARM1_CHNENBL25                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,25)
#define SDMAARM1_CHNENBL26                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,26)
#define SDMAARM1_CHNENBL27                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,27)
#define SDMAARM1_CHNENBL28                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,28)
#define SDMAARM1_CHNENBL29                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,29)
#define SDMAARM1_CHNENBL30                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,30)
#define SDMAARM1_CHNENBL31                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,31)
#define SDMAARM1_CHNENBL32                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,32)
#define SDMAARM1_CHNENBL33                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,33)
#define SDMAARM1_CHNENBL34                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,34)
#define SDMAARM1_CHNENBL35                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,35)
#define SDMAARM1_CHNENBL36                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,36)
#define SDMAARM1_CHNENBL37                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,37)
#define SDMAARM1_CHNENBL38                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,38)
#define SDMAARM1_CHNENBL39                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,39)
#define SDMAARM1_CHNENBL40                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,40)
#define SDMAARM1_CHNENBL41                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,41)
#define SDMAARM1_CHNENBL42                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,42)
#define SDMAARM1_CHNENBL43                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,43)
#define SDMAARM1_CHNENBL44                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,44)
#define SDMAARM1_CHNENBL45                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,45)
#define SDMAARM1_CHNENBL46                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,46)
#define SDMAARM1_CHNENBL47                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,47)
/* SDMAARM2 */
#define SDMAARM2_MC0PTR                          SDMAARM_MC0PTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_INTR                            SDMAARM_INTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_STOP_STAT                       SDMAARM_STOP_STAT_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_HSTART                          SDMAARM_HSTART_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTOVR                          SDMAARM_EVTOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_DSPOVR                          SDMAARM_DSPOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_HOSTOVR                         SDMAARM_HOSTOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTPEND                         SDMAARM_EVTPEND_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_RESET                           SDMAARM_RESET_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTERR                          SDMAARM_EVTERR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_INTRMASK                        SDMAARM_INTRMASK_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_PSW                             SDMAARM_PSW_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTERRDBG                       SDMAARM_EVTERRDBG_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_CONFIG                          SDMAARM_CONFIG_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_SDMA_LOCK                       SDMAARM_SDMA_LOCK_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_ENB                        SDMAARM_ONCE_ENB_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_DATA                       SDMAARM_ONCE_DATA_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_INSTR                      SDMAARM_ONCE_INSTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_STAT                       SDMAARM_ONCE_STAT_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_CMD                        SDMAARM_ONCE_CMD_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ILLINSTADDR                     SDMAARM_ILLINSTADDR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_CHN0ADDR                        SDMAARM_CHN0ADDR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVT_MIRROR                      SDMAARM_EVT_MIRROR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVT_MIRROR2                     SDMAARM_EVT_MIRROR2_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_XTRIG_CONF1                     SDMAARM_XTRIG_CONF1_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_XTRIG_CONF2                     SDMAARM_XTRIG_CONF2_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_SDMA_CHNPRI0                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,0)
#define SDMAARM2_SDMA_CHNPRI1                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,1)
#define SDMAARM2_SDMA_CHNPRI2                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,2)
#define SDMAARM2_SDMA_CHNPRI3                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,3)
#define SDMAARM2_SDMA_CHNPRI4                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,4)
#define SDMAARM2_SDMA_CHNPRI5                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,5)
#define SDMAARM2_SDMA_CHNPRI6                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,6)
#define SDMAARM2_SDMA_CHNPRI7                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,7)
#define SDMAARM2_SDMA_CHNPRI8                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,8)
#define SDMAARM2_SDMA_CHNPRI9                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,9)
#define SDMAARM2_SDMA_CHNPRI10                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,10)
#define SDMAARM2_SDMA_CHNPRI11                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,11)
#define SDMAARM2_SDMA_CHNPRI12                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,12)
#define SDMAARM2_SDMA_CHNPRI13                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,13)
#define SDMAARM2_SDMA_CHNPRI14                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,14)
#define SDMAARM2_SDMA_CHNPRI15                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,15)
#define SDMAARM2_SDMA_CHNPRI16                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,16)
#define SDMAARM2_SDMA_CHNPRI17                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,17)
#define SDMAARM2_SDMA_CHNPRI18                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,18)
#define SDMAARM2_SDMA_CHNPRI19                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,19)
#define SDMAARM2_SDMA_CHNPRI20                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,20)
#define SDMAARM2_SDMA_CHNPRI21                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,21)
#define SDMAARM2_SDMA_CHNPRI22                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,22)
#define SDMAARM2_SDMA_CHNPRI23                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,23)
#define SDMAARM2_SDMA_CHNPRI24                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,24)
#define SDMAARM2_SDMA_CHNPRI25                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,25)
#define SDMAARM2_SDMA_CHNPRI26                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,26)
#define SDMAARM2_SDMA_CHNPRI27                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,27)
#define SDMAARM2_SDMA_CHNPRI28                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,28)
#define SDMAARM2_SDMA_CHNPRI29                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,29)
#define SDMAARM2_SDMA_CHNPRI30                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,30)
#define SDMAARM2_SDMA_CHNPRI31                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,31)
#define SDMAARM2_CHNENBL0                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,0)
#define SDMAARM2_CHNENBL1                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,1)
#define SDMAARM2_CHNENBL2                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,2)
#define SDMAARM2_CHNENBL3                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,3)
#define SDMAARM2_CHNENBL4                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,4)
#define SDMAARM2_CHNENBL5                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,5)
#define SDMAARM2_CHNENBL6                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,6)
#define SDMAARM2_CHNENBL7                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,7)
#define SDMAARM2_CHNENBL8                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,8)
#define SDMAARM2_CHNENBL9                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,9)
#define SDMAARM2_CHNENBL10                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,10)
#define SDMAARM2_CHNENBL11                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,11)
#define SDMAARM2_CHNENBL12                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,12)
#define SDMAARM2_CHNENBL13                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,13)
#define SDMAARM2_CHNENBL14                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,14)
#define SDMAARM2_CHNENBL15                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,15)
#define SDMAARM2_CHNENBL16                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,16)
#define SDMAARM2_CHNENBL17                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,17)
#define SDMAARM2_CHNENBL18                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,18)
#define SDMAARM2_CHNENBL19                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,19)
#define SDMAARM2_CHNENBL20                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,20)
#define SDMAARM2_CHNENBL21                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,21)
#define SDMAARM2_CHNENBL22                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,22)
#define SDMAARM2_CHNENBL23                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,23)
#define SDMAARM2_CHNENBL24                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,24)
#define SDMAARM2_CHNENBL25                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,25)
#define SDMAARM2_CHNENBL26                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,26)
#define SDMAARM2_CHNENBL27                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,27)
#define SDMAARM2_CHNENBL28                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,28)
#define SDMAARM2_CHNENBL29                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,29)
#define SDMAARM2_CHNENBL30                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,30)
#define SDMAARM2_CHNENBL31                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,31)
#define SDMAARM2_CHNENBL32                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,32)
#define SDMAARM2_CHNENBL33                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,33)
#define SDMAARM2_CHNENBL34                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,34)
#define SDMAARM2_CHNENBL35                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,35)
#define SDMAARM2_CHNENBL36                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,36)
#define SDMAARM2_CHNENBL37                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,37)
#define SDMAARM2_CHNENBL38                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,38)
#define SDMAARM2_CHNENBL39                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,39)
#define SDMAARM2_CHNENBL40                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,40)
#define SDMAARM2_CHNENBL41                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,41)
#define SDMAARM2_CHNENBL42                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,42)
#define SDMAARM2_CHNENBL43                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,43)
#define SDMAARM2_CHNENBL44                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,44)
#define SDMAARM2_CHNENBL45                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,45)
#define SDMAARM2_CHNENBL46                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,46)
#define SDMAARM2_CHNENBL47                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,47)

/* SDMAARM - Register array accessors */
#define SDMAARM1_SDMA_CHNPRI(index)              SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,index)
#define SDMAARM2_SDMA_CHNPRI(index)              SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,index)
#define SDMAARM1_CHNENBL(index)                  SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,index)
#define SDMAARM2_CHNENBL(index)                  SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SDMAARM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SDMAARM_Peripheral */


/* ----------------------------------------------------------------------------
   -- SEMA4
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Peripheral SEMA4
 * @{
 */

/** SEMA4 - Peripheral register structure */
typedef struct SEMA4_MemMap {
  uint8_t Gate00;                                  /**< Semaphores Gate 0 Register, offset: 0x0 */
  uint8_t Gate01;                                  /**< Semaphores Gate 1 Register, offset: 0x1 */
  uint8_t Gate02;                                  /**< Semaphores Gate 2 Register, offset: 0x2 */
  uint8_t Gate03;                                  /**< Semaphores Gate 3 Register, offset: 0x3 */
  uint8_t Gate04;                                  /**< Semaphores Gate 4 Register, offset: 0x4 */
  uint8_t Gate05;                                  /**< Semaphores Gate 5 Register, offset: 0x5 */
  uint8_t Gate06;                                  /**< Semaphores Gate 6 Register, offset: 0x6 */
  uint8_t Gate07;                                  /**< Semaphores Gate 7 Register, offset: 0x7 */
  uint8_t Gate08;                                  /**< Semaphores Gate 8 Register, offset: 0x8 */
  uint8_t Gate09;                                  /**< Semaphores Gate 9 Register, offset: 0x9 */
  uint8_t Gate10;                                  /**< Semaphores Gate 10 Register, offset: 0xA */
  uint8_t Gate11;                                  /**< Semaphores Gate 11 Register, offset: 0xB */
  uint8_t Gate12;                                  /**< Semaphores Gate 12 Register, offset: 0xC */
  uint8_t Gate13;                                  /**< Semaphores Gate 13 Register, offset: 0xD */
  uint8_t Gate14;                                  /**< Semaphores Gate 14 Register, offset: 0xE */
  uint8_t Gate15;                                  /**< Semaphores Gate 15 Register, offset: 0xF */
  uint8_t RESERVED_0[48];
  struct {                                         /* offset: 0x40, array step: 0x8 */
    uint16_t CPINE;                                  /**< Semaphores Processor n IRQ Notification Enable, array offset: 0x40, array step: 0x8 */
    uint8_t RESERVED_0[6];
  } CPINE[2];
  uint8_t RESERVED_1[48];
  struct {                                         /* offset: 0x80, array step: 0x8 */
    uint16_t CPNTF;                                  /**< Semaphores Processor n IRQ Notification, array offset: 0x80, array step: 0x8 */
    uint8_t RESERVED_0[6];
  } CPNTF[2];
  uint8_t RESERVED_2[112];
  uint16_t RSTGT;                                  /**< Semaphores (Secure) Reset Gate n, offset: 0x100 */
  uint8_t RESERVED_3[2];
  uint16_t RSTNTF;                                 /**< Semaphores (Secure) Reset IRQ Notification, offset: 0x104 */
} volatile *SEMA4_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SEMA4 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Accessor_Macros SEMA4 - Register accessor macros
 * @{
 */


/* SEMA4 - Register accessors */
#define SEMA4_Gate00_REG(base)                   ((base)->Gate00)
#define SEMA4_Gate01_REG(base)                   ((base)->Gate01)
#define SEMA4_Gate02_REG(base)                   ((base)->Gate02)
#define SEMA4_Gate03_REG(base)                   ((base)->Gate03)
#define SEMA4_Gate04_REG(base)                   ((base)->Gate04)
#define SEMA4_Gate05_REG(base)                   ((base)->Gate05)
#define SEMA4_Gate06_REG(base)                   ((base)->Gate06)
#define SEMA4_Gate07_REG(base)                   ((base)->Gate07)
#define SEMA4_Gate08_REG(base)                   ((base)->Gate08)
#define SEMA4_Gate09_REG(base)                   ((base)->Gate09)
#define SEMA4_Gate10_REG(base)                   ((base)->Gate10)
#define SEMA4_Gate11_REG(base)                   ((base)->Gate11)
#define SEMA4_Gate12_REG(base)                   ((base)->Gate12)
#define SEMA4_Gate13_REG(base)                   ((base)->Gate13)
#define SEMA4_Gate14_REG(base)                   ((base)->Gate14)
#define SEMA4_Gate15_REG(base)                   ((base)->Gate15)
#define SEMA4_CPINE_REG(base,index)              ((base)->CPINE[index].CPINE)
#define SEMA4_CPNTF_REG(base,index)              ((base)->CPNTF[index].CPNTF)
#define SEMA4_RSTGT_REG(base)                    ((base)->RSTGT)
#define SEMA4_RSTNTF_REG(base)                   ((base)->RSTNTF)

/*!
 * @}
 */ /* end of group SEMA4_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SEMA4 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Masks SEMA4 Register Masks
 * @{
 */

/*! @name Gate00 - Semaphores Gate 0 Register */
/*! @{ */
#define SEMA4_Gate00_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate00_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate00_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate00_GTFSM_SHIFT)) & SEMA4_Gate00_GTFSM_MASK)
/*! @} */

/*! @name Gate01 - Semaphores Gate 1 Register */
/*! @{ */
#define SEMA4_Gate01_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate01_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate01_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate01_GTFSM_SHIFT)) & SEMA4_Gate01_GTFSM_MASK)
/*! @} */

/*! @name Gate02 - Semaphores Gate 2 Register */
/*! @{ */
#define SEMA4_Gate02_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate02_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate02_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate02_GTFSM_SHIFT)) & SEMA4_Gate02_GTFSM_MASK)
/*! @} */

/*! @name Gate03 - Semaphores Gate 3 Register */
/*! @{ */
#define SEMA4_Gate03_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate03_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate03_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate03_GTFSM_SHIFT)) & SEMA4_Gate03_GTFSM_MASK)
/*! @} */

/*! @name Gate04 - Semaphores Gate 4 Register */
/*! @{ */
#define SEMA4_Gate04_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate04_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate04_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate04_GTFSM_SHIFT)) & SEMA4_Gate04_GTFSM_MASK)
/*! @} */

/*! @name Gate05 - Semaphores Gate 5 Register */
/*! @{ */
#define SEMA4_Gate05_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate05_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate05_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate05_GTFSM_SHIFT)) & SEMA4_Gate05_GTFSM_MASK)
/*! @} */

/*! @name Gate06 - Semaphores Gate 6 Register */
/*! @{ */
#define SEMA4_Gate06_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate06_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate06_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate06_GTFSM_SHIFT)) & SEMA4_Gate06_GTFSM_MASK)
/*! @} */

/*! @name Gate07 - Semaphores Gate 7 Register */
/*! @{ */
#define SEMA4_Gate07_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate07_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate07_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate07_GTFSM_SHIFT)) & SEMA4_Gate07_GTFSM_MASK)
/*! @} */

/*! @name Gate08 - Semaphores Gate 8 Register */
/*! @{ */
#define SEMA4_Gate08_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate08_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate08_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate08_GTFSM_SHIFT)) & SEMA4_Gate08_GTFSM_MASK)
/*! @} */

/*! @name Gate09 - Semaphores Gate 9 Register */
/*! @{ */
#define SEMA4_Gate09_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate09_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate09_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate09_GTFSM_SHIFT)) & SEMA4_Gate09_GTFSM_MASK)
/*! @} */

/*! @name Gate10 - Semaphores Gate 10 Register */
/*! @{ */
#define SEMA4_Gate10_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate10_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate10_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate10_GTFSM_SHIFT)) & SEMA4_Gate10_GTFSM_MASK)
/*! @} */

/*! @name Gate11 - Semaphores Gate 11 Register */
/*! @{ */
#define SEMA4_Gate11_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate11_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate11_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate11_GTFSM_SHIFT)) & SEMA4_Gate11_GTFSM_MASK)
/*! @} */

/*! @name Gate12 - Semaphores Gate 12 Register */
/*! @{ */
#define SEMA4_Gate12_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate12_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate12_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate12_GTFSM_SHIFT)) & SEMA4_Gate12_GTFSM_MASK)
/*! @} */

/*! @name Gate13 - Semaphores Gate 13 Register */
/*! @{ */
#define SEMA4_Gate13_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate13_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate13_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate13_GTFSM_SHIFT)) & SEMA4_Gate13_GTFSM_MASK)
/*! @} */

/*! @name Gate14 - Semaphores Gate 14 Register */
/*! @{ */
#define SEMA4_Gate14_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate14_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate14_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate14_GTFSM_SHIFT)) & SEMA4_Gate14_GTFSM_MASK)
/*! @} */

/*! @name Gate15 - Semaphores Gate 15 Register */
/*! @{ */
#define SEMA4_Gate15_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate15_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate15_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate15_GTFSM_SHIFT)) & SEMA4_Gate15_GTFSM_MASK)
/*! @} */

/*! @name CPINE - Semaphores Processor n IRQ Notification Enable */
/*! @{ */
#define SEMA4_CPINE_INE7_MASK                    (0x1U)
#define SEMA4_CPINE_INE7_SHIFT                   (0U)
#define SEMA4_CPINE_INE6_MASK                    (0x2U)
#define SEMA4_CPINE_INE6_SHIFT                   (1U)
#define SEMA4_CPINE_INE5_MASK                    (0x4U)
#define SEMA4_CPINE_INE5_SHIFT                   (2U)
#define SEMA4_CPINE_INE4_MASK                    (0x8U)
#define SEMA4_CPINE_INE4_SHIFT                   (3U)
#define SEMA4_CPINE_INE3_MASK                    (0x10U)
#define SEMA4_CPINE_INE3_SHIFT                   (4U)
#define SEMA4_CPINE_INE2_MASK                    (0x20U)
#define SEMA4_CPINE_INE2_SHIFT                   (5U)
#define SEMA4_CPINE_INE1_MASK                    (0x40U)
#define SEMA4_CPINE_INE1_SHIFT                   (6U)
#define SEMA4_CPINE_INE0_MASK                    (0x80U)
#define SEMA4_CPINE_INE0_SHIFT                   (7U)
#define SEMA4_CPINE_INE15_MASK                   (0x100U)
#define SEMA4_CPINE_INE15_SHIFT                  (8U)
#define SEMA4_CPINE_INE14_MASK                   (0x200U)
#define SEMA4_CPINE_INE14_SHIFT                  (9U)
#define SEMA4_CPINE_INE13_MASK                   (0x400U)
#define SEMA4_CPINE_INE13_SHIFT                  (10U)
#define SEMA4_CPINE_INE12_MASK                   (0x800U)
#define SEMA4_CPINE_INE12_SHIFT                  (11U)
#define SEMA4_CPINE_INE11_MASK                   (0x1000U)
#define SEMA4_CPINE_INE11_SHIFT                  (12U)
#define SEMA4_CPINE_INE10_MASK                   (0x2000U)
#define SEMA4_CPINE_INE10_SHIFT                  (13U)
#define SEMA4_CPINE_INE9_MASK                    (0x4000U)
#define SEMA4_CPINE_INE9_SHIFT                   (14U)
#define SEMA4_CPINE_INE8_MASK                    (0x8000U)
#define SEMA4_CPINE_INE8_SHIFT                   (15U)
/*! @} */

/* The count of SEMA4_CPINE */
#define SEMA4_CPINE_COUNT                        (2U)

/*! @name CPNTF - Semaphores Processor n IRQ Notification */
/*! @{ */
#define SEMA4_CPNTF_GN7_MASK                     (0x1U)
#define SEMA4_CPNTF_GN7_SHIFT                    (0U)
#define SEMA4_CPNTF_GN6_MASK                     (0x2U)
#define SEMA4_CPNTF_GN6_SHIFT                    (1U)
#define SEMA4_CPNTF_GN5_MASK                     (0x4U)
#define SEMA4_CPNTF_GN5_SHIFT                    (2U)
#define SEMA4_CPNTF_GN4_MASK                     (0x8U)
#define SEMA4_CPNTF_GN4_SHIFT                    (3U)
#define SEMA4_CPNTF_GN3_MASK                     (0x10U)
#define SEMA4_CPNTF_GN3_SHIFT                    (4U)
#define SEMA4_CPNTF_GN2_MASK                     (0x20U)
#define SEMA4_CPNTF_GN2_SHIFT                    (5U)
#define SEMA4_CPNTF_GN1_MASK                     (0x40U)
#define SEMA4_CPNTF_GN1_SHIFT                    (6U)
#define SEMA4_CPNTF_GN0_MASK                     (0x80U)
#define SEMA4_CPNTF_GN0_SHIFT                    (7U)
#define SEMA4_CPNTF_GN15_MASK                    (0x100U)
#define SEMA4_CPNTF_GN15_SHIFT                   (8U)
#define SEMA4_CPNTF_GN14_MASK                    (0x200U)
#define SEMA4_CPNTF_GN14_SHIFT                   (9U)
#define SEMA4_CPNTF_GN13_MASK                    (0x400U)
#define SEMA4_CPNTF_GN13_SHIFT                   (10U)
#define SEMA4_CPNTF_GN12_MASK                    (0x800U)
#define SEMA4_CPNTF_GN12_SHIFT                   (11U)
#define SEMA4_CPNTF_GN11_MASK                    (0x1000U)
#define SEMA4_CPNTF_GN11_SHIFT                   (12U)
#define SEMA4_CPNTF_GN10_MASK                    (0x2000U)
#define SEMA4_CPNTF_GN10_SHIFT                   (13U)
#define SEMA4_CPNTF_GN9_MASK                     (0x4000U)
#define SEMA4_CPNTF_GN9_SHIFT                    (14U)
#define SEMA4_CPNTF_GN8_MASK                     (0x8000U)
#define SEMA4_CPNTF_GN8_SHIFT                    (15U)
/*! @} */

/* The count of SEMA4_CPNTF */
#define SEMA4_CPNTF_COUNT                        (2U)

/*! @name RSTGT - Semaphores (Secure) Reset Gate n */
/*! @{ */
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK    (0xFFU)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT   (0U)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP(x)      (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT)) & SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK)
#define SEMA4_RSTGT_RSTGTN_MASK                  (0xFF00U)
#define SEMA4_RSTGT_RSTGTN_SHIFT                 (8U)
#define SEMA4_RSTGT_RSTGTN(x)                    (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGTN_SHIFT)) & SEMA4_RSTGT_RSTGTN_MASK)
/*! @} */

/*! @name RSTNTF - Semaphores (Secure) Reset IRQ Notification */
/*! @{ */
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK   (0xFFU)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT  (0U)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP(x)     (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT)) & SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK)
#define SEMA4_RSTNTF_RSTNTN_MASK                 (0xFF00U)
#define SEMA4_RSTNTF_RSTNTN_SHIFT                (8U)
#define SEMA4_RSTNTF_RSTNTN(x)                   (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNTN_SHIFT)) & SEMA4_RSTNTF_RSTNTN_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SEMA4_Register_Masks */


/* SEMA4 - Peripheral instance base addresses */
/** Peripheral SEMA4 base pointer */
#define SEMA4_BASE_PTR                           ((SEMA4_MemMapPtr)0x30AC0000u)
/** Array initializer of SEMA4 peripheral base pointers */
#define SEMA4_BASE_PTRS                          { SEMA4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SEMA4 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Accessor_Macros SEMA4 - Register accessor macros
 * @{
 */


/* SEMA4 - Register instance definitions */
/* SEMA4 */
#define SEMA4_Gate00                             SEMA4_Gate00_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate01                             SEMA4_Gate01_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate02                             SEMA4_Gate02_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate03                             SEMA4_Gate03_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate04                             SEMA4_Gate04_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate05                             SEMA4_Gate05_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate06                             SEMA4_Gate06_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate07                             SEMA4_Gate07_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate08                             SEMA4_Gate08_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate09                             SEMA4_Gate09_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate10                             SEMA4_Gate10_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate11                             SEMA4_Gate11_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate12                             SEMA4_Gate12_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate13                             SEMA4_Gate13_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate14                             SEMA4_Gate14_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate15                             SEMA4_Gate15_REG(SEMA4_BASE_PTR)
#define SEMA4_CP0INE                             SEMA4_CPINE_REG(SEMA4_BASE_PTR,0)
#define SEMA4_CP1INE                             SEMA4_CPINE_REG(SEMA4_BASE_PTR,1)
#define SEMA4_CP0NTF                             SEMA4_CPNTF_REG(SEMA4_BASE_PTR,0)
#define SEMA4_CP1NTF                             SEMA4_CPNTF_REG(SEMA4_BASE_PTR,1)
#define SEMA4_RSTGT                              SEMA4_RSTGT_REG(SEMA4_BASE_PTR)
#define SEMA4_RSTNTF                             SEMA4_RSTNTF_REG(SEMA4_BASE_PTR)

/* SEMA4 - Register array accessors */
#define SEMA4_CPINE(index)                       SEMA4_CPINE_REG(SEMA4_BASE_PTR,index)
#define SEMA4_CPNTF(index)                       SEMA4_CPNTF_REG(SEMA4_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SEMA4_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SEMA4_Peripheral */


/* ----------------------------------------------------------------------------
   -- SNVS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Peripheral SNVS
 * @{
 */

/** SNVS - Peripheral register structure */
typedef struct SNVS_MemMap {
  uint32_t HPLR;                                   /**< SNVS_HP Lock Register, offset: 0x0 */
  uint32_t HPCOMR;                                 /**< SNVS_HP Command Register, offset: 0x4 */
  uint32_t HPCR;                                   /**< SNVS_HP Control Register, offset: 0x8 */
  uint32_t HPSICR;                                 /**< SNVS_HP Security Interrupt Control Register, offset: 0xC */
  uint32_t HPSVCR;                                 /**< SNVS_HP Security Violation Control Register, offset: 0x10 */
  uint32_t HPSR;                                   /**< SNVS_HP Status Register, offset: 0x14 */
  uint32_t HPSVSR;                                 /**< SNVS_HP Security Violation Status Register, offset: 0x18 */
  uint32_t HPHACIVR;                               /**< SNVS_HP High Assurance Counter IV Register, offset: 0x1C */
  uint32_t HPHACR;                                 /**< SNVS_HP High Assurance Counter Register, offset: 0x20 */
  uint32_t HPRTCMR;                                /**< SNVS_HP Real Time Counter MSB Register, offset: 0x24 */
  uint32_t HPRTCLR;                                /**< SNVS_HP Real Time Counter LSB Register, offset: 0x28 */
  uint32_t HPTAMR;                                 /**< SNVS_HP Time Alarm MSB Register, offset: 0x2C */
  uint32_t HPTALR;                                 /**< SNVS_HP Time Alarm LSB Register, offset: 0x30 */
  uint32_t LPLR;                                   /**< SNVS_LP Lock Register, offset: 0x34 */
  uint32_t LPCR;                                   /**< SNVS_LP Control Register, offset: 0x38 */
  uint32_t LPMKCR;                                 /**< SNVS_LP Master Key Control Register, offset: 0x3C */
  uint32_t LPSVCR;                                 /**< SNVS_LP Security Violation Control Register, offset: 0x40 */
  uint8_t RESERVED_0[4];
  uint32_t LPSECR;                                 /**< SNVS_LP Security Events Configuration Register, offset: 0x48 */
  uint32_t LPSR;                                   /**< SNVS_LP Status Register, offset: 0x4C */
  uint32_t LPSRTCMR;                               /**< SNVS_LP Secure Real Time Counter MSB Register, offset: 0x50 */
  uint32_t LPSRTCLR;                               /**< SNVS_LP Secure Real Time Counter LSB Register, offset: 0x54 */
  uint32_t LPTAR;                                  /**< SNVS_LP Time Alarm Register, offset: 0x58 */
  uint32_t LPSMCMR;                                /**< SNVS_LP Secure Monotonic Counter MSB Register, offset: 0x5C */
  uint32_t LPSMCLR;                                /**< SNVS_LP Secure Monotonic Counter LSB Register, offset: 0x60 */
  uint32_t LPPGDR;                                 /**< SNVS_LP Power Glitch Detector Register, offset: 0x64 */
  uint32_t LPGPR0_LEGACY_ALIAS;                    /**< SNVS_LP General Purpose Register 0 (legacy alias), offset: 0x68 */
  uint32_t LPZMKR[8];                              /**< SNVS_LP Zeroizable Master Key Register, array offset: 0x6C, array step: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t LPGPR_ALIAS[4];                         /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x90, array step: 0x4 */
  uint8_t RESERVED_2[96];
  uint32_t LPGPR[4];                               /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_3[2792];
  uint32_t HPVIDR1;                                /**< SNVS_HP Version ID Register 1, offset: 0xBF8 */
  uint32_t HPVIDR2;                                /**< SNVS_HP Version ID Register 2, offset: 0xBFC */
} volatile *SNVS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register accessors */
#define SNVS_HPLR_REG(base)                      ((base)->HPLR)
#define SNVS_HPCOMR_REG(base)                    ((base)->HPCOMR)
#define SNVS_HPCR_REG(base)                      ((base)->HPCR)
#define SNVS_HPSICR_REG(base)                    ((base)->HPSICR)
#define SNVS_HPSVCR_REG(base)                    ((base)->HPSVCR)
#define SNVS_HPSR_REG(base)                      ((base)->HPSR)
#define SNVS_HPSVSR_REG(base)                    ((base)->HPSVSR)
#define SNVS_HPHACIVR_REG(base)                  ((base)->HPHACIVR)
#define SNVS_HPHACR_REG(base)                    ((base)->HPHACR)
#define SNVS_HPRTCMR_REG(base)                   ((base)->HPRTCMR)
#define SNVS_HPRTCLR_REG(base)                   ((base)->HPRTCLR)
#define SNVS_HPTAMR_REG(base)                    ((base)->HPTAMR)
#define SNVS_HPTALR_REG(base)                    ((base)->HPTALR)
#define SNVS_LPLR_REG(base)                      ((base)->LPLR)
#define SNVS_LPCR_REG(base)                      ((base)->LPCR)
#define SNVS_LPMKCR_REG(base)                    ((base)->LPMKCR)
#define SNVS_LPSVCR_REG(base)                    ((base)->LPSVCR)
#define SNVS_LPSECR_REG(base)                    ((base)->LPSECR)
#define SNVS_LPSR_REG(base)                      ((base)->LPSR)
#define SNVS_LPSRTCMR_REG(base)                  ((base)->LPSRTCMR)
#define SNVS_LPSRTCLR_REG(base)                  ((base)->LPSRTCLR)
#define SNVS_LPTAR_REG(base)                     ((base)->LPTAR)
#define SNVS_LPSMCMR_REG(base)                   ((base)->LPSMCMR)
#define SNVS_LPSMCLR_REG(base)                   ((base)->LPSMCLR)
#define SNVS_LPPGDR_REG(base)                    ((base)->LPPGDR)
#define SNVS_LPGPR0_LEGACY_ALIAS_REG(base)       ((base)->LPGPR0_LEGACY_ALIAS)
#define SNVS_LPZMKR_REG(base,index)              ((base)->LPZMKR[index])
#define SNVS_LPGPR_ALIAS_REG(base,index)         ((base)->LPGPR_ALIAS[index])
#define SNVS_LPGPR_REG(base,index)               ((base)->LPGPR[index])
#define SNVS_HPVIDR1_REG(base)                   ((base)->HPVIDR1)
#define SNVS_HPVIDR2_REG(base)                   ((base)->HPVIDR2)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SNVS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Masks SNVS Register Masks
 * @{
 */

/*! @name HPLR - SNVS_HP Lock Register */
/*! @{ */
#define SNVS_HPLR_ZMK_WSL_MASK                   (0x1U)
#define SNVS_HPLR_ZMK_WSL_SHIFT                  (0U)
#define SNVS_HPLR_ZMK_RSL_MASK                   (0x2U)
#define SNVS_HPLR_ZMK_RSL_SHIFT                  (1U)
#define SNVS_HPLR_SRTC_SL_MASK                   (0x4U)
#define SNVS_HPLR_SRTC_SL_SHIFT                  (2U)
#define SNVS_HPLR_LPCALB_SL_MASK                 (0x8U)
#define SNVS_HPLR_LPCALB_SL_SHIFT                (3U)
#define SNVS_HPLR_MC_SL_MASK                     (0x10U)
#define SNVS_HPLR_MC_SL_SHIFT                    (4U)
#define SNVS_HPLR_GPR_SL_MASK                    (0x20U)
#define SNVS_HPLR_GPR_SL_SHIFT                   (5U)
#define SNVS_HPLR_LPSVCR_SL_MASK                 (0x40U)
#define SNVS_HPLR_LPSVCR_SL_SHIFT                (6U)
#define SNVS_HPLR_LPSECR_SL_MASK                 (0x100U)
#define SNVS_HPLR_LPSECR_SL_SHIFT                (8U)
#define SNVS_HPLR_MKS_SL_MASK                    (0x200U)
#define SNVS_HPLR_MKS_SL_SHIFT                   (9U)
#define SNVS_HPLR_HPSVCR_L_MASK                  (0x10000U)
#define SNVS_HPLR_HPSVCR_L_SHIFT                 (16U)
#define SNVS_HPLR_HPSICR_L_MASK                  (0x20000U)
#define SNVS_HPLR_HPSICR_L_SHIFT                 (17U)
#define SNVS_HPLR_HAC_L_MASK                     (0x40000U)
#define SNVS_HPLR_HAC_L_SHIFT                    (18U)
/*! @} */

/*! @name HPCOMR - SNVS_HP Command Register */
/*! @{ */
#define SNVS_HPCOMR_SSM_ST_MASK                  (0x1U)
#define SNVS_HPCOMR_SSM_ST_SHIFT                 (0U)
#define SNVS_HPCOMR_SSM_ST_DIS_MASK              (0x2U)
#define SNVS_HPCOMR_SSM_ST_DIS_SHIFT             (1U)
#define SNVS_HPCOMR_SSM_SFNS_DIS_MASK            (0x4U)
#define SNVS_HPCOMR_SSM_SFNS_DIS_SHIFT           (2U)
#define SNVS_HPCOMR_LP_SWR_MASK                  (0x10U)
#define SNVS_HPCOMR_LP_SWR_SHIFT                 (4U)
#define SNVS_HPCOMR_LP_SWR_DIS_MASK              (0x20U)
#define SNVS_HPCOMR_LP_SWR_DIS_SHIFT             (5U)
#define SNVS_HPCOMR_SW_SV_MASK                   (0x100U)
#define SNVS_HPCOMR_SW_SV_SHIFT                  (8U)
#define SNVS_HPCOMR_SW_FSV_MASK                  (0x200U)
#define SNVS_HPCOMR_SW_FSV_SHIFT                 (9U)
#define SNVS_HPCOMR_SW_LPSV_MASK                 (0x400U)
#define SNVS_HPCOMR_SW_LPSV_SHIFT                (10U)
#define SNVS_HPCOMR_PROG_ZMK_MASK                (0x1000U)
#define SNVS_HPCOMR_PROG_ZMK_SHIFT               (12U)
#define SNVS_HPCOMR_MKS_EN_MASK                  (0x2000U)
#define SNVS_HPCOMR_MKS_EN_SHIFT                 (13U)
#define SNVS_HPCOMR_HAC_EN_MASK                  (0x10000U)
#define SNVS_HPCOMR_HAC_EN_SHIFT                 (16U)
#define SNVS_HPCOMR_HAC_LOAD_MASK                (0x20000U)
#define SNVS_HPCOMR_HAC_LOAD_SHIFT               (17U)
#define SNVS_HPCOMR_HAC_CLEAR_MASK               (0x40000U)
#define SNVS_HPCOMR_HAC_CLEAR_SHIFT              (18U)
#define SNVS_HPCOMR_HAC_STOP_MASK                (0x80000U)
#define SNVS_HPCOMR_HAC_STOP_SHIFT               (19U)
#define SNVS_HPCOMR_NPSWA_EN_MASK                (0x80000000U)
#define SNVS_HPCOMR_NPSWA_EN_SHIFT               (31U)
/*! @} */

/*! @name HPCR - SNVS_HP Control Register */
/*! @{ */
#define SNVS_HPCR_RTC_EN_MASK                    (0x1U)
#define SNVS_HPCR_RTC_EN_SHIFT                   (0U)
#define SNVS_HPCR_HPTA_EN_MASK                   (0x2U)
#define SNVS_HPCR_HPTA_EN_SHIFT                  (1U)
#define SNVS_HPCR_DIS_PI_MASK                    (0x4U)
#define SNVS_HPCR_DIS_PI_SHIFT                   (2U)
#define SNVS_HPCR_PI_EN_MASK                     (0x8U)
#define SNVS_HPCR_PI_EN_SHIFT                    (3U)
#define SNVS_HPCR_PI_FREQ_MASK                   (0xF0U)
#define SNVS_HPCR_PI_FREQ_SHIFT                  (4U)
/*! PI_FREQ
 *  0b0000..- bit 0 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0001..- bit 1 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0010..- bit 2 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0011..- bit 3 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0100..- bit 4 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0101..- bit 5 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0110..- bit 6 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b0111..- bit 7 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1000..- bit 8 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1001..- bit 9 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1010..- bit 10 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1011..- bit 11 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1100..- bit 12 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1101..- bit 13 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1110..- bit 14 of the HPRTCLR is selected as a source of the periodic interrupt
 *  0b1111..- bit 15 of the HPRTCLR is selected as a source of the periodic interrupt
 */
#define SNVS_HPCR_PI_FREQ(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_PI_FREQ_SHIFT)) & SNVS_HPCR_PI_FREQ_MASK)
#define SNVS_HPCR_HPCALB_EN_MASK                 (0x100U)
#define SNVS_HPCR_HPCALB_EN_SHIFT                (8U)
#define SNVS_HPCR_HPCALB_VAL_MASK                (0x7C00U)
#define SNVS_HPCR_HPCALB_VAL_SHIFT               (10U)
/*! HPCALB_VAL
 *  0b00000..+0 counts per each 32768 ticks of the counter
 *  0b00001..+1 counts per each 32768 ticks of the counter
 *  0b00010..+2 counts per each 32768 ticks of the counter
 *  0b01111..+15 counts per each 32768 ticks of the counter
 *  0b10000..-16 counts per each 32768 ticks of the counter
 *  0b10001..-15 counts per each 32768 ticks of the counter
 *  0b11110..-2 counts per each 32768 ticks of the counter
 *  0b11111..-1 counts per each 32768 ticks of the counter
 */
#define SNVS_HPCR_HPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPCALB_VAL_SHIFT)) & SNVS_HPCR_HPCALB_VAL_MASK)
#define SNVS_HPCR_HP_TS_MASK                     (0x10000U)
#define SNVS_HPCR_HP_TS_SHIFT                    (16U)
#define SNVS_HPCR_BTN_CONFIG_MASK                (0x7000000U)
#define SNVS_HPCR_BTN_CONFIG_SHIFT               (24U)
#define SNVS_HPCR_BTN_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_BTN_CONFIG_SHIFT)) & SNVS_HPCR_BTN_CONFIG_MASK)
#define SNVS_HPCR_BTN_MASK_MASK                  (0x8000000U)
#define SNVS_HPCR_BTN_MASK_SHIFT                 (27U)
/*! @} */

/*! @name HPSICR - SNVS_HP Security Interrupt Control Register */
/*! @{ */
#define SNVS_HPSICR_SV0_EN_MASK                  (0x1U)
#define SNVS_HPSICR_SV0_EN_SHIFT                 (0U)
#define SNVS_HPSICR_SV1_EN_MASK                  (0x2U)
#define SNVS_HPSICR_SV1_EN_SHIFT                 (1U)
#define SNVS_HPSICR_SV2_EN_MASK                  (0x4U)
#define SNVS_HPSICR_SV2_EN_SHIFT                 (2U)
#define SNVS_HPSICR_SV3_EN_MASK                  (0x8U)
#define SNVS_HPSICR_SV3_EN_SHIFT                 (3U)
#define SNVS_HPSICR_SV4_EN_MASK                  (0x10U)
#define SNVS_HPSICR_SV4_EN_SHIFT                 (4U)
#define SNVS_HPSICR_SV5_EN_MASK                  (0x20U)
#define SNVS_HPSICR_SV5_EN_SHIFT                 (5U)
#define SNVS_HPSICR_LPSVI_EN_MASK                (0x80000000U)
#define SNVS_HPSICR_LPSVI_EN_SHIFT               (31U)
/*! @} */

/*! @name HPSVCR - SNVS_HP Security Violation Control Register */
/*! @{ */
#define SNVS_HPSVCR_SV0_CFG_MASK                 (0x1U)
#define SNVS_HPSVCR_SV0_CFG_SHIFT                (0U)
#define SNVS_HPSVCR_SV1_CFG_MASK                 (0x2U)
#define SNVS_HPSVCR_SV1_CFG_SHIFT                (1U)
#define SNVS_HPSVCR_SV2_CFG_MASK                 (0x4U)
#define SNVS_HPSVCR_SV2_CFG_SHIFT                (2U)
#define SNVS_HPSVCR_SV3_CFG_MASK                 (0x8U)
#define SNVS_HPSVCR_SV3_CFG_SHIFT                (3U)
#define SNVS_HPSVCR_SV4_CFG_MASK                 (0x10U)
#define SNVS_HPSVCR_SV4_CFG_SHIFT                (4U)
#define SNVS_HPSVCR_SV5_CFG_MASK                 (0x60U)
#define SNVS_HPSVCR_SV5_CFG_SHIFT                (5U)
/*! SV5_CFG
 *  0b00..Security Violation 5 is disabled
 *  0b01..Security Violation 5 is a non-fatal violation
 *  0b1x..Security Violation 5 is a fatal violation
 */
#define SNVS_HPSVCR_SV5_CFG(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVCR_SV5_CFG_SHIFT)) & SNVS_HPSVCR_SV5_CFG_MASK)
#define SNVS_HPSVCR_LPSV_CFG_MASK                (0xC0000000U)
#define SNVS_HPSVCR_LPSV_CFG_SHIFT               (30U)
/*! LPSV_CFG
 *  0b00..LP security violation is disabled
 *  0b01..LP security violation is a non-fatal violation
 *  0b1x..LP security violation is a fatal violation
 */
#define SNVS_HPSVCR_LPSV_CFG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVCR_LPSV_CFG_SHIFT)) & SNVS_HPSVCR_LPSV_CFG_MASK)
/*! @} */

/*! @name HPSR - SNVS_HP Status Register */
/*! @{ */
#define SNVS_HPSR_HPTA_MASK                      (0x1U)
#define SNVS_HPSR_HPTA_SHIFT                     (0U)
#define SNVS_HPSR_PI_MASK                        (0x2U)
#define SNVS_HPSR_PI_SHIFT                       (1U)
#define SNVS_HPSR_LPDIS_MASK                     (0x10U)
#define SNVS_HPSR_LPDIS_SHIFT                    (4U)
#define SNVS_HPSR_BTN_MASK                       (0x40U)
#define SNVS_HPSR_BTN_SHIFT                      (6U)
#define SNVS_HPSR_BI_MASK                        (0x80U)
#define SNVS_HPSR_BI_SHIFT                       (7U)
#define SNVS_HPSR_SSM_STATE_MASK                 (0xF00U)
#define SNVS_HPSR_SSM_STATE_SHIFT                (8U)
/*! SSM_STATE
 *  0b0000..Init
 *  0b0001..Hard Fail
 *  0b0011..Soft Fail
 *  0b1000..Init Intermediate (transition state between Init and Check - SSM stays in this state only one clock cycle)
 *  0b1001..Check
 *  0b1011..Non-Secure
 *  0b1101..Trusted
 *  0b1111..Secure
 */
#define SNVS_HPSR_SSM_STATE(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_SSM_STATE_SHIFT)) & SNVS_HPSR_SSM_STATE_MASK)
#define SNVS_HPSR_SECURITY_CONFIG_MASK           (0xF000U)
#define SNVS_HPSR_SECURITY_CONFIG_SHIFT          (12U)
/*! SECURITY_CONFIG
 *  0b0000, 0b1000..FAB configuration
 *  0b0001, 0b0010, 0b0011..OPEN configuration
 *  0b1010, 0b1001, 0b1011..CLOSED configuration
 *  0bx1xx..FIELD RETURN configuration
 */
#define SNVS_HPSR_SECURITY_CONFIG(x)             (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_SECURITY_CONFIG_SHIFT)) & SNVS_HPSR_SECURITY_CONFIG_MASK)
#define SNVS_HPSR_OTPMK_SYNDROME_MASK            (0x1FF0000U)
#define SNVS_HPSR_OTPMK_SYNDROME_SHIFT           (16U)
#define SNVS_HPSR_OTPMK_SYNDROME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_HPSR_OTPMK_SYNDROME_SHIFT)) & SNVS_HPSR_OTPMK_SYNDROME_MASK)
#define SNVS_HPSR_OTPMK_ZERO_MASK                (0x8000000U)
#define SNVS_HPSR_OTPMK_ZERO_SHIFT               (27U)
#define SNVS_HPSR_ZMK_ZERO_MASK                  (0x80000000U)
#define SNVS_HPSR_ZMK_ZERO_SHIFT                 (31U)
/*! @} */

/*! @name HPSVSR - SNVS_HP Security Violation Status Register */
/*! @{ */
#define SNVS_HPSVSR_SV0_MASK                     (0x1U)
#define SNVS_HPSVSR_SV0_SHIFT                    (0U)
#define SNVS_HPSVSR_SV1_MASK                     (0x2U)
#define SNVS_HPSVSR_SV1_SHIFT                    (1U)
#define SNVS_HPSVSR_SV2_MASK                     (0x4U)
#define SNVS_HPSVSR_SV2_SHIFT                    (2U)
#define SNVS_HPSVSR_SV3_MASK                     (0x8U)
#define SNVS_HPSVSR_SV3_SHIFT                    (3U)
#define SNVS_HPSVSR_SV4_MASK                     (0x10U)
#define SNVS_HPSVSR_SV4_SHIFT                    (4U)
#define SNVS_HPSVSR_SV5_MASK                     (0x20U)
#define SNVS_HPSVSR_SV5_SHIFT                    (5U)
#define SNVS_HPSVSR_SW_SV_MASK                   (0x2000U)
#define SNVS_HPSVSR_SW_SV_SHIFT                  (13U)
#define SNVS_HPSVSR_SW_FSV_MASK                  (0x4000U)
#define SNVS_HPSVSR_SW_FSV_SHIFT                 (14U)
#define SNVS_HPSVSR_SW_LPSV_MASK                 (0x8000U)
#define SNVS_HPSVSR_SW_LPSV_SHIFT                (15U)
#define SNVS_HPSVSR_ZMK_SYNDROME_MASK            (0x1FF0000U)
#define SNVS_HPSVSR_ZMK_SYNDROME_SHIFT           (16U)
#define SNVS_HPSVSR_ZMK_SYNDROME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_HPSVSR_ZMK_SYNDROME_SHIFT)) & SNVS_HPSVSR_ZMK_SYNDROME_MASK)
#define SNVS_HPSVSR_ZMK_ECC_FAIL_MASK            (0x8000000U)
#define SNVS_HPSVSR_ZMK_ECC_FAIL_SHIFT           (27U)
#define SNVS_HPSVSR_LP_SEC_VIO_MASK              (0x80000000U)
#define SNVS_HPSVSR_LP_SEC_VIO_SHIFT             (31U)
/*! @} */

/*! @name HPHACIVR - SNVS_HP High Assurance Counter IV Register */
/*! @{ */
#define SNVS_HPHACIVR_HAC_COUNTER_IV_MASK        (0xFFFFFFFFU)
#define SNVS_HPHACIVR_HAC_COUNTER_IV_SHIFT       (0U)
#define SNVS_HPHACIVR_HAC_COUNTER_IV(x)          (((uint32_t)(((uint32_t)(x)) << SNVS_HPHACIVR_HAC_COUNTER_IV_SHIFT)) & SNVS_HPHACIVR_HAC_COUNTER_IV_MASK)
/*! @} */

/*! @name HPHACR - SNVS_HP High Assurance Counter Register */
/*! @{ */
#define SNVS_HPHACR_HAC_COUNTER_MASK             (0xFFFFFFFFU)
#define SNVS_HPHACR_HAC_COUNTER_SHIFT            (0U)
#define SNVS_HPHACR_HAC_COUNTER(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPHACR_HAC_COUNTER_SHIFT)) & SNVS_HPHACR_HAC_COUNTER_MASK)
/*! @} */

/*! @name HPRTCMR - SNVS_HP Real Time Counter MSB Register */
/*! @{ */
#define SNVS_HPRTCMR_RTC_MASK                    (0x7FFFU)
#define SNVS_HPRTCMR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCMR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCMR_RTC_SHIFT)) & SNVS_HPRTCMR_RTC_MASK)
/*! @} */

/*! @name HPRTCLR - SNVS_HP Real Time Counter LSB Register */
/*! @{ */
#define SNVS_HPRTCLR_RTC_MASK                    (0xFFFFFFFFU)
#define SNVS_HPRTCLR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCLR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCLR_RTC_SHIFT)) & SNVS_HPRTCLR_RTC_MASK)
/*! @} */

/*! @name HPTAMR - SNVS_HP Time Alarm MSB Register */
/*! @{ */
#define SNVS_HPTAMR_HPTA_MS_MASK                 (0x7FFFU)
#define SNVS_HPTAMR_HPTA_MS_SHIFT                (0U)
#define SNVS_HPTAMR_HPTA_MS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTAMR_HPTA_MS_SHIFT)) & SNVS_HPTAMR_HPTA_MS_MASK)
/*! @} */

/*! @name HPTALR - SNVS_HP Time Alarm LSB Register */
/*! @{ */
#define SNVS_HPTALR_HPTA_LS_MASK                 (0xFFFFFFFFU)
#define SNVS_HPTALR_HPTA_LS_SHIFT                (0U)
#define SNVS_HPTALR_HPTA_LS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTALR_HPTA_LS_SHIFT)) & SNVS_HPTALR_HPTA_LS_MASK)
/*! @} */

/*! @name LPLR - SNVS_LP Lock Register */
/*! @{ */
#define SNVS_LPLR_ZMK_WHL_MASK                   (0x1U)
#define SNVS_LPLR_ZMK_WHL_SHIFT                  (0U)
#define SNVS_LPLR_ZMK_RHL_MASK                   (0x2U)
#define SNVS_LPLR_ZMK_RHL_SHIFT                  (1U)
#define SNVS_LPLR_SRTC_HL_MASK                   (0x4U)
#define SNVS_LPLR_SRTC_HL_SHIFT                  (2U)
#define SNVS_LPLR_LPCALB_HL_MASK                 (0x8U)
#define SNVS_LPLR_LPCALB_HL_SHIFT                (3U)
#define SNVS_LPLR_MC_HL_MASK                     (0x10U)
#define SNVS_LPLR_MC_HL_SHIFT                    (4U)
#define SNVS_LPLR_GPR_HL_MASK                    (0x20U)
#define SNVS_LPLR_GPR_HL_SHIFT                   (5U)
#define SNVS_LPLR_LPSVCR_HL_MASK                 (0x40U)
#define SNVS_LPLR_LPSVCR_HL_SHIFT                (6U)
#define SNVS_LPLR_LPSECR_HL_MASK                 (0x100U)
#define SNVS_LPLR_LPSECR_HL_SHIFT                (8U)
#define SNVS_LPLR_MKS_HL_MASK                    (0x200U)
#define SNVS_LPLR_MKS_HL_SHIFT                   (9U)
/*! @} */

/*! @name LPCR - SNVS_LP Control Register */
/*! @{ */
#define SNVS_LPCR_SRTC_ENV_MASK                  (0x1U)
#define SNVS_LPCR_SRTC_ENV_SHIFT                 (0U)
#define SNVS_LPCR_LPTA_EN_MASK                   (0x2U)
#define SNVS_LPCR_LPTA_EN_SHIFT                  (1U)
#define SNVS_LPCR_MC_ENV_MASK                    (0x4U)
#define SNVS_LPCR_MC_ENV_SHIFT                   (2U)
#define SNVS_LPCR_LPWUI_EN_MASK                  (0x8U)
#define SNVS_LPCR_LPWUI_EN_SHIFT                 (3U)
#define SNVS_LPCR_SRTC_INV_EN_MASK               (0x10U)
#define SNVS_LPCR_SRTC_INV_EN_SHIFT              (4U)
#define SNVS_LPCR_DP_EN_MASK                     (0x20U)
#define SNVS_LPCR_DP_EN_SHIFT                    (5U)
#define SNVS_LPCR_TOP_MASK                       (0x40U)
#define SNVS_LPCR_TOP_SHIFT                      (6U)
#define SNVS_LPCR_PWR_GLITCH_EN_MASK             (0x80U)
#define SNVS_LPCR_PWR_GLITCH_EN_SHIFT            (7U)
#define SNVS_LPCR_LPCALB_EN_MASK                 (0x100U)
#define SNVS_LPCR_LPCALB_EN_SHIFT                (8U)
#define SNVS_LPCR_LPCALB_VAL_MASK                (0x7C00U)
#define SNVS_LPCR_LPCALB_VAL_SHIFT               (10U)
/*! LPCALB_VAL
 *  0b00000..+0 counts per each 32768 ticks of the counter clock
 *  0b00001..+1 counts per each 32768 ticks of the counter clock
 *  0b00010..+2 counts per each 32768 ticks of the counter clock
 *  0b01111..+15 counts per each 32768 ticks of the counter clock
 *  0b10000..-16 counts per each 32768 ticks of the counter clock
 *  0b10001..-15 counts per each 32768 ticks of the counter clock
 *  0b11110..-2 counts per each 32768 ticks of the counter clock
 *  0b11111..-1 counts per each 32768 ticks of the counter clock
 */
#define SNVS_LPCR_LPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_LPCALB_VAL_SHIFT)) & SNVS_LPCR_LPCALB_VAL_MASK)
#define SNVS_LPCR_BTN_PRESS_TIME_MASK            (0x30000U)
#define SNVS_LPCR_BTN_PRESS_TIME_SHIFT           (16U)
#define SNVS_LPCR_BTN_PRESS_TIME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_BTN_PRESS_TIME_SHIFT)) & SNVS_LPCR_BTN_PRESS_TIME_MASK)
#define SNVS_LPCR_DEBOUNCE_MASK                  (0xC0000U)
#define SNVS_LPCR_DEBOUNCE_SHIFT                 (18U)
#define SNVS_LPCR_DEBOUNCE(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_DEBOUNCE_SHIFT)) & SNVS_LPCR_DEBOUNCE_MASK)
#define SNVS_LPCR_ON_TIME_MASK                   (0x300000U)
#define SNVS_LPCR_ON_TIME_SHIFT                  (20U)
#define SNVS_LPCR_ON_TIME(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_ON_TIME_SHIFT)) & SNVS_LPCR_ON_TIME_MASK)
#define SNVS_LPCR_PK_EN_MASK                     (0x400000U)
#define SNVS_LPCR_PK_EN_SHIFT                    (22U)
#define SNVS_LPCR_PK_OVERRIDE_MASK               (0x800000U)
#define SNVS_LPCR_PK_OVERRIDE_SHIFT              (23U)
#define SNVS_LPCR_GPR_Z_DIS_MASK                 (0x1000000U)
#define SNVS_LPCR_GPR_Z_DIS_SHIFT                (24U)
/*! @} */

/*! @name LPMKCR - SNVS_LP Master Key Control Register */
/*! @{ */
#define SNVS_LPMKCR_MASTER_KEY_SEL_MASK          (0x3U)
#define SNVS_LPMKCR_MASTER_KEY_SEL_SHIFT         (0U)
/*! MASTER_KEY_SEL
 *  0b0x..Select one time programmable master key.
 *  0b10..Select zeroizable master key when MKS_EN bit is set .
 *  0b11..Select combined master key when MKS_EN bit is set .
 */
#define SNVS_LPMKCR_MASTER_KEY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << SNVS_LPMKCR_MASTER_KEY_SEL_SHIFT)) & SNVS_LPMKCR_MASTER_KEY_SEL_MASK)
#define SNVS_LPMKCR_ZMK_HWP_MASK                 (0x4U)
#define SNVS_LPMKCR_ZMK_HWP_SHIFT                (2U)
#define SNVS_LPMKCR_ZMK_VAL_MASK                 (0x8U)
#define SNVS_LPMKCR_ZMK_VAL_SHIFT                (3U)
#define SNVS_LPMKCR_ZMK_ECC_EN_MASK              (0x10U)
#define SNVS_LPMKCR_ZMK_ECC_EN_SHIFT             (4U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE_MASK           (0xFF80U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE_SHIFT          (7U)
#define SNVS_LPMKCR_ZMK_ECC_VALUE(x)             (((uint32_t)(((uint32_t)(x)) << SNVS_LPMKCR_ZMK_ECC_VALUE_SHIFT)) & SNVS_LPMKCR_ZMK_ECC_VALUE_MASK)
/*! @} */

/*! @name LPSVCR - SNVS_LP Security Violation Control Register */
/*! @{ */
#define SNVS_LPSVCR_SV0_EN_MASK                  (0x1U)
#define SNVS_LPSVCR_SV0_EN_SHIFT                 (0U)
#define SNVS_LPSVCR_SV1_EN_MASK                  (0x2U)
#define SNVS_LPSVCR_SV1_EN_SHIFT                 (1U)
#define SNVS_LPSVCR_SV2_EN_MASK                  (0x4U)
#define SNVS_LPSVCR_SV2_EN_SHIFT                 (2U)
#define SNVS_LPSVCR_SV3_EN_MASK                  (0x8U)
#define SNVS_LPSVCR_SV3_EN_SHIFT                 (3U)
#define SNVS_LPSVCR_SV4_EN_MASK                  (0x10U)
#define SNVS_LPSVCR_SV4_EN_SHIFT                 (4U)
#define SNVS_LPSVCR_SV5_EN_MASK                  (0x20U)
#define SNVS_LPSVCR_SV5_EN_SHIFT                 (5U)
/*! @} */

/*! @name LPSECR - SNVS_LP Security Events Configuration Register */
/*! @{ */
#define SNVS_LPSECR_SRTCR_EN_MASK                (0x2U)
#define SNVS_LPSECR_SRTCR_EN_SHIFT               (1U)
#define SNVS_LPSECR_MCR_EN_MASK                  (0x4U)
#define SNVS_LPSECR_MCR_EN_SHIFT                 (2U)
#define SNVS_LPSECR_PFD_OBSERV_MASK              (0x4000U)
#define SNVS_LPSECR_PFD_OBSERV_SHIFT             (14U)
#define SNVS_LPSECR_POR_OBSERV_MASK              (0x8000U)
#define SNVS_LPSECR_POR_OBSERV_SHIFT             (15U)
#define SNVS_LPSECR_LTDC_MASK                    (0x70000U)
#define SNVS_LPSECR_LTDC_SHIFT                   (16U)
#define SNVS_LPSECR_LTDC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_LPSECR_LTDC_SHIFT)) & SNVS_LPSECR_LTDC_MASK)
#define SNVS_LPSECR_HTDC_MASK                    (0x700000U)
#define SNVS_LPSECR_HTDC_SHIFT                   (20U)
#define SNVS_LPSECR_HTDC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_LPSECR_HTDC_SHIFT)) & SNVS_LPSECR_HTDC_MASK)
#define SNVS_LPSECR_VRC_MASK                     (0x7000000U)
#define SNVS_LPSECR_VRC_SHIFT                    (24U)
#define SNVS_LPSECR_VRC(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPSECR_VRC_SHIFT)) & SNVS_LPSECR_VRC_MASK)
#define SNVS_LPSECR_OSCB_MASK                    (0x10000000U)
#define SNVS_LPSECR_OSCB_SHIFT                   (28U)
/*! @} */

/*! @name LPSR - SNVS_LP Status Register */
/*! @{ */
#define SNVS_LPSR_LPTA_MASK                      (0x1U)
#define SNVS_LPSR_LPTA_SHIFT                     (0U)
#define SNVS_LPSR_SRTCR_MASK                     (0x2U)
#define SNVS_LPSR_SRTCR_SHIFT                    (1U)
#define SNVS_LPSR_MCR_MASK                       (0x4U)
#define SNVS_LPSR_MCR_SHIFT                      (2U)
#define SNVS_LPSR_PGD_MASK                       (0x8U)
#define SNVS_LPSR_PGD_SHIFT                      (3U)
#define SNVS_LPSR_ESVD_MASK                      (0x10000U)
#define SNVS_LPSR_ESVD_SHIFT                     (16U)
#define SNVS_LPSR_EO_MASK                        (0x20000U)
#define SNVS_LPSR_EO_SHIFT                       (17U)
#define SNVS_LPSR_SPO_MASK                       (0x40000U)
#define SNVS_LPSR_SPO_SHIFT                      (18U)
#define SNVS_LPSR_LPNS_MASK                      (0x40000000U)
#define SNVS_LPSR_LPNS_SHIFT                     (30U)
#define SNVS_LPSR_LPS_MASK                       (0x80000000U)
#define SNVS_LPSR_LPS_SHIFT                      (31U)
/*! @} */

/*! @name LPSRTCMR - SNVS_LP Secure Real Time Counter MSB Register */
/*! @{ */
#define SNVS_LPSRTCMR_SRTC_MASK                  (0x7FFFU)
#define SNVS_LPSRTCMR_SRTC_SHIFT                 (0U)
#define SNVS_LPSRTCMR_SRTC(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPSRTCMR_SRTC_SHIFT)) & SNVS_LPSRTCMR_SRTC_MASK)
/*! @} */

/*! @name LPSRTCLR - SNVS_LP Secure Real Time Counter LSB Register */
/*! @{ */
#define SNVS_LPSRTCLR_SRTC_MASK                  (0xFFFFFFFFU)
#define SNVS_LPSRTCLR_SRTC_SHIFT                 (0U)
#define SNVS_LPSRTCLR_SRTC(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPSRTCLR_SRTC_SHIFT)) & SNVS_LPSRTCLR_SRTC_MASK)
/*! @} */

/*! @name LPTAR - SNVS_LP Time Alarm Register */
/*! @{ */
#define SNVS_LPTAR_LPTA_MASK                     (0xFFFFFFFFU)
#define SNVS_LPTAR_LPTA_SHIFT                    (0U)
#define SNVS_LPTAR_LPTA(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPTAR_LPTA_SHIFT)) & SNVS_LPTAR_LPTA_MASK)
/*! @} */

/*! @name LPSMCMR - SNVS_LP Secure Monotonic Counter MSB Register */
/*! @{ */
#define SNVS_LPSMCMR_MON_COUNTER_MASK            (0xFFFFU)
#define SNVS_LPSMCMR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCMR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MON_COUNTER_SHIFT)) & SNVS_LPSMCMR_MON_COUNTER_MASK)
#define SNVS_LPSMCMR_MC_ERA_BITS_MASK            (0xFFFF0000U)
#define SNVS_LPSMCMR_MC_ERA_BITS_SHIFT           (16U)
#define SNVS_LPSMCMR_MC_ERA_BITS(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MC_ERA_BITS_SHIFT)) & SNVS_LPSMCMR_MC_ERA_BITS_MASK)
/*! @} */

/*! @name LPSMCLR - SNVS_LP Secure Monotonic Counter LSB Register */
/*! @{ */
#define SNVS_LPSMCLR_MON_COUNTER_MASK            (0xFFFFFFFFU)
#define SNVS_LPSMCLR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCLR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCLR_MON_COUNTER_SHIFT)) & SNVS_LPSMCLR_MON_COUNTER_MASK)
/*! @} */

/*! @name LPPGDR - SNVS_LP Power Glitch Detector Register */
/*! @{ */
#define SNVS_LPPGDR_PGD_MASK                     (0xFFFFFFFFU)
#define SNVS_LPPGDR_PGD_SHIFT                    (0U)
#define SNVS_LPPGDR_PGD(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPPGDR_PGD_SHIFT)) & SNVS_LPPGDR_PGD_MASK)
/*! @} */

/*! @name LPGPR0_LEGACY_ALIAS - SNVS_LP General Purpose Register 0 (legacy alias) */
/*! @{ */
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK        (0xFFFFFFFFU)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT       (0U)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR(x)          (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT)) & SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK)
/*! @} */

/*! @name LPZMKR - SNVS_LP Zeroizable Master Key Register */
/*! @{ */
#define SNVS_LPZMKR_ZMK_MASK                     (0xFFFFFFFFU)
#define SNVS_LPZMKR_ZMK_SHIFT                    (0U)
#define SNVS_LPZMKR_ZMK(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPZMKR_ZMK_SHIFT)) & SNVS_LPZMKR_ZMK_MASK)
/*! @} */

/* The count of SNVS_LPZMKR */
#define SNVS_LPZMKR_COUNT                        (8U)

/*! @name LPGPR_ALIAS - SNVS_LP General Purpose Registers 0 .. 3 */
/*! @{ */
#define SNVS_LPGPR_ALIAS_GPR_MASK                (0xFFFFFFFFU)
#define SNVS_LPGPR_ALIAS_GPR_SHIFT               (0U)
#define SNVS_LPGPR_ALIAS_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_ALIAS_GPR_SHIFT)) & SNVS_LPGPR_ALIAS_GPR_MASK)
/*! @} */

/* The count of SNVS_LPGPR_ALIAS */
#define SNVS_LPGPR_ALIAS_COUNT                   (4U)

/*! @name LPGPR - SNVS_LP General Purpose Registers 0 .. 3 */
/*! @{ */
#define SNVS_LPGPR_GPR_MASK                      (0xFFFFFFFFU)
#define SNVS_LPGPR_GPR_SHIFT                     (0U)
#define SNVS_LPGPR_GPR(x)                        (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_GPR_SHIFT)) & SNVS_LPGPR_GPR_MASK)
/*! @} */

/* The count of SNVS_LPGPR */
#define SNVS_LPGPR_COUNT                         (4U)

/*! @name HPVIDR1 - SNVS_HP Version ID Register 1 */
/*! @{ */
#define SNVS_HPVIDR1_MINOR_REV_MASK              (0xFFU)
#define SNVS_HPVIDR1_MINOR_REV_SHIFT             (0U)
#define SNVS_HPVIDR1_MINOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MINOR_REV_SHIFT)) & SNVS_HPVIDR1_MINOR_REV_MASK)
#define SNVS_HPVIDR1_MAJOR_REV_MASK              (0xFF00U)
#define SNVS_HPVIDR1_MAJOR_REV_SHIFT             (8U)
#define SNVS_HPVIDR1_MAJOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MAJOR_REV_SHIFT)) & SNVS_HPVIDR1_MAJOR_REV_MASK)
#define SNVS_HPVIDR1_IP_ID_MASK                  (0xFFFF0000U)
#define SNVS_HPVIDR1_IP_ID_SHIFT                 (16U)
#define SNVS_HPVIDR1_IP_ID(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_IP_ID_SHIFT)) & SNVS_HPVIDR1_IP_ID_MASK)
/*! @} */

/*! @name HPVIDR2 - SNVS_HP Version ID Register 2 */
/*! @{ */
#define SNVS_HPVIDR2_CONFIG_OPT_MASK             (0xFFU)
#define SNVS_HPVIDR2_CONFIG_OPT_SHIFT            (0U)
#define SNVS_HPVIDR2_CONFIG_OPT(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_CONFIG_OPT_SHIFT)) & SNVS_HPVIDR2_CONFIG_OPT_MASK)
#define SNVS_HPVIDR2_ECO_REV_MASK                (0xFF00U)
#define SNVS_HPVIDR2_ECO_REV_SHIFT               (8U)
#define SNVS_HPVIDR2_ECO_REV(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_ECO_REV_SHIFT)) & SNVS_HPVIDR2_ECO_REV_MASK)
#define SNVS_HPVIDR2_INTG_OPT_MASK               (0xFF0000U)
#define SNVS_HPVIDR2_INTG_OPT_SHIFT              (16U)
#define SNVS_HPVIDR2_INTG_OPT(x)                 (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_INTG_OPT_SHIFT)) & SNVS_HPVIDR2_INTG_OPT_MASK)
#define SNVS_HPVIDR2_IP_ERA_MASK                 (0xFF000000U)
#define SNVS_HPVIDR2_IP_ERA_SHIFT                (24U)
#define SNVS_HPVIDR2_IP_ERA(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_IP_ERA_SHIFT)) & SNVS_HPVIDR2_IP_ERA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SNVS_Register_Masks */


/* SNVS - Peripheral instance base addresses */
/** Peripheral SNVS base pointer */
#define SNVS_BASE_PTR                            ((SNVS_MemMapPtr)0x30370000u)
/** Array initializer of SNVS peripheral base pointers */
#define SNVS_BASE_PTRS                           { SNVS_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register instance definitions */
/* SNVS */
#define SNVS_HPLR                                SNVS_HPLR_REG(SNVS_BASE_PTR)
#define SNVS_HPCOMR                              SNVS_HPCOMR_REG(SNVS_BASE_PTR)
#define SNVS_HPCR                                SNVS_HPCR_REG(SNVS_BASE_PTR)
#define SNVS_HPSICR                              SNVS_HPSICR_REG(SNVS_BASE_PTR)
#define SNVS_HPSVCR                              SNVS_HPSVCR_REG(SNVS_BASE_PTR)
#define SNVS_HPSR                                SNVS_HPSR_REG(SNVS_BASE_PTR)
#define SNVS_HPSVSR                              SNVS_HPSVSR_REG(SNVS_BASE_PTR)
#define SNVS_HPHACIVR                            SNVS_HPHACIVR_REG(SNVS_BASE_PTR)
#define SNVS_HPHACR                              SNVS_HPHACR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCMR                             SNVS_HPRTCMR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCLR                             SNVS_HPRTCLR_REG(SNVS_BASE_PTR)
#define SNVS_HPTAMR                              SNVS_HPTAMR_REG(SNVS_BASE_PTR)
#define SNVS_HPTALR                              SNVS_HPTALR_REG(SNVS_BASE_PTR)
#define SNVS_LPLR                                SNVS_LPLR_REG(SNVS_BASE_PTR)
#define SNVS_LPCR                                SNVS_LPCR_REG(SNVS_BASE_PTR)
#define SNVS_LPMKCR                              SNVS_LPMKCR_REG(SNVS_BASE_PTR)
#define SNVS_LPSVCR                              SNVS_LPSVCR_REG(SNVS_BASE_PTR)
#define SNVS_LPSECR                              SNVS_LPSECR_REG(SNVS_BASE_PTR)
#define SNVS_LPSR                                SNVS_LPSR_REG(SNVS_BASE_PTR)
#define SNVS_LPSRTCMR                            SNVS_LPSRTCMR_REG(SNVS_BASE_PTR)
#define SNVS_LPSRTCLR                            SNVS_LPSRTCLR_REG(SNVS_BASE_PTR)
#define SNVS_LPTAR                               SNVS_LPTAR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCMR                             SNVS_LPSMCMR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCLR                             SNVS_LPSMCLR_REG(SNVS_BASE_PTR)
#define SNVS_LPPGDR                              SNVS_LPPGDR_REG(SNVS_BASE_PTR)
#define SNVS_LPGPR0_LEGACY_ALIAS                 SNVS_LPGPR0_LEGACY_ALIAS_REG(SNVS_BASE_PTR)
#define SNVS_LPZMKR0                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,0)
#define SNVS_LPZMKR1                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,1)
#define SNVS_LPZMKR2                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,2)
#define SNVS_LPZMKR3                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,3)
#define SNVS_LPZMKR4                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,4)
#define SNVS_LPZMKR5                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,5)
#define SNVS_LPZMKR6                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,6)
#define SNVS_LPZMKR7                             SNVS_LPZMKR_REG(SNVS_BASE_PTR,7)
#define SNVS_LPGPR0_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,3)
#define SNVS_LPGPR0                              SNVS_LPGPR_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1                              SNVS_LPGPR_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2                              SNVS_LPGPR_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3                              SNVS_LPGPR_REG(SNVS_BASE_PTR,3)
#define SNVS_HPVIDR1                             SNVS_HPVIDR1_REG(SNVS_BASE_PTR)
#define SNVS_HPVIDR2                             SNVS_HPVIDR2_REG(SNVS_BASE_PTR)

/* SNVS - Register array accessors */
#define SNVS_LPZMKR(index)                       SNVS_LPZMKR_REG(SNVS_BASE_PTR,index)
#define SNVS_LPGPR_ALIAS(index)                  SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,index)
#define SNVS_LPGPR(index)                        SNVS_LPGPR_REG(SNVS_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SNVS_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPBA
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Peripheral SPBA
 * @{
 */

/** SPBA - Peripheral register structure */
typedef struct SPBA_MemMap {
  uint32_t PRR[32];                                /**< Peripheral Rights Register, array offset: 0x0, array step: 0x4 */
} volatile *SPBA_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPBA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Accessor_Macros SPBA - Register accessor macros
 * @{
 */


/* SPBA - Register accessors */
#define SPBA_PRR_REG(base,index)                 ((base)->PRR[index])

/*!
 * @}
 */ /* end of group SPBA_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPBA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Masks SPBA Register Masks
 * @{
 */

/*! @name PRR - Peripheral Rights Register */
/*! @{ */
#define SPBA_PRR_RARA_MASK                       (0x1U)
#define SPBA_PRR_RARA_SHIFT                      (0U)
#define SPBA_PRR_RARB_MASK                       (0x2U)
#define SPBA_PRR_RARB_SHIFT                      (1U)
#define SPBA_PRR_RARC_MASK                       (0x4U)
#define SPBA_PRR_RARC_SHIFT                      (2U)
#define SPBA_PRR_ROI_MASK                        (0x30000U)
#define SPBA_PRR_ROI_SHIFT                       (16U)
/*! ROI
 *  0b00..Unowned resource.
 *  0b01..The resource is owned by master A port.
 *  0b10..The resource is owned by master B port.
 *  0b11..The resource is owned by master C port.
 */
#define SPBA_PRR_ROI(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_ROI_SHIFT)) & SPBA_PRR_ROI_MASK)
#define SPBA_PRR_RMO_MASK                        (0xC0000000U)
#define SPBA_PRR_RMO_SHIFT                       (30U)
/*! RMO
 *  0b00..The resource is unowned.
 *  0b01..Reserved.
 *  0b10..The resource is owned by another master.
 *  0b11..The resource is owned by the requesting master.
 */
#define SPBA_PRR_RMO(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RMO_SHIFT)) & SPBA_PRR_RMO_MASK)
/*! @} */

/* The count of SPBA_PRR */
#define SPBA_PRR_COUNT                           (32U)


/*!
 * @}
 */ /* end of group SPBA_Register_Masks */


/* SPBA - Peripheral instance base addresses */
/** Peripheral SPBA1 base pointer */
#define SPBA1_BASE_PTR                           ((SPBA_MemMapPtr)0x308F0000u)
/** Peripheral SPBA2 base pointer */
#define SPBA2_BASE_PTR                           ((SPBA_MemMapPtr)0x300F0000u)
/** Array initializer of SPBA peripheral base pointers */
#define SPBA_BASE_PTRS                           { SPBA1_BASE_PTR, SPBA2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SPBA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Accessor_Macros SPBA - Register accessor macros
 * @{
 */


/* SPBA - Register instance definitions */
/* SPBA1 */
#define SPBA1_PRR0                               SPBA_PRR_REG(SPBA1_BASE_PTR,0)
#define SPBA1_PRR1                               SPBA_PRR_REG(SPBA1_BASE_PTR,1)
#define SPBA1_PRR2                               SPBA_PRR_REG(SPBA1_BASE_PTR,2)
#define SPBA1_PRR3                               SPBA_PRR_REG(SPBA1_BASE_PTR,3)
#define SPBA1_PRR4                               SPBA_PRR_REG(SPBA1_BASE_PTR,4)
#define SPBA1_PRR5                               SPBA_PRR_REG(SPBA1_BASE_PTR,5)
#define SPBA1_PRR6                               SPBA_PRR_REG(SPBA1_BASE_PTR,6)
#define SPBA1_PRR7                               SPBA_PRR_REG(SPBA1_BASE_PTR,7)
#define SPBA1_PRR8                               SPBA_PRR_REG(SPBA1_BASE_PTR,8)
#define SPBA1_PRR9                               SPBA_PRR_REG(SPBA1_BASE_PTR,9)
#define SPBA1_PRR10                              SPBA_PRR_REG(SPBA1_BASE_PTR,10)
#define SPBA1_PRR11                              SPBA_PRR_REG(SPBA1_BASE_PTR,11)
#define SPBA1_PRR12                              SPBA_PRR_REG(SPBA1_BASE_PTR,12)
#define SPBA1_PRR13                              SPBA_PRR_REG(SPBA1_BASE_PTR,13)
#define SPBA1_PRR14                              SPBA_PRR_REG(SPBA1_BASE_PTR,14)
#define SPBA1_PRR15                              SPBA_PRR_REG(SPBA1_BASE_PTR,15)
#define SPBA1_PRR16                              SPBA_PRR_REG(SPBA1_BASE_PTR,16)
#define SPBA1_PRR17                              SPBA_PRR_REG(SPBA1_BASE_PTR,17)
#define SPBA1_PRR18                              SPBA_PRR_REG(SPBA1_BASE_PTR,18)
#define SPBA1_PRR19                              SPBA_PRR_REG(SPBA1_BASE_PTR,19)
#define SPBA1_PRR20                              SPBA_PRR_REG(SPBA1_BASE_PTR,20)
#define SPBA1_PRR21                              SPBA_PRR_REG(SPBA1_BASE_PTR,21)
#define SPBA1_PRR22                              SPBA_PRR_REG(SPBA1_BASE_PTR,22)
#define SPBA1_PRR23                              SPBA_PRR_REG(SPBA1_BASE_PTR,23)
#define SPBA1_PRR24                              SPBA_PRR_REG(SPBA1_BASE_PTR,24)
#define SPBA1_PRR25                              SPBA_PRR_REG(SPBA1_BASE_PTR,25)
#define SPBA1_PRR26                              SPBA_PRR_REG(SPBA1_BASE_PTR,26)
#define SPBA1_PRR27                              SPBA_PRR_REG(SPBA1_BASE_PTR,27)
#define SPBA1_PRR28                              SPBA_PRR_REG(SPBA1_BASE_PTR,28)
#define SPBA1_PRR29                              SPBA_PRR_REG(SPBA1_BASE_PTR,29)
#define SPBA1_PRR30                              SPBA_PRR_REG(SPBA1_BASE_PTR,30)
#define SPBA1_PRR31                              SPBA_PRR_REG(SPBA1_BASE_PTR,31)
/* SPBA2 */
#define SPBA2_PRR0                               SPBA_PRR_REG(SPBA2_BASE_PTR,0)
#define SPBA2_PRR1                               SPBA_PRR_REG(SPBA2_BASE_PTR,1)
#define SPBA2_PRR2                               SPBA_PRR_REG(SPBA2_BASE_PTR,2)
#define SPBA2_PRR3                               SPBA_PRR_REG(SPBA2_BASE_PTR,3)
#define SPBA2_PRR4                               SPBA_PRR_REG(SPBA2_BASE_PTR,4)
#define SPBA2_PRR5                               SPBA_PRR_REG(SPBA2_BASE_PTR,5)
#define SPBA2_PRR6                               SPBA_PRR_REG(SPBA2_BASE_PTR,6)
#define SPBA2_PRR7                               SPBA_PRR_REG(SPBA2_BASE_PTR,7)
#define SPBA2_PRR8                               SPBA_PRR_REG(SPBA2_BASE_PTR,8)
#define SPBA2_PRR9                               SPBA_PRR_REG(SPBA2_BASE_PTR,9)
#define SPBA2_PRR10                              SPBA_PRR_REG(SPBA2_BASE_PTR,10)
#define SPBA2_PRR11                              SPBA_PRR_REG(SPBA2_BASE_PTR,11)
#define SPBA2_PRR12                              SPBA_PRR_REG(SPBA2_BASE_PTR,12)
#define SPBA2_PRR13                              SPBA_PRR_REG(SPBA2_BASE_PTR,13)
#define SPBA2_PRR14                              SPBA_PRR_REG(SPBA2_BASE_PTR,14)
#define SPBA2_PRR15                              SPBA_PRR_REG(SPBA2_BASE_PTR,15)
#define SPBA2_PRR16                              SPBA_PRR_REG(SPBA2_BASE_PTR,16)
#define SPBA2_PRR17                              SPBA_PRR_REG(SPBA2_BASE_PTR,17)
#define SPBA2_PRR18                              SPBA_PRR_REG(SPBA2_BASE_PTR,18)
#define SPBA2_PRR19                              SPBA_PRR_REG(SPBA2_BASE_PTR,19)
#define SPBA2_PRR20                              SPBA_PRR_REG(SPBA2_BASE_PTR,20)
#define SPBA2_PRR21                              SPBA_PRR_REG(SPBA2_BASE_PTR,21)
#define SPBA2_PRR22                              SPBA_PRR_REG(SPBA2_BASE_PTR,22)
#define SPBA2_PRR23                              SPBA_PRR_REG(SPBA2_BASE_PTR,23)
#define SPBA2_PRR24                              SPBA_PRR_REG(SPBA2_BASE_PTR,24)
#define SPBA2_PRR25                              SPBA_PRR_REG(SPBA2_BASE_PTR,25)
#define SPBA2_PRR26                              SPBA_PRR_REG(SPBA2_BASE_PTR,26)
#define SPBA2_PRR27                              SPBA_PRR_REG(SPBA2_BASE_PTR,27)
#define SPBA2_PRR28                              SPBA_PRR_REG(SPBA2_BASE_PTR,28)
#define SPBA2_PRR29                              SPBA_PRR_REG(SPBA2_BASE_PTR,29)
#define SPBA2_PRR30                              SPBA_PRR_REG(SPBA2_BASE_PTR,30)
#define SPBA2_PRR31                              SPBA_PRR_REG(SPBA2_BASE_PTR,31)

/* SPBA - Register array accessors */
#define SPBA1_PRR(index)                         SPBA_PRR_REG(SPBA1_BASE_PTR,index)
#define SPBA2_PRR(index)                         SPBA_PRR_REG(SPBA2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SPBA_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPBA_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Peripheral SPDIF
 * @{
 */

/** SPDIF - Peripheral register structure */
typedef struct SPDIF_MemMap {
  uint32_t SCR;                                    /**< SPDIF Configuration Register, offset: 0x0 */
  uint32_t SRCD;                                   /**< CDText Control Register, offset: 0x4 */
  uint32_t SRPC;                                   /**< PhaseConfig Register, offset: 0x8 */
  uint32_t SIE;                                    /**< InterruptEn Register, offset: 0xC */
  union {                                          /* offset: 0x10 */
    uint32_t SIC;                                    /**< InterruptClear Register, offset: 0x10 */
    uint32_t SIS;                                    /**< InterruptStat Register, offset: 0x10 */
  };
  uint32_t SRL;                                    /**< SPDIFRxLeft Register, offset: 0x14 */
  uint32_t SRR;                                    /**< SPDIFRxRight Register, offset: 0x18 */
  uint32_t SRCSH;                                  /**< SPDIFRxCChannel_h Register, offset: 0x1C */
  uint32_t SRCSL;                                  /**< SPDIFRxCChannel_l Register, offset: 0x20 */
  uint32_t SRU;                                    /**< UchannelRx Register, offset: 0x24 */
  uint32_t SRQ;                                    /**< QchannelRx Register, offset: 0x28 */
  uint32_t STL;                                    /**< SPDIFTxLeft Register, offset: 0x2C */
  uint32_t STR;                                    /**< SPDIFTxRight Register, offset: 0x30 */
  uint32_t STCSCH;                                 /**< SPDIFTxCChannelCons_h Register, offset: 0x34 */
  uint32_t STCSCL;                                 /**< SPDIFTxCChannelCons_l Register, offset: 0x38 */
  uint8_t RESERVED_0[8];
  uint32_t SRFM;                                   /**< FreqMeas Register, offset: 0x44 */
  uint8_t RESERVED_1[8];
  uint32_t STC;                                    /**< SPDIFTxClk Register, offset: 0x50 */
} volatile *SPDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register accessors */
#define SPDIF_SCR_REG(base)                      ((base)->SCR)
#define SPDIF_SRCD_REG(base)                     ((base)->SRCD)
#define SPDIF_SRPC_REG(base)                     ((base)->SRPC)
#define SPDIF_SIE_REG(base)                      ((base)->SIE)
#define SPDIF_SIC_REG(base)                      ((base)->SIC)
#define SPDIF_SIS_REG(base)                      ((base)->SIS)
#define SPDIF_SRL_REG(base)                      ((base)->SRL)
#define SPDIF_SRR_REG(base)                      ((base)->SRR)
#define SPDIF_SRCSH_REG(base)                    ((base)->SRCSH)
#define SPDIF_SRCSL_REG(base)                    ((base)->SRCSL)
#define SPDIF_SRU_REG(base)                      ((base)->SRU)
#define SPDIF_SRQ_REG(base)                      ((base)->SRQ)
#define SPDIF_STL_REG(base)                      ((base)->STL)
#define SPDIF_STR_REG(base)                      ((base)->STR)
#define SPDIF_STCSCH_REG(base)                   ((base)->STCSCH)
#define SPDIF_STCSCL_REG(base)                   ((base)->STCSCL)
#define SPDIF_SRFM_REG(base)                     ((base)->SRFM)
#define SPDIF_STC_REG(base)                      ((base)->STC)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Masks SPDIF Register Masks
 * @{
 */

/*! @name SCR - SPDIF Configuration Register */
/*! @{ */
#define SPDIF_SCR_USRC_SEL_MASK                  (0x3U)
#define SPDIF_SCR_USRC_SEL_SHIFT                 (0U)
/*! USrc_Sel
 *  0b00..No embedded U channel
 *  0b01..U channel from SPDIF receive block (CD mode)
 *  0b10..Reserved
 *  0b11..U channel from on chip transmitter
 */
#define SPDIF_SCR_USRC_SEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_USRC_SEL_SHIFT)) & SPDIF_SCR_USRC_SEL_MASK)
#define SPDIF_SCR_TXSEL_MASK                     (0x1CU)
#define SPDIF_SCR_TXSEL_SHIFT                    (2U)
/*! TxSel
 *  0b000..Off and output 0
 *  0b001..Feed-through SPDIFIN
 *  0b101..Tx Normal operation
 */
#define SPDIF_SCR_TXSEL(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXSEL_SHIFT)) & SPDIF_SCR_TXSEL_MASK)
#define SPDIF_SCR_VALCTRL_MASK                   (0x20U)
#define SPDIF_SCR_VALCTRL_SHIFT                  (5U)
#define SPDIF_SCR_DMA_TX_EN_MASK                 (0x100U)
#define SPDIF_SCR_DMA_TX_EN_SHIFT                (8U)
#define SPDIF_SCR_DMA_RX_EN_MASK                 (0x200U)
#define SPDIF_SCR_DMA_RX_EN_SHIFT                (9U)
#define SPDIF_SCR_TXFIFO_CTRL_MASK               (0xC00U)
#define SPDIF_SCR_TXFIFO_CTRL_SHIFT              (10U)
/*! TxFIFO_Ctrl
 *  0b00..Send out digital zero on SPDIF Tx
 *  0b01..Tx Normal operation
 *  0b10..Reset to 1 sample remaining
 *  0b11..Reserved
 */
#define SPDIF_SCR_TXFIFO_CTRL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFO_CTRL_SHIFT)) & SPDIF_SCR_TXFIFO_CTRL_MASK)
#define SPDIF_SCR_SOFT_RESET_MASK                (0x1000U)
#define SPDIF_SCR_SOFT_RESET_SHIFT               (12U)
#define SPDIF_SCR_LOW_POWER_MASK                 (0x2000U)
#define SPDIF_SCR_LOW_POWER_SHIFT                (13U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_MASK           (0x18000U)
#define SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT          (15U)
/*! TxFIFOEmpty_Sel
 *  0b00..Empty interrupt if 0 sample in Tx left and right FIFOs
 *  0b01..Empty interrupt if at most 4 sample in Tx left and right FIFOs
 *  0b10..Empty interrupt if at most 8 sample in Tx left and right FIFOs
 *  0b11..Empty interrupt if at most 12 sample in Tx left and right FIFOs
 */
#define SPDIF_SCR_TXFIFOEMPTY_SEL(x)             (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TXFIFOEMPTY_SEL_SHIFT)) & SPDIF_SCR_TXFIFOEMPTY_SEL_MASK)
#define SPDIF_SCR_TXAUTOSYNC_MASK                (0x20000U)
#define SPDIF_SCR_TXAUTOSYNC_SHIFT               (17U)
#define SPDIF_SCR_RXAUTOSYNC_MASK                (0x40000U)
#define SPDIF_SCR_RXAUTOSYNC_SHIFT               (18U)
#define SPDIF_SCR_RXFIFOFULL_SEL_MASK            (0x180000U)
#define SPDIF_SCR_RXFIFOFULL_SEL_SHIFT           (19U)
/*! RxFIFOFull_Sel
 *  0b00..Full interrupt if at least 1 sample in Rx left and right FIFOs
 *  0b01..Full interrupt if at least 4 sample in Rx left and right FIFOs
 *  0b10..Full interrupt if at least 8 sample in Rx left and right FIFOs
 *  0b11..Full interrupt if at least 16 sample in Rx left and right FIFO
 */
#define SPDIF_SCR_RXFIFOFULL_SEL(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RXFIFOFULL_SEL_SHIFT)) & SPDIF_SCR_RXFIFOFULL_SEL_MASK)
#define SPDIF_SCR_RXFIFO_RST_MASK                (0x200000U)
#define SPDIF_SCR_RXFIFO_RST_SHIFT               (21U)
#define SPDIF_SCR_RXFIFO_OFF_ON_MASK             (0x400000U)
#define SPDIF_SCR_RXFIFO_OFF_ON_SHIFT            (22U)
#define SPDIF_SCR_RXFIFO_CTRL_MASK               (0x800000U)
#define SPDIF_SCR_RXFIFO_CTRL_SHIFT              (23U)
/*! @} */

/*! @name SRCD - CDText Control Register */
/*! @{ */
#define SPDIF_SRCD_USYNCMODE_MASK                (0x2U)
#define SPDIF_SRCD_USYNCMODE_SHIFT               (1U)
/*! @} */

/*! @name SRPC - PhaseConfig Register */
/*! @{ */
#define SPDIF_SRPC_GAINSEL_MASK                  (0x38U)
#define SPDIF_SRPC_GAINSEL_SHIFT                 (3U)
/*! GainSel
 *  0b000..24*(2**10)
 *  0b001..16*(2**10)
 *  0b010..12*(2**10)
 *  0b011..8*(2**10)
 *  0b100..6*(2**10)
 *  0b101..4*(2**10)
 *  0b110..3*(2**10)
 */
#define SPDIF_SRPC_GAINSEL(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_GAINSEL_SHIFT)) & SPDIF_SRPC_GAINSEL_MASK)
#define SPDIF_SRPC_LOCK_MASK                     (0x40U)
#define SPDIF_SRPC_LOCK_SHIFT                    (6U)
#define SPDIF_SRPC_CLKSRC_SEL_MASK               (0x780U)
#define SPDIF_SRPC_CLKSRC_SEL_SHIFT              (7U)
/*! ClkSrc_Sel
 *  0b0000..if (DPLL Locked) SPDIF_RxClk else REF_CLK_32K (XTALOSC)
 *  0b0001..if (DPLL Locked) SPDIF_RxClk else tx_clk (SPDIF0_CLK_ROOT)
 *  0b0011..if (DPLL Locked) SPDIF_RxClk else SPDIF_EXT_CLK
 *  0b0101..REF_CLK_32K (XTALOSC)
 *  0b0110..tx_clk (SPDIF0_CLK_ROOT)
 *  0b1000..SPDIF_EXT_CLK
 */
#define SPDIF_SRPC_CLKSRC_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_CLKSRC_SEL_SHIFT)) & SPDIF_SRPC_CLKSRC_SEL_MASK)
/*! @} */

/*! @name SIE - InterruptEn Register */
/*! @{ */
#define SPDIF_SIE_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIE_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIE_TXEM_MASK                      (0x2U)
#define SPDIF_SIE_TXEM_SHIFT                     (1U)
#define SPDIF_SIE_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIE_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIE_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIE_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIE_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIE_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIE_UQERR_MASK                     (0x20U)
#define SPDIF_SIE_UQERR_SHIFT                    (5U)
#define SPDIF_SIE_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIE_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIE_QRXOV_MASK                     (0x80U)
#define SPDIF_SIE_QRXOV_SHIFT                    (7U)
#define SPDIF_SIE_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIE_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIE_URXOV_MASK                     (0x200U)
#define SPDIF_SIE_URXOV_SHIFT                    (9U)
#define SPDIF_SIE_URXFUL_MASK                    (0x400U)
#define SPDIF_SIE_URXFUL_SHIFT                   (10U)
#define SPDIF_SIE_BITERR_MASK                    (0x4000U)
#define SPDIF_SIE_BITERR_SHIFT                   (14U)
#define SPDIF_SIE_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIE_SYMERR_SHIFT                   (15U)
#define SPDIF_SIE_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIE_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIE_CNEW_MASK                      (0x20000U)
#define SPDIF_SIE_CNEW_SHIFT                     (17U)
#define SPDIF_SIE_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIE_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIE_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIE_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIE_LOCK_MASK                      (0x100000U)
#define SPDIF_SIE_LOCK_SHIFT                     (20U)
/*! @} */

/*! @name SIC - InterruptClear Register */
/*! @{ */
#define SPDIF_SIC_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIC_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIC_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIC_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIC_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIC_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIC_UQERR_MASK                     (0x20U)
#define SPDIF_SIC_UQERR_SHIFT                    (5U)
#define SPDIF_SIC_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIC_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIC_QRXOV_MASK                     (0x80U)
#define SPDIF_SIC_QRXOV_SHIFT                    (7U)
#define SPDIF_SIC_URXOV_MASK                     (0x200U)
#define SPDIF_SIC_URXOV_SHIFT                    (9U)
#define SPDIF_SIC_BITERR_MASK                    (0x4000U)
#define SPDIF_SIC_BITERR_SHIFT                   (14U)
#define SPDIF_SIC_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIC_SYMERR_SHIFT                   (15U)
#define SPDIF_SIC_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIC_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIC_CNEW_MASK                      (0x20000U)
#define SPDIF_SIC_CNEW_SHIFT                     (17U)
#define SPDIF_SIC_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIC_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIC_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIC_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIC_LOCK_MASK                      (0x100000U)
#define SPDIF_SIC_LOCK_SHIFT                     (20U)
/*! @} */

/*! @name SIS - InterruptStat Register */
/*! @{ */
#define SPDIF_SIS_RXFIFOFUL_MASK                 (0x1U)
#define SPDIF_SIS_RXFIFOFUL_SHIFT                (0U)
#define SPDIF_SIS_TXEM_MASK                      (0x2U)
#define SPDIF_SIS_TXEM_SHIFT                     (1U)
#define SPDIF_SIS_LOCKLOSS_MASK                  (0x4U)
#define SPDIF_SIS_LOCKLOSS_SHIFT                 (2U)
#define SPDIF_SIS_RXFIFORESYN_MASK               (0x8U)
#define SPDIF_SIS_RXFIFORESYN_SHIFT              (3U)
#define SPDIF_SIS_RXFIFOUNOV_MASK                (0x10U)
#define SPDIF_SIS_RXFIFOUNOV_SHIFT               (4U)
#define SPDIF_SIS_UQERR_MASK                     (0x20U)
#define SPDIF_SIS_UQERR_SHIFT                    (5U)
#define SPDIF_SIS_UQSYNC_MASK                    (0x40U)
#define SPDIF_SIS_UQSYNC_SHIFT                   (6U)
#define SPDIF_SIS_QRXOV_MASK                     (0x80U)
#define SPDIF_SIS_QRXOV_SHIFT                    (7U)
#define SPDIF_SIS_QRXFUL_MASK                    (0x100U)
#define SPDIF_SIS_QRXFUL_SHIFT                   (8U)
#define SPDIF_SIS_URXOV_MASK                     (0x200U)
#define SPDIF_SIS_URXOV_SHIFT                    (9U)
#define SPDIF_SIS_URXFUL_MASK                    (0x400U)
#define SPDIF_SIS_URXFUL_SHIFT                   (10U)
#define SPDIF_SIS_BITERR_MASK                    (0x4000U)
#define SPDIF_SIS_BITERR_SHIFT                   (14U)
#define SPDIF_SIS_SYMERR_MASK                    (0x8000U)
#define SPDIF_SIS_SYMERR_SHIFT                   (15U)
#define SPDIF_SIS_VALNOGOOD_MASK                 (0x10000U)
#define SPDIF_SIS_VALNOGOOD_SHIFT                (16U)
#define SPDIF_SIS_CNEW_MASK                      (0x20000U)
#define SPDIF_SIS_CNEW_SHIFT                     (17U)
#define SPDIF_SIS_TXRESYN_MASK                   (0x40000U)
#define SPDIF_SIS_TXRESYN_SHIFT                  (18U)
#define SPDIF_SIS_TXUNOV_MASK                    (0x80000U)
#define SPDIF_SIS_TXUNOV_SHIFT                   (19U)
#define SPDIF_SIS_LOCK_MASK                      (0x100000U)
#define SPDIF_SIS_LOCK_SHIFT                     (20U)
/*! @} */

/*! @name SRL - SPDIFRxLeft Register */
/*! @{ */
#define SPDIF_SRL_RXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_SRL_RXDATALEFT_SHIFT               (0U)
#define SPDIF_SRL_RXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRL_RXDATALEFT_SHIFT)) & SPDIF_SRL_RXDATALEFT_MASK)
/*! @} */

/*! @name SRR - SPDIFRxRight Register */
/*! @{ */
#define SPDIF_SRR_RXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_SRR_RXDATARIGHT_SHIFT              (0U)
#define SPDIF_SRR_RXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRR_RXDATARIGHT_SHIFT)) & SPDIF_SRR_RXDATARIGHT_MASK)
/*! @} */

/*! @name SRCSH - SPDIFRxCChannel_h Register */
/*! @{ */
#define SPDIF_SRCSH_RXCCHANNEL_H_MASK            (0xFFFFFFU)
#define SPDIF_SRCSH_RXCCHANNEL_H_SHIFT           (0U)
#define SPDIF_SRCSH_RXCCHANNEL_H(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSH_RXCCHANNEL_H_SHIFT)) & SPDIF_SRCSH_RXCCHANNEL_H_MASK)
/*! @} */

/*! @name SRCSL - SPDIFRxCChannel_l Register */
/*! @{ */
#define SPDIF_SRCSL_RXCCHANNEL_L_MASK            (0xFFFFFFU)
#define SPDIF_SRCSL_RXCCHANNEL_L_SHIFT           (0U)
#define SPDIF_SRCSL_RXCCHANNEL_L(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSL_RXCCHANNEL_L_SHIFT)) & SPDIF_SRCSL_RXCCHANNEL_L_MASK)
/*! @} */

/*! @name SRU - UchannelRx Register */
/*! @{ */
#define SPDIF_SRU_RXUCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRU_RXUCHANNEL_SHIFT               (0U)
#define SPDIF_SRU_RXUCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRU_RXUCHANNEL_SHIFT)) & SPDIF_SRU_RXUCHANNEL_MASK)
/*! @} */

/*! @name SRQ - QchannelRx Register */
/*! @{ */
#define SPDIF_SRQ_RXQCHANNEL_MASK                (0xFFFFFFU)
#define SPDIF_SRQ_RXQCHANNEL_SHIFT               (0U)
#define SPDIF_SRQ_RXQCHANNEL(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRQ_RXQCHANNEL_SHIFT)) & SPDIF_SRQ_RXQCHANNEL_MASK)
/*! @} */

/*! @name STL - SPDIFTxLeft Register */
/*! @{ */
#define SPDIF_STL_TXDATALEFT_MASK                (0xFFFFFFU)
#define SPDIF_STL_TXDATALEFT_SHIFT               (0U)
#define SPDIF_STL_TXDATALEFT(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_STL_TXDATALEFT_SHIFT)) & SPDIF_STL_TXDATALEFT_MASK)
/*! @} */

/*! @name STR - SPDIFTxRight Register */
/*! @{ */
#define SPDIF_STR_TXDATARIGHT_MASK               (0xFFFFFFU)
#define SPDIF_STR_TXDATARIGHT_SHIFT              (0U)
#define SPDIF_STR_TXDATARIGHT(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_STR_TXDATARIGHT_SHIFT)) & SPDIF_STR_TXDATARIGHT_MASK)
/*! @} */

/*! @name STCSCH - SPDIFTxCChannelCons_h Register */
/*! @{ */
#define SPDIF_STCSCH_TXCCHANNELCONS_H_MASK       (0xFFFFFFU)
#define SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT      (0U)
#define SPDIF_STCSCH_TXCCHANNELCONS_H(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCH_TXCCHANNELCONS_H_SHIFT)) & SPDIF_STCSCH_TXCCHANNELCONS_H_MASK)
/*! @} */

/*! @name STCSCL - SPDIFTxCChannelCons_l Register */
/*! @{ */
#define SPDIF_STCSCL_TXCCHANNELCONS_L_MASK       (0xFFFFFFU)
#define SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT      (0U)
#define SPDIF_STCSCL_TXCCHANNELCONS_L(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCL_TXCCHANNELCONS_L_SHIFT)) & SPDIF_STCSCL_TXCCHANNELCONS_L_MASK)
/*! @} */

/*! @name SRFM - FreqMeas Register */
/*! @{ */
#define SPDIF_SRFM_FREQMEAS_MASK                 (0xFFFFFFU)
#define SPDIF_SRFM_FREQMEAS_SHIFT                (0U)
#define SPDIF_SRFM_FREQMEAS(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SRFM_FREQMEAS_SHIFT)) & SPDIF_SRFM_FREQMEAS_MASK)
/*! @} */

/*! @name STC - SPDIFTxClk Register */
/*! @{ */
#define SPDIF_STC_TXCLK_DF_MASK                  (0x7FU)
#define SPDIF_STC_TXCLK_DF_SHIFT                 (0U)
/*! TxClk_DF
 *  0b0000000..divider factor is 1
 *  0b0000001..divider factor is 2
 *  0b1111111..divider factor is 128
 */
#define SPDIF_STC_TXCLK_DF(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_DF_SHIFT)) & SPDIF_STC_TXCLK_DF_MASK)
#define SPDIF_STC_TX_ALL_CLK_EN_MASK             (0x80U)
#define SPDIF_STC_TX_ALL_CLK_EN_SHIFT            (7U)
#define SPDIF_STC_TXCLK_SOURCE_MASK              (0x700U)
#define SPDIF_STC_TXCLK_SOURCE_SHIFT             (8U)
/*! TxClk_Source
 *  0b000..REF_CLK_32K input (XTALOSC 32 kHz clock)
 *  0b001..tx_clk input (from SPDIF0_CLK_ROOT. See CCM.)
 *  0b011..SPDIF_EXT_CLK, from pads
 *  0b101..ipg_clk input (frequency divided)
 */
#define SPDIF_STC_TXCLK_SOURCE(x)                (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TXCLK_SOURCE_SHIFT)) & SPDIF_STC_TXCLK_SOURCE_MASK)
#define SPDIF_STC_SYSCLK_DF_MASK                 (0xFF800U)
#define SPDIF_STC_SYSCLK_DF_SHIFT                (11U)
/*! SYSCLK_DF
 *  0b000000000..no clock signal
 *  0b000000001..divider factor is 2
 *  0b111111111..divider factor is 512
 */
#define SPDIF_STC_SYSCLK_DF(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_SYSCLK_DF_SHIFT)) & SPDIF_STC_SYSCLK_DF_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SPDIF_Register_Masks */


/* SPDIF - Peripheral instance base addresses */
/** Peripheral SPDIF1 base pointer */
#define SPDIF1_BASE_PTR                          ((SPDIF_MemMapPtr)0x30810000u)
/** Peripheral SPDIF2 base pointer */
#define SPDIF2_BASE_PTR                          ((SPDIF_MemMapPtr)0x308A0000u)
/** Array initializer of SPDIF peripheral base pointers */
#define SPDIF_BASE_PTRS                          { SPDIF1_BASE_PTR, SPDIF2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register instance definitions */
/* SPDIF1 */
#define SPDIF1_SCR                               SPDIF_SCR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCD                              SPDIF_SRCD_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRPC                              SPDIF_SRPC_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIE                               SPDIF_SIE_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIC                               SPDIF_SIC_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIS                               SPDIF_SIS_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRL                               SPDIF_SRL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRR                               SPDIF_SRR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCSH                             SPDIF_SRCSH_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCSL                             SPDIF_SRCSL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRU                               SPDIF_SRU_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRQ                               SPDIF_SRQ_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STL                               SPDIF_STL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STR                               SPDIF_STR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STCSCH                            SPDIF_STCSCH_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STCSCL                            SPDIF_STCSCL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRFM                              SPDIF_SRFM_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STC                               SPDIF_STC_REG(SPDIF1_BASE_PTR)
/* SPDIF2 */
#define SPDIF2_SCR                               SPDIF_SCR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCD                              SPDIF_SRCD_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRPC                              SPDIF_SRPC_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIE                               SPDIF_SIE_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIC                               SPDIF_SIC_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIS                               SPDIF_SIS_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRL                               SPDIF_SRL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRR                               SPDIF_SRR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCSH                             SPDIF_SRCSH_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCSL                             SPDIF_SRCSL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRU                               SPDIF_SRU_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRQ                               SPDIF_SRQ_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STL                               SPDIF_STL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STR                               SPDIF_STR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STCSCH                            SPDIF_STCSCH_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STCSCL                            SPDIF_STCSCL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRFM                              SPDIF_SRFM_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STC                               SPDIF_STC_REG(SPDIF2_BASE_PTR)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- SRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Peripheral SRC
 * @{
 */

/** SRC - Peripheral register structure */
typedef struct SRC_MemMap {
  uint32_t SCR;                                    /**< SRC Reset Control Register, offset: 0x0 */
  uint32_t A53RCR0;                                /**< A53 Reset Control Register, offset: 0x4 */
  uint32_t A53RCR1;                                /**< A53 Reset Control Register, offset: 0x8 */
  uint32_t M4RCR;                                  /**< M4 Reset Control Register, offset: 0xC */
  uint8_t RESERVED_0[16];
  uint32_t USBOPHY1_RCR;                           /**< USB OTG PHY1 Reset Control Register, offset: 0x20 */
  uint32_t USBOPHY2_RCR;                           /**< USB OTG PHY2 Reset Control Register, offset: 0x24 */
  uint32_t MIPIPHY_RCR;                            /**< MIPI PHY Reset Control Register, offset: 0x28 */
  uint32_t PCIEPHY_RCR;                            /**< PCIE PHY Reset Control Register, offset: 0x2C */
  uint32_t HDMI_RCR;                               /**< HDMI Reset Control Register, offset: 0x30 */
  uint32_t DISP_RCR;                               /**< DISP Reset Control Register, offset: 0x34 */
  uint8_t RESERVED_1[8];
  uint32_t GPU_RCR;                                /**< GPU Reset Control Register, offset: 0x40 */
  uint32_t VPU_RCR;                                /**< VPU Reset Control Register, offset: 0x44 */
  uint32_t PCIE2_RCR;                              /**< PCIE2 Reset Control Register, offset: 0x48 */
  uint32_t MIPIPHY1_RCR;                           /**< MIPI CSI1 PHY Reset Control Register, offset: 0x4C */
  uint32_t MIPIPHY2_RCR;                           /**< MIPI CSI2 PHY Reset Control Register, offset: 0x50 */
  uint8_t RESERVED_2[4];
  uint32_t SBMR1;                                  /**< SRC Boot Mode Register 1, offset: 0x58 */
  uint32_t SRSR;                                   /**< SRC Reset Status Register, offset: 0x5C */
  uint8_t RESERVED_3[8];
  uint32_t SISR;                                   /**< SRC Interrupt Status Register, offset: 0x68 */
  uint32_t SIMR;                                   /**< SRC Interrupt Mask Register, offset: 0x6C */
  uint32_t SBMR2;                                  /**< SRC Boot Mode Register 2, offset: 0x70 */
  uint32_t GPR[10];                                /**< SRC General Purpose Register 1..SRC General Purpose Register 10, array offset: 0x74, array step: 0x4 */
  uint8_t RESERVED_4[3940];
  uint32_t DDRC_RCR;                               /**< SRC DDR Controller Reset Control Register, offset: 0x1000 */
  uint32_t DDRC2_RCR;                              /**< SRC DDRC2 Controller Reset Control Register, offset: 0x1004 */
} volatile *SRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register accessors */
#define SRC_SCR_REG(base)                        ((base)->SCR)
#define SRC_A53RCR0_REG(base)                    ((base)->A53RCR0)
#define SRC_A53RCR1_REG(base)                    ((base)->A53RCR1)
#define SRC_M4RCR_REG(base)                      ((base)->M4RCR)
#define SRC_USBOPHY1_RCR_REG(base)               ((base)->USBOPHY1_RCR)
#define SRC_USBOPHY2_RCR_REG(base)               ((base)->USBOPHY2_RCR)
#define SRC_MIPIPHY_RCR_REG(base)                ((base)->MIPIPHY_RCR)
#define SRC_PCIEPHY_RCR_REG(base)                ((base)->PCIEPHY_RCR)
#define SRC_HDMI_RCR_REG(base)                   ((base)->HDMI_RCR)
#define SRC_DISP_RCR_REG(base)                   ((base)->DISP_RCR)
#define SRC_GPU_RCR_REG(base)                    ((base)->GPU_RCR)
#define SRC_VPU_RCR_REG(base)                    ((base)->VPU_RCR)
#define SRC_PCIE2_RCR_REG(base)                  ((base)->PCIE2_RCR)
#define SRC_MIPIPHY1_RCR_REG(base)               ((base)->MIPIPHY1_RCR)
#define SRC_MIPIPHY2_RCR_REG(base)               ((base)->MIPIPHY2_RCR)
#define SRC_SBMR1_REG(base)                      ((base)->SBMR1)
#define SRC_SRSR_REG(base)                       ((base)->SRSR)
#define SRC_SISR_REG(base)                       ((base)->SISR)
#define SRC_SIMR_REG(base)                       ((base)->SIMR)
#define SRC_SBMR2_REG(base)                      ((base)->SBMR2)
#define SRC_GPR_REG(base,index)                  ((base)->GPR[index])
#define SRC_DDRC_RCR_REG(base)                   ((base)->DDRC_RCR)
#define SRC_DDRC2_RCR_REG(base)                  ((base)->DDRC2_RCR)

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Masks SRC Register Masks
 * @{
 */

/*! @name SCR - SRC Reset Control Register */
/*! @{ */
#define SRC_SCR_MASK_TEMPSENSE_RESET_MASK        (0xF0U)
#define SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT       (4U)
/*! MASK_TEMPSENSE_RESET
 *  0b0101..tempsense_reset is masked
 *  0b1010..tempsense_reset is not masked
 */
#define SRC_SCR_MASK_TEMPSENSE_RESET(x)          (((uint32_t)(((uint32_t)(x)) << SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT)) & SRC_SCR_MASK_TEMPSENSE_RESET_MASK)
#define SRC_SCR_DOMAIN0_MASK                     (0x1000000U)
#define SRC_SCR_DOMAIN0_SHIFT                    (24U)
#define SRC_SCR_DOMAIN1_MASK                     (0x2000000U)
#define SRC_SCR_DOMAIN1_SHIFT                    (25U)
#define SRC_SCR_DOMAIN2_MASK                     (0x4000000U)
#define SRC_SCR_DOMAIN2_SHIFT                    (26U)
#define SRC_SCR_DOMAIN3_MASK                     (0x8000000U)
#define SRC_SCR_DOMAIN3_SHIFT                    (27U)
#define SRC_SCR_LOCK_MASK                        (0x40000000U)
#define SRC_SCR_LOCK_SHIFT                       (30U)
#define SRC_SCR_DOM_EN_MASK                      (0x80000000U)
#define SRC_SCR_DOM_EN_SHIFT                     (31U)
/*! @} */

/*! @name A53RCR0 - A53 Reset Control Register */
/*! @{ */
#define SRC_A53RCR0_A53_CORE_POR_RESET0_MASK     (0x1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET0_SHIFT    (0U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_MASK     (0x2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_SHIFT    (1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_MASK     (0x4U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_SHIFT    (2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_MASK     (0x8U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_SHIFT    (3U)
#define SRC_A53RCR0_A53_CORE_RESET0_MASK         (0x10U)
#define SRC_A53RCR0_A53_CORE_RESET0_SHIFT        (4U)
#define SRC_A53RCR0_A53_CORE_RESET1_MASK         (0x20U)
#define SRC_A53RCR0_A53_CORE_RESET1_SHIFT        (5U)
#define SRC_A53RCR0_A53_CORE_RESET2_MASK         (0x40U)
#define SRC_A53RCR0_A53_CORE_RESET2_SHIFT        (6U)
#define SRC_A53RCR0_A53_CORE_RESET3_MASK         (0x80U)
#define SRC_A53RCR0_A53_CORE_RESET3_SHIFT        (7U)
#define SRC_A53RCR0_A53_DBG_RESET0_MASK          (0x100U)
#define SRC_A53RCR0_A53_DBG_RESET0_SHIFT         (8U)
#define SRC_A53RCR0_A53_DBG_RESET1_MASK          (0x200U)
#define SRC_A53RCR0_A53_DBG_RESET1_SHIFT         (9U)
#define SRC_A53RCR0_A53_DBG_RESET2_MASK          (0x400U)
#define SRC_A53RCR0_A53_DBG_RESET2_SHIFT         (10U)
#define SRC_A53RCR0_A53_DBG_RESET3_MASK          (0x800U)
#define SRC_A53RCR0_A53_DBG_RESET3_SHIFT         (11U)
#define SRC_A53RCR0_A53_ETM_RESET0_MASK          (0x1000U)
#define SRC_A53RCR0_A53_ETM_RESET0_SHIFT         (12U)
#define SRC_A53RCR0_A53_ETM_RESET1_MASK          (0x2000U)
#define SRC_A53RCR0_A53_ETM_RESET1_SHIFT         (13U)
#define SRC_A53RCR0_A53_ETM_RESET2_MASK          (0x4000U)
#define SRC_A53RCR0_A53_ETM_RESET2_SHIFT         (14U)
#define SRC_A53RCR0_A53_ETM_RESET3_MASK          (0x8000U)
#define SRC_A53RCR0_A53_ETM_RESET3_SHIFT         (15U)
#define SRC_A53RCR0_MASK_WDOG1_RST_MASK          (0xF0000U)
#define SRC_A53RCR0_MASK_WDOG1_RST_SHIFT         (16U)
/*! MASK_WDOG1_RST
 *  0b0101..wdog1_rst_b is masked
 *  0b1010..wdog1_rst_b is not masked
 */
#define SRC_A53RCR0_MASK_WDOG1_RST(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_MASK_WDOG1_RST_SHIFT)) & SRC_A53RCR0_MASK_WDOG1_RST_MASK)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_MASK       (0x100000U)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_SHIFT      (20U)
#define SRC_A53RCR0_A53_L2RESET_MASK             (0x200000U)
#define SRC_A53RCR0_A53_L2RESET_SHIFT            (21U)
#define SRC_A53RCR0_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR0_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR0_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR0_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR0_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR0_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR0_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR0_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR0_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR0_LOCK_SHIFT                   (30U)
#define SRC_A53RCR0_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR0_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name A53RCR1 - A53 Reset Control Register */
/*! @{ */
#define SRC_A53RCR1_A53_CORE0_ENABLE_MASK        (0x1U)
#define SRC_A53RCR1_A53_CORE0_ENABLE_SHIFT       (0U)
#define SRC_A53RCR1_A53_CORE1_ENABLE_MASK        (0x2U)
#define SRC_A53RCR1_A53_CORE1_ENABLE_SHIFT       (1U)
#define SRC_A53RCR1_A53_CORE2_ENABLE_MASK        (0x4U)
#define SRC_A53RCR1_A53_CORE2_ENABLE_SHIFT       (2U)
#define SRC_A53RCR1_A53_CORE3_ENABLE_MASK        (0x8U)
#define SRC_A53RCR1_A53_CORE3_ENABLE_SHIFT       (3U)
#define SRC_A53RCR1_A53_RST_SLOW_MASK            (0x70U)
#define SRC_A53RCR1_A53_RST_SLOW_SHIFT           (4U)
#define SRC_A53RCR1_A53_RST_SLOW(x)              (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_RST_SLOW_SHIFT)) & SRC_A53RCR1_A53_RST_SLOW_MASK)
#define SRC_A53RCR1_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR1_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR1_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR1_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR1_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR1_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR1_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR1_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR1_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR1_LOCK_SHIFT                   (30U)
#define SRC_A53RCR1_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR1_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name M4RCR - M4 Reset Control Register */
/*! @{ */
#define SRC_M4RCR_SW_M4C_NON_SCLR_RST_MASK       (0x1U)
#define SRC_M4RCR_SW_M4C_NON_SCLR_RST_SHIFT      (0U)
#define SRC_M4RCR_SW_M4C_RST_MASK                (0x2U)
#define SRC_M4RCR_SW_M4C_RST_SHIFT               (1U)
#define SRC_M4RCR_SW_M4P_RST_MASK                (0x4U)
#define SRC_M4RCR_SW_M4P_RST_SHIFT               (2U)
#define SRC_M4RCR_ENABLE_M4_MASK                 (0x8U)
#define SRC_M4RCR_ENABLE_M4_SHIFT                (3U)
#define SRC_M4RCR_MASK_WDOG3_RST_MASK            (0xF0U)
#define SRC_M4RCR_MASK_WDOG3_RST_SHIFT           (4U)
/*! MASK_WDOG3_RST
 *  0b0101..wdog3_rst_b is masked
 *  0b1010..wdog3_rst_b is not masked
 */
#define SRC_M4RCR_MASK_WDOG3_RST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_M4RCR_MASK_WDOG3_RST_SHIFT)) & SRC_M4RCR_MASK_WDOG3_RST_MASK)
#define SRC_M4RCR_WDOG3_RST_OPTION_M4_MASK       (0x100U)
#define SRC_M4RCR_WDOG3_RST_OPTION_M4_SHIFT      (8U)
#define SRC_M4RCR_WDOG3_RST_OPTION_MASK          (0x200U)
#define SRC_M4RCR_WDOG3_RST_OPTION_SHIFT         (9U)
#define SRC_M4RCR_DOMAIN0_MASK                   (0x1000000U)
#define SRC_M4RCR_DOMAIN0_SHIFT                  (24U)
#define SRC_M4RCR_DOMAIN1_MASK                   (0x2000000U)
#define SRC_M4RCR_DOMAIN1_SHIFT                  (25U)
#define SRC_M4RCR_DOMAIN2_MASK                   (0x4000000U)
#define SRC_M4RCR_DOMAIN2_SHIFT                  (26U)
#define SRC_M4RCR_DOMAIN3_MASK                   (0x8000000U)
#define SRC_M4RCR_DOMAIN3_SHIFT                  (27U)
#define SRC_M4RCR_LOCK_MASK                      (0x40000000U)
#define SRC_M4RCR_LOCK_SHIFT                     (30U)
#define SRC_M4RCR_DOM_EN_MASK                    (0x80000000U)
#define SRC_M4RCR_DOM_EN_SHIFT                   (31U)
/*! @} */

/*! @name USBOPHY1_RCR - USB OTG PHY1 Reset Control Register */
/*! @{ */
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_MASK     (0x1U)
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_SHIFT    (0U)
#define SRC_USBOPHY1_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_USBOPHY1_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_USBOPHY1_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_USBOPHY1_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_USBOPHY1_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_USBOPHY1_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_USBOPHY1_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_USBOPHY1_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_USBOPHY1_RCR_LOCK_MASK               (0x40000000U)
#define SRC_USBOPHY1_RCR_LOCK_SHIFT              (30U)
#define SRC_USBOPHY1_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_USBOPHY1_RCR_DOM_EN_SHIFT            (31U)
/*! @} */

/*! @name USBOPHY2_RCR - USB OTG PHY2 Reset Control Register */
/*! @{ */
#define SRC_USBOPHY2_RCR_OTG2_PHY_RESET_MASK     (0x1U)
#define SRC_USBOPHY2_RCR_OTG2_PHY_RESET_SHIFT    (0U)
#define SRC_USBOPHY2_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_USBOPHY2_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_USBOPHY2_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_USBOPHY2_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_USBOPHY2_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_USBOPHY2_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_USBOPHY2_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_USBOPHY2_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_USBOPHY2_RCR_LOCK_MASK               (0x40000000U)
#define SRC_USBOPHY2_RCR_LOCK_SHIFT              (30U)
#define SRC_USBOPHY2_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_USBOPHY2_RCR_DOM_EN_SHIFT            (31U)
/*! @} */

/*! @name MIPIPHY_RCR - MIPI PHY Reset Control Register */
/*! @{ */
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_MASK (0x2U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_BYTE_N_SHIFT (1U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_MASK    (0x4U)
#define SRC_MIPIPHY_RCR_MIPI_DSI_RESET_N_SHIFT   (2U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_MASK (0x8U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_DPI_RESET_N_SHIFT (3U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_MASK (0x10U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_ESC_RESET_N_SHIFT (4U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_MASK (0x20U)
#define SRC_MIPIPHY_RCR_MIPI_DIS_PCLK_RESET_N_SHIFT (5U)
#define SRC_MIPIPHY_RCR_DOMAIN0_MASK             (0x1000000U)
#define SRC_MIPIPHY_RCR_DOMAIN0_SHIFT            (24U)
#define SRC_MIPIPHY_RCR_DOMAIN1_MASK             (0x2000000U)
#define SRC_MIPIPHY_RCR_DOMAIN1_SHIFT            (25U)
#define SRC_MIPIPHY_RCR_DOMAIN2_MASK             (0x4000000U)
#define SRC_MIPIPHY_RCR_DOMAIN2_SHIFT            (26U)
#define SRC_MIPIPHY_RCR_DOMAIN3_MASK             (0x8000000U)
#define SRC_MIPIPHY_RCR_DOMAIN3_SHIFT            (27U)
#define SRC_MIPIPHY_RCR_LOCK_MASK                (0x40000000U)
#define SRC_MIPIPHY_RCR_LOCK_SHIFT               (30U)
#define SRC_MIPIPHY_RCR_DOM_EN_MASK              (0x80000000U)
#define SRC_MIPIPHY_RCR_DOM_EN_SHIFT             (31U)
/*! @} */

/*! @name PCIEPHY_RCR - PCIE PHY Reset Control Register */
/*! @{ */
#define SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK (0x1U)
#define SRC_PCIEPHY_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT (0U)
#define SRC_PCIEPHY_RCR_PCIEPHY_G_RST_MASK       (0x2U)
#define SRC_PCIEPHY_RCR_PCIEPHY_G_RST_SHIFT      (1U)
#define SRC_PCIEPHY_RCR_PCIEPHY_BTN_MASK         (0x4U)
#define SRC_PCIEPHY_RCR_PCIEPHY_BTN_SHIFT        (2U)
#define SRC_PCIEPHY_RCR_PCIEPHY_PERST_MASK       (0x8U)
#define SRC_PCIEPHY_RCR_PCIEPHY_PERST_SHIFT      (3U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK (0x10U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT (4U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_MASK  (0x20U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_RST_SHIFT (5U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_MASK   (0x40U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EN_SHIFT  (6U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_MASK (0x80U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_READY_SHIFT (7U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_MASK (0x100U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_ENTER_SHIFT (8U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_MASK (0x200U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_EXIT_SHIFT (9U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_MASK  (0x400U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_PME_SHIFT (10U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_MASK (0x800U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT (11U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_MASK (0x1000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT (12U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_MASK   (0x4000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_SYS_INT_SHIFT  (14U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK (0x8000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT (15U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK (0x10000U)
#define SRC_PCIEPHY_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT (16U)
#define SRC_PCIEPHY_RCR_DOMAIN0_MASK             (0x1000000U)
#define SRC_PCIEPHY_RCR_DOMAIN0_SHIFT            (24U)
#define SRC_PCIEPHY_RCR_DOMAIN1_MASK             (0x2000000U)
#define SRC_PCIEPHY_RCR_DOMAIN1_SHIFT            (25U)
#define SRC_PCIEPHY_RCR_DOMAIN2_MASK             (0x4000000U)
#define SRC_PCIEPHY_RCR_DOMAIN2_SHIFT            (26U)
#define SRC_PCIEPHY_RCR_DOMAIN3_MASK             (0x8000000U)
#define SRC_PCIEPHY_RCR_DOMAIN3_SHIFT            (27U)
#define SRC_PCIEPHY_RCR_LOCK_MASK                (0x40000000U)
#define SRC_PCIEPHY_RCR_LOCK_SHIFT               (30U)
#define SRC_PCIEPHY_RCR_DOM_EN_MASK              (0x80000000U)
#define SRC_PCIEPHY_RCR_DOM_EN_SHIFT             (31U)
/*! @} */

/*! @name HDMI_RCR - HDMI Reset Control Register */
/*! @{ */
#define SRC_HDMI_RCR_HDMI_PHY_APB_RESET_MASK     (0x1U)
#define SRC_HDMI_RCR_HDMI_PHY_APB_RESET_SHIFT    (0U)
#define SRC_HDMI_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_HDMI_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_HDMI_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_HDMI_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_HDMI_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_HDMI_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_HDMI_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_HDMI_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_HDMI_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_HDMI_RCR_LOCK_SHIFT                  (30U)
#define SRC_HDMI_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_HDMI_RCR_DOM_EN_SHIFT                (31U)
/*! @} */

/*! @name DISP_RCR - DISP Reset Control Register */
/*! @{ */
#define SRC_DISP_RCR_DISP_RESET_MASK             (0x1U)
#define SRC_DISP_RCR_DISP_RESET_SHIFT            (0U)
#define SRC_DISP_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DISP_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DISP_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DISP_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DISP_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DISP_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DISP_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DISP_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DISP_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DISP_RCR_LOCK_SHIFT                  (30U)
#define SRC_DISP_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DISP_RCR_DOM_EN_SHIFT                (31U)
/*! @} */

/*! @name GPU_RCR - GPU Reset Control Register */
/*! @{ */
#define SRC_GPU_RCR_GPU_RESET_MASK               (0x1U)
#define SRC_GPU_RCR_GPU_RESET_SHIFT              (0U)
#define SRC_GPU_RCR_DOMAIN0_MASK                 (0x1000000U)
#define SRC_GPU_RCR_DOMAIN0_SHIFT                (24U)
#define SRC_GPU_RCR_DOMAIN1_MASK                 (0x2000000U)
#define SRC_GPU_RCR_DOMAIN1_SHIFT                (25U)
#define SRC_GPU_RCR_DOMAIN2_MASK                 (0x4000000U)
#define SRC_GPU_RCR_DOMAIN2_SHIFT                (26U)
#define SRC_GPU_RCR_DOMAIN3_MASK                 (0x8000000U)
#define SRC_GPU_RCR_DOMAIN3_SHIFT                (27U)
#define SRC_GPU_RCR_LOCK_MASK                    (0x40000000U)
#define SRC_GPU_RCR_LOCK_SHIFT                   (30U)
#define SRC_GPU_RCR_DOM_EN_MASK                  (0x80000000U)
#define SRC_GPU_RCR_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name VPU_RCR - VPU Reset Control Register */
/*! @{ */
#define SRC_VPU_RCR_VPU_RESET_MASK               (0x1U)
#define SRC_VPU_RCR_VPU_RESET_SHIFT              (0U)
#define SRC_VPU_RCR_DOMAIN0_MASK                 (0x1000000U)
#define SRC_VPU_RCR_DOMAIN0_SHIFT                (24U)
#define SRC_VPU_RCR_DOMAIN1_MASK                 (0x2000000U)
#define SRC_VPU_RCR_DOMAIN1_SHIFT                (25U)
#define SRC_VPU_RCR_DOMAIN2_MASK                 (0x4000000U)
#define SRC_VPU_RCR_DOMAIN2_SHIFT                (26U)
#define SRC_VPU_RCR_DOMAIN3_MASK                 (0x8000000U)
#define SRC_VPU_RCR_DOMAIN3_SHIFT                (27U)
#define SRC_VPU_RCR_LOCK_MASK                    (0x40000000U)
#define SRC_VPU_RCR_LOCK_SHIFT                   (30U)
#define SRC_VPU_RCR_DOM_EN_MASK                  (0x80000000U)
#define SRC_VPU_RCR_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name PCIE2_RCR - PCIE2 Reset Control Register */
/*! @{ */
#define SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_MASK (0x1U)
#define SRC_PCIE2_RCR_PCIE_PHY_POWER_ON_RESET_N_SHIFT (0U)
#define SRC_PCIE2_RCR_PCIE_G_RST_MASK            (0x2U)
#define SRC_PCIE2_RCR_PCIE_G_RST_SHIFT           (1U)
#define SRC_PCIE2_RCR_PCIE_BTN_MASK              (0x4U)
#define SRC_PCIE2_RCR_PCIE_BTN_SHIFT             (2U)
#define SRC_PCIE2_RCR_PCIE_PERST_MASK            (0x8U)
#define SRC_PCIE2_RCR_PCIE_PERST_SHIFT           (3U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_MASK (0x10U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_CLK_REQ_SHIFT (4U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_MASK    (0x20U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_RST_SHIFT   (5U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_MASK     (0x40U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EN_SHIFT    (6U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_MASK  (0x80U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_READY_SHIFT (7U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_MASK  (0x100U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_ENTER_SHIFT (8U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_MASK   (0x200U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_EXIT_SHIFT  (9U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_MASK    (0x400U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_PME_SHIFT   (10U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_MASK (0x800U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APPS_TURNOFF_SHIFT (11U)
#define SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_MASK  (0x1000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_CFG_L1_AUX_SHIFT (12U)
#define SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_MASK     (0x4000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_SYS_INT_SHIFT    (14U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_MASK (0x8000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_UNLOCK_MSG_SHIFT (15U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_MASK (0x10000U)
#define SRC_PCIE2_RCR_PCIE_CTRL_APP_XFER_PENDING_SHIFT (16U)
#define SRC_PCIE2_RCR_DOMAIN0_MASK               (0x1000000U)
#define SRC_PCIE2_RCR_DOMAIN0_SHIFT              (24U)
#define SRC_PCIE2_RCR_DOMAIN1_MASK               (0x2000000U)
#define SRC_PCIE2_RCR_DOMAIN1_SHIFT              (25U)
#define SRC_PCIE2_RCR_DOMAIN2_MASK               (0x4000000U)
#define SRC_PCIE2_RCR_DOMAIN2_SHIFT              (26U)
#define SRC_PCIE2_RCR_DOMAIN3_MASK               (0x8000000U)
#define SRC_PCIE2_RCR_DOMAIN3_SHIFT              (27U)
#define SRC_PCIE2_RCR_LOCK_MASK                  (0x40000000U)
#define SRC_PCIE2_RCR_LOCK_SHIFT                 (30U)
#define SRC_PCIE2_RCR_DOM_EN_MASK                (0x80000000U)
#define SRC_PCIE2_RCR_DOM_EN_SHIFT               (31U)
/*! @} */

/*! @name MIPIPHY1_RCR - MIPI CSI1 PHY Reset Control Register */
/*! @{ */
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_MASK (0x1U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_CORE_RESET_SHIFT (0U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_MASK (0x2U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_PHY_REF_RESET_SHIFT (1U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_MASK (0x4U)
#define SRC_MIPIPHY1_RCR_MIPI_CSI1_ESC_RESET_SHIFT (2U)
#define SRC_MIPIPHY1_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_MIPIPHY1_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_MIPIPHY1_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_MIPIPHY1_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_MIPIPHY1_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_MIPIPHY1_RCR_LOCK_MASK               (0x40000000U)
#define SRC_MIPIPHY1_RCR_LOCK_SHIFT              (30U)
#define SRC_MIPIPHY1_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_MIPIPHY1_RCR_DOM_EN_SHIFT            (31U)
/*! @} */

/*! @name MIPIPHY2_RCR - MIPI CSI2 PHY Reset Control Register */
/*! @{ */
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_MASK (0x1U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_CORE_RESET_SHIFT (0U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_MASK (0x2U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_PHY_REF_RESET_SHIFT (1U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_MASK (0x4U)
#define SRC_MIPIPHY2_RCR_MIPI_CSI2_ESC_RESET_SHIFT (2U)
#define SRC_MIPIPHY2_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_MIPIPHY2_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_MIPIPHY2_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_MIPIPHY2_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_MIPIPHY2_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_MIPIPHY2_RCR_LOCK_MASK               (0x40000000U)
#define SRC_MIPIPHY2_RCR_LOCK_SHIFT              (30U)
#define SRC_MIPIPHY2_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_MIPIPHY2_RCR_DOM_EN_SHIFT            (31U)
/*! @} */

/*! @name SBMR1 - SRC Boot Mode Register 1 */
/*! @{ */
#define SRC_SBMR1_BOOT_CFG_MASK                  (0xFFFFFFFFU)
#define SRC_SBMR1_BOOT_CFG_SHIFT                 (0U)
#define SRC_SBMR1_BOOT_CFG(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG_SHIFT)) & SRC_SBMR1_BOOT_CFG_MASK)
/*! @} */

/*! @name SRSR - SRC Reset Status Register */
/*! @{ */
#define SRC_SRSR_CSU_RESET_B_MASK                (0x4U)
#define SRC_SRSR_CSU_RESET_B_SHIFT               (2U)
#define SRC_SRSR_IPP_USER_RESET_B_MASK           (0x8U)
#define SRC_SRSR_IPP_USER_RESET_B_SHIFT          (3U)
#define SRC_SRSR_WDOG1_RST_B_MASK                (0x10U)
#define SRC_SRSR_WDOG1_RST_B_SHIFT               (4U)
#define SRC_SRSR_JTAG_RST_B_MASK                 (0x20U)
#define SRC_SRSR_JTAG_RST_B_SHIFT                (5U)
#define SRC_SRSR_JTAG_SW_RST_MASK                (0x40U)
#define SRC_SRSR_JTAG_SW_RST_SHIFT               (6U)
#define SRC_SRSR_WDOG3_RST_B_MASK                (0x80U)
#define SRC_SRSR_WDOG3_RST_B_SHIFT               (7U)
#define SRC_SRSR_WDOG4_RST_B_MASK                (0x100U)
#define SRC_SRSR_WDOG4_RST_B_SHIFT               (8U)
#define SRC_SRSR_TEMPSENSE_RST_B_MASK            (0x200U)
#define SRC_SRSR_TEMPSENSE_RST_B_SHIFT           (9U)
/*! @} */

/*! @name SISR - SRC Interrupt Status Register */
/*! @{ */
#define SRC_SISR_HSICPHY_PASSED_RESET_MASK       (0x2U)
#define SRC_SISR_HSICPHY_PASSED_RESET_SHIFT      (1U)
#define SRC_SISR_OTGPHY1_PASSED_RESET_MASK       (0x4U)
#define SRC_SISR_OTGPHY1_PASSED_RESET_SHIFT      (2U)
#define SRC_SISR_OTGPHY2_PASSED_RESET_MASK       (0x8U)
#define SRC_SISR_OTGPHY2_PASSED_RESET_SHIFT      (3U)
#define SRC_SISR_MIPIPHY_PASSED_RESET_MASK       (0x10U)
#define SRC_SISR_MIPIPHY_PASSED_RESET_SHIFT      (4U)
#define SRC_SISR_PCIE1_PHY_PASSED_RESET_MASK     (0x20U)
#define SRC_SISR_PCIE1_PHY_PASSED_RESET_SHIFT    (5U)
#define SRC_SISR_HDMI_PASSED_RESET_MASK          (0x40U)
#define SRC_SISR_HDMI_PASSED_RESET_SHIFT         (6U)
#define SRC_SISR_DISPLAY_PASSED_RESET_MASK       (0x80U)
#define SRC_SISR_DISPLAY_PASSED_RESET_SHIFT      (7U)
#define SRC_SISR_M4C_PASSED_RESET_MASK           (0x100U)
#define SRC_SISR_M4C_PASSED_RESET_SHIFT          (8U)
#define SRC_SISR_M4P_PASSED_RESET_MASK           (0x200U)
#define SRC_SISR_M4P_PASSED_RESET_SHIFT          (9U)
#define SRC_SISR_GPU_PASSED_RESET_MASK           (0x400U)
#define SRC_SISR_GPU_PASSED_RESET_SHIFT          (10U)
#define SRC_SISR_VPU_PASSED_RESET_MASK           (0x800U)
#define SRC_SISR_VPU_PASSED_RESET_SHIFT          (11U)
#define SRC_SISR_PCIE2_PHY_PASSED_RESET_MASK     (0x1000U)
#define SRC_SISR_PCIE2_PHY_PASSED_RESET_SHIFT    (12U)
#define SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_MASK (0x2000U)
#define SRC_SISR_MIPI_CSI1_PHY_PASSED_RESET_SHIFT (13U)
#define SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_MASK (0x4000U)
#define SRC_SISR_MIPI_CSI2_PHY_PASSED_RESET_SHIFT (14U)
/*! @} */

/*! @name SIMR - SRC Interrupt Mask Register */
/*! @{ */
#define SRC_SIMR_MASK_HSICPHY_PASSED_RESET_MASK  (0x2U)
#define SRC_SIMR_MASK_HSICPHY_PASSED_RESET_SHIFT (1U)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_MASK  (0x4U)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_SHIFT (2U)
#define SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_MASK  (0x8U)
#define SRC_SIMR_MASK_OTGPHY2_PASSED_RESET_SHIFT (3U)
#define SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_MASK  (0x10U)
#define SRC_SIMR_MASK_MIPIPHY_PASSED_RESET_SHIFT (4U)
#define SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_MASK (0x20U)
#define SRC_SIMR_MASK_PCIE1_PHY_PASSED_RESET_SHIFT (5U)
#define SRC_SIMR_MASK_HDMI_PASSED_RESET_MASK     (0x40U)
#define SRC_SIMR_MASK_HDMI_PASSED_RESET_SHIFT    (6U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_MASK  (0x80U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_SHIFT (7U)
#define SRC_SIMR_MASK_M4C_PASSED_RESET_MASK      (0x100U)
#define SRC_SIMR_MASK_M4C_PASSED_RESET_SHIFT     (8U)
#define SRC_SIMR_MASK_M4P_PASSED_RESET_MASK      (0x200U)
#define SRC_SIMR_MASK_M4P_PASSED_RESET_SHIFT     (9U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_MASK      (0x400U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_SHIFT     (10U)
#define SRC_SIMR_MASK_VPU_PASSED_RESET_MASK      (0x800U)
#define SRC_SIMR_MASK_VPU_PASSED_RESET_SHIFT     (11U)
#define SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_MASK (0x1000U)
#define SRC_SIMR_MASK_PCIE2_PHY_PASSED_RESET_SHIFT (12U)
#define SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_MASK (0x2000U)
#define SRC_SIMR_MASK_MIPI_CSI1_PHY_PASSED_RESET_SHIFT (13U)
#define SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_MASK (0x4000U)
#define SRC_SIMR_MASK_MIPI_CSI2_PHY_PASSED_RESET_SHIFT (14U)
/*! @} */

/*! @name SBMR2 - SRC Boot Mode Register 2 */
/*! @{ */
#define SRC_SBMR2_SEC_CONFIG_MASK                (0x3U)
#define SRC_SBMR2_SEC_CONFIG_SHIFT               (0U)
#define SRC_SBMR2_SEC_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_SEC_CONFIG_SHIFT)) & SRC_SBMR2_SEC_CONFIG_MASK)
#define SRC_SBMR2_DIR_BT_DIS_MASK                (0x8U)
#define SRC_SBMR2_DIR_BT_DIS_SHIFT               (3U)
#define SRC_SBMR2_BT_FUSE_SEL_MASK               (0x10U)
#define SRC_SBMR2_BT_FUSE_SEL_SHIFT              (4U)
#define SRC_SBMR2_FUSE_FORCE_COLD_BOOT_MASK      (0x20U)
#define SRC_SBMR2_FUSE_FORCE_COLD_BOOT_SHIFT     (5U)
#define SRC_SBMR2_BMOD_MASK                      (0x3000000U)
#define SRC_SBMR2_BMOD_SHIFT                     (24U)
#define SRC_SBMR2_BMOD(x)                        (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_BMOD_SHIFT)) & SRC_SBMR2_BMOD_MASK)
/*! @} */

/*! @name GPR - SRC General Purpose Register 1..SRC General Purpose Register 10 */
/*! @{ */
#define SRC_GPR_PERSISTENT_ARG0_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG0_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG0(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG0_SHIFT)) & SRC_GPR_PERSISTENT_ARG0_MASK)
#define SRC_GPR_PERSISTENT_ARG1_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG1_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG1(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG1_SHIFT)) & SRC_GPR_PERSISTENT_ARG1_MASK)
#define SRC_GPR_PERSISTENT_ARG2_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG2_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG2(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG2_SHIFT)) & SRC_GPR_PERSISTENT_ARG2_MASK)
#define SRC_GPR_PERSISTENT_ARG3_MASK             (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ARG3_SHIFT            (0U)
#define SRC_GPR_PERSISTENT_ARG3(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ARG3_SHIFT)) & SRC_GPR_PERSISTENT_ARG3_MASK)
#define SRC_GPR_PERSISTENT_ENTRY0_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY0_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY0(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY0_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY0_MASK)
#define SRC_GPR_PERSISTENT_ENTRY1_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY1_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY1(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY1_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY1_MASK)
#define SRC_GPR_PERSISTENT_ENTRY2_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY2_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY2(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY2_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY2_MASK)
#define SRC_GPR_PERSISTENT_ENTRY3_MASK           (0xFFFFFFFFU)
#define SRC_GPR_PERSISTENT_ENTRY3_SHIFT          (0U)
#define SRC_GPR_PERSISTENT_ENTRY3(x)             (((uint32_t)(((uint32_t)(x)) << SRC_GPR_PERSISTENT_ENTRY3_SHIFT)) & SRC_GPR_PERSISTENT_ENTRY3_MASK)
/*! @} */

/* The count of SRC_GPR */
#define SRC_GPR_COUNT                            (10U)

/*! @name DDRC_RCR - SRC DDR Controller Reset Control Register */
/*! @{ */
#define SRC_DDRC_RCR_DDRC1_PRST_MASK             (0x1U)
#define SRC_DDRC_RCR_DDRC1_PRST_SHIFT            (0U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_MASK         (0x2U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_SHIFT        (1U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_MASK        (0x4U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_SHIFT       (2U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_MASK      (0x8U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_SHIFT     (3U)
#define SRC_DDRC_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DDRC_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DDRC_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DDRC_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DDRC_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DDRC_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DDRC_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DDRC_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DDRC_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DDRC_RCR_LOCK_SHIFT                  (30U)
#define SRC_DDRC_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DDRC_RCR_DOM_EN_SHIFT                (31U)
/*! @} */

/*! @name DDRC2_RCR - SRC DDRC2 Controller Reset Control Register */
/*! @{ */
#define SRC_DDRC2_RCR_DDRC2_PRST_MASK            (0x1U)
#define SRC_DDRC2_RCR_DDRC2_PRST_SHIFT           (0U)
#define SRC_DDRC2_RCR_DDRC2_CORE_RST_MASK        (0x2U)
#define SRC_DDRC2_RCR_DDRC2_CORE_RST_SHIFT       (1U)
#define SRC_DDRC2_RCR_DDRC1_PHY_RESET_MASK       (0x4U)
#define SRC_DDRC2_RCR_DDRC1_PHY_RESET_SHIFT      (2U)
#define SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_MASK     (0x8U)
#define SRC_DDRC2_RCR_DDRC1_PHY_PWROKIN_SHIFT    (3U)
#define SRC_DDRC2_RCR_DOMAIN0_MASK               (0x1000000U)
#define SRC_DDRC2_RCR_DOMAIN0_SHIFT              (24U)
#define SRC_DDRC2_RCR_DOMAIN1_MASK               (0x2000000U)
#define SRC_DDRC2_RCR_DOMAIN1_SHIFT              (25U)
#define SRC_DDRC2_RCR_DOMAIN2_MASK               (0x4000000U)
#define SRC_DDRC2_RCR_DOMAIN2_SHIFT              (26U)
#define SRC_DDRC2_RCR_DOMAIN3_MASK               (0x8000000U)
#define SRC_DDRC2_RCR_DOMAIN3_SHIFT              (27U)
#define SRC_DDRC2_RCR_LOCK_MASK                  (0x40000000U)
#define SRC_DDRC2_RCR_LOCK_SHIFT                 (30U)
#define SRC_DDRC2_RCR_DOM_EN_MASK                (0x80000000U)
#define SRC_DDRC2_RCR_DOM_EN_SHIFT               (31U)
/*! @} */


/*!
 * @}
 */ /* end of group SRC_Register_Masks */


/* SRC - Peripheral instance base addresses */
/** Peripheral SRC base pointer */
#define SRC_BASE_PTR                             ((SRC_MemMapPtr)0x30390000u)
/** Array initializer of SRC peripheral base pointers */
#define SRC_BASE_PTRS                            { SRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register instance definitions */
/* SRC */
#define SRC_SCR                                  SRC_SCR_REG(SRC_BASE_PTR)
#define SRC_A53RCR0                              SRC_A53RCR0_REG(SRC_BASE_PTR)
#define SRC_A53RCR1                              SRC_A53RCR1_REG(SRC_BASE_PTR)
#define SRC_M4RCR                                SRC_M4RCR_REG(SRC_BASE_PTR)
#define SRC_USBOPHY1_RCR                         SRC_USBOPHY1_RCR_REG(SRC_BASE_PTR)
#define SRC_USBOPHY2_RCR                         SRC_USBOPHY2_RCR_REG(SRC_BASE_PTR)
#define SRC_MIPIPHY_RCR                          SRC_MIPIPHY_RCR_REG(SRC_BASE_PTR)
#define SRC_PCIEPHY_RCR                          SRC_PCIEPHY_RCR_REG(SRC_BASE_PTR)
#define SRC_HDMI_RCR                             SRC_HDMI_RCR_REG(SRC_BASE_PTR)
#define SRC_DISP_RCR                             SRC_DISP_RCR_REG(SRC_BASE_PTR)
#define SRC_GPU_RCR                              SRC_GPU_RCR_REG(SRC_BASE_PTR)
#define SRC_VPU_RCR                              SRC_VPU_RCR_REG(SRC_BASE_PTR)
#define SRC_PCIE2_RCR                            SRC_PCIE2_RCR_REG(SRC_BASE_PTR)
#define SRC_MIPIPHY1_RCR                         SRC_MIPIPHY1_RCR_REG(SRC_BASE_PTR)
#define SRC_MIPIPHY2_RCR                         SRC_MIPIPHY2_RCR_REG(SRC_BASE_PTR)
#define SRC_SBMR1                                SRC_SBMR1_REG(SRC_BASE_PTR)
#define SRC_SRSR                                 SRC_SRSR_REG(SRC_BASE_PTR)
#define SRC_SISR                                 SRC_SISR_REG(SRC_BASE_PTR)
#define SRC_SIMR                                 SRC_SIMR_REG(SRC_BASE_PTR)
#define SRC_SBMR2                                SRC_SBMR2_REG(SRC_BASE_PTR)
#define SRC_GPR1                                 SRC_GPR_REG(SRC_BASE_PTR,0)
#define SRC_GPR2                                 SRC_GPR_REG(SRC_BASE_PTR,1)
#define SRC_GPR3                                 SRC_GPR_REG(SRC_BASE_PTR,2)
#define SRC_GPR4                                 SRC_GPR_REG(SRC_BASE_PTR,3)
#define SRC_GPR5                                 SRC_GPR_REG(SRC_BASE_PTR,4)
#define SRC_GPR6                                 SRC_GPR_REG(SRC_BASE_PTR,5)
#define SRC_GPR7                                 SRC_GPR_REG(SRC_BASE_PTR,6)
#define SRC_GPR8                                 SRC_GPR_REG(SRC_BASE_PTR,7)
#define SRC_GPR9                                 SRC_GPR_REG(SRC_BASE_PTR,8)
#define SRC_GPR10                                SRC_GPR_REG(SRC_BASE_PTR,9)
#define SRC_DDRC_RCR                             SRC_DDRC_RCR_REG(SRC_BASE_PTR)
#define SRC_DDRC2_RCR                            SRC_DDRC2_RCR_REG(SRC_BASE_PTR)

/* SRC - Register array accessors */
#define SRC_GPR(index)                           SRC_GPR_REG(SRC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- SUBSAM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SUBSAM_Peripheral SUBSAM
 * @{
 */

/** SUBSAM - Peripheral register structure */
typedef struct SUBSAM_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< , offset: 0x0 */
    uint32_t SET;                                    /**< , offset: 0x4 */
    uint32_t CLR;                                    /**< , offset: 0x8 */
    uint32_t TOG;                                    /**< , offset: 0xC */
  } SS_SYS_CTRL;
  struct {                                         /* offset: 0x10 */
    uint32_t RW;                                     /**< , offset: 0x10 */
    uint32_t SET;                                    /**< , offset: 0x14 */
    uint32_t CLR;                                    /**< , offset: 0x18 */
    uint32_t TOG;                                    /**< , offset: 0x1C */
  } SS_DISPLAY;
  struct {                                         /* offset: 0x20 */
    uint32_t RW;                                     /**< , offset: 0x20 */
    uint32_t SET;                                    /**< , offset: 0x24 */
    uint32_t CLR;                                    /**< , offset: 0x28 */
    uint32_t TOG;                                    /**< , offset: 0x2C */
  } SS_HSYNC;
  struct {                                         /* offset: 0x30 */
    uint32_t RW;                                     /**< , offset: 0x30 */
    uint32_t SET;                                    /**< , offset: 0x34 */
    uint32_t CLR;                                    /**< , offset: 0x38 */
    uint32_t TOG;                                    /**< , offset: 0x3C */
  } SS_VSYNC;
  struct {                                         /* offset: 0x40 */
    uint32_t RW;                                     /**< , offset: 0x40 */
    uint32_t SET;                                    /**< , offset: 0x44 */
    uint32_t CLR;                                    /**< , offset: 0x48 */
    uint32_t TOG;                                    /**< , offset: 0x4C */
  } SS_DE_ULC;
  struct {                                         /* offset: 0x50 */
    uint32_t RW;                                     /**< , offset: 0x50 */
    uint32_t SET;                                    /**< , offset: 0x54 */
    uint32_t CLR;                                    /**< , offset: 0x58 */
    uint32_t TOG;                                    /**< , offset: 0x5C */
  } SS_DE_LRC;
  struct {                                         /* offset: 0x60 */
    uint32_t RW;                                     /**< , offset: 0x60 */
    uint32_t SET;                                    /**< , offset: 0x64 */
    uint32_t CLR;                                    /**< , offset: 0x68 */
    uint32_t TOG;                                    /**< , offset: 0x6C */
  } SS_MODE;
  struct {                                         /* offset: 0x70 */
    uint32_t RW;                                     /**< , offset: 0x70 */
    uint32_t SET;                                    /**< , offset: 0x74 */
    uint32_t CLR;                                    /**< , offset: 0x78 */
    uint32_t TOG;                                    /**< , offset: 0x7C */
  } SS_COEFF;
  struct {                                         /* offset: 0x80 */
    uint32_t RW;                                     /**< , offset: 0x80 */
    uint32_t SET;                                    /**< , offset: 0x84 */
    uint32_t CLR;                                    /**< , offset: 0x88 */
    uint32_t TOG;                                    /**< , offset: 0x8C */
  } SS_CLIP_CB;
  struct {                                         /* offset: 0x90 */
    uint32_t RW;                                     /**< , offset: 0x90 */
    uint32_t SET;                                    /**< , offset: 0x94 */
    uint32_t CLR;                                    /**< , offset: 0x98 */
    uint32_t TOG;                                    /**< , offset: 0x9C */
  } SS_CLIP_CR;
  struct {                                         /* offset: 0xA0 */
    uint32_t RW;                                     /**< , offset: 0xA0 */
    uint32_t SET;                                    /**< , offset: 0xA4 */
    uint32_t CLR;                                    /**< , offset: 0xA8 */
    uint32_t TOG;                                    /**< , offset: 0xAC */
  } SS_INTER_MODE;
  uint32_t SS_CHKSUM_CTRL;                         /**< , offset: 0xB0 */
  uint32_t SS_CHKSUM_START;                        /**< , offset: 0xB4 */
  uint32_t SS_CHKSUM_END;                          /**< , offset: 0xB8 */
  uint32_t SS_CHKSUM_DATA_LOW;                     /**< , offset: 0xBC */
  uint32_t SS_CHKSUM_DATA_HIGH;                    /**< , offset: 0xC0 */
} volatile *SUBSAM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SUBSAM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SUBSAM_Register_Accessor_Macros SUBSAM - Register accessor macros
 * @{
 */


/* SUBSAM - Register accessors */
#define SUBSAM_SS_SYS_CTRL_REG(base)             ((base)->SS_SYS_CTRL.RW)
#define SUBSAM_SS_SYS_CTRL_SET_REG(base)         ((base)->SS_SYS_CTRL.SET)
#define SUBSAM_SS_SYS_CTRL_CLR_REG(base)         ((base)->SS_SYS_CTRL.CLR)
#define SUBSAM_SS_SYS_CTRL_TOG_REG(base)         ((base)->SS_SYS_CTRL.TOG)
#define SUBSAM_SS_DISPLAY_REG(base)              ((base)->SS_DISPLAY.RW)
#define SUBSAM_SS_DISPLAY_SET_REG(base)          ((base)->SS_DISPLAY.SET)
#define SUBSAM_SS_DISPLAY_CLR_REG(base)          ((base)->SS_DISPLAY.CLR)
#define SUBSAM_SS_DISPLAY_TOG_REG(base)          ((base)->SS_DISPLAY.TOG)
#define SUBSAM_SS_HSYNC_REG(base)                ((base)->SS_HSYNC.RW)
#define SUBSAM_SS_HSYNC_SET_REG(base)            ((base)->SS_HSYNC.SET)
#define SUBSAM_SS_HSYNC_CLR_REG(base)            ((base)->SS_HSYNC.CLR)
#define SUBSAM_SS_HSYNC_TOG_REG(base)            ((base)->SS_HSYNC.TOG)
#define SUBSAM_SS_VSYNC_REG(base)                ((base)->SS_VSYNC.RW)
#define SUBSAM_SS_VSYNC_SET_REG(base)            ((base)->SS_VSYNC.SET)
#define SUBSAM_SS_VSYNC_CLR_REG(base)            ((base)->SS_VSYNC.CLR)
#define SUBSAM_SS_VSYNC_TOG_REG(base)            ((base)->SS_VSYNC.TOG)
#define SUBSAM_SS_DE_ULC_REG(base)               ((base)->SS_DE_ULC.RW)
#define SUBSAM_SS_DE_ULC_SET_REG(base)           ((base)->SS_DE_ULC.SET)
#define SUBSAM_SS_DE_ULC_CLR_REG(base)           ((base)->SS_DE_ULC.CLR)
#define SUBSAM_SS_DE_ULC_TOG_REG(base)           ((base)->SS_DE_ULC.TOG)
#define SUBSAM_SS_DE_LRC_REG(base)               ((base)->SS_DE_LRC.RW)
#define SUBSAM_SS_DE_LRC_SET_REG(base)           ((base)->SS_DE_LRC.SET)
#define SUBSAM_SS_DE_LRC_CLR_REG(base)           ((base)->SS_DE_LRC.CLR)
#define SUBSAM_SS_DE_LRC_TOG_REG(base)           ((base)->SS_DE_LRC.TOG)
#define SUBSAM_SS_MODE_REG(base)                 ((base)->SS_MODE.RW)
#define SUBSAM_SS_MODE_SET_REG(base)             ((base)->SS_MODE.SET)
#define SUBSAM_SS_MODE_CLR_REG(base)             ((base)->SS_MODE.CLR)
#define SUBSAM_SS_MODE_TOG_REG(base)             ((base)->SS_MODE.TOG)
#define SUBSAM_SS_COEFF_REG(base)                ((base)->SS_COEFF.RW)
#define SUBSAM_SS_COEFF_SET_REG(base)            ((base)->SS_COEFF.SET)
#define SUBSAM_SS_COEFF_CLR_REG(base)            ((base)->SS_COEFF.CLR)
#define SUBSAM_SS_COEFF_TOG_REG(base)            ((base)->SS_COEFF.TOG)
#define SUBSAM_SS_CLIP_CB_REG(base)              ((base)->SS_CLIP_CB.RW)
#define SUBSAM_SS_CLIP_CB_SET_REG(base)          ((base)->SS_CLIP_CB.SET)
#define SUBSAM_SS_CLIP_CB_CLR_REG(base)          ((base)->SS_CLIP_CB.CLR)
#define SUBSAM_SS_CLIP_CB_TOG_REG(base)          ((base)->SS_CLIP_CB.TOG)
#define SUBSAM_SS_CLIP_CR_REG(base)              ((base)->SS_CLIP_CR.RW)
#define SUBSAM_SS_CLIP_CR_SET_REG(base)          ((base)->SS_CLIP_CR.SET)
#define SUBSAM_SS_CLIP_CR_CLR_REG(base)          ((base)->SS_CLIP_CR.CLR)
#define SUBSAM_SS_CLIP_CR_TOG_REG(base)          ((base)->SS_CLIP_CR.TOG)
#define SUBSAM_SS_INTER_MODE_REG(base)           ((base)->SS_INTER_MODE.RW)
#define SUBSAM_SS_INTER_MODE_SET_REG(base)       ((base)->SS_INTER_MODE.SET)
#define SUBSAM_SS_INTER_MODE_CLR_REG(base)       ((base)->SS_INTER_MODE.CLR)
#define SUBSAM_SS_INTER_MODE_TOG_REG(base)       ((base)->SS_INTER_MODE.TOG)
#define SUBSAM_SS_CHKSUM_CTRL_REG(base)          ((base)->SS_CHKSUM_CTRL)
#define SUBSAM_SS_CHKSUM_START_REG(base)         ((base)->SS_CHKSUM_START)
#define SUBSAM_SS_CHKSUM_END_REG(base)           ((base)->SS_CHKSUM_END)
#define SUBSAM_SS_CHKSUM_DATA_LOW_REG(base)      ((base)->SS_CHKSUM_DATA_LOW)
#define SUBSAM_SS_CHKSUM_DATA_HIGH_REG(base)     ((base)->SS_CHKSUM_DATA_HIGH)

/*!
 * @}
 */ /* end of group SUBSAM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SUBSAM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SUBSAM_Register_Masks SUBSAM Register Masks
 * @{
 */

/*! @name SS_SYS_CTRL -  */
/*! @{ */
#define SUBSAM_SS_SYS_CTRL_RUN_EN_MASK           (0x1U)
#define SUBSAM_SS_SYS_CTRL_RUN_EN_SHIFT          (0U)
/*! @} */

/*! @name SS_DISPLAY -  */
/*! @{ */
#define SUBSAM_SS_DISPLAY_LRC_X_MASK             (0x1FFFU)
#define SUBSAM_SS_DISPLAY_LRC_X_SHIFT            (0U)
#define SUBSAM_SS_DISPLAY_LRC_X(x)               (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DISPLAY_LRC_X_SHIFT)) & SUBSAM_SS_DISPLAY_LRC_X_MASK)
#define SUBSAM_SS_DISPLAY_LRC_Y_MASK             (0x1FFF0000U)
#define SUBSAM_SS_DISPLAY_LRC_Y_SHIFT            (16U)
#define SUBSAM_SS_DISPLAY_LRC_Y(x)               (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DISPLAY_LRC_Y_SHIFT)) & SUBSAM_SS_DISPLAY_LRC_Y_MASK)
/*! @} */

/*! @name SS_HSYNC -  */
/*! @{ */
#define SUBSAM_SS_HSYNC_START_MASK               (0x1FFFU)
#define SUBSAM_SS_HSYNC_START_SHIFT              (0U)
#define SUBSAM_SS_HSYNC_START(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_HSYNC_START_SHIFT)) & SUBSAM_SS_HSYNC_START_MASK)
#define SUBSAM_SS_HSYNC_END_MASK                 (0x1FFF0000U)
#define SUBSAM_SS_HSYNC_END_SHIFT                (16U)
#define SUBSAM_SS_HSYNC_END(x)                   (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_HSYNC_END_SHIFT)) & SUBSAM_SS_HSYNC_END_MASK)
#define SUBSAM_SS_HSYNC_POL_MASK                 (0x80000000U)
#define SUBSAM_SS_HSYNC_POL_SHIFT                (31U)
/*! @} */

/*! @name SS_VSYNC -  */
/*! @{ */
#define SUBSAM_SS_VSYNC_START_MASK               (0x1FFFU)
#define SUBSAM_SS_VSYNC_START_SHIFT              (0U)
#define SUBSAM_SS_VSYNC_START(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_VSYNC_START_SHIFT)) & SUBSAM_SS_VSYNC_START_MASK)
#define SUBSAM_SS_VSYNC_END_MASK                 (0x1FFF0000U)
#define SUBSAM_SS_VSYNC_END_SHIFT                (16U)
#define SUBSAM_SS_VSYNC_END(x)                   (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_VSYNC_END_SHIFT)) & SUBSAM_SS_VSYNC_END_MASK)
#define SUBSAM_SS_VSYNC_POL_MASK                 (0x80000000U)
#define SUBSAM_SS_VSYNC_POL_SHIFT                (31U)
/*! @} */

/*! @name SS_DE_ULC -  */
/*! @{ */
#define SUBSAM_SS_DE_ULC_ULC_X_MASK              (0x1FFFU)
#define SUBSAM_SS_DE_ULC_ULC_X_SHIFT             (0U)
#define SUBSAM_SS_DE_ULC_ULC_X(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DE_ULC_ULC_X_SHIFT)) & SUBSAM_SS_DE_ULC_ULC_X_MASK)
#define SUBSAM_SS_DE_ULC_ULC_Y_MASK              (0x1FFF0000U)
#define SUBSAM_SS_DE_ULC_ULC_Y_SHIFT             (16U)
#define SUBSAM_SS_DE_ULC_ULC_Y(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DE_ULC_ULC_Y_SHIFT)) & SUBSAM_SS_DE_ULC_ULC_Y_MASK)
#define SUBSAM_SS_DE_ULC_POL_MASK                (0x80000000U)
#define SUBSAM_SS_DE_ULC_POL_SHIFT               (31U)
/*! @} */

/*! @name SS_DE_LRC -  */
/*! @{ */
#define SUBSAM_SS_DE_LRC_LRC_X_MASK              (0x1FFFU)
#define SUBSAM_SS_DE_LRC_LRC_X_SHIFT             (0U)
#define SUBSAM_SS_DE_LRC_LRC_X(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DE_LRC_LRC_X_SHIFT)) & SUBSAM_SS_DE_LRC_LRC_X_MASK)
#define SUBSAM_SS_DE_LRC_LRC_Y_MASK              (0x1FFF0000U)
#define SUBSAM_SS_DE_LRC_LRC_Y_SHIFT             (16U)
#define SUBSAM_SS_DE_LRC_LRC_Y(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_DE_LRC_LRC_Y_SHIFT)) & SUBSAM_SS_DE_LRC_LRC_Y_MASK)
/*! @} */

/*! @name SS_MODE -  */
/*! @{ */
#define SUBSAM_SS_MODE_PIPE_MODE_MASK            (0x3U)
#define SUBSAM_SS_MODE_PIPE_MODE_SHIFT           (0U)
#define SUBSAM_SS_MODE_PIPE_MODE(x)              (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_PIPE_MODE_SHIFT)) & SUBSAM_SS_MODE_PIPE_MODE_MASK)
#define SUBSAM_SS_MODE_COMP_SEL0_OUT_MASK        (0x300U)
#define SUBSAM_SS_MODE_COMP_SEL0_OUT_SHIFT       (8U)
#define SUBSAM_SS_MODE_COMP_SEL0_OUT(x)          (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL0_OUT_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL0_OUT_MASK)
#define SUBSAM_SS_MODE_COMP_SEL1_OUT_MASK        (0xC00U)
#define SUBSAM_SS_MODE_COMP_SEL1_OUT_SHIFT       (10U)
#define SUBSAM_SS_MODE_COMP_SEL1_OUT(x)          (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL1_OUT_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL1_OUT_MASK)
#define SUBSAM_SS_MODE_COMP_SEL2_OUT_MASK        (0x3000U)
#define SUBSAM_SS_MODE_COMP_SEL2_OUT_SHIFT       (12U)
#define SUBSAM_SS_MODE_COMP_SEL2_OUT(x)          (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL2_OUT_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL2_OUT_MASK)
#define SUBSAM_SS_MODE_COMP_SEL0_IN_MASK         (0x30000U)
#define SUBSAM_SS_MODE_COMP_SEL0_IN_SHIFT        (16U)
#define SUBSAM_SS_MODE_COMP_SEL0_IN(x)           (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL0_IN_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL0_IN_MASK)
#define SUBSAM_SS_MODE_COMP_SEL1_IN_MASK         (0xC0000U)
#define SUBSAM_SS_MODE_COMP_SEL1_IN_SHIFT        (18U)
#define SUBSAM_SS_MODE_COMP_SEL1_IN(x)           (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL1_IN_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL1_IN_MASK)
#define SUBSAM_SS_MODE_COMP_SEL2_IN_MASK         (0x300000U)
#define SUBSAM_SS_MODE_COMP_SEL2_IN_SHIFT        (20U)
#define SUBSAM_SS_MODE_COMP_SEL2_IN(x)           (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_MODE_COMP_SEL2_IN_SHIFT)) & SUBSAM_SS_MODE_COMP_SEL2_IN_MASK)
/*! @} */

/*! @name SS_COEFF -  */
/*! @{ */
#define SUBSAM_SS_COEFF_HORIZ_A_MASK             (0xFU)
#define SUBSAM_SS_COEFF_HORIZ_A_SHIFT            (0U)
#define SUBSAM_SS_COEFF_HORIZ_A(x)               (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_HORIZ_A_SHIFT)) & SUBSAM_SS_COEFF_HORIZ_A_MASK)
#define SUBSAM_SS_COEFF_HORIZ_B_MASK             (0xF0U)
#define SUBSAM_SS_COEFF_HORIZ_B_SHIFT            (4U)
#define SUBSAM_SS_COEFF_HORIZ_B(x)               (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_HORIZ_B_SHIFT)) & SUBSAM_SS_COEFF_HORIZ_B_MASK)
#define SUBSAM_SS_COEFF_HORIZ_C_MASK             (0xF00U)
#define SUBSAM_SS_COEFF_HORIZ_C_SHIFT            (8U)
#define SUBSAM_SS_COEFF_HORIZ_C(x)               (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_HORIZ_C_SHIFT)) & SUBSAM_SS_COEFF_HORIZ_C_MASK)
#define SUBSAM_SS_COEFF_HORIZ_NORM_MASK          (0x7000U)
#define SUBSAM_SS_COEFF_HORIZ_NORM_SHIFT         (12U)
#define SUBSAM_SS_COEFF_HORIZ_NORM(x)            (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_HORIZ_NORM_SHIFT)) & SUBSAM_SS_COEFF_HORIZ_NORM_MASK)
#define SUBSAM_SS_COEFF_VERT_A_MASK              (0xF0000U)
#define SUBSAM_SS_COEFF_VERT_A_SHIFT             (16U)
#define SUBSAM_SS_COEFF_VERT_A(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_VERT_A_SHIFT)) & SUBSAM_SS_COEFF_VERT_A_MASK)
#define SUBSAM_SS_COEFF_VERT_B_MASK              (0xF00000U)
#define SUBSAM_SS_COEFF_VERT_B_SHIFT             (20U)
#define SUBSAM_SS_COEFF_VERT_B(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_VERT_B_SHIFT)) & SUBSAM_SS_COEFF_VERT_B_MASK)
#define SUBSAM_SS_COEFF_VERT_C_MASK              (0xF000000U)
#define SUBSAM_SS_COEFF_VERT_C_SHIFT             (24U)
#define SUBSAM_SS_COEFF_VERT_C(x)                (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_VERT_C_SHIFT)) & SUBSAM_SS_COEFF_VERT_C_MASK)
#define SUBSAM_SS_COEFF_VERT_NORM_MASK           (0x70000000U)
#define SUBSAM_SS_COEFF_VERT_NORM_SHIFT          (28U)
#define SUBSAM_SS_COEFF_VERT_NORM(x)             (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_COEFF_VERT_NORM_SHIFT)) & SUBSAM_SS_COEFF_VERT_NORM_MASK)
/*! @} */

/*! @name SS_CLIP_CB -  */
/*! @{ */
#define SUBSAM_SS_CLIP_CB_MIN_MASK               (0xFFFU)
#define SUBSAM_SS_CLIP_CB_MIN_SHIFT              (0U)
#define SUBSAM_SS_CLIP_CB_MIN(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CLIP_CB_MIN_SHIFT)) & SUBSAM_SS_CLIP_CB_MIN_MASK)
#define SUBSAM_SS_CLIP_CB_MAX_MASK               (0xFFF0000U)
#define SUBSAM_SS_CLIP_CB_MAX_SHIFT              (16U)
#define SUBSAM_SS_CLIP_CB_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CLIP_CB_MAX_SHIFT)) & SUBSAM_SS_CLIP_CB_MAX_MASK)
/*! @} */

/*! @name SS_CLIP_CR -  */
/*! @{ */
#define SUBSAM_SS_CLIP_CR_MIN_MASK               (0xFFFU)
#define SUBSAM_SS_CLIP_CR_MIN_SHIFT              (0U)
#define SUBSAM_SS_CLIP_CR_MIN(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CLIP_CR_MIN_SHIFT)) & SUBSAM_SS_CLIP_CR_MIN_MASK)
#define SUBSAM_SS_CLIP_CR_MAX_MASK               (0xFFF0000U)
#define SUBSAM_SS_CLIP_CR_MAX_SHIFT              (16U)
#define SUBSAM_SS_CLIP_CR_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CLIP_CR_MAX_SHIFT)) & SUBSAM_SS_CLIP_CR_MAX_MASK)
/*! @} */

/*! @name SS_INTER_MODE -  */
/*! @{ */
#define SUBSAM_SS_INTER_MODE_INT_EN_MASK         (0x1U)
#define SUBSAM_SS_INTER_MODE_INT_EN_SHIFT        (0U)
#define SUBSAM_SS_INTER_MODE_VSYNC_SHIFT_MASK    (0x2U)
#define SUBSAM_SS_INTER_MODE_VSYNC_SHIFT_SHIFT   (1U)
/*! @} */

/*! @name SS_CHKSUM_CTRL -  */
/*! @{ */
#define SUBSAM_SS_CHKSUM_CTRL_CHKSUM_EN_MASK     (0x1U)
#define SUBSAM_SS_CHKSUM_CTRL_CHKSUM_EN_SHIFT    (0U)
#define SUBSAM_SS_CHKSUM_CTRL_NUM_FRAMES_MASK    (0xF0U)
#define SUBSAM_SS_CHKSUM_CTRL_NUM_FRAMES_SHIFT   (4U)
/*! NUM_FRAMES
 *  0b0000..Continuous mode. Output a checksum after each start trigger to end trigger process.
 *  0b0001..Accumulate the cheksum over one complete frame.
 *  0b0010..Accumulate the cheksum over two complete frames.
 *  0b0011-0b1111..Accumulate the cheksum over NUM_FRAMES complete frames.
 */
#define SUBSAM_SS_CHKSUM_CTRL_NUM_FRAMES(x)      (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_CTRL_NUM_FRAMES_SHIFT)) & SUBSAM_SS_CHKSUM_CTRL_NUM_FRAMES_MASK)
/*! @} */

/*! @name SS_CHKSUM_START -  */
/*! @{ */
#define SUBSAM_SS_CHKSUM_START_VCOUNT_START_MASK (0x1FFFU)
#define SUBSAM_SS_CHKSUM_START_VCOUNT_START_SHIFT (0U)
#define SUBSAM_SS_CHKSUM_START_VCOUNT_START(x)   (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_START_VCOUNT_START_SHIFT)) & SUBSAM_SS_CHKSUM_START_VCOUNT_START_MASK)
#define SUBSAM_SS_CHKSUM_START_HCOUNT_START_MASK (0x1FFF0000U)
#define SUBSAM_SS_CHKSUM_START_HCOUNT_START_SHIFT (16U)
#define SUBSAM_SS_CHKSUM_START_HCOUNT_START(x)   (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_START_HCOUNT_START_SHIFT)) & SUBSAM_SS_CHKSUM_START_HCOUNT_START_MASK)
/*! @} */

/*! @name SS_CHKSUM_END -  */
/*! @{ */
#define SUBSAM_SS_CHKSUM_END_VCOUNT_END_MASK     (0x1FFFU)
#define SUBSAM_SS_CHKSUM_END_VCOUNT_END_SHIFT    (0U)
#define SUBSAM_SS_CHKSUM_END_VCOUNT_END(x)       (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_END_VCOUNT_END_SHIFT)) & SUBSAM_SS_CHKSUM_END_VCOUNT_END_MASK)
#define SUBSAM_SS_CHKSUM_END_HCOUNT_END_MASK     (0x1FFF0000U)
#define SUBSAM_SS_CHKSUM_END_HCOUNT_END_SHIFT    (16U)
#define SUBSAM_SS_CHKSUM_END_HCOUNT_END(x)       (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_END_HCOUNT_END_SHIFT)) & SUBSAM_SS_CHKSUM_END_HCOUNT_END_MASK)
/*! @} */

/*! @name SS_CHKSUM_DATA_LOW -  */
/*! @{ */
#define SUBSAM_SS_CHKSUM_DATA_LOW_CHKSUM_RESULT_MASK (0xFFFFFFFFU)
#define SUBSAM_SS_CHKSUM_DATA_LOW_CHKSUM_RESULT_SHIFT (0U)
#define SUBSAM_SS_CHKSUM_DATA_LOW_CHKSUM_RESULT(x) (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_DATA_LOW_CHKSUM_RESULT_SHIFT)) & SUBSAM_SS_CHKSUM_DATA_LOW_CHKSUM_RESULT_MASK)
/*! @} */

/*! @name SS_CHKSUM_DATA_HIGH -  */
/*! @{ */
#define SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_RESULT_MASK (0x3FFU)
#define SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_RESULT_SHIFT (0U)
#define SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_RESULT(x) (((uint32_t)(((uint32_t)(x)) << SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_RESULT_SHIFT)) & SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_RESULT_MASK)
#define SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_VLD_MASK (0x80000000U)
#define SUBSAM_SS_CHKSUM_DATA_HIGH_CHKSUM_VLD_SHIFT (31U)
/*! @} */


/*!
 * @}
 */ /* end of group SUBSAM_Register_Masks */


/* SUBSAM - Peripheral instance base addresses */
/** Peripheral DCSS__SUBSAM base pointer */
#define DCSS__SUBSAM_BASE_PTR                    ((SUBSAM_MemMapPtr)0x32E1B000u)
/** Array initializer of SUBSAM peripheral base pointers */
#define SUBSAM_BASE_PTRS                         { DCSS__SUBSAM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SUBSAM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SUBSAM_Register_Accessor_Macros SUBSAM - Register accessor macros
 * @{
 */


/* SUBSAM - Register instance definitions */
/* DCSS__SUBSAM */
#define DCSS__SUBSAM_SS_SYS_CTRL                 SUBSAM_SS_SYS_CTRL_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_SYS_CTRL_SET             SUBSAM_SS_SYS_CTRL_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_SYS_CTRL_CLR             SUBSAM_SS_SYS_CTRL_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_SYS_CTRL_TOG             SUBSAM_SS_SYS_CTRL_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DISPLAY                  SUBSAM_SS_DISPLAY_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DISPLAY_SET              SUBSAM_SS_DISPLAY_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DISPLAY_CLR              SUBSAM_SS_DISPLAY_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DISPLAY_TOG              SUBSAM_SS_DISPLAY_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_HSYNC                    SUBSAM_SS_HSYNC_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_HSYNC_SET                SUBSAM_SS_HSYNC_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_HSYNC_CLR                SUBSAM_SS_HSYNC_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_HSYNC_TOG                SUBSAM_SS_HSYNC_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_VSYNC                    SUBSAM_SS_VSYNC_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_VSYNC_SET                SUBSAM_SS_VSYNC_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_VSYNC_CLR                SUBSAM_SS_VSYNC_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_VSYNC_TOG                SUBSAM_SS_VSYNC_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_ULC                   SUBSAM_SS_DE_ULC_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_ULC_SET               SUBSAM_SS_DE_ULC_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_ULC_CLR               SUBSAM_SS_DE_ULC_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_ULC_TOG               SUBSAM_SS_DE_ULC_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_LRC                   SUBSAM_SS_DE_LRC_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_LRC_SET               SUBSAM_SS_DE_LRC_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_LRC_CLR               SUBSAM_SS_DE_LRC_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_DE_LRC_TOG               SUBSAM_SS_DE_LRC_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_MODE                     SUBSAM_SS_MODE_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_MODE_SET                 SUBSAM_SS_MODE_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_MODE_CLR                 SUBSAM_SS_MODE_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_MODE_TOG                 SUBSAM_SS_MODE_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_COEFF                    SUBSAM_SS_COEFF_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_COEFF_SET                SUBSAM_SS_COEFF_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_COEFF_CLR                SUBSAM_SS_COEFF_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_COEFF_TOG                SUBSAM_SS_COEFF_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CB                  SUBSAM_SS_CLIP_CB_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CB_SET              SUBSAM_SS_CLIP_CB_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CB_CLR              SUBSAM_SS_CLIP_CB_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CB_TOG              SUBSAM_SS_CLIP_CB_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CR                  SUBSAM_SS_CLIP_CR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CR_SET              SUBSAM_SS_CLIP_CR_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CR_CLR              SUBSAM_SS_CLIP_CR_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CLIP_CR_TOG              SUBSAM_SS_CLIP_CR_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_INTER_MODE               SUBSAM_SS_INTER_MODE_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_INTER_MODE_SET           SUBSAM_SS_INTER_MODE_SET_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_INTER_MODE_CLR           SUBSAM_SS_INTER_MODE_CLR_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_INTER_MODE_TOG           SUBSAM_SS_INTER_MODE_TOG_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CHKSUM_CTRL              SUBSAM_SS_CHKSUM_CTRL_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CHKSUM_START             SUBSAM_SS_CHKSUM_START_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CHKSUM_END               SUBSAM_SS_CHKSUM_END_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CHKSUM_DATA_LOW          SUBSAM_SS_CHKSUM_DATA_LOW_REG(DCSS__SUBSAM_BASE_PTR)
#define DCSS__SUBSAM_SS_CHKSUM_DATA_HIGH         SUBSAM_SS_CHKSUM_DATA_HIGH_REG(DCSS__SUBSAM_BASE_PTR)

/*!
 * @}
 */ /* end of group SUBSAM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SUBSAM_Peripheral */


/* ----------------------------------------------------------------------------
   -- TMU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Peripheral TMU
 * @{
 */

/** TMU - Peripheral register structure */
typedef struct TMU_MemMap {
  uint32_t TMR;                                    /**< TMU Mode register, offset: 0x0 */
  uint32_t TSR;                                    /**< TMU Status register, offset: 0x4 */
  uint32_t TMTMIR;                                 /**< TMU Monitor Temperature Measurement Interval register, offset: 0x8 */
  uint8_t RESERVED_0[20];
  uint32_t TIER;                                   /**< TMU Interrupt Enable register, offset: 0x20 */
  uint32_t TIDR;                                   /**< TMU Interrupt Detect register, offset: 0x24 */
  uint32_t TISCR;                                  /**< TMU Interrupt Site Capture register, offset: 0x28 */
  uint32_t TICSCR;                                 /**< TMU Interrupt Critical Site Capture register, offset: 0x2C */
  uint8_t RESERVED_1[16];
  uint32_t TMHTCRH;                                /**< TMU Monitor High Temperature Capture register, offset: 0x40 */
  uint32_t TMHTCRL;                                /**< TMU Monitor Low Temperature Capture register, offset: 0x44 */
  uint8_t RESERVED_2[8];
  uint32_t TMHTITR;                                /**< TMU Monitor High Temperature Immediate Threshold register, offset: 0x50 */
  uint32_t TMHTATR;                                /**< TMU Monitor High Temperature Average threshold register, offset: 0x54 */
  uint32_t TMHTACTR;                               /**< TMU Monitor High Temperature Average Critical Threshold register, offset: 0x58 */
  uint8_t RESERVED_3[36];
  uint32_t TTCFGR;                                 /**< TMU Temperature Configuration register, offset: 0x80 */
  uint32_t TSCFGR;                                 /**< TMU Sensor Configuration register, offset: 0x84 */
  uint8_t RESERVED_4[120];
  struct {                                         /* offset: 0x100, array step: 0x10 */
    uint32_t TRITSR;                                 /**< TMU Report Immediate Temperature Site register n, array offset: 0x100, array step: 0x10 */
    uint32_t TRATSR;                                 /**< TMU Report Average Temperature Site register n, array offset: 0x104, array step: 0x10 */
    uint8_t RESERVED_0[8];
  } TRTSR[16];
  uint8_t RESERVED_5[2552];
  uint32_t IPBRR0;                                 /**< IP Block Revision register 0, offset: 0xBF8 */
  uint8_t RESERVED_6[788];
  uint32_t TTRCR[4];                               /**< TMU Temperature Range n Control register, array offset: 0xF10, array step: 0x4 */
} volatile *TMU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Accessor_Macros TMU - Register accessor macros
 * @{
 */


/* TMU - Register accessors */
#define TMU_TMR_REG(base)                        ((base)->TMR)
#define TMU_TSR_REG(base)                        ((base)->TSR)
#define TMU_TMTMIR_REG(base)                     ((base)->TMTMIR)
#define TMU_TIER_REG(base)                       ((base)->TIER)
#define TMU_TIDR_REG(base)                       ((base)->TIDR)
#define TMU_TISCR_REG(base)                      ((base)->TISCR)
#define TMU_TICSCR_REG(base)                     ((base)->TICSCR)
#define TMU_TMHTCRH_REG(base)                    ((base)->TMHTCRH)
#define TMU_TMHTCRL_REG(base)                    ((base)->TMHTCRL)
#define TMU_TMHTITR_REG(base)                    ((base)->TMHTITR)
#define TMU_TMHTATR_REG(base)                    ((base)->TMHTATR)
#define TMU_TMHTACTR_REG(base)                   ((base)->TMHTACTR)
#define TMU_TTCFGR_REG(base)                     ((base)->TTCFGR)
#define TMU_TSCFGR_REG(base)                     ((base)->TSCFGR)
#define TMU_TRITSR_REG(base,index)               ((base)->TRTSR[index].TRITSR)
#define TMU_TRATSR_REG(base,index)               ((base)->TRTSR[index].TRATSR)
#define TMU_IPBRR0_REG(base)                     ((base)->IPBRR0)
#define TMU_TTRCR_REG(base,index)                ((base)->TTRCR[index])

/*!
 * @}
 */ /* end of group TMU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TMU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Masks TMU Register Masks
 * @{
 */

/*! @name TMR - TMU Mode register */
/*! @{ */
#define TMU_TMR_MSITE_MASK                       (0xFFFFU)
#define TMU_TMR_MSITE_SHIFT                      (0U)
#define TMU_TMR_MSITE(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TMR_MSITE_SHIFT)) & TMU_TMR_MSITE_MASK)
#define TMU_TMR_ALPF_MASK                        (0xC000000U)
#define TMU_TMR_ALPF_SHIFT                       (26U)
/*! ALPF
 *  0b00..1.0
 *  0b01..0.5
 *  0b10..0.25
 *  0b11..0.125
 */
#define TMU_TMR_ALPF(x)                          (((uint32_t)(((uint32_t)(x)) << TMU_TMR_ALPF_SHIFT)) & TMU_TMR_ALPF_MASK)
#define TMU_TMR_ME_MASK                          (0x80000000U)
#define TMU_TMR_ME_SHIFT                         (31U)
/*! @} */

/*! @name TSR - TMU Status register */
/*! @{ */
#define TMU_TSR_ORH_MASK                         (0x10000000U)
#define TMU_TSR_ORH_SHIFT                        (28U)
#define TMU_TSR_ORL_MASK                         (0x20000000U)
#define TMU_TSR_ORL_SHIFT                        (29U)
#define TMU_TSR_MIE_MASK                         (0x40000000U)
#define TMU_TSR_MIE_SHIFT                        (30U)
/*! @} */

/*! @name TMTMIR - TMU Monitor Temperature Measurement Interval register */
/*! @{ */
#define TMU_TMTMIR_TMI_MASK                      (0xFU)
#define TMU_TMTMIR_TMI_SHIFT                     (0U)
#define TMU_TMTMIR_TMI(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TMTMIR_TMI_SHIFT)) & TMU_TMTMIR_TMI_MASK)
/*! @} */

/*! @name TIER - TMU Interrupt Enable register */
/*! @{ */
#define TMU_TIER_ATCTEIE_MASK                    (0x20000000U)
#define TMU_TIER_ATCTEIE_SHIFT                   (29U)
#define TMU_TIER_ATTEIE_MASK                     (0x40000000U)
#define TMU_TIER_ATTEIE_SHIFT                    (30U)
#define TMU_TIER_ITTEIE_MASK                     (0x80000000U)
#define TMU_TIER_ITTEIE_SHIFT                    (31U)
/*! @} */

/*! @name TIDR - TMU Interrupt Detect register */
/*! @{ */
#define TMU_TIDR_ATCTE_MASK                      (0x20000000U)
#define TMU_TIDR_ATCTE_SHIFT                     (29U)
#define TMU_TIDR_ATTE_MASK                       (0x40000000U)
#define TMU_TIDR_ATTE_SHIFT                      (30U)
#define TMU_TIDR_ITTE_MASK                       (0x80000000U)
#define TMU_TIDR_ITTE_SHIFT                      (31U)
/*! @} */

/*! @name TISCR - TMU Interrupt Site Capture register */
/*! @{ */
#define TMU_TISCR_ASITE_MASK                     (0xFFFFU)
#define TMU_TISCR_ASITE_SHIFT                    (0U)
#define TMU_TISCR_ASITE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TISCR_ASITE_SHIFT)) & TMU_TISCR_ASITE_MASK)
#define TMU_TISCR_ISITE_MASK                     (0xFFFF0000U)
#define TMU_TISCR_ISITE_SHIFT                    (16U)
#define TMU_TISCR_ISITE(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TISCR_ISITE_SHIFT)) & TMU_TISCR_ISITE_MASK)
/*! @} */

/*! @name TICSCR - TMU Interrupt Critical Site Capture register */
/*! @{ */
#define TMU_TICSCR_CASITE_MASK                   (0xFFFFU)
#define TMU_TICSCR_CASITE_SHIFT                  (0U)
#define TMU_TICSCR_CASITE(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TICSCR_CASITE_SHIFT)) & TMU_TICSCR_CASITE_MASK)
/*! @} */

/*! @name TMHTCRH - TMU Monitor High Temperature Capture register */
/*! @{ */
#define TMU_TMHTCRH_TEMP_MASK                    (0xFFU)
#define TMU_TMHTCRH_TEMP_SHIFT                   (0U)
#define TMU_TMHTCRH_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRH_TEMP_SHIFT)) & TMU_TMHTCRH_TEMP_MASK)
#define TMU_TMHTCRH_V_MASK                       (0x80000000U)
#define TMU_TMHTCRH_V_SHIFT                      (31U)
/*! @} */

/*! @name TMHTCRL - TMU Monitor Low Temperature Capture register */
/*! @{ */
#define TMU_TMHTCRL_TEMP_MASK                    (0xFFU)
#define TMU_TMHTCRL_TEMP_SHIFT                   (0U)
#define TMU_TMHTCRL_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTCRL_TEMP_SHIFT)) & TMU_TMHTCRL_TEMP_MASK)
#define TMU_TMHTCRL_V_MASK                       (0x80000000U)
#define TMU_TMHTCRL_V_SHIFT                      (31U)
/*! @} */

/*! @name TMHTITR - TMU Monitor High Temperature Immediate Threshold register */
/*! @{ */
#define TMU_TMHTITR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTITR_TEMP_SHIFT                   (0U)
#define TMU_TMHTITR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTITR_TEMP_SHIFT)) & TMU_TMHTITR_TEMP_MASK)
#define TMU_TMHTITR_EN_MASK                      (0x80000000U)
#define TMU_TMHTITR_EN_SHIFT                     (31U)
/*! @} */

/*! @name TMHTATR - TMU Monitor High Temperature Average threshold register */
/*! @{ */
#define TMU_TMHTATR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTATR_TEMP_SHIFT                   (0U)
#define TMU_TMHTATR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTATR_TEMP_SHIFT)) & TMU_TMHTATR_TEMP_MASK)
#define TMU_TMHTATR_EN_MASK                      (0x80000000U)
#define TMU_TMHTATR_EN_SHIFT                     (31U)
/*! @} */

/*! @name TMHTACTR - TMU Monitor High Temperature Average Critical Threshold register */
/*! @{ */
#define TMU_TMHTACTR_TEMP_MASK                   (0xFFU)
#define TMU_TMHTACTR_TEMP_SHIFT                  (0U)
#define TMU_TMHTACTR_TEMP(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TMHTACTR_TEMP_SHIFT)) & TMU_TMHTACTR_TEMP_MASK)
#define TMU_TMHTACTR_EN_MASK                     (0x80000000U)
#define TMU_TMHTACTR_EN_SHIFT                    (31U)
/*! @} */

/*! @name TTCFGR - TMU Temperature Configuration register */
/*! @{ */
#define TMU_TTCFGR_DATA_MASK                     (0xFFFFFFFFU)
#define TMU_TTCFGR_DATA_SHIFT                    (0U)
#define TMU_TTCFGR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TTCFGR_DATA_SHIFT)) & TMU_TTCFGR_DATA_MASK)
/*! @} */

/*! @name TSCFGR - TMU Sensor Configuration register */
/*! @{ */
#define TMU_TSCFGR_DATA_MASK                     (0xFFFFFFFFU)
#define TMU_TSCFGR_DATA_SHIFT                    (0U)
#define TMU_TSCFGR_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TSCFGR_DATA_SHIFT)) & TMU_TSCFGR_DATA_MASK)
/*! @} */

/*! @name TRITSR - TMU Report Immediate Temperature Site register n */
/*! @{ */
#define TMU_TRITSR_TEMP_MASK                     (0xFFU)
#define TMU_TRITSR_TEMP_SHIFT                    (0U)
#define TMU_TRITSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRITSR_TEMP_SHIFT)) & TMU_TRITSR_TEMP_MASK)
#define TMU_TRITSR_V_MASK                        (0x80000000U)
#define TMU_TRITSR_V_SHIFT                       (31U)
/*! @} */

/* The count of TMU_TRITSR */
#define TMU_TRITSR_COUNT                         (16U)

/*! @name TRATSR - TMU Report Average Temperature Site register n */
/*! @{ */
#define TMU_TRATSR_TEMP_MASK                     (0xFFU)
#define TMU_TRATSR_TEMP_SHIFT                    (0U)
#define TMU_TRATSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRATSR_TEMP_SHIFT)) & TMU_TRATSR_TEMP_MASK)
#define TMU_TRATSR_V_MASK                        (0x80000000U)
#define TMU_TRATSR_V_SHIFT                       (31U)
/*! @} */

/* The count of TMU_TRATSR */
#define TMU_TRATSR_COUNT                         (16U)

/*! @name IPBRR0 - IP Block Revision register 0 */
/*! @{ */
#define TMU_IPBRR0_IP_MN_MASK                    (0xFFU)
#define TMU_IPBRR0_IP_MN_SHIFT                   (0U)
#define TMU_IPBRR0_IP_MN(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_MN_SHIFT)) & TMU_IPBRR0_IP_MN_MASK)
#define TMU_IPBRR0_IP_MJ_MASK                    (0xFF00U)
#define TMU_IPBRR0_IP_MJ_SHIFT                   (8U)
#define TMU_IPBRR0_IP_MJ(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_MJ_SHIFT)) & TMU_IPBRR0_IP_MJ_MASK)
#define TMU_IPBRR0_IP_ID_MASK                    (0xFFFF0000U)
#define TMU_IPBRR0_IP_ID_SHIFT                   (16U)
#define TMU_IPBRR0_IP_ID(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_IPBRR0_IP_ID_SHIFT)) & TMU_IPBRR0_IP_ID_MASK)
/*! @} */

/*! @name TTRCR - TMU Temperature Range n Control register */
/*! @{ */
#define TMU_TTRCR_TEMP_MASK                      (0xFFU)
#define TMU_TTRCR_TEMP_SHIFT                     (0U)
#define TMU_TTRCR_TEMP(x)                        (((uint32_t)(((uint32_t)(x)) << TMU_TTRCR_TEMP_SHIFT)) & TMU_TTRCR_TEMP_MASK)
#define TMU_TTRCR_CAL_PTS_MASK                   (0xF0000U)
#define TMU_TTRCR_CAL_PTS_SHIFT                  (16U)
#define TMU_TTRCR_CAL_PTS(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TTRCR_CAL_PTS_SHIFT)) & TMU_TTRCR_CAL_PTS_MASK)
/*! @} */

/* The count of TMU_TTRCR */
#define TMU_TTRCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group TMU_Register_Masks */


/* TMU - Peripheral instance base addresses */
/** Peripheral TMU base pointer */
#define TMU_BASE_PTR                             ((TMU_MemMapPtr)0x30260000u)
/** Array initializer of TMU peripheral base pointers */
#define TMU_BASE_PTRS                            { TMU_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- TMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Accessor_Macros TMU - Register accessor macros
 * @{
 */


/* TMU - Register instance definitions */
/* TMU */
#define TMU_TMR                                  TMU_TMR_REG(TMU_BASE_PTR)
#define TMU_TSR                                  TMU_TSR_REG(TMU_BASE_PTR)
#define TMU_TMTMIR                               TMU_TMTMIR_REG(TMU_BASE_PTR)
#define TMU_TIER                                 TMU_TIER_REG(TMU_BASE_PTR)
#define TMU_TIDR                                 TMU_TIDR_REG(TMU_BASE_PTR)
#define TMU_TISCR                                TMU_TISCR_REG(TMU_BASE_PTR)
#define TMU_TICSCR                               TMU_TICSCR_REG(TMU_BASE_PTR)
#define TMU_TMHTCRH                              TMU_TMHTCRH_REG(TMU_BASE_PTR)
#define TMU_TMHTCRL                              TMU_TMHTCRL_REG(TMU_BASE_PTR)
#define TMU_TMHTITR                              TMU_TMHTITR_REG(TMU_BASE_PTR)
#define TMU_TMHTATR                              TMU_TMHTATR_REG(TMU_BASE_PTR)
#define TMU_TMHTACTR                             TMU_TMHTACTR_REG(TMU_BASE_PTR)
#define TMU_TTCFGR                               TMU_TTCFGR_REG(TMU_BASE_PTR)
#define TMU_TSCFGR                               TMU_TSCFGR_REG(TMU_BASE_PTR)
#define TMU_TRITSR0                              TMU_TRITSR_REG(TMU_BASE_PTR,0)
#define TMU_TRATSR0                              TMU_TRATSR_REG(TMU_BASE_PTR,0)
#define TMU_TRITSR1                              TMU_TRITSR_REG(TMU_BASE_PTR,1)
#define TMU_TRATSR1                              TMU_TRATSR_REG(TMU_BASE_PTR,1)
#define TMU_TRITSR2                              TMU_TRITSR_REG(TMU_BASE_PTR,2)
#define TMU_TRATSR2                              TMU_TRATSR_REG(TMU_BASE_PTR,2)
#define TMU_TRITSR3                              TMU_TRITSR_REG(TMU_BASE_PTR,3)
#define TMU_TRATSR3                              TMU_TRATSR_REG(TMU_BASE_PTR,3)
#define TMU_TRITSR4                              TMU_TRITSR_REG(TMU_BASE_PTR,4)
#define TMU_TRATSR4                              TMU_TRATSR_REG(TMU_BASE_PTR,4)
#define TMU_TRITSR5                              TMU_TRITSR_REG(TMU_BASE_PTR,5)
#define TMU_TRATSR5                              TMU_TRATSR_REG(TMU_BASE_PTR,5)
#define TMU_TRITSR6                              TMU_TRITSR_REG(TMU_BASE_PTR,6)
#define TMU_TRATSR6                              TMU_TRATSR_REG(TMU_BASE_PTR,6)
#define TMU_TRITSR7                              TMU_TRITSR_REG(TMU_BASE_PTR,7)
#define TMU_TRATSR7                              TMU_TRATSR_REG(TMU_BASE_PTR,7)
#define TMU_TRITSR8                              TMU_TRITSR_REG(TMU_BASE_PTR,8)
#define TMU_TRATSR8                              TMU_TRATSR_REG(TMU_BASE_PTR,8)
#define TMU_TRITSR9                              TMU_TRITSR_REG(TMU_BASE_PTR,9)
#define TMU_TRATSR9                              TMU_TRATSR_REG(TMU_BASE_PTR,9)
#define TMU_TRITSR10                             TMU_TRITSR_REG(TMU_BASE_PTR,10)
#define TMU_TRATSR10                             TMU_TRATSR_REG(TMU_BASE_PTR,10)
#define TMU_TRITSR11                             TMU_TRITSR_REG(TMU_BASE_PTR,11)
#define TMU_TRATSR11                             TMU_TRATSR_REG(TMU_BASE_PTR,11)
#define TMU_TRITSR12                             TMU_TRITSR_REG(TMU_BASE_PTR,12)
#define TMU_TRATSR12                             TMU_TRATSR_REG(TMU_BASE_PTR,12)
#define TMU_TRITSR13                             TMU_TRITSR_REG(TMU_BASE_PTR,13)
#define TMU_TRATSR13                             TMU_TRATSR_REG(TMU_BASE_PTR,13)
#define TMU_TRITSR14                             TMU_TRITSR_REG(TMU_BASE_PTR,14)
#define TMU_TRATSR14                             TMU_TRATSR_REG(TMU_BASE_PTR,14)
#define TMU_TRITSR15                             TMU_TRITSR_REG(TMU_BASE_PTR,15)
#define TMU_TRATSR15                             TMU_TRATSR_REG(TMU_BASE_PTR,15)
#define TMU_IPBRR0                               TMU_IPBRR0_REG(TMU_BASE_PTR)
#define TMU_TTR0CR                               TMU_TTRCR_REG(TMU_BASE_PTR,0)
#define TMU_TTR1CR                               TMU_TTRCR_REG(TMU_BASE_PTR,1)
#define TMU_TTR2CR                               TMU_TTRCR_REG(TMU_BASE_PTR,2)
#define TMU_TTR3CR                               TMU_TTRCR_REG(TMU_BASE_PTR,3)

/* TMU - Register array accessors */
#define TMU_TRITSR(index)                        TMU_TRITSR_REG(TMU_BASE_PTR,index)
#define TMU_TRATSR(index)                        TMU_TRATSR_REG(TMU_BASE_PTR,index)
#define TMU_TTRCR(index)                         TMU_TTRCR_REG(TMU_BASE_PTR,index)

/*!
 * @}
 */ /* end of group TMU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TMU_Peripheral */


/* ----------------------------------------------------------------------------
   -- UART
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Peripheral UART
 * @{
 */

/** UART - Peripheral register structure */
typedef struct UART_MemMap {
  uint32_t URXD;                                   /**< UART Receiver Register, offset: 0x0 */
  uint8_t RESERVED_0[60];
  uint32_t UTXD;                                   /**< UART Transmitter Register, offset: 0x40 */
  uint8_t RESERVED_1[60];
  uint32_t UCR1;                                   /**< UART Control Register 1, offset: 0x80 */
  uint32_t UCR2;                                   /**< UART Control Register 2, offset: 0x84 */
  uint32_t UCR3;                                   /**< UART Control Register 3, offset: 0x88 */
  uint32_t UCR4;                                   /**< UART Control Register 4, offset: 0x8C */
  uint32_t UFCR;                                   /**< UART FIFO Control Register, offset: 0x90 */
  uint32_t USR1;                                   /**< UART Status Register 1, offset: 0x94 */
  uint32_t USR2;                                   /**< UART Status Register 2, offset: 0x98 */
  uint32_t UESC;                                   /**< UART Escape Character Register, offset: 0x9C */
  uint32_t UTIM;                                   /**< UART Escape Timer Register, offset: 0xA0 */
  uint32_t UBIR;                                   /**< UART BRM Incremental Register, offset: 0xA4 */
  uint32_t UBMR;                                   /**< UART BRM Modulator Register, offset: 0xA8 */
  uint32_t UBRC;                                   /**< UART Baud Rate Count Register, offset: 0xAC */
  uint32_t ONEMS;                                  /**< UART One Millisecond Register, offset: 0xB0 */
  uint32_t UTS;                                    /**< UART Test Register, offset: 0xB4 */
  uint32_t UMCR;                                   /**< UART RS-485 Mode Control Register, offset: 0xB8 */
} volatile *UART_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- UART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */


/* UART - Register accessors */
#define UART_URXD_REG(base)                      ((base)->URXD)
#define UART_UTXD_REG(base)                      ((base)->UTXD)
#define UART_UCR1_REG(base)                      ((base)->UCR1)
#define UART_UCR2_REG(base)                      ((base)->UCR2)
#define UART_UCR3_REG(base)                      ((base)->UCR3)
#define UART_UCR4_REG(base)                      ((base)->UCR4)
#define UART_UFCR_REG(base)                      ((base)->UFCR)
#define UART_USR1_REG(base)                      ((base)->USR1)
#define UART_USR2_REG(base)                      ((base)->USR2)
#define UART_UESC_REG(base)                      ((base)->UESC)
#define UART_UTIM_REG(base)                      ((base)->UTIM)
#define UART_UBIR_REG(base)                      ((base)->UBIR)
#define UART_UBMR_REG(base)                      ((base)->UBMR)
#define UART_UBRC_REG(base)                      ((base)->UBRC)
#define UART_ONEMS_REG(base)                     ((base)->ONEMS)
#define UART_UTS_REG(base)                       ((base)->UTS)
#define UART_UMCR_REG(base)                      ((base)->UMCR)

/*!
 * @}
 */ /* end of group UART_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- UART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Masks UART Register Masks
 * @{
 */

/*! @name URXD - UART Receiver Register */
/*! @{ */
#define UART_URXD_RX_DATA_MASK                   (0xFFU)
#define UART_URXD_RX_DATA_SHIFT                  (0U)
#define UART_URXD_RX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_URXD_RX_DATA_SHIFT)) & UART_URXD_RX_DATA_MASK)
#define UART_URXD_PRERR_MASK                     (0x400U)
#define UART_URXD_PRERR_SHIFT                    (10U)
#define UART_URXD_BRK_MASK                       (0x800U)
#define UART_URXD_BRK_SHIFT                      (11U)
#define UART_URXD_FRMERR_MASK                    (0x1000U)
#define UART_URXD_FRMERR_SHIFT                   (12U)
#define UART_URXD_OVRRUN_MASK                    (0x2000U)
#define UART_URXD_OVRRUN_SHIFT                   (13U)
#define UART_URXD_ERR_MASK                       (0x4000U)
#define UART_URXD_ERR_SHIFT                      (14U)
#define UART_URXD_CHARRDY_MASK                   (0x8000U)
#define UART_URXD_CHARRDY_SHIFT                  (15U)
/*! @} */

/*! @name UTXD - UART Transmitter Register */
/*! @{ */
#define UART_UTXD_TX_DATA_MASK                   (0xFFU)
#define UART_UTXD_TX_DATA_SHIFT                  (0U)
#define UART_UTXD_TX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UTXD_TX_DATA_SHIFT)) & UART_UTXD_TX_DATA_MASK)
/*! @} */

/*! @name UCR1 - UART Control Register 1 */
/*! @{ */
#define UART_UCR1_UARTEN_MASK                    (0x1U)
#define UART_UCR1_UARTEN_SHIFT                   (0U)
#define UART_UCR1_DOZE_MASK                      (0x2U)
#define UART_UCR1_DOZE_SHIFT                     (1U)
#define UART_UCR1_ATDMAEN_MASK                   (0x4U)
#define UART_UCR1_ATDMAEN_SHIFT                  (2U)
#define UART_UCR1_TXDMAEN_MASK                   (0x8U)
#define UART_UCR1_TXDMAEN_SHIFT                  (3U)
#define UART_UCR1_SNDBRK_MASK                    (0x10U)
#define UART_UCR1_SNDBRK_SHIFT                   (4U)
#define UART_UCR1_RTSDEN_MASK                    (0x20U)
#define UART_UCR1_RTSDEN_SHIFT                   (5U)
#define UART_UCR1_TXMPTYEN_MASK                  (0x40U)
#define UART_UCR1_TXMPTYEN_SHIFT                 (6U)
#define UART_UCR1_IREN_MASK                      (0x80U)
#define UART_UCR1_IREN_SHIFT                     (7U)
#define UART_UCR1_RXDMAEN_MASK                   (0x100U)
#define UART_UCR1_RXDMAEN_SHIFT                  (8U)
#define UART_UCR1_RRDYEN_MASK                    (0x200U)
#define UART_UCR1_RRDYEN_SHIFT                   (9U)
#define UART_UCR1_ICD_MASK                       (0xC00U)
#define UART_UCR1_ICD_SHIFT                      (10U)
/*! ICD
 *  0b00..Idle for more than 4 frames
 *  0b01..Idle for more than 8 frames
 *  0b10..Idle for more than 16 frames
 *  0b11..Idle for more than 32 frames
 */
#define UART_UCR1_ICD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ICD_SHIFT)) & UART_UCR1_ICD_MASK)
#define UART_UCR1_IDEN_MASK                      (0x1000U)
#define UART_UCR1_IDEN_SHIFT                     (12U)
#define UART_UCR1_TRDYEN_MASK                    (0x2000U)
#define UART_UCR1_TRDYEN_SHIFT                   (13U)
#define UART_UCR1_ADBR_MASK                      (0x4000U)
#define UART_UCR1_ADBR_SHIFT                     (14U)
#define UART_UCR1_ADEN_MASK                      (0x8000U)
#define UART_UCR1_ADEN_SHIFT                     (15U)
/*! @} */

/*! @name UCR2 - UART Control Register 2 */
/*! @{ */
#define UART_UCR2_SRST_MASK                      (0x1U)
#define UART_UCR2_SRST_SHIFT                     (0U)
#define UART_UCR2_RXEN_MASK                      (0x2U)
#define UART_UCR2_RXEN_SHIFT                     (1U)
#define UART_UCR2_TXEN_MASK                      (0x4U)
#define UART_UCR2_TXEN_SHIFT                     (2U)
#define UART_UCR2_ATEN_MASK                      (0x8U)
#define UART_UCR2_ATEN_SHIFT                     (3U)
#define UART_UCR2_RTSEN_MASK                     (0x10U)
#define UART_UCR2_RTSEN_SHIFT                    (4U)
#define UART_UCR2_WS_MASK                        (0x20U)
#define UART_UCR2_WS_SHIFT                       (5U)
#define UART_UCR2_STPB_MASK                      (0x40U)
#define UART_UCR2_STPB_SHIFT                     (6U)
#define UART_UCR2_PROE_MASK                      (0x80U)
#define UART_UCR2_PROE_SHIFT                     (7U)
#define UART_UCR2_PREN_MASK                      (0x100U)
#define UART_UCR2_PREN_SHIFT                     (8U)
#define UART_UCR2_RTEC_MASK                      (0x600U)
#define UART_UCR2_RTEC_SHIFT                     (9U)
/*! RTEC
 *  0b00..Trigger interrupt on a rising edge
 *  0b01..Trigger interrupt on a falling edge
 *  0b1x..Trigger interrupt on any edge
 */
#define UART_UCR2_RTEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_RTEC_SHIFT)) & UART_UCR2_RTEC_MASK)
#define UART_UCR2_ESCEN_MASK                     (0x800U)
#define UART_UCR2_ESCEN_SHIFT                    (11U)
#define UART_UCR2_CTS_MASK                       (0x1000U)
#define UART_UCR2_CTS_SHIFT                      (12U)
#define UART_UCR2_CTSC_MASK                      (0x2000U)
#define UART_UCR2_CTSC_SHIFT                     (13U)
#define UART_UCR2_IRTS_MASK                      (0x4000U)
#define UART_UCR2_IRTS_SHIFT                     (14U)
#define UART_UCR2_ESCI_MASK                      (0x8000U)
#define UART_UCR2_ESCI_SHIFT                     (15U)
/*! @} */

/*! @name UCR3 - UART Control Register 3 */
/*! @{ */
#define UART_UCR3_ACIEN_MASK                     (0x1U)
#define UART_UCR3_ACIEN_SHIFT                    (0U)
#define UART_UCR3_INVT_MASK                      (0x2U)
#define UART_UCR3_INVT_SHIFT                     (1U)
#define UART_UCR3_RXDMUXSEL_MASK                 (0x4U)
#define UART_UCR3_RXDMUXSEL_SHIFT                (2U)
#define UART_UCR3_DTRDEN_MASK                    (0x8U)
#define UART_UCR3_DTRDEN_SHIFT                   (3U)
#define UART_UCR3_AWAKEN_MASK                    (0x10U)
#define UART_UCR3_AWAKEN_SHIFT                   (4U)
#define UART_UCR3_AIRINTEN_MASK                  (0x20U)
#define UART_UCR3_AIRINTEN_SHIFT                 (5U)
#define UART_UCR3_RXDSEN_MASK                    (0x40U)
#define UART_UCR3_RXDSEN_SHIFT                   (6U)
#define UART_UCR3_ADNIMP_MASK                    (0x80U)
#define UART_UCR3_ADNIMP_SHIFT                   (7U)
#define UART_UCR3_RI_MASK                        (0x100U)
#define UART_UCR3_RI_SHIFT                       (8U)
#define UART_UCR3_DCD_MASK                       (0x200U)
#define UART_UCR3_DCD_SHIFT                      (9U)
#define UART_UCR3_DSR_MASK                       (0x400U)
#define UART_UCR3_DSR_SHIFT                      (10U)
#define UART_UCR3_FRAERREN_MASK                  (0x800U)
#define UART_UCR3_FRAERREN_SHIFT                 (11U)
#define UART_UCR3_PARERREN_MASK                  (0x1000U)
#define UART_UCR3_PARERREN_SHIFT                 (12U)
#define UART_UCR3_DTREN_MASK                     (0x2000U)
#define UART_UCR3_DTREN_SHIFT                    (13U)
#define UART_UCR3_DPEC_MASK                      (0xC000U)
#define UART_UCR3_DPEC_SHIFT                     (14U)
#define UART_UCR3_DPEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DPEC_SHIFT)) & UART_UCR3_DPEC_MASK)
/*! @} */

/*! @name UCR4 - UART Control Register 4 */
/*! @{ */
#define UART_UCR4_DREN_MASK                      (0x1U)
#define UART_UCR4_DREN_SHIFT                     (0U)
#define UART_UCR4_OREN_MASK                      (0x2U)
#define UART_UCR4_OREN_SHIFT                     (1U)
#define UART_UCR4_BKEN_MASK                      (0x4U)
#define UART_UCR4_BKEN_SHIFT                     (2U)
#define UART_UCR4_TCEN_MASK                      (0x8U)
#define UART_UCR4_TCEN_SHIFT                     (3U)
#define UART_UCR4_LPBYP_MASK                     (0x10U)
#define UART_UCR4_LPBYP_SHIFT                    (4U)
#define UART_UCR4_IRSC_MASK                      (0x20U)
#define UART_UCR4_IRSC_SHIFT                     (5U)
#define UART_UCR4_IDDMAEN_MASK                   (0x40U)
#define UART_UCR4_IDDMAEN_SHIFT                  (6U)
#define UART_UCR4_WKEN_MASK                      (0x80U)
#define UART_UCR4_WKEN_SHIFT                     (7U)
#define UART_UCR4_ENIRI_MASK                     (0x100U)
#define UART_UCR4_ENIRI_SHIFT                    (8U)
#define UART_UCR4_INVR_MASK                      (0x200U)
#define UART_UCR4_INVR_SHIFT                     (9U)
#define UART_UCR4_CTSTL_MASK                     (0xFC00U)
#define UART_UCR4_CTSTL_SHIFT                    (10U)
/*! CTSTL
 *  0b000000..0 characters received
 *  0b000001..1 characters in the RxFIFO
 *  0b100000..32 characters in the RxFIFO (maximum)
 */
#define UART_UCR4_CTSTL(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR4_CTSTL_SHIFT)) & UART_UCR4_CTSTL_MASK)
/*! @} */

/*! @name UFCR - UART FIFO Control Register */
/*! @{ */
#define UART_UFCR_RXTL_MASK                      (0x3FU)
#define UART_UFCR_RXTL_SHIFT                     (0U)
/*! RXTL
 *  0b000000..0 characters received
 *  0b000001..RxFIFO has 1 character
 *  0b011111..RxFIFO has 31 characters
 *  0b100000..RxFIFO has 32 characters (maximum)
 */
#define UART_UFCR_RXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RXTL_SHIFT)) & UART_UFCR_RXTL_MASK)
#define UART_UFCR_DCEDTE_MASK                    (0x40U)
#define UART_UFCR_DCEDTE_SHIFT                   (6U)
#define UART_UFCR_RFDIV_MASK                     (0x380U)
#define UART_UFCR_RFDIV_SHIFT                    (7U)
/*! RFDIV
 *  0b000..Divide input clock by 6
 *  0b001..Divide input clock by 5
 *  0b010..Divide input clock by 4
 *  0b011..Divide input clock by 3
 *  0b100..Divide input clock by 2
 *  0b101..Divide input clock by 1
 *  0b110..Divide input clock by 7
 *  0b111..Reserved
 */
#define UART_UFCR_RFDIV(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RFDIV_SHIFT)) & UART_UFCR_RFDIV_MASK)
#define UART_UFCR_TXTL_MASK                      (0xFC00U)
#define UART_UFCR_TXTL_SHIFT                     (10U)
/*! TXTL
 *  0b000000..Reserved
 *  0b000001..Reserved
 *  0b000010..TxFIFO has 2 or fewer characters
 *  0b011111..TxFIFO has 31 or fewer characters
 *  0b100000..TxFIFO has 32 characters (maximum)
 */
#define UART_UFCR_TXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_TXTL_SHIFT)) & UART_UFCR_TXTL_MASK)
/*! @} */

/*! @name USR1 - UART Status Register 1 */
/*! @{ */
#define UART_USR1_SAD_MASK                       (0x8U)
#define UART_USR1_SAD_SHIFT                      (3U)
#define UART_USR1_AWAKE_MASK                     (0x10U)
#define UART_USR1_AWAKE_SHIFT                    (4U)
#define UART_USR1_AIRINT_MASK                    (0x20U)
#define UART_USR1_AIRINT_SHIFT                   (5U)
#define UART_USR1_RXDS_MASK                      (0x40U)
#define UART_USR1_RXDS_SHIFT                     (6U)
#define UART_USR1_DTRD_MASK                      (0x80U)
#define UART_USR1_DTRD_SHIFT                     (7U)
#define UART_USR1_AGTIM_MASK                     (0x100U)
#define UART_USR1_AGTIM_SHIFT                    (8U)
#define UART_USR1_RRDY_MASK                      (0x200U)
#define UART_USR1_RRDY_SHIFT                     (9U)
#define UART_USR1_FRAMERR_MASK                   (0x400U)
#define UART_USR1_FRAMERR_SHIFT                  (10U)
#define UART_USR1_ESCF_MASK                      (0x800U)
#define UART_USR1_ESCF_SHIFT                     (11U)
#define UART_USR1_RTSD_MASK                      (0x1000U)
#define UART_USR1_RTSD_SHIFT                     (12U)
#define UART_USR1_TRDY_MASK                      (0x2000U)
#define UART_USR1_TRDY_SHIFT                     (13U)
#define UART_USR1_RTSS_MASK                      (0x4000U)
#define UART_USR1_RTSS_SHIFT                     (14U)
#define UART_USR1_PARITYERR_MASK                 (0x8000U)
#define UART_USR1_PARITYERR_SHIFT                (15U)
/*! @} */

/*! @name USR2 - UART Status Register 2 */
/*! @{ */
#define UART_USR2_RDR_MASK                       (0x1U)
#define UART_USR2_RDR_SHIFT                      (0U)
#define UART_USR2_ORE_MASK                       (0x2U)
#define UART_USR2_ORE_SHIFT                      (1U)
#define UART_USR2_BRCD_MASK                      (0x4U)
#define UART_USR2_BRCD_SHIFT                     (2U)
#define UART_USR2_TXDC_MASK                      (0x8U)
#define UART_USR2_TXDC_SHIFT                     (3U)
#define UART_USR2_RTSF_MASK                      (0x10U)
#define UART_USR2_RTSF_SHIFT                     (4U)
#define UART_USR2_DCDIN_MASK                     (0x20U)
#define UART_USR2_DCDIN_SHIFT                    (5U)
#define UART_USR2_DCDDELT_MASK                   (0x40U)
#define UART_USR2_DCDDELT_SHIFT                  (6U)
#define UART_USR2_WAKE_MASK                      (0x80U)
#define UART_USR2_WAKE_SHIFT                     (7U)
#define UART_USR2_IRINT_MASK                     (0x100U)
#define UART_USR2_IRINT_SHIFT                    (8U)
#define UART_USR2_RIIN_MASK                      (0x200U)
#define UART_USR2_RIIN_SHIFT                     (9U)
#define UART_USR2_RIDELT_MASK                    (0x400U)
#define UART_USR2_RIDELT_SHIFT                   (10U)
#define UART_USR2_ACST_MASK                      (0x800U)
#define UART_USR2_ACST_SHIFT                     (11U)
#define UART_USR2_IDLE_MASK                      (0x1000U)
#define UART_USR2_IDLE_SHIFT                     (12U)
#define UART_USR2_DTRF_MASK                      (0x2000U)
#define UART_USR2_DTRF_SHIFT                     (13U)
#define UART_USR2_TXFE_MASK                      (0x4000U)
#define UART_USR2_TXFE_SHIFT                     (14U)
#define UART_USR2_ADET_MASK                      (0x8000U)
#define UART_USR2_ADET_SHIFT                     (15U)
/*! @} */

/*! @name UESC - UART Escape Character Register */
/*! @{ */
#define UART_UESC_ESC_CHAR_MASK                  (0xFFU)
#define UART_UESC_ESC_CHAR_SHIFT                 (0U)
#define UART_UESC_ESC_CHAR(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UESC_ESC_CHAR_SHIFT)) & UART_UESC_ESC_CHAR_MASK)
/*! @} */

/*! @name UTIM - UART Escape Timer Register */
/*! @{ */
#define UART_UTIM_TIM_MASK                       (0xFFFU)
#define UART_UTIM_TIM_SHIFT                      (0U)
#define UART_UTIM_TIM(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UTIM_TIM_SHIFT)) & UART_UTIM_TIM_MASK)
/*! @} */

/*! @name UBIR - UART BRM Incremental Register */
/*! @{ */
#define UART_UBIR_INC_MASK                       (0xFFFFU)
#define UART_UBIR_INC_SHIFT                      (0U)
#define UART_UBIR_INC(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBIR_INC_SHIFT)) & UART_UBIR_INC_MASK)
/*! @} */

/*! @name UBMR - UART BRM Modulator Register */
/*! @{ */
#define UART_UBMR_MOD_MASK                       (0xFFFFU)
#define UART_UBMR_MOD_SHIFT                      (0U)
#define UART_UBMR_MOD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBMR_MOD_SHIFT)) & UART_UBMR_MOD_MASK)
/*! @} */

/*! @name UBRC - UART Baud Rate Count Register */
/*! @{ */
#define UART_UBRC_BCNT_MASK                      (0xFFFFU)
#define UART_UBRC_BCNT_SHIFT                     (0U)
#define UART_UBRC_BCNT(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UBRC_BCNT_SHIFT)) & UART_UBRC_BCNT_MASK)
/*! @} */

/*! @name ONEMS - UART One Millisecond Register */
/*! @{ */
#define UART_ONEMS_ONEMS_MASK                    (0xFFFFFFU)
#define UART_ONEMS_ONEMS_SHIFT                   (0U)
#define UART_ONEMS_ONEMS(x)                      (((uint32_t)(((uint32_t)(x)) << UART_ONEMS_ONEMS_SHIFT)) & UART_ONEMS_ONEMS_MASK)
/*! @} */

/*! @name UTS - UART Test Register */
/*! @{ */
#define UART_UTS_SOFTRST_MASK                    (0x1U)
#define UART_UTS_SOFTRST_SHIFT                   (0U)
#define UART_UTS_RXFULL_MASK                     (0x8U)
#define UART_UTS_RXFULL_SHIFT                    (3U)
#define UART_UTS_TXFULL_MASK                     (0x10U)
#define UART_UTS_TXFULL_SHIFT                    (4U)
#define UART_UTS_RXEMPTY_MASK                    (0x20U)
#define UART_UTS_RXEMPTY_SHIFT                   (5U)
#define UART_UTS_TXEMPTY_MASK                    (0x40U)
#define UART_UTS_TXEMPTY_SHIFT                   (6U)
#define UART_UTS_RXDBG_MASK                      (0x200U)
#define UART_UTS_RXDBG_SHIFT                     (9U)
#define UART_UTS_LOOPIR_MASK                     (0x400U)
#define UART_UTS_LOOPIR_SHIFT                    (10U)
#define UART_UTS_DBGEN_MASK                      (0x800U)
#define UART_UTS_DBGEN_SHIFT                     (11U)
#define UART_UTS_LOOP_MASK                       (0x1000U)
#define UART_UTS_LOOP_SHIFT                      (12U)
#define UART_UTS_FRCPERR_MASK                    (0x2000U)
#define UART_UTS_FRCPERR_SHIFT                   (13U)
/*! @} */

/*! @name UMCR - UART RS-485 Mode Control Register */
/*! @{ */
#define UART_UMCR_MDEN_MASK                      (0x1U)
#define UART_UMCR_MDEN_SHIFT                     (0U)
#define UART_UMCR_SLAM_MASK                      (0x2U)
#define UART_UMCR_SLAM_SHIFT                     (1U)
#define UART_UMCR_TXB8_MASK                      (0x4U)
#define UART_UMCR_TXB8_SHIFT                     (2U)
#define UART_UMCR_SADEN_MASK                     (0x8U)
#define UART_UMCR_SADEN_SHIFT                    (3U)
#define UART_UMCR_SLADDR_MASK                    (0xFF00U)
#define UART_UMCR_SLADDR_SHIFT                   (8U)
#define UART_UMCR_SLADDR(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UMCR_SLADDR_SHIFT)) & UART_UMCR_SLADDR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group UART_Register_Masks */


/* UART - Peripheral instance base addresses */
/** Peripheral UART1 base pointer */
#define UART1_BASE_PTR                           ((UART_MemMapPtr)0x30860000u)
/** Peripheral UART2 base pointer */
#define UART2_BASE_PTR                           ((UART_MemMapPtr)0x30890000u)
/** Peripheral UART3 base pointer */
#define UART3_BASE_PTR                           ((UART_MemMapPtr)0x30880000u)
/** Peripheral UART4 base pointer */
#define UART4_BASE_PTR                           ((UART_MemMapPtr)0x30A60000u)
/** Array initializer of UART peripheral base pointers */
#define UART_BASE_PTRS                           { UART1_BASE_PTR, UART2_BASE_PTR, UART3_BASE_PTR, UART4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- UART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */


/* UART - Register instance definitions */
/* UART1 */
#define UART1_URXD                               UART_URXD_REG(UART1_BASE_PTR)
#define UART1_UTXD                               UART_UTXD_REG(UART1_BASE_PTR)
#define UART1_UCR1                               UART_UCR1_REG(UART1_BASE_PTR)
#define UART1_UCR2                               UART_UCR2_REG(UART1_BASE_PTR)
#define UART1_UCR3                               UART_UCR3_REG(UART1_BASE_PTR)
#define UART1_UCR4                               UART_UCR4_REG(UART1_BASE_PTR)
#define UART1_UFCR                               UART_UFCR_REG(UART1_BASE_PTR)
#define UART1_USR1                               UART_USR1_REG(UART1_BASE_PTR)
#define UART1_USR2                               UART_USR2_REG(UART1_BASE_PTR)
#define UART1_UESC                               UART_UESC_REG(UART1_BASE_PTR)
#define UART1_UTIM                               UART_UTIM_REG(UART1_BASE_PTR)
#define UART1_UBIR                               UART_UBIR_REG(UART1_BASE_PTR)
#define UART1_UBMR                               UART_UBMR_REG(UART1_BASE_PTR)
#define UART1_UBRC                               UART_UBRC_REG(UART1_BASE_PTR)
#define UART1_ONEMS                              UART_ONEMS_REG(UART1_BASE_PTR)
#define UART1_UTS                                UART_UTS_REG(UART1_BASE_PTR)
#define UART1_UMCR                               UART_UMCR_REG(UART1_BASE_PTR)
/* UART2 */
#define UART2_URXD                               UART_URXD_REG(UART2_BASE_PTR)
#define UART2_UTXD                               UART_UTXD_REG(UART2_BASE_PTR)
#define UART2_UCR1                               UART_UCR1_REG(UART2_BASE_PTR)
#define UART2_UCR2                               UART_UCR2_REG(UART2_BASE_PTR)
#define UART2_UCR3                               UART_UCR3_REG(UART2_BASE_PTR)
#define UART2_UCR4                               UART_UCR4_REG(UART2_BASE_PTR)
#define UART2_UFCR                               UART_UFCR_REG(UART2_BASE_PTR)
#define UART2_USR1                               UART_USR1_REG(UART2_BASE_PTR)
#define UART2_USR2                               UART_USR2_REG(UART2_BASE_PTR)
#define UART2_UESC                               UART_UESC_REG(UART2_BASE_PTR)
#define UART2_UTIM                               UART_UTIM_REG(UART2_BASE_PTR)
#define UART2_UBIR                               UART_UBIR_REG(UART2_BASE_PTR)
#define UART2_UBMR                               UART_UBMR_REG(UART2_BASE_PTR)
#define UART2_UBRC                               UART_UBRC_REG(UART2_BASE_PTR)
#define UART2_ONEMS                              UART_ONEMS_REG(UART2_BASE_PTR)
#define UART2_UTS                                UART_UTS_REG(UART2_BASE_PTR)
#define UART2_UMCR                               UART_UMCR_REG(UART2_BASE_PTR)
/* UART3 */
#define UART3_URXD                               UART_URXD_REG(UART3_BASE_PTR)
#define UART3_UTXD                               UART_UTXD_REG(UART3_BASE_PTR)
#define UART3_UCR1                               UART_UCR1_REG(UART3_BASE_PTR)
#define UART3_UCR2                               UART_UCR2_REG(UART3_BASE_PTR)
#define UART3_UCR3                               UART_UCR3_REG(UART3_BASE_PTR)
#define UART3_UCR4                               UART_UCR4_REG(UART3_BASE_PTR)
#define UART3_UFCR                               UART_UFCR_REG(UART3_BASE_PTR)
#define UART3_USR1                               UART_USR1_REG(UART3_BASE_PTR)
#define UART3_USR2                               UART_USR2_REG(UART3_BASE_PTR)
#define UART3_UESC                               UART_UESC_REG(UART3_BASE_PTR)
#define UART3_UTIM                               UART_UTIM_REG(UART3_BASE_PTR)
#define UART3_UBIR                               UART_UBIR_REG(UART3_BASE_PTR)
#define UART3_UBMR                               UART_UBMR_REG(UART3_BASE_PTR)
#define UART3_UBRC                               UART_UBRC_REG(UART3_BASE_PTR)
#define UART3_ONEMS                              UART_ONEMS_REG(UART3_BASE_PTR)
#define UART3_UTS                                UART_UTS_REG(UART3_BASE_PTR)
#define UART3_UMCR                               UART_UMCR_REG(UART3_BASE_PTR)
/* UART4 */
#define UART4_URXD                               UART_URXD_REG(UART4_BASE_PTR)
#define UART4_UTXD                               UART_UTXD_REG(UART4_BASE_PTR)
#define UART4_UCR1                               UART_UCR1_REG(UART4_BASE_PTR)
#define UART4_UCR2                               UART_UCR2_REG(UART4_BASE_PTR)
#define UART4_UCR3                               UART_UCR3_REG(UART4_BASE_PTR)
#define UART4_UCR4                               UART_UCR4_REG(UART4_BASE_PTR)
#define UART4_UFCR                               UART_UFCR_REG(UART4_BASE_PTR)
#define UART4_USR1                               UART_USR1_REG(UART4_BASE_PTR)
#define UART4_USR2                               UART_USR2_REG(UART4_BASE_PTR)
#define UART4_UESC                               UART_UESC_REG(UART4_BASE_PTR)
#define UART4_UTIM                               UART_UTIM_REG(UART4_BASE_PTR)
#define UART4_UBIR                               UART_UBIR_REG(UART4_BASE_PTR)
#define UART4_UBMR                               UART_UBMR_REG(UART4_BASE_PTR)
#define UART4_UBRC                               UART_UBRC_REG(UART4_BASE_PTR)
#define UART4_ONEMS                              UART_ONEMS_REG(UART4_BASE_PTR)
#define UART4_UTS                                UART_UTS_REG(UART4_BASE_PTR)
#define UART4_UMCR                               UART_UMCR_REG(UART4_BASE_PTR)

/*!
 * @}
 */ /* end of group UART_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group UART_Peripheral */


/* ----------------------------------------------------------------------------
   -- USDHC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Peripheral USDHC
 * @{
 */

/** USDHC - Peripheral register structure */
typedef struct USDHC_MemMap {
  uint32_t DS_ADDR;                                /**< DMA System Address, offset: 0x0 */
  uint32_t BLK_ATT;                                /**< Block Attributes, offset: 0x4 */
  uint32_t CMD_ARG;                                /**< Command Argument, offset: 0x8 */
  uint32_t CMD_XFR_TYP;                            /**< Command Transfer Type, offset: 0xC */
  uint32_t CMD_RSP0;                               /**< Command Response0, offset: 0x10 */
  uint32_t CMD_RSP1;                               /**< Command Response1, offset: 0x14 */
  uint32_t CMD_RSP2;                               /**< Command Response2, offset: 0x18 */
  uint32_t CMD_RSP3;                               /**< Command Response3, offset: 0x1C */
  uint32_t DATA_BUFF_ACC_PORT;                     /**< Data Buffer Access Port, offset: 0x20 */
  uint32_t PRES_STATE;                             /**< Present State, offset: 0x24 */
  uint32_t PROT_CTRL;                              /**< Protocol Control, offset: 0x28 */
  uint32_t SYS_CTRL;                               /**< System Control, offset: 0x2C */
  uint32_t INT_STATUS;                             /**< Interrupt Status, offset: 0x30 */
  uint32_t INT_STATUS_EN;                          /**< Interrupt Status Enable, offset: 0x34 */
  uint32_t INT_SIGNAL_EN;                          /**< Interrupt Signal Enable, offset: 0x38 */
  uint32_t AUTOCMD12_ERR_STATUS;                   /**< Auto CMD12 Error Status, offset: 0x3C */
  uint32_t HOST_CTRL_CAP;                          /**< Host Controller Capabilities, offset: 0x40 */
  uint32_t WTMK_LVL;                               /**< Watermark Level, offset: 0x44 */
  uint32_t MIX_CTRL;                               /**< Mixer Control, offset: 0x48 */
  uint8_t RESERVED_0[4];
  uint32_t FORCE_EVENT;                            /**< Force Event, offset: 0x50 */
  uint32_t ADMA_ERR_STATUS;                        /**< ADMA Error Status Register, offset: 0x54 */
  uint32_t ADMA_SYS_ADDR;                          /**< ADMA System Address, offset: 0x58 */
  uint8_t RESERVED_1[4];
  uint32_t DLL_CTRL;                               /**< DLL (Delay Line) Control, offset: 0x60 */
  uint32_t DLL_STATUS;                             /**< DLL Status, offset: 0x64 */
  uint32_t CLK_TUNE_CTRL_STATUS;                   /**< CLK Tuning Control and Status, offset: 0x68 */
  uint8_t RESERVED_2[4];
  uint32_t STROBE_DLL_CTRL;                        /**< Strobe DLL Control, offset: 0x70 */
  uint32_t STROBE_DLL_STATUS;                      /**< Strobe DLL Status, offset: 0x74 */
  uint8_t RESERVED_3[72];
  uint32_t VEND_SPEC;                              /**< Vendor Specific Register, offset: 0xC0 */
  uint32_t MMC_BOOT;                               /**< MMC Boot Register, offset: 0xC4 */
  uint32_t VEND_SPEC2;                             /**< Vendor Specific 2 Register, offset: 0xC8 */
  uint32_t TUNING_CTRL;                            /**< Tuning Control Register, offset: 0xCC */
} volatile *USDHC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register accessors */
#define USDHC_DS_ADDR_REG(base)                  ((base)->DS_ADDR)
#define USDHC_BLK_ATT_REG(base)                  ((base)->BLK_ATT)
#define USDHC_CMD_ARG_REG(base)                  ((base)->CMD_ARG)
#define USDHC_CMD_XFR_TYP_REG(base)              ((base)->CMD_XFR_TYP)
#define USDHC_CMD_RSP0_REG(base)                 ((base)->CMD_RSP0)
#define USDHC_CMD_RSP1_REG(base)                 ((base)->CMD_RSP1)
#define USDHC_CMD_RSP2_REG(base)                 ((base)->CMD_RSP2)
#define USDHC_CMD_RSP3_REG(base)                 ((base)->CMD_RSP3)
#define USDHC_DATA_BUFF_ACC_PORT_REG(base)       ((base)->DATA_BUFF_ACC_PORT)
#define USDHC_PRES_STATE_REG(base)               ((base)->PRES_STATE)
#define USDHC_PROT_CTRL_REG(base)                ((base)->PROT_CTRL)
#define USDHC_SYS_CTRL_REG(base)                 ((base)->SYS_CTRL)
#define USDHC_INT_STATUS_REG(base)               ((base)->INT_STATUS)
#define USDHC_INT_STATUS_EN_REG(base)            ((base)->INT_STATUS_EN)
#define USDHC_INT_SIGNAL_EN_REG(base)            ((base)->INT_SIGNAL_EN)
#define USDHC_AUTOCMD12_ERR_STATUS_REG(base)     ((base)->AUTOCMD12_ERR_STATUS)
#define USDHC_HOST_CTRL_CAP_REG(base)            ((base)->HOST_CTRL_CAP)
#define USDHC_WTMK_LVL_REG(base)                 ((base)->WTMK_LVL)
#define USDHC_MIX_CTRL_REG(base)                 ((base)->MIX_CTRL)
#define USDHC_FORCE_EVENT_REG(base)              ((base)->FORCE_EVENT)
#define USDHC_ADMA_ERR_STATUS_REG(base)          ((base)->ADMA_ERR_STATUS)
#define USDHC_ADMA_SYS_ADDR_REG(base)            ((base)->ADMA_SYS_ADDR)
#define USDHC_DLL_CTRL_REG(base)                 ((base)->DLL_CTRL)
#define USDHC_DLL_STATUS_REG(base)               ((base)->DLL_STATUS)
#define USDHC_CLK_TUNE_CTRL_STATUS_REG(base)     ((base)->CLK_TUNE_CTRL_STATUS)
#define USDHC_STROBE_DLL_CTRL_REG(base)          ((base)->STROBE_DLL_CTRL)
#define USDHC_STROBE_DLL_STATUS_REG(base)        ((base)->STROBE_DLL_STATUS)
#define USDHC_VEND_SPEC_REG(base)                ((base)->VEND_SPEC)
#define USDHC_MMC_BOOT_REG(base)                 ((base)->MMC_BOOT)
#define USDHC_VEND_SPEC2_REG(base)               ((base)->VEND_SPEC2)
#define USDHC_TUNING_CTRL_REG(base)              ((base)->TUNING_CTRL)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USDHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Masks USDHC Register Masks
 * @{
 */

/*! @name DS_ADDR - DMA System Address */
/*! @{ */
#define USDHC_DS_ADDR_DS_ADDR_MASK               (0xFFFFFFFCU)
#define USDHC_DS_ADDR_DS_ADDR_SHIFT              (2U)
#define USDHC_DS_ADDR_DS_ADDR(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_DS_ADDR_DS_ADDR_SHIFT)) & USDHC_DS_ADDR_DS_ADDR_MASK)
/*! @} */

/*! @name BLK_ATT - Block Attributes */
/*! @{ */
#define USDHC_BLK_ATT_BLKSIZE_MASK               (0x1FFFU)
#define USDHC_BLK_ATT_BLKSIZE_SHIFT              (0U)
/*! BLKSIZE
 *  0b0000000001000..4096 Bytes
 *  0b0001100100000..2048 Bytes
 *  0b0000011001000..512 Bytes
 *  0b0000000000100..4 Bytes
 *  0b0000000000011..3 Bytes
 *  0b0000000000010..2 Bytes
 *  0b0000000000001..1 Byte
 *  0b0000000000000..No data transfer
 */
#define USDHC_BLK_ATT_BLKSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKSIZE_SHIFT)) & USDHC_BLK_ATT_BLKSIZE_MASK)
#define USDHC_BLK_ATT_BLKCNT_MASK                (0xFFFF0000U)
#define USDHC_BLK_ATT_BLKCNT_SHIFT               (16U)
/*! BLKCNT
 *  0b0000000000000010..2 blocks
 *  0b0000000000000001..1 block
 *  0b0000000000000000..Stop Count
 */
#define USDHC_BLK_ATT_BLKCNT(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKCNT_SHIFT)) & USDHC_BLK_ATT_BLKCNT_MASK)
/*! @} */

/*! @name CMD_ARG - Command Argument */
/*! @{ */
#define USDHC_CMD_ARG_CMDARG_MASK                (0xFFFFFFFFU)
#define USDHC_CMD_ARG_CMDARG_SHIFT               (0U)
#define USDHC_CMD_ARG_CMDARG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_ARG_CMDARG_SHIFT)) & USDHC_CMD_ARG_CMDARG_MASK)
/*! @} */

/*! @name CMD_XFR_TYP - Command Transfer Type */
/*! @{ */
#define USDHC_CMD_XFR_TYP_RSPTYP_MASK            (0x30000U)
#define USDHC_CMD_XFR_TYP_RSPTYP_SHIFT           (16U)
/*! RSPTYP - Response Type Select
 *  0b00..No Response
 *  0b01..Response Length 136
 *  0b10..Response Length 48
 *  0b11..Response Length 48, check Busy after response
 */
#define USDHC_CMD_XFR_TYP_RSPTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_RSPTYP_SHIFT)) & USDHC_CMD_XFR_TYP_RSPTYP_MASK)
#define USDHC_CMD_XFR_TYP_CCCEN_MASK             (0x80000U)
#define USDHC_CMD_XFR_TYP_CCCEN_SHIFT            (19U)
#define USDHC_CMD_XFR_TYP_CICEN_MASK             (0x100000U)
#define USDHC_CMD_XFR_TYP_CICEN_SHIFT            (20U)
#define USDHC_CMD_XFR_TYP_DPSEL_MASK             (0x200000U)
#define USDHC_CMD_XFR_TYP_DPSEL_SHIFT            (21U)
#define USDHC_CMD_XFR_TYP_CMDTYP_MASK            (0xC00000U)
#define USDHC_CMD_XFR_TYP_CMDTYP_SHIFT           (22U)
/*! CMDTYP - Command Type
 *  0b11..Abort CMD12, CMD52 for writing I/O Abort in CCCR
 *  0b10..Resume CMD52 for writing Function Select in CCCR
 *  0b01..Suspend CMD52 for writing Bus Suspend in CCCR
 *  0b00..Normal Other commands
 */
#define USDHC_CMD_XFR_TYP_CMDTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDTYP_SHIFT)) & USDHC_CMD_XFR_TYP_CMDTYP_MASK)
#define USDHC_CMD_XFR_TYP_CMDINX_MASK            (0x3F000000U)
#define USDHC_CMD_XFR_TYP_CMDINX_SHIFT           (24U)
#define USDHC_CMD_XFR_TYP_CMDINX(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDINX_SHIFT)) & USDHC_CMD_XFR_TYP_CMDINX_MASK)
/*! @} */

/*! @name CMD_RSP0 - Command Response0 */
/*! @{ */
#define USDHC_CMD_RSP0_CMDRSP0_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP0_CMDRSP0_SHIFT             (0U)
#define USDHC_CMD_RSP0_CMDRSP0(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP0_CMDRSP0_SHIFT)) & USDHC_CMD_RSP0_CMDRSP0_MASK)
/*! @} */

/*! @name CMD_RSP1 - Command Response1 */
/*! @{ */
#define USDHC_CMD_RSP1_CMDRSP1_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP1_CMDRSP1_SHIFT             (0U)
#define USDHC_CMD_RSP1_CMDRSP1(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP1_CMDRSP1_SHIFT)) & USDHC_CMD_RSP1_CMDRSP1_MASK)
/*! @} */

/*! @name CMD_RSP2 - Command Response2 */
/*! @{ */
#define USDHC_CMD_RSP2_CMDRSP2_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP2_CMDRSP2_SHIFT             (0U)
#define USDHC_CMD_RSP2_CMDRSP2(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP2_CMDRSP2_SHIFT)) & USDHC_CMD_RSP2_CMDRSP2_MASK)
/*! @} */

/*! @name CMD_RSP3 - Command Response3 */
/*! @{ */
#define USDHC_CMD_RSP3_CMDRSP3_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP3_CMDRSP3_SHIFT             (0U)
#define USDHC_CMD_RSP3_CMDRSP3(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP3_CMDRSP3_SHIFT)) & USDHC_CMD_RSP3_CMDRSP3_MASK)
/*! @} */

/*! @name DATA_BUFF_ACC_PORT - Data Buffer Access Port */
/*! @{ */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK    (0xFFFFFFFFU)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT   (0U)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT)) & USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK)
/*! @} */

/*! @name PRES_STATE - Present State */
/*! @{ */
#define USDHC_PRES_STATE_CIHB_MASK               (0x1U)
#define USDHC_PRES_STATE_CIHB_SHIFT              (0U)
#define USDHC_PRES_STATE_CDIHB_MASK              (0x2U)
#define USDHC_PRES_STATE_CDIHB_SHIFT             (1U)
#define USDHC_PRES_STATE_DLA_MASK                (0x4U)
#define USDHC_PRES_STATE_DLA_SHIFT               (2U)
#define USDHC_PRES_STATE_SDSTB_MASK              (0x8U)
#define USDHC_PRES_STATE_SDSTB_SHIFT             (3U)
#define USDHC_PRES_STATE_IPGOFF_MASK             (0x10U)
#define USDHC_PRES_STATE_IPGOFF_SHIFT            (4U)
#define USDHC_PRES_STATE_HCKOFF_MASK             (0x20U)
#define USDHC_PRES_STATE_HCKOFF_SHIFT            (5U)
#define USDHC_PRES_STATE_PEROFF_MASK             (0x40U)
#define USDHC_PRES_STATE_PEROFF_SHIFT            (6U)
#define USDHC_PRES_STATE_SDOFF_MASK              (0x80U)
#define USDHC_PRES_STATE_SDOFF_SHIFT             (7U)
#define USDHC_PRES_STATE_WTA_MASK                (0x100U)
#define USDHC_PRES_STATE_WTA_SHIFT               (8U)
#define USDHC_PRES_STATE_RTA_MASK                (0x200U)
#define USDHC_PRES_STATE_RTA_SHIFT               (9U)
#define USDHC_PRES_STATE_BWEN_MASK               (0x400U)
#define USDHC_PRES_STATE_BWEN_SHIFT              (10U)
#define USDHC_PRES_STATE_BREN_MASK               (0x800U)
#define USDHC_PRES_STATE_BREN_SHIFT              (11U)
#define USDHC_PRES_STATE_RTR_MASK                (0x1000U)
#define USDHC_PRES_STATE_RTR_SHIFT               (12U)
#define USDHC_PRES_STATE_TSCD_MASK               (0x8000U)
#define USDHC_PRES_STATE_TSCD_SHIFT              (15U)
#define USDHC_PRES_STATE_CINST_MASK              (0x10000U)
#define USDHC_PRES_STATE_CINST_SHIFT             (16U)
#define USDHC_PRES_STATE_CDPL_MASK               (0x40000U)
#define USDHC_PRES_STATE_CDPL_SHIFT              (18U)
#define USDHC_PRES_STATE_WPSPL_MASK              (0x80000U)
#define USDHC_PRES_STATE_WPSPL_SHIFT             (19U)
#define USDHC_PRES_STATE_CLSL_MASK               (0x800000U)
#define USDHC_PRES_STATE_CLSL_SHIFT              (23U)
#define USDHC_PRES_STATE_DLSL_MASK               (0xFF000000U)
#define USDHC_PRES_STATE_DLSL_SHIFT              (24U)
#define USDHC_PRES_STATE_DLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLSL_SHIFT)) & USDHC_PRES_STATE_DLSL_MASK)
/*! @} */

/*! @name PROT_CTRL - Protocol Control */
/*! @{ */
#define USDHC_PROT_CTRL_LCTL_MASK                (0x1U)
#define USDHC_PROT_CTRL_LCTL_SHIFT               (0U)
#define USDHC_PROT_CTRL_DTW_MASK                 (0x6U)
#define USDHC_PROT_CTRL_DTW_SHIFT                (1U)
/*! DTW - Data Transfer Width
 *  0b10..8-bit mode
 *  0b01..4-bit mode
 *  0b00..1-bit mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_DTW(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DTW_SHIFT)) & USDHC_PROT_CTRL_DTW_MASK)
#define USDHC_PROT_CTRL_D3CD_MASK                (0x8U)
#define USDHC_PROT_CTRL_D3CD_SHIFT               (3U)
#define USDHC_PROT_CTRL_EMODE_MASK               (0x30U)
#define USDHC_PROT_CTRL_EMODE_SHIFT              (4U)
/*! EMODE - Endian Mode
 *  0b00..Big Endian Mode
 *  0b01..Half Word Big Endian Mode
 *  0b10..Little Endian Mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_EMODE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_EMODE_SHIFT)) & USDHC_PROT_CTRL_EMODE_MASK)
#define USDHC_PROT_CTRL_CDTL_MASK                (0x40U)
#define USDHC_PROT_CTRL_CDTL_SHIFT               (6U)
#define USDHC_PROT_CTRL_CDSS_MASK                (0x80U)
#define USDHC_PROT_CTRL_CDSS_SHIFT               (7U)
#define USDHC_PROT_CTRL_DMASEL_MASK              (0x300U)
#define USDHC_PROT_CTRL_DMASEL_SHIFT             (8U)
/*! DMASEL - DMA Select
 *  0b00..No DMA or Simple DMA is selected
 *  0b01..ADMA1 is selected
 *  0b10..ADMA2 is selected
 *  0b11..reserved
 */
#define USDHC_PROT_CTRL_DMASEL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DMASEL_SHIFT)) & USDHC_PROT_CTRL_DMASEL_MASK)
#define USDHC_PROT_CTRL_SABGREQ_MASK             (0x10000U)
#define USDHC_PROT_CTRL_SABGREQ_SHIFT            (16U)
#define USDHC_PROT_CTRL_CREQ_MASK                (0x20000U)
#define USDHC_PROT_CTRL_CREQ_SHIFT               (17U)
#define USDHC_PROT_CTRL_RWCTL_MASK               (0x40000U)
#define USDHC_PROT_CTRL_RWCTL_SHIFT              (18U)
#define USDHC_PROT_CTRL_IABG_MASK                (0x80000U)
#define USDHC_PROT_CTRL_IABG_SHIFT               (19U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK     (0x100000U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT    (20U)
#define USDHC_PROT_CTRL_WECINT_MASK              (0x1000000U)
#define USDHC_PROT_CTRL_WECINT_SHIFT             (24U)
#define USDHC_PROT_CTRL_WECINS_MASK              (0x2000000U)
#define USDHC_PROT_CTRL_WECINS_SHIFT             (25U)
#define USDHC_PROT_CTRL_WECRM_MASK               (0x4000000U)
#define USDHC_PROT_CTRL_WECRM_SHIFT              (26U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_MASK        (0x38000000U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT       (27U)
/*! BURST_LEN_EN - BURST length enable for INCR, INCR4 / INCR8 / INCR16, INCR4-WRAP / INCR8-WRAP / INCR16-WRAP
 *  0bxx1..Burst length is enabled for INCR
 *  0bx1x..Burst length is enabled for INCR4 / INCR8 / INCR16
 *  0b1xx..Burst length is enabled for INCR4-WRAP / INCR8-WRAP / INCR16-WRAP
 */
#define USDHC_PROT_CTRL_BURST_LEN_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT)) & USDHC_PROT_CTRL_BURST_LEN_EN_MASK)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK    (0x40000000U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT   (30U)
/*! @} */

/*! @name SYS_CTRL - System Control */
/*! @{ */
#define USDHC_SYS_CTRL_DVS_MASK                  (0xF0U)
#define USDHC_SYS_CTRL_DVS_SHIFT                 (4U)
/*! DVS - Divisor
 *  0b0000..Divide-by-1
 *  0b0001..Divide-by-2
 *  0b1110..Divide-by-15
 *  0b1111..Divide-by-16
 */
#define USDHC_SYS_CTRL_DVS(x)                    (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DVS_SHIFT)) & USDHC_SYS_CTRL_DVS_MASK)
#define USDHC_SYS_CTRL_SDCLKFS_MASK              (0xFF00U)
#define USDHC_SYS_CTRL_SDCLKFS_SHIFT             (8U)
#define USDHC_SYS_CTRL_SDCLKFS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_SDCLKFS_SHIFT)) & USDHC_SYS_CTRL_SDCLKFS_MASK)
#define USDHC_SYS_CTRL_DTOCV_MASK                (0xF0000U)
#define USDHC_SYS_CTRL_DTOCV_SHIFT               (16U)
/*! DTOCV - Data Timeout Counter Value
 *  0b1111..SDCLK x 2 29
 *  0b1110..SDCLK x 2 28
 *  0b0001..SDCLK x 2 15
 *  0b0000..SDCLK x 2 14
 */
#define USDHC_SYS_CTRL_DTOCV(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DTOCV_SHIFT)) & USDHC_SYS_CTRL_DTOCV_MASK)
#define USDHC_SYS_CTRL_IPP_RST_N_MASK            (0x800000U)
#define USDHC_SYS_CTRL_IPP_RST_N_SHIFT           (23U)
#define USDHC_SYS_CTRL_RSTA_MASK                 (0x1000000U)
#define USDHC_SYS_CTRL_RSTA_SHIFT                (24U)
#define USDHC_SYS_CTRL_RSTC_MASK                 (0x2000000U)
#define USDHC_SYS_CTRL_RSTC_SHIFT                (25U)
#define USDHC_SYS_CTRL_RSTD_MASK                 (0x4000000U)
#define USDHC_SYS_CTRL_RSTD_SHIFT                (26U)
#define USDHC_SYS_CTRL_INITA_MASK                (0x8000000U)
#define USDHC_SYS_CTRL_INITA_SHIFT               (27U)
#define USDHC_SYS_CTRL_RSTT_MASK                 (0x10000000U)
#define USDHC_SYS_CTRL_RSTT_SHIFT                (28U)
/*! @} */

/*! @name INT_STATUS - Interrupt Status */
/*! @{ */
#define USDHC_INT_STATUS_CC_MASK                 (0x1U)
#define USDHC_INT_STATUS_CC_SHIFT                (0U)
#define USDHC_INT_STATUS_TC_MASK                 (0x2U)
#define USDHC_INT_STATUS_TC_SHIFT                (1U)
#define USDHC_INT_STATUS_BGE_MASK                (0x4U)
#define USDHC_INT_STATUS_BGE_SHIFT               (2U)
#define USDHC_INT_STATUS_DINT_MASK               (0x8U)
#define USDHC_INT_STATUS_DINT_SHIFT              (3U)
#define USDHC_INT_STATUS_BWR_MASK                (0x10U)
#define USDHC_INT_STATUS_BWR_SHIFT               (4U)
#define USDHC_INT_STATUS_BRR_MASK                (0x20U)
#define USDHC_INT_STATUS_BRR_SHIFT               (5U)
#define USDHC_INT_STATUS_CINS_MASK               (0x40U)
#define USDHC_INT_STATUS_CINS_SHIFT              (6U)
#define USDHC_INT_STATUS_CRM_MASK                (0x80U)
#define USDHC_INT_STATUS_CRM_SHIFT               (7U)
#define USDHC_INT_STATUS_CINT_MASK               (0x100U)
#define USDHC_INT_STATUS_CINT_SHIFT              (8U)
#define USDHC_INT_STATUS_RTE_MASK                (0x1000U)
#define USDHC_INT_STATUS_RTE_SHIFT               (12U)
#define USDHC_INT_STATUS_TP_MASK                 (0x4000U)
#define USDHC_INT_STATUS_TP_SHIFT                (14U)
#define USDHC_INT_STATUS_CTOE_MASK               (0x10000U)
#define USDHC_INT_STATUS_CTOE_SHIFT              (16U)
#define USDHC_INT_STATUS_CCE_MASK                (0x20000U)
#define USDHC_INT_STATUS_CCE_SHIFT               (17U)
#define USDHC_INT_STATUS_CEBE_MASK               (0x40000U)
#define USDHC_INT_STATUS_CEBE_SHIFT              (18U)
#define USDHC_INT_STATUS_CIE_MASK                (0x80000U)
#define USDHC_INT_STATUS_CIE_SHIFT               (19U)
#define USDHC_INT_STATUS_DTOE_MASK               (0x100000U)
#define USDHC_INT_STATUS_DTOE_SHIFT              (20U)
#define USDHC_INT_STATUS_DCE_MASK                (0x200000U)
#define USDHC_INT_STATUS_DCE_SHIFT               (21U)
#define USDHC_INT_STATUS_DEBE_MASK               (0x400000U)
#define USDHC_INT_STATUS_DEBE_SHIFT              (22U)
#define USDHC_INT_STATUS_AC12E_MASK              (0x1000000U)
#define USDHC_INT_STATUS_AC12E_SHIFT             (24U)
#define USDHC_INT_STATUS_TNE_MASK                (0x4000000U)
#define USDHC_INT_STATUS_TNE_SHIFT               (26U)
#define USDHC_INT_STATUS_DMAE_MASK               (0x10000000U)
#define USDHC_INT_STATUS_DMAE_SHIFT              (28U)
/*! @} */

/*! @name INT_STATUS_EN - Interrupt Status Enable */
/*! @{ */
#define USDHC_INT_STATUS_EN_CCSEN_MASK           (0x1U)
#define USDHC_INT_STATUS_EN_CCSEN_SHIFT          (0U)
#define USDHC_INT_STATUS_EN_TCSEN_MASK           (0x2U)
#define USDHC_INT_STATUS_EN_TCSEN_SHIFT          (1U)
#define USDHC_INT_STATUS_EN_BGESEN_MASK          (0x4U)
#define USDHC_INT_STATUS_EN_BGESEN_SHIFT         (2U)
#define USDHC_INT_STATUS_EN_DINTSEN_MASK         (0x8U)
#define USDHC_INT_STATUS_EN_DINTSEN_SHIFT        (3U)
#define USDHC_INT_STATUS_EN_BWRSEN_MASK          (0x10U)
#define USDHC_INT_STATUS_EN_BWRSEN_SHIFT         (4U)
#define USDHC_INT_STATUS_EN_BRRSEN_MASK          (0x20U)
#define USDHC_INT_STATUS_EN_BRRSEN_SHIFT         (5U)
#define USDHC_INT_STATUS_EN_CINSSEN_MASK         (0x40U)
#define USDHC_INT_STATUS_EN_CINSSEN_SHIFT        (6U)
#define USDHC_INT_STATUS_EN_CRMSEN_MASK          (0x80U)
#define USDHC_INT_STATUS_EN_CRMSEN_SHIFT         (7U)
#define USDHC_INT_STATUS_EN_CINTSEN_MASK         (0x100U)
#define USDHC_INT_STATUS_EN_CINTSEN_SHIFT        (8U)
#define USDHC_INT_STATUS_EN_RTESEN_MASK          (0x1000U)
#define USDHC_INT_STATUS_EN_RTESEN_SHIFT         (12U)
#define USDHC_INT_STATUS_EN_TPSEN_MASK           (0x4000U)
#define USDHC_INT_STATUS_EN_TPSEN_SHIFT          (14U)
#define USDHC_INT_STATUS_EN_CTOESEN_MASK         (0x10000U)
#define USDHC_INT_STATUS_EN_CTOESEN_SHIFT        (16U)
#define USDHC_INT_STATUS_EN_CCESEN_MASK          (0x20000U)
#define USDHC_INT_STATUS_EN_CCESEN_SHIFT         (17U)
#define USDHC_INT_STATUS_EN_CEBESEN_MASK         (0x40000U)
#define USDHC_INT_STATUS_EN_CEBESEN_SHIFT        (18U)
#define USDHC_INT_STATUS_EN_CIESEN_MASK          (0x80000U)
#define USDHC_INT_STATUS_EN_CIESEN_SHIFT         (19U)
#define USDHC_INT_STATUS_EN_DTOESEN_MASK         (0x100000U)
#define USDHC_INT_STATUS_EN_DTOESEN_SHIFT        (20U)
#define USDHC_INT_STATUS_EN_DCESEN_MASK          (0x200000U)
#define USDHC_INT_STATUS_EN_DCESEN_SHIFT         (21U)
#define USDHC_INT_STATUS_EN_DEBESEN_MASK         (0x400000U)
#define USDHC_INT_STATUS_EN_DEBESEN_SHIFT        (22U)
#define USDHC_INT_STATUS_EN_AC12ESEN_MASK        (0x1000000U)
#define USDHC_INT_STATUS_EN_AC12ESEN_SHIFT       (24U)
#define USDHC_INT_STATUS_EN_TNESEN_MASK          (0x4000000U)
#define USDHC_INT_STATUS_EN_TNESEN_SHIFT         (26U)
#define USDHC_INT_STATUS_EN_DMAESEN_MASK         (0x10000000U)
#define USDHC_INT_STATUS_EN_DMAESEN_SHIFT        (28U)
/*! @} */

/*! @name INT_SIGNAL_EN - Interrupt Signal Enable */
/*! @{ */
#define USDHC_INT_SIGNAL_EN_CCIEN_MASK           (0x1U)
#define USDHC_INT_SIGNAL_EN_CCIEN_SHIFT          (0U)
#define USDHC_INT_SIGNAL_EN_TCIEN_MASK           (0x2U)
#define USDHC_INT_SIGNAL_EN_TCIEN_SHIFT          (1U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_MASK          (0x4U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT         (2U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_MASK         (0x8U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT        (3U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_MASK          (0x10U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT         (4U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_MASK          (0x20U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT         (5U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_MASK         (0x40U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT        (6U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_MASK          (0x80U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT         (7U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_MASK         (0x100U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT        (8U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_MASK          (0x1000U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT         (12U)
#define USDHC_INT_SIGNAL_EN_TPIEN_MASK           (0x4000U)
#define USDHC_INT_SIGNAL_EN_TPIEN_SHIFT          (14U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_MASK         (0x10000U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT        (16U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_MASK          (0x20000U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT         (17U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_MASK         (0x40000U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT        (18U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_MASK          (0x80000U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT         (19U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_MASK         (0x100000U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT        (20U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_MASK          (0x200000U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT         (21U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_MASK         (0x400000U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT        (22U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_MASK        (0x1000000U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT       (24U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_MASK          (0x4000000U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT         (26U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_MASK         (0x10000000U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT        (28U)
/*! @} */

/*! @name AUTOCMD12_ERR_STATUS - Auto CMD12 Error Status */
/*! @{ */
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK   (0x1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT  (0U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK  (0x2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT (1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK  (0x4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT (2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK   (0x8U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT  (3U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK   (0x10U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT  (4U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK (0x80U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT (7U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK (0x400000U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT (22U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK (0x800000U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT (23U)
/*! @} */

/*! @name HOST_CTRL_CAP - Host Controller Capabilities */
/*! @{ */
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK   (0x1U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT  (0U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK  (0x2U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT (1U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK   (0x4U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT  (2U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK (0xF00U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT (8U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT)) & USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK (0x2000U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT (13U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK   (0xC000U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT  (14U)
/*! RETUNING_MODE - Retuning Mode
 *  0b00..Mode 1
 *  0b01..Mode 2
 *  0b10..Mode 3
 *  0b11..Reserved
 */
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT)) & USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK)
#define USDHC_HOST_CTRL_CAP_MBL_MASK             (0x70000U)
#define USDHC_HOST_CTRL_CAP_MBL_SHIFT            (16U)
/*! MBL - Max Block Length
 *  0b000..512 bytes
 *  0b001..1024 bytes
 *  0b010..2048 bytes
 *  0b011..4096 bytes
 */
#define USDHC_HOST_CTRL_CAP_MBL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_MBL_SHIFT)) & USDHC_HOST_CTRL_CAP_MBL_MASK)
#define USDHC_HOST_CTRL_CAP_ADMAS_MASK           (0x100000U)
#define USDHC_HOST_CTRL_CAP_ADMAS_SHIFT          (20U)
#define USDHC_HOST_CTRL_CAP_HSS_MASK             (0x200000U)
#define USDHC_HOST_CTRL_CAP_HSS_SHIFT            (21U)
#define USDHC_HOST_CTRL_CAP_DMAS_MASK            (0x400000U)
#define USDHC_HOST_CTRL_CAP_DMAS_SHIFT           (22U)
#define USDHC_HOST_CTRL_CAP_SRS_MASK             (0x800000U)
#define USDHC_HOST_CTRL_CAP_SRS_SHIFT            (23U)
#define USDHC_HOST_CTRL_CAP_VS33_MASK            (0x1000000U)
#define USDHC_HOST_CTRL_CAP_VS33_SHIFT           (24U)
#define USDHC_HOST_CTRL_CAP_VS30_MASK            (0x2000000U)
#define USDHC_HOST_CTRL_CAP_VS30_SHIFT           (25U)
#define USDHC_HOST_CTRL_CAP_VS18_MASK            (0x4000000U)
#define USDHC_HOST_CTRL_CAP_VS18_SHIFT           (26U)
/*! @} */

/*! @name WTMK_LVL - Watermark Level */
/*! @{ */
#define USDHC_WTMK_LVL_RD_WML_MASK               (0xFFU)
#define USDHC_WTMK_LVL_RD_WML_SHIFT              (0U)
#define USDHC_WTMK_LVL_RD_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_WML_SHIFT)) & USDHC_WTMK_LVL_RD_WML_MASK)
#define USDHC_WTMK_LVL_RD_BRST_LEN_MASK          (0x1F00U)
#define USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT         (8U)
#define USDHC_WTMK_LVL_RD_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_RD_BRST_LEN_MASK)
#define USDHC_WTMK_LVL_WR_WML_MASK               (0xFF0000U)
#define USDHC_WTMK_LVL_WR_WML_SHIFT              (16U)
#define USDHC_WTMK_LVL_WR_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_WML_SHIFT)) & USDHC_WTMK_LVL_WR_WML_MASK)
#define USDHC_WTMK_LVL_WR_BRST_LEN_MASK          (0x1F000000U)
#define USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT         (24U)
#define USDHC_WTMK_LVL_WR_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_WR_BRST_LEN_MASK)
/*! @} */

/*! @name MIX_CTRL - Mixer Control */
/*! @{ */
#define USDHC_MIX_CTRL_DMAEN_MASK                (0x1U)
#define USDHC_MIX_CTRL_DMAEN_SHIFT               (0U)
#define USDHC_MIX_CTRL_BCEN_MASK                 (0x2U)
#define USDHC_MIX_CTRL_BCEN_SHIFT                (1U)
#define USDHC_MIX_CTRL_AC12EN_MASK               (0x4U)
#define USDHC_MIX_CTRL_AC12EN_SHIFT              (2U)
#define USDHC_MIX_CTRL_DDR_EN_MASK               (0x8U)
#define USDHC_MIX_CTRL_DDR_EN_SHIFT              (3U)
#define USDHC_MIX_CTRL_DTDSEL_MASK               (0x10U)
#define USDHC_MIX_CTRL_DTDSEL_SHIFT              (4U)
#define USDHC_MIX_CTRL_MSBSEL_MASK               (0x20U)
#define USDHC_MIX_CTRL_MSBSEL_SHIFT              (5U)
#define USDHC_MIX_CTRL_NIBBLE_POS_MASK           (0x40U)
#define USDHC_MIX_CTRL_NIBBLE_POS_SHIFT          (6U)
#define USDHC_MIX_CTRL_AC23EN_MASK               (0x80U)
#define USDHC_MIX_CTRL_AC23EN_SHIFT              (7U)
#define USDHC_MIX_CTRL_EXE_TUNE_MASK             (0x400000U)
#define USDHC_MIX_CTRL_EXE_TUNE_SHIFT            (22U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_MASK          (0x800000U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT         (23U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK         (0x1000000U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT        (24U)
#define USDHC_MIX_CTRL_FBCLK_SEL_MASK            (0x2000000U)
#define USDHC_MIX_CTRL_FBCLK_SEL_SHIFT           (25U)
#define USDHC_MIX_CTRL_HS400_MODE_MASK           (0x4000000U)
#define USDHC_MIX_CTRL_HS400_MODE_SHIFT          (26U)
/*! @} */

/*! @name FORCE_EVENT - Force Event */
/*! @{ */
#define USDHC_FORCE_EVENT_FEVTAC12NE_MASK        (0x1U)
#define USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT       (0U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_MASK       (0x2U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT      (1U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_MASK        (0x4U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT       (2U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_MASK       (0x8U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT      (3U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_MASK        (0x10U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT       (4U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK     (0x80U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT    (7U)
#define USDHC_FORCE_EVENT_FEVTCTOE_MASK          (0x10000U)
#define USDHC_FORCE_EVENT_FEVTCTOE_SHIFT         (16U)
#define USDHC_FORCE_EVENT_FEVTCCE_MASK           (0x20000U)
#define USDHC_FORCE_EVENT_FEVTCCE_SHIFT          (17U)
#define USDHC_FORCE_EVENT_FEVTCEBE_MASK          (0x40000U)
#define USDHC_FORCE_EVENT_FEVTCEBE_SHIFT         (18U)
#define USDHC_FORCE_EVENT_FEVTCIE_MASK           (0x80000U)
#define USDHC_FORCE_EVENT_FEVTCIE_SHIFT          (19U)
#define USDHC_FORCE_EVENT_FEVTDTOE_MASK          (0x100000U)
#define USDHC_FORCE_EVENT_FEVTDTOE_SHIFT         (20U)
#define USDHC_FORCE_EVENT_FEVTDCE_MASK           (0x200000U)
#define USDHC_FORCE_EVENT_FEVTDCE_SHIFT          (21U)
#define USDHC_FORCE_EVENT_FEVTDEBE_MASK          (0x400000U)
#define USDHC_FORCE_EVENT_FEVTDEBE_SHIFT         (22U)
#define USDHC_FORCE_EVENT_FEVTAC12E_MASK         (0x1000000U)
#define USDHC_FORCE_EVENT_FEVTAC12E_SHIFT        (24U)
#define USDHC_FORCE_EVENT_FEVTTNE_MASK           (0x4000000U)
#define USDHC_FORCE_EVENT_FEVTTNE_SHIFT          (26U)
#define USDHC_FORCE_EVENT_FEVTDMAE_MASK          (0x10000000U)
#define USDHC_FORCE_EVENT_FEVTDMAE_SHIFT         (28U)
#define USDHC_FORCE_EVENT_FEVTCINT_MASK          (0x80000000U)
#define USDHC_FORCE_EVENT_FEVTCINT_SHIFT         (31U)
/*! @} */

/*! @name ADMA_ERR_STATUS - ADMA Error Status Register */
/*! @{ */
#define USDHC_ADMA_ERR_STATUS_ADMAES_MASK        (0x3U)
#define USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT       (0U)
#define USDHC_ADMA_ERR_STATUS_ADMAES(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMAES_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMALME_MASK       (0x4U)
#define USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT      (2U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_MASK       (0x8U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT      (3U)
/*! @} */

/*! @name ADMA_SYS_ADDR - ADMA System Address */
/*! @{ */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK        (0xFFFFFFFCU)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT       (2U)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT)) & USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK)
/*! @} */

/*! @name DLL_CTRL - DLL (Delay Line) Control */
/*! @{ */
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK      (0x1U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT     (0U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK       (0x2U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT      (1U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK (0x78U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT (3U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK (0x70000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT (16U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name DLL_STATUS - DLL Status */
/*! @{ */
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK   (0x1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT  (0U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK   (0x2U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT  (1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK    (0x1FCU)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT   (2U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK    (0xFE00U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT   (9U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name CLK_TUNE_CTRL_STATUS - CLK Tuning Control and Status */
/*! @{ */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK (0xFU)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT (0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK (0xF0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT (4U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK (0x7F00U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT (8U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK  (0x8000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT (15U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK (0xF0000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT (16U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK (0xF00000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT (20U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK (0x7F000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT (24U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK  (0x80000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT (31U)
/*! @} */

/*! @name STROBE_DLL_CTRL - Strobe DLL Control */
/*! @{ */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_MASK (0x1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_SHIFT (0U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_MASK (0x2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_SHIFT (1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK (0x38U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_MASK (0x40U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_SHIFT (6U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_MASK (0x80U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_SHIFT (7U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name STROBE_DLL_STATUS - Strobe DLL Status */
/*! @{ */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_MASK (0x1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_SHIFT (0U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_MASK (0x2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_SHIFT (1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK (0x1FCU)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT (2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT (9U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name VEND_SPEC - Vendor Specific Register */
/*! @{ */
#define USDHC_VEND_SPEC_EXT_DMA_EN_MASK          (0x1U)
#define USDHC_VEND_SPEC_EXT_DMA_EN_SHIFT         (0U)
#define USDHC_VEND_SPEC_VSELECT_MASK             (0x2U)
#define USDHC_VEND_SPEC_VSELECT_SHIFT            (1U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK     (0x4U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT    (2U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK  (0x8U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT (3U)
#define USDHC_VEND_SPEC_DAT3_CD_POL_MASK         (0x10U)
#define USDHC_VEND_SPEC_DAT3_CD_POL_SHIFT        (4U)
#define USDHC_VEND_SPEC_CD_POL_MASK              (0x20U)
#define USDHC_VEND_SPEC_CD_POL_SHIFT             (5U)
#define USDHC_VEND_SPEC_WP_POL_MASK              (0x40U)
#define USDHC_VEND_SPEC_WP_POL_SHIFT             (6U)
#define USDHC_VEND_SPEC_CLKONJ_IN_ABORT_MASK     (0x80U)
#define USDHC_VEND_SPEC_CLKONJ_IN_ABORT_SHIFT    (7U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK        (0x100U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT       (8U)
#define USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_MASK     (0x800U)
#define USDHC_VEND_SPEC_IPG_CLK_SOFT_EN_SHIFT    (11U)
#define USDHC_VEND_SPEC_HCLK_SOFT_EN_MASK        (0x1000U)
#define USDHC_VEND_SPEC_HCLK_SOFT_EN_SHIFT       (12U)
#define USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_MASK  (0x2000U)
#define USDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_SHIFT (13U)
#define USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_MASK    (0x4000U)
#define USDHC_VEND_SPEC_CARD_CLK_SOFT_EN_SHIFT   (14U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_MASK         (0x8000U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT        (15U)
#define USDHC_VEND_SPEC_INT_ST_VAL_MASK          (0xFF0000U)
#define USDHC_VEND_SPEC_INT_ST_VAL_SHIFT         (16U)
#define USDHC_VEND_SPEC_INT_ST_VAL(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC_INT_ST_VAL_SHIFT)) & USDHC_VEND_SPEC_INT_ST_VAL_MASK)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_MASK         (0x80000000U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT        (31U)
/*! @} */

/*! @name MMC_BOOT - MMC Boot Register */
/*! @{ */
#define USDHC_MMC_BOOT_DTOCV_ACK_MASK            (0xFU)
#define USDHC_MMC_BOOT_DTOCV_ACK_SHIFT           (0U)
/*! DTOCV_ACK
 *  0b0000..SDCLK x 2^13
 *  0b0001..SDCLK x 2^14
 *  0b0010..SDCLK x 2^15
 *  0b0011..SDCLK x 2^16
 *  0b0100..SDCLK x 2^17
 *  0b0101..SDCLK x 2^18
 *  0b0110..SDCLK x 2^19
 *  0b0111..SDCLK x 2^20
 *  0b1110..SDCLK x 2^27
 *  0b1111..SDCLK x 2^28
 */
#define USDHC_MMC_BOOT_DTOCV_ACK(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DTOCV_ACK_SHIFT)) & USDHC_MMC_BOOT_DTOCV_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_ACK_MASK             (0x10U)
#define USDHC_MMC_BOOT_BOOT_ACK_SHIFT            (4U)
#define USDHC_MMC_BOOT_BOOT_MODE_MASK            (0x20U)
#define USDHC_MMC_BOOT_BOOT_MODE_SHIFT           (5U)
#define USDHC_MMC_BOOT_BOOT_EN_MASK              (0x40U)
#define USDHC_MMC_BOOT_BOOT_EN_SHIFT             (6U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_MASK         (0x80U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT        (7U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK     (0x100U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT    (8U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK         (0xFFFF0000U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT        (16U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT)) & USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK)
/*! @} */

/*! @name VEND_SPEC2 - Vendor Specific 2 Register */
/*! @{ */
#define USDHC_VEND_SPEC2_SDR104_TIMING_DIS_MASK  (0x1U)
#define USDHC_VEND_SPEC2_SDR104_TIMING_DIS_SHIFT (0U)
#define USDHC_VEND_SPEC2_SDR104_OE_DIS_MASK      (0x2U)
#define USDHC_VEND_SPEC2_SDR104_OE_DIS_SHIFT     (1U)
#define USDHC_VEND_SPEC2_SDR104_NSD_DIS_MASK     (0x4U)
#define USDHC_VEND_SPEC2_SDR104_NSD_DIS_SHIFT    (2U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK   (0x8U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT  (3U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK     (0x10U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT    (4U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK     (0x20U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT    (5U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK      (0x40U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT     (6U)
#define USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_MASK (0x80U)
#define USDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_SHIFT (7U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_MASK (0x400U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_SHIFT (10U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_MASK (0x800U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_SHIFT (11U)
/*! @} */

/*! @name TUNING_CTRL - Tuning Control Register */
/*! @{ */
#define USDHC_TUNING_CTRL_TUNING_START_TAP_MASK  (0xFFU)
#define USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT (0U)
#define USDHC_TUNING_CTRL_TUNING_START_TAP(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_START_TAP_MASK)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_MASK    (0xFF00U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT   (8U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT)) & USDHC_TUNING_CTRL_TUNING_COUNTER_MASK)
#define USDHC_TUNING_CTRL_TUNING_STEP_MASK       (0x70000U)
#define USDHC_TUNING_CTRL_TUNING_STEP_SHIFT      (16U)
#define USDHC_TUNING_CTRL_TUNING_STEP(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_STEP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_STEP_MASK)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_MASK     (0x700000U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT    (20U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT)) & USDHC_TUNING_CTRL_TUNING_WINDOW_MASK)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_MASK     (0x1000000U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT    (24U)
/*! @} */


/*!
 * @}
 */ /* end of group USDHC_Register_Masks */


/* USDHC - Peripheral instance base addresses */
/** Peripheral uSDHC1 base pointer */
#define uSDHC1_BASE_PTR                          ((USDHC_MemMapPtr)0x30B40000u)
/** Peripheral uSDHC2 base pointer */
#define uSDHC2_BASE_PTR                          ((USDHC_MemMapPtr)0x30B50000u)
/** Array initializer of USDHC peripheral base pointers */
#define USDHC_BASE_PTRS                          { uSDHC1_BASE_PTR, uSDHC2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register instance definitions */
/* uSDHC1 */
#define uSDHC1_DS_ADDR                           USDHC_DS_ADDR_REG(uSDHC1_BASE_PTR)
#define uSDHC1_BLK_ATT                           USDHC_BLK_ATT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_ARG                           USDHC_CMD_ARG_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP0                          USDHC_CMD_RSP0_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP1                          USDHC_CMD_RSP1_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP2                          USDHC_CMD_RSP2_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP3                          USDHC_CMD_RSP3_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_PRES_STATE                        USDHC_PRES_STATE_REG(uSDHC1_BASE_PTR)
#define uSDHC1_PROT_CTRL                         USDHC_PROT_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_SYS_CTRL                          USDHC_SYS_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_STATUS                        USDHC_INT_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(uSDHC1_BASE_PTR)
#define uSDHC1_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(uSDHC1_BASE_PTR)
#define uSDHC1_WTMK_LVL                          USDHC_WTMK_LVL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_MIX_CTRL                          USDHC_MIX_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DLL_CTRL                          USDHC_DLL_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DLL_STATUS                        USDHC_DLL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_VEND_SPEC                         USDHC_VEND_SPEC_REG(uSDHC1_BASE_PTR)
#define uSDHC1_MMC_BOOT                          USDHC_MMC_BOOT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(uSDHC1_BASE_PTR)
#define uSDHC1_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(uSDHC1_BASE_PTR)
/* uSDHC2 */
#define uSDHC2_DS_ADDR                           USDHC_DS_ADDR_REG(uSDHC2_BASE_PTR)
#define uSDHC2_BLK_ATT                           USDHC_BLK_ATT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_ARG                           USDHC_CMD_ARG_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP0                          USDHC_CMD_RSP0_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP1                          USDHC_CMD_RSP1_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP2                          USDHC_CMD_RSP2_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP3                          USDHC_CMD_RSP3_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_PRES_STATE                        USDHC_PRES_STATE_REG(uSDHC2_BASE_PTR)
#define uSDHC2_PROT_CTRL                         USDHC_PROT_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_SYS_CTRL                          USDHC_SYS_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_STATUS                        USDHC_INT_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(uSDHC2_BASE_PTR)
#define uSDHC2_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(uSDHC2_BASE_PTR)
#define uSDHC2_WTMK_LVL                          USDHC_WTMK_LVL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_MIX_CTRL                          USDHC_MIX_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DLL_CTRL                          USDHC_DLL_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DLL_STATUS                        USDHC_DLL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_VEND_SPEC                         USDHC_VEND_SPEC_REG(uSDHC2_BASE_PTR)
#define uSDHC2_MMC_BOOT                          USDHC_MMC_BOOT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(uSDHC2_BASE_PTR)
#define uSDHC2_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(uSDHC2_BASE_PTR)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USDHC_Peripheral */


/* ----------------------------------------------------------------------------
   -- WDOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Peripheral WDOG
 * @{
 */

/** WDOG - Peripheral register structure */
typedef struct WDOG_MemMap {
  uint16_t WCR;                                    /**< Watchdog Control Register, offset: 0x0 */
  uint16_t WSR;                                    /**< Watchdog Service Register, offset: 0x2 */
  uint16_t WRSR;                                   /**< Watchdog Reset Status Register, offset: 0x4 */
  uint16_t WICR;                                   /**< Watchdog Interrupt Control Register, offset: 0x6 */
  uint16_t WMCR;                                   /**< Watchdog Miscellaneous Control Register, offset: 0x8 */
} volatile *WDOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register accessors */
#define WDOG_WCR_REG(base)                       ((base)->WCR)
#define WDOG_WSR_REG(base)                       ((base)->WSR)
#define WDOG_WRSR_REG(base)                      ((base)->WRSR)
#define WDOG_WICR_REG(base)                      ((base)->WICR)
#define WDOG_WMCR_REG(base)                      ((base)->WMCR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- WDOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Masks WDOG Register Masks
 * @{
 */

/*! @name WCR - Watchdog Control Register */
/*! @{ */
#define WDOG_WCR_WDZST_MASK                      (0x1U)
#define WDOG_WCR_WDZST_SHIFT                     (0U)
#define WDOG_WCR_WDBG_MASK                       (0x2U)
#define WDOG_WCR_WDBG_SHIFT                      (1U)
#define WDOG_WCR_WDE_MASK                        (0x4U)
#define WDOG_WCR_WDE_SHIFT                       (2U)
#define WDOG_WCR_WDT_MASK                        (0x8U)
#define WDOG_WCR_WDT_SHIFT                       (3U)
#define WDOG_WCR_SRS_MASK                        (0x10U)
#define WDOG_WCR_SRS_SHIFT                       (4U)
#define WDOG_WCR_WDA_MASK                        (0x20U)
#define WDOG_WCR_WDA_SHIFT                       (5U)
#define WDOG_WCR_SRE_MASK                        (0x40U)
#define WDOG_WCR_SRE_SHIFT                       (6U)
#define WDOG_WCR_WDW_MASK                        (0x80U)
#define WDOG_WCR_WDW_SHIFT                       (7U)
#define WDOG_WCR_WT_MASK                         (0xFF00U)
#define WDOG_WCR_WT_SHIFT                        (8U)
/*! WT
 *  0b00000000..- 0.5 Seconds (Default).
 *  0b00000001..- 1.0 Seconds.
 *  0b00000010..- 1.5 Seconds.
 *  0b00000011..- 2.0 Seconds.
 *  0b11111111..- 128 Seconds.
 */
#define WDOG_WCR_WT(x)                           (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WT_SHIFT)) & WDOG_WCR_WT_MASK)
/*! @} */

/*! @name WSR - Watchdog Service Register */
/*! @{ */
#define WDOG_WSR_WSR_MASK                        (0xFFFFU)
#define WDOG_WSR_WSR_SHIFT                       (0U)
/*! WSR
 *  0b0101010101010101..Write to the Watchdog Service Register (WDOG_WSR).
 *  0b1010101010101010..Write to the Watchdog Service Register (WDOG_WSR).
 */
#define WDOG_WSR_WSR(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WSR_WSR_SHIFT)) & WDOG_WSR_WSR_MASK)
/*! @} */

/*! @name WRSR - Watchdog Reset Status Register */
/*! @{ */
#define WDOG_WRSR_SFTW_MASK                      (0x1U)
#define WDOG_WRSR_SFTW_SHIFT                     (0U)
#define WDOG_WRSR_TOUT_MASK                      (0x2U)
#define WDOG_WRSR_TOUT_SHIFT                     (1U)
#define WDOG_WRSR_POR_MASK                       (0x10U)
#define WDOG_WRSR_POR_SHIFT                      (4U)
/*! @} */

/*! @name WICR - Watchdog Interrupt Control Register */
/*! @{ */
#define WDOG_WICR_WICT_MASK                      (0xFFU)
#define WDOG_WICR_WICT_SHIFT                     (0U)
/*! WICT
 *  0b00000000..WICT[7:0] = Time duration between interrupt and time-out is 0 seconds.
 *  0b00000001..WICT[7:0] = Time duration between interrupt and time-out is 0.5 seconds.
 *  0b00000100..WICT[7:0] = Time duration between interrupt and time-out is 2 seconds (Default).
 *  0b11111111..WICT[7:0] = Time duration between interrupt and time-out is 127.5 seconds.
 */
#define WDOG_WICR_WICT(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WICT_SHIFT)) & WDOG_WICR_WICT_MASK)
#define WDOG_WICR_WTIS_MASK                      (0x4000U)
#define WDOG_WICR_WTIS_SHIFT                     (14U)
#define WDOG_WICR_WIE_MASK                       (0x8000U)
#define WDOG_WICR_WIE_SHIFT                      (15U)
/*! @} */

/*! @name WMCR - Watchdog Miscellaneous Control Register */
/*! @{ */
#define WDOG_WMCR_PDE_MASK                       (0x1U)
#define WDOG_WMCR_PDE_SHIFT                      (0U)
/*! @} */


/*!
 * @}
 */ /* end of group WDOG_Register_Masks */


/* WDOG - Peripheral instance base addresses */
/** Peripheral WDOG1 base pointer */
#define WDOG1_BASE_PTR                           ((WDOG_MemMapPtr)0x30280000u)
/** Peripheral WDOG2 base pointer */
#define WDOG2_BASE_PTR                           ((WDOG_MemMapPtr)0x30290000u)
/** Peripheral WDOG3 base pointer */
#define WDOG3_BASE_PTR                           ((WDOG_MemMapPtr)0x302A0000u)
/** Array initializer of WDOG peripheral base pointers */
#define WDOG_BASE_PTRS                           { WDOG1_BASE_PTR, WDOG2_BASE_PTR, WDOG3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register instance definitions */
/* WDOG1 */
#define WDOG1_WCR                                WDOG_WCR_REG(WDOG1_BASE_PTR)
#define WDOG1_WSR                                WDOG_WSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WRSR                               WDOG_WRSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WICR                               WDOG_WICR_REG(WDOG1_BASE_PTR)
#define WDOG1_WMCR                               WDOG_WMCR_REG(WDOG1_BASE_PTR)
/* WDOG2 */
#define WDOG2_WCR                                WDOG_WCR_REG(WDOG2_BASE_PTR)
#define WDOG2_WSR                                WDOG_WSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WRSR                               WDOG_WRSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WICR                               WDOG_WICR_REG(WDOG2_BASE_PTR)
#define WDOG2_WMCR                               WDOG_WMCR_REG(WDOG2_BASE_PTR)
/* WDOG3 */
#define WDOG3_WCR                                WDOG_WCR_REG(WDOG3_BASE_PTR)
#define WDOG3_WSR                                WDOG_WSR_REG(WDOG3_BASE_PTR)
#define WDOG3_WRSR                               WDOG_WRSR_REG(WDOG3_BASE_PTR)
#define WDOG3_WICR                               WDOG_WICR_REG(WDOG3_BASE_PTR)
#define WDOG3_WMCR                               WDOG_WMCR_REG(WDOG3_BASE_PTR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group WDOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- WR_SCL
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WR_SCL_Peripheral WR_SCL
 * @{
 */

/** WR_SCL - Peripheral register structure */
typedef struct WR_SCL_MemMap {
  struct {                                         /* offset: 0x0 */
    uint32_t RW;                                     /**< Control register for Context Loader., offset: 0x0 */
    uint32_t SET;                                    /**< Control register for Context Loader., offset: 0x4 */
    uint32_t CLR;                                    /**< Control register for Context Loader., offset: 0x8 */
    uint32_t TOG;                                    /**< Control register for Context Loader., offset: 0xC */
  } CTRL_STATUS;
  uint32_t BASE_ADDR;                              /**< Holds the base address, offset: 0x10 */
  uint32_t PITCH;                                  /**< Pitch, offset: 0x14 */
} volatile *WR_SCL_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- WR_SCL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WR_SCL_Register_Accessor_Macros WR_SCL - Register accessor macros
 * @{
 */


/* WR_SCL - Register accessors */
#define WR_SCL_CTRL_STATUS_REG(base)             ((base)->CTRL_STATUS.RW)
#define WR_SCL_CTRL_STATUS_SET_REG(base)         ((base)->CTRL_STATUS.SET)
#define WR_SCL_CTRL_STATUS_CLR_REG(base)         ((base)->CTRL_STATUS.CLR)
#define WR_SCL_CTRL_STATUS_TOG_REG(base)         ((base)->CTRL_STATUS.TOG)
#define WR_SCL_BASE_ADDR_REG(base)               ((base)->BASE_ADDR)
#define WR_SCL_PITCH_REG(base)                   ((base)->PITCH)

/*!
 * @}
 */ /* end of group WR_SCL_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- WR_SCL Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WR_SCL_Register_Masks WR_SCL Register Masks
 * @{
 */

/*! @name CTRL_STATUS - Control register for Context Loader. */
/*! @{ */
#define WR_SCL_CTRL_STATUS_ENABLE_MASK           (0x1U)
#define WR_SCL_CTRL_STATUS_ENABLE_SHIFT          (0U)
#define WR_SCL_CTRL_STATUS_REPEAT_MASK           (0x2U)
#define WR_SCL_CTRL_STATUS_REPEAT_SHIFT          (1U)
#define WR_SCL_CTRL_STATUS_BPP_MASK              (0x1CU)
#define WR_SCL_CTRL_STATUS_BPP_SHIFT             (2U)
#define WR_SCL_CTRL_STATUS_BPP(x)                (((uint32_t)(((uint32_t)(x)) << WR_SCL_CTRL_STATUS_BPP_SHIFT)) & WR_SCL_CTRL_STATUS_BPP_MASK)
#define WR_SCL_CTRL_STATUS_T_SIZE_MASK           (0x60U)
#define WR_SCL_CTRL_STATUS_T_SIZE_SHIFT          (5U)
#define WR_SCL_CTRL_STATUS_T_SIZE(x)             (((uint32_t)(((uint32_t)(x)) << WR_SCL_CTRL_STATUS_T_SIZE_SHIFT)) & WR_SCL_CTRL_STATUS_T_SIZE_MASK)
#define WR_SCL_CTRL_STATUS_P_SIZE_MASK           (0x380U)
#define WR_SCL_CTRL_STATUS_P_SIZE_SHIFT          (7U)
#define WR_SCL_CTRL_STATUS_P_SIZE(x)             (((uint32_t)(((uint32_t)(x)) << WR_SCL_CTRL_STATUS_P_SIZE_SHIFT)) & WR_SCL_CTRL_STATUS_P_SIZE_MASK)
#define WR_SCL_CTRL_STATUS_P_FREQ_MASK           (0x3FC00U)
#define WR_SCL_CTRL_STATUS_P_FREQ_SHIFT          (10U)
#define WR_SCL_CTRL_STATUS_P_FREQ(x)             (((uint32_t)(((uint32_t)(x)) << WR_SCL_CTRL_STATUS_P_FREQ_SHIFT)) & WR_SCL_CTRL_STATUS_P_FREQ_MASK)
#define WR_SCL_CTRL_STATUS_FIFO_SIZE_MASK        (0x1FC0000U)
#define WR_SCL_CTRL_STATUS_FIFO_SIZE_SHIFT       (18U)
#define WR_SCL_CTRL_STATUS_FIFO_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << WR_SCL_CTRL_STATUS_FIFO_SIZE_SHIFT)) & WR_SCL_CTRL_STATUS_FIFO_SIZE_MASK)
#define WR_SCL_CTRL_STATUS_FRAME_COMP_EN_MASK    (0x10000000U)
#define WR_SCL_CTRL_STATUS_FRAME_COMP_EN_SHIFT   (28U)
#define WR_SCL_CTRL_STATUS_FRAME_COMP_MASK       (0x20000000U)
#define WR_SCL_CTRL_STATUS_FRAME_COMP_SHIFT      (29U)
#define WR_SCL_CTRL_STATUS_WR_ERR_EN_MASK        (0x40000000U)
#define WR_SCL_CTRL_STATUS_WR_ERR_EN_SHIFT       (30U)
#define WR_SCL_CTRL_STATUS_WR_ERR_MASK           (0x80000000U)
#define WR_SCL_CTRL_STATUS_WR_ERR_SHIFT          (31U)
/*! @} */

/*! @name BASE_ADDR - Holds the base address */
/*! @{ */
#define WR_SCL_BASE_ADDR_BASE_ADDR_MASK          (0xFFFFFFFFU)
#define WR_SCL_BASE_ADDR_BASE_ADDR_SHIFT         (0U)
#define WR_SCL_BASE_ADDR_BASE_ADDR(x)            (((uint32_t)(((uint32_t)(x)) << WR_SCL_BASE_ADDR_BASE_ADDR_SHIFT)) & WR_SCL_BASE_ADDR_BASE_ADDR_MASK)
/*! @} */

/*! @name PITCH - Pitch */
/*! @{ */
#define WR_SCL_PITCH_PITCH_MASK                  (0xFFFFU)
#define WR_SCL_PITCH_PITCH_SHIFT                 (0U)
#define WR_SCL_PITCH_PITCH(x)                    (((uint32_t)(((uint32_t)(x)) << WR_SCL_PITCH_PITCH_SHIFT)) & WR_SCL_PITCH_PITCH_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group WR_SCL_Register_Masks */


/* WR_SCL - Peripheral instance base addresses */
/** Peripheral DCSS__WR_SCL base pointer */
#define DCSS__WR_SCL_BASE_PTR                    ((WR_SCL_MemMapPtr)0x32E21000u)
/** Array initializer of WR_SCL peripheral base pointers */
#define WR_SCL_BASE_PTRS                         { DCSS__WR_SCL_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- WR_SCL - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WR_SCL_Register_Accessor_Macros WR_SCL - Register accessor macros
 * @{
 */


/* WR_SCL - Register instance definitions */
/* DCSS__WR_SCL */
#define DCSS__WR_SCL_CTRL_STATUS                 WR_SCL_CTRL_STATUS_REG(DCSS__WR_SCL_BASE_PTR)
#define DCSS__WR_SCL_CTRL_STATUS_SET             WR_SCL_CTRL_STATUS_SET_REG(DCSS__WR_SCL_BASE_PTR)
#define DCSS__WR_SCL_CTRL_STATUS_CLR             WR_SCL_CTRL_STATUS_CLR_REG(DCSS__WR_SCL_BASE_PTR)
#define DCSS__WR_SCL_CTRL_STATUS_TOG             WR_SCL_CTRL_STATUS_TOG_REG(DCSS__WR_SCL_BASE_PTR)
#define DCSS__WR_SCL_BASE_ADDR                   WR_SCL_BASE_ADDR_REG(DCSS__WR_SCL_BASE_PTR)
#define DCSS__WR_SCL_PITCH                       WR_SCL_PITCH_REG(DCSS__WR_SCL_BASE_PTR)

/*!
 * @}
 */ /* end of group WR_SCL_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group WR_SCL_Peripheral */


/* ----------------------------------------------------------------------------
   -- XTALOSC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Peripheral XTALOSC
 * @{
 */

/** XTALOSC - Peripheral register structure */
typedef struct XTALOSC_MemMap {
  uint32_t OSC25M_CTL_CFG;                         /**< 25M Oscillator Control Configuration Register, offset: 0x0 */
  uint32_t OSC25M_TEST_CFG;                        /**< 25M Oscillator Test Configuration Register, offset: 0x4 */
  uint8_t RESERVED_0[32760];
  uint32_t OSC27M_CTL_CFG;                         /**< 27M Oscillator Control Configuration Register, offset: 0x8000 */
  uint32_t OSC27M_TEST_CFG;                        /**< 27M Oscillator Test Configuration Register, offset: 0x8004 */
} volatile *XTALOSC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- XTALOSC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Accessor_Macros XTALOSC - Register accessor macros
 * @{
 */


/* XTALOSC - Register accessors */
#define XTALOSC_OSC25M_CTL_CFG_REG(base)         ((base)->OSC25M_CTL_CFG)
#define XTALOSC_OSC25M_TEST_CFG_REG(base)        ((base)->OSC25M_TEST_CFG)
#define XTALOSC_OSC27M_CTL_CFG_REG(base)         ((base)->OSC27M_CTL_CFG)
#define XTALOSC_OSC27M_TEST_CFG_REG(base)        ((base)->OSC27M_TEST_CFG)

/*!
 * @}
 */ /* end of group XTALOSC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- XTALOSC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Masks XTALOSC Register Masks
 * @{
 */

/*! @name OSC25M_CTL_CFG - 25M Oscillator Control Configuration Register */
/*! @{ */
#define XTALOSC_OSC25M_CTL_CFG_OSC_ALC_CTL_MASK  (0x4U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_ALC_CTL_SHIFT (2U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_HYST_CTL_MASK (0x8U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_HYST_CTL_SHIFT (3U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_GM_SEL_MASK   (0x70U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_GM_SEL_SHIFT  (4U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_GM_SEL(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC25M_CTL_CFG_OSC_GM_SEL_SHIFT)) & XTALOSC_OSC25M_CTL_CFG_OSC_GM_SEL_MASK)
#define XTALOSC_OSC25M_CTL_CFG_OSC_INT_STU_MASK  (0x80U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_INT_STU_SHIFT (7U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_DIV_MASK      (0x1F00U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_DIV_SHIFT     (8U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_DIV(x)        (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC25M_CTL_CFG_OSC_DIV_SHIFT)) & XTALOSC_OSC25M_CTL_CFG_OSC_DIV_MASK)
#define XTALOSC_OSC25M_CTL_CFG_OSC_OK_BYPASS_MASK (0x2000U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_OK_BYPASS_SHIFT (13U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_INT_MASK_MASK (0x8000U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_INT_MASK_SHIFT (15U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_EOCV_MASK     (0xFF0000U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_EOCV_SHIFT    (16U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_EOCV(x)       (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC25M_CTL_CFG_OSC_EOCV_SHIFT)) & XTALOSC_OSC25M_CTL_CFG_OSC_EOCV_MASK)
#define XTALOSC_OSC25M_CTL_CFG_OSC_GM_TST_SEL_MASK (0x40000000U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_GM_TST_SEL_SHIFT (30U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_BYPSS_MASK    (0x80000000U)
#define XTALOSC_OSC25M_CTL_CFG_OSC_BYPSS_SHIFT   (31U)
/*! @} */

/*! @name OSC25M_TEST_CFG - 25M Oscillator Test Configuration Register */
/*! @{ */
#define XTALOSC_OSC25M_TEST_CFG_XOSC_TESTEN_MASK (0x80000000U)
#define XTALOSC_OSC25M_TEST_CFG_XOSC_TESTEN_SHIFT (31U)
/*! @} */

/*! @name OSC27M_CTL_CFG - 27M Oscillator Control Configuration Register */
/*! @{ */
#define XTALOSC_OSC27M_CTL_CFG_OSC_ALC_CTL_MASK  (0x4U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_ALC_CTL_SHIFT (2U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_HYST_CTL_MASK (0x8U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_HYST_CTL_SHIFT (3U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_GM_SEL_MASK   (0x70U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_GM_SEL_SHIFT  (4U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_GM_SEL(x)     (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC27M_CTL_CFG_OSC_GM_SEL_SHIFT)) & XTALOSC_OSC27M_CTL_CFG_OSC_GM_SEL_MASK)
#define XTALOSC_OSC27M_CTL_CFG_OSC_INT_STU_MASK  (0x80U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_INT_STU_SHIFT (7U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_DIV_MASK      (0x1F00U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_DIV_SHIFT     (8U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_DIV(x)        (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC27M_CTL_CFG_OSC_DIV_SHIFT)) & XTALOSC_OSC27M_CTL_CFG_OSC_DIV_MASK)
#define XTALOSC_OSC27M_CTL_CFG_OSC_OK_BYPASS_MASK (0x2000U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_OK_BYPASS_SHIFT (13U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_INT_MASK_MASK (0x8000U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_INT_MASK_SHIFT (15U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_EOCV_MASK     (0xFF0000U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_EOCV_SHIFT    (16U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_EOCV(x)       (((uint32_t)(((uint32_t)(x)) << XTALOSC_OSC27M_CTL_CFG_OSC_EOCV_SHIFT)) & XTALOSC_OSC27M_CTL_CFG_OSC_EOCV_MASK)
#define XTALOSC_OSC27M_CTL_CFG_OSC_GM_TST_SEL_MASK (0x40000000U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_GM_TST_SEL_SHIFT (30U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_BYPSS_MASK    (0x80000000U)
#define XTALOSC_OSC27M_CTL_CFG_OSC_BYPSS_SHIFT   (31U)
/*! @} */

/*! @name OSC27M_TEST_CFG - 27M Oscillator Test Configuration Register */
/*! @{ */
#define XTALOSC_OSC27M_TEST_CFG_XOSC_TESTEN_MASK (0x80000000U)
#define XTALOSC_OSC27M_TEST_CFG_XOSC_TESTEN_SHIFT (31U)
/*! @} */


/*!
 * @}
 */ /* end of group XTALOSC_Register_Masks */


/* XTALOSC - Peripheral instance base addresses */
/** Peripheral XTALOSC base pointer */
#define XTALOSC_BASE_PTR                         ((XTALOSC_MemMapPtr)0x30270000u)
/** Array initializer of XTALOSC peripheral base pointers */
#define XTALOSC_BASE_PTRS                        { XTALOSC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- XTALOSC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Accessor_Macros XTALOSC - Register accessor macros
 * @{
 */


/* XTALOSC - Register instance definitions */
/* XTALOSC */
#define XTALOSC_OSC25M_CTL_CFG                   XTALOSC_OSC25M_CTL_CFG_REG(XTALOSC_BASE_PTR)
#define XTALOSC_OSC25M_TEST_CFG                  XTALOSC_OSC25M_TEST_CFG_REG(XTALOSC_BASE_PTR)
#define XTALOSC_OSC27M_CTL_CFG                   XTALOSC_OSC27M_CTL_CFG_REG(XTALOSC_BASE_PTR)
#define XTALOSC_OSC27M_TEST_CFG                  XTALOSC_OSC27M_TEST_CFG_REG(XTALOSC_BASE_PTR)

/*!
 * @}
 */ /* end of group XTALOSC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group XTALOSC_Peripheral */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_defines */


/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */


#else /* #if !defined(MCU_MIMX8MQ7_ca53) */
  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
  #if (MCU_MEM_MAP_VERSION != 0x0400U)
    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
      #warning There are included two not compatible versions of memory maps. Please check possible differences.
    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
  #endif /* (MCU_MEM_MAP_VERSION != 0x0400U) */
#endif  /* #if !defined(MCU_MIMX8MQ7_ca53) */
