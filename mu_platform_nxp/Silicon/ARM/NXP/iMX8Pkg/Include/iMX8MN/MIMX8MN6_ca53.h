/*
** ###################################################################
**     Processors:          MIMX8MN6CVTIZ
**                          MIMX8MN6DVTJZ
**
**     Compilers:           GNU C Compiler
**                          IAR ANSI C/C++ Compiler for ARM
**                          Keil ARM C/C++ Compiler
**
**     Reference manual:    MX8MNRM, Rev.B, 07/2019
**     Version:             rev. 2.0, 2019-09-23
**     Build:               b190919
**
**     Abstract:
**         This header file implements peripheral memory map for MIMX8MN6_ca53
**         processor.
**
**     Copyright 1997-2016 Freescale Semiconductor, Inc.
**     Copyright 2016-2019 NXP
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
**     Revisions:
**     - rev. 1.0 (2019-04-22)
**         Initial version.
**     - rev. 2.0 (2019-09-23)
**         Rev.B Header RFP
**
** ###################################################################
*/

/*!
 * @file MIMX8MN6_ca53.h
 * @version 2.0
 * @date 2019-09-23
 * @brief Peripheral memory map for MIMX8MN6_ca53
 *
 * This header file implements peripheral memory map for MIMX8MN6_ca53 processor.
 */


/* ----------------------------------------------------------------------------
   -- MCU activation
   ---------------------------------------------------------------------------- */

/* Prevention from multiple including the same memory map */
#if !defined(MCU_MIMX8MN6_ca53)  /* Check if memory map has not been already included */
#define MCU_MIMX8MN6_ca53

/* Check if another memory map has not been also included */
#if (defined(MCU_ACTIVE))
  #error MIMX8MN6_ca53 memory map: There is already included another memory map. Only one memory map can be included.
#endif /* (defined(MCU_ACTIVE)) */
#define MCU_ACTIVE

#include <stdint.h>

/** Memory map major version (memory maps with equal major version number are
 * compatible) */
#define MCU_MEM_MAP_VERSION 0x0200U
/** Memory map minor version */
#define MCU_MEM_MAP_VERSION_MINOR 0x0000U


/* ----------------------------------------------------------------------------
   -- Interrupt vector numbers
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Interrupt_vector_numbers Interrupt vector numbers
 * @{
 */

/** Interrupt Number Definitions */
typedef enum {
  INT_Software0_IRQn           = 0,                /**< Software Generated Interrupt 0 */
  INT_Software1_IRQn           = 1,                /**< Software Generated Interrupt 1 */
  INT_Software2_IRQn           = 2,                /**< Software Generated Interrupt 2 */
  INT_Software3_IRQn           = 3,                /**< Software Generated Interrupt 3 */
  INT_Software4_IRQn           = 4,                /**< Software Generated Interrupt 4 */
  INT_Software5_IRQn           = 5,                /**< Software Generated Interrupt 5 */
  INT_Software6_IRQn           = 6,                /**< Software Generated Interrupt 6 */
  INT_Software7_IRQn           = 7,                /**< Software Generated Interrupt 7 */
  INT_Software8_IRQn           = 8,                /**< Software Generated Interrupt 8 */
  INT_Software9_IRQn           = 9,                /**< Software Generated Interrupt 9 */
  INT_Software10_IRQn          = 10,               /**< Software Generated Interrupt 10 */
  INT_Software11_IRQn          = 11,               /**< Software Generated Interrupt 11 */
  INT_Software12_IRQn          = 12,               /**< Software Generated Interrupt 12 */
  INT_Software13_IRQn          = 13,               /**< Software Generated Interrupt 13 */
  INT_Software14_IRQn          = 14,               /**< Software Generated Interrupt 14 */
  INT_Software15_IRQn          = 15,               /**< Software Generated Interrupt 15 */
  INT_Reserved16               = 16,               /**< Reserved Interrupt */
  INT_Reserved17               = 17,               /**< Reserved Interrupt */
  INT_Reserved18               = 18,               /**< Reserved Interrupt */
  INT_Reserved19               = 19,               /**< Reserved Interrupt */
  INT_Reserved20               = 20,               /**< Reserved Interrupt */
  INT_Reserved21               = 21,               /**< Reserved Interrupt */
  INT_DCC                      = 22,               /**< DCC resceive or transmit Interrupt */
  INT_PMU                      = 23,               /**< PMU Interrupt */
  INT_CTI                      = 24,               /**< CTI Interrupt */
  INT_VirtualMaintenance       = 25,               /**< Virtual Maintenance Interrupt */
  INT_HypervisorTimer          = 26,               /**< Hypervisor Timer Interrupt */
  INT_VirtualTimer             = 27,               /**< Virtual Timer Interrupt */
  INT_Reserved28               = 28,               /**< Reserved Interrupt */
  INT_SecurePhyTimer           = 29,               /**< Secure Physical Timer Interrupt */
  INT_NonSecurePhyTimer        = 30,               /**< Non-secure Physical Timer Interrupt */
  INT_Reserved31               = 31,               /**< Reserved Interrupt */
  INT_GPR_IRQ                  = 32,               /**< GPR Interrupt. Used to notify cores on exception condition while boot. */
  INT_DAP                      = 33,               /**< DAP Interrupt */
  INT_SDMA1                    = 34,               /**< AND of all 48 SDMA interrupts (events) from all the channels */
  INT_GPU3D                    = 35,               /**< GPU3D Interrupt */
  INT_SNVS                     = 36,               /**< ON-OFF button press shorter than 5 seconds (pulse event) */
  INT_LCDIF                    = 37,               /**< LCDIF Sync Interrupt */
  INT_SPDIF1                   = 38,               /**< SPDIF1 Interrupt */
  INT_Reserved39               = 39,               /**< Reserved Interrupt */
  INT_Reserved40               = 40,               /**< Reserved Interrupt */
  INT_QOS                      = 41,               /**< QOS interrupt */
  INT_WDOG3                    = 42,               /**< Watchdog Timer reset */
  INT_HS_CP1                   = 43,               /**< HS Interrupt Request */
  INT_APBHDMA                  = 44,               /**< GPMI operation channel 0-3 description complete interrupt */
  INT_Reserved45               = 45,               /**< Reserved Interrupt */
  INT_BCH                      = 46,               /**< BCH operation complete interrupt */
  INT_GPMI                     = 47,               /**< GPMI operation TIMEOUT ERROR interrupt */
  INT_ISI                      = 48,               /**< ISI Interrupt */
  INT_MIPI_CSI1                = 49,               /**< MIPI CSI Interrupt */
  INT_MIPI_DSI                 = 50,               /**< MIPI DSI Interrupt */
  INT_SNVS_Consolidated        = 51,               /**< SRTC Consolidated Interrupt. Non TZ. */
  INT_SNVS_Security            = 52,               /**< SRTC Security Interrupt. TZ. */
  INT_CSU                      = 53,               /**< CSU Interrupt Request. Indicates to the processor that one or more alarm inputs were asserted. */
  INT_USDHC1                   = 54,               /**< uSDHC1 Enhanced SDHC Interrupt Request */
  INT_USDHC2                   = 55,               /**< uSDHC2 Enhanced SDHC Interrupt Request */
  INT_USDHC3                   = 56,               /**< uSDHC3 Enhanced SDHC Interrupt Request */
  INT_Reserved57               = 57,               /**< Reserved Interrupt */
  INT_UART1                    = 58,               /**< UART-1 ORed interrupt */
  INT_UART2                    = 59,               /**< UART-2 ORed interrupt */
  INT_UART3                    = 60,               /**< UART-3 ORed interrupt */
  INT_UART4                    = 61,               /**< UART-4 ORed interrupt */
  INT_Reserved62               = 62,               /**< Reserved Interrupt */
  INT_ECSPI1                   = 63,               /**< ECSPI1 interrupt request line to the core. */
  INT_ECSPI2                   = 64,               /**< ECSPI2 interrupt request line to the core. */
  INT_ECSPI3                   = 65,               /**< ECSPI3 interrupt request line to the core. */
  INT_SDMA3                    = 66,               /**< AND of all 48 SDMA interrupts (events) from all the channels */
  INT_I2C1                     = 67,               /**< I2C-1 Interrupt */
  INT_I2C2                     = 68,               /**< I2C-2 Interrupt */
  INT_I2C3                     = 69,               /**< I2C-3 Interrupt */
  INT_I2C4                     = 70,               /**< I2C-4 Interrupt */
  INT_RDC                      = 71,               /**< RDC interrupt */
  INT_USB1                     = 72,               /**< USB1 Interrupt */
  INT_Reserved73               = 73,               /**< Reserved Interrupt */
  INT_ISI_CH1                  = 74,               /**< ISI Camera Channel 1 Interrupt */
  INT_ISI_CH2                  = 75,               /**< ISI Camera Channel 2 Interrupt */
  INT_MICFIL_VoiceEvent        = 76,               /**< Digital Microphone interface voice activity detector event interrupt */
  INT_MICFIL_VoiceError        = 77,               /**< Digital Microphone interface voice activity detector error interrupt */
  INT_GPT6                     = 78,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_SCTR_IRQ0                = 79,               /**< ISO7816IP Interrupt 0 */
  INT_SCTR_IRQ1                = 80,               /**< ISO7816IP Interrupt 1 */
  INT_TEMPMON_LOW              = 81,               /**< TempSensor (Temperature low alarm). */
  INT_I2S3                     = 82,               /**< SAI3 Receive / Transmit Interrupt */
  INT_GPT5                     = 83,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT4                     = 84,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT3                     = 85,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT2                     = 86,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPT1                     = 87,               /**< OR of GPT Rollover interrupt line, Input Capture 1 and 2 lines, Output Compare 1, 2, and 3 Interrupt lines */
  INT_GPIO1_INT7               = 88,               /**< Active HIGH Interrupt from INT7 from GPIO */
  INT_GPIO1_INT6               = 89,               /**< Active HIGH Interrupt from INT6 from GPIO */
  INT_GPIO1_INT5               = 90,               /**< Active HIGH Interrupt from INT5 from GPIO */
  INT_GPIO1_INT4               = 91,               /**< Active HIGH Interrupt from INT4 from GPIO */
  INT_GPIO1_INT3               = 92,               /**< Active HIGH Interrupt from INT3 from GPIO */
  INT_GPIO1_INT2               = 93,               /**< Active HIGH Interrupt from INT2 from GPIO */
  INT_GPIO1_INT1               = 94,               /**< Active HIGH Interrupt from INT1 from GPIO */
  INT_GPIO1_INT0               = 95,               /**< Active HIGH Interrupt from INT0 from GPIO */
  INT_GPIO1_Combined_0_15      = 96,               /**< Combined interrupt indication for GPIO1 signal 0 throughout 15 */
  INT_GPIO1_Combined_16_31     = 97,               /**< Combined interrupt indication for GPIO1 signal 16 throughout 31 */
  INT_GPIO2_Combined_0_15      = 98,               /**< Combined interrupt indication for GPIO2 signal 0 throughout 15 */
  INT_GPIO2_Combined_16_31     = 99,               /**< Combined interrupt indication for GPIO2 signal 16 throughout 31 */
  INT_GPIO3_Combined_0_15      = 100,              /**< Combined interrupt indication for GPIO3 signal 0 throughout 15 */
  INT_GPIO3_Combined_16_31     = 101,              /**< Combined interrupt indication for GPIO3 signal 16 throughout 31 */
  INT_GPIO4_Combined_0_15      = 102,              /**< Combined interrupt indication for GPIO4 signal 0 throughout 15 */
  INT_GPIO4_Combined_16_31     = 103,              /**< Combined interrupt indication for GPIO4 signal 16 throughout 31 */
  INT_GPIO5_Combined_0_15      = 104,              /**< Combined interrupt indication for GPIO5 signal 0 throughout 15 */
  INT_GPIO5_Combined_16_31     = 105,              /**< Combined interrupt indication for GPIO5 signal 16 throughout 31 */
  INT_Reserved106              = 106,              /**< Reserved interrupt */
  INT_Reserved107              = 107,              /**< Reserved interrupt */
  INT_Reserved108              = 108,              /**< Reserved interrupt */
  INT_Reserved109              = 109,              /**< Reserved interrupt */
  INT_WDOG1                    = 110,              /**< Watchdog Timer reset */
  INT_WDOG2                    = 111,              /**< Watchdog Timer reset */
  INT_Reserved112              = 112,              /**< Reserved Interrupt */
  INT_PWM1                     = 113,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM2                     = 114,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM3                     = 115,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_PWM4                     = 116,              /**< Cumulative interrupt line. OR of Rollover Interrupt line, Compare Interrupt line and FIFO Waterlevel crossing interrupt line. */
  INT_CCM_IRQ1                 = 117,              /**< CCM Interrupt Request 1 */
  INT_CCM_IRQ2                 = 118,              /**< CCM Interrupt Request 2 */
  INT_GPC                      = 119,              /**< GPC Interrupt Request 1 */
  INT_MU_A53                   = 120,              /**< Interrupt to A53 */
  INT_SRC                      = 121,              /**< SRC interrupt request */
  INT_I2S5                     = 122,              /**< SAI5/6 Receive / Transmit Interrupt */
  INT_RTIC                     = 123,              /**< RTIC Interrupt */
  INT_CPU_PerformanceUnit      = 124,              /**< Performance Unit Interrupts from Cheetah (interrnally: PMUIRQ[n] */
  INT_CPU_CTI_Trigger          = 125,              /**< CTI trigger outputs (internal: nCTIIRQ[n] */
  INT_SRC_Combined             = 126,              /**< Combined CPU wdog interrupts (4x) out of SRC. */
  INT_Reserved127              = 127,              /**< Reserved Interrupt */
  INT_I2S2                     = 128,              /**< SAI2 Receive / Transmit Interrupt */
  INT_MU_M7                    = 129,              /**< Interrupt to M7 */
  INT_DDR_PerformanceMonitor   = 130,              /**< ddr Interrupt for performance monitor */
  INT_DDR_Err                  = 131,              /**< ddr Interrupt */
  INT_Reserved132              = 132,              /**< Reserved interrupt */
  INT_CPU_Error_AXI            = 133,              /**< CPU Error indicator for AXI transaction with a write response error condition */
  INT_CPU_Error_L2RAM          = 134,              /**< CPU Error indicator for L2 RAM double-bit ECC error */
  INT_SDMA2                    = 135,              /**< AND of all 48 SDMA interrupts (events) from all the channels */
  INT_SJC                      = 136,              /**< Interrupt triggered by SJC register */
  INT_CAAM_IRQ0                = 137,              /**< CAAM interrupt queue for JQ */
  INT_CAAM_IRQ1                = 138,              /**< CAAM interrupt queue for JQ */
  INT_QSPI                     = 139,              /**< QSPI Interrupt */
  INT_TZASC                    = 140,              /**< TZASC (PL380) interrupt */
  INT_MICFIL                   = 141,              /**< Digital Microphone interface interrupt */
  INT_MICFIL_Error             = 142,              /**< Digital Microphone interface error interrupt */
  INT_I2S7                     = 143,              /**< SAI7 Receive / Transmit Interrupt */
  INT_PERFMON1                 = 144,              /**< General Interrupt */
  INT_PERFMON2                 = 145,              /**< General Interrupt */
  INT_CAAM_Job_Ring2           = 146,              /**< CAAM interrupt queue for JQ */
  INT_CAAM_ERROR               = 147,              /**< Recoverable error interrupt */
  INT_HS_CP0                   = 148,              /**< HS Interrupt Request */
  INT_CM7_CTI                  = 149,              /**< CTI trigger outputs from CM7 platform */
  INT_ENET_MAC0_Rx_Tx_Done1    = 150,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  INT_ENET_MAC0_Rx_Tx_Done2    = 151,              /**< MAC 0 Receive / Trasmit Frame / Buffer Done */
  INT_ENET                     = 152,              /**< MAC 0 IRQ */
  INT_ENET_1588                = 153,              /**< MAC 0 1588 Timer Interrupt - synchronous */
  INT_ASRC                     = 154,              /**< ASRC Interrupt */
  INT_Reserved155              = 155,              /**< Reserved Interrupt */
  INT_Reserved156              = 156,              /**< Reserved Interrupt */
  INT_Reserved157              = 157,              /**< Reserved Interrupt */
  INT_ISI_CH3                  = 158,              /**< ISI Camera Channel 3 Interrupt */
  INT_Reserved159              = 159               /**< Reserved Interrupt */
} IRQInterruptIndex;

/*!
 * @}
 */ /* end of group Interrupt_vector_numbers */


/* ----------------------------------------------------------------------------
   -- Mapping Information
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Mapping_Information Mapping Information
 * @{
 */

/** Mapping Information */
/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_MUX_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_MUX_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_mux_ctl_pad
{
    kIOMUXC_SW_MUX_CTL_PAD_BOOT_MODE2 = 0U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_BOOT_MODE3 = 1U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00 = 2U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01 = 3U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02 = 4U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03 = 5U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04 = 6U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05 = 7U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06 = 8U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07 = 9U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08 = 10U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09 = 11U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10 = 12U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11 = 13U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12 = 14U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13 = 15U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO14 = 16U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_GPIO1_IO15 = 17U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDC = 18U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_MDIO = 19U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD3 = 20U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD2 = 21U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD1 = 22U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TD0 = 23U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TX_CTL = 24U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_TXC = 25U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RX_CTL = 26U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RXC = 27U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD0 = 28U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD1 = 29U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD2 = 30U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ENET_RD3 = 31U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CLK  = 32U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_CMD  = 33U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA0 = 34U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA1 = 35U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA2 = 36U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA3 = 37U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA4 = 38U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA5 = 39U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA6 = 40U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_DATA7 = 41U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_RESET_B = 42U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD1_STROBE = 43U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CD_B = 44U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CLK  = 45U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_CMD  = 46U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA0 = 47U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA1 = 48U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA2 = 49U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_DATA3 = 50U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_RESET_B = 51U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SD2_WP   = 52U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_ALE = 53U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B = 54U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B = 55U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE2_B = 56U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CE3_B = 57U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_CLE = 58U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA00 = 59U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA01 = 60U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA02 = 61U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA03 = 62U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA04 = 63U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA05 = 64U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA06 = 65U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DATA07 = 66U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_DQS = 67U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_RE_B = 68U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_READY_B = 69U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WE_B = 70U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_NAND_WP_B = 71U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXFS = 72U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXC = 73U,         /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD0 = 74U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD1 = 75U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD2 = 76U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_RXD3 = 77U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI5_MCLK = 78U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXFS = 100U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXC = 101U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_RXD0 = 102U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXFS = 103U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXC = 104U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_TXD0 = 105U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI2_MCLK = 106U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXFS = 107U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXC = 108U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_RXD = 109U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXFS = 110U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXC = 111U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_TXD = 112U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SAI3_MCLK = 113U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_TX = 114U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_RX = 115U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_SPDIF_EXT_CLK = 116U,   /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SCLK = 117U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MOSI = 118U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_MISO = 119U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI1_SS0 = 120U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SCLK = 121U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MOSI = 122U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_MISO = 123U,     /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_ECSPI2_SS0 = 124U,      /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SCL = 125U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C1_SDA = 126U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SCL = 127U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C2_SDA = 128U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SCL = 129U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C3_SDA = 130U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SCL = 131U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_I2C4_SDA = 132U,        /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_RXD = 133U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART1_TXD = 134U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_RXD = 135U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART2_TXD = 136U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_RXD = 137U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART3_TXD = 138U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_RXD = 139U,       /**< IOMUXC SW_MUX_CTL_PAD index */
    kIOMUXC_SW_MUX_CTL_PAD_UART4_TXD = 140U,       /**< IOMUXC SW_MUX_CTL_PAD index */
} iomuxc_sw_mux_ctl_pad_t;

/*!
 * @addtogroup iomuxc_pads
 * @{ */

/*******************************************************************************
 * Definitions
*******************************************************************************/

/*!
 * @brief Enumeration for the IOMUXC SW_PAD_CTL_PAD
 *
 * Defines the enumeration for the IOMUXC SW_PAD_CTL_PAD collections.
 */
typedef enum _iomuxc_sw_pad_ctl_pad
{
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE0 = 0U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE1 = 1U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE2 = 2U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_BOOT_MODE3 = 3U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_MOD = 4U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDI = 5U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TMS = 6U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TCK = 7U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_JTAG_TDO = 8U,          /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_STBY_REQ = 10U,    /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_PMIC_ON_REQ = 11U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00 = 15U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01 = 16U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02 = 17U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03 = 18U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04 = 19U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05 = 20U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06 = 21U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07 = 22U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08 = 23U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09 = 24U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10 = 25U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11 = 26U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12 = 27U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13 = 28U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO14 = 29U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_GPIO1_IO15 = 30U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDC = 31U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_MDIO = 32U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD3 = 33U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD2 = 34U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD1 = 35U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TD0 = 36U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TX_CTL = 37U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_TXC = 38U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RX_CTL = 39U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RXC = 40U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD0 = 41U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD1 = 42U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD2 = 43U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ENET_RD3 = 44U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CLK  = 45U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_CMD  = 46U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA0 = 47U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA1 = 48U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA2 = 49U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA3 = 50U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA4 = 51U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA5 = 52U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA6 = 53U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_DATA7 = 54U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_RESET_B = 55U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD1_STROBE = 56U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CD_B = 57U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CLK  = 58U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_CMD  = 59U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA0 = 60U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA1 = 61U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA2 = 62U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_DATA3 = 63U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_RESET_B = 64U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SD2_WP   = 65U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_ALE = 66U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B = 67U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B = 68U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE2_B = 69U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CE3_B = 70U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_CLE = 71U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA00 = 72U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA01 = 73U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA02 = 74U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA03 = 75U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA04 = 76U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA05 = 77U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA06 = 78U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DATA07 = 79U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_DQS = 80U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_RE_B = 81U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_READY_B = 82U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WE_B = 83U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_NAND_WP_B = 84U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXFS = 85U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXC = 86U,         /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD0 = 87U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD1 = 88U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD2 = 89U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_RXD3 = 90U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI5_MCLK = 91U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXFS = 113U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXC = 114U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_RXD0 = 115U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXFS = 116U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXC = 117U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_TXD0 = 118U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI2_MCLK = 119U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXFS = 120U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXC = 121U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_RXD = 122U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXFS = 123U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXC = 124U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_TXD = 125U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SAI3_MCLK = 126U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_TX = 127U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_RX = 128U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_SPDIF_EXT_CLK = 129U,   /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SCLK = 130U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MOSI = 131U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_MISO = 132U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI1_SS0 = 133U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SCLK = 134U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MOSI = 135U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_MISO = 136U,     /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_ECSPI2_SS0 = 137U,      /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SCL = 138U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C1_SDA = 139U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SCL = 140U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C2_SDA = 141U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SCL = 142U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C3_SDA = 143U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SCL = 144U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_I2C4_SDA = 145U,        /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_RXD = 146U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART1_TXD = 147U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_RXD = 148U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART2_TXD = 149U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_RXD = 150U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART3_TXD = 151U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_RXD = 152U,       /**< IOMUXC SW_PAD_CTL_PAD index */
    kIOMUXC_SW_PAD_CTL_PAD_UART4_TXD = 153U,       /**< IOMUXC SW_PAD_CTL_PAD index */
} iomuxc_sw_pad_ctl_pad_t;

/* @} */

/*!
 * @brief Enumeration for the IOMUXC select input
 *
 * Defines the enumeration for the IOMUXC select input collections.
 */
typedef enum _iomuxc_select_input
{
    kIOMUXC_CCM_PMIC_READY_SELECT_INPUT = 0U,      /**< IOMUXC select input index */
    kIOMUXC_ENET1_MDIO_SELECT_INPUT = 1U,          /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_BCLK_SELECT_INPUT = 5U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_DATA0_SELECT_INPUT = 6U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_DATA1_SELECT_INPUT = 7U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_DATA2_SELECT_INPUT = 8U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_DATA3_SELECT_INPUT = 9U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_RX_SYNC_SELECT_INPUT = 10U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_BCLK_SELECT_INPUT = 11U,       /**< IOMUXC select input index */
    kIOMUXC_SAI5_TX_SYNC_SELECT_INPUT = 12U,       /**< IOMUXC select input index */
    kIOMUXC_UART1_RTS_B_SELECT_INPUT = 13U,        /**< IOMUXC select input index */
    kIOMUXC_UART1_RX_SELECT_INPUT   = 14U,         /**< IOMUXC select input index */
    kIOMUXC_UART2_RTS_B_SELECT_INPUT = 15U,        /**< IOMUXC select input index */
    kIOMUXC_UART2_RX_SELECT_INPUT   = 16U,         /**< IOMUXC select input index */
    kIOMUXC_UART3_RTS_B_SELECT_INPUT = 17U,        /**< IOMUXC select input index */
    kIOMUXC_UART3_RX_SELECT_INPUT   = 18U,         /**< IOMUXC select input index */
    kIOMUXC_UART4_RTS_B_SELECT_INPUT = 19U,        /**< IOMUXC select input index */
    kIOMUXC_UART4_RX_SELECT_INPUT   = 20U,         /**< IOMUXC select input index */
    kIOMUXC_PDM_BIT_STREAM0_SELECT_INPUT = 30U,    /**< IOMUXC select input index */
    kIOMUXC_PDM_BIT_STREAM1_SELECT_INPUT = 31U,    /**< IOMUXC select input index */
    kIOMUXC_PDM_BIT_STREAM2_SELECT_INPUT = 32U,    /**< IOMUXC select input index */
    kIOMUXC_PDM_BIT_STREAM3_SELECT_INPUT = 33U,    /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA7_SELECT_INPUT = 36U,       /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA5_SELECT_INPUT = 37U,       /**< IOMUXC select input index */
    kIOMUXC_ENET1_RGMII_RD1_SELECT_INPUT = 38U,    /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA4_SELECT_INPUT = 39U,       /**< IOMUXC select input index */
    kIOMUXC_I2C1_SCL_SELECT_INPUT   = 40U,         /**< IOMUXC select input index */
    kIOMUXC_I2C2_SDA_SELECT_INPUT   = 41U,         /**< IOMUXC select input index */
    kIOMUXC_ECSPI1_SS0_SELECT_INPUT = 42U,         /**< IOMUXC select input index */
    kIOMUXC_SPDIF1_EXT_CLK_SELECT_INPUT = 43U,     /**< IOMUXC select input index */
    kIOMUXC_I2C1_SDA_SELECT_INPUT   = 44U,         /**< IOMUXC select input index */
    kIOMUXC_ECSPI2_SS0_SELECT_INPUT = 45U,         /**< IOMUXC select input index */
    kIOMUXC_ENET1_RGMII_RX_CTL_SELECT_INPUT = 46U, /**< IOMUXC select input index */
    kIOMUXC_ECSPI2_MISO_SELECT_INPUT = 47U,        /**< IOMUXC select input index */
    kIOMUXC_ENET1_RGMII_RD0_SELECT_INPUT = 48U,    /**< IOMUXC select input index */
    kIOMUXC_ECSPI2_SCLK_SELECT_INPUT = 49U,        /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA6_SELECT_INPUT = 50U,       /**< IOMUXC select input index */
    kIOMUXC_I2C3_SCL_SELECT_INPUT   = 51U,         /**< IOMUXC select input index */
    kIOMUXC_I2C4_SDA_SELECT_INPUT   = 52U,         /**< IOMUXC select input index */
    kIOMUXC_ECSPI2_MOSI_SELECT_INPUT = 53U,        /**< IOMUXC select input index */
    kIOMUXC_SAI5_MCLK_SELECT_INPUT  = 54U,         /**< IOMUXC select input index */
    kIOMUXC_USDHC3_CD_B_SELECT_INPUT = 55U,        /**< IOMUXC select input index */
    kIOMUXC_USDHC3_STROBE_SELECT_INPUT = 56U,      /**< IOMUXC select input index */
    kIOMUXC_USDHC3_CLK_SELECT_INPUT = 57U,         /**< IOMUXC select input index */
    kIOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT = 58U, /**< IOMUXC select input index */
    kIOMUXC_ECSPI1_MOSI_SELECT_INPUT = 59U,        /**< IOMUXC select input index */
    kIOMUXC_SAI2_RX_DATA1_SELECT_INPUT = 60U,      /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA1_SELECT_INPUT = 61U,       /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA0_SELECT_INPUT = 62U,       /**< IOMUXC select input index */
    kIOMUXC_USDHC3_WP_SELECT_INPUT  = 63U,         /**< IOMUXC select input index */
    kIOMUXC_I2C3_SDA_SELECT_INPUT   = 64U,         /**< IOMUXC select input index */
    kIOMUXC_SAI3_MCLK_SELECT_INPUT  = 65U,         /**< IOMUXC select input index */
    kIOMUXC_ECSPI1_MISO_SELECT_INPUT = 66U,        /**< IOMUXC select input index */
    kIOMUXC_ENET1_RX_ER_SELECT_INPUT = 67U,        /**< IOMUXC select input index */
    kIOMUXC_SPDIF1_IN_SELECT_INPUT  = 68U,         /**< IOMUXC select input index */
    kIOMUXC_I2C2_SCL_SELECT_INPUT   = 69U,         /**< IOMUXC select input index */
    kIOMUXC_I2C4_SCL_SELECT_INPUT   = 70U,         /**< IOMUXC select input index */
    kIOMUXC_ECSPI1_SCLK_SELECT_INPUT = 71U,        /**< IOMUXC select input index */
    kIOMUXC_USDHC3_CMD_SELECT_INPUT = 72U,         /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA3_SELECT_INPUT = 73U,       /**< IOMUXC select input index */
    kIOMUXC_USDHC3_DATA2_SELECT_INPUT = 74U,       /**< IOMUXC select input index */
    kIOMUXC_GPT1_CLK_SELECT_INPUT   = 75U,         /**< IOMUXC select input index */
    kIOMUXC_GPT1_CAPTURE2_SELECT_INPUT = 76U,      /**< IOMUXC select input index */
    kIOMUXC_GPT1_CAPTURE1_SELECT_INPUT = 77U,      /**< IOMUXC select input index */
} iomuxc_select_input_t;


/*!
 * @}
 */ /* end of group Mapping_Information */

 #define CCM_CCGR_DVFS         CCM_CCGR_REG(CCM_BASE_PTR,   0)
 #define CCM_CCGR_ANAMIX       CCM_CCGR_REG(CCM_BASE_PTR,   1)
 #define CCM_CCGR_CPU          CCM_CCGR_REG(CCM_BASE_PTR,   2)
 #define CCM_CCGR_CSU          CCM_CCGR_REG(CCM_BASE_PTR,   3)
 #define CCM_CCGR_DEBUG        CCM_CCGR_REG(CCM_BASE_PTR,   4)
 #define CCM_CCGR_DDR1         CCM_CCGR_REG(CCM_BASE_PTR,   5)
 #define CCM_CCGR_CM7          CCM_CCGR_REG(CCM_BASE_PTR,   6)
 #define CCM_CCGR_ECSPI1       CCM_CCGR_REG(CCM_BASE_PTR,   7)
 #define CCM_CCGR_ECSPI2       CCM_CCGR_REG(CCM_BASE_PTR,   8)
 #define CCM_CCGR_ECSPI3       CCM_CCGR_REG(CCM_BASE_PTR,   9)
 #define CCM_CCGR_ENET1        CCM_CCGR_REG(CCM_BASE_PTR,  10)
 #define CCM_CCGR_GPIO1        CCM_CCGR_REG(CCM_BASE_PTR,  11)
 #define CCM_CCGR_GPIO2        CCM_CCGR_REG(CCM_BASE_PTR,  12)
 #define CCM_CCGR_GPIO3        CCM_CCGR_REG(CCM_BASE_PTR,  13)
 #define CCM_CCGR_GPIO4        CCM_CCGR_REG(CCM_BASE_PTR,  14)
 #define CCM_CCGR_GPIO5        CCM_CCGR_REG(CCM_BASE_PTR,  15)
 #define CCM_CCGR_GPT1         CCM_CCGR_REG(CCM_BASE_PTR,  16)
 #define CCM_CCGR_GPT2         CCM_CCGR_REG(CCM_BASE_PTR,  17)
 #define CCM_CCGR_GPT3         CCM_CCGR_REG(CCM_BASE_PTR,  18)
 #define CCM_CCGR_GPT4         CCM_CCGR_REG(CCM_BASE_PTR,  19)
 #define CCM_CCGR_GPT5         CCM_CCGR_REG(CCM_BASE_PTR,  20)
 #define CCM_CCGR_GPT6         CCM_CCGR_REG(CCM_BASE_PTR,  21)
 #define CCM_CCGR_HS           CCM_CCGR_REG(CCM_BASE_PTR,  22)
 #define CCM_CCGR_I2C1         CCM_CCGR_REG(CCM_BASE_PTR,  23)
 #define CCM_CCGR_I2C2         CCM_CCGR_REG(CCM_BASE_PTR,  24)
 #define CCM_CCGR_I2C3         CCM_CCGR_REG(CCM_BASE_PTR,  25)
 #define CCM_CCGR_I2C4         CCM_CCGR_REG(CCM_BASE_PTR,  26)
 #define CCM_CCGR_IOMUX        CCM_CCGR_REG(CCM_BASE_PTR,  27)
 #define CCM_CCGR_IPMUX1       CCM_CCGR_REG(CCM_BASE_PTR,  28)
 #define CCM_CCGR_IPMUX2       CCM_CCGR_REG(CCM_BASE_PTR,  29)
 #define CCM_CCGR_IPMUX3       CCM_CCGR_REG(CCM_BASE_PTR,  30)
 #define CCM_CCGR_IPMUX4       CCM_CCGR_REG(CCM_BASE_PTR,  31)
 #define CCM_CCGR_SNVSMIX      CCM_CCGR_REG(CCM_BASE_PTR,  32)
 #define CCM_CCGR_MU           CCM_CCGR_REG(CCM_BASE_PTR,  33)
 #define CCM_CCGR_OCOTP        CCM_CCGR_REG(CCM_BASE_PTR,  34)
 #define CCM_CCGR_OCRAM        CCM_CCGR_REG(CCM_BASE_PTR,  35)
 #define CCM_CCGR_OCRAM_S      CCM_CCGR_REG(CCM_BASE_PTR,  36)
 #define CCM_CCGR_PERFMON1     CCM_CCGR_REG(CCM_BASE_PTR,  38)
 #define CCM_CCGR_PERFMON2     CCM_CCGR_REG(CCM_BASE_PTR,  39)
 #define CCM_CCGR_PWM1         CCM_CCGR_REG(CCM_BASE_PTR,  40)
 #define CCM_CCGR_PWM2         CCM_CCGR_REG(CCM_BASE_PTR,  41)
 #define CCM_CCGR_PWM3         CCM_CCGR_REG(CCM_BASE_PTR,  42)
 #define CCM_CCGR_PWM4         CCM_CCGR_REG(CCM_BASE_PTR,  43)
 #define CCM_CCGR_QOS          CCM_CCGR_REG(CCM_BASE_PTR,  44)
 #define CCM_CCGR_QOS_DISPMIX  CCM_CCGR_REG(CCM_BASE_PTR,  45)
 #define CCM_CCGR_QOS_ENET     CCM_CCGR_REG(CCM_BASE_PTR,  46)
 #define CCM_CCGR_QSPI         CCM_CCGR_REG(CCM_BASE_PTR,  47)
 #define CCM_CCGR_RAWNAND      CCM_CCGR_REG(CCM_BASE_PTR,  48)
 #define CCM_CCGR_RDC          CCM_CCGR_REG(CCM_BASE_PTR,  49)
 #define CCM_CCGR_ROM          CCM_CCGR_REG(CCM_BASE_PTR,  50)
 #define CCM_CCGR_SAI1         CCM_CCGR_REG(CCM_BASE_PTR,  51)
 #define CCM_CCGR_SAI2         CCM_CCGR_REG(CCM_BASE_PTR,  52)
 #define CCM_CCGR_SAI3         CCM_CCGR_REG(CCM_BASE_PTR,  53)
 #define CCM_CCGR_SAI4         CCM_CCGR_REG(CCM_BASE_PTR,  54)
 #define CCM_CCGR_SAI5         CCM_CCGR_REG(CCM_BASE_PTR,  55)
 #define CCM_CCGR_SAI6         CCM_CCGR_REG(CCM_BASE_PTR,  56)
 #define CCM_CCGR_SCTR         CCM_CCGR_REG(CCM_BASE_PTR,  57)
 #define CCM_CCGR_SDMA1        CCM_CCGR_REG(CCM_BASE_PTR,  58)
 #define CCM_CCGR_SDMA2        CCM_CCGR_REG(CCM_BASE_PTR,  59)
 #define CCM_CCGR_SEC_DEBUG    CCM_CCGR_REG(CCM_BASE_PTR,  60)
 #define CCM_CCGR_SEMA1        CCM_CCGR_REG(CCM_BASE_PTR,  61)
 #define CCM_CCGR_SEMA2        CCM_CCGR_REG(CCM_BASE_PTR,  62)
 #define CCM_CCGR_SIM_DISPLAY  CCM_CCGR_REG(CCM_BASE_PTR,  63)
 #define CCM_CCGR_SIM_ENET     CCM_CCGR_REG(CCM_BASE_PTR,  64)
 #define CCM_CCGR_SIM_M        CCM_CCGR_REG(CCM_BASE_PTR,  65)
 #define CCM_CCGR_SIM_MAIN     CCM_CCGR_REG(CCM_BASE_PTR,  66)
 #define CCM_CCGR_SIM_S        CCM_CCGR_REG(CCM_BASE_PTR,  67)
 #define CCM_CCGR_SIM_WAKEUP   CCM_CCGR_REG(CCM_BASE_PTR,  68)
 #define CCM_CCGR_SIM_HSIO     CCM_CCGR_REG(CCM_BASE_PTR,  69)
 #define CCM_CCGR_SNVS         CCM_CCGR_REG(CCM_BASE_PTR,  71)
 #define CCM_CCGR_TRACE        CCM_CCGR_REG(CCM_BASE_PTR,  72)
 #define CCM_CCGR_UART1        CCM_CCGR_REG(CCM_BASE_PTR,  73)
 #define CCM_CCGR_UART2        CCM_CCGR_REG(CCM_BASE_PTR,  74)
 #define CCM_CCGR_UART3        CCM_CCGR_REG(CCM_BASE_PTR,  75)
 #define CCM_CCGR_UART4        CCM_CCGR_REG(CCM_BASE_PTR,  76)
 #define CCM_CCGR_USB          CCM_CCGR_REG(CCM_BASE_PTR,  77)
 #define CCM_CCGR_GPU3D        CCM_CCGR_REG(CCM_BASE_PTR,  79)
 #define CCM_CCGR_USDHC1       CCM_CCGR_REG(CCM_BASE_PTR,  81)
 #define CCM_CCGR_USDHC2       CCM_CCGR_REG(CCM_BASE_PTR,  82)
 #define CCM_CCGR_WDOG1        CCM_CCGR_REG(CCM_BASE_PTR,  83)
 #define CCM_CCGR_WDOG2        CCM_CCGR_REG(CCM_BASE_PTR,  84)
 #define CCM_CCGR_WDOG3        CCM_CCGR_REG(CCM_BASE_PTR,  85)
 #define CCM_CCGR_GPU          CCM_CCGR_REG(CCM_BASE_PTR,  87)
 #define CCM_CCGR_ASRC         CCM_CCGR_REG(CCM_BASE_PTR,  88)
 #define CCM_CCGR_PDM          CCM_CCGR_REG(CCM_BASE_PTR,  91)
 #define CCM_CCGR_GIC          CCM_CCGR_REG(CCM_BASE_PTR,  92)
 #define CCM_CCGR_DISPLAY      CCM_CCGR_REG(CCM_BASE_PTR,  93)
 #define CCM_CCGR_USDHC3       CCM_CCGR_REG(CCM_BASE_PTR,  94)
 #define CCM_CCGR_SDMA3        CCM_CCGR_REG(CCM_BASE_PTR,  95)
 #define CCM_CCGR_XTALOSC      CCM_CCGR_REG(CCM_BASE_PTR,  96)
 #define CCM_CCGR_PLL          CCM_CCGR_REG(CCM_BASE_PTR,  97)
 #define CCM_CCGR_TEMPSENSOR   CCM_CCGR_REG(CCM_BASE_PTR,  98)
 #define CCM_CCGR_SAI7         CCM_CCGR_REG(CCM_BASE_PTR, 101)

 #define CCM_TARGET_ROOT_ARM_A53            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   0)
 #define CCM_TARGET_ROOT_ARM_M7             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   1)
 #define CCM_TARGET_ROOT_GPU_CORE           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   3)
 #define CCM_TARGET_ROOT_GPU_SHADER         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,   4)
 #define CCM_TARGET_ROOT_MAIN_AXI           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  16)
 #define CCM_TARGET_ROOT_ENET_AXI           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  17)
 #define CCM_TARGET_ROOT_NAND_USDHC_BUS     CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  18)
 #define CCM_TARGET_ROOT_DISPLAY_AXI        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  20)
 #define CCM_TARGET_ROOT_DISPLAY_APB        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  21)
 #define CCM_TARGET_ROOT_USB_BUS            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  23)
 #define CCM_TARGET_ROOT_GPU_AXI            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  24)
 #define CCM_TARGET_ROOT_GPU_AHB            CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  25)
 #define CCM_TARGET_ROOT_NOC                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  26)
 #define CCM_TARGET_ROOT_AHB                CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  32)
 #define CCM_TARGET_ROOT_AUDIO_AHB          CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  34)
 #define CCM_TARGET_ROOT_DRAM_ALT           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  64)
 #define CCM_TARGET_ROOT_DRAM_APB           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  65)
 #define CCM_TARGET_ROOT_LCDIF_PIXEL        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  74)
 #define CCM_TARGET_ROOT_SAI2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  76)
 #define CCM_TARGET_ROOT_SAI3               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  77)
 #define CCM_TARGET_ROOT_SAI5               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  79)
 #define CCM_TARGET_ROOT_SAI6               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  80)
 #define CCM_TARGET_ROOT_SPDIF1             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  81)
 #define CCM_TARGET_ROOT_ENET_REF           CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  83)
 #define CCM_TARGET_ROOT_ENET_TIMER         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  84)
 #define CCM_TARGET_ROOT_ENET_PHY_REF       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  85)
 #define CCM_TARGET_ROOT_NAND               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  86)
 #define CCM_TARGET_ROOT_QSPI               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  87)
 #define CCM_TARGET_ROOT_USDHC1             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  88)
 #define CCM_TARGET_ROOT_USDHC2             CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  89)
 #define CCM_TARGET_ROOT_I2C1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  90)
 #define CCM_TARGET_ROOT_I2C2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  91)
 #define CCM_TARGET_ROOT_I2C3               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  92)
 #define CCM_TARGET_ROOT_I2C4               CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  93)
 #define CCM_TARGET_ROOT_UART1              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  94)
 #define CCM_TARGET_ROOT_UART2              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  95)
 #define CCM_TARGET_ROOT_UART3              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  96)
 #define CCM_TARGET_ROOT_UART4              CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  97)
 #define CCM_TARGET_ROOT_USB_CORE_REF       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  98)
 #define CCM_TARGET_ROOT_USB_PHY_REF        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,  99)
 #define CCM_TARGET_ROOT_GIC                CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 100)
 #define CCM_TARGET_ROOT_ECSPI1             CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 101)
 #define CCM_TARGET_ROOT_ECSPI2             CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 102)
 #define CCM_TARGET_ROOT_PWM1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 103)
 #define CCM_TARGET_ROOT_PWM2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 104)
 #define CCM_TARGET_ROOT_PWM3               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 105)
 #define CCM_TARGET_ROOT_PWM4               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 106)
 #define CCM_TARGET_ROOT_GPT1               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 107)
 #define CCM_TARGET_ROOT_GPT2               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 108)
 #define CCM_TARGET_ROOT_GPT3               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 109)
 #define CCM_TARGET_ROOT_GPT4               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 110)
 #define CCM_TARGET_ROOT_GPT5               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 111)
 #define CCM_TARGET_ROOT_GPT6               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 112)
 #define CCM_TARGET_ROOT_TRACE              CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 113)
 #define CCM_TARGET_ROOT_WDOG               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 114)
 #define CCM_TARGET_ROOT_WRCLK              CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 115)
 #define CCM_TARGET_ROOT_IPP_DO_CLKO1       CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 116)
 #define CCM_TARGET_ROOT_IPP_DO_CLKO2       CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 117)
 #define CCM_TARGET_ROOT_MIPI_DSI_CORE      CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 118)
 #define CCM_TARGET_ROOT_MIPI_DSI_PHY_REF   CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 119)
 #define CCM_TARGET_ROOT_MIPI_DSI_DBI       CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 120)
 #define CCM_TARGET_ROOT_USDHC3             CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 121)
 #define CCM_TARGET_ROOT_MIPI_CSI1_CORE     CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 122)
 #define CCM_TARGET_ROOT_MIPI_CSI1_PHY_REF  CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 123)
 #define CCM_TARGET_ROOT_MIPI_CSI2_PHY_REF  CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 126)
 #define CCM_TARGET_ROOT_MIPI_CSI2_ESC      CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 127)
 #define CCM_TARGET_ROOT_ECSPI3             CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 131)
 #define CCM_TARGET_ROOT_PDM                CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 132)
 #define CCM_TARGET_ROOT_SAI7               CCM_TARGET_ROOT_REG(CCM_BASE_PTR, 134)

/* ----------------------------------------------------------------------------
   -- Peripheral type defines
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup Peripheral_defines Peripheral type defines
 * @{
 */


/*
** Start of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic push
  #else
    #pragma push
    #pragma anon_unions
  #endif
#elif defined(__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=extended
#else
  #error Not supported compiler type
#endif

/* ----------------------------------------------------------------------------
   -- AIPSTZ
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Peripheral AIPSTZ
 * @{
 */

/** AIPSTZ - Peripheral register structure */
typedef struct AIPSTZ_MemMap {
  uint32_t MPR;                                    /**< Master Priviledge Registers, offset: 0x0 */
  uint8_t RESERVED_0[60];
  uint32_t OPACR;                                  /**< Off-Platform Peripheral Access Control Registers, offset: 0x40 */
  uint32_t OPACR1;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x44 */
  uint32_t OPACR2;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x48 */
  uint32_t OPACR3;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x4C */
  uint32_t OPACR4;                                 /**< Off-Platform Peripheral Access Control Registers, offset: 0x50 */
} volatile *AIPSTZ_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register accessors */
#define AIPSTZ_MPR_REG(base)                     ((base)->MPR)
#define AIPSTZ_OPACR_REG(base)                   ((base)->OPACR)
#define AIPSTZ_OPACR1_REG(base)                  ((base)->OPACR1)
#define AIPSTZ_OPACR2_REG(base)                  ((base)->OPACR2)
#define AIPSTZ_OPACR3_REG(base)                  ((base)->OPACR3)
#define AIPSTZ_OPACR4_REG(base)                  ((base)->OPACR4)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- AIPSTZ Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Masks AIPSTZ Register Masks
 * @{
 */

/*! @name MPR - Master Priviledge Registers */
/*! @{ */
#define AIPSTZ_MPR_MPROT5_MASK                   (0xF00U)
#define AIPSTZ_MPR_MPROT5_SHIFT                  (8U)
/*! MPROT5
 *  0bxxx0..Accesses from this master are forced to user-mode (ips_supervisor_access is forced to zero) regardless of the hprot[1] access attribute.
 *  0bxxx1..Accesses from this master are not forced to user-mode. The hprot[1] access attribute is used directly to determine ips_supervisor_access.
 *  0bxx0x..This master is not trusted for write accesses.
 *  0bxx1x..This master is trusted for write accesses.
 *  0bx0xx..This master is not trusted for read accesses.
 *  0bx1xx..This master is trusted for read accesses.
 *  0b1xxx..Write accesses from this master are allowed to be buffered
 */
#define AIPSTZ_MPR_MPROT5(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT5_SHIFT)) & AIPSTZ_MPR_MPROT5_MASK)
#define AIPSTZ_MPR_MPROT3_MASK                   (0xF0000U)
#define AIPSTZ_MPR_MPROT3_SHIFT                  (16U)
/*! MPROT3
 *  0bxxx0..Accesses from this master are forced to user-mode (ips_supervisor_access is forced to zero) regardless of the hprot[1] access attribute.
 *  0bxxx1..Accesses from this master are not forced to user-mode. The hprot[1] access attribute is used directly to determine ips_supervisor_access.
 *  0bxx0x..This master is not trusted for write accesses.
 *  0bxx1x..This master is trusted for write accesses.
 *  0bx0xx..This master is not trusted for read accesses.
 *  0bx1xx..This master is trusted for read accesses.
 *  0b1xxx..Write accesses from this master are allowed to be buffered
 */
#define AIPSTZ_MPR_MPROT3(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT3_SHIFT)) & AIPSTZ_MPR_MPROT3_MASK)
#define AIPSTZ_MPR_MPROT2_MASK                   (0xF00000U)
#define AIPSTZ_MPR_MPROT2_SHIFT                  (20U)
/*! MPROT2
 *  0bxxx0..Accesses from this master are forced to user-mode (ips_supervisor_access is forced to zero) regardless of the hprot[1] access attribute.
 *  0bxxx1..Accesses from this master are not forced to user-mode. The hprot[1] access attribute is used directly to determine ips_supervisor_access.
 *  0bxx0x..This master is not trusted for write accesses.
 *  0bxx1x..This master is trusted for write accesses.
 *  0bx0xx..This master is not trusted for read accesses.
 *  0bx1xx..This master is trusted for read accesses.
 *  0b1xxx..Write accesses from this master are allowed to be buffered
 */
#define AIPSTZ_MPR_MPROT2(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT2_SHIFT)) & AIPSTZ_MPR_MPROT2_MASK)
#define AIPSTZ_MPR_MPROT1_MASK                   (0xF000000U)
#define AIPSTZ_MPR_MPROT1_SHIFT                  (24U)
/*! MPROT1
 *  0bxxx0..Accesses from this master are forced to user-mode (ips_supervisor_access is forced to zero) regardless of the hprot[1] access attribute.
 *  0bxxx1..Accesses from this master are not forced to user-mode. The hprot[1] access attribute is used directly to determine ips_supervisor_access.
 *  0bxx0x..This master is not trusted for write accesses.
 *  0bxx1x..This master is trusted for write accesses.
 *  0bx0xx..This master is not trusted for read accesses.
 *  0bx1xx..This master is trusted for read accesses.
 *  0b1xxx..Write accesses from this master are allowed to be buffered
 */
#define AIPSTZ_MPR_MPROT1(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT1_SHIFT)) & AIPSTZ_MPR_MPROT1_MASK)
#define AIPSTZ_MPR_MPROT0_MASK                   (0xF0000000U)
#define AIPSTZ_MPR_MPROT0_SHIFT                  (28U)
/*! MPROT0
 *  0bxxx0..Accesses from this master are forced to user-mode (ips_supervisor_access is forced to zero) regardless of the hprot[1] access attribute.
 *  0bxxx1..Accesses from this master are not forced to user-mode. The hprot[1] access attribute is used directly to determine ips_supervisor_access.
 *  0bxx0x..This master is not trusted for write accesses.
 *  0bxx1x..This master is trusted for write accesses.
 *  0bx0xx..This master is not trusted for read accesses.
 *  0bx1xx..This master is trusted for read accesses.
 *  0b1xxx..Write accesses from this master are allowed to be buffered
 */
#define AIPSTZ_MPR_MPROT0(x)                     (((uint32_t)(((uint32_t)(x)) << AIPSTZ_MPR_MPROT0_SHIFT)) & AIPSTZ_MPR_MPROT0_MASK)
/*! @} */

/*! @name OPACR - Off-Platform Peripheral Access Control Registers */
/*! @{ */
#define AIPSTZ_OPACR_OPAC7_MASK                  (0xFU)
#define AIPSTZ_OPACR_OPAC7_SHIFT                 (0U)
/*! OPAC7
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC7(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC7_SHIFT)) & AIPSTZ_OPACR_OPAC7_MASK)
#define AIPSTZ_OPACR_OPAC6_MASK                  (0xF0U)
#define AIPSTZ_OPACR_OPAC6_SHIFT                 (4U)
/*! OPAC6
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC6(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC6_SHIFT)) & AIPSTZ_OPACR_OPAC6_MASK)
#define AIPSTZ_OPACR_OPAC5_MASK                  (0xF00U)
#define AIPSTZ_OPACR_OPAC5_SHIFT                 (8U)
/*! OPAC5
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC5(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC5_SHIFT)) & AIPSTZ_OPACR_OPAC5_MASK)
#define AIPSTZ_OPACR_OPAC4_MASK                  (0xF000U)
#define AIPSTZ_OPACR_OPAC4_SHIFT                 (12U)
/*! OPAC4
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC4(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC4_SHIFT)) & AIPSTZ_OPACR_OPAC4_MASK)
#define AIPSTZ_OPACR_OPAC3_MASK                  (0xF0000U)
#define AIPSTZ_OPACR_OPAC3_SHIFT                 (16U)
/*! OPAC3
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC3(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC3_SHIFT)) & AIPSTZ_OPACR_OPAC3_MASK)
#define AIPSTZ_OPACR_OPAC2_MASK                  (0xF00000U)
#define AIPSTZ_OPACR_OPAC2_SHIFT                 (20U)
/*! OPAC2
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC2(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC2_SHIFT)) & AIPSTZ_OPACR_OPAC2_MASK)
#define AIPSTZ_OPACR_OPAC1_MASK                  (0xF000000U)
#define AIPSTZ_OPACR_OPAC1_SHIFT                 (24U)
/*! OPAC1
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC1(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC1_SHIFT)) & AIPSTZ_OPACR_OPAC1_MASK)
#define AIPSTZ_OPACR_OPAC0_MASK                  (0xF0000000U)
#define AIPSTZ_OPACR_OPAC0_SHIFT                 (28U)
/*! OPAC0
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR_OPAC0(x)                    (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR_OPAC0_SHIFT)) & AIPSTZ_OPACR_OPAC0_MASK)
/*! @} */

/*! @name OPACR1 - Off-Platform Peripheral Access Control Registers */
/*! @{ */
#define AIPSTZ_OPACR1_OPAC15_MASK                (0xFU)
#define AIPSTZ_OPACR1_OPAC15_SHIFT               (0U)
/*! OPAC15
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC15(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC15_SHIFT)) & AIPSTZ_OPACR1_OPAC15_MASK)
#define AIPSTZ_OPACR1_OPAC14_MASK                (0xF0U)
#define AIPSTZ_OPACR1_OPAC14_SHIFT               (4U)
/*! OPAC14
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC14(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC14_SHIFT)) & AIPSTZ_OPACR1_OPAC14_MASK)
#define AIPSTZ_OPACR1_OPAC13_MASK                (0xF00U)
#define AIPSTZ_OPACR1_OPAC13_SHIFT               (8U)
/*! OPAC13
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC13(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC13_SHIFT)) & AIPSTZ_OPACR1_OPAC13_MASK)
#define AIPSTZ_OPACR1_OPAC12_MASK                (0xF000U)
#define AIPSTZ_OPACR1_OPAC12_SHIFT               (12U)
/*! OPAC12
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC12(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC12_SHIFT)) & AIPSTZ_OPACR1_OPAC12_MASK)
#define AIPSTZ_OPACR1_OPAC11_MASK                (0xF0000U)
#define AIPSTZ_OPACR1_OPAC11_SHIFT               (16U)
/*! OPAC11
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC11(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC11_SHIFT)) & AIPSTZ_OPACR1_OPAC11_MASK)
#define AIPSTZ_OPACR1_OPAC10_MASK                (0xF00000U)
#define AIPSTZ_OPACR1_OPAC10_SHIFT               (20U)
/*! OPAC10
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC10(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC10_SHIFT)) & AIPSTZ_OPACR1_OPAC10_MASK)
#define AIPSTZ_OPACR1_OPAC9_MASK                 (0xF000000U)
#define AIPSTZ_OPACR1_OPAC9_SHIFT                (24U)
/*! OPAC9
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC9(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC9_SHIFT)) & AIPSTZ_OPACR1_OPAC9_MASK)
#define AIPSTZ_OPACR1_OPAC8_MASK                 (0xF0000000U)
#define AIPSTZ_OPACR1_OPAC8_SHIFT                (28U)
/*! OPAC8
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR1_OPAC8(x)                   (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR1_OPAC8_SHIFT)) & AIPSTZ_OPACR1_OPAC8_MASK)
/*! @} */

/*! @name OPACR2 - Off-Platform Peripheral Access Control Registers */
/*! @{ */
#define AIPSTZ_OPACR2_OPAC23_MASK                (0xFU)
#define AIPSTZ_OPACR2_OPAC23_SHIFT               (0U)
/*! OPAC23
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC23(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC23_SHIFT)) & AIPSTZ_OPACR2_OPAC23_MASK)
#define AIPSTZ_OPACR2_OPAC22_MASK                (0xF0U)
#define AIPSTZ_OPACR2_OPAC22_SHIFT               (4U)
/*! OPAC22
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC22(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC22_SHIFT)) & AIPSTZ_OPACR2_OPAC22_MASK)
#define AIPSTZ_OPACR2_OPAC21_MASK                (0xF00U)
#define AIPSTZ_OPACR2_OPAC21_SHIFT               (8U)
/*! OPAC21
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC21(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC21_SHIFT)) & AIPSTZ_OPACR2_OPAC21_MASK)
#define AIPSTZ_OPACR2_OPAC20_MASK                (0xF000U)
#define AIPSTZ_OPACR2_OPAC20_SHIFT               (12U)
/*! OPAC20
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC20(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC20_SHIFT)) & AIPSTZ_OPACR2_OPAC20_MASK)
#define AIPSTZ_OPACR2_OPAC19_MASK                (0xF0000U)
#define AIPSTZ_OPACR2_OPAC19_SHIFT               (16U)
/*! OPAC19
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC19(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC19_SHIFT)) & AIPSTZ_OPACR2_OPAC19_MASK)
#define AIPSTZ_OPACR2_OPAC18_MASK                (0xF00000U)
#define AIPSTZ_OPACR2_OPAC18_SHIFT               (20U)
/*! OPAC18
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC18(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC18_SHIFT)) & AIPSTZ_OPACR2_OPAC18_MASK)
#define AIPSTZ_OPACR2_OPAC17_MASK                (0xF000000U)
#define AIPSTZ_OPACR2_OPAC17_SHIFT               (24U)
/*! OPAC17
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC17(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC17_SHIFT)) & AIPSTZ_OPACR2_OPAC17_MASK)
#define AIPSTZ_OPACR2_OPAC16_MASK                (0xF0000000U)
#define AIPSTZ_OPACR2_OPAC16_SHIFT               (28U)
/*! OPAC16
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR2_OPAC16(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR2_OPAC16_SHIFT)) & AIPSTZ_OPACR2_OPAC16_MASK)
/*! @} */

/*! @name OPACR3 - Off-Platform Peripheral Access Control Registers */
/*! @{ */
#define AIPSTZ_OPACR3_OPAC31_MASK                (0xFU)
#define AIPSTZ_OPACR3_OPAC31_SHIFT               (0U)
/*! OPAC31
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC31(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC31_SHIFT)) & AIPSTZ_OPACR3_OPAC31_MASK)
#define AIPSTZ_OPACR3_OPAC30_MASK                (0xF0U)
#define AIPSTZ_OPACR3_OPAC30_SHIFT               (4U)
/*! OPAC30
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC30(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC30_SHIFT)) & AIPSTZ_OPACR3_OPAC30_MASK)
#define AIPSTZ_OPACR3_OPAC29_MASK                (0xF00U)
#define AIPSTZ_OPACR3_OPAC29_SHIFT               (8U)
/*! OPAC29
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC29(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC29_SHIFT)) & AIPSTZ_OPACR3_OPAC29_MASK)
#define AIPSTZ_OPACR3_OPAC28_MASK                (0xF000U)
#define AIPSTZ_OPACR3_OPAC28_SHIFT               (12U)
/*! OPAC28
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC28(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC28_SHIFT)) & AIPSTZ_OPACR3_OPAC28_MASK)
#define AIPSTZ_OPACR3_OPAC27_MASK                (0xF0000U)
#define AIPSTZ_OPACR3_OPAC27_SHIFT               (16U)
/*! OPAC27
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC27(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC27_SHIFT)) & AIPSTZ_OPACR3_OPAC27_MASK)
#define AIPSTZ_OPACR3_OPAC26_MASK                (0xF00000U)
#define AIPSTZ_OPACR3_OPAC26_SHIFT               (20U)
/*! OPAC26
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC26(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC26_SHIFT)) & AIPSTZ_OPACR3_OPAC26_MASK)
#define AIPSTZ_OPACR3_OPAC25_MASK                (0xF000000U)
#define AIPSTZ_OPACR3_OPAC25_SHIFT               (24U)
/*! OPAC25
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC25(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC25_SHIFT)) & AIPSTZ_OPACR3_OPAC25_MASK)
#define AIPSTZ_OPACR3_OPAC24_MASK                (0xF0000000U)
#define AIPSTZ_OPACR3_OPAC24_SHIFT               (28U)
/*! OPAC24
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR3_OPAC24(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR3_OPAC24_SHIFT)) & AIPSTZ_OPACR3_OPAC24_MASK)
/*! @} */

/*! @name OPACR4 - Off-Platform Peripheral Access Control Registers */
/*! @{ */
#define AIPSTZ_OPACR4_OPAC33_MASK                (0xF000000U)
#define AIPSTZ_OPACR4_OPAC33_SHIFT               (24U)
/*! OPAC33
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR4_OPAC33(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC33_SHIFT)) & AIPSTZ_OPACR4_OPAC33_MASK)
#define AIPSTZ_OPACR4_OPAC32_MASK                (0xF0000000U)
#define AIPSTZ_OPACR4_OPAC32_SHIFT               (28U)
/*! OPAC32
 *  0bxxx0..Accesses from an untrusted master are allowed.
 *  0bxxx1..Accesses from an untrusted master are not allowed. If an access is attempted by an untrusted master,
 *          the access is terminated with an error response and no peripheral access is initiated on the IPS bus.
 *  0bxx0x..This peripheral allows write accesses.
 *  0bxx1x..This peripheral is write protected. If a write access is attempted, the access is terminated with an
 *          error response and no peripheral access is initiated on the IPS bus.
 *  0bx0xx..This peripheral does not require supervisor privilege level for accesses.
 *  0bx1xx..This peripheral requires supervisor privilege level for accesses. The master privilege level must
 *          indicate supervisor via the hprot[1] access attribute, and the MPROTx[MPL] control bit for the master must
 *          be set. If not, the access is terminated with an error response and no peripheral access is initiated
 *          on the IPS bus.
 *  0b1xxx..Write accesses to this peripheral are allowed to be buffered by the AIPSTZ.
 */
#define AIPSTZ_OPACR4_OPAC32(x)                  (((uint32_t)(((uint32_t)(x)) << AIPSTZ_OPACR4_OPAC32_SHIFT)) & AIPSTZ_OPACR4_OPAC32_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group AIPSTZ_Register_Masks */


/* AIPSTZ - Peripheral instance base addresses */
/** Peripheral AIPSTZ base pointer */
#define AIPSTZ_BASE_PTR                          ((AIPSTZ_MemMapPtr)0x301F0000u)
/** Array initializer of AIPSTZ peripheral base pointers */
#define AIPSTZ_BASE_PTRS                         { AIPSTZ_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- AIPSTZ - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup AIPSTZ_Register_Accessor_Macros AIPSTZ - Register accessor macros
 * @{
 */


/* AIPSTZ - Register instance definitions */
/* AIPSTZ */
#define AIPSTZ_MPR                               AIPSTZ_MPR_REG(AIPSTZ_BASE_PTR)
#define AIPSTZ_OPACR                             AIPSTZ_OPACR_REG(AIPSTZ_BASE_PTR)
#define AIPSTZ_OPACR1                            AIPSTZ_OPACR1_REG(AIPSTZ_BASE_PTR)
#define AIPSTZ_OPACR2                            AIPSTZ_OPACR2_REG(AIPSTZ_BASE_PTR)
#define AIPSTZ_OPACR3                            AIPSTZ_OPACR3_REG(AIPSTZ_BASE_PTR)
#define AIPSTZ_OPACR4                            AIPSTZ_OPACR4_REG(AIPSTZ_BASE_PTR)

/*!
 * @}
 */ /* end of group AIPSTZ_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group AIPSTZ_Peripheral */


/* ----------------------------------------------------------------------------
   -- APBH
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Peripheral APBH
 * @{
 */

/** APBH - Peripheral register structure */
typedef struct APBH_MemMap {
  uint32_t CTRL0;                                  /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x0 */
  uint32_t CTRL0_SET;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x4 */
  uint32_t CTRL0_CLR;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0x8 */
  uint32_t CTRL0_TOG;                              /**< AHB to APBH Bridge Control and Status Register 0, offset: 0xC */
  uint32_t CTRL1;                                  /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x10 */
  uint32_t CTRL1_SET;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x14 */
  uint32_t CTRL1_CLR;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x18 */
  uint32_t CTRL1_TOG;                              /**< AHB to APBH Bridge Control and Status Register 1, offset: 0x1C */
  uint32_t CTRL2;                                  /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x20 */
  uint32_t CTRL2_SET;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x24 */
  uint32_t CTRL2_CLR;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x28 */
  uint32_t CTRL2_TOG;                              /**< AHB to APBH Bridge Control and Status Register 2, offset: 0x2C */
  uint32_t CHANNEL_CTRL;                           /**< AHB to APBH Bridge Channel Register, offset: 0x30 */
  uint32_t CHANNEL_CTRL_SET;                       /**< AHB to APBH Bridge Channel Register, offset: 0x34 */
  uint32_t CHANNEL_CTRL_CLR;                       /**< AHB to APBH Bridge Channel Register, offset: 0x38 */
  uint32_t CHANNEL_CTRL_TOG;                       /**< AHB to APBH Bridge Channel Register, offset: 0x3C */
  uint32_t DEVSEL;                                 /**< AHB to APBH DMA Device Assignment Register, offset: 0x40 */
  uint8_t RESERVED_0[12];
  uint32_t DMA_BURST_SIZE;                         /**< AHB to APBH DMA burst size, offset: 0x50 */
  uint8_t RESERVED_1[12];
  uint32_t DEBUG;                                  /**< AHB to APBH DMA Debug Register, offset: 0x60 */
  uint8_t RESERVED_2[156];
  struct {                                         /* offset: 0x100, array step: 0x70 */
    uint32_t CH_CURCMDAR;                            /**< APBH DMA Channel n Current Command Address Register, array offset: 0x100, array step: 0x70 */
    uint8_t RESERVED_0[12];
    uint32_t CH_NXTCMDAR;                            /**< APBH DMA Channel n Next Command Address Register, array offset: 0x110, array step: 0x70 */
    uint8_t RESERVED_1[12];
    uint32_t CH_CMD;                                 /**< APBH DMA Channel n Command Register, array offset: 0x120, array step: 0x70 */
    uint8_t RESERVED_2[12];
    uint32_t CH_BAR;                                 /**< APBH DMA Channel n Buffer Address Register, array offset: 0x130, array step: 0x70 */
    uint8_t RESERVED_3[12];
    uint32_t CH_SEMA;                                /**< APBH DMA Channel n Semaphore Register, array offset: 0x140, array step: 0x70 */
    uint8_t RESERVED_4[12];
    uint32_t CH_DEBUG1;                              /**< AHB to APBH DMA Channel n Debug Information, array offset: 0x150, array step: 0x70 */
    uint8_t RESERVED_5[12];
    uint32_t CH_DEBUG2;                              /**< AHB to APBH DMA Channel n Debug Information, array offset: 0x160, array step: 0x70 */
    uint8_t RESERVED_6[12];
  } CH_CFGn[16];
  uint32_t VERSION;                                /**< APBH Bridge Version Register, offset: 0x800 */
} volatile *APBH_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- APBH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Accessor_Macros APBH - Register accessor macros
 * @{
 */


/* APBH - Register accessors */
#define APBH_CTRL0_REG(base)                     ((base)->CTRL0)
#define APBH_CTRL0_SET_REG(base)                 ((base)->CTRL0_SET)
#define APBH_CTRL0_CLR_REG(base)                 ((base)->CTRL0_CLR)
#define APBH_CTRL0_TOG_REG(base)                 ((base)->CTRL0_TOG)
#define APBH_CTRL1_REG(base)                     ((base)->CTRL1)
#define APBH_CTRL1_SET_REG(base)                 ((base)->CTRL1_SET)
#define APBH_CTRL1_CLR_REG(base)                 ((base)->CTRL1_CLR)
#define APBH_CTRL1_TOG_REG(base)                 ((base)->CTRL1_TOG)
#define APBH_CTRL2_REG(base)                     ((base)->CTRL2)
#define APBH_CTRL2_SET_REG(base)                 ((base)->CTRL2_SET)
#define APBH_CTRL2_CLR_REG(base)                 ((base)->CTRL2_CLR)
#define APBH_CTRL2_TOG_REG(base)                 ((base)->CTRL2_TOG)
#define APBH_CHANNEL_CTRL_REG(base)              ((base)->CHANNEL_CTRL)
#define APBH_CHANNEL_CTRL_SET_REG(base)          ((base)->CHANNEL_CTRL_SET)
#define APBH_CHANNEL_CTRL_CLR_REG(base)          ((base)->CHANNEL_CTRL_CLR)
#define APBH_CHANNEL_CTRL_TOG_REG(base)          ((base)->CHANNEL_CTRL_TOG)
#define APBH_DEVSEL_REG(base)                    ((base)->DEVSEL)
#define APBH_DMA_BURST_SIZE_REG(base)            ((base)->DMA_BURST_SIZE)
#define APBH_DEBUG_REG(base)                     ((base)->DEBUG)
#define APBH_CH_CURCMDAR_REG(base,index)         ((base)->CH_CFGn[index].CH_CURCMDAR)
#define APBH_CH_NXTCMDAR_REG(base,index)         ((base)->CH_CFGn[index].CH_NXTCMDAR)
#define APBH_CH_CMD_REG(base,index)              ((base)->CH_CFGn[index].CH_CMD)
#define APBH_CH_BAR_REG(base,index)              ((base)->CH_CFGn[index].CH_BAR)
#define APBH_CH_SEMA_REG(base,index)             ((base)->CH_CFGn[index].CH_SEMA)
#define APBH_CH_DEBUG1_REG(base,index)           ((base)->CH_CFGn[index].CH_DEBUG1)
#define APBH_CH_DEBUG2_REG(base,index)           ((base)->CH_CFGn[index].CH_DEBUG2)
#define APBH_VERSION_REG(base)                   ((base)->VERSION)

/*!
 * @}
 */ /* end of group APBH_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- APBH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Masks APBH Register Masks
 * @{
 */

/*! @name CTRL0 - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_CLKGATE_CHANNEL_MASK          (0xFFFFU)
#define APBH_CTRL0_CLKGATE_CHANNEL_SHIFT         (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_CLKGATE_CHANNEL(x)            (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_RSVD0_MASK                    (0xFFF0000U)
#define APBH_CTRL0_RSVD0_SHIFT                   (16U)
#define APBH_CTRL0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_RSVD0_SHIFT)) & APBH_CTRL0_RSVD0_MASK)
#define APBH_CTRL0_APB_BURST_EN_MASK             (0x10000000U)
#define APBH_CTRL0_APB_BURST_EN_SHIFT            (28U)
#define APBH_CTRL0_AHB_BURST8_EN_MASK            (0x20000000U)
#define APBH_CTRL0_AHB_BURST8_EN_SHIFT           (29U)
#define APBH_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define APBH_CTRL0_CLKGATE_SHIFT                 (30U)
#define APBH_CTRL0_SFTRST_MASK                   (0x80000000U)
#define APBH_CTRL0_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL0_SET - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_SET_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_SET_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_SET_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_SET_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_SET_RSVD0_SHIFT)) & APBH_CTRL0_SET_RSVD0_MASK)
#define APBH_CTRL0_SET_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_SET_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_SET_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_SET_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_CLR - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_CLR_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_CLR_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_CLR_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_CLR_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_CLR_RSVD0_SHIFT)) & APBH_CTRL0_CLR_RSVD0_MASK)
#define APBH_CTRL0_CLR_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_CLR_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_CLR_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_TOG - AHB to APBH Bridge Control and Status Register 0 */
/*! @{ */
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK      (0xFFFFU)
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT     (0U)
/*! CLKGATE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CTRL0_TOG_CLKGATE_CHANNEL(x)        (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_CLKGATE_CHANNEL_SHIFT)) & APBH_CTRL0_TOG_CLKGATE_CHANNEL_MASK)
#define APBH_CTRL0_TOG_RSVD0_MASK                (0xFFF0000U)
#define APBH_CTRL0_TOG_RSVD0_SHIFT               (16U)
#define APBH_CTRL0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CTRL0_TOG_RSVD0_SHIFT)) & APBH_CTRL0_TOG_RSVD0_MASK)
#define APBH_CTRL0_TOG_APB_BURST_EN_MASK         (0x10000000U)
#define APBH_CTRL0_TOG_APB_BURST_EN_SHIFT        (28U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_MASK        (0x20000000U)
#define APBH_CTRL0_TOG_AHB_BURST8_EN_SHIFT       (29U)
#define APBH_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define APBH_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define APBH_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define APBH_CTRL0_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL1 - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_MASK         (0x1U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_SHIFT        (0U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_MASK         (0x2U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_SHIFT        (1U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_MASK         (0x4U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_SHIFT        (2U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_MASK         (0x8U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_SHIFT        (3U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_MASK         (0x10U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_SHIFT        (4U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_MASK         (0x20U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_SHIFT        (5U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_MASK         (0x40U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_SHIFT        (6U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_MASK         (0x80U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_SHIFT        (7U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_MASK         (0x100U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_SHIFT        (8U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_MASK         (0x200U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_SHIFT        (9U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_MASK        (0x400U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_SHIFT       (10U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_MASK        (0x800U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_SHIFT       (11U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_MASK        (0x1000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_SHIFT       (12U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_MASK        (0x2000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_SHIFT       (13U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_MASK        (0x4000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_SHIFT       (14U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_MASK        (0x8000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_SHIFT       (15U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_MASK      (0x10000U)
#define APBH_CTRL1_CH0_CMDCMPLT_IRQ_EN_SHIFT     (16U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_MASK      (0x20000U)
#define APBH_CTRL1_CH1_CMDCMPLT_IRQ_EN_SHIFT     (17U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_MASK      (0x40000U)
#define APBH_CTRL1_CH2_CMDCMPLT_IRQ_EN_SHIFT     (18U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_MASK      (0x80000U)
#define APBH_CTRL1_CH3_CMDCMPLT_IRQ_EN_SHIFT     (19U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_MASK      (0x100000U)
#define APBH_CTRL1_CH4_CMDCMPLT_IRQ_EN_SHIFT     (20U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_MASK      (0x200000U)
#define APBH_CTRL1_CH5_CMDCMPLT_IRQ_EN_SHIFT     (21U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_MASK      (0x400000U)
#define APBH_CTRL1_CH6_CMDCMPLT_IRQ_EN_SHIFT     (22U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_MASK      (0x800000U)
#define APBH_CTRL1_CH7_CMDCMPLT_IRQ_EN_SHIFT     (23U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_MASK      (0x1000000U)
#define APBH_CTRL1_CH8_CMDCMPLT_IRQ_EN_SHIFT     (24U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_MASK      (0x2000000U)
#define APBH_CTRL1_CH9_CMDCMPLT_IRQ_EN_SHIFT     (25U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_MASK     (0x4000000U)
#define APBH_CTRL1_CH10_CMDCMPLT_IRQ_EN_SHIFT    (26U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_MASK     (0x8000000U)
#define APBH_CTRL1_CH11_CMDCMPLT_IRQ_EN_SHIFT    (27U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_MASK     (0x10000000U)
#define APBH_CTRL1_CH12_CMDCMPLT_IRQ_EN_SHIFT    (28U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_MASK     (0x20000000U)
#define APBH_CTRL1_CH13_CMDCMPLT_IRQ_EN_SHIFT    (29U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_MASK     (0x40000000U)
#define APBH_CTRL1_CH14_CMDCMPLT_IRQ_EN_SHIFT    (30U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_MASK     (0x80000000U)
#define APBH_CTRL1_CH15_CMDCMPLT_IRQ_EN_SHIFT    (31U)
/*! @} */

/*! @name CTRL1_SET - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_SET_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_SET_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_SET_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_SET_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_SET_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_SET_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_SET_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_SET_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_SET_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_SET_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_SET_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_SET_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_SET_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_SET_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_SET_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_SET_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL1_CLR - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_CLR_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_CLR_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_CLR_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_CLR_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_CLR_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_CLR_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_CLR_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_CLR_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_CLR_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_CLR_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_CLR_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_CLR_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_CLR_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_CLR_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_CLR_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_CLR_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL1_TOG - AHB to APBH Bridge Control and Status Register 1 */
/*! @{ */
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_MASK     (0x1U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_SHIFT    (0U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_MASK     (0x2U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_SHIFT    (1U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_MASK     (0x4U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_SHIFT    (2U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_MASK     (0x8U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_SHIFT    (3U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_MASK     (0x10U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_SHIFT    (4U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_MASK     (0x20U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_SHIFT    (5U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_MASK     (0x40U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_SHIFT    (6U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_MASK     (0x80U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_SHIFT    (7U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_MASK     (0x100U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_SHIFT    (8U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_MASK     (0x200U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_SHIFT    (9U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_MASK    (0x400U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_SHIFT   (10U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_MASK    (0x800U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_SHIFT   (11U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_MASK    (0x1000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_SHIFT   (12U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_MASK    (0x2000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_SHIFT   (13U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_MASK    (0x4000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_SHIFT   (14U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_MASK    (0x8000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_SHIFT   (15U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_MASK  (0x10000U)
#define APBH_CTRL1_TOG_CH0_CMDCMPLT_IRQ_EN_SHIFT (16U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_MASK  (0x20000U)
#define APBH_CTRL1_TOG_CH1_CMDCMPLT_IRQ_EN_SHIFT (17U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_MASK  (0x40000U)
#define APBH_CTRL1_TOG_CH2_CMDCMPLT_IRQ_EN_SHIFT (18U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_MASK  (0x80000U)
#define APBH_CTRL1_TOG_CH3_CMDCMPLT_IRQ_EN_SHIFT (19U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_MASK  (0x100000U)
#define APBH_CTRL1_TOG_CH4_CMDCMPLT_IRQ_EN_SHIFT (20U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_MASK  (0x200000U)
#define APBH_CTRL1_TOG_CH5_CMDCMPLT_IRQ_EN_SHIFT (21U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_MASK  (0x400000U)
#define APBH_CTRL1_TOG_CH6_CMDCMPLT_IRQ_EN_SHIFT (22U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_MASK  (0x800000U)
#define APBH_CTRL1_TOG_CH7_CMDCMPLT_IRQ_EN_SHIFT (23U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_MASK  (0x1000000U)
#define APBH_CTRL1_TOG_CH8_CMDCMPLT_IRQ_EN_SHIFT (24U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_MASK  (0x2000000U)
#define APBH_CTRL1_TOG_CH9_CMDCMPLT_IRQ_EN_SHIFT (25U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_MASK (0x4000000U)
#define APBH_CTRL1_TOG_CH10_CMDCMPLT_IRQ_EN_SHIFT (26U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_MASK (0x8000000U)
#define APBH_CTRL1_TOG_CH11_CMDCMPLT_IRQ_EN_SHIFT (27U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_MASK (0x10000000U)
#define APBH_CTRL1_TOG_CH12_CMDCMPLT_IRQ_EN_SHIFT (28U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_MASK (0x20000000U)
#define APBH_CTRL1_TOG_CH13_CMDCMPLT_IRQ_EN_SHIFT (29U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_MASK (0x40000000U)
#define APBH_CTRL1_TOG_CH14_CMDCMPLT_IRQ_EN_SHIFT (30U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_MASK (0x80000000U)
#define APBH_CTRL1_TOG_CH15_CMDCMPLT_IRQ_EN_SHIFT (31U)
/*! @} */

/*! @name CTRL2 - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_CH0_ERROR_IRQ_MASK            (0x1U)
#define APBH_CTRL2_CH0_ERROR_IRQ_SHIFT           (0U)
#define APBH_CTRL2_CH1_ERROR_IRQ_MASK            (0x2U)
#define APBH_CTRL2_CH1_ERROR_IRQ_SHIFT           (1U)
#define APBH_CTRL2_CH2_ERROR_IRQ_MASK            (0x4U)
#define APBH_CTRL2_CH2_ERROR_IRQ_SHIFT           (2U)
#define APBH_CTRL2_CH3_ERROR_IRQ_MASK            (0x8U)
#define APBH_CTRL2_CH3_ERROR_IRQ_SHIFT           (3U)
#define APBH_CTRL2_CH4_ERROR_IRQ_MASK            (0x10U)
#define APBH_CTRL2_CH4_ERROR_IRQ_SHIFT           (4U)
#define APBH_CTRL2_CH5_ERROR_IRQ_MASK            (0x20U)
#define APBH_CTRL2_CH5_ERROR_IRQ_SHIFT           (5U)
#define APBH_CTRL2_CH6_ERROR_IRQ_MASK            (0x40U)
#define APBH_CTRL2_CH6_ERROR_IRQ_SHIFT           (6U)
#define APBH_CTRL2_CH7_ERROR_IRQ_MASK            (0x80U)
#define APBH_CTRL2_CH7_ERROR_IRQ_SHIFT           (7U)
#define APBH_CTRL2_CH8_ERROR_IRQ_MASK            (0x100U)
#define APBH_CTRL2_CH8_ERROR_IRQ_SHIFT           (8U)
#define APBH_CTRL2_CH9_ERROR_IRQ_MASK            (0x200U)
#define APBH_CTRL2_CH9_ERROR_IRQ_SHIFT           (9U)
#define APBH_CTRL2_CH10_ERROR_IRQ_MASK           (0x400U)
#define APBH_CTRL2_CH10_ERROR_IRQ_SHIFT          (10U)
#define APBH_CTRL2_CH11_ERROR_IRQ_MASK           (0x800U)
#define APBH_CTRL2_CH11_ERROR_IRQ_SHIFT          (11U)
#define APBH_CTRL2_CH12_ERROR_IRQ_MASK           (0x1000U)
#define APBH_CTRL2_CH12_ERROR_IRQ_SHIFT          (12U)
#define APBH_CTRL2_CH13_ERROR_IRQ_MASK           (0x2000U)
#define APBH_CTRL2_CH13_ERROR_IRQ_SHIFT          (13U)
#define APBH_CTRL2_CH14_ERROR_IRQ_MASK           (0x4000U)
#define APBH_CTRL2_CH14_ERROR_IRQ_SHIFT          (14U)
#define APBH_CTRL2_CH15_ERROR_IRQ_MASK           (0x8000U)
#define APBH_CTRL2_CH15_ERROR_IRQ_SHIFT          (15U)
#define APBH_CTRL2_CH0_ERROR_STATUS_MASK         (0x10000U)
#define APBH_CTRL2_CH0_ERROR_STATUS_SHIFT        (16U)
#define APBH_CTRL2_CH1_ERROR_STATUS_MASK         (0x20000U)
#define APBH_CTRL2_CH1_ERROR_STATUS_SHIFT        (17U)
#define APBH_CTRL2_CH2_ERROR_STATUS_MASK         (0x40000U)
#define APBH_CTRL2_CH2_ERROR_STATUS_SHIFT        (18U)
#define APBH_CTRL2_CH3_ERROR_STATUS_MASK         (0x80000U)
#define APBH_CTRL2_CH3_ERROR_STATUS_SHIFT        (19U)
#define APBH_CTRL2_CH4_ERROR_STATUS_MASK         (0x100000U)
#define APBH_CTRL2_CH4_ERROR_STATUS_SHIFT        (20U)
#define APBH_CTRL2_CH5_ERROR_STATUS_MASK         (0x200000U)
#define APBH_CTRL2_CH5_ERROR_STATUS_SHIFT        (21U)
#define APBH_CTRL2_CH6_ERROR_STATUS_MASK         (0x400000U)
#define APBH_CTRL2_CH6_ERROR_STATUS_SHIFT        (22U)
#define APBH_CTRL2_CH7_ERROR_STATUS_MASK         (0x800000U)
#define APBH_CTRL2_CH7_ERROR_STATUS_SHIFT        (23U)
#define APBH_CTRL2_CH8_ERROR_STATUS_MASK         (0x1000000U)
#define APBH_CTRL2_CH8_ERROR_STATUS_SHIFT        (24U)
#define APBH_CTRL2_CH9_ERROR_STATUS_MASK         (0x2000000U)
#define APBH_CTRL2_CH9_ERROR_STATUS_SHIFT        (25U)
#define APBH_CTRL2_CH10_ERROR_STATUS_MASK        (0x4000000U)
#define APBH_CTRL2_CH10_ERROR_STATUS_SHIFT       (26U)
#define APBH_CTRL2_CH11_ERROR_STATUS_MASK        (0x8000000U)
#define APBH_CTRL2_CH11_ERROR_STATUS_SHIFT       (27U)
#define APBH_CTRL2_CH12_ERROR_STATUS_MASK        (0x10000000U)
#define APBH_CTRL2_CH12_ERROR_STATUS_SHIFT       (28U)
#define APBH_CTRL2_CH13_ERROR_STATUS_MASK        (0x20000000U)
#define APBH_CTRL2_CH13_ERROR_STATUS_SHIFT       (29U)
#define APBH_CTRL2_CH14_ERROR_STATUS_MASK        (0x40000000U)
#define APBH_CTRL2_CH14_ERROR_STATUS_SHIFT       (30U)
#define APBH_CTRL2_CH15_ERROR_STATUS_MASK        (0x80000000U)
#define APBH_CTRL2_CH15_ERROR_STATUS_SHIFT       (31U)
/*! @} */

/*! @name CTRL2_SET - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_SET_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_SET_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_SET_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_SET_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_SET_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_SET_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_SET_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_SET_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_SET_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_SET_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_SET_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_SET_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_SET_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_SET_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_SET_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_SET_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_SET_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_SET_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_SET_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_SET_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_SET_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_SET_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_SET_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_SET_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_SET_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_SET_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_SET_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_SET_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_SET_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_SET_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_SET_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_SET_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CTRL2_CLR - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_CLR_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_CLR_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_CLR_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_CLR_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_CLR_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_CLR_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_CLR_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_CLR_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_CLR_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_CLR_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_CLR_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_CLR_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_CLR_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_CLR_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_CLR_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_CLR_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_CLR_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_CLR_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_CLR_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_CLR_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_CLR_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_CLR_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_CLR_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_CLR_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_CLR_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_CLR_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_CLR_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_CLR_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_CLR_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_CLR_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_CLR_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_CLR_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CTRL2_TOG - AHB to APBH Bridge Control and Status Register 2 */
/*! @{ */
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_MASK        (0x1U)
#define APBH_CTRL2_TOG_CH0_ERROR_IRQ_SHIFT       (0U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_MASK        (0x2U)
#define APBH_CTRL2_TOG_CH1_ERROR_IRQ_SHIFT       (1U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_MASK        (0x4U)
#define APBH_CTRL2_TOG_CH2_ERROR_IRQ_SHIFT       (2U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_MASK        (0x8U)
#define APBH_CTRL2_TOG_CH3_ERROR_IRQ_SHIFT       (3U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_MASK        (0x10U)
#define APBH_CTRL2_TOG_CH4_ERROR_IRQ_SHIFT       (4U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_MASK        (0x20U)
#define APBH_CTRL2_TOG_CH5_ERROR_IRQ_SHIFT       (5U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_MASK        (0x40U)
#define APBH_CTRL2_TOG_CH6_ERROR_IRQ_SHIFT       (6U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_MASK        (0x80U)
#define APBH_CTRL2_TOG_CH7_ERROR_IRQ_SHIFT       (7U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_MASK        (0x100U)
#define APBH_CTRL2_TOG_CH8_ERROR_IRQ_SHIFT       (8U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_MASK        (0x200U)
#define APBH_CTRL2_TOG_CH9_ERROR_IRQ_SHIFT       (9U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_MASK       (0x400U)
#define APBH_CTRL2_TOG_CH10_ERROR_IRQ_SHIFT      (10U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_MASK       (0x800U)
#define APBH_CTRL2_TOG_CH11_ERROR_IRQ_SHIFT      (11U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_MASK       (0x1000U)
#define APBH_CTRL2_TOG_CH12_ERROR_IRQ_SHIFT      (12U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_MASK       (0x2000U)
#define APBH_CTRL2_TOG_CH13_ERROR_IRQ_SHIFT      (13U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_MASK       (0x4000U)
#define APBH_CTRL2_TOG_CH14_ERROR_IRQ_SHIFT      (14U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_MASK       (0x8000U)
#define APBH_CTRL2_TOG_CH15_ERROR_IRQ_SHIFT      (15U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_MASK     (0x10000U)
#define APBH_CTRL2_TOG_CH0_ERROR_STATUS_SHIFT    (16U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_MASK     (0x20000U)
#define APBH_CTRL2_TOG_CH1_ERROR_STATUS_SHIFT    (17U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_MASK     (0x40000U)
#define APBH_CTRL2_TOG_CH2_ERROR_STATUS_SHIFT    (18U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_MASK     (0x80000U)
#define APBH_CTRL2_TOG_CH3_ERROR_STATUS_SHIFT    (19U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_MASK     (0x100000U)
#define APBH_CTRL2_TOG_CH4_ERROR_STATUS_SHIFT    (20U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_MASK     (0x200000U)
#define APBH_CTRL2_TOG_CH5_ERROR_STATUS_SHIFT    (21U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_MASK     (0x400000U)
#define APBH_CTRL2_TOG_CH6_ERROR_STATUS_SHIFT    (22U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_MASK     (0x800000U)
#define APBH_CTRL2_TOG_CH7_ERROR_STATUS_SHIFT    (23U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_MASK     (0x1000000U)
#define APBH_CTRL2_TOG_CH8_ERROR_STATUS_SHIFT    (24U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_MASK     (0x2000000U)
#define APBH_CTRL2_TOG_CH9_ERROR_STATUS_SHIFT    (25U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_MASK    (0x4000000U)
#define APBH_CTRL2_TOG_CH10_ERROR_STATUS_SHIFT   (26U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_MASK    (0x8000000U)
#define APBH_CTRL2_TOG_CH11_ERROR_STATUS_SHIFT   (27U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_MASK    (0x10000000U)
#define APBH_CTRL2_TOG_CH12_ERROR_STATUS_SHIFT   (28U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_MASK    (0x20000000U)
#define APBH_CTRL2_TOG_CH13_ERROR_STATUS_SHIFT   (29U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_MASK    (0x40000000U)
#define APBH_CTRL2_TOG_CH14_ERROR_STATUS_SHIFT   (30U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_MASK    (0x80000000U)
#define APBH_CTRL2_TOG_CH15_ERROR_STATUS_SHIFT   (31U)
/*! @} */

/*! @name CHANNEL_CTRL - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK    (0xFFFFU)
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT   (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_FREEZE_CHANNEL(x)      (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK     (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT    (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_RESET_CHANNEL(x)       (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_SET - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_SET_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_SET_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_CLR - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_CLR_RESET_CHANNEL_MASK)
/*! @} */

/*! @name CHANNEL_CTRL_TOG - AHB to APBH Bridge Channel Register */
/*! @{ */
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK (0xFFFFU)
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT (0U)
/*! FREEZE_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL(x)  (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_FREEZE_CHANNEL_MASK)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK (0xFFFF0000U)
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT (16U)
/*! RESET_CHANNEL
 *  0b0000000000000001..NAND0
 *  0b0000000000000010..NAND1
 *  0b0000000000000100..NAND2
 *  0b0000000000001000..NAND3
 *  0b0000000000010000..NAND4
 *  0b0000000000100000..NAND5
 *  0b0000000001000000..NAND6
 *  0b0000000010000000..NAND7
 *  0b0000000100000000..SSP
 */
#define APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL(x)   (((uint32_t)(((uint32_t)(x)) << APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_SHIFT)) & APBH_CHANNEL_CTRL_TOG_RESET_CHANNEL_MASK)
/*! @} */

/*! @name DEVSEL - AHB to APBH DMA Device Assignment Register */
/*! @{ */
#define APBH_DEVSEL_CH0_MASK                     (0x3U)
#define APBH_DEVSEL_CH0_SHIFT                    (0U)
#define APBH_DEVSEL_CH0(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH0_SHIFT)) & APBH_DEVSEL_CH0_MASK)
#define APBH_DEVSEL_CH1_MASK                     (0xCU)
#define APBH_DEVSEL_CH1_SHIFT                    (2U)
#define APBH_DEVSEL_CH1(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH1_SHIFT)) & APBH_DEVSEL_CH1_MASK)
#define APBH_DEVSEL_CH2_MASK                     (0x30U)
#define APBH_DEVSEL_CH2_SHIFT                    (4U)
#define APBH_DEVSEL_CH2(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH2_SHIFT)) & APBH_DEVSEL_CH2_MASK)
#define APBH_DEVSEL_CH3_MASK                     (0xC0U)
#define APBH_DEVSEL_CH3_SHIFT                    (6U)
#define APBH_DEVSEL_CH3(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH3_SHIFT)) & APBH_DEVSEL_CH3_MASK)
#define APBH_DEVSEL_CH4_MASK                     (0x300U)
#define APBH_DEVSEL_CH4_SHIFT                    (8U)
#define APBH_DEVSEL_CH4(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH4_SHIFT)) & APBH_DEVSEL_CH4_MASK)
#define APBH_DEVSEL_CH5_MASK                     (0xC00U)
#define APBH_DEVSEL_CH5_SHIFT                    (10U)
#define APBH_DEVSEL_CH5(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH5_SHIFT)) & APBH_DEVSEL_CH5_MASK)
#define APBH_DEVSEL_CH6_MASK                     (0x3000U)
#define APBH_DEVSEL_CH6_SHIFT                    (12U)
#define APBH_DEVSEL_CH6(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH6_SHIFT)) & APBH_DEVSEL_CH6_MASK)
#define APBH_DEVSEL_CH7_MASK                     (0xC000U)
#define APBH_DEVSEL_CH7_SHIFT                    (14U)
#define APBH_DEVSEL_CH7(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH7_SHIFT)) & APBH_DEVSEL_CH7_MASK)
#define APBH_DEVSEL_CH8_MASK                     (0x30000U)
#define APBH_DEVSEL_CH8_SHIFT                    (16U)
#define APBH_DEVSEL_CH8(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH8_SHIFT)) & APBH_DEVSEL_CH8_MASK)
#define APBH_DEVSEL_CH9_MASK                     (0xC0000U)
#define APBH_DEVSEL_CH9_SHIFT                    (18U)
#define APBH_DEVSEL_CH9(x)                       (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH9_SHIFT)) & APBH_DEVSEL_CH9_MASK)
#define APBH_DEVSEL_CH10_MASK                    (0x300000U)
#define APBH_DEVSEL_CH10_SHIFT                   (20U)
#define APBH_DEVSEL_CH10(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH10_SHIFT)) & APBH_DEVSEL_CH10_MASK)
#define APBH_DEVSEL_CH11_MASK                    (0xC00000U)
#define APBH_DEVSEL_CH11_SHIFT                   (22U)
#define APBH_DEVSEL_CH11(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH11_SHIFT)) & APBH_DEVSEL_CH11_MASK)
#define APBH_DEVSEL_CH12_MASK                    (0x3000000U)
#define APBH_DEVSEL_CH12_SHIFT                   (24U)
#define APBH_DEVSEL_CH12(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH12_SHIFT)) & APBH_DEVSEL_CH12_MASK)
#define APBH_DEVSEL_CH13_MASK                    (0xC000000U)
#define APBH_DEVSEL_CH13_SHIFT                   (26U)
#define APBH_DEVSEL_CH13(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH13_SHIFT)) & APBH_DEVSEL_CH13_MASK)
#define APBH_DEVSEL_CH14_MASK                    (0x30000000U)
#define APBH_DEVSEL_CH14_SHIFT                   (28U)
#define APBH_DEVSEL_CH14(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH14_SHIFT)) & APBH_DEVSEL_CH14_MASK)
#define APBH_DEVSEL_CH15_MASK                    (0xC0000000U)
#define APBH_DEVSEL_CH15_SHIFT                   (30U)
#define APBH_DEVSEL_CH15(x)                      (((uint32_t)(((uint32_t)(x)) << APBH_DEVSEL_CH15_SHIFT)) & APBH_DEVSEL_CH15_MASK)
/*! @} */

/*! @name DMA_BURST_SIZE - AHB to APBH DMA burst size */
/*! @{ */
#define APBH_DMA_BURST_SIZE_CH0_MASK             (0x3U)
#define APBH_DMA_BURST_SIZE_CH0_SHIFT            (0U)
#define APBH_DMA_BURST_SIZE_CH0(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH0_SHIFT)) & APBH_DMA_BURST_SIZE_CH0_MASK)
#define APBH_DMA_BURST_SIZE_CH1_MASK             (0xCU)
#define APBH_DMA_BURST_SIZE_CH1_SHIFT            (2U)
#define APBH_DMA_BURST_SIZE_CH1(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH1_SHIFT)) & APBH_DMA_BURST_SIZE_CH1_MASK)
#define APBH_DMA_BURST_SIZE_CH2_MASK             (0x30U)
#define APBH_DMA_BURST_SIZE_CH2_SHIFT            (4U)
#define APBH_DMA_BURST_SIZE_CH2(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH2_SHIFT)) & APBH_DMA_BURST_SIZE_CH2_MASK)
#define APBH_DMA_BURST_SIZE_CH3_MASK             (0xC0U)
#define APBH_DMA_BURST_SIZE_CH3_SHIFT            (6U)
#define APBH_DMA_BURST_SIZE_CH3(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH3_SHIFT)) & APBH_DMA_BURST_SIZE_CH3_MASK)
#define APBH_DMA_BURST_SIZE_CH4_MASK             (0x300U)
#define APBH_DMA_BURST_SIZE_CH4_SHIFT            (8U)
#define APBH_DMA_BURST_SIZE_CH4(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH4_SHIFT)) & APBH_DMA_BURST_SIZE_CH4_MASK)
#define APBH_DMA_BURST_SIZE_CH5_MASK             (0xC00U)
#define APBH_DMA_BURST_SIZE_CH5_SHIFT            (10U)
#define APBH_DMA_BURST_SIZE_CH5(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH5_SHIFT)) & APBH_DMA_BURST_SIZE_CH5_MASK)
#define APBH_DMA_BURST_SIZE_CH6_MASK             (0x3000U)
#define APBH_DMA_BURST_SIZE_CH6_SHIFT            (12U)
#define APBH_DMA_BURST_SIZE_CH6(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH6_SHIFT)) & APBH_DMA_BURST_SIZE_CH6_MASK)
#define APBH_DMA_BURST_SIZE_CH7_MASK             (0xC000U)
#define APBH_DMA_BURST_SIZE_CH7_SHIFT            (14U)
#define APBH_DMA_BURST_SIZE_CH7(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH7_SHIFT)) & APBH_DMA_BURST_SIZE_CH7_MASK)
#define APBH_DMA_BURST_SIZE_CH8_MASK             (0x30000U)
#define APBH_DMA_BURST_SIZE_CH8_SHIFT            (16U)
/*! CH8
 *  0b00..BURST0
 *  0b01..BURST4
 *  0b10..BURST8
 */
#define APBH_DMA_BURST_SIZE_CH8(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH8_SHIFT)) & APBH_DMA_BURST_SIZE_CH8_MASK)
#define APBH_DMA_BURST_SIZE_CH9_MASK             (0xC0000U)
#define APBH_DMA_BURST_SIZE_CH9_SHIFT            (18U)
#define APBH_DMA_BURST_SIZE_CH9(x)               (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH9_SHIFT)) & APBH_DMA_BURST_SIZE_CH9_MASK)
#define APBH_DMA_BURST_SIZE_CH10_MASK            (0x300000U)
#define APBH_DMA_BURST_SIZE_CH10_SHIFT           (20U)
#define APBH_DMA_BURST_SIZE_CH10(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH10_SHIFT)) & APBH_DMA_BURST_SIZE_CH10_MASK)
#define APBH_DMA_BURST_SIZE_CH11_MASK            (0xC00000U)
#define APBH_DMA_BURST_SIZE_CH11_SHIFT           (22U)
#define APBH_DMA_BURST_SIZE_CH11(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH11_SHIFT)) & APBH_DMA_BURST_SIZE_CH11_MASK)
#define APBH_DMA_BURST_SIZE_CH12_MASK            (0x3000000U)
#define APBH_DMA_BURST_SIZE_CH12_SHIFT           (24U)
#define APBH_DMA_BURST_SIZE_CH12(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH12_SHIFT)) & APBH_DMA_BURST_SIZE_CH12_MASK)
#define APBH_DMA_BURST_SIZE_CH13_MASK            (0xC000000U)
#define APBH_DMA_BURST_SIZE_CH13_SHIFT           (26U)
#define APBH_DMA_BURST_SIZE_CH13(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH13_SHIFT)) & APBH_DMA_BURST_SIZE_CH13_MASK)
#define APBH_DMA_BURST_SIZE_CH14_MASK            (0x30000000U)
#define APBH_DMA_BURST_SIZE_CH14_SHIFT           (28U)
#define APBH_DMA_BURST_SIZE_CH14(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH14_SHIFT)) & APBH_DMA_BURST_SIZE_CH14_MASK)
#define APBH_DMA_BURST_SIZE_CH15_MASK            (0xC0000000U)
#define APBH_DMA_BURST_SIZE_CH15_SHIFT           (30U)
#define APBH_DMA_BURST_SIZE_CH15(x)              (((uint32_t)(((uint32_t)(x)) << APBH_DMA_BURST_SIZE_CH15_SHIFT)) & APBH_DMA_BURST_SIZE_CH15_MASK)
/*! @} */

/*! @name DEBUG - AHB to APBH DMA Debug Register */
/*! @{ */
#define APBH_DEBUG_GPMI_ONE_FIFO_MASK            (0x1U)
#define APBH_DEBUG_GPMI_ONE_FIFO_SHIFT           (0U)
/*! @} */

/*! @name CH_CURCMDAR - APBH DMA Channel n Current Command Address Register */
/*! @{ */
#define APBH_CH_CURCMDAR_CMD_ADDR_MASK           (0xFFFFFFFFU)
#define APBH_CH_CURCMDAR_CMD_ADDR_SHIFT          (0U)
#define APBH_CH_CURCMDAR_CMD_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH_CURCMDAR_CMD_ADDR_SHIFT)) & APBH_CH_CURCMDAR_CMD_ADDR_MASK)
/*! @} */

/* The count of APBH_CH_CURCMDAR */
#define APBH_CH_CURCMDAR_COUNT                   (16U)

/*! @name CH_NXTCMDAR - APBH DMA Channel n Next Command Address Register */
/*! @{ */
#define APBH_CH_NXTCMDAR_CMD_ADDR_MASK           (0xFFFFFFFFU)
#define APBH_CH_NXTCMDAR_CMD_ADDR_SHIFT          (0U)
#define APBH_CH_NXTCMDAR_CMD_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << APBH_CH_NXTCMDAR_CMD_ADDR_SHIFT)) & APBH_CH_NXTCMDAR_CMD_ADDR_MASK)
/*! @} */

/* The count of APBH_CH_NXTCMDAR */
#define APBH_CH_NXTCMDAR_COUNT                   (16U)

/*! @name CH_CMD - APBH DMA Channel n Command Register */
/*! @{ */
#define APBH_CH_CMD_COMMAND_MASK                 (0x3U)
#define APBH_CH_CMD_COMMAND_SHIFT                (0U)
/*! COMMAND
 *  0b00..Perform any requested PIO word transfers but terminate command before any DMA transfer.
 *  0b01..Perform any requested PIO word transfers and then perform a DMA transfer from the peripheral for the specified number of bytes.
 *  0b10..Perform any requested PIO word transfers and then perform a DMA transfer to the peripheral for the specified number of bytes.
 *  0b11..Perform any requested PIO word transfers and then perform a conditional branch to the next chained
 *        device. Follow the NEXCMD_ADDR pointer if the perpheral sense is true. Follow the BUFFER_ADDRESS as a chain
 *        pointer if the peripheral sense line is false.
 */
#define APBH_CH_CMD_COMMAND(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH_CMD_COMMAND_SHIFT)) & APBH_CH_CMD_COMMAND_MASK)
#define APBH_CH_CMD_CHAIN_MASK                   (0x4U)
#define APBH_CH_CMD_CHAIN_SHIFT                  (2U)
#define APBH_CH_CMD_IRQONCMPLT_MASK              (0x8U)
#define APBH_CH_CMD_IRQONCMPLT_SHIFT             (3U)
#define APBH_CH_CMD_NANDLOCK_MASK                (0x10U)
#define APBH_CH_CMD_NANDLOCK_SHIFT               (4U)
#define APBH_CH_CMD_NANDWAIT4READY_MASK          (0x20U)
#define APBH_CH_CMD_NANDWAIT4READY_SHIFT         (5U)
#define APBH_CH_CMD_SEMAPHORE_MASK               (0x40U)
#define APBH_CH_CMD_SEMAPHORE_SHIFT              (6U)
#define APBH_CH_CMD_WAIT4ENDCMD_MASK             (0x80U)
#define APBH_CH_CMD_WAIT4ENDCMD_SHIFT            (7U)
#define APBH_CH_CMD_HALTONTERMINATE_MASK         (0x100U)
#define APBH_CH_CMD_HALTONTERMINATE_SHIFT        (8U)
#define APBH_CH_CMD_CMDWORDS_MASK                (0xF000U)
#define APBH_CH_CMD_CMDWORDS_SHIFT               (12U)
#define APBH_CH_CMD_CMDWORDS(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH_CMD_CMDWORDS_SHIFT)) & APBH_CH_CMD_CMDWORDS_MASK)
#define APBH_CH_CMD_XFER_COUNT_MASK              (0xFFFF0000U)
#define APBH_CH_CMD_XFER_COUNT_SHIFT             (16U)
#define APBH_CH_CMD_XFER_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << APBH_CH_CMD_XFER_COUNT_SHIFT)) & APBH_CH_CMD_XFER_COUNT_MASK)
/*! @} */

/* The count of APBH_CH_CMD */
#define APBH_CH_CMD_COUNT                        (16U)

/*! @name CH_BAR - APBH DMA Channel n Buffer Address Register */
/*! @{ */
#define APBH_CH_BAR_ADDRESS_MASK                 (0xFFFFFFFFU)
#define APBH_CH_BAR_ADDRESS_SHIFT                (0U)
#define APBH_CH_BAR_ADDRESS(x)                   (((uint32_t)(((uint32_t)(x)) << APBH_CH_BAR_ADDRESS_SHIFT)) & APBH_CH_BAR_ADDRESS_MASK)
/*! @} */

/* The count of APBH_CH_BAR */
#define APBH_CH_BAR_COUNT                        (16U)

/*! @name CH_SEMA - APBH DMA Channel n Semaphore Register */
/*! @{ */
#define APBH_CH_SEMA_INCREMENT_SEMA_MASK         (0xFFU)
#define APBH_CH_SEMA_INCREMENT_SEMA_SHIFT        (0U)
#define APBH_CH_SEMA_INCREMENT_SEMA(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH_SEMA_INCREMENT_SEMA_SHIFT)) & APBH_CH_SEMA_INCREMENT_SEMA_MASK)
#define APBH_CH_SEMA_PHORE_MASK                  (0xFF0000U)
#define APBH_CH_SEMA_PHORE_SHIFT                 (16U)
#define APBH_CH_SEMA_PHORE(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_CH_SEMA_PHORE_SHIFT)) & APBH_CH_SEMA_PHORE_MASK)
/*! @} */

/* The count of APBH_CH_SEMA */
#define APBH_CH_SEMA_COUNT                       (16U)

/*! @name CH_DEBUG1 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH_DEBUG1_STATEMACHINE_MASK         (0x1FU)
#define APBH_CH_DEBUG1_STATEMACHINE_SHIFT        (0U)
/*! STATEMACHINE
 *  0b00000..This is the idle state of the DMA state machine.
 *  0b00001..State in which the DMA is waiting to receive the first word of a command.
 *  0b00010..State in which the DMA is waiting to receive the third word of a command.
 *  0b00011..State in which the DMA is waiting to receive the second word of a command.
 *  0b00100..The state machine processes the descriptor command field in this state and branches accordingly.
 *  0b00101..The state machine waits in this state for the PIO APB cycles to complete.
 *  0b00110..State in which the DMA is waiting to receive the fourth word of a command, or waiting to receive the
 *           PIO words when PIO count is greater than 1.
 *  0b00111..This state determines whether another PIO cycle needs to occur before starting DMA transfers.
 *  0b01000..During a read transfers, the state machine enters this state waiting for the last bytes to be pushed out on the APB.
 *  0b01001..When an AHB read request occurs, the state machine waits in this state for the AHB transfer to complete.
 *  0b01100..During DMA Write transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01101..During DMA Read transfers, the state machine waits in this state until the AHB master arbiter accepts the request from this channel.
 *  0b01110..Upon completion of the DMA transfers, this state checks the value of the Chain bit and branches accordingly.
 *  0b01111..The state machine goes to this state after the DMA transfers are complete, and determines what step to take next.
 *  0b10100..When a terminate signal is set, the state machine enters this state until the current AHB transfer is completed.
 *  0b10101..When the Wait for Command End bit is set, the state machine enters this state until the DMA device indicates that the command is complete.
 *  0b11100..During DMA Write transfers, the state machine waits in this state until the AHB master completes the write to the AHB memory space.
 *  0b11101..If HALTONTERMINATE is set and a terminate signal is set, the state machine enters this state and
 *           effectively halts. A channel reset is required to exit this state
 *  0b11110..If the Chain bit is a 0, the state machine enters this state and effectively halts.
 *  0b11111..When the NAND Wait for Ready bit is set, the state machine enters this state until the GPMI device
 *           indicates that the external device is ready.
 */
#define APBH_CH_DEBUG1_STATEMACHINE(x)           (((uint32_t)(((uint32_t)(x)) << APBH_CH_DEBUG1_STATEMACHINE_SHIFT)) & APBH_CH_DEBUG1_STATEMACHINE_MASK)
#define APBH_CH_DEBUG1_RSVD1_MASK                (0xFFFE0U)
#define APBH_CH_DEBUG1_RSVD1_SHIFT               (5U)
#define APBH_CH_DEBUG1_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << APBH_CH_DEBUG1_RSVD1_SHIFT)) & APBH_CH_DEBUG1_RSVD1_MASK)
#define APBH_CH_DEBUG1_WR_FIFO_FULL_MASK         (0x100000U)
#define APBH_CH_DEBUG1_WR_FIFO_FULL_SHIFT        (20U)
#define APBH_CH_DEBUG1_WR_FIFO_EMPTY_MASK        (0x200000U)
#define APBH_CH_DEBUG1_WR_FIFO_EMPTY_SHIFT       (21U)
#define APBH_CH_DEBUG1_RD_FIFO_FULL_MASK         (0x400000U)
#define APBH_CH_DEBUG1_RD_FIFO_FULL_SHIFT        (22U)
#define APBH_CH_DEBUG1_RD_FIFO_EMPTY_MASK        (0x800000U)
#define APBH_CH_DEBUG1_RD_FIFO_EMPTY_SHIFT       (23U)
#define APBH_CH_DEBUG1_NEXTCMDADDRVALID_MASK     (0x1000000U)
#define APBH_CH_DEBUG1_NEXTCMDADDRVALID_SHIFT    (24U)
#define APBH_CH_DEBUG1_READY_MASK                (0x4000000U)
#define APBH_CH_DEBUG1_READY_SHIFT               (26U)
#define APBH_CH_DEBUG1_END_MASK                  (0x10000000U)
#define APBH_CH_DEBUG1_END_SHIFT                 (28U)
#define APBH_CH_DEBUG1_KICK_MASK                 (0x20000000U)
#define APBH_CH_DEBUG1_KICK_SHIFT                (29U)
#define APBH_CH_DEBUG1_BURST_MASK                (0x40000000U)
#define APBH_CH_DEBUG1_BURST_SHIFT               (30U)
#define APBH_CH_DEBUG1_REQ_MASK                  (0x80000000U)
#define APBH_CH_DEBUG1_REQ_SHIFT                 (31U)
/*! @} */

/* The count of APBH_CH_DEBUG1 */
#define APBH_CH_DEBUG1_COUNT                     (16U)

/*! @name CH_DEBUG2 - AHB to APBH DMA Channel n Debug Information */
/*! @{ */
#define APBH_CH_DEBUG2_AHB_BYTES_MASK            (0xFFFFU)
#define APBH_CH_DEBUG2_AHB_BYTES_SHIFT           (0U)
#define APBH_CH_DEBUG2_AHB_BYTES(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH_DEBUG2_AHB_BYTES_SHIFT)) & APBH_CH_DEBUG2_AHB_BYTES_MASK)
#define APBH_CH_DEBUG2_APB_BYTES_MASK            (0xFFFF0000U)
#define APBH_CH_DEBUG2_APB_BYTES_SHIFT           (16U)
#define APBH_CH_DEBUG2_APB_BYTES(x)              (((uint32_t)(((uint32_t)(x)) << APBH_CH_DEBUG2_APB_BYTES_SHIFT)) & APBH_CH_DEBUG2_APB_BYTES_MASK)
/*! @} */

/* The count of APBH_CH_DEBUG2 */
#define APBH_CH_DEBUG2_COUNT                     (16U)

/*! @name VERSION - APBH Bridge Version Register */
/*! @{ */
#define APBH_VERSION_STEP_MASK                   (0xFFFFU)
#define APBH_VERSION_STEP_SHIFT                  (0U)
#define APBH_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_STEP_SHIFT)) & APBH_VERSION_STEP_MASK)
#define APBH_VERSION_MINOR_MASK                  (0xFF0000U)
#define APBH_VERSION_MINOR_SHIFT                 (16U)
#define APBH_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MINOR_SHIFT)) & APBH_VERSION_MINOR_MASK)
#define APBH_VERSION_MAJOR_MASK                  (0xFF000000U)
#define APBH_VERSION_MAJOR_SHIFT                 (24U)
#define APBH_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << APBH_VERSION_MAJOR_SHIFT)) & APBH_VERSION_MAJOR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group APBH_Register_Masks */


/* APBH - Peripheral instance base addresses */
/** Peripheral APBH base pointer */
#define APBH_BASE_PTR                            ((APBH_MemMapPtr)0x33000000u)
/** Array initializer of APBH peripheral base pointers */
#define APBH_BASE_PTRS                           { APBH_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- APBH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup APBH_Register_Accessor_Macros APBH - Register accessor macros
 * @{
 */


/* APBH - Register instance definitions */
/* APBH */
#define APBH_CTRL0                               APBH_CTRL0_REG(APBH_BASE_PTR)
#define APBH_CTRL0_SET                           APBH_CTRL0_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL0_CLR                           APBH_CTRL0_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL0_TOG                           APBH_CTRL0_TOG_REG(APBH_BASE_PTR)
#define APBH_CTRL1                               APBH_CTRL1_REG(APBH_BASE_PTR)
#define APBH_CTRL1_SET                           APBH_CTRL1_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL1_CLR                           APBH_CTRL1_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL1_TOG                           APBH_CTRL1_TOG_REG(APBH_BASE_PTR)
#define APBH_CTRL2                               APBH_CTRL2_REG(APBH_BASE_PTR)
#define APBH_CTRL2_SET                           APBH_CTRL2_SET_REG(APBH_BASE_PTR)
#define APBH_CTRL2_CLR                           APBH_CTRL2_CLR_REG(APBH_BASE_PTR)
#define APBH_CTRL2_TOG                           APBH_CTRL2_TOG_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL                        APBH_CHANNEL_CTRL_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_SET                    APBH_CHANNEL_CTRL_SET_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_CLR                    APBH_CHANNEL_CTRL_CLR_REG(APBH_BASE_PTR)
#define APBH_CHANNEL_CTRL_TOG                    APBH_CHANNEL_CTRL_TOG_REG(APBH_BASE_PTR)
#define APBH_DEVSEL                              APBH_DEVSEL_REG(APBH_BASE_PTR)
#define APBH_DMA_BURST_SIZE                      APBH_DMA_BURST_SIZE_REG(APBH_BASE_PTR)
#define APBH_DEBUG                               APBH_DEBUG_REG(APBH_BASE_PTR)
#define APBH_CH0_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,0)
#define APBH_CH0_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,0)
#define APBH_CH0_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,0)
#define APBH_CH0_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,0)
#define APBH_CH0_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,0)
#define APBH_CH0_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,0)
#define APBH_CH0_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,0)
#define APBH_CH1_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,1)
#define APBH_CH1_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,1)
#define APBH_CH1_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,1)
#define APBH_CH1_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,1)
#define APBH_CH1_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,1)
#define APBH_CH1_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,1)
#define APBH_CH1_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,1)
#define APBH_CH2_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,2)
#define APBH_CH2_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,2)
#define APBH_CH2_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,2)
#define APBH_CH2_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,2)
#define APBH_CH2_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,2)
#define APBH_CH2_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,2)
#define APBH_CH2_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,2)
#define APBH_CH3_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,3)
#define APBH_CH3_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,3)
#define APBH_CH3_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,3)
#define APBH_CH3_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,3)
#define APBH_CH3_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,3)
#define APBH_CH3_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,3)
#define APBH_CH3_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,3)
#define APBH_CH4_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,4)
#define APBH_CH4_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,4)
#define APBH_CH4_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,4)
#define APBH_CH4_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,4)
#define APBH_CH4_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,4)
#define APBH_CH4_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,4)
#define APBH_CH4_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,4)
#define APBH_CH5_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,5)
#define APBH_CH5_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,5)
#define APBH_CH5_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,5)
#define APBH_CH5_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,5)
#define APBH_CH5_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,5)
#define APBH_CH5_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,5)
#define APBH_CH5_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,5)
#define APBH_CH6_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,6)
#define APBH_CH6_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,6)
#define APBH_CH6_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,6)
#define APBH_CH6_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,6)
#define APBH_CH6_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,6)
#define APBH_CH6_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,6)
#define APBH_CH6_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,6)
#define APBH_CH7_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,7)
#define APBH_CH7_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,7)
#define APBH_CH7_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,7)
#define APBH_CH7_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,7)
#define APBH_CH7_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,7)
#define APBH_CH7_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,7)
#define APBH_CH7_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,7)
#define APBH_CH8_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,8)
#define APBH_CH8_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,8)
#define APBH_CH8_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,8)
#define APBH_CH8_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,8)
#define APBH_CH8_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,8)
#define APBH_CH8_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,8)
#define APBH_CH8_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,8)
#define APBH_CH9_CURCMDAR                        APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,9)
#define APBH_CH9_NXTCMDAR                        APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,9)
#define APBH_CH9_CMD                             APBH_CH_CMD_REG(APBH_BASE_PTR,9)
#define APBH_CH9_BAR                             APBH_CH_BAR_REG(APBH_BASE_PTR,9)
#define APBH_CH9_SEMA                            APBH_CH_SEMA_REG(APBH_BASE_PTR,9)
#define APBH_CH9_DEBUG1                          APBH_CH_DEBUG1_REG(APBH_BASE_PTR,9)
#define APBH_CH9_DEBUG2                          APBH_CH_DEBUG2_REG(APBH_BASE_PTR,9)
#define APBH_CH10_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,10)
#define APBH_CH10_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,10)
#define APBH_CH10_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,10)
#define APBH_CH10_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,10)
#define APBH_CH10_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,10)
#define APBH_CH10_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,10)
#define APBH_CH10_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,10)
#define APBH_CH11_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,11)
#define APBH_CH11_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,11)
#define APBH_CH11_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,11)
#define APBH_CH11_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,11)
#define APBH_CH11_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,11)
#define APBH_CH11_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,11)
#define APBH_CH11_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,11)
#define APBH_CH12_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,12)
#define APBH_CH12_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,12)
#define APBH_CH12_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,12)
#define APBH_CH12_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,12)
#define APBH_CH12_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,12)
#define APBH_CH12_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,12)
#define APBH_CH12_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,12)
#define APBH_CH13_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,13)
#define APBH_CH13_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,13)
#define APBH_CH13_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,13)
#define APBH_CH13_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,13)
#define APBH_CH13_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,13)
#define APBH_CH13_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,13)
#define APBH_CH13_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,13)
#define APBH_CH14_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,14)
#define APBH_CH14_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,14)
#define APBH_CH14_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,14)
#define APBH_CH14_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,14)
#define APBH_CH14_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,14)
#define APBH_CH14_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,14)
#define APBH_CH14_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,14)
#define APBH_CH15_CURCMDAR                       APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,15)
#define APBH_CH15_NXTCMDAR                       APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,15)
#define APBH_CH15_CMD                            APBH_CH_CMD_REG(APBH_BASE_PTR,15)
#define APBH_CH15_BAR                            APBH_CH_BAR_REG(APBH_BASE_PTR,15)
#define APBH_CH15_SEMA                           APBH_CH_SEMA_REG(APBH_BASE_PTR,15)
#define APBH_CH15_DEBUG1                         APBH_CH_DEBUG1_REG(APBH_BASE_PTR,15)
#define APBH_CH15_DEBUG2                         APBH_CH_DEBUG2_REG(APBH_BASE_PTR,15)
#define APBH_VERSION                             APBH_VERSION_REG(APBH_BASE_PTR)

/* APBH - Register array accessors */
#define APBH_CH_CURCMDAR(index)                  APBH_CH_CURCMDAR_REG(APBH_BASE_PTR,index)
#define APBH_CH_NXTCMDAR(index)                  APBH_CH_NXTCMDAR_REG(APBH_BASE_PTR,index)
#define APBH_CH_CMD(index)                       APBH_CH_CMD_REG(APBH_BASE_PTR,index)
#define APBH_CH_BAR(index)                       APBH_CH_BAR_REG(APBH_BASE_PTR,index)
#define APBH_CH_SEMA(index)                      APBH_CH_SEMA_REG(APBH_BASE_PTR,index)
#define APBH_CH_DEBUG1(index)                    APBH_CH_DEBUG1_REG(APBH_BASE_PTR,index)
#define APBH_CH_DEBUG2(index)                    APBH_CH_DEBUG2_REG(APBH_BASE_PTR,index)

/*!
 * @}
 */ /* end of group APBH_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group APBH_Peripheral */


/* ----------------------------------------------------------------------------
   -- ASRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ASRC_Peripheral ASRC
 * @{
 */

/** ASRC - Peripheral register structure */
typedef struct ASRC_MemMap {
  uint32_t WRFIFO[4];                              /**< ASRC Input Write FIFO, array offset: 0x0, array step: 0x4 */
  uint32_t RDFIFO[4];                              /**< ASRC Output Read FIFO, array offset: 0x10, array step: 0x4 */
  uint32_t CTX_CTRL[4];                            /**< ASRC Context Control, array offset: 0x20, array step: 0x4 */
  uint32_t CTX_CTRL_EXT1[4];                       /**< ASRC Context Control Extended 1, array offset: 0x30, array step: 0x4 */
  uint32_t CTX_CTRL_EXT2[4];                       /**< ASRC Context Control Extended 2, array offset: 0x40, array step: 0x4 */
  uint32_t CTRL_IN_ACCESS[4];                      /**< ASRC Control Input Access, array offset: 0x50, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT0_R0[4];                  /**< ASRC Datapath Processor Control Slot0 Register0, array offset: 0x60, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT0_R1[4];                  /**< ASRC Datapath Processor Control Slot0 Register1, array offset: 0x70, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT0_R2[4];                  /**< ASRC Datapath Processor Control Slot0 Register2, array offset: 0x80, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT0_R3[4];                  /**< ASRC Datapath Processor Control Slot0 Register3, array offset: 0x90, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT1_R0[4];                  /**< ASRC Datapath Processor Control Slot1 Register0, array offset: 0xA0, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT1_R1[4];                  /**< ASRC Datapath Processor Control SLOT1 Register1, array offset: 0xB0, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT1_R2[4];                  /**< ASRC Datapath Processor Control SLOT1 Register2, array offset: 0xC0, array step: 0x4 */
  uint32_t PROC_CTRL_SLOT1_R3[4];                  /**< ASRC Datapath Processor Control SLOT1 Register3, array offset: 0xD0, array step: 0x4 */
  uint32_t CTX_OUT_CTRL[4];                        /**< ASRC Context Output Control, array offset: 0xE0, array step: 0x4 */
  uint32_t CTRL_OUT_ACCESS[4];                     /**< ASRC Control Output Access, array offset: 0xF0, array step: 0x4 */
  uint32_t SAMPLE_FIFO_STATUS[4];                  /**< ASRC Sample FIFO Status, array offset: 0x100, array step: 0x4 */
  struct {                                         /* offset: 0x110, array step: 0x8 */
    uint32_t RS_RATIO_LOW;                           /**< ASRC Resampling Ratio Low, array offset: 0x110, array step: 0x8 */
    uint32_t RS_RATIO_HIGH;                          /**< ASRC Resampling Ratio High, array offset: 0x114, array step: 0x8 */
  } RS_RATIO_LOW[4];
  uint32_t RS_UPDATE_CTRL[4];                      /**< ASRC Resampling Ratio Update Control, array offset: 0x130, array step: 0x4 */
  uint32_t RS_UPDATE_RATE[4];                      /**< ASRC Resampling Ratio Update Rate, array offset: 0x140, array step: 0x4 */
  uint32_t RS_CT_LOW;                              /**< ASRC Resampling Center Tap Coefficient Low, offset: 0x150 */
  uint32_t RS_CT_HIGH;                             /**< ASRC Resampling Center Tap Coefficient High, offset: 0x154 */
  uint8_t RESERVED_0[8];
  uint32_t PRE_COEFF_FIFO[4];                      /**< ASRC Prefilter Coefficient FIFO, array offset: 0x160, array step: 0x4 */
  uint32_t CTX_RS_COEFF_MEM;                       /**< ASRC Context Resampling Coefficient Memory, offset: 0x170 */
  uint32_t CTX_RS_COEFF_CTRL;                      /**< ASRC Context Resampling Coefficient Control, offset: 0x174 */
  uint32_t IRQ_CTRL;                               /**< ASRC Interrupt Control, offset: 0x178 */
  uint32_t IRQ_FLAGS;                              /**< ASRC Interrupt Status Flags, offset: 0x17C */
  uint32_t CHANNEL_STATUS_0[4];                    /**< ASRC Channel Status 0, array offset: 0x180, array step: 0x4 */
  uint32_t CHANNEL_STATUS_1[4];                    /**< ASRC Channel Status 1, array offset: 0x190, array step: 0x4 */
  uint32_t CHANNEL_STATUS_2[4];                    /**< ASRC Channel Status 2, array offset: 0x1A0, array step: 0x4 */
  uint32_t CHANNEL_STATUS_3[4];                    /**< ASRC Channel Status 3, array offset: 0x1B0, array step: 0x4 */
  uint32_t CHANNEL_STATUS_4[4];                    /**< ASRC Channel Status 4, array offset: 0x1C0, array step: 0x4 */
  uint32_t CHANNEL_STATUS_5[4];                    /**< ASRC Channel Status 5, array offset: 0x1D0, array step: 0x4 */
} volatile *ASRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ASRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ASRC_Register_Accessor_Macros ASRC - Register accessor macros
 * @{
 */


/* ASRC - Register accessors */
#define ASRC_WRFIFO_REG(base,index)              ((base)->WRFIFO[index])
#define ASRC_RDFIFO_REG(base,index)              ((base)->RDFIFO[index])
#define ASRC_CTX_CTRL_REG(base,index)            ((base)->CTX_CTRL[index])
#define ASRC_CTX_CTRL_EXT1_REG(base,index)       ((base)->CTX_CTRL_EXT1[index])
#define ASRC_CTX_CTRL_EXT2_REG(base,index)       ((base)->CTX_CTRL_EXT2[index])
#define ASRC_CTRL_IN_ACCESS_REG(base,index)      ((base)->CTRL_IN_ACCESS[index])
#define ASRC_PROC_CTRL_SLOT0_R0_REG(base,index)  ((base)->PROC_CTRL_SLOT0_R0[index])
#define ASRC_PROC_CTRL_SLOT0_R1_REG(base,index)  ((base)->PROC_CTRL_SLOT0_R1[index])
#define ASRC_PROC_CTRL_SLOT0_R2_REG(base,index)  ((base)->PROC_CTRL_SLOT0_R2[index])
#define ASRC_PROC_CTRL_SLOT0_R3_REG(base,index)  ((base)->PROC_CTRL_SLOT0_R3[index])
#define ASRC_PROC_CTRL_SLOT1_R0_REG(base,index)  ((base)->PROC_CTRL_SLOT1_R0[index])
#define ASRC_PROC_CTRL_SLOT1_R1_REG(base,index)  ((base)->PROC_CTRL_SLOT1_R1[index])
#define ASRC_PROC_CTRL_SLOT1_R2_REG(base,index)  ((base)->PROC_CTRL_SLOT1_R2[index])
#define ASRC_PROC_CTRL_SLOT1_R3_REG(base,index)  ((base)->PROC_CTRL_SLOT1_R3[index])
#define ASRC_CTX_OUT_CTRL_REG(base,index)        ((base)->CTX_OUT_CTRL[index])
#define ASRC_CTRL_OUT_ACCESS_REG(base,index)     ((base)->CTRL_OUT_ACCESS[index])
#define ASRC_SAMPLE_FIFO_STATUS_REG(base,index)  ((base)->SAMPLE_FIFO_STATUS[index])
#define ASRC_RS_RATIO_LOW_REG(base,index)        ((base)->RS_RATIO_LOW[index].RS_RATIO_LOW)
#define ASRC_RS_RATIO_HIGH_REG(base,index)       ((base)->RS_RATIO_LOW[index].RS_RATIO_HIGH)
#define ASRC_RS_UPDATE_CTRL_REG(base,index)      ((base)->RS_UPDATE_CTRL[index])
#define ASRC_RS_UPDATE_RATE_REG(base,index)      ((base)->RS_UPDATE_RATE[index])
#define ASRC_RS_CT_LOW_REG(base)                 ((base)->RS_CT_LOW)
#define ASRC_RS_CT_HIGH_REG(base)                ((base)->RS_CT_HIGH)
#define ASRC_PRE_COEFF_FIFO_REG(base,index)      ((base)->PRE_COEFF_FIFO[index])
#define ASRC_CTX_RS_COEFF_MEM_REG(base)          ((base)->CTX_RS_COEFF_MEM)
#define ASRC_CTX_RS_COEFF_CTRL_REG(base)         ((base)->CTX_RS_COEFF_CTRL)
#define ASRC_IRQ_CTRL_REG(base)                  ((base)->IRQ_CTRL)
#define ASRC_IRQ_FLAGS_REG(base)                 ((base)->IRQ_FLAGS)
#define ASRC_CHANNEL_STATUS_0_REG(base,index)    ((base)->CHANNEL_STATUS_0[index])
#define ASRC_CHANNEL_STATUS_1_REG(base,index)    ((base)->CHANNEL_STATUS_1[index])
#define ASRC_CHANNEL_STATUS_2_REG(base,index)    ((base)->CHANNEL_STATUS_2[index])
#define ASRC_CHANNEL_STATUS_3_REG(base,index)    ((base)->CHANNEL_STATUS_3[index])
#define ASRC_CHANNEL_STATUS_4_REG(base,index)    ((base)->CHANNEL_STATUS_4[index])
#define ASRC_CHANNEL_STATUS_5_REG(base,index)    ((base)->CHANNEL_STATUS_5[index])

/*!
 * @}
 */ /* end of group ASRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ASRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ASRC_Register_Masks ASRC Register Masks
 * @{
 */

/*! @name WRFIFO - ASRC Input Write FIFO */
/*! @{ */
#define ASRC_WRFIFO_CTX_WR_DATA_MASK             (0xFFFFFFFFU)
#define ASRC_WRFIFO_CTX_WR_DATA_SHIFT            (0U)
#define ASRC_WRFIFO_CTX_WR_DATA(x)               (((uint32_t)(((uint32_t)(x)) << ASRC_WRFIFO_CTX_WR_DATA_SHIFT)) & ASRC_WRFIFO_CTX_WR_DATA_MASK)
/*! @} */

/* The count of ASRC_WRFIFO */
#define ASRC_WRFIFO_COUNT                        (4U)

/*! @name RDFIFO - ASRC Output Read FIFO */
/*! @{ */
#define ASRC_RDFIFO_CTX_RD_DATA_MASK             (0xFFFFFFFFU)
#define ASRC_RDFIFO_CTX_RD_DATA_SHIFT            (0U)
#define ASRC_RDFIFO_CTX_RD_DATA(x)               (((uint32_t)(((uint32_t)(x)) << ASRC_RDFIFO_CTX_RD_DATA_SHIFT)) & ASRC_RDFIFO_CTX_RD_DATA_MASK)
/*! @} */

/* The count of ASRC_RDFIFO */
#define ASRC_RDFIFO_COUNT                        (4U)

/*! @name CTX_CTRL - ASRC Context Control */
/*! @{ */
#define ASRC_CTX_CTRL_NUM_CH_EN_MASK             (0x1FU)
#define ASRC_CTX_CTRL_NUM_CH_EN_SHIFT            (0U)
#define ASRC_CTX_CTRL_NUM_CH_EN(x)               (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_NUM_CH_EN_SHIFT)) & ASRC_CTX_CTRL_NUM_CH_EN_MASK)
#define ASRC_CTX_CTRL_SIGN_IN_MASK               (0x40U)
#define ASRC_CTX_CTRL_SIGN_IN_SHIFT              (6U)
#define ASRC_CTX_CTRL_FLOAT_FMT_MASK             (0x80U)
#define ASRC_CTX_CTRL_FLOAT_FMT_SHIFT            (7U)
#define ASRC_CTX_CTRL_BITS_PER_SAMPLE_MASK       (0x300U)
#define ASRC_CTX_CTRL_BITS_PER_SAMPLE_SHIFT      (8U)
/*! BITS_PER_SAMPLE - Number of Bits Per Audio Sample
 *  0b00..16-bits Per Sample
 *  0b01..20-bits Per Sample
 *  0b10..24-bits Per Sample
 *  0b11..32-bits Per Sample
 */
#define ASRC_CTX_CTRL_BITS_PER_SAMPLE(x)         (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_BITS_PER_SAMPLE_SHIFT)) & ASRC_CTX_CTRL_BITS_PER_SAMPLE_MASK)
#define ASRC_CTX_CTRL_BIT_REV_MASK               (0x400U)
#define ASRC_CTX_CTRL_BIT_REV_SHIFT              (10U)
#define ASRC_CTX_CTRL_SAMPLE_POSITION_MASK       (0xF800U)
#define ASRC_CTX_CTRL_SAMPLE_POSITION_SHIFT      (11U)
#define ASRC_CTX_CTRL_SAMPLE_POSITION(x)         (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_SAMPLE_POSITION_SHIFT)) & ASRC_CTX_CTRL_SAMPLE_POSITION_MASK)
#define ASRC_CTX_CTRL_FIFO_WTMK_MASK             (0x7F0000U)
#define ASRC_CTX_CTRL_FIFO_WTMK_SHIFT            (16U)
#define ASRC_CTX_CTRL_FIFO_WTMK(x)               (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_FIFO_WTMK_SHIFT)) & ASRC_CTX_CTRL_FIFO_WTMK_MASK)
#define ASRC_CTX_CTRL_FWMDE_MASK                 (0x10000000U)
#define ASRC_CTX_CTRL_FWMDE_SHIFT                (28U)
#define ASRC_CTX_CTRL_RUN_STOP_MASK              (0x20000000U)
#define ASRC_CTX_CTRL_RUN_STOP_SHIFT             (29U)
#define ASRC_CTX_CTRL_RUN_EN_MASK                (0x80000000U)
#define ASRC_CTX_CTRL_RUN_EN_SHIFT               (31U)
/*! @} */

/* The count of ASRC_CTX_CTRL */
#define ASRC_CTX_CTRL_COUNT                      (4U)

/*! @name CTX_CTRL_EXT1 - ASRC Context Control Extended 1 */
/*! @{ */
#define ASRC_CTX_CTRL_EXT1_PF_INIT_MODE_MASK     (0x3U)
#define ASRC_CTX_CTRL_EXT1_PF_INIT_MODE_SHIFT    (0U)
/*! PF_INIT_MODE - Prefilter Initialization Mode
 *  0b00..Do not pre-fill any prefilter taps. The first sample written to the ASRC corresponds to the highest index prefilter filter tap.
 *  0b01..Replicate the first sample to fill the right half of the prefilter.
 *  0b10..Zero fill the right half of the prefilter.
 *  0b11..N/A
 */
#define ASRC_CTX_CTRL_EXT1_PF_INIT_MODE(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_EXT1_PF_INIT_MODE_SHIFT)) & ASRC_CTX_CTRL_EXT1_PF_INIT_MODE_MASK)
#define ASRC_CTX_CTRL_EXT1_RS_INIT_MODE_MASK     (0xCU)
#define ASRC_CTX_CTRL_EXT1_RS_INIT_MODE_SHIFT    (2U)
/*! RS_INIT_MODE - Resampler Initialization Mode
 *  0b00..Do not pre-fill any resampler taps. The first sample output from the prefilter corresponds to the highest index resampling filter tap.
 *  0b01..Replicate the first prefilter output sample to fill the right half of the resampler.
 *  0b10..Fill the right half of the re-sampler with zeros.
 *  0b11..N/A
 */
#define ASRC_CTX_CTRL_EXT1_RS_INIT_MODE(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_EXT1_RS_INIT_MODE_SHIFT)) & ASRC_CTX_CTRL_EXT1_RS_INIT_MODE_MASK)
#define ASRC_CTX_CTRL_EXT1_PF_STOP_MODE_MASK     (0x10U)
#define ASRC_CTX_CTRL_EXT1_PF_STOP_MODE_SHIFT    (4U)
#define ASRC_CTX_CTRL_EXT1_RS_STOP_MODE_MASK     (0x20U)
#define ASRC_CTX_CTRL_EXT1_RS_STOP_MODE_SHIFT    (5U)
#define ASRC_CTX_CTRL_EXT1_PF_BYPASS_MODE_MASK   (0x40U)
#define ASRC_CTX_CTRL_EXT1_PF_BYPASS_MODE_SHIFT  (6U)
#define ASRC_CTX_CTRL_EXT1_RS_BYPASS_MODE_MASK   (0x80U)
#define ASRC_CTX_CTRL_EXT1_RS_BYPASS_MODE_SHIFT  (7U)
#define ASRC_CTX_CTRL_EXT1_PF_TWO_STAGE_EN_MASK  (0x100U)
#define ASRC_CTX_CTRL_EXT1_PF_TWO_STAGE_EN_SHIFT (8U)
#define ASRC_CTX_CTRL_EXT1_PF_ST1_WB_FLOAT_MASK  (0x200U)
#define ASRC_CTX_CTRL_EXT1_PF_ST1_WB_FLOAT_SHIFT (9U)
#define ASRC_CTX_CTRL_EXT1_PF_EXPANSION_FACTOR_MASK (0xFF0000U)
#define ASRC_CTX_CTRL_EXT1_PF_EXPANSION_FACTOR_SHIFT (16U)
#define ASRC_CTX_CTRL_EXT1_PF_EXPANSION_FACTOR(x) (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_EXT1_PF_EXPANSION_FACTOR_SHIFT)) & ASRC_CTX_CTRL_EXT1_PF_EXPANSION_FACTOR_MASK)
#define ASRC_CTX_CTRL_EXT1_PF_COEFF_MEM_RST_MASK (0x1000000U)
#define ASRC_CTX_CTRL_EXT1_PF_COEFF_MEM_RST_SHIFT (24U)
#define ASRC_CTX_CTRL_EXT1_PF_COEFF_STAGE_WR_MASK (0x2000000U)
#define ASRC_CTX_CTRL_EXT1_PF_COEFF_STAGE_WR_SHIFT (25U)
/*! @} */

/* The count of ASRC_CTX_CTRL_EXT1 */
#define ASRC_CTX_CTRL_EXT1_COUNT                 (4U)

/*! @name CTX_CTRL_EXT2 - ASRC Context Control Extended 2 */
/*! @{ */
#define ASRC_CTX_CTRL_EXT2_ST1_NUM_TAPS_MASK     (0x1FFU)
#define ASRC_CTX_CTRL_EXT2_ST1_NUM_TAPS_SHIFT    (0U)
#define ASRC_CTX_CTRL_EXT2_ST1_NUM_TAPS(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_EXT2_ST1_NUM_TAPS_SHIFT)) & ASRC_CTX_CTRL_EXT2_ST1_NUM_TAPS_MASK)
#define ASRC_CTX_CTRL_EXT2_ST2_NUM_TAPS_MASK     (0x1FF0000U)
#define ASRC_CTX_CTRL_EXT2_ST2_NUM_TAPS_SHIFT    (16U)
#define ASRC_CTX_CTRL_EXT2_ST2_NUM_TAPS(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_CTRL_EXT2_ST2_NUM_TAPS_SHIFT)) & ASRC_CTX_CTRL_EXT2_ST2_NUM_TAPS_MASK)
/*! @} */

/* The count of ASRC_CTX_CTRL_EXT2 */
#define ASRC_CTX_CTRL_EXT2_COUNT                 (4U)

/*! @name CTRL_IN_ACCESS - ASRC Control Input Access */
/*! @{ */
#define ASRC_CTRL_IN_ACCESS_ACCESS_LENGTH_MASK   (0x3FU)
#define ASRC_CTRL_IN_ACCESS_ACCESS_LENGTH_SHIFT  (0U)
#define ASRC_CTRL_IN_ACCESS_ACCESS_LENGTH(x)     (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_IN_ACCESS_ACCESS_LENGTH_SHIFT)) & ASRC_CTRL_IN_ACCESS_ACCESS_LENGTH_MASK)
#define ASRC_CTRL_IN_ACCESS_GROUP_LENGTH_MASK    (0x3F00U)
#define ASRC_CTRL_IN_ACCESS_GROUP_LENGTH_SHIFT   (8U)
#define ASRC_CTRL_IN_ACCESS_GROUP_LENGTH(x)      (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_IN_ACCESS_GROUP_LENGTH_SHIFT)) & ASRC_CTRL_IN_ACCESS_GROUP_LENGTH_MASK)
#define ASRC_CTRL_IN_ACCESS_ITERATIONS_MASK      (0x3F0000U)
#define ASRC_CTRL_IN_ACCESS_ITERATIONS_SHIFT     (16U)
#define ASRC_CTRL_IN_ACCESS_ITERATIONS(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_IN_ACCESS_ITERATIONS_SHIFT)) & ASRC_CTRL_IN_ACCESS_ITERATIONS_MASK)
/*! @} */

/* The count of ASRC_CTRL_IN_ACCESS */
#define ASRC_CTRL_IN_ACCESS_COUNT                (4U)

/*! @name PROC_CTRL_SLOT0_R0 - ASRC Datapath Processor Control Slot0 Register0 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_EN_MASK    (0x1U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_EN_SHIFT   (0U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_CTX_NUM_MASK (0x6U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_CTX_NUM_SHIFT (1U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_CTX_NUM(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R0_SLOT0_CTX_NUM_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R0_SLOT0_CTX_NUM_MASK)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_NUM_CH_MASK (0x1F00U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_NUM_CH_SHIFT (8U)
/*! SLOT0_NUM_CH - SLOT0 Number of Channels
 *  0b00000..Context SLOT0 owns 1 of 8 channels
 *  0b00001..Context SLOT0 owns 2 of 8 channels
 *  0b00010..Context SLOT0 owns 3 of 8 channels
 *  0b00011-0b00111..Context SLOT0 owns N of 8 channels
 */
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_NUM_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R0_SLOT0_NUM_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R0_SLOT0_NUM_CH_MASK)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MIN_CH_MASK (0x1F0000U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MIN_CH_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MIN_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MIN_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MIN_CH_MASK)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MAX_CH_MASK (0x1F000000U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MAX_CH_SHIFT (24U)
#define ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MAX_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MAX_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R0_SLOT0_MAX_CH_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT0_R0 */
#define ASRC_PROC_CTRL_SLOT0_R0_COUNT            (4U)

/*! @name PROC_CTRL_SLOT0_R1 - ASRC Datapath Processor Control Slot0 Register1 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT0_R1_SLOT0_ST1_CHANxEXP_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT0_R1_SLOT0_ST1_CHANxEXP_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT0_R1_SLOT0_ST1_CHANxEXP(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R1_SLOT0_ST1_CHANxEXP_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R1_SLOT0_ST1_CHANxEXP_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT0_R1 */
#define ASRC_PROC_CTRL_SLOT0_R1_COUNT            (4U)

/*! @name PROC_CTRL_SLOT0_R2 - ASRC Datapath Processor Control Slot0 Register2 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_ST_ADDR_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_ST_ADDR_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_ST_ADDR(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_ST_ADDR_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_ST_ADDR_MASK)
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_MEM_ALLOC_MASK (0x1FFF0000U)
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_MEM_ALLOC_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_MEM_ALLOC(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_MEM_ALLOC_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R2_SLOT0_ST1_MEM_ALLOC_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT0_R2 */
#define ASRC_PROC_CTRL_SLOT0_R2_COUNT            (4U)

/*! @name PROC_CTRL_SLOT0_R3 - ASRC Datapath Processor Control Slot0 Register3 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_ST_ADDR_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_ST_ADDR_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_ST_ADDR(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_ST_ADDR_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_ST_ADDR_MASK)
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_MEM_ALLOC_MASK (0x1FFF0000U)
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_MEM_ALLOC_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_MEM_ALLOC(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_MEM_ALLOC_SHIFT)) & ASRC_PROC_CTRL_SLOT0_R3_SLOT0_ST2_MEM_ALLOC_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT0_R3 */
#define ASRC_PROC_CTRL_SLOT0_R3_COUNT            (4U)

/*! @name PROC_CTRL_SLOT1_R0 - ASRC Datapath Processor Control Slot1 Register0 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_EN_MASK    (0x1U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_EN_SHIFT   (0U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_CTX_NUM_MASK (0x6U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_CTX_NUM_SHIFT (1U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_CTX_NUM(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R0_SLOT1_CTX_NUM_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R0_SLOT1_CTX_NUM_MASK)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_NUM_CH_MASK (0x1F00U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_NUM_CH_SHIFT (8U)
/*! SLOT1_NUM_CH - SLOT1 Number of Channels
 *  0b00000..Context SLOT1 owns 1 of 8 channels
 *  0b00001..Context SLOT1 owns 2 of 8 channels
 *  0b00010..Context SLOT1 owns 3 of 8 channels
 *  0b00011-0b00111..Context SLOT1 owns N of 8 channels
 */
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_NUM_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R0_SLOT1_NUM_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R0_SLOT1_NUM_CH_MASK)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MIN_CH_MASK (0x1F0000U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MIN_CH_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MIN_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MIN_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MIN_CH_MASK)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MAX_CH_MASK (0x1F000000U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MAX_CH_SHIFT (24U)
#define ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MAX_CH(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MAX_CH_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R0_SLOT1_MAX_CH_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT1_R0 */
#define ASRC_PROC_CTRL_SLOT1_R0_COUNT            (4U)

/*! @name PROC_CTRL_SLOT1_R1 - ASRC Datapath Processor Control SLOT1 Register1 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT1_R1_SLOT1_ST1_CHANxEXP_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT1_R1_SLOT1_ST1_CHANxEXP_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT1_R1_SLOT1_ST1_CHANxEXP(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R1_SLOT1_ST1_CHANxEXP_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R1_SLOT1_ST1_CHANxEXP_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT1_R1 */
#define ASRC_PROC_CTRL_SLOT1_R1_COUNT            (4U)

/*! @name PROC_CTRL_SLOT1_R2 - ASRC Datapath Processor Control SLOT1 Register2 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_ST_ADDR_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_ST_ADDR_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_ST_ADDR(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_ST_ADDR_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_ST_ADDR_MASK)
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_MEM_ALLOC_MASK (0x1FFF0000U)
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_MEM_ALLOC_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_MEM_ALLOC(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_MEM_ALLOC_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R2_SLOT1_ST1_MEM_ALLOC_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT1_R2 */
#define ASRC_PROC_CTRL_SLOT1_R2_COUNT            (4U)

/*! @name PROC_CTRL_SLOT1_R3 - ASRC Datapath Processor Control SLOT1 Register3 */
/*! @{ */
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_ST_ADDR_MASK (0x1FFFU)
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_ST_ADDR_SHIFT (0U)
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_ST_ADDR(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_ST_ADDR_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_ST_ADDR_MASK)
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_MEM_ALLOC_MASK (0x1FFF0000U)
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_MEM_ALLOC_SHIFT (16U)
#define ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_MEM_ALLOC(x) (((uint32_t)(((uint32_t)(x)) << ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_MEM_ALLOC_SHIFT)) & ASRC_PROC_CTRL_SLOT1_R3_SLOT1_ST2_MEM_ALLOC_MASK)
/*! @} */

/* The count of ASRC_PROC_CTRL_SLOT1_R3 */
#define ASRC_PROC_CTRL_SLOT1_R3_COUNT            (4U)

/*! @name CTX_OUT_CTRL - ASRC Context Output Control */
/*! @{ */
#define ASRC_CTX_OUT_CTRL_DITHER_EN_MASK         (0x1U)
#define ASRC_CTX_OUT_CTRL_DITHER_EN_SHIFT        (0U)
#define ASRC_CTX_OUT_CTRL_IEC_EN_MASK            (0x2U)
#define ASRC_CTX_OUT_CTRL_IEC_EN_SHIFT           (1U)
#define ASRC_CTX_OUT_CTRL_IEC_V_DATA_MASK        (0x4U)
#define ASRC_CTX_OUT_CTRL_IEC_V_DATA_SHIFT       (2U)
#define ASRC_CTX_OUT_CTRL_SIGN_OUT_MASK          (0x40U)
#define ASRC_CTX_OUT_CTRL_SIGN_OUT_SHIFT         (6U)
#define ASRC_CTX_OUT_CTRL_FLOAT_FMT_MASK         (0x80U)
#define ASRC_CTX_OUT_CTRL_FLOAT_FMT_SHIFT        (7U)
#define ASRC_CTX_OUT_CTRL_BITS_PER_SAMPLE_MASK   (0x300U)
#define ASRC_CTX_OUT_CTRL_BITS_PER_SAMPLE_SHIFT  (8U)
/*! BITS_PER_SAMPLE - Number of Bits Per Audio Sample
 *  0b00..16-bits Per Sample
 *  0b01..20-bits Per Sample
 *  0b10..24-bits Per Sample
 *  0b11..32-bits Per Sample
 */
#define ASRC_CTX_OUT_CTRL_BITS_PER_SAMPLE(x)     (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_OUT_CTRL_BITS_PER_SAMPLE_SHIFT)) & ASRC_CTX_OUT_CTRL_BITS_PER_SAMPLE_MASK)
#define ASRC_CTX_OUT_CTRL_BIT_REV_MASK           (0x400U)
#define ASRC_CTX_OUT_CTRL_BIT_REV_SHIFT          (10U)
#define ASRC_CTX_OUT_CTRL_SAMPLE_POSITION_MASK   (0xF800U)
#define ASRC_CTX_OUT_CTRL_SAMPLE_POSITION_SHIFT  (11U)
#define ASRC_CTX_OUT_CTRL_SAMPLE_POSITION(x)     (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_OUT_CTRL_SAMPLE_POSITION_SHIFT)) & ASRC_CTX_OUT_CTRL_SAMPLE_POSITION_MASK)
#define ASRC_CTX_OUT_CTRL_FIFO_WTMK_MASK         (0x7F0000U)
#define ASRC_CTX_OUT_CTRL_FIFO_WTMK_SHIFT        (16U)
#define ASRC_CTX_OUT_CTRL_FIFO_WTMK(x)           (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_OUT_CTRL_FIFO_WTMK_SHIFT)) & ASRC_CTX_OUT_CTRL_FIFO_WTMK_MASK)
#define ASRC_CTX_OUT_CTRL_FWMDE_MASK             (0x10000000U)
#define ASRC_CTX_OUT_CTRL_FWMDE_SHIFT            (28U)
/*! @} */

/* The count of ASRC_CTX_OUT_CTRL */
#define ASRC_CTX_OUT_CTRL_COUNT                  (4U)

/*! @name CTRL_OUT_ACCESS - ASRC Control Output Access */
/*! @{ */
#define ASRC_CTRL_OUT_ACCESS_ACCESS_LENGTH_MASK  (0x3FU)
#define ASRC_CTRL_OUT_ACCESS_ACCESS_LENGTH_SHIFT (0U)
#define ASRC_CTRL_OUT_ACCESS_ACCESS_LENGTH(x)    (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_OUT_ACCESS_ACCESS_LENGTH_SHIFT)) & ASRC_CTRL_OUT_ACCESS_ACCESS_LENGTH_MASK)
#define ASRC_CTRL_OUT_ACCESS_GROUP_LENGTH_MASK   (0x3F00U)
#define ASRC_CTRL_OUT_ACCESS_GROUP_LENGTH_SHIFT  (8U)
#define ASRC_CTRL_OUT_ACCESS_GROUP_LENGTH(x)     (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_OUT_ACCESS_GROUP_LENGTH_SHIFT)) & ASRC_CTRL_OUT_ACCESS_GROUP_LENGTH_MASK)
#define ASRC_CTRL_OUT_ACCESS_ITERATIONS_MASK     (0x3F0000U)
#define ASRC_CTRL_OUT_ACCESS_ITERATIONS_SHIFT    (16U)
#define ASRC_CTRL_OUT_ACCESS_ITERATIONS(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_CTRL_OUT_ACCESS_ITERATIONS_SHIFT)) & ASRC_CTRL_OUT_ACCESS_ITERATIONS_MASK)
/*! @} */

/* The count of ASRC_CTRL_OUT_ACCESS */
#define ASRC_CTRL_OUT_ACCESS_COUNT               (4U)

/*! @name SAMPLE_FIFO_STATUS - ASRC Sample FIFO Status */
/*! @{ */
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_OUT_MASK (0x7FU)
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_OUT_SHIFT (0U)
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_OUT(x) (((uint32_t)(((uint32_t)(x)) << ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_OUT_SHIFT)) & ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_OUT_MASK)
#define ASRC_SAMPLE_FIFO_STATUS_OUTFIFO_WTMK_MASK (0x80U)
#define ASRC_SAMPLE_FIFO_STATUS_OUTFIFO_WTMK_SHIFT (7U)
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_IN_MASK (0x7F0000U)
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_IN_SHIFT (16U)
#define ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_IN(x) (((uint32_t)(((uint32_t)(x)) << ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_IN_SHIFT)) & ASRC_SAMPLE_FIFO_STATUS_NUM_SAMPLE_GROUPS_IN_MASK)
#define ASRC_SAMPLE_FIFO_STATUS_INFIFO_WTMK_MASK (0x800000U)
#define ASRC_SAMPLE_FIFO_STATUS_INFIFO_WTMK_SHIFT (23U)
/*! @} */

/* The count of ASRC_SAMPLE_FIFO_STATUS */
#define ASRC_SAMPLE_FIFO_STATUS_COUNT            (4U)

/*! @name RS_RATIO_LOW - ASRC Resampling Ratio Low */
/*! @{ */
#define ASRC_RS_RATIO_LOW_RS_RATIO_LOW_MASK      (0xFFFFFFFFU)
#define ASRC_RS_RATIO_LOW_RS_RATIO_LOW_SHIFT     (0U)
#define ASRC_RS_RATIO_LOW_RS_RATIO_LOW(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_RS_RATIO_LOW_RS_RATIO_LOW_SHIFT)) & ASRC_RS_RATIO_LOW_RS_RATIO_LOW_MASK)
/*! @} */

/* The count of ASRC_RS_RATIO_LOW */
#define ASRC_RS_RATIO_LOW_COUNT                  (4U)

/*! @name RS_RATIO_HIGH - ASRC Resampling Ratio High */
/*! @{ */
#define ASRC_RS_RATIO_HIGH_RS_RATIO_HIGH_MASK    (0xFFFU)
#define ASRC_RS_RATIO_HIGH_RS_RATIO_HIGH_SHIFT   (0U)
#define ASRC_RS_RATIO_HIGH_RS_RATIO_HIGH(x)      (((uint32_t)(((uint32_t)(x)) << ASRC_RS_RATIO_HIGH_RS_RATIO_HIGH_SHIFT)) & ASRC_RS_RATIO_HIGH_RS_RATIO_HIGH_MASK)
#define ASRC_RS_RATIO_HIGH_RS_RATIO_VLD_MASK     (0x80000000U)
#define ASRC_RS_RATIO_HIGH_RS_RATIO_VLD_SHIFT    (31U)
/*! @} */

/* The count of ASRC_RS_RATIO_HIGH */
#define ASRC_RS_RATIO_HIGH_COUNT                 (4U)

/*! @name RS_UPDATE_CTRL - ASRC Resampling Ratio Update Control */
/*! @{ */
#define ASRC_RS_UPDATE_CTRL_RS_RATIO_MOD_MASK    (0xFFFFFFFFU)
#define ASRC_RS_UPDATE_CTRL_RS_RATIO_MOD_SHIFT   (0U)
#define ASRC_RS_UPDATE_CTRL_RS_RATIO_MOD(x)      (((uint32_t)(((uint32_t)(x)) << ASRC_RS_UPDATE_CTRL_RS_RATIO_MOD_SHIFT)) & ASRC_RS_UPDATE_CTRL_RS_RATIO_MOD_MASK)
/*! @} */

/* The count of ASRC_RS_UPDATE_CTRL */
#define ASRC_RS_UPDATE_CTRL_COUNT                (4U)

/*! @name RS_UPDATE_RATE - ASRC Resampling Ratio Update Rate */
/*! @{ */
#define ASRC_RS_UPDATE_RATE_RS_RATIO_RAMP_RATE_MASK (0x7FFFFFFFU)
#define ASRC_RS_UPDATE_RATE_RS_RATIO_RAMP_RATE_SHIFT (0U)
#define ASRC_RS_UPDATE_RATE_RS_RATIO_RAMP_RATE(x) (((uint32_t)(((uint32_t)(x)) << ASRC_RS_UPDATE_RATE_RS_RATIO_RAMP_RATE_SHIFT)) & ASRC_RS_UPDATE_RATE_RS_RATIO_RAMP_RATE_MASK)
/*! @} */

/* The count of ASRC_RS_UPDATE_RATE */
#define ASRC_RS_UPDATE_RATE_COUNT                (4U)

/*! @name RS_CT_LOW - ASRC Resampling Center Tap Coefficient Low */
/*! @{ */
#define ASRC_RS_CT_LOW_RS_CT_LOW_MASK            (0xFFFFFFFFU)
#define ASRC_RS_CT_LOW_RS_CT_LOW_SHIFT           (0U)
#define ASRC_RS_CT_LOW_RS_CT_LOW(x)              (((uint32_t)(((uint32_t)(x)) << ASRC_RS_CT_LOW_RS_CT_LOW_SHIFT)) & ASRC_RS_CT_LOW_RS_CT_LOW_MASK)
/*! @} */

/*! @name RS_CT_HIGH - ASRC Resampling Center Tap Coefficient High */
/*! @{ */
#define ASRC_RS_CT_HIGH_RS_CT_HIGH_MASK          (0xFFFFFFFFU)
#define ASRC_RS_CT_HIGH_RS_CT_HIGH_SHIFT         (0U)
#define ASRC_RS_CT_HIGH_RS_CT_HIGH(x)            (((uint32_t)(((uint32_t)(x)) << ASRC_RS_CT_HIGH_RS_CT_HIGH_SHIFT)) & ASRC_RS_CT_HIGH_RS_CT_HIGH_MASK)
/*! @} */

/*! @name PRE_COEFF_FIFO - ASRC Prefilter Coefficient FIFO */
/*! @{ */
#define ASRC_PRE_COEFF_FIFO_COEFF_DATA_MASK      (0xFFFFFFFFU)
#define ASRC_PRE_COEFF_FIFO_COEFF_DATA_SHIFT     (0U)
#define ASRC_PRE_COEFF_FIFO_COEFF_DATA(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_PRE_COEFF_FIFO_COEFF_DATA_SHIFT)) & ASRC_PRE_COEFF_FIFO_COEFF_DATA_MASK)
/*! @} */

/* The count of ASRC_PRE_COEFF_FIFO */
#define ASRC_PRE_COEFF_FIFO_COUNT                (4U)

/*! @name CTX_RS_COEFF_MEM - ASRC Context Resampling Coefficient Memory */
/*! @{ */
#define ASRC_CTX_RS_COEFF_MEM_RS_COEFF_WDATA_MASK (0xFFFFFFFFU)
#define ASRC_CTX_RS_COEFF_MEM_RS_COEFF_WDATA_SHIFT (0U)
#define ASRC_CTX_RS_COEFF_MEM_RS_COEFF_WDATA(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_RS_COEFF_MEM_RS_COEFF_WDATA_SHIFT)) & ASRC_CTX_RS_COEFF_MEM_RS_COEFF_WDATA_MASK)
/*! @} */

/*! @name CTX_RS_COEFF_CTRL - ASRC Context Resampling Coefficient Control */
/*! @{ */
#define ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_PTR_RST_MASK (0x1U)
#define ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_PTR_RST_SHIFT (0U)
#define ASRC_CTX_RS_COEFF_CTRL_NUM_RES_TAPS_MASK (0x6U)
#define ASRC_CTX_RS_COEFF_CTRL_NUM_RES_TAPS_SHIFT (1U)
/*! NUM_RES_TAPS - Number of Resampling Coefficient Taps
 *  0b00..32-Tap Resampling Filter
 *  0b01..64-Tap Resampling Filter
 *  0b10..128-Tap Resampling Filter
 *  0b11..N/A
 */
#define ASRC_CTX_RS_COEFF_CTRL_NUM_RES_TAPS(x)   (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_RS_COEFF_CTRL_NUM_RES_TAPS_SHIFT)) & ASRC_CTX_RS_COEFF_CTRL_NUM_RES_TAPS_MASK)
#define ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_ADDR_MASK (0x7FF0000U)
#define ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_ADDR_SHIFT (16U)
#define ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_ADDR(x)  (((uint32_t)(((uint32_t)(x)) << ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_ADDR_SHIFT)) & ASRC_CTX_RS_COEFF_CTRL_RS_COEFF_ADDR_MASK)
/*! @} */

/*! @name IRQ_CTRL - ASRC Interrupt Control */
/*! @{ */
#define ASRC_IRQ_CTRL_INFIFO_OVF_MASK_MASK       (0xFU)
#define ASRC_IRQ_CTRL_INFIFO_OVF_MASK_SHIFT      (0U)
/*! INFIFO_OVF_MASK - ASRC Input FIFO Overflow Mask
 *  0b0000..The INFIFO_OVF interrupt is enabled for Context 0 to 3.
 *  0b0001..The INFIFO_OVF interrupt is disabled for Context 0 and enabled for Context 1 to 3.
 *  0b0010..The INFIFO_OVF interrupt is disabled for Context 1 and enabled for Context 0, 2, and 3.
 *  0b0011-0b1110..The INFIFO_OVF interrupt is enabled for any context with a 1'b0 bit field.
 *  0b1111..The INFIFO_OVF interrupt is disabled for Context 0 to 3.
 */
#define ASRC_IRQ_CTRL_INFIFO_OVF_MASK(x)         (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_CTRL_INFIFO_OVF_MASK_SHIFT)) & ASRC_IRQ_CTRL_INFIFO_OVF_MASK_MASK)
#define ASRC_IRQ_CTRL_OUTFIFO_EMPTY_RD_MASK_MASK (0xF0U)
#define ASRC_IRQ_CTRL_OUTFIFO_EMPTY_RD_MASK_SHIFT (4U)
/*! OUTFIFO_EMPTY_RD_MASK - ASRC Output FIFO Empty Read Mask
 *  0b0000..The OUTFIFO_EMPTY_RD interrupt is enabled for Context 0 to 3.
 *  0b0001..The OUTFIFO_EMPTY_RD interrupt is disabled for Context 0 and enabled for Context 1 to 3.
 *  0b0010..The OUTFIFO_EMPTY_RD interrupt is disabled for Context 1 and enabled for Context 0, 2, and 3.
 *  0b0011-0b1110..The OUTFIFO_EMPTY_RD interrupt is enabled for any context with a 1'b0 bit field.
 *  0b1111..The OUTFIFO_EMPTY_RD interrupt is disabled for Context 0 to 3.
 */
#define ASRC_IRQ_CTRL_OUTFIFO_EMPTY_RD_MASK(x)   (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_CTRL_OUTFIFO_EMPTY_RD_MASK_SHIFT)) & ASRC_IRQ_CTRL_OUTFIFO_EMPTY_RD_MASK_MASK)
#define ASRC_IRQ_CTRL_RUN_STOP_DONE_MASK_MASK    (0xF00U)
#define ASRC_IRQ_CTRL_RUN_STOP_DONE_MASK_SHIFT   (8U)
/*! RUN_STOP_DONE_MASK - ASRC RUN STOP DONE MASK
 *  0b0000..The RUN_STOP_DONE interrupt is enabled for Context 0 to 3.
 *  0b0001..The RUN_STOP_DONE interrupt is disabled for Context 0 and enabled for Context 1 to 3.
 *  0b0010..The RUN_STOP_DONE interrupt is disabled for Context 1 and enabled for Context 0, 2, and 3.
 *  0b0011-0b1110..The RUN_STOP_DONE interrupt is enabled for any context with a 1'b0 bit field.
 *  0b1111..The RUN_STOP_DONE interrupt is disabled for Context 0 to 3.
 */
#define ASRC_IRQ_CTRL_RUN_STOP_DONE_MASK(x)      (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_CTRL_RUN_STOP_DONE_MASK_SHIFT)) & ASRC_IRQ_CTRL_RUN_STOP_DONE_MASK_MASK)
/*! @} */

/*! @name IRQ_FLAGS - ASRC Interrupt Status Flags */
/*! @{ */
#define ASRC_IRQ_FLAGS_INFIFO_OVF_MASK           (0xFU)
#define ASRC_IRQ_FLAGS_INFIFO_OVF_SHIFT          (0U)
/*! INFIFO_OVF - ASRC Input FIFO Overflow Flag
 *  0b0000..No INFIFO_OVF errors have been recorded.
 *  0b0001..The ASRC_WRFIFO0 has overflown.
 *  0b0010..The ASRC_WRFIFO1 has overflown.
 *  0b0011-0b1110..The ASRC_WRFIFOn has overflown. Where n = any bit position set to 0b1.
 *  0b1111..ASRC_WRFIFO0, ASRC_WRFIFO1, ASRC_WRFIFO2, and ASRC_WRFIFO3 have overflown.
 */
#define ASRC_IRQ_FLAGS_INFIFO_OVF(x)             (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_FLAGS_INFIFO_OVF_SHIFT)) & ASRC_IRQ_FLAGS_INFIFO_OVF_MASK)
#define ASRC_IRQ_FLAGS_OUTFIFO_EMPTY_RD_MASK     (0xF0U)
#define ASRC_IRQ_FLAGS_OUTFIFO_EMPTY_RD_SHIFT    (4U)
/*! OUTFIFO_EMPTY_RD - ASRC Output FIFO Empty Read Flag
 *  0b0000..No reads have been requested from an empty ASRC_RDFIFO.
 *  0b0001..A read has been requested from ASRC_RDFIFO0 when it was empty.
 *  0b0010..A read has been requested from ASRC_RDFIFO1 when it was empty.
 *  0b0011-0b1110..A read has been requested from ASRC_RDFIFOn when it was empty. n = any bit position with a 0b1.
 *  0b1111..A read has been requested from ASRC_RDFIFO0, ASRC_RDFIFO1, ASRC_RDFIFO2, and ASRC_RDFIFO3 while empty.
 */
#define ASRC_IRQ_FLAGS_OUTFIFO_EMPTY_RD(x)       (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_FLAGS_OUTFIFO_EMPTY_RD_SHIFT)) & ASRC_IRQ_FLAGS_OUTFIFO_EMPTY_RD_MASK)
#define ASRC_IRQ_FLAGS_RUN_STOP_DONE_MASK        (0xF00U)
#define ASRC_IRQ_FLAGS_RUN_STOP_DONE_SHIFT       (8U)
/*! RUN_STOP_DONE - ASRC RUN STOP DONE FLAG
 *  0b0000..No RUN_STOP operations have been completed.
 *  0b0001..The RUN_STOP operation for Context 0 has completed.
 *  0b0010..The RUN_STOP operation for Context 1 has completed.
 *  0b0011-0b1110..The RUN_STOP operation has completed for any context with a 1'b1 bit field.
 *  0b1111..The RUN_STOP operation has completed for Context 0 to 3.
 */
#define ASRC_IRQ_FLAGS_RUN_STOP_DONE(x)          (((uint32_t)(((uint32_t)(x)) << ASRC_IRQ_FLAGS_RUN_STOP_DONE_SHIFT)) & ASRC_IRQ_FLAGS_RUN_STOP_DONE_MASK)
/*! @} */

/*! @name CHANNEL_STATUS_0 - ASRC Channel Status 0 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_0_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_0_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_0_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_0_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_0_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_0 */
#define ASRC_CHANNEL_STATUS_0_COUNT              (4U)

/*! @name CHANNEL_STATUS_1 - ASRC Channel Status 1 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_1_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_1_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_1_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_1_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_1_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_1 */
#define ASRC_CHANNEL_STATUS_1_COUNT              (4U)

/*! @name CHANNEL_STATUS_2 - ASRC Channel Status 2 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_2_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_2_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_2_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_2_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_2_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_2 */
#define ASRC_CHANNEL_STATUS_2_COUNT              (4U)

/*! @name CHANNEL_STATUS_3 - ASRC Channel Status 3 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_3_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_3_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_3_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_3_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_3_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_3 */
#define ASRC_CHANNEL_STATUS_3_COUNT              (4U)

/*! @name CHANNEL_STATUS_4 - ASRC Channel Status 4 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_4_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_4_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_4_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_4_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_4_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_4 */
#define ASRC_CHANNEL_STATUS_4_COUNT              (4U)

/*! @name CHANNEL_STATUS_5 - ASRC Channel Status 5 */
/*! @{ */
#define ASRC_CHANNEL_STATUS_5_CHN_STAT_MASK      (0xFFFFFFFFU)
#define ASRC_CHANNEL_STATUS_5_CHN_STAT_SHIFT     (0U)
#define ASRC_CHANNEL_STATUS_5_CHN_STAT(x)        (((uint32_t)(((uint32_t)(x)) << ASRC_CHANNEL_STATUS_5_CHN_STAT_SHIFT)) & ASRC_CHANNEL_STATUS_5_CHN_STAT_MASK)
/*! @} */

/* The count of ASRC_CHANNEL_STATUS_5 */
#define ASRC_CHANNEL_STATUS_5_COUNT              (4U)


/*!
 * @}
 */ /* end of group ASRC_Register_Masks */


/* ASRC - Peripheral instance base addresses */
/** Peripheral ASRC base pointer */
#define ASRC_BASE_PTR                            ((ASRC_MemMapPtr)0x300C0000u)
/** Array initializer of ASRC peripheral base pointers */
#define ASRC_BASE_PTRS                           { ASRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ASRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ASRC_Register_Accessor_Macros ASRC - Register accessor macros
 * @{
 */


/* ASRC - Register instance definitions */
/* ASRC */
#define ASRC_WRFIFO0                             ASRC_WRFIFO_REG(ASRC_BASE_PTR,0)
#define ASRC_WRFIFO1                             ASRC_WRFIFO_REG(ASRC_BASE_PTR,1)
#define ASRC_WRFIFO2                             ASRC_WRFIFO_REG(ASRC_BASE_PTR,2)
#define ASRC_WRFIFO3                             ASRC_WRFIFO_REG(ASRC_BASE_PTR,3)
#define ASRC_RDFIFO0                             ASRC_RDFIFO_REG(ASRC_BASE_PTR,0)
#define ASRC_RDFIFO1                             ASRC_RDFIFO_REG(ASRC_BASE_PTR,1)
#define ASRC_RDFIFO2                             ASRC_RDFIFO_REG(ASRC_BASE_PTR,2)
#define ASRC_RDFIFO3                             ASRC_RDFIFO_REG(ASRC_BASE_PTR,3)
#define ASRC_CTX_CTRL0                           ASRC_CTX_CTRL_REG(ASRC_BASE_PTR,0)
#define ASRC_CTX_CTRL1                           ASRC_CTX_CTRL_REG(ASRC_BASE_PTR,1)
#define ASRC_CTX_CTRL2                           ASRC_CTX_CTRL_REG(ASRC_BASE_PTR,2)
#define ASRC_CTX_CTRL3                           ASRC_CTX_CTRL_REG(ASRC_BASE_PTR,3)
#define ASRC_CTX_CTRL_EXT10                      ASRC_CTX_CTRL_EXT1_REG(ASRC_BASE_PTR,0)
#define ASRC_CTX_CTRL_EXT11                      ASRC_CTX_CTRL_EXT1_REG(ASRC_BASE_PTR,1)
#define ASRC_CTX_CTRL_EXT12                      ASRC_CTX_CTRL_EXT1_REG(ASRC_BASE_PTR,2)
#define ASRC_CTX_CTRL_EXT13                      ASRC_CTX_CTRL_EXT1_REG(ASRC_BASE_PTR,3)
#define ASRC_CTX_CTRL_EXT20                      ASRC_CTX_CTRL_EXT2_REG(ASRC_BASE_PTR,0)
#define ASRC_CTX_CTRL_EXT21                      ASRC_CTX_CTRL_EXT2_REG(ASRC_BASE_PTR,1)
#define ASRC_CTX_CTRL_EXT22                      ASRC_CTX_CTRL_EXT2_REG(ASRC_BASE_PTR,2)
#define ASRC_CTX_CTRL_EXT23                      ASRC_CTX_CTRL_EXT2_REG(ASRC_BASE_PTR,3)
#define ASRC_CTRL_IN_ACCESS0                     ASRC_CTRL_IN_ACCESS_REG(ASRC_BASE_PTR,0)
#define ASRC_CTRL_IN_ACCESS1                     ASRC_CTRL_IN_ACCESS_REG(ASRC_BASE_PTR,1)
#define ASRC_CTRL_IN_ACCESS2                     ASRC_CTRL_IN_ACCESS_REG(ASRC_BASE_PTR,2)
#define ASRC_CTRL_IN_ACCESS3                     ASRC_CTRL_IN_ACCESS_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT0_R00                 ASRC_PROC_CTRL_SLOT0_R0_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT0_R01                 ASRC_PROC_CTRL_SLOT0_R0_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT0_R02                 ASRC_PROC_CTRL_SLOT0_R0_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT0_R03                 ASRC_PROC_CTRL_SLOT0_R0_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT0_R10                 ASRC_PROC_CTRL_SLOT0_R1_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT0_R11                 ASRC_PROC_CTRL_SLOT0_R1_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT0_R12                 ASRC_PROC_CTRL_SLOT0_R1_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT0_R13                 ASRC_PROC_CTRL_SLOT0_R1_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT0_R20                 ASRC_PROC_CTRL_SLOT0_R2_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT0_R21                 ASRC_PROC_CTRL_SLOT0_R2_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT0_R22                 ASRC_PROC_CTRL_SLOT0_R2_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT0_R23                 ASRC_PROC_CTRL_SLOT0_R2_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT0_R30                 ASRC_PROC_CTRL_SLOT0_R3_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT0_R31                 ASRC_PROC_CTRL_SLOT0_R3_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT0_R32                 ASRC_PROC_CTRL_SLOT0_R3_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT0_R33                 ASRC_PROC_CTRL_SLOT0_R3_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT1_R00                 ASRC_PROC_CTRL_SLOT1_R0_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT1_R01                 ASRC_PROC_CTRL_SLOT1_R0_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT1_R02                 ASRC_PROC_CTRL_SLOT1_R0_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT1_R03                 ASRC_PROC_CTRL_SLOT1_R0_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT1_R10                 ASRC_PROC_CTRL_SLOT1_R1_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT1_R11                 ASRC_PROC_CTRL_SLOT1_R1_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT1_R12                 ASRC_PROC_CTRL_SLOT1_R1_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT1_R13                 ASRC_PROC_CTRL_SLOT1_R1_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT1_R20                 ASRC_PROC_CTRL_SLOT1_R2_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT1_R21                 ASRC_PROC_CTRL_SLOT1_R2_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT1_R22                 ASRC_PROC_CTRL_SLOT1_R2_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT1_R23                 ASRC_PROC_CTRL_SLOT1_R2_REG(ASRC_BASE_PTR,3)
#define ASRC_PROC_CTRL_SLOT1_R30                 ASRC_PROC_CTRL_SLOT1_R3_REG(ASRC_BASE_PTR,0)
#define ASRC_PROC_CTRL_SLOT1_R31                 ASRC_PROC_CTRL_SLOT1_R3_REG(ASRC_BASE_PTR,1)
#define ASRC_PROC_CTRL_SLOT1_R32                 ASRC_PROC_CTRL_SLOT1_R3_REG(ASRC_BASE_PTR,2)
#define ASRC_PROC_CTRL_SLOT1_R33                 ASRC_PROC_CTRL_SLOT1_R3_REG(ASRC_BASE_PTR,3)
#define ASRC_CTX_OUT_CTRL0                       ASRC_CTX_OUT_CTRL_REG(ASRC_BASE_PTR,0)
#define ASRC_CTX_OUT_CTRL1                       ASRC_CTX_OUT_CTRL_REG(ASRC_BASE_PTR,1)
#define ASRC_CTX_OUT_CTRL2                       ASRC_CTX_OUT_CTRL_REG(ASRC_BASE_PTR,2)
#define ASRC_CTX_OUT_CTRL3                       ASRC_CTX_OUT_CTRL_REG(ASRC_BASE_PTR,3)
#define ASRC_CTRL_OUT_ACCESS0                    ASRC_CTRL_OUT_ACCESS_REG(ASRC_BASE_PTR,0)
#define ASRC_CTRL_OUT_ACCESS1                    ASRC_CTRL_OUT_ACCESS_REG(ASRC_BASE_PTR,1)
#define ASRC_CTRL_OUT_ACCESS2                    ASRC_CTRL_OUT_ACCESS_REG(ASRC_BASE_PTR,2)
#define ASRC_CTRL_OUT_ACCESS3                    ASRC_CTRL_OUT_ACCESS_REG(ASRC_BASE_PTR,3)
#define ASRC_SAMPLE_FIFO_STATUS0                 ASRC_SAMPLE_FIFO_STATUS_REG(ASRC_BASE_PTR,0)
#define ASRC_SAMPLE_FIFO_STATUS1                 ASRC_SAMPLE_FIFO_STATUS_REG(ASRC_BASE_PTR,1)
#define ASRC_SAMPLE_FIFO_STATUS2                 ASRC_SAMPLE_FIFO_STATUS_REG(ASRC_BASE_PTR,2)
#define ASRC_SAMPLE_FIFO_STATUS3                 ASRC_SAMPLE_FIFO_STATUS_REG(ASRC_BASE_PTR,3)
#define ASRC_RS_RATIO_LOW0                       ASRC_RS_RATIO_LOW_REG(ASRC_BASE_PTR,0)
#define ASRC_RS_RATIO_HIGH0                      ASRC_RS_RATIO_HIGH_REG(ASRC_BASE_PTR,0)
#define ASRC_RS_RATIO_LOW1                       ASRC_RS_RATIO_LOW_REG(ASRC_BASE_PTR,1)
#define ASRC_RS_RATIO_HIGH1                      ASRC_RS_RATIO_HIGH_REG(ASRC_BASE_PTR,1)
#define ASRC_RS_RATIO_LOW2                       ASRC_RS_RATIO_LOW_REG(ASRC_BASE_PTR,2)
#define ASRC_RS_RATIO_HIGH2                      ASRC_RS_RATIO_HIGH_REG(ASRC_BASE_PTR,2)
#define ASRC_RS_RATIO_LOW3                       ASRC_RS_RATIO_LOW_REG(ASRC_BASE_PTR,3)
#define ASRC_RS_RATIO_HIGH3                      ASRC_RS_RATIO_HIGH_REG(ASRC_BASE_PTR,3)
#define ASRC_RS_UPDATE_CTRL0                     ASRC_RS_UPDATE_CTRL_REG(ASRC_BASE_PTR,0)
#define ASRC_RS_UPDATE_CTRL1                     ASRC_RS_UPDATE_CTRL_REG(ASRC_BASE_PTR,1)
#define ASRC_RS_UPDATE_CTRL2                     ASRC_RS_UPDATE_CTRL_REG(ASRC_BASE_PTR,2)
#define ASRC_RS_UPDATE_CTRL3                     ASRC_RS_UPDATE_CTRL_REG(ASRC_BASE_PTR,3)
#define ASRC_RS_UPDATE_RATE0                     ASRC_RS_UPDATE_RATE_REG(ASRC_BASE_PTR,0)
#define ASRC_RS_UPDATE_RATE1                     ASRC_RS_UPDATE_RATE_REG(ASRC_BASE_PTR,1)
#define ASRC_RS_UPDATE_RATE2                     ASRC_RS_UPDATE_RATE_REG(ASRC_BASE_PTR,2)
#define ASRC_RS_UPDATE_RATE3                     ASRC_RS_UPDATE_RATE_REG(ASRC_BASE_PTR,3)
#define ASRC_RS_CT_LOW                           ASRC_RS_CT_LOW_REG(ASRC_BASE_PTR)
#define ASRC_RS_CT_HIGH                          ASRC_RS_CT_HIGH_REG(ASRC_BASE_PTR)
#define ASRC_PRE_COEFF_FIFO0                     ASRC_PRE_COEFF_FIFO_REG(ASRC_BASE_PTR,0)
#define ASRC_PRE_COEFF_FIFO1                     ASRC_PRE_COEFF_FIFO_REG(ASRC_BASE_PTR,1)
#define ASRC_PRE_COEFF_FIFO2                     ASRC_PRE_COEFF_FIFO_REG(ASRC_BASE_PTR,2)
#define ASRC_PRE_COEFF_FIFO3                     ASRC_PRE_COEFF_FIFO_REG(ASRC_BASE_PTR,3)
#define ASRC_CTX_RS_COEFF_MEM                    ASRC_CTX_RS_COEFF_MEM_REG(ASRC_BASE_PTR)
#define ASRC_CTX_RS_COEFF_CTRL                   ASRC_CTX_RS_COEFF_CTRL_REG(ASRC_BASE_PTR)
#define ASRC_IRQ_CTRL                            ASRC_IRQ_CTRL_REG(ASRC_BASE_PTR)
#define ASRC_IRQ_FLAGS                           ASRC_IRQ_FLAGS_REG(ASRC_BASE_PTR)
#define ASRC_CHANNEL_STATUS_00                   ASRC_CHANNEL_STATUS_0_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_01                   ASRC_CHANNEL_STATUS_0_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_02                   ASRC_CHANNEL_STATUS_0_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_03                   ASRC_CHANNEL_STATUS_0_REG(ASRC_BASE_PTR,3)
#define ASRC_CHANNEL_STATUS_10                   ASRC_CHANNEL_STATUS_1_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_11                   ASRC_CHANNEL_STATUS_1_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_12                   ASRC_CHANNEL_STATUS_1_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_13                   ASRC_CHANNEL_STATUS_1_REG(ASRC_BASE_PTR,3)
#define ASRC_CHANNEL_STATUS_20                   ASRC_CHANNEL_STATUS_2_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_21                   ASRC_CHANNEL_STATUS_2_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_22                   ASRC_CHANNEL_STATUS_2_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_23                   ASRC_CHANNEL_STATUS_2_REG(ASRC_BASE_PTR,3)
#define ASRC_CHANNEL_STATUS_30                   ASRC_CHANNEL_STATUS_3_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_31                   ASRC_CHANNEL_STATUS_3_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_32                   ASRC_CHANNEL_STATUS_3_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_33                   ASRC_CHANNEL_STATUS_3_REG(ASRC_BASE_PTR,3)
#define ASRC_CHANNEL_STATUS_40                   ASRC_CHANNEL_STATUS_4_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_41                   ASRC_CHANNEL_STATUS_4_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_42                   ASRC_CHANNEL_STATUS_4_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_43                   ASRC_CHANNEL_STATUS_4_REG(ASRC_BASE_PTR,3)
#define ASRC_CHANNEL_STATUS_50                   ASRC_CHANNEL_STATUS_5_REG(ASRC_BASE_PTR,0)
#define ASRC_CHANNEL_STATUS_51                   ASRC_CHANNEL_STATUS_5_REG(ASRC_BASE_PTR,1)
#define ASRC_CHANNEL_STATUS_52                   ASRC_CHANNEL_STATUS_5_REG(ASRC_BASE_PTR,2)
#define ASRC_CHANNEL_STATUS_53                   ASRC_CHANNEL_STATUS_5_REG(ASRC_BASE_PTR,3)

/* ASRC - Register array accessors */
#define ASRC_WRFIFO(index)                       ASRC_WRFIFO_REG(ASRC_BASE_PTR,index)
#define ASRC_RDFIFO(index)                       ASRC_RDFIFO_REG(ASRC_BASE_PTR,index)
#define ASRC_CTX_CTRL(index)                     ASRC_CTX_CTRL_REG(ASRC_BASE_PTR,index)
#define ASRC_CTX_CTRL_EXT1(index)                ASRC_CTX_CTRL_EXT1_REG(ASRC_BASE_PTR,index)
#define ASRC_CTX_CTRL_EXT2(index)                ASRC_CTX_CTRL_EXT2_REG(ASRC_BASE_PTR,index)
#define ASRC_CTRL_IN_ACCESS(index)               ASRC_CTRL_IN_ACCESS_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT0_R0(index)           ASRC_PROC_CTRL_SLOT0_R0_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT0_R1(index)           ASRC_PROC_CTRL_SLOT0_R1_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT0_R2(index)           ASRC_PROC_CTRL_SLOT0_R2_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT0_R3(index)           ASRC_PROC_CTRL_SLOT0_R3_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT1_R0(index)           ASRC_PROC_CTRL_SLOT1_R0_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT1_R1(index)           ASRC_PROC_CTRL_SLOT1_R1_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT1_R2(index)           ASRC_PROC_CTRL_SLOT1_R2_REG(ASRC_BASE_PTR,index)
#define ASRC_PROC_CTRL_SLOT1_R3(index)           ASRC_PROC_CTRL_SLOT1_R3_REG(ASRC_BASE_PTR,index)
#define ASRC_CTX_OUT_CTRL(index)                 ASRC_CTX_OUT_CTRL_REG(ASRC_BASE_PTR,index)
#define ASRC_CTRL_OUT_ACCESS(index)              ASRC_CTRL_OUT_ACCESS_REG(ASRC_BASE_PTR,index)
#define ASRC_SAMPLE_FIFO_STATUS(index)           ASRC_SAMPLE_FIFO_STATUS_REG(ASRC_BASE_PTR,index)
#define ASRC_RS_RATIO_LOW(index)                 ASRC_RS_RATIO_LOW_REG(ASRC_BASE_PTR,index)
#define ASRC_RS_RATIO_HIGH(index)                ASRC_RS_RATIO_HIGH_REG(ASRC_BASE_PTR,index)
#define ASRC_RS_UPDATE_CTRL(index)               ASRC_RS_UPDATE_CTRL_REG(ASRC_BASE_PTR,index)
#define ASRC_RS_UPDATE_RATE(index)               ASRC_RS_UPDATE_RATE_REG(ASRC_BASE_PTR,index)
#define ASRC_PRE_COEFF_FIFO(index)               ASRC_PRE_COEFF_FIFO_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_0(index)             ASRC_CHANNEL_STATUS_0_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_1(index)             ASRC_CHANNEL_STATUS_1_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_2(index)             ASRC_CHANNEL_STATUS_2_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_3(index)             ASRC_CHANNEL_STATUS_3_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_4(index)             ASRC_CHANNEL_STATUS_4_REG(ASRC_BASE_PTR,index)
#define ASRC_CHANNEL_STATUS_5(index)             ASRC_CHANNEL_STATUS_5_REG(ASRC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ASRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ASRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- BCH
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Peripheral BCH
 * @{
 */

/** BCH - Peripheral register structure */
typedef struct BCH_MemMap {
  uint32_t CTRL;                                   /**< Hardware BCH ECC Accelerator Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< Hardware BCH ECC Accelerator Control Register, offset: 0xC */
  uint32_t STATUS0;                                /**< Hardware ECC Accelerator Status Register 0, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t MODE;                                   /**< Hardware ECC Accelerator Mode Register, offset: 0x20 */
  uint8_t RESERVED_1[12];
  uint32_t ENCODEPTR;                              /**< Hardware BCH ECC Loopback Encode Buffer Register, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t DATAPTR;                                /**< Hardware BCH ECC Loopback Data Buffer Register, offset: 0x40 */
  uint8_t RESERVED_3[12];
  uint32_t METAPTR;                                /**< Hardware BCH ECC Loopback Metadata Buffer Register, offset: 0x50 */
  uint8_t RESERVED_4[28];
  uint32_t LAYOUTSELECT;                           /**< Hardware ECC Accelerator Layout Select Register, offset: 0x70 */
  uint8_t RESERVED_5[12];
  uint32_t FLASH0LAYOUT0;                          /**< Hardware BCH ECC Flash 0 Layout 0 Register, offset: 0x80 */
  uint8_t RESERVED_6[12];
  uint32_t FLASH0LAYOUT1;                          /**< Hardware BCH ECC Flash 0 Layout 1 Register, offset: 0x90 */
  uint8_t RESERVED_7[12];
  uint32_t FLASH1LAYOUT0;                          /**< Hardware BCH ECC Flash 1 Layout 0 Register, offset: 0xA0 */
  uint8_t RESERVED_8[12];
  uint32_t FLASH1LAYOUT1;                          /**< Hardware BCH ECC Flash 1 Layout 1 Register, offset: 0xB0 */
  uint8_t RESERVED_9[12];
  uint32_t FLASH2LAYOUT0;                          /**< Hardware BCH ECC Flash 2 Layout 0 Register, offset: 0xC0 */
  uint8_t RESERVED_10[12];
  uint32_t FLASH2LAYOUT1;                          /**< Hardware BCH ECC Flash 2 Layout 1 Register, offset: 0xD0 */
  uint8_t RESERVED_11[12];
  uint32_t FLASH3LAYOUT0;                          /**< Hardware BCH ECC Flash 3 Layout 0 Register, offset: 0xE0 */
  uint8_t RESERVED_12[12];
  uint32_t FLASH3LAYOUT1;                          /**< Hardware BCH ECC Flash 3 Layout 1 Register, offset: 0xF0 */
  uint8_t RESERVED_13[12];
  uint32_t DEBUG0;                                 /**< Hardware BCH ECC Debug Register0, offset: 0x100 */
  uint32_t DEBUG0_SET;                             /**< Hardware BCH ECC Debug Register0, offset: 0x104 */
  uint32_t DEBUG0_CLR;                             /**< Hardware BCH ECC Debug Register0, offset: 0x108 */
  uint32_t DEBUG0_TOG;                             /**< Hardware BCH ECC Debug Register0, offset: 0x10C */
  uint32_t DBGKESREAD;                             /**< KES Debug Read Register, offset: 0x110 */
  uint8_t RESERVED_14[12];
  uint32_t DBGCSFEREAD;                            /**< Chien Search Debug Read Register, offset: 0x120 */
  uint8_t RESERVED_15[12];
  uint32_t DBGSYNDGENREAD;                         /**< Syndrome Generator Debug Read Register, offset: 0x130 */
  uint8_t RESERVED_16[12];
  uint32_t DBGAHBMREAD;                            /**< Bus Master and ECC Controller Debug Read Register, offset: 0x140 */
  uint8_t RESERVED_17[12];
  uint32_t BLOCKNAME;                              /**< Block Name Register, offset: 0x150 */
  uint8_t RESERVED_18[12];
  uint32_t VERSION;                                /**< BCH Version Register, offset: 0x160 */
  uint8_t RESERVED_19[12];
  uint32_t DEBUG1;                                 /**< Hardware BCH ECC Debug Register 1, offset: 0x170 */
} volatile *BCH_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- BCH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Accessor_Macros BCH - Register accessor macros
 * @{
 */


/* BCH - Register accessors */
#define BCH_CTRL_REG(base)                       ((base)->CTRL)
#define BCH_CTRL_SET_REG(base)                   ((base)->CTRL_SET)
#define BCH_CTRL_CLR_REG(base)                   ((base)->CTRL_CLR)
#define BCH_CTRL_TOG_REG(base)                   ((base)->CTRL_TOG)
#define BCH_STATUS0_REG(base)                    ((base)->STATUS0)
#define BCH_MODE_REG(base)                       ((base)->MODE)
#define BCH_ENCODEPTR_REG(base)                  ((base)->ENCODEPTR)
#define BCH_DATAPTR_REG(base)                    ((base)->DATAPTR)
#define BCH_METAPTR_REG(base)                    ((base)->METAPTR)
#define BCH_LAYOUTSELECT_REG(base)               ((base)->LAYOUTSELECT)
#define BCH_FLASH0LAYOUT0_REG(base)              ((base)->FLASH0LAYOUT0)
#define BCH_FLASH0LAYOUT1_REG(base)              ((base)->FLASH0LAYOUT1)
#define BCH_FLASH1LAYOUT0_REG(base)              ((base)->FLASH1LAYOUT0)
#define BCH_FLASH1LAYOUT1_REG(base)              ((base)->FLASH1LAYOUT1)
#define BCH_FLASH2LAYOUT0_REG(base)              ((base)->FLASH2LAYOUT0)
#define BCH_FLASH2LAYOUT1_REG(base)              ((base)->FLASH2LAYOUT1)
#define BCH_FLASH3LAYOUT0_REG(base)              ((base)->FLASH3LAYOUT0)
#define BCH_FLASH3LAYOUT1_REG(base)              ((base)->FLASH3LAYOUT1)
#define BCH_DEBUG0_REG(base)                     ((base)->DEBUG0)
#define BCH_DEBUG0_SET_REG(base)                 ((base)->DEBUG0_SET)
#define BCH_DEBUG0_CLR_REG(base)                 ((base)->DEBUG0_CLR)
#define BCH_DEBUG0_TOG_REG(base)                 ((base)->DEBUG0_TOG)
#define BCH_DBGKESREAD_REG(base)                 ((base)->DBGKESREAD)
#define BCH_DBGCSFEREAD_REG(base)                ((base)->DBGCSFEREAD)
#define BCH_DBGSYNDGENREAD_REG(base)             ((base)->DBGSYNDGENREAD)
#define BCH_DBGAHBMREAD_REG(base)                ((base)->DBGAHBMREAD)
#define BCH_BLOCKNAME_REG(base)                  ((base)->BLOCKNAME)
#define BCH_VERSION_REG(base)                    ((base)->VERSION)
#define BCH_DEBUG1_REG(base)                     ((base)->DEBUG1)

/*!
 * @}
 */ /* end of group BCH_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- BCH Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Masks BCH Register Masks
 * @{
 */

/*! @name CTRL - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_COMPLETE_IRQ_MASK               (0x1U)
#define BCH_CTRL_COMPLETE_IRQ_SHIFT              (0U)
#define BCH_CTRL_RSVD0_MASK                      (0x2U)
#define BCH_CTRL_RSVD0_SHIFT                     (1U)
#define BCH_CTRL_DEBUG_STALL_IRQ_MASK            (0x4U)
#define BCH_CTRL_DEBUG_STALL_IRQ_SHIFT           (2U)
#define BCH_CTRL_BM_ERROR_IRQ_MASK               (0x8U)
#define BCH_CTRL_BM_ERROR_IRQ_SHIFT              (3U)
#define BCH_CTRL_RSVD1_MASK                      (0xF0U)
#define BCH_CTRL_RSVD1_SHIFT                     (4U)
#define BCH_CTRL_RSVD1(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD1_SHIFT)) & BCH_CTRL_RSVD1_MASK)
#define BCH_CTRL_COMPLETE_IRQ_EN_MASK            (0x100U)
#define BCH_CTRL_COMPLETE_IRQ_EN_SHIFT           (8U)
#define BCH_CTRL_RSVD2_MASK                      (0x200U)
#define BCH_CTRL_RSVD2_SHIFT                     (9U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_MASK         (0x400U)
#define BCH_CTRL_DEBUG_STALL_IRQ_EN_SHIFT        (10U)
#define BCH_CTRL_RSVD3_MASK                      (0xF800U)
#define BCH_CTRL_RSVD3_SHIFT                     (11U)
#define BCH_CTRL_RSVD3(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD3_SHIFT)) & BCH_CTRL_RSVD3_MASK)
#define BCH_CTRL_M2M_ENABLE_MASK                 (0x10000U)
#define BCH_CTRL_M2M_ENABLE_SHIFT                (16U)
#define BCH_CTRL_M2M_ENCODE_MASK                 (0x20000U)
#define BCH_CTRL_M2M_ENCODE_SHIFT                (17U)
#define BCH_CTRL_M2M_LAYOUT_MASK                 (0xC0000U)
#define BCH_CTRL_M2M_LAYOUT_SHIFT                (18U)
#define BCH_CTRL_M2M_LAYOUT(x)                   (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_M2M_LAYOUT_SHIFT)) & BCH_CTRL_M2M_LAYOUT_MASK)
#define BCH_CTRL_RSVD4_MASK                      (0x300000U)
#define BCH_CTRL_RSVD4_SHIFT                     (20U)
#define BCH_CTRL_RSVD4(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD4_SHIFT)) & BCH_CTRL_RSVD4_MASK)
#define BCH_CTRL_DEBUGSYNDROME_MASK              (0x400000U)
#define BCH_CTRL_DEBUGSYNDROME_SHIFT             (22U)
#define BCH_CTRL_RSVD5_MASK                      (0x3F800000U)
#define BCH_CTRL_RSVD5_SHIFT                     (23U)
#define BCH_CTRL_RSVD5(x)                        (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_RSVD5_SHIFT)) & BCH_CTRL_RSVD5_MASK)
#define BCH_CTRL_CLKGATE_MASK                    (0x40000000U)
#define BCH_CTRL_CLKGATE_SHIFT                   (30U)
#define BCH_CTRL_SFTRST_MASK                     (0x80000000U)
#define BCH_CTRL_SFTRST_SHIFT                    (31U)
/*! @} */

/*! @name CTRL_SET - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_SET_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_SET_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_SET_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_SET_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_SET_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_SET_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_SET_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_SET_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_SET_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD1_SHIFT)) & BCH_CTRL_SET_RSVD1_MASK)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_SET_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_SET_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_SET_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_SET_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_SET_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_SET_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD3_SHIFT)) & BCH_CTRL_SET_RSVD3_MASK)
#define BCH_CTRL_SET_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_SET_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_SET_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_SET_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_SET_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_SET_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_SET_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_M2M_LAYOUT_SHIFT)) & BCH_CTRL_SET_M2M_LAYOUT_MASK)
#define BCH_CTRL_SET_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_SET_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_SET_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD4_SHIFT)) & BCH_CTRL_SET_RSVD4_MASK)
#define BCH_CTRL_SET_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_SET_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_SET_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_SET_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_SET_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_SET_RSVD5_SHIFT)) & BCH_CTRL_SET_RSVD5_MASK)
#define BCH_CTRL_SET_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_SET_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_SET_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_SET_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name CTRL_CLR - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_CLR_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_CLR_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_CLR_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_CLR_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_CLR_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_CLR_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_CLR_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD1_SHIFT)) & BCH_CTRL_CLR_RSVD1_MASK)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_CLR_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_CLR_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_CLR_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_CLR_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_CLR_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_CLR_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD3_SHIFT)) & BCH_CTRL_CLR_RSVD3_MASK)
#define BCH_CTRL_CLR_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_CLR_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_CLR_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_CLR_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_CLR_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_CLR_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_CLR_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_M2M_LAYOUT_SHIFT)) & BCH_CTRL_CLR_M2M_LAYOUT_MASK)
#define BCH_CTRL_CLR_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_CLR_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_CLR_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD4_SHIFT)) & BCH_CTRL_CLR_RSVD4_MASK)
#define BCH_CTRL_CLR_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_CLR_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_CLR_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_CLR_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_CLR_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_CLR_RSVD5_SHIFT)) & BCH_CTRL_CLR_RSVD5_MASK)
#define BCH_CTRL_CLR_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_CLR_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_CLR_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_CLR_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name CTRL_TOG - Hardware BCH ECC Accelerator Control Register */
/*! @{ */
#define BCH_CTRL_TOG_COMPLETE_IRQ_MASK           (0x1U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_SHIFT          (0U)
#define BCH_CTRL_TOG_RSVD0_MASK                  (0x2U)
#define BCH_CTRL_TOG_RSVD0_SHIFT                 (1U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_MASK        (0x4U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_SHIFT       (2U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_MASK           (0x8U)
#define BCH_CTRL_TOG_BM_ERROR_IRQ_SHIFT          (3U)
#define BCH_CTRL_TOG_RSVD1_MASK                  (0xF0U)
#define BCH_CTRL_TOG_RSVD1_SHIFT                 (4U)
#define BCH_CTRL_TOG_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD1_SHIFT)) & BCH_CTRL_TOG_RSVD1_MASK)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_MASK        (0x100U)
#define BCH_CTRL_TOG_COMPLETE_IRQ_EN_SHIFT       (8U)
#define BCH_CTRL_TOG_RSVD2_MASK                  (0x200U)
#define BCH_CTRL_TOG_RSVD2_SHIFT                 (9U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_MASK     (0x400U)
#define BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_SHIFT    (10U)
#define BCH_CTRL_TOG_RSVD3_MASK                  (0xF800U)
#define BCH_CTRL_TOG_RSVD3_SHIFT                 (11U)
#define BCH_CTRL_TOG_RSVD3(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD3_SHIFT)) & BCH_CTRL_TOG_RSVD3_MASK)
#define BCH_CTRL_TOG_M2M_ENABLE_MASK             (0x10000U)
#define BCH_CTRL_TOG_M2M_ENABLE_SHIFT            (16U)
#define BCH_CTRL_TOG_M2M_ENCODE_MASK             (0x20000U)
#define BCH_CTRL_TOG_M2M_ENCODE_SHIFT            (17U)
#define BCH_CTRL_TOG_M2M_LAYOUT_MASK             (0xC0000U)
#define BCH_CTRL_TOG_M2M_LAYOUT_SHIFT            (18U)
#define BCH_CTRL_TOG_M2M_LAYOUT(x)               (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_M2M_LAYOUT_SHIFT)) & BCH_CTRL_TOG_M2M_LAYOUT_MASK)
#define BCH_CTRL_TOG_RSVD4_MASK                  (0x300000U)
#define BCH_CTRL_TOG_RSVD4_SHIFT                 (20U)
#define BCH_CTRL_TOG_RSVD4(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD4_SHIFT)) & BCH_CTRL_TOG_RSVD4_MASK)
#define BCH_CTRL_TOG_DEBUGSYNDROME_MASK          (0x400000U)
#define BCH_CTRL_TOG_DEBUGSYNDROME_SHIFT         (22U)
#define BCH_CTRL_TOG_RSVD5_MASK                  (0x3F800000U)
#define BCH_CTRL_TOG_RSVD5_SHIFT                 (23U)
#define BCH_CTRL_TOG_RSVD5(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_CTRL_TOG_RSVD5_SHIFT)) & BCH_CTRL_TOG_RSVD5_MASK)
#define BCH_CTRL_TOG_CLKGATE_MASK                (0x40000000U)
#define BCH_CTRL_TOG_CLKGATE_SHIFT               (30U)
#define BCH_CTRL_TOG_SFTRST_MASK                 (0x80000000U)
#define BCH_CTRL_TOG_SFTRST_SHIFT                (31U)
/*! @} */

/*! @name STATUS0 - Hardware ECC Accelerator Status Register 0 */
/*! @{ */
#define BCH_STATUS0_RSVD0_MASK                   (0x3U)
#define BCH_STATUS0_RSVD0_SHIFT                  (0U)
#define BCH_STATUS0_RSVD0(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD0_SHIFT)) & BCH_STATUS0_RSVD0_MASK)
#define BCH_STATUS0_UNCORRECTABLE_MASK           (0x4U)
#define BCH_STATUS0_UNCORRECTABLE_SHIFT          (2U)
#define BCH_STATUS0_CORRECTED_MASK               (0x8U)
#define BCH_STATUS0_CORRECTED_SHIFT              (3U)
#define BCH_STATUS0_ALLONES_MASK                 (0x10U)
#define BCH_STATUS0_ALLONES_SHIFT                (4U)
#define BCH_STATUS0_RSVD1_MASK                   (0xE0U)
#define BCH_STATUS0_RSVD1_SHIFT                  (5U)
#define BCH_STATUS0_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_RSVD1_SHIFT)) & BCH_STATUS0_RSVD1_MASK)
#define BCH_STATUS0_STATUS_BLK0_MASK             (0xFF00U)
#define BCH_STATUS0_STATUS_BLK0_SHIFT            (8U)
/*! STATUS_BLK0
 *  0b00000000..No errors found on block.
 *  0b00000001..One error found on block.
 *  0b00000010..One errors found on block.
 *  0b00000011..One errors found on block.
 *  0b00000100..One errors found on block.
 *  0b11111110..Block exhibited uncorrectable errors.
 *  0b11111111..Page is erased.
 */
#define BCH_STATUS0_STATUS_BLK0(x)               (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_STATUS_BLK0_SHIFT)) & BCH_STATUS0_STATUS_BLK0_MASK)
#define BCH_STATUS0_COMPLETED_CE_MASK            (0xF0000U)
#define BCH_STATUS0_COMPLETED_CE_SHIFT           (16U)
#define BCH_STATUS0_COMPLETED_CE(x)              (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_COMPLETED_CE_SHIFT)) & BCH_STATUS0_COMPLETED_CE_MASK)
#define BCH_STATUS0_HANDLE_MASK                  (0xFFF00000U)
#define BCH_STATUS0_HANDLE_SHIFT                 (20U)
#define BCH_STATUS0_HANDLE(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_STATUS0_HANDLE_SHIFT)) & BCH_STATUS0_HANDLE_MASK)
/*! @} */

/*! @name MODE - Hardware ECC Accelerator Mode Register */
/*! @{ */
#define BCH_MODE_ERASE_THRESHOLD_MASK            (0xFFU)
#define BCH_MODE_ERASE_THRESHOLD_SHIFT           (0U)
#define BCH_MODE_ERASE_THRESHOLD(x)              (((uint32_t)(((uint32_t)(x)) << BCH_MODE_ERASE_THRESHOLD_SHIFT)) & BCH_MODE_ERASE_THRESHOLD_MASK)
#define BCH_MODE_RSVD_MASK                       (0xFFFFFF00U)
#define BCH_MODE_RSVD_SHIFT                      (8U)
#define BCH_MODE_RSVD(x)                         (((uint32_t)(((uint32_t)(x)) << BCH_MODE_RSVD_SHIFT)) & BCH_MODE_RSVD_MASK)
/*! @} */

/*! @name ENCODEPTR - Hardware BCH ECC Loopback Encode Buffer Register */
/*! @{ */
#define BCH_ENCODEPTR_ADDR_MASK                  (0xFFFFFFFFU)
#define BCH_ENCODEPTR_ADDR_SHIFT                 (0U)
#define BCH_ENCODEPTR_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_ENCODEPTR_ADDR_SHIFT)) & BCH_ENCODEPTR_ADDR_MASK)
/*! @} */

/*! @name DATAPTR - Hardware BCH ECC Loopback Data Buffer Register */
/*! @{ */
#define BCH_DATAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_DATAPTR_ADDR_SHIFT                   (0U)
#define BCH_DATAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DATAPTR_ADDR_SHIFT)) & BCH_DATAPTR_ADDR_MASK)
/*! @} */

/*! @name METAPTR - Hardware BCH ECC Loopback Metadata Buffer Register */
/*! @{ */
#define BCH_METAPTR_ADDR_MASK                    (0xFFFFFFFFU)
#define BCH_METAPTR_ADDR_SHIFT                   (0U)
#define BCH_METAPTR_ADDR(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_METAPTR_ADDR_SHIFT)) & BCH_METAPTR_ADDR_MASK)
/*! @} */

/*! @name LAYOUTSELECT - Hardware ECC Accelerator Layout Select Register */
/*! @{ */
#define BCH_LAYOUTSELECT_CS0_SELECT_MASK         (0x3U)
#define BCH_LAYOUTSELECT_CS0_SELECT_SHIFT        (0U)
#define BCH_LAYOUTSELECT_CS0_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS0_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS0_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS1_SELECT_MASK         (0xCU)
#define BCH_LAYOUTSELECT_CS1_SELECT_SHIFT        (2U)
#define BCH_LAYOUTSELECT_CS1_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS1_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS1_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS2_SELECT_MASK         (0x30U)
#define BCH_LAYOUTSELECT_CS2_SELECT_SHIFT        (4U)
#define BCH_LAYOUTSELECT_CS2_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS2_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS2_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS3_SELECT_MASK         (0xC0U)
#define BCH_LAYOUTSELECT_CS3_SELECT_SHIFT        (6U)
#define BCH_LAYOUTSELECT_CS3_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS3_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS3_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS4_SELECT_MASK         (0x300U)
#define BCH_LAYOUTSELECT_CS4_SELECT_SHIFT        (8U)
#define BCH_LAYOUTSELECT_CS4_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS4_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS4_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS5_SELECT_MASK         (0xC00U)
#define BCH_LAYOUTSELECT_CS5_SELECT_SHIFT        (10U)
#define BCH_LAYOUTSELECT_CS5_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS5_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS5_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS6_SELECT_MASK         (0x3000U)
#define BCH_LAYOUTSELECT_CS6_SELECT_SHIFT        (12U)
#define BCH_LAYOUTSELECT_CS6_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS6_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS6_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS7_SELECT_MASK         (0xC000U)
#define BCH_LAYOUTSELECT_CS7_SELECT_SHIFT        (14U)
#define BCH_LAYOUTSELECT_CS7_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS7_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS7_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS8_SELECT_MASK         (0x30000U)
#define BCH_LAYOUTSELECT_CS8_SELECT_SHIFT        (16U)
#define BCH_LAYOUTSELECT_CS8_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS8_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS8_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS9_SELECT_MASK         (0xC0000U)
#define BCH_LAYOUTSELECT_CS9_SELECT_SHIFT        (18U)
#define BCH_LAYOUTSELECT_CS9_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS9_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS9_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS10_SELECT_MASK        (0x300000U)
#define BCH_LAYOUTSELECT_CS10_SELECT_SHIFT       (20U)
#define BCH_LAYOUTSELECT_CS10_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS10_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS10_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS11_SELECT_MASK        (0xC00000U)
#define BCH_LAYOUTSELECT_CS11_SELECT_SHIFT       (22U)
#define BCH_LAYOUTSELECT_CS11_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS11_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS11_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS12_SELECT_MASK        (0x3000000U)
#define BCH_LAYOUTSELECT_CS12_SELECT_SHIFT       (24U)
#define BCH_LAYOUTSELECT_CS12_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS12_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS12_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS13_SELECT_MASK        (0xC000000U)
#define BCH_LAYOUTSELECT_CS13_SELECT_SHIFT       (26U)
#define BCH_LAYOUTSELECT_CS13_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS13_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS13_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS14_SELECT_MASK        (0x30000000U)
#define BCH_LAYOUTSELECT_CS14_SELECT_SHIFT       (28U)
#define BCH_LAYOUTSELECT_CS14_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS14_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS14_SELECT_MASK)
#define BCH_LAYOUTSELECT_CS15_SELECT_MASK        (0xC0000000U)
#define BCH_LAYOUTSELECT_CS15_SELECT_SHIFT       (30U)
#define BCH_LAYOUTSELECT_CS15_SELECT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_LAYOUTSELECT_CS15_SELECT_SHIFT)) & BCH_LAYOUTSELECT_CS15_SELECT_MASK)
/*! @} */

/*! @name FLASH0LAYOUT0 - Hardware BCH ECC Flash 0 Layout 0 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_ECC0_SHIFT)) & BCH_FLASH0LAYOUT0_ECC0_MASK)
#define BCH_FLASH0LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH0LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH0LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH0LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH0LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH0LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH0LAYOUT1 - Hardware BCH ECC Flash 0 Layout 1 Register */
/*! @{ */
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH0LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH0LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH0LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH0LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH0LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_ECCN_SHIFT)) & BCH_FLASH0LAYOUT1_ECCN_MASK)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH0LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH1LAYOUT0 - Hardware BCH ECC Flash 1 Layout 0 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_ECC0_SHIFT)) & BCH_FLASH1LAYOUT0_ECC0_MASK)
#define BCH_FLASH1LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH1LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH1LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH1LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH1LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH1LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH1LAYOUT1 - Hardware BCH ECC Flash 1 Layout 1 Register */
/*! @{ */
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH1LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH1LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH1LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH1LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH1LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_ECCN_SHIFT)) & BCH_FLASH1LAYOUT1_ECCN_MASK)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH1LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH2LAYOUT0 - Hardware BCH ECC Flash 2 Layout 0 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_ECC0_SHIFT)) & BCH_FLASH2LAYOUT0_ECC0_MASK)
#define BCH_FLASH2LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH2LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH2LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH2LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH2LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH2LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH2LAYOUT1 - Hardware BCH ECC Flash 2 Layout 1 Register */
/*! @{ */
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH2LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH2LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH2LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH2LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH2LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_ECCN_SHIFT)) & BCH_FLASH2LAYOUT1_ECCN_MASK)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH2LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name FLASH3LAYOUT0 - Hardware BCH ECC Flash 3 Layout 0 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT0_DATA0_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT0_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT0_ECC0_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT0_ECC0_SHIFT             (11U)
/*! ECC0
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT0_ECC0(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_ECC0_SHIFT)) & BCH_FLASH3LAYOUT0_ECC0_MASK)
#define BCH_FLASH3LAYOUT0_META_SIZE_MASK         (0xFF0000U)
#define BCH_FLASH3LAYOUT0_META_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT0_META_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_META_SIZE_SHIFT)) & BCH_FLASH3LAYOUT0_META_SIZE_MASK)
#define BCH_FLASH3LAYOUT0_NBLOCKS_MASK           (0xFF000000U)
#define BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT          (24U)
#define BCH_FLASH3LAYOUT0_NBLOCKS(x)             (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT)) & BCH_FLASH3LAYOUT0_NBLOCKS_MASK)
/*! @} */

/*! @name FLASH3LAYOUT1 - Hardware BCH ECC Flash 3 Layout 1 Register */
/*! @{ */
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK        (0x3FFU)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT       (0U)
#define BCH_FLASH3LAYOUT1_DATAN_SIZE(x)          (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_MASK     (0x400U)
#define BCH_FLASH3LAYOUT1_GF13_0_GF14_1_SHIFT    (10U)
#define BCH_FLASH3LAYOUT1_ECCN_MASK              (0xF800U)
#define BCH_FLASH3LAYOUT1_ECCN_SHIFT             (11U)
/*! ECCN
 *  0b00000..No ECC to be performed
 *  0b00001..ECC 2 to be performed
 *  0b00010..ECC 4 to be performed
 *  0b11110..ECC 60 to be performed
 *  0b11111..ECC 62 to be performed
 */
#define BCH_FLASH3LAYOUT1_ECCN(x)                (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_ECCN_SHIFT)) & BCH_FLASH3LAYOUT1_ECCN_MASK)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK         (0xFFFF0000U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT        (16U)
#define BCH_FLASH3LAYOUT1_PAGE_SIZE(x)           (((uint32_t)(((uint32_t)(x)) << BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT)) & BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK)
/*! @} */

/*! @name DEBUG0 - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_DEBUG_REG_SELECT_MASK         (0x3FU)
#define BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT        (0U)
#define BCH_DEBUG0_DEBUG_REG_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_RSVD0_MASK                    (0xC0U)
#define BCH_DEBUG0_RSVD0_SHIFT                   (6U)
#define BCH_DEBUG0_RSVD0(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD0_SHIFT)) & BCH_DEBUG0_RSVD0_MASK)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_MASK       (0x100U)
#define BCH_DEBUG0_BM_KES_TEST_BYPASS_SHIFT      (8U)
#define BCH_DEBUG0_KES_DEBUG_STALL_MASK          (0x200U)
#define BCH_DEBUG0_KES_DEBUG_STALL_SHIFT         (9U)
#define BCH_DEBUG0_KES_DEBUG_STEP_MASK           (0x400U)
#define BCH_DEBUG0_KES_DEBUG_STEP_SHIFT          (10U)
#define BCH_DEBUG0_KES_STANDALONE_MASK           (0x800U)
#define BCH_DEBUG0_KES_STANDALONE_SHIFT          (11U)
#define BCH_DEBUG0_KES_DEBUG_KICK_MASK           (0x1000U)
#define BCH_DEBUG0_KES_DEBUG_KICK_SHIFT          (12U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_MASK         (0x2000U)
#define BCH_DEBUG0_KES_DEBUG_MODE4K_SHIFT        (13U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_MASK   (0x4000U)
#define BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_SHIFT  (14U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_MASK     (0x8000U)
#define BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_SHIFT    (15U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL(x)  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_RSVD1_MASK                    (0xFE000000U)
#define BCH_DEBUG0_RSVD1_SHIFT                   (25U)
#define BCH_DEBUG0_RSVD1(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_RSVD1_SHIFT)) & BCH_DEBUG0_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_SET - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_SET_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_SET_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_SET_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_SET_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD0_SHIFT)) & BCH_DEBUG0_SET_RSVD0_MASK)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_SET_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_SET_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_SET_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_SET_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_SET_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_SET_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_SET_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_SET_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_SET_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_SET_RSVD1_SHIFT)) & BCH_DEBUG0_SET_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_CLR - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_CLR_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_CLR_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_CLR_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_CLR_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD0_SHIFT)) & BCH_DEBUG0_CLR_RSVD0_MASK)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_CLR_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_CLR_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_CLR_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_CLR_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_CLR_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_CLR_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_CLR_RSVD1_SHIFT)) & BCH_DEBUG0_CLR_RSVD1_MASK)
/*! @} */

/*! @name DEBUG0_TOG - Hardware BCH ECC Debug Register0 */
/*! @{ */
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK     (0x3FU)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT    (0U)
#define BCH_DEBUG0_TOG_DEBUG_REG_SELECT(x)       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT)) & BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK)
#define BCH_DEBUG0_TOG_RSVD0_MASK                (0xC0U)
#define BCH_DEBUG0_TOG_RSVD0_SHIFT               (6U)
#define BCH_DEBUG0_TOG_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD0_SHIFT)) & BCH_DEBUG0_TOG_RSVD0_MASK)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_MASK   (0x100U)
#define BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_SHIFT  (8U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_MASK      (0x200U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STALL_SHIFT     (9U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_MASK       (0x400U)
#define BCH_DEBUG0_TOG_KES_DEBUG_STEP_SHIFT      (10U)
#define BCH_DEBUG0_TOG_KES_STANDALONE_MASK       (0x800U)
#define BCH_DEBUG0_TOG_KES_STANDALONE_SHIFT      (11U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_MASK       (0x1000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_KICK_SHIFT      (12U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_MASK     (0x2000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_SHIFT    (13U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_MASK (0x4000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_SHIFT (14U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_MASK (0x8000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_SHIFT (15U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK (0x1FF0000U)
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT (16U)
/*! KES_DEBUG_SYNDROME_SYMBOL
 *  0b000000000..Bus master address generator for SYND_GEN writes operates normally.
 *  0b000000001..Bus master address generator always addresses last four bytes in Auxiliary block.
 */
#define BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL(x) (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT)) & BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK)
#define BCH_DEBUG0_TOG_RSVD1_MASK                (0xFE000000U)
#define BCH_DEBUG0_TOG_RSVD1_SHIFT               (25U)
#define BCH_DEBUG0_TOG_RSVD1(x)                  (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG0_TOG_RSVD1_SHIFT)) & BCH_DEBUG0_TOG_RSVD1_MASK)
/*! @} */

/*! @name DBGKESREAD - KES Debug Read Register */
/*! @{ */
#define BCH_DBGKESREAD_VALUES_MASK               (0xFFFFFFFFU)
#define BCH_DBGKESREAD_VALUES_SHIFT              (0U)
#define BCH_DBGKESREAD_VALUES(x)                 (((uint32_t)(((uint32_t)(x)) << BCH_DBGKESREAD_VALUES_SHIFT)) & BCH_DBGKESREAD_VALUES_MASK)
/*! @} */

/*! @name DBGCSFEREAD - Chien Search Debug Read Register */
/*! @{ */
#define BCH_DBGCSFEREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGCSFEREAD_VALUES_SHIFT             (0U)
#define BCH_DBGCSFEREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGCSFEREAD_VALUES_SHIFT)) & BCH_DBGCSFEREAD_VALUES_MASK)
/*! @} */

/*! @name DBGSYNDGENREAD - Syndrome Generator Debug Read Register */
/*! @{ */
#define BCH_DBGSYNDGENREAD_VALUES_MASK           (0xFFFFFFFFU)
#define BCH_DBGSYNDGENREAD_VALUES_SHIFT          (0U)
#define BCH_DBGSYNDGENREAD_VALUES(x)             (((uint32_t)(((uint32_t)(x)) << BCH_DBGSYNDGENREAD_VALUES_SHIFT)) & BCH_DBGSYNDGENREAD_VALUES_MASK)
/*! @} */

/*! @name DBGAHBMREAD - Bus Master and ECC Controller Debug Read Register */
/*! @{ */
#define BCH_DBGAHBMREAD_VALUES_MASK              (0xFFFFFFFFU)
#define BCH_DBGAHBMREAD_VALUES_SHIFT             (0U)
#define BCH_DBGAHBMREAD_VALUES(x)                (((uint32_t)(((uint32_t)(x)) << BCH_DBGAHBMREAD_VALUES_SHIFT)) & BCH_DBGAHBMREAD_VALUES_MASK)
/*! @} */

/*! @name BLOCKNAME - Block Name Register */
/*! @{ */
#define BCH_BLOCKNAME_NAME_MASK                  (0xFFFFFFFFU)
#define BCH_BLOCKNAME_NAME_SHIFT                 (0U)
#define BCH_BLOCKNAME_NAME(x)                    (((uint32_t)(((uint32_t)(x)) << BCH_BLOCKNAME_NAME_SHIFT)) & BCH_BLOCKNAME_NAME_MASK)
/*! @} */

/*! @name VERSION - BCH Version Register */
/*! @{ */
#define BCH_VERSION_STEP_MASK                    (0xFFFFU)
#define BCH_VERSION_STEP_SHIFT                   (0U)
#define BCH_VERSION_STEP(x)                      (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_STEP_SHIFT)) & BCH_VERSION_STEP_MASK)
#define BCH_VERSION_MINOR_MASK                   (0xFF0000U)
#define BCH_VERSION_MINOR_SHIFT                  (16U)
#define BCH_VERSION_MINOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MINOR_SHIFT)) & BCH_VERSION_MINOR_MASK)
#define BCH_VERSION_MAJOR_MASK                   (0xFF000000U)
#define BCH_VERSION_MAJOR_SHIFT                  (24U)
#define BCH_VERSION_MAJOR(x)                     (((uint32_t)(((uint32_t)(x)) << BCH_VERSION_MAJOR_SHIFT)) & BCH_VERSION_MAJOR_MASK)
/*! @} */

/*! @name DEBUG1 - Hardware BCH ECC Debug Register 1 */
/*! @{ */
#define BCH_DEBUG1_ERASED_ZERO_COUNT_MASK        (0x1FFU)
#define BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT       (0U)
#define BCH_DEBUG1_ERASED_ZERO_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT)) & BCH_DEBUG1_ERASED_ZERO_COUNT_MASK)
#define BCH_DEBUG1_RSVD_MASK                     (0x7FFFFE00U)
#define BCH_DEBUG1_RSVD_SHIFT                    (9U)
#define BCH_DEBUG1_RSVD(x)                       (((uint32_t)(((uint32_t)(x)) << BCH_DEBUG1_RSVD_SHIFT)) & BCH_DEBUG1_RSVD_MASK)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_MASK       (0x80000000U)
#define BCH_DEBUG1_DEBUG1_PREERASECHK_SHIFT      (31U)
/*! @} */


/*!
 * @}
 */ /* end of group BCH_Register_Masks */


/* BCH - Peripheral instance base addresses */
/** Peripheral BCH base pointer */
#define BCH_BASE_PTR                             ((BCH_MemMapPtr)0x33004000u)
/** Array initializer of BCH peripheral base pointers */
#define BCH_BASE_PTRS                            { BCH_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- BCH - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup BCH_Register_Accessor_Macros BCH - Register accessor macros
 * @{
 */


/* BCH - Register instance definitions */
/* BCH */
#define BCH_CTRL                                 BCH_CTRL_REG(BCH_BASE_PTR)
#define BCH_CTRL_SET                             BCH_CTRL_SET_REG(BCH_BASE_PTR)
#define BCH_CTRL_CLR                             BCH_CTRL_CLR_REG(BCH_BASE_PTR)
#define BCH_CTRL_TOG                             BCH_CTRL_TOG_REG(BCH_BASE_PTR)
#define BCH_STATUS0                              BCH_STATUS0_REG(BCH_BASE_PTR)
#define BCH_MODE                                 BCH_MODE_REG(BCH_BASE_PTR)
#define BCH_ENCODEPTR                            BCH_ENCODEPTR_REG(BCH_BASE_PTR)
#define BCH_DATAPTR                              BCH_DATAPTR_REG(BCH_BASE_PTR)
#define BCH_METAPTR                              BCH_METAPTR_REG(BCH_BASE_PTR)
#define BCH_LAYOUTSELECT                         BCH_LAYOUTSELECT_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT0                        BCH_FLASH0LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH0LAYOUT1                        BCH_FLASH0LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT0                        BCH_FLASH1LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH1LAYOUT1                        BCH_FLASH1LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT0                        BCH_FLASH2LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH2LAYOUT1                        BCH_FLASH2LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT0                        BCH_FLASH3LAYOUT0_REG(BCH_BASE_PTR)
#define BCH_FLASH3LAYOUT1                        BCH_FLASH3LAYOUT1_REG(BCH_BASE_PTR)
#define BCH_DEBUG0                               BCH_DEBUG0_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_SET                           BCH_DEBUG0_SET_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_CLR                           BCH_DEBUG0_CLR_REG(BCH_BASE_PTR)
#define BCH_DEBUG0_TOG                           BCH_DEBUG0_TOG_REG(BCH_BASE_PTR)
#define BCH_DBGKESREAD                           BCH_DBGKESREAD_REG(BCH_BASE_PTR)
#define BCH_DBGCSFEREAD                          BCH_DBGCSFEREAD_REG(BCH_BASE_PTR)
#define BCH_DBGSYNDGENREAD                       BCH_DBGSYNDGENREAD_REG(BCH_BASE_PTR)
#define BCH_DBGAHBMREAD                          BCH_DBGAHBMREAD_REG(BCH_BASE_PTR)
#define BCH_BLOCKNAME                            BCH_BLOCKNAME_REG(BCH_BASE_PTR)
#define BCH_VERSION                              BCH_VERSION_REG(BCH_BASE_PTR)
#define BCH_DEBUG1                               BCH_DEBUG1_REG(BCH_BASE_PTR)

/*!
 * @}
 */ /* end of group BCH_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group BCH_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Peripheral CCM
 * @{
 */

/** CCM - Peripheral register structure */
typedef struct CCM_MemMap {
  uint32_t GPR0;                                   /**< General Purpose Register, offset: 0x0 */
  uint32_t GPR0_SET;                               /**< General Purpose Register, offset: 0x4 */
  uint32_t GPR0_CLR;                               /**< General Purpose Register, offset: 0x8 */
  uint32_t GPR0_TOG;                               /**< General Purpose Register, offset: 0xC */
  uint8_t RESERVED_0[2032];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    uint32_t PLL_CTRL;                               /**< CCM PLL Control Register, array offset: 0x800, array step: 0x10 */
    uint32_t PLL_CTRL_SET;                           /**< CCM PLL Control Register, array offset: 0x804, array step: 0x10 */
    uint32_t PLL_CTRL_CLR;                           /**< CCM PLL Control Register, array offset: 0x808, array step: 0x10 */
    uint32_t PLL_CTRL_TOG;                           /**< CCM PLL Control Register, array offset: 0x80C, array step: 0x10 */
  } PLL_CTRL[39];
  uint8_t RESERVED_1[13712];
  struct {                                         /* offset: 0x4000, array step: 0x10 */
    uint32_t CCGR;                                   /**< CCM Clock Gating Register, array offset: 0x4000, array step: 0x10 */
    uint32_t CCGR_SET;                               /**< CCM Clock Gating Register, array offset: 0x4004, array step: 0x10 */
    uint32_t CCGR_CLR;                               /**< CCM Clock Gating Register, array offset: 0x4008, array step: 0x10 */
    uint32_t CCGR_TOG;                               /**< CCM Clock Gating Register, array offset: 0x400C, array step: 0x10 */
  } CCGR[192];
  uint8_t RESERVED_2[13312];
  struct {                                         /* offset: 0x8000, array step: 0x80 */
    uint32_t TARGET_ROOT;                            /**< Target Register, array offset: 0x8000, array step: 0x80 */
    uint32_t TARGET_ROOT_SET;                        /**< Target Register, array offset: 0x8004, array step: 0x80 */
    uint32_t TARGET_ROOT_CLR;                        /**< Target Register, array offset: 0x8008, array step: 0x80 */
    uint32_t TARGET_ROOT_TOG;                        /**< Target Register, array offset: 0x800C, array step: 0x80 */
    uint32_t MISC;                                   /**< Miscellaneous Register, array offset: 0x8010, array step: 0x80 */
    uint32_t MISC_ROOT_SET;                          /**< Miscellaneous Register, array offset: 0x8014, array step: 0x80 */
    uint32_t MISC_ROOT_CLR;                          /**< Miscellaneous Register, array offset: 0x8018, array step: 0x80 */
    uint32_t MISC_ROOT_TOG;                          /**< Miscellaneous Register, array offset: 0x801C, array step: 0x80 */
    uint32_t POST;                                   /**< Post Divider Register, array offset: 0x8020, array step: 0x80 */
    uint32_t POST_ROOT_SET;                          /**< Post Divider Register, array offset: 0x8024, array step: 0x80 */
    uint32_t POST_ROOT_CLR;                          /**< Post Divider Register, array offset: 0x8028, array step: 0x80 */
    uint32_t POST_ROOT_TOG;                          /**< Post Divider Register, array offset: 0x802C, array step: 0x80 */
    uint32_t PRE;                                    /**< Pre Divider Register, array offset: 0x8030, array step: 0x80 */
    uint32_t PRE_ROOT_SET;                           /**< Pre Divider Register, array offset: 0x8034, array step: 0x80 */
    uint32_t PRE_ROOT_CLR;                           /**< Pre Divider Register, array offset: 0x8038, array step: 0x80 */
    uint32_t PRE_ROOT_TOG;                           /**< Pre Divider Register, array offset: 0x803C, array step: 0x80 */
    uint8_t RESERVED_0[48];
    uint32_t ACCESS_CTRL;                            /**< Access Control Register, array offset: 0x8070, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_SET;                   /**< Access Control Register, array offset: 0x8074, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_CLR;                   /**< Access Control Register, array offset: 0x8078, array step: 0x80 */
    uint32_t ACCESS_CTRL_ROOT_TOG;                   /**< Access Control Register, array offset: 0x807C, array step: 0x80 */
  } ROOT[142];
} volatile *CCM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register accessors */
#define CCM_GPR0_REG(base)                       ((base)->GPR0)
#define CCM_GPR0_SET_REG(base)                   ((base)->GPR0_SET)
#define CCM_GPR0_CLR_REG(base)                   ((base)->GPR0_CLR)
#define CCM_GPR0_TOG_REG(base)                   ((base)->GPR0_TOG)
#define CCM_PLL_CTRL_REG(base,index)             ((base)->PLL_CTRL[index].PLL_CTRL)
#define CCM_PLL_CTRL_SET_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_SET)
#define CCM_PLL_CTRL_CLR_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_CLR)
#define CCM_PLL_CTRL_TOG_REG(base,index)         ((base)->PLL_CTRL[index].PLL_CTRL_TOG)
#define CCM_CCGR_REG(base,index)                 ((base)->CCGR[index].CCGR)
#define CCM_CCGR_SET_REG(base,index)             ((base)->CCGR[index].CCGR_SET)
#define CCM_CCGR_CLR_REG(base,index)             ((base)->CCGR[index].CCGR_CLR)
#define CCM_CCGR_TOG_REG(base,index)             ((base)->CCGR[index].CCGR_TOG)
#define CCM_TARGET_ROOT_REG(base,index)          ((base)->ROOT[index].TARGET_ROOT)
#define CCM_TARGET_ROOT_SET_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_SET)
#define CCM_TARGET_ROOT_CLR_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_CLR)
#define CCM_TARGET_ROOT_TOG_REG(base,index)      ((base)->ROOT[index].TARGET_ROOT_TOG)
#define CCM_MISC_REG(base,index)                 ((base)->ROOT[index].MISC)
#define CCM_MISC_ROOT_SET_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_SET)
#define CCM_MISC_ROOT_CLR_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_CLR)
#define CCM_MISC_ROOT_TOG_REG(base,index)        ((base)->ROOT[index].MISC_ROOT_TOG)
#define CCM_POST_REG(base,index)                 ((base)->ROOT[index].POST)
#define CCM_POST_ROOT_SET_REG(base,index)        ((base)->ROOT[index].POST_ROOT_SET)
#define CCM_POST_ROOT_CLR_REG(base,index)        ((base)->ROOT[index].POST_ROOT_CLR)
#define CCM_POST_ROOT_TOG_REG(base,index)        ((base)->ROOT[index].POST_ROOT_TOG)
#define CCM_PRE_REG(base,index)                  ((base)->ROOT[index].PRE)
#define CCM_PRE_ROOT_SET_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_SET)
#define CCM_PRE_ROOT_CLR_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_CLR)
#define CCM_PRE_ROOT_TOG_REG(base,index)         ((base)->ROOT[index].PRE_ROOT_TOG)
#define CCM_ACCESS_CTRL_REG(base,index)          ((base)->ROOT[index].ACCESS_CTRL)
#define CCM_ACCESS_CTRL_ROOT_SET_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_SET)
#define CCM_ACCESS_CTRL_ROOT_CLR_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_CLR)
#define CCM_ACCESS_CTRL_ROOT_TOG_REG(base,index) ((base)->ROOT[index].ACCESS_CTRL_ROOT_TOG)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Masks CCM Register Masks
 * @{
 */

/*! @name GPR0 - General Purpose Register */
/*! @{ */
#define CCM_GPR0_GP0_MASK                        (0xFFFFFFFFU)
#define CCM_GPR0_GP0_SHIFT                       (0U)
#define CCM_GPR0_GP0(x)                          (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_GP0_SHIFT)) & CCM_GPR0_GP0_MASK)
/*! @} */

/*! @name GPR0_SET - General Purpose Register */
/*! @{ */
#define CCM_GPR0_SET_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_SET_GP0_SHIFT                   (0U)
#define CCM_GPR0_SET_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_SET_GP0_SHIFT)) & CCM_GPR0_SET_GP0_MASK)
/*! @} */

/*! @name GPR0_CLR - General Purpose Register */
/*! @{ */
#define CCM_GPR0_CLR_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_CLR_GP0_SHIFT                   (0U)
#define CCM_GPR0_CLR_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_CLR_GP0_SHIFT)) & CCM_GPR0_CLR_GP0_MASK)
/*! @} */

/*! @name GPR0_TOG - General Purpose Register */
/*! @{ */
#define CCM_GPR0_TOG_GP0_MASK                    (0xFFFFFFFFU)
#define CCM_GPR0_TOG_GP0_SHIFT                   (0U)
#define CCM_GPR0_TOG_GP0(x)                      (((uint32_t)(((uint32_t)(x)) << CCM_GPR0_TOG_GP0_SHIFT)) & CCM_GPR0_TOG_GP0_MASK)
/*! @} */

/*! @name PLL_CTRL - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_SETTING0_MASK               (0x3U)
#define CCM_PLL_CTRL_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING0_SHIFT)) & CCM_PLL_CTRL_SETTING0_MASK)
#define CCM_PLL_CTRL_SETTING1_MASK               (0x30U)
#define CCM_PLL_CTRL_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING1_SHIFT)) & CCM_PLL_CTRL_SETTING1_MASK)
#define CCM_PLL_CTRL_SETTING2_MASK               (0x300U)
#define CCM_PLL_CTRL_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING2_SHIFT)) & CCM_PLL_CTRL_SETTING2_MASK)
#define CCM_PLL_CTRL_SETTING3_MASK               (0x3000U)
#define CCM_PLL_CTRL_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SETTING3_SHIFT)) & CCM_PLL_CTRL_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL */
#define CCM_PLL_CTRL_COUNT                       (39U)

/*! @name PLL_CTRL_SET - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_SET_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_SET_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING0_SHIFT)) & CCM_PLL_CTRL_SET_SETTING0_MASK)
#define CCM_PLL_CTRL_SET_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_SET_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING1_SHIFT)) & CCM_PLL_CTRL_SET_SETTING1_MASK)
#define CCM_PLL_CTRL_SET_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_SET_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING2_SHIFT)) & CCM_PLL_CTRL_SET_SETTING2_MASK)
#define CCM_PLL_CTRL_SET_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_SET_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_SET_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_SET_SETTING3_SHIFT)) & CCM_PLL_CTRL_SET_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_SET */
#define CCM_PLL_CTRL_SET_COUNT                   (39U)

/*! @name PLL_CTRL_CLR - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_CLR_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_CLR_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING0_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING0_MASK)
#define CCM_PLL_CTRL_CLR_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_CLR_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING1_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING1_MASK)
#define CCM_PLL_CTRL_CLR_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_CLR_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING2_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING2_MASK)
#define CCM_PLL_CTRL_CLR_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_CLR_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_CLR_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_CLR_SETTING3_SHIFT)) & CCM_PLL_CTRL_CLR_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_CLR */
#define CCM_PLL_CTRL_CLR_COUNT                   (39U)

/*! @name PLL_CTRL_TOG - CCM PLL Control Register */
/*! @{ */
#define CCM_PLL_CTRL_TOG_SETTING0_MASK           (0x3U)
#define CCM_PLL_CTRL_TOG_SETTING0_SHIFT          (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING0(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING0_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING0_MASK)
#define CCM_PLL_CTRL_TOG_SETTING1_MASK           (0x30U)
#define CCM_PLL_CTRL_TOG_SETTING1_SHIFT          (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING1(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING1_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING1_MASK)
#define CCM_PLL_CTRL_TOG_SETTING2_MASK           (0x300U)
#define CCM_PLL_CTRL_TOG_SETTING2_SHIFT          (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING2(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING2_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING2_MASK)
#define CCM_PLL_CTRL_TOG_SETTING3_MASK           (0x3000U)
#define CCM_PLL_CTRL_TOG_SETTING3_SHIFT          (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_PLL_CTRL_TOG_SETTING3(x)             (((uint32_t)(((uint32_t)(x)) << CCM_PLL_CTRL_TOG_SETTING3_SHIFT)) & CCM_PLL_CTRL_TOG_SETTING3_MASK)
/*! @} */

/* The count of CCM_PLL_CTRL_TOG */
#define CCM_PLL_CTRL_TOG_COUNT                   (39U)

/*! @name CCGR - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_SETTING0_MASK                   (0x3U)
#define CCM_CCGR_SETTING0_SHIFT                  (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING0(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING0_SHIFT)) & CCM_CCGR_SETTING0_MASK)
#define CCM_CCGR_SETTING1_MASK                   (0x30U)
#define CCM_CCGR_SETTING1_SHIFT                  (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING1(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING1_SHIFT)) & CCM_CCGR_SETTING1_MASK)
#define CCM_CCGR_SETTING2_MASK                   (0x300U)
#define CCM_CCGR_SETTING2_SHIFT                  (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING2(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING2_SHIFT)) & CCM_CCGR_SETTING2_MASK)
#define CCM_CCGR_SETTING3_MASK                   (0x3000U)
#define CCM_CCGR_SETTING3_SHIFT                  (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SETTING3(x)                     (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SETTING3_SHIFT)) & CCM_CCGR_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR */
#define CCM_CCGR_COUNT                           (192U)

/*! @name CCGR_SET - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_SET_SETTING0_MASK               (0x3U)
#define CCM_CCGR_SET_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING0_SHIFT)) & CCM_CCGR_SET_SETTING0_MASK)
#define CCM_CCGR_SET_SETTING1_MASK               (0x30U)
#define CCM_CCGR_SET_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING1_SHIFT)) & CCM_CCGR_SET_SETTING1_MASK)
#define CCM_CCGR_SET_SETTING2_MASK               (0x300U)
#define CCM_CCGR_SET_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING2_SHIFT)) & CCM_CCGR_SET_SETTING2_MASK)
#define CCM_CCGR_SET_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_SET_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_SET_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_SET_SETTING3_SHIFT)) & CCM_CCGR_SET_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_SET */
#define CCM_CCGR_SET_COUNT                       (192U)

/*! @name CCGR_CLR - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_CLR_SETTING0_MASK               (0x3U)
#define CCM_CCGR_CLR_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING0_SHIFT)) & CCM_CCGR_CLR_SETTING0_MASK)
#define CCM_CCGR_CLR_SETTING1_MASK               (0x30U)
#define CCM_CCGR_CLR_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING1_SHIFT)) & CCM_CCGR_CLR_SETTING1_MASK)
#define CCM_CCGR_CLR_SETTING2_MASK               (0x300U)
#define CCM_CCGR_CLR_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING2_SHIFT)) & CCM_CCGR_CLR_SETTING2_MASK)
#define CCM_CCGR_CLR_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_CLR_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_CLR_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_CLR_SETTING3_SHIFT)) & CCM_CCGR_CLR_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_CLR */
#define CCM_CCGR_CLR_COUNT                       (192U)

/*! @name CCGR_TOG - CCM Clock Gating Register */
/*! @{ */
#define CCM_CCGR_TOG_SETTING0_MASK               (0x3U)
#define CCM_CCGR_TOG_SETTING0_SHIFT              (0U)
/*! SETTING0
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING0(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING0_SHIFT)) & CCM_CCGR_TOG_SETTING0_MASK)
#define CCM_CCGR_TOG_SETTING1_MASK               (0x30U)
#define CCM_CCGR_TOG_SETTING1_SHIFT              (4U)
/*! SETTING1
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING1(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING1_SHIFT)) & CCM_CCGR_TOG_SETTING1_MASK)
#define CCM_CCGR_TOG_SETTING2_MASK               (0x300U)
#define CCM_CCGR_TOG_SETTING2_SHIFT              (8U)
/*! SETTING2
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING2(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING2_SHIFT)) & CCM_CCGR_TOG_SETTING2_MASK)
#define CCM_CCGR_TOG_SETTING3_MASK               (0x3000U)
#define CCM_CCGR_TOG_SETTING3_SHIFT              (12U)
/*! SETTING3
 *  0b00..Domain clocks not needed
 *  0b01..Domain clocks needed when in RUN
 *  0b10..Domain clocks needed when in RUN and WAIT
 *  0b11..Domain clocks needed all the time
 */
#define CCM_CCGR_TOG_SETTING3(x)                 (((uint32_t)(((uint32_t)(x)) << CCM_CCGR_TOG_SETTING3_SHIFT)) & CCM_CCGR_TOG_SETTING3_MASK)
/*! @} */

/* The count of CCM_CCGR_TOG */
#define CCM_CCGR_TOG_COUNT                       (192U)

/*! @name TARGET_ROOT - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_POST_PODF_MASK           (0x3FU)
#define CCM_TARGET_ROOT_POST_PODF_SHIFT          (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_POST_PODF(x)             (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_POST_PODF_MASK)
#define CCM_TARGET_ROOT_PRE_PODF_MASK            (0x70000U)
#define CCM_TARGET_ROOT_PRE_PODF_SHIFT           (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_PRE_PODF(x)              (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_MUX_MASK                 (0x7000000U)
#define CCM_TARGET_ROOT_MUX_SHIFT                (24U)
#define CCM_TARGET_ROOT_MUX(x)                   (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_MUX_SHIFT)) & CCM_TARGET_ROOT_MUX_MASK)
#define CCM_TARGET_ROOT_ENABLE_MASK              (0x10000000U)
#define CCM_TARGET_ROOT_ENABLE_SHIFT             (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT */
#define CCM_TARGET_ROOT_COUNT                    (142U)

/*! @name TARGET_ROOT_SET - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_SET_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_SET_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_SET_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_POST_PODF_MASK)
#define CCM_TARGET_ROOT_SET_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_SET_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_SET_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_SET_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_SET_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_SET_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_SET_MUX_SHIFT)) & CCM_TARGET_ROOT_SET_MUX_MASK)
#define CCM_TARGET_ROOT_SET_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_SET_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_SET */
#define CCM_TARGET_ROOT_SET_COUNT                (142U)

/*! @name TARGET_ROOT_CLR - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_CLR_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_CLR_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_POST_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_CLR_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_CLR_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_CLR_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_CLR_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_CLR_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_CLR_MUX_SHIFT)) & CCM_TARGET_ROOT_CLR_MUX_MASK)
#define CCM_TARGET_ROOT_CLR_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_CLR_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_CLR */
#define CCM_TARGET_ROOT_CLR_COUNT                (142U)

/*! @name TARGET_ROOT_TOG - Target Register */
/*! @{ */
#define CCM_TARGET_ROOT_TOG_POST_PODF_MASK       (0x3FU)
#define CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT      (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_TARGET_ROOT_TOG_POST_PODF(x)         (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_POST_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_POST_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_MASK        (0x70000U)
#define CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT       (16U)
/*! PRE_PODF
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_TARGET_ROOT_TOG_PRE_PODF(x)          (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_PRE_PODF_SHIFT)) & CCM_TARGET_ROOT_TOG_PRE_PODF_MASK)
#define CCM_TARGET_ROOT_TOG_MUX_MASK             (0x7000000U)
#define CCM_TARGET_ROOT_TOG_MUX_SHIFT            (24U)
#define CCM_TARGET_ROOT_TOG_MUX(x)               (((uint32_t)(((uint32_t)(x)) << CCM_TARGET_ROOT_TOG_MUX_SHIFT)) & CCM_TARGET_ROOT_TOG_MUX_MASK)
#define CCM_TARGET_ROOT_TOG_ENABLE_MASK          (0x10000000U)
#define CCM_TARGET_ROOT_TOG_ENABLE_SHIFT         (28U)
/*! @} */

/* The count of CCM_TARGET_ROOT_TOG */
#define CCM_TARGET_ROOT_TOG_COUNT                (142U)

/*! @name MISC - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_AUTHEN_FAIL_MASK                (0x1U)
#define CCM_MISC_AUTHEN_FAIL_SHIFT               (0U)
#define CCM_MISC_TIMEOUT_MASK                    (0x10U)
#define CCM_MISC_TIMEOUT_SHIFT                   (4U)
#define CCM_MISC_VIOLATE_MASK                    (0x100U)
#define CCM_MISC_VIOLATE_SHIFT                   (8U)
/*! @} */

/* The count of CCM_MISC */
#define CCM_MISC_COUNT                           (142U)

/*! @name MISC_ROOT_SET - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_SET_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_SET_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_SET_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_SET_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_SET_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_SET */
#define CCM_MISC_ROOT_SET_COUNT                  (142U)

/*! @name MISC_ROOT_CLR - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_CLR_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_CLR_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_CLR_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_CLR_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_CLR_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_CLR */
#define CCM_MISC_ROOT_CLR_COUNT                  (142U)

/*! @name MISC_ROOT_TOG - Miscellaneous Register */
/*! @{ */
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_MASK       (0x1U)
#define CCM_MISC_ROOT_TOG_AUTHEN_FAIL_SHIFT      (0U)
#define CCM_MISC_ROOT_TOG_TIMEOUT_MASK           (0x10U)
#define CCM_MISC_ROOT_TOG_TIMEOUT_SHIFT          (4U)
#define CCM_MISC_ROOT_TOG_VIOLATE_MASK           (0x100U)
#define CCM_MISC_ROOT_TOG_VIOLATE_SHIFT          (8U)
/*! @} */

/* The count of CCM_MISC_ROOT_TOG */
#define CCM_MISC_ROOT_TOG_COUNT                  (142U)

/*! @name POST - Post Divider Register */
/*! @{ */
#define CCM_POST_POST_PODF_MASK                  (0x3FU)
#define CCM_POST_POST_PODF_SHIFT                 (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_POST_PODF(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_POST_POST_PODF_SHIFT)) & CCM_POST_POST_PODF_MASK)
#define CCM_POST_BUSY1_MASK                      (0x80U)
#define CCM_POST_BUSY1_SHIFT                     (7U)
#define CCM_POST_SELECT_MASK                     (0x10000000U)
#define CCM_POST_SELECT_SHIFT                    (28U)
#define CCM_POST_BUSY2_MASK                      (0x80000000U)
#define CCM_POST_BUSY2_SHIFT                     (31U)
/*! @} */

/* The count of CCM_POST */
#define CCM_POST_COUNT                           (142U)

/*! @name POST_ROOT_SET - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_SET_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_SET_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_SET_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_SET_POST_PODF_SHIFT)) & CCM_POST_ROOT_SET_POST_PODF_MASK)
#define CCM_POST_ROOT_SET_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_SET_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_SET_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_SET_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_SET_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_SET_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_SET */
#define CCM_POST_ROOT_SET_COUNT                  (142U)

/*! @name POST_ROOT_CLR - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_CLR_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_CLR_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_CLR_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_CLR_POST_PODF_SHIFT)) & CCM_POST_ROOT_CLR_POST_PODF_MASK)
#define CCM_POST_ROOT_CLR_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_CLR_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_CLR_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_CLR_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_CLR_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_CLR_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_CLR */
#define CCM_POST_ROOT_CLR_COUNT                  (142U)

/*! @name POST_ROOT_TOG - Post Divider Register */
/*! @{ */
#define CCM_POST_ROOT_TOG_POST_PODF_MASK         (0x3FU)
#define CCM_POST_ROOT_TOG_POST_PODF_SHIFT        (0U)
/*! POST_PODF
 *  0b000000..Divide by 1
 *  0b000001..Divide by 2
 *  0b000010..Divide by 3
 *  0b000011..Divide by 4
 *  0b000100..Divide by 5
 *  0b000101..Divide by 6
 *  0b111111..Divide by 64
 */
#define CCM_POST_ROOT_TOG_POST_PODF(x)           (((uint32_t)(((uint32_t)(x)) << CCM_POST_ROOT_TOG_POST_PODF_SHIFT)) & CCM_POST_ROOT_TOG_POST_PODF_MASK)
#define CCM_POST_ROOT_TOG_BUSY1_MASK             (0x80U)
#define CCM_POST_ROOT_TOG_BUSY1_SHIFT            (7U)
#define CCM_POST_ROOT_TOG_SELECT_MASK            (0x10000000U)
#define CCM_POST_ROOT_TOG_SELECT_SHIFT           (28U)
#define CCM_POST_ROOT_TOG_BUSY2_MASK             (0x80000000U)
#define CCM_POST_ROOT_TOG_BUSY2_SHIFT            (31U)
/*! @} */

/* The count of CCM_POST_ROOT_TOG */
#define CCM_POST_ROOT_TOG_COUNT                  (142U)

/*! @name PRE - Pre Divider Register */
/*! @{ */
#define CCM_PRE_PRE_PODF_B_MASK                  (0x7U)
#define CCM_PRE_PRE_PODF_B_SHIFT                 (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_PRE_PODF_B(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_B_SHIFT)) & CCM_PRE_PRE_PODF_B_MASK)
#define CCM_PRE_BUSY0_MASK                       (0x8U)
#define CCM_PRE_BUSY0_SHIFT                      (3U)
#define CCM_PRE_MUX_B_MASK                       (0x700U)
#define CCM_PRE_MUX_B_SHIFT                      (8U)
#define CCM_PRE_MUX_B(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_B_SHIFT)) & CCM_PRE_MUX_B_MASK)
#define CCM_PRE_EN_B_MASK                        (0x1000U)
#define CCM_PRE_EN_B_SHIFT                       (12U)
#define CCM_PRE_BUSY1_MASK                       (0x8000U)
#define CCM_PRE_BUSY1_SHIFT                      (15U)
#define CCM_PRE_PRE_PODF_A_MASK                  (0x70000U)
#define CCM_PRE_PRE_PODF_A_SHIFT                 (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_PRE_PODF_A(x)                    (((uint32_t)(((uint32_t)(x)) << CCM_PRE_PRE_PODF_A_SHIFT)) & CCM_PRE_PRE_PODF_A_MASK)
#define CCM_PRE_BUSY3_MASK                       (0x80000U)
#define CCM_PRE_BUSY3_SHIFT                      (19U)
#define CCM_PRE_MUX_A_MASK                       (0x7000000U)
#define CCM_PRE_MUX_A_SHIFT                      (24U)
#define CCM_PRE_MUX_A(x)                         (((uint32_t)(((uint32_t)(x)) << CCM_PRE_MUX_A_SHIFT)) & CCM_PRE_MUX_A_MASK)
#define CCM_PRE_EN_A_MASK                        (0x10000000U)
#define CCM_PRE_EN_A_SHIFT                       (28U)
#define CCM_PRE_BUSY4_MASK                       (0x80000000U)
#define CCM_PRE_BUSY4_SHIFT                      (31U)
/*! @} */

/* The count of CCM_PRE */
#define CCM_PRE_COUNT                            (142U)

/*! @name PRE_ROOT_SET - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_SET_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_SET_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_SET_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_SET_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_SET_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_SET_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_SET_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_B_SHIFT)) & CCM_PRE_ROOT_SET_MUX_B_MASK)
#define CCM_PRE_ROOT_SET_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_SET_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_SET_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_SET_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_SET_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_SET_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_SET_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_SET_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_SET_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_SET_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_SET_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_SET_MUX_A_SHIFT)) & CCM_PRE_ROOT_SET_MUX_A_MASK)
#define CCM_PRE_ROOT_SET_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_SET_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_SET_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_SET_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_SET */
#define CCM_PRE_ROOT_SET_COUNT                   (142U)

/*! @name PRE_ROOT_CLR - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_CLR_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_CLR_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_CLR_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_CLR_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_CLR_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_CLR_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_B_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_B_MASK)
#define CCM_PRE_ROOT_CLR_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_CLR_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_CLR_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_CLR_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_CLR_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_CLR_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_CLR_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_CLR_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_CLR_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_CLR_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_CLR_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_CLR_MUX_A_SHIFT)) & CCM_PRE_ROOT_CLR_MUX_A_MASK)
#define CCM_PRE_ROOT_CLR_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_CLR_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_CLR_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_CLR_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_CLR */
#define CCM_PRE_ROOT_CLR_COUNT                   (142U)

/*! @name PRE_ROOT_TOG - Pre Divider Register */
/*! @{ */
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK         (0x7U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT        (0U)
/*! PRE_PODF_B
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_TOG_PRE_PODF_B(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_B_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_B_MASK)
#define CCM_PRE_ROOT_TOG_BUSY0_MASK              (0x8U)
#define CCM_PRE_ROOT_TOG_BUSY0_SHIFT             (3U)
#define CCM_PRE_ROOT_TOG_MUX_B_MASK              (0x700U)
#define CCM_PRE_ROOT_TOG_MUX_B_SHIFT             (8U)
#define CCM_PRE_ROOT_TOG_MUX_B(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_B_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_B_MASK)
#define CCM_PRE_ROOT_TOG_EN_B_MASK               (0x1000U)
#define CCM_PRE_ROOT_TOG_EN_B_SHIFT              (12U)
#define CCM_PRE_ROOT_TOG_BUSY1_MASK              (0x8000U)
#define CCM_PRE_ROOT_TOG_BUSY1_SHIFT             (15U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK         (0x70000U)
#define CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT        (16U)
/*! PRE_PODF_A
 *  0b000..Divide by 1
 *  0b001..Divide by 2
 *  0b010..Divide by 3
 *  0b011..Divide by 4
 *  0b100..Divide by 5
 *  0b101..Divide by 6
 *  0b110..Divide by 7
 *  0b111..Divide by 8
 */
#define CCM_PRE_ROOT_TOG_PRE_PODF_A(x)           (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_PRE_PODF_A_SHIFT)) & CCM_PRE_ROOT_TOG_PRE_PODF_A_MASK)
#define CCM_PRE_ROOT_TOG_BUSY3_MASK              (0x80000U)
#define CCM_PRE_ROOT_TOG_BUSY3_SHIFT             (19U)
#define CCM_PRE_ROOT_TOG_MUX_A_MASK              (0x7000000U)
#define CCM_PRE_ROOT_TOG_MUX_A_SHIFT             (24U)
#define CCM_PRE_ROOT_TOG_MUX_A(x)                (((uint32_t)(((uint32_t)(x)) << CCM_PRE_ROOT_TOG_MUX_A_SHIFT)) & CCM_PRE_ROOT_TOG_MUX_A_MASK)
#define CCM_PRE_ROOT_TOG_EN_A_MASK               (0x10000000U)
#define CCM_PRE_ROOT_TOG_EN_A_SHIFT              (28U)
#define CCM_PRE_ROOT_TOG_BUSY4_MASK              (0x80000000U)
#define CCM_PRE_ROOT_TOG_BUSY4_SHIFT             (31U)
/*! @} */

/* The count of CCM_PRE_ROOT_TOG */
#define CCM_PRE_ROOT_TOG_COUNT                   (142U)

/*! @name ACCESS_CTRL - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK        (0xFU)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT       (0U)
#define CCM_ACCESS_CTRL_DOMAIN0_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK        (0xF0U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT       (4U)
#define CCM_ACCESS_CTRL_DOMAIN1_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK        (0xF00U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT       (8U)
#define CCM_ACCESS_CTRL_DOMAIN2_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK        (0xF000U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT       (12U)
#define CCM_ACCESS_CTRL_DOMAIN3_INFO(x)          (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_OWNER_ID_MASK            (0x30000U)
#define CCM_ACCESS_CTRL_OWNER_ID_SHIFT           (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_OWNER_ID(x)              (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_MUTEX_MASK               (0x100000U)
#define CCM_ACCESS_CTRL_MUTEX_SHIFT              (20U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_MASK   (0x1000000U)
#define CCM_ACCESS_CTRL_DOMAIN0_WHITELIST_SHIFT  (24U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_MASK   (0x2000000U)
#define CCM_ACCESS_CTRL_DOMAIN1_WHITELIST_SHIFT  (25U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_MASK   (0x4000000U)
#define CCM_ACCESS_CTRL_DOMAIN2_WHITELIST_SHIFT  (26U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_MASK   (0x8000000U)
#define CCM_ACCESS_CTRL_DOMAIN3_WHITELIST_SHIFT  (27U)
#define CCM_ACCESS_CTRL_SEMA_EN_MASK             (0x10000000U)
#define CCM_ACCESS_CTRL_SEMA_EN_SHIFT            (28U)
#define CCM_ACCESS_CTRL_LOCK_MASK                (0x80000000U)
#define CCM_ACCESS_CTRL_LOCK_SHIFT               (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL */
#define CCM_ACCESS_CTRL_COUNT                    (142U)

/*! @name ACCESS_CTRL_ROOT_SET - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_SET_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_SET_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_SET_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_SET */
#define CCM_ACCESS_CTRL_ROOT_SET_COUNT           (142U)

/*! @name ACCESS_CTRL_ROOT_CLR - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_CLR_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_CLR_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_CLR */
#define CCM_ACCESS_CTRL_ROOT_CLR_COUNT           (142U)

/*! @name ACCESS_CTRL_ROOT_TOG - Access Control Register */
/*! @{ */
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK (0xFU)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT (0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK (0xF0U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT (4U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK (0xF00U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT (8U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK (0xF000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT (12U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO(x) (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_INFO_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK   (0x30000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT  (16U)
/*! OWNER_ID
 *  0b00..domaino
 *  0b01..domain1
 *  0b10..domain2
 *  0b11..domain3
 */
#define CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_SHIFT)) & CCM_ACCESS_CTRL_ROOT_TOG_OWNER_ID_MASK)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_MASK      (0x100000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_MUTEX_SHIFT     (20U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_MASK (0x1000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN0_WHITELIST_SHIFT (24U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_MASK (0x2000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN1_WHITELIST_SHIFT (25U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_MASK (0x4000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN2_WHITELIST_SHIFT (26U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_MASK (0x8000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_DOMAIN3_WHITELIST_SHIFT (27U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_MASK    (0x10000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_SEMA_EN_SHIFT   (28U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_MASK       (0x80000000U)
#define CCM_ACCESS_CTRL_ROOT_TOG_LOCK_SHIFT      (31U)
/*! @} */

/* The count of CCM_ACCESS_CTRL_ROOT_TOG */
#define CCM_ACCESS_CTRL_ROOT_TOG_COUNT           (142U)


/*!
 * @}
 */ /* end of group CCM_Register_Masks */


/* CCM - Peripheral instance base addresses */
/** Peripheral CCM base pointer */
#define CCM_BASE_PTR                             ((CCM_MemMapPtr)0x30380000u)
/** Array initializer of CCM peripheral base pointers */
#define CCM_BASE_PTRS                            { CCM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_Register_Accessor_Macros CCM - Register accessor macros
 * @{
 */


/* CCM - Register instance definitions */
/* CCM */
#define CCM_GPR0                                 CCM_GPR0_REG(CCM_BASE_PTR)
#define CCM_GPR0_SET                             CCM_GPR0_SET_REG(CCM_BASE_PTR)
#define CCM_GPR0_CLR                             CCM_GPR0_CLR_REG(CCM_BASE_PTR)
#define CCM_GPR0_TOG                             CCM_GPR0_TOG_REG(CCM_BASE_PTR)
#define CCM_PLL_CTRL0                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL0_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,0)
#define CCM_PLL_CTRL1                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL1_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,1)
#define CCM_PLL_CTRL2                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL2_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,2)
#define CCM_PLL_CTRL3                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL3_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,3)
#define CCM_PLL_CTRL4                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL4_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,4)
#define CCM_PLL_CTRL5                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL5_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,5)
#define CCM_PLL_CTRL6                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL6_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,6)
#define CCM_PLL_CTRL7                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL7_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,7)
#define CCM_PLL_CTRL8                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL8_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,8)
#define CCM_PLL_CTRL9                            CCM_PLL_CTRL_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_SET                        CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_CLR                        CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL9_TOG                        CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,9)
#define CCM_PLL_CTRL10                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL10_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,10)
#define CCM_PLL_CTRL11                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL11_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,11)
#define CCM_PLL_CTRL12                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL12_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,12)
#define CCM_PLL_CTRL13                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL13_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,13)
#define CCM_PLL_CTRL14                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL14_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,14)
#define CCM_PLL_CTRL15                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL15_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,15)
#define CCM_PLL_CTRL16                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL16_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,16)
#define CCM_PLL_CTRL17                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL17_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,17)
#define CCM_PLL_CTRL18                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL18_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,18)
#define CCM_PLL_CTRL19                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL19_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,19)
#define CCM_PLL_CTRL20                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL20_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,20)
#define CCM_PLL_CTRL21                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL21_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,21)
#define CCM_PLL_CTRL22                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL22_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,22)
#define CCM_PLL_CTRL23                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL23_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,23)
#define CCM_PLL_CTRL24                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL24_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,24)
#define CCM_PLL_CTRL25                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL25_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,25)
#define CCM_PLL_CTRL26                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL26_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,26)
#define CCM_PLL_CTRL27                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL27_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,27)
#define CCM_PLL_CTRL28                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL28_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,28)
#define CCM_PLL_CTRL29                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL29_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,29)
#define CCM_PLL_CTRL30                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL30_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,30)
#define CCM_PLL_CTRL31                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL31_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,31)
#define CCM_PLL_CTRL32                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL32_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,32)
#define CCM_PLL_CTRL33                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL33_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,33)
#define CCM_PLL_CTRL34                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL34_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,34)
#define CCM_PLL_CTRL35                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL35_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,35)
#define CCM_PLL_CTRL36                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL36_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,36)
#define CCM_PLL_CTRL37                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL37_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,37)
#define CCM_PLL_CTRL38                           CCM_PLL_CTRL_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_SET                       CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_CLR                       CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,38)
#define CCM_PLL_CTRL38_TOG                       CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,38)
#define CCM_CCGR0                                CCM_CCGR_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,0)
#define CCM_CCGR0_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,0)
#define CCM_CCGR1                                CCM_CCGR_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,1)
#define CCM_CCGR1_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,1)
#define CCM_CCGR2                                CCM_CCGR_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,2)
#define CCM_CCGR2_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,2)
#define CCM_CCGR3                                CCM_CCGR_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,3)
#define CCM_CCGR3_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,3)
#define CCM_CCGR4                                CCM_CCGR_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,4)
#define CCM_CCGR4_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,4)
#define CCM_CCGR5                                CCM_CCGR_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,5)
#define CCM_CCGR5_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,5)
#define CCM_CCGR6                                CCM_CCGR_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,6)
#define CCM_CCGR6_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,6)
#define CCM_CCGR7                                CCM_CCGR_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,7)
#define CCM_CCGR7_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,7)
#define CCM_CCGR8                                CCM_CCGR_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,8)
#define CCM_CCGR8_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,8)
#define CCM_CCGR9                                CCM_CCGR_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_SET                            CCM_CCGR_SET_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_CLR                            CCM_CCGR_CLR_REG(CCM_BASE_PTR,9)
#define CCM_CCGR9_TOG                            CCM_CCGR_TOG_REG(CCM_BASE_PTR,9)
#define CCM_CCGR10                               CCM_CCGR_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,10)
#define CCM_CCGR10_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,10)
#define CCM_CCGR11                               CCM_CCGR_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,11)
#define CCM_CCGR11_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,11)
#define CCM_CCGR12                               CCM_CCGR_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,12)
#define CCM_CCGR12_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,12)
#define CCM_CCGR13                               CCM_CCGR_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,13)
#define CCM_CCGR13_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,13)
#define CCM_CCGR14                               CCM_CCGR_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,14)
#define CCM_CCGR14_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,14)
#define CCM_CCGR15                               CCM_CCGR_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,15)
#define CCM_CCGR15_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,15)
#define CCM_CCGR16                               CCM_CCGR_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,16)
#define CCM_CCGR16_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,16)
#define CCM_CCGR17                               CCM_CCGR_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,17)
#define CCM_CCGR17_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,17)
#define CCM_CCGR18                               CCM_CCGR_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,18)
#define CCM_CCGR18_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,18)
#define CCM_CCGR19                               CCM_CCGR_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,19)
#define CCM_CCGR19_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,19)
#define CCM_CCGR20                               CCM_CCGR_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,20)
#define CCM_CCGR20_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,20)
#define CCM_CCGR21                               CCM_CCGR_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,21)
#define CCM_CCGR21_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,21)
#define CCM_CCGR22                               CCM_CCGR_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,22)
#define CCM_CCGR22_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,22)
#define CCM_CCGR23                               CCM_CCGR_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,23)
#define CCM_CCGR23_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,23)
#define CCM_CCGR24                               CCM_CCGR_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,24)
#define CCM_CCGR24_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,24)
#define CCM_CCGR25                               CCM_CCGR_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,25)
#define CCM_CCGR25_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,25)
#define CCM_CCGR26                               CCM_CCGR_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,26)
#define CCM_CCGR26_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,26)
#define CCM_CCGR27                               CCM_CCGR_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,27)
#define CCM_CCGR27_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,27)
#define CCM_CCGR28                               CCM_CCGR_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,28)
#define CCM_CCGR28_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,28)
#define CCM_CCGR29                               CCM_CCGR_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,29)
#define CCM_CCGR29_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,29)
#define CCM_CCGR30                               CCM_CCGR_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,30)
#define CCM_CCGR30_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,30)
#define CCM_CCGR31                               CCM_CCGR_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,31)
#define CCM_CCGR31_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,31)
#define CCM_CCGR32                               CCM_CCGR_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,32)
#define CCM_CCGR32_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,32)
#define CCM_CCGR33                               CCM_CCGR_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,33)
#define CCM_CCGR33_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,33)
#define CCM_CCGR34                               CCM_CCGR_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,34)
#define CCM_CCGR34_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,34)
#define CCM_CCGR35                               CCM_CCGR_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,35)
#define CCM_CCGR35_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,35)
#define CCM_CCGR36                               CCM_CCGR_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,36)
#define CCM_CCGR36_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,36)
#define CCM_CCGR37                               CCM_CCGR_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,37)
#define CCM_CCGR37_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,37)
#define CCM_CCGR38                               CCM_CCGR_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,38)
#define CCM_CCGR38_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,38)
#define CCM_CCGR39                               CCM_CCGR_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,39)
#define CCM_CCGR39_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,39)
#define CCM_CCGR40                               CCM_CCGR_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,40)
#define CCM_CCGR40_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,40)
#define CCM_CCGR41                               CCM_CCGR_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,41)
#define CCM_CCGR41_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,41)
#define CCM_CCGR42                               CCM_CCGR_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,42)
#define CCM_CCGR42_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,42)
#define CCM_CCGR43                               CCM_CCGR_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,43)
#define CCM_CCGR43_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,43)
#define CCM_CCGR44                               CCM_CCGR_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,44)
#define CCM_CCGR44_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,44)
#define CCM_CCGR45                               CCM_CCGR_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,45)
#define CCM_CCGR45_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,45)
#define CCM_CCGR46                               CCM_CCGR_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,46)
#define CCM_CCGR46_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,46)
#define CCM_CCGR47                               CCM_CCGR_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,47)
#define CCM_CCGR47_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,47)
#define CCM_CCGR48                               CCM_CCGR_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,48)
#define CCM_CCGR48_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,48)
#define CCM_CCGR49                               CCM_CCGR_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,49)
#define CCM_CCGR49_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,49)
#define CCM_CCGR50                               CCM_CCGR_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,50)
#define CCM_CCGR50_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,50)
#define CCM_CCGR51                               CCM_CCGR_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,51)
#define CCM_CCGR51_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,51)
#define CCM_CCGR52                               CCM_CCGR_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,52)
#define CCM_CCGR52_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,52)
#define CCM_CCGR53                               CCM_CCGR_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,53)
#define CCM_CCGR53_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,53)
#define CCM_CCGR54                               CCM_CCGR_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,54)
#define CCM_CCGR54_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,54)
#define CCM_CCGR55                               CCM_CCGR_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,55)
#define CCM_CCGR55_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,55)
#define CCM_CCGR56                               CCM_CCGR_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,56)
#define CCM_CCGR56_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,56)
#define CCM_CCGR57                               CCM_CCGR_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,57)
#define CCM_CCGR57_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,57)
#define CCM_CCGR58                               CCM_CCGR_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,58)
#define CCM_CCGR58_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,58)
#define CCM_CCGR59                               CCM_CCGR_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,59)
#define CCM_CCGR59_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,59)
#define CCM_CCGR60                               CCM_CCGR_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,60)
#define CCM_CCGR60_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,60)
#define CCM_CCGR61                               CCM_CCGR_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,61)
#define CCM_CCGR61_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,61)
#define CCM_CCGR62                               CCM_CCGR_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,62)
#define CCM_CCGR62_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,62)
#define CCM_CCGR63                               CCM_CCGR_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,63)
#define CCM_CCGR63_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,63)
#define CCM_CCGR64                               CCM_CCGR_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,64)
#define CCM_CCGR64_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,64)
#define CCM_CCGR65                               CCM_CCGR_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,65)
#define CCM_CCGR65_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,65)
#define CCM_CCGR66                               CCM_CCGR_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,66)
#define CCM_CCGR66_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,66)
#define CCM_CCGR67                               CCM_CCGR_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,67)
#define CCM_CCGR67_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,67)
#define CCM_CCGR68                               CCM_CCGR_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,68)
#define CCM_CCGR68_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,68)
#define CCM_CCGR69                               CCM_CCGR_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,69)
#define CCM_CCGR69_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,69)
#define CCM_CCGR70                               CCM_CCGR_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,70)
#define CCM_CCGR70_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,70)
#define CCM_CCGR71                               CCM_CCGR_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,71)
#define CCM_CCGR71_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,71)
#define CCM_CCGR72                               CCM_CCGR_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,72)
#define CCM_CCGR72_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,72)
#define CCM_CCGR73                               CCM_CCGR_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,73)
#define CCM_CCGR73_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,73)
#define CCM_CCGR74                               CCM_CCGR_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,74)
#define CCM_CCGR74_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,74)
#define CCM_CCGR75                               CCM_CCGR_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,75)
#define CCM_CCGR75_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,75)
#define CCM_CCGR76                               CCM_CCGR_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,76)
#define CCM_CCGR76_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,76)
#define CCM_CCGR77                               CCM_CCGR_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,77)
#define CCM_CCGR77_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,77)
#define CCM_CCGR78                               CCM_CCGR_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,78)
#define CCM_CCGR78_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,78)
#define CCM_CCGR79                               CCM_CCGR_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,79)
#define CCM_CCGR79_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,79)
#define CCM_CCGR80                               CCM_CCGR_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,80)
#define CCM_CCGR80_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,80)
#define CCM_CCGR81                               CCM_CCGR_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,81)
#define CCM_CCGR81_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,81)
#define CCM_CCGR82                               CCM_CCGR_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,82)
#define CCM_CCGR82_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,82)
#define CCM_CCGR83                               CCM_CCGR_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,83)
#define CCM_CCGR83_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,83)
#define CCM_CCGR84                               CCM_CCGR_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,84)
#define CCM_CCGR84_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,84)
#define CCM_CCGR85                               CCM_CCGR_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,85)
#define CCM_CCGR85_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,85)
#define CCM_CCGR86                               CCM_CCGR_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,86)
#define CCM_CCGR86_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,86)
#define CCM_CCGR87                               CCM_CCGR_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,87)
#define CCM_CCGR87_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,87)
#define CCM_CCGR88                               CCM_CCGR_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,88)
#define CCM_CCGR88_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,88)
#define CCM_CCGR89                               CCM_CCGR_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,89)
#define CCM_CCGR89_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,89)
#define CCM_CCGR90                               CCM_CCGR_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,90)
#define CCM_CCGR90_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,90)
#define CCM_CCGR91                               CCM_CCGR_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,91)
#define CCM_CCGR91_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,91)
#define CCM_CCGR92                               CCM_CCGR_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,92)
#define CCM_CCGR92_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,92)
#define CCM_CCGR93                               CCM_CCGR_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,93)
#define CCM_CCGR93_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,93)
#define CCM_CCGR94                               CCM_CCGR_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,94)
#define CCM_CCGR94_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,94)
#define CCM_CCGR95                               CCM_CCGR_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,95)
#define CCM_CCGR95_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,95)
#define CCM_CCGR96                               CCM_CCGR_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,96)
#define CCM_CCGR96_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,96)
#define CCM_CCGR97                               CCM_CCGR_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,97)
#define CCM_CCGR97_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,97)
#define CCM_CCGR98                               CCM_CCGR_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,98)
#define CCM_CCGR98_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,98)
#define CCM_CCGR99                               CCM_CCGR_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_SET                           CCM_CCGR_SET_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_CLR                           CCM_CCGR_CLR_REG(CCM_BASE_PTR,99)
#define CCM_CCGR99_TOG                           CCM_CCGR_TOG_REG(CCM_BASE_PTR,99)
#define CCM_CCGR100                              CCM_CCGR_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,100)
#define CCM_CCGR100_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,100)
#define CCM_CCGR101                              CCM_CCGR_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,101)
#define CCM_CCGR101_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,101)
#define CCM_CCGR102                              CCM_CCGR_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,102)
#define CCM_CCGR102_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,102)
#define CCM_CCGR103                              CCM_CCGR_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,103)
#define CCM_CCGR103_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,103)
#define CCM_CCGR104                              CCM_CCGR_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,104)
#define CCM_CCGR104_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,104)
#define CCM_CCGR105                              CCM_CCGR_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,105)
#define CCM_CCGR105_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,105)
#define CCM_CCGR106                              CCM_CCGR_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,106)
#define CCM_CCGR106_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,106)
#define CCM_CCGR107                              CCM_CCGR_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,107)
#define CCM_CCGR107_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,107)
#define CCM_CCGR108                              CCM_CCGR_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,108)
#define CCM_CCGR108_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,108)
#define CCM_CCGR109                              CCM_CCGR_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,109)
#define CCM_CCGR109_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,109)
#define CCM_CCGR110                              CCM_CCGR_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,110)
#define CCM_CCGR110_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,110)
#define CCM_CCGR111                              CCM_CCGR_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,111)
#define CCM_CCGR111_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,111)
#define CCM_CCGR112                              CCM_CCGR_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,112)
#define CCM_CCGR112_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,112)
#define CCM_CCGR113                              CCM_CCGR_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,113)
#define CCM_CCGR113_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,113)
#define CCM_CCGR114                              CCM_CCGR_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,114)
#define CCM_CCGR114_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,114)
#define CCM_CCGR115                              CCM_CCGR_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,115)
#define CCM_CCGR115_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,115)
#define CCM_CCGR116                              CCM_CCGR_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,116)
#define CCM_CCGR116_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,116)
#define CCM_CCGR117                              CCM_CCGR_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,117)
#define CCM_CCGR117_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,117)
#define CCM_CCGR118                              CCM_CCGR_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,118)
#define CCM_CCGR118_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,118)
#define CCM_CCGR119                              CCM_CCGR_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,119)
#define CCM_CCGR119_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,119)
#define CCM_CCGR120                              CCM_CCGR_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,120)
#define CCM_CCGR120_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,120)
#define CCM_CCGR121                              CCM_CCGR_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,121)
#define CCM_CCGR121_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,121)
#define CCM_CCGR122                              CCM_CCGR_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,122)
#define CCM_CCGR122_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,122)
#define CCM_CCGR123                              CCM_CCGR_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,123)
#define CCM_CCGR123_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,123)
#define CCM_CCGR124                              CCM_CCGR_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,124)
#define CCM_CCGR124_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,124)
#define CCM_CCGR125                              CCM_CCGR_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,125)
#define CCM_CCGR125_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,125)
#define CCM_CCGR126                              CCM_CCGR_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,126)
#define CCM_CCGR126_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,126)
#define CCM_CCGR127                              CCM_CCGR_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,127)
#define CCM_CCGR127_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,127)
#define CCM_CCGR128                              CCM_CCGR_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,128)
#define CCM_CCGR128_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,128)
#define CCM_CCGR129                              CCM_CCGR_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,129)
#define CCM_CCGR129_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,129)
#define CCM_CCGR130                              CCM_CCGR_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,130)
#define CCM_CCGR130_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,130)
#define CCM_CCGR131                              CCM_CCGR_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,131)
#define CCM_CCGR131_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,131)
#define CCM_CCGR132                              CCM_CCGR_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,132)
#define CCM_CCGR132_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,132)
#define CCM_CCGR133                              CCM_CCGR_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,133)
#define CCM_CCGR133_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,133)
#define CCM_CCGR134                              CCM_CCGR_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,134)
#define CCM_CCGR134_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,134)
#define CCM_CCGR135                              CCM_CCGR_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,135)
#define CCM_CCGR135_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,135)
#define CCM_CCGR136                              CCM_CCGR_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,136)
#define CCM_CCGR136_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,136)
#define CCM_CCGR137                              CCM_CCGR_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,137)
#define CCM_CCGR137_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,137)
#define CCM_CCGR138                              CCM_CCGR_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,138)
#define CCM_CCGR138_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,138)
#define CCM_CCGR139                              CCM_CCGR_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,139)
#define CCM_CCGR139_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,139)
#define CCM_CCGR140                              CCM_CCGR_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,140)
#define CCM_CCGR140_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,140)
#define CCM_CCGR141                              CCM_CCGR_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,141)
#define CCM_CCGR141_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,141)
#define CCM_CCGR142                              CCM_CCGR_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,142)
#define CCM_CCGR142_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,142)
#define CCM_CCGR143                              CCM_CCGR_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,143)
#define CCM_CCGR143_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,143)
#define CCM_CCGR144                              CCM_CCGR_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,144)
#define CCM_CCGR144_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,144)
#define CCM_CCGR145                              CCM_CCGR_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,145)
#define CCM_CCGR145_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,145)
#define CCM_CCGR146                              CCM_CCGR_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,146)
#define CCM_CCGR146_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,146)
#define CCM_CCGR147                              CCM_CCGR_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,147)
#define CCM_CCGR147_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,147)
#define CCM_CCGR148                              CCM_CCGR_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,148)
#define CCM_CCGR148_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,148)
#define CCM_CCGR149                              CCM_CCGR_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,149)
#define CCM_CCGR149_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,149)
#define CCM_CCGR150                              CCM_CCGR_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,150)
#define CCM_CCGR150_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,150)
#define CCM_CCGR151                              CCM_CCGR_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,151)
#define CCM_CCGR151_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,151)
#define CCM_CCGR152                              CCM_CCGR_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,152)
#define CCM_CCGR152_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,152)
#define CCM_CCGR153                              CCM_CCGR_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,153)
#define CCM_CCGR153_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,153)
#define CCM_CCGR154                              CCM_CCGR_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,154)
#define CCM_CCGR154_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,154)
#define CCM_CCGR155                              CCM_CCGR_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,155)
#define CCM_CCGR155_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,155)
#define CCM_CCGR156                              CCM_CCGR_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,156)
#define CCM_CCGR156_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,156)
#define CCM_CCGR157                              CCM_CCGR_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,157)
#define CCM_CCGR157_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,157)
#define CCM_CCGR158                              CCM_CCGR_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,158)
#define CCM_CCGR158_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,158)
#define CCM_CCGR159                              CCM_CCGR_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,159)
#define CCM_CCGR159_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,159)
#define CCM_CCGR160                              CCM_CCGR_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,160)
#define CCM_CCGR160_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,160)
#define CCM_CCGR161                              CCM_CCGR_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,161)
#define CCM_CCGR161_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,161)
#define CCM_CCGR162                              CCM_CCGR_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,162)
#define CCM_CCGR162_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,162)
#define CCM_CCGR163                              CCM_CCGR_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,163)
#define CCM_CCGR163_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,163)
#define CCM_CCGR164                              CCM_CCGR_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,164)
#define CCM_CCGR164_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,164)
#define CCM_CCGR165                              CCM_CCGR_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,165)
#define CCM_CCGR165_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,165)
#define CCM_CCGR166                              CCM_CCGR_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,166)
#define CCM_CCGR166_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,166)
#define CCM_CCGR167                              CCM_CCGR_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,167)
#define CCM_CCGR167_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,167)
#define CCM_CCGR168                              CCM_CCGR_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,168)
#define CCM_CCGR168_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,168)
#define CCM_CCGR169                              CCM_CCGR_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,169)
#define CCM_CCGR169_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,169)
#define CCM_CCGR170                              CCM_CCGR_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,170)
#define CCM_CCGR170_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,170)
#define CCM_CCGR171                              CCM_CCGR_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,171)
#define CCM_CCGR171_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,171)
#define CCM_CCGR172                              CCM_CCGR_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,172)
#define CCM_CCGR172_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,172)
#define CCM_CCGR173                              CCM_CCGR_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,173)
#define CCM_CCGR173_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,173)
#define CCM_CCGR174                              CCM_CCGR_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,174)
#define CCM_CCGR174_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,174)
#define CCM_CCGR175                              CCM_CCGR_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,175)
#define CCM_CCGR175_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,175)
#define CCM_CCGR176                              CCM_CCGR_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,176)
#define CCM_CCGR176_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,176)
#define CCM_CCGR177                              CCM_CCGR_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,177)
#define CCM_CCGR177_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,177)
#define CCM_CCGR178                              CCM_CCGR_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,178)
#define CCM_CCGR178_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,178)
#define CCM_CCGR179                              CCM_CCGR_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,179)
#define CCM_CCGR179_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,179)
#define CCM_CCGR180                              CCM_CCGR_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,180)
#define CCM_CCGR180_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,180)
#define CCM_CCGR181                              CCM_CCGR_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,181)
#define CCM_CCGR181_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,181)
#define CCM_CCGR182                              CCM_CCGR_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,182)
#define CCM_CCGR182_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,182)
#define CCM_CCGR183                              CCM_CCGR_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,183)
#define CCM_CCGR183_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,183)
#define CCM_CCGR184                              CCM_CCGR_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,184)
#define CCM_CCGR184_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,184)
#define CCM_CCGR185                              CCM_CCGR_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,185)
#define CCM_CCGR185_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,185)
#define CCM_CCGR186                              CCM_CCGR_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,186)
#define CCM_CCGR186_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,186)
#define CCM_CCGR187                              CCM_CCGR_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,187)
#define CCM_CCGR187_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,187)
#define CCM_CCGR188                              CCM_CCGR_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,188)
#define CCM_CCGR188_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,188)
#define CCM_CCGR189                              CCM_CCGR_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,189)
#define CCM_CCGR189_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,189)
#define CCM_CCGR190                              CCM_CCGR_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,190)
#define CCM_CCGR190_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,190)
#define CCM_CCGR191                              CCM_CCGR_REG(CCM_BASE_PTR,191)
#define CCM_CCGR191_SET                          CCM_CCGR_SET_REG(CCM_BASE_PTR,191)
#define CCM_CCGR191_CLR                          CCM_CCGR_CLR_REG(CCM_BASE_PTR,191)
#define CCM_CCGR191_TOG                          CCM_CCGR_TOG_REG(CCM_BASE_PTR,191)
#define CCM_TARGET_ROOT0                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT0_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_MISC0                                CCM_MISC_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_MISC_ROOT0_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_POST0                                CCM_POST_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_POST_ROOT0_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_PRE0                                 CCM_PRE_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_PRE_ROOT0_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL0                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,0)
#define CCM_ACCESS_CTRL_ROOT0_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,0)
#define CCM_TARGET_ROOT1                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT1_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_MISC1                                CCM_MISC_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_MISC_ROOT1_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_POST1                                CCM_POST_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_POST_ROOT1_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_PRE1                                 CCM_PRE_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_PRE_ROOT1_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL1                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,1)
#define CCM_ACCESS_CTRL_ROOT1_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,1)
#define CCM_TARGET_ROOT2                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT2_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_MISC2                                CCM_MISC_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_MISC_ROOT2_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_POST2                                CCM_POST_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_POST_ROOT2_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_PRE2                                 CCM_PRE_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_PRE_ROOT2_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL2                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,2)
#define CCM_ACCESS_CTRL_ROOT2_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,2)
#define CCM_TARGET_ROOT3                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT3_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_MISC3                                CCM_MISC_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_MISC_ROOT3_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_POST3                                CCM_POST_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_POST_ROOT3_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_PRE3                                 CCM_PRE_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_PRE_ROOT3_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL3                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,3)
#define CCM_ACCESS_CTRL_ROOT3_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,3)
#define CCM_TARGET_ROOT4                         CCM_TARGET_ROOT_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_SET                     CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_CLR                     CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT4_TOG                     CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_MISC4                                CCM_MISC_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_SET                       CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_CLR                       CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_MISC_ROOT4_TOG                       CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_POST4                                CCM_POST_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_SET                       CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_CLR                       CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_POST_ROOT4_TOG                       CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_PRE4                                 CCM_PRE_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_SET                        CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_CLR                        CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_PRE_ROOT4_TOG                        CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL4                         CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_SET                CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_CLR                CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,4)
#define CCM_ACCESS_CTRL_ROOT4_TOG                CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,4)
#define CCM_TARGET_ROOT16                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT16_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_MISC16                               CCM_MISC_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_MISC_ROOT16_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_POST16                               CCM_POST_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_POST_ROOT16_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_PRE16                                CCM_PRE_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_PRE_ROOT16_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL16                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,16)
#define CCM_ACCESS_CTRL_ROOT16_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,16)
#define CCM_TARGET_ROOT17                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT17_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_MISC17                               CCM_MISC_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_MISC_ROOT17_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_POST17                               CCM_POST_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_POST_ROOT17_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_PRE17                                CCM_PRE_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_PRE_ROOT17_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL17                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,17)
#define CCM_ACCESS_CTRL_ROOT17_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,17)
#define CCM_TARGET_ROOT18                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT18_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_MISC18                               CCM_MISC_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_MISC_ROOT18_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_POST18                               CCM_POST_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_POST_ROOT18_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_PRE18                                CCM_PRE_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_PRE_ROOT18_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL18                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,18)
#define CCM_ACCESS_CTRL_ROOT18_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,18)
#define CCM_TARGET_ROOT19                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT19_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_MISC19                               CCM_MISC_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_MISC_ROOT19_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_POST19                               CCM_POST_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_POST_ROOT19_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_PRE19                                CCM_PRE_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_PRE_ROOT19_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL19                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,19)
#define CCM_ACCESS_CTRL_ROOT19_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,19)
#define CCM_TARGET_ROOT20                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT20_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_MISC20                               CCM_MISC_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_MISC_ROOT20_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_POST20                               CCM_POST_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_POST_ROOT20_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_PRE20                                CCM_PRE_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_PRE_ROOT20_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL20                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,20)
#define CCM_ACCESS_CTRL_ROOT20_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,20)
#define CCM_TARGET_ROOT21                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT21_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_MISC21                               CCM_MISC_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_MISC_ROOT21_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_POST21                               CCM_POST_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_POST_ROOT21_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_PRE21                                CCM_PRE_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_PRE_ROOT21_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL21                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,21)
#define CCM_ACCESS_CTRL_ROOT21_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,21)
#define CCM_TARGET_ROOT22                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT22_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_MISC22                               CCM_MISC_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_MISC_ROOT22_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_POST22                               CCM_POST_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_POST_ROOT22_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_PRE22                                CCM_PRE_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_PRE_ROOT22_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL22                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,22)
#define CCM_ACCESS_CTRL_ROOT22_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,22)
#define CCM_TARGET_ROOT23                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT23_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_MISC23                               CCM_MISC_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_MISC_ROOT23_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_POST23                               CCM_POST_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_POST_ROOT23_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_PRE23                                CCM_PRE_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_PRE_ROOT23_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL23                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,23)
#define CCM_ACCESS_CTRL_ROOT23_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,23)
#define CCM_TARGET_ROOT24                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT24_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_MISC24                               CCM_MISC_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_MISC_ROOT24_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_POST24                               CCM_POST_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_POST_ROOT24_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_PRE24                                CCM_PRE_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_PRE_ROOT24_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL24                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,24)
#define CCM_ACCESS_CTRL_ROOT24_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,24)
#define CCM_TARGET_ROOT25                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT25_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_MISC25                               CCM_MISC_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_MISC_ROOT25_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_POST25                               CCM_POST_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_POST_ROOT25_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_PRE25                                CCM_PRE_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_PRE_ROOT25_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL25                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,25)
#define CCM_ACCESS_CTRL_ROOT25_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,25)
#define CCM_TARGET_ROOT26                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT26_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_MISC26                               CCM_MISC_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_MISC_ROOT26_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_POST26                               CCM_POST_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_POST_ROOT26_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_PRE26                                CCM_PRE_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_PRE_ROOT26_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL26                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,26)
#define CCM_ACCESS_CTRL_ROOT26_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,26)
#define CCM_TARGET_ROOT27                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT27_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_MISC27                               CCM_MISC_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_MISC_ROOT27_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_POST27                               CCM_POST_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_POST_ROOT27_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_PRE27                                CCM_PRE_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_PRE_ROOT27_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL27                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,27)
#define CCM_ACCESS_CTRL_ROOT27_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,27)
#define CCM_TARGET_ROOT32                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT32_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_MISC32                               CCM_MISC_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_MISC_ROOT32_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_POST32                               CCM_POST_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_POST_ROOT32_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_PRE32                                CCM_PRE_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_PRE_ROOT32_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL32                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,32)
#define CCM_ACCESS_CTRL_ROOT32_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,32)
#define CCM_TARGET_ROOT33                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT33_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_MISC33                               CCM_MISC_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_MISC_ROOT33_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_POST33                               CCM_POST_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_POST_ROOT33_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_PRE33                                CCM_PRE_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_PRE_ROOT33_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL33                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,33)
#define CCM_ACCESS_CTRL_ROOT33_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,33)
#define CCM_TARGET_ROOT34                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT34_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_MISC34                               CCM_MISC_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_MISC_ROOT34_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_POST34                               CCM_POST_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_POST_ROOT34_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_PRE34                                CCM_PRE_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_PRE_ROOT34_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL34                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,34)
#define CCM_ACCESS_CTRL_ROOT34_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,34)
#define CCM_TARGET_ROOT35                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT35_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_MISC35                               CCM_MISC_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_MISC_ROOT35_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_POST35                               CCM_POST_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_POST_ROOT35_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_PRE35                                CCM_PRE_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_PRE_ROOT35_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL35                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,35)
#define CCM_ACCESS_CTRL_ROOT35_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,35)
#define CCM_TARGET_ROOT36                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT36_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_MISC36                               CCM_MISC_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_MISC_ROOT36_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_POST36                               CCM_POST_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_POST_ROOT36_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_PRE36                                CCM_PRE_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_PRE_ROOT36_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL36                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,36)
#define CCM_ACCESS_CTRL_ROOT36_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,36)
#define CCM_TARGET_ROOT37                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT37_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_MISC37                               CCM_MISC_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_MISC_ROOT37_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_POST37                               CCM_POST_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_POST_ROOT37_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_PRE37                                CCM_PRE_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_PRE_ROOT37_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL37                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,37)
#define CCM_ACCESS_CTRL_ROOT37_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,37)
#define CCM_TARGET_ROOT48                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT48_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_MISC48                               CCM_MISC_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_MISC_ROOT48_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_POST48                               CCM_POST_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_POST_ROOT48_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_PRE48                                CCM_PRE_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_PRE_ROOT48_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL48                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,48)
#define CCM_ACCESS_CTRL_ROOT48_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,48)
#define CCM_TARGET_ROOT49                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT49_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_MISC49                               CCM_MISC_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_MISC_ROOT49_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_POST49                               CCM_POST_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_POST_ROOT49_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_PRE49                                CCM_PRE_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_PRE_ROOT49_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL49                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,49)
#define CCM_ACCESS_CTRL_ROOT49_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,49)
#define CCM_TARGET_ROOT64                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT64_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_MISC64                               CCM_MISC_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_MISC_ROOT64_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_POST64                               CCM_POST_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_POST_ROOT64_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_PRE64                                CCM_PRE_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_PRE_ROOT64_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL64                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,64)
#define CCM_ACCESS_CTRL_ROOT64_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,64)
#define CCM_TARGET_ROOT65                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT65_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_MISC65                               CCM_MISC_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_MISC_ROOT65_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_POST65                               CCM_POST_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_POST_ROOT65_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_PRE65                                CCM_PRE_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_PRE_ROOT65_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL65                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,65)
#define CCM_ACCESS_CTRL_ROOT65_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,65)
#define CCM_TARGET_ROOT66                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT66_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_MISC66                               CCM_MISC_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_MISC_ROOT66_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_POST66                               CCM_POST_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_POST_ROOT66_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_PRE66                                CCM_PRE_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_PRE_ROOT66_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL66                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,66)
#define CCM_ACCESS_CTRL_ROOT66_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,66)
#define CCM_TARGET_ROOT67                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT67_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_MISC67                               CCM_MISC_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_MISC_ROOT67_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_POST67                               CCM_POST_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_POST_ROOT67_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_PRE67                                CCM_PRE_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_PRE_ROOT67_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL67                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,67)
#define CCM_ACCESS_CTRL_ROOT67_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,67)
#define CCM_TARGET_ROOT68                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT68_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_MISC68                               CCM_MISC_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_MISC_ROOT68_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_POST68                               CCM_POST_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_POST_ROOT68_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_PRE68                                CCM_PRE_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_PRE_ROOT68_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL68                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,68)
#define CCM_ACCESS_CTRL_ROOT68_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,68)
#define CCM_TARGET_ROOT69                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT69_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_MISC69                               CCM_MISC_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_MISC_ROOT69_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_POST69                               CCM_POST_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_POST_ROOT69_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_PRE69                                CCM_PRE_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_PRE_ROOT69_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL69                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,69)
#define CCM_ACCESS_CTRL_ROOT69_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,69)
#define CCM_TARGET_ROOT70                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT70_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_MISC70                               CCM_MISC_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_MISC_ROOT70_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_POST70                               CCM_POST_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_POST_ROOT70_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_PRE70                                CCM_PRE_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_PRE_ROOT70_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL70                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,70)
#define CCM_ACCESS_CTRL_ROOT70_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,70)
#define CCM_TARGET_ROOT71                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT71_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_MISC71                               CCM_MISC_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_MISC_ROOT71_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_POST71                               CCM_POST_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_POST_ROOT71_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_PRE71                                CCM_PRE_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_PRE_ROOT71_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL71                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,71)
#define CCM_ACCESS_CTRL_ROOT71_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,71)
#define CCM_TARGET_ROOT72                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT72_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_MISC72                               CCM_MISC_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_MISC_ROOT72_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_POST72                               CCM_POST_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_POST_ROOT72_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_PRE72                                CCM_PRE_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_PRE_ROOT72_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL72                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,72)
#define CCM_ACCESS_CTRL_ROOT72_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,72)
#define CCM_TARGET_ROOT73                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT73_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_MISC73                               CCM_MISC_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_MISC_ROOT73_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_POST73                               CCM_POST_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_POST_ROOT73_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_PRE73                                CCM_PRE_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_PRE_ROOT73_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL73                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,73)
#define CCM_ACCESS_CTRL_ROOT73_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,73)
#define CCM_TARGET_ROOT74                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT74_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_MISC74                               CCM_MISC_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_MISC_ROOT74_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_POST74                               CCM_POST_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_POST_ROOT74_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_PRE74                                CCM_PRE_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_PRE_ROOT74_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL74                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,74)
#define CCM_ACCESS_CTRL_ROOT74_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,74)
#define CCM_TARGET_ROOT75                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT75_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_MISC75                               CCM_MISC_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_MISC_ROOT75_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_POST75                               CCM_POST_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_POST_ROOT75_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_PRE75                                CCM_PRE_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_PRE_ROOT75_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL75                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,75)
#define CCM_ACCESS_CTRL_ROOT75_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,75)
#define CCM_TARGET_ROOT76                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT76_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_MISC76                               CCM_MISC_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_MISC_ROOT76_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_POST76                               CCM_POST_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_POST_ROOT76_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_PRE76                                CCM_PRE_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_PRE_ROOT76_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL76                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,76)
#define CCM_ACCESS_CTRL_ROOT76_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,76)
#define CCM_TARGET_ROOT77                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT77_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_MISC77                               CCM_MISC_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_MISC_ROOT77_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_POST77                               CCM_POST_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_POST_ROOT77_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_PRE77                                CCM_PRE_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_PRE_ROOT77_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL77                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,77)
#define CCM_ACCESS_CTRL_ROOT77_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,77)
#define CCM_TARGET_ROOT78                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT78_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_MISC78                               CCM_MISC_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_MISC_ROOT78_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_POST78                               CCM_POST_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_POST_ROOT78_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_PRE78                                CCM_PRE_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_PRE_ROOT78_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL78                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,78)
#define CCM_ACCESS_CTRL_ROOT78_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,78)
#define CCM_TARGET_ROOT79                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT79_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_MISC79                               CCM_MISC_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_MISC_ROOT79_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_POST79                               CCM_POST_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_POST_ROOT79_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_PRE79                                CCM_PRE_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_PRE_ROOT79_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL79                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,79)
#define CCM_ACCESS_CTRL_ROOT79_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,79)
#define CCM_TARGET_ROOT80                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT80_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_MISC80                               CCM_MISC_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_MISC_ROOT80_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_POST80                               CCM_POST_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_POST_ROOT80_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_PRE80                                CCM_PRE_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_PRE_ROOT80_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL80                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,80)
#define CCM_ACCESS_CTRL_ROOT80_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,80)
#define CCM_TARGET_ROOT81                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT81_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_MISC81                               CCM_MISC_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_MISC_ROOT81_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_POST81                               CCM_POST_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_POST_ROOT81_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_PRE81                                CCM_PRE_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_PRE_ROOT81_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL81                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,81)
#define CCM_ACCESS_CTRL_ROOT81_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,81)
#define CCM_TARGET_ROOT82                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT82_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_MISC82                               CCM_MISC_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_MISC_ROOT82_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_POST82                               CCM_POST_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_POST_ROOT82_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_PRE82                                CCM_PRE_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_PRE_ROOT82_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL82                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,82)
#define CCM_ACCESS_CTRL_ROOT82_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,82)
#define CCM_TARGET_ROOT83                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT83_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_MISC83                               CCM_MISC_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_MISC_ROOT83_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_POST83                               CCM_POST_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_POST_ROOT83_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_PRE83                                CCM_PRE_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_PRE_ROOT83_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL83                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,83)
#define CCM_ACCESS_CTRL_ROOT83_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,83)
#define CCM_TARGET_ROOT84                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT84_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_MISC84                               CCM_MISC_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_MISC_ROOT84_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_POST84                               CCM_POST_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_POST_ROOT84_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_PRE84                                CCM_PRE_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_PRE_ROOT84_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL84                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,84)
#define CCM_ACCESS_CTRL_ROOT84_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,84)
#define CCM_TARGET_ROOT85                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT85_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_MISC85                               CCM_MISC_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_MISC_ROOT85_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_POST85                               CCM_POST_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_POST_ROOT85_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_PRE85                                CCM_PRE_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_PRE_ROOT85_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL85                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,85)
#define CCM_ACCESS_CTRL_ROOT85_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,85)
#define CCM_TARGET_ROOT86                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT86_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_MISC86                               CCM_MISC_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_MISC_ROOT86_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_POST86                               CCM_POST_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_POST_ROOT86_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_PRE86                                CCM_PRE_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_PRE_ROOT86_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL86                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,86)
#define CCM_ACCESS_CTRL_ROOT86_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,86)
#define CCM_TARGET_ROOT87                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT87_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_MISC87                               CCM_MISC_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_MISC_ROOT87_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_POST87                               CCM_POST_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_POST_ROOT87_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_PRE87                                CCM_PRE_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_PRE_ROOT87_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL87                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,87)
#define CCM_ACCESS_CTRL_ROOT87_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,87)
#define CCM_TARGET_ROOT88                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT88_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_MISC88                               CCM_MISC_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_MISC_ROOT88_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_POST88                               CCM_POST_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_POST_ROOT88_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_PRE88                                CCM_PRE_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_PRE_ROOT88_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL88                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,88)
#define CCM_ACCESS_CTRL_ROOT88_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,88)
#define CCM_TARGET_ROOT89                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT89_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_MISC89                               CCM_MISC_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_MISC_ROOT89_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_POST89                               CCM_POST_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_POST_ROOT89_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_PRE89                                CCM_PRE_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_PRE_ROOT89_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL89                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,89)
#define CCM_ACCESS_CTRL_ROOT89_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,89)
#define CCM_TARGET_ROOT90                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT90_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_MISC90                               CCM_MISC_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_MISC_ROOT90_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_POST90                               CCM_POST_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_POST_ROOT90_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_PRE90                                CCM_PRE_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_PRE_ROOT90_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL90                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,90)
#define CCM_ACCESS_CTRL_ROOT90_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,90)
#define CCM_TARGET_ROOT91                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT91_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_MISC91                               CCM_MISC_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_MISC_ROOT91_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_POST91                               CCM_POST_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_POST_ROOT91_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_PRE91                                CCM_PRE_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_PRE_ROOT91_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL91                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,91)
#define CCM_ACCESS_CTRL_ROOT91_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,91)
#define CCM_TARGET_ROOT92                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT92_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_MISC92                               CCM_MISC_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_MISC_ROOT92_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_POST92                               CCM_POST_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_POST_ROOT92_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_PRE92                                CCM_PRE_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_PRE_ROOT92_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL92                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,92)
#define CCM_ACCESS_CTRL_ROOT92_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,92)
#define CCM_TARGET_ROOT93                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT93_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_MISC93                               CCM_MISC_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_MISC_ROOT93_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_POST93                               CCM_POST_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_POST_ROOT93_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_PRE93                                CCM_PRE_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_PRE_ROOT93_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL93                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,93)
#define CCM_ACCESS_CTRL_ROOT93_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,93)
#define CCM_TARGET_ROOT94                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT94_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_MISC94                               CCM_MISC_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_MISC_ROOT94_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_POST94                               CCM_POST_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_POST_ROOT94_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_PRE94                                CCM_PRE_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_PRE_ROOT94_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL94                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,94)
#define CCM_ACCESS_CTRL_ROOT94_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,94)
#define CCM_TARGET_ROOT95                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT95_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_MISC95                               CCM_MISC_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_MISC_ROOT95_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_POST95                               CCM_POST_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_POST_ROOT95_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_PRE95                                CCM_PRE_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_PRE_ROOT95_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL95                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,95)
#define CCM_ACCESS_CTRL_ROOT95_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,95)
#define CCM_TARGET_ROOT96                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT96_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_MISC96                               CCM_MISC_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_MISC_ROOT96_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_POST96                               CCM_POST_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_POST_ROOT96_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_PRE96                                CCM_PRE_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_PRE_ROOT96_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL96                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,96)
#define CCM_ACCESS_CTRL_ROOT96_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,96)
#define CCM_TARGET_ROOT97                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT97_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_MISC97                               CCM_MISC_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_MISC_ROOT97_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_POST97                               CCM_POST_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_POST_ROOT97_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_PRE97                                CCM_PRE_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_PRE_ROOT97_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL97                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,97)
#define CCM_ACCESS_CTRL_ROOT97_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,97)
#define CCM_TARGET_ROOT98                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT98_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_MISC98                               CCM_MISC_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_MISC_ROOT98_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_POST98                               CCM_POST_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_POST_ROOT98_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_PRE98                                CCM_PRE_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_PRE_ROOT98_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL98                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,98)
#define CCM_ACCESS_CTRL_ROOT98_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,98)
#define CCM_TARGET_ROOT99                        CCM_TARGET_ROOT_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_SET                    CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_CLR                    CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT99_TOG                    CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_MISC99                               CCM_MISC_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_SET                      CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_CLR                      CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_MISC_ROOT99_TOG                      CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_POST99                               CCM_POST_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_SET                      CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_CLR                      CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_POST_ROOT99_TOG                      CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_PRE99                                CCM_PRE_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_SET                       CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_CLR                       CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_PRE_ROOT99_TOG                       CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL99                        CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_SET               CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_CLR               CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,99)
#define CCM_ACCESS_CTRL_ROOT99_TOG               CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,99)
#define CCM_TARGET_ROOT100                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT100_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_MISC100                              CCM_MISC_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_MISC_ROOT100_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_POST100                              CCM_POST_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_POST_ROOT100_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_PRE100                               CCM_PRE_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_PRE_ROOT100_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL100                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,100)
#define CCM_ACCESS_CTRL_ROOT100_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,100)
#define CCM_TARGET_ROOT101                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT101_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_MISC101                              CCM_MISC_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_MISC_ROOT101_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_POST101                              CCM_POST_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_POST_ROOT101_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_PRE101                               CCM_PRE_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_PRE_ROOT101_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL101                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,101)
#define CCM_ACCESS_CTRL_ROOT101_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,101)
#define CCM_TARGET_ROOT102                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT102_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_MISC102                              CCM_MISC_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_MISC_ROOT102_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_POST102                              CCM_POST_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_POST_ROOT102_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_PRE102                               CCM_PRE_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_PRE_ROOT102_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL102                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,102)
#define CCM_ACCESS_CTRL_ROOT102_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,102)
#define CCM_TARGET_ROOT103                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT103_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_MISC103                              CCM_MISC_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_MISC_ROOT103_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_POST103                              CCM_POST_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_POST_ROOT103_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_PRE103                               CCM_PRE_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_PRE_ROOT103_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL103                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,103)
#define CCM_ACCESS_CTRL_ROOT103_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,103)
#define CCM_TARGET_ROOT104                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT104_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_MISC104                              CCM_MISC_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_MISC_ROOT104_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_POST104                              CCM_POST_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_POST_ROOT104_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_PRE104                               CCM_PRE_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_PRE_ROOT104_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL104                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,104)
#define CCM_ACCESS_CTRL_ROOT104_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,104)
#define CCM_TARGET_ROOT105                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT105_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_MISC105                              CCM_MISC_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_MISC_ROOT105_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_POST105                              CCM_POST_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_POST_ROOT105_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_PRE105                               CCM_PRE_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_PRE_ROOT105_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL105                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,105)
#define CCM_ACCESS_CTRL_ROOT105_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,105)
#define CCM_TARGET_ROOT106                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT106_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_MISC106                              CCM_MISC_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_MISC_ROOT106_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_POST106                              CCM_POST_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_POST_ROOT106_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_PRE106                               CCM_PRE_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_PRE_ROOT106_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL106                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,106)
#define CCM_ACCESS_CTRL_ROOT106_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,106)
#define CCM_TARGET_ROOT107                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT107_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_MISC107                              CCM_MISC_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_MISC_ROOT107_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_POST107                              CCM_POST_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_POST_ROOT107_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_PRE107                               CCM_PRE_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_PRE_ROOT107_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL107                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,107)
#define CCM_ACCESS_CTRL_ROOT107_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,107)
#define CCM_TARGET_ROOT108                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT108_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_MISC108                              CCM_MISC_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_MISC_ROOT108_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_POST108                              CCM_POST_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_POST_ROOT108_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_PRE108                               CCM_PRE_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_PRE_ROOT108_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL108                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,108)
#define CCM_ACCESS_CTRL_ROOT108_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,108)
#define CCM_TARGET_ROOT109                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT109_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_MISC109                              CCM_MISC_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_MISC_ROOT109_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_POST109                              CCM_POST_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_POST_ROOT109_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_PRE109                               CCM_PRE_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_PRE_ROOT109_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL109                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,109)
#define CCM_ACCESS_CTRL_ROOT109_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,109)
#define CCM_TARGET_ROOT110                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT110_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_MISC110                              CCM_MISC_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_MISC_ROOT110_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_POST110                              CCM_POST_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_POST_ROOT110_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_PRE110                               CCM_PRE_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_PRE_ROOT110_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL110                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,110)
#define CCM_ACCESS_CTRL_ROOT110_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,110)
#define CCM_TARGET_ROOT111                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT111_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_MISC111                              CCM_MISC_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_MISC_ROOT111_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_POST111                              CCM_POST_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_POST_ROOT111_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_PRE111                               CCM_PRE_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_PRE_ROOT111_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL111                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,111)
#define CCM_ACCESS_CTRL_ROOT111_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,111)
#define CCM_TARGET_ROOT112                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT112_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_MISC112                              CCM_MISC_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_MISC_ROOT112_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_POST112                              CCM_POST_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_POST_ROOT112_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_PRE112                               CCM_PRE_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_PRE_ROOT112_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL112                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,112)
#define CCM_ACCESS_CTRL_ROOT112_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,112)
#define CCM_TARGET_ROOT113                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT113_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_MISC113                              CCM_MISC_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_MISC_ROOT113_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_POST113                              CCM_POST_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_POST_ROOT113_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_PRE113                               CCM_PRE_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_PRE_ROOT113_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL113                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,113)
#define CCM_ACCESS_CTRL_ROOT113_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,113)
#define CCM_TARGET_ROOT114                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT114_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_MISC114                              CCM_MISC_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_MISC_ROOT114_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_POST114                              CCM_POST_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_POST_ROOT114_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_PRE114                               CCM_PRE_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_PRE_ROOT114_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL114                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,114)
#define CCM_ACCESS_CTRL_ROOT114_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,114)
#define CCM_TARGET_ROOT115                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT115_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_MISC115                              CCM_MISC_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_MISC_ROOT115_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_POST115                              CCM_POST_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_POST_ROOT115_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_PRE115                               CCM_PRE_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_PRE_ROOT115_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL115                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,115)
#define CCM_ACCESS_CTRL_ROOT115_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,115)
#define CCM_TARGET_ROOT116                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT116_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_MISC116                              CCM_MISC_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_MISC_ROOT116_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_POST116                              CCM_POST_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_POST_ROOT116_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_PRE116                               CCM_PRE_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_PRE_ROOT116_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL116                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,116)
#define CCM_ACCESS_CTRL_ROOT116_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,116)
#define CCM_TARGET_ROOT117                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT117_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_MISC117                              CCM_MISC_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_MISC_ROOT117_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_POST117                              CCM_POST_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_POST_ROOT117_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_PRE117                               CCM_PRE_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_PRE_ROOT117_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL117                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,117)
#define CCM_ACCESS_CTRL_ROOT117_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,117)
#define CCM_TARGET_ROOT118                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT118_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_MISC118                              CCM_MISC_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_MISC_ROOT118_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_POST118                              CCM_POST_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_POST_ROOT118_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_PRE118                               CCM_PRE_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_PRE_ROOT118_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL118                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,118)
#define CCM_ACCESS_CTRL_ROOT118_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,118)
#define CCM_TARGET_ROOT119                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT119_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_MISC119                              CCM_MISC_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_MISC_ROOT119_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_POST119                              CCM_POST_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_POST_ROOT119_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_PRE119                               CCM_PRE_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_PRE_ROOT119_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL119                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,119)
#define CCM_ACCESS_CTRL_ROOT119_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,119)
#define CCM_TARGET_ROOT120                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT120_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_MISC120                              CCM_MISC_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_MISC_ROOT120_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_POST120                              CCM_POST_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_POST_ROOT120_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_PRE120                               CCM_PRE_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_PRE_ROOT120_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL120                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,120)
#define CCM_ACCESS_CTRL_ROOT120_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,120)
#define CCM_TARGET_ROOT121                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT121_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_MISC121                              CCM_MISC_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_MISC_ROOT121_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_POST121                              CCM_POST_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_POST_ROOT121_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_PRE121                               CCM_PRE_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_PRE_ROOT121_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL121                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,121)
#define CCM_ACCESS_CTRL_ROOT121_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,121)
#define CCM_TARGET_ROOT122                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT122_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_MISC122                              CCM_MISC_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_MISC_ROOT122_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_POST122                              CCM_POST_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_POST_ROOT122_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_PRE122                               CCM_PRE_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_PRE_ROOT122_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL122                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,122)
#define CCM_ACCESS_CTRL_ROOT122_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,122)
#define CCM_TARGET_ROOT123                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT123_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_MISC123                              CCM_MISC_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_MISC_ROOT123_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_POST123                              CCM_POST_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_POST_ROOT123_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_PRE123                               CCM_PRE_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_PRE_ROOT123_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL123                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,123)
#define CCM_ACCESS_CTRL_ROOT123_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,123)
#define CCM_TARGET_ROOT124                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT124_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_MISC124                              CCM_MISC_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_MISC_ROOT124_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_POST124                              CCM_POST_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_POST_ROOT124_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_PRE124                               CCM_PRE_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_PRE_ROOT124_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL124                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,124)
#define CCM_ACCESS_CTRL_ROOT124_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,124)
#define CCM_TARGET_ROOT125                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT125_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_MISC125                              CCM_MISC_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_MISC_ROOT125_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_POST125                              CCM_POST_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_POST_ROOT125_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_PRE125                               CCM_PRE_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_PRE_ROOT125_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL125                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,125)
#define CCM_ACCESS_CTRL_ROOT125_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,125)
#define CCM_TARGET_ROOT126                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT126_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_MISC126                              CCM_MISC_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_MISC_ROOT126_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_POST126                              CCM_POST_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_POST_ROOT126_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_PRE126                               CCM_PRE_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_PRE_ROOT126_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL126                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,126)
#define CCM_ACCESS_CTRL_ROOT126_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,126)
#define CCM_TARGET_ROOT127                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT127_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_MISC127                              CCM_MISC_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_MISC_ROOT127_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_POST127                              CCM_POST_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_POST_ROOT127_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_PRE127                               CCM_PRE_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_PRE_ROOT127_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL127                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,127)
#define CCM_ACCESS_CTRL_ROOT127_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,127)
#define CCM_TARGET_ROOT128                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT128_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_MISC128                              CCM_MISC_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_MISC_ROOT128_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_POST128                              CCM_POST_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_POST_ROOT128_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_PRE128                               CCM_PRE_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_PRE_ROOT128_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL128                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,128)
#define CCM_ACCESS_CTRL_ROOT128_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,128)
#define CCM_TARGET_ROOT129                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT129_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_MISC129                              CCM_MISC_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_MISC_ROOT129_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_POST129                              CCM_POST_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_POST_ROOT129_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_PRE129                               CCM_PRE_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_PRE_ROOT129_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL129                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,129)
#define CCM_ACCESS_CTRL_ROOT129_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,129)
#define CCM_TARGET_ROOT130                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT130_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_MISC130                              CCM_MISC_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_MISC_ROOT130_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_POST130                              CCM_POST_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_POST_ROOT130_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_PRE130                               CCM_PRE_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_PRE_ROOT130_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL130                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,130)
#define CCM_ACCESS_CTRL_ROOT130_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,130)
#define CCM_TARGET_ROOT131                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT131_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_MISC131                              CCM_MISC_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_MISC_ROOT131_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_POST131                              CCM_POST_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_POST_ROOT131_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_PRE131                               CCM_PRE_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_PRE_ROOT131_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL131                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,131)
#define CCM_ACCESS_CTRL_ROOT131_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,131)
#define CCM_TARGET_ROOT132                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT132_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_MISC132                              CCM_MISC_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_MISC_ROOT132_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_POST132                              CCM_POST_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_POST_ROOT132_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_PRE132                               CCM_PRE_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_PRE_ROOT132_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL132                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,132)
#define CCM_ACCESS_CTRL_ROOT132_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,132)
#define CCM_TARGET_ROOT133                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT133_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_MISC133                              CCM_MISC_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_MISC_ROOT133_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_POST133                              CCM_POST_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_POST_ROOT133_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_PRE133                               CCM_PRE_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_PRE_ROOT133_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL133                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,133)
#define CCM_ACCESS_CTRL_ROOT133_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,133)
#define CCM_TARGET_ROOT134                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT134_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_MISC134                              CCM_MISC_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_MISC_ROOT134_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_POST134                              CCM_POST_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_POST_ROOT134_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_PRE134                               CCM_PRE_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_PRE_ROOT134_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL134                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,134)
#define CCM_ACCESS_CTRL_ROOT134_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,134)
#define CCM_TARGET_ROOT135                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT135_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_MISC135                              CCM_MISC_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_MISC_ROOT135_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_POST135                              CCM_POST_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_POST_ROOT135_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_PRE135                               CCM_PRE_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_PRE_ROOT135_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL135                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,135)
#define CCM_ACCESS_CTRL_ROOT135_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,135)
#define CCM_TARGET_ROOT136                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT136_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_MISC136                              CCM_MISC_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_MISC_ROOT136_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_POST136                              CCM_POST_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_POST_ROOT136_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_PRE136                               CCM_PRE_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_PRE_ROOT136_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL136                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,136)
#define CCM_ACCESS_CTRL_ROOT136_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,136)
#define CCM_TARGET_ROOT137                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT137_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_MISC137                              CCM_MISC_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_MISC_ROOT137_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_POST137                              CCM_POST_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_POST_ROOT137_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_PRE137                               CCM_PRE_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_PRE_ROOT137_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL137                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,137)
#define CCM_ACCESS_CTRL_ROOT137_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,137)
#define CCM_TARGET_ROOT138                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT138_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_MISC138                              CCM_MISC_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_MISC_ROOT138_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_POST138                              CCM_POST_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_POST_ROOT138_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_PRE138                               CCM_PRE_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_PRE_ROOT138_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL138                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,138)
#define CCM_ACCESS_CTRL_ROOT138_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,138)
#define CCM_TARGET_ROOT139                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT139_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_MISC139                              CCM_MISC_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_MISC_ROOT139_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_POST139                              CCM_POST_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_POST_ROOT139_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_PRE139                               CCM_PRE_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_PRE_ROOT139_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL139                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,139)
#define CCM_ACCESS_CTRL_ROOT139_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,139)
#define CCM_TARGET_ROOT140                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT140_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_MISC140                              CCM_MISC_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_MISC_ROOT140_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_POST140                              CCM_POST_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_POST_ROOT140_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_PRE140                               CCM_PRE_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_PRE_ROOT140_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL140                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,140)
#define CCM_ACCESS_CTRL_ROOT140_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,140)
#define CCM_TARGET_ROOT141                       CCM_TARGET_ROOT_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_SET                   CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_CLR                   CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_TARGET_ROOT141_TOG                   CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_MISC141                              CCM_MISC_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_SET                     CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_CLR                     CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_MISC_ROOT141_TOG                     CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_POST141                              CCM_POST_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_SET                     CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_CLR                     CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_POST_ROOT141_TOG                     CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_PRE141                               CCM_PRE_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_SET                      CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_CLR                      CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_PRE_ROOT141_TOG                      CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL141                       CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_SET              CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_CLR              CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,141)
#define CCM_ACCESS_CTRL_ROOT141_TOG              CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,141)

/* CCM - Register array accessors */
#define CCM_PLL_CTRL(index)                      CCM_PLL_CTRL_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_SET(index)                  CCM_PLL_CTRL_SET_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_CLR(index)                  CCM_PLL_CTRL_CLR_REG(CCM_BASE_PTR,index)
#define CCM_PLL_CTRL_TOG(index)                  CCM_PLL_CTRL_TOG_REG(CCM_BASE_PTR,index)
#define CCM_CCGR(index)                          CCM_CCGR_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_SET(index)                      CCM_CCGR_SET_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_CLR(index)                      CCM_CCGR_CLR_REG(CCM_BASE_PTR,index)
#define CCM_CCGR_TOG(index)                      CCM_CCGR_TOG_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT(index)                   CCM_TARGET_ROOT_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_SET(index)               CCM_TARGET_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_CLR(index)               CCM_TARGET_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_TARGET_ROOT_TOG(index)               CCM_TARGET_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_MISC(index)                          CCM_MISC_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_SET(index)                 CCM_MISC_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_CLR(index)                 CCM_MISC_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_MISC_ROOT_TOG(index)                 CCM_MISC_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_POST(index)                          CCM_POST_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_SET(index)                 CCM_POST_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_CLR(index)                 CCM_POST_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_POST_ROOT_TOG(index)                 CCM_POST_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_PRE(index)                           CCM_PRE_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_SET(index)                  CCM_PRE_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_CLR(index)                  CCM_PRE_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_PRE_ROOT_TOG(index)                  CCM_PRE_ROOT_TOG_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL(index)                   CCM_ACCESS_CTRL_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_SET(index)          CCM_ACCESS_CTRL_ROOT_SET_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_CLR(index)          CCM_ACCESS_CTRL_ROOT_CLR_REG(CCM_BASE_PTR,index)
#define CCM_ACCESS_CTRL_ROOT_TOG(index)          CCM_ACCESS_CTRL_ROOT_TOG_REG(CCM_BASE_PTR,index)

/*!
 * @}
 */ /* end of group CCM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_Peripheral */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Peripheral CCM_ANALOG
 * @{
 */

/** CCM_ANALOG - Peripheral register structure */
typedef struct CCM_ANALOG_MemMap {
  uint32_t AUDIO_PLL1_GEN_CTRL;                    /**< AUDIO PLL1 General Function Control Register, offset: 0x0 */
  uint32_t AUDIO_PLL1_FDIV_CTL0;                   /**< AUDIO PLL1 Divide and Fraction Data Control 0 Register, offset: 0x4 */
  uint32_t AUDIO_PLL1_FDIV_CTL1;                   /**< AUDIO PLL1 Divide and Fraction Data Control 1 Register, offset: 0x8 */
  uint32_t AUDIO_PLL1_SSCG_CTRL;                   /**< AUDIO PLL1 PLL SSCG Control Register, offset: 0xC */
  uint32_t AUDIO_PLL1_MNIT_CTRL;                   /**< AUDIO PLL1 PLL Monitoring Control Register, offset: 0x10 */
  uint32_t AUDIO_PLL2_GEN_CTRL;                    /**< AUDIO PLL2 General Function Control Register, offset: 0x14 */
  uint32_t AUDIO_PLL2_FDIV_CTL0;                   /**< AUDIO PLL2 Divide and Fraction Data Control 0 Register, offset: 0x18 */
  uint32_t AUDIO_PLL2_FDIV_CTL1;                   /**< AUDIO PLL2 Divide and Fraction Data Control 1 Register, offset: 0x1C */
  uint32_t AUDIO_PLL2_SSCG_CTRL;                   /**< AUDIO PLL2 PLL SSCG Control Register, offset: 0x20 */
  uint32_t AUDIO_PLL2_MNIT_CTRL;                   /**< AUDIO PLL2 PLL Monitoring Control Register, offset: 0x24 */
  uint32_t VIDEO_PLL1_GEN_CTRL;                    /**< VIDEO PLL1 General Function Control Register, offset: 0x28 */
  uint32_t VIDEO_PLL1_FDIV_CTL0;                   /**< VIDEO PLL1 Divide and Fraction Data Control 0 Register, offset: 0x2C */
  uint32_t VIDEO_PLL1_FDIV_CTL1;                   /**< VIDEO PLL1 Divide and Fraction Data Control 1 Register, offset: 0x30 */
  uint32_t VIDEO_PLL1_SSCG_CTRL;                   /**< VIDEO PLL1 PLL SSCG Control Register, offset: 0x34 */
  uint32_t VIDEO_PLL1_MNIT_CTRL;                   /**< VIDEO PLL1 PLL Monitoring Control Register, offset: 0x38 */
  uint8_t RESERVED_0[20];
  uint32_t DRAM_PLL_GEN_CTRL;                      /**< DRAM PLL General Function Control Register, offset: 0x50 */
  uint32_t DRAM_PLL_FDIV_CTL0;                     /**< DRAM PLL Divide and Fraction Data Control 0 Register, offset: 0x54 */
  uint32_t DRAM_PLL_FDIV_CTL1;                     /**< DRAM PLL Divide and Fraction Data Control 1 Register, offset: 0x58 */
  uint32_t DRAM_PLL_SSCG_CTRL;                     /**< DRAM PLL PLL SSCG Control Register, offset: 0x5C */
  uint32_t DRAM_PLL_MNIT_CTRL;                     /**< DRAM PLL PLL Monitoring Control Register, offset: 0x60 */
  uint32_t GPU_PLL_GEN_CTRL;                       /**< GPU PLL General Function Control Register, offset: 0x64 */
  uint32_t GPU_PLL_FDIV_CTL0;                      /**< GPU PLL Divide and Fraction Data Control 0 Register, offset: 0x68 */
  uint32_t GPU_PLL_LOCKD_CTRL;                     /**< PLL Lock Detector Control Register, offset: 0x6C */
  uint32_t GPU_PLL_MNIT_CTRL;                      /**< PLL Monitoring Control Register, offset: 0x70 */
  uint32_t M7_ALT_PLL_GEN_CTRL;                    /**< M7 Alternate PLL General Function Control Register, offset: 0x74 */
  uint32_t M7_ALT_PLL_FDIV_CTL0;                   /**< M7 Alternate PLL Divide and Fraction Data Control 0 Register, offset: 0x78 */
  uint32_t M7_ALT_PLL_LOCKD_CTRL;                  /**< PLL Lock Detector Control Register, offset: 0x7C */
  uint32_t M7_ALT_PLL_MNIT_CTRL;                   /**< PLL Monitoring Control Register, offset: 0x80 */
  uint32_t ARM_PLL_GEN_CTRL;                       /**< ARM PLL General Function Control Register, offset: 0x84 */
  uint32_t ARM_PLL_FDIV_CTL0;                      /**< ARM PLL Divide and Fraction Data Control 0 Register, offset: 0x88 */
  uint32_t ARM_PLL_LOCKD_CTRL;                     /**< PLL Lock Detector Control Register, offset: 0x8C */
  uint32_t ARM_PLL_MNIT_CTRL;                      /**< PLL Monitoring Control Register, offset: 0x90 */
  uint32_t SYS_PLL1_GEN_CTRL;                      /**< SYS PLL1 General Function Control Register, offset: 0x94 */
  uint32_t SYS_PLL1_FDIV_CTL0;                     /**< SYS PLL1 Divide and Fraction Data Control 0 Register, offset: 0x98 */
  uint32_t SYS_PLL1_LOCKD_CTRL;                    /**< PLL Lock Detector Control Register, offset: 0x9C */
  uint8_t RESERVED_1[96];
  uint32_t SYS_PLL1_MNIT_CTRL;                     /**< PLL Monitoring Control Register, offset: 0x100 */
  uint32_t SYS_PLL2_GEN_CTRL;                      /**< SYS PLL2 General Function Control Register, offset: 0x104 */
  uint32_t SYS_PLL2_FDIV_CTL0;                     /**< SYS PLL2 Divide and Fraction Data Control 0 Register, offset: 0x108 */
  uint32_t SYS_PLL2_LOCKD_CTRL;                    /**< PLL Lock Detector Control Register, offset: 0x10C */
  uint32_t SYS_PLL2_MNIT_CTRL;                     /**< PLL Monitoring Control Register, offset: 0x110 */
  uint32_t SYS_PLL3_GEN_CTRL;                      /**< SYS PLL3 General Function Control Register, offset: 0x114 */
  uint32_t SYS_PLL3_FDIV_CTL0;                     /**< SYS PLL3 Divide and Fraction Data Control 0 Register, offset: 0x118 */
  uint32_t SYS_PLL3_LOCKD_CTRL;                    /**< PLL Lock Detector Control Register, offset: 0x11C */
  uint32_t SYS_PLL3_MNIT_CTRL;                     /**< PLL Monitoring Control Register, offset: 0x120 */
  uint32_t OSC_MISC_CFG;                           /**< Osc Misc Configuration Register, offset: 0x124 */
  uint32_t ANAMIX_PLL_MNIT_CTL;                    /**< PLL Clock Output for Test Enable and Select Register, offset: 0x128 */
  uint8_t RESERVED_2[1748];
  uint32_t DIGPROG;                                /**< DIGPROG Register, offset: 0x800 */
} volatile *CCM_ANALOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register accessors */
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_REG(base) ((base)->AUDIO_PLL1_GEN_CTRL)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_REG(base) ((base)->AUDIO_PLL1_FDIV_CTL0)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_REG(base) ((base)->AUDIO_PLL1_FDIV_CTL1)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_REG(base) ((base)->AUDIO_PLL1_SSCG_CTRL)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_REG(base) ((base)->AUDIO_PLL1_MNIT_CTRL)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_REG(base) ((base)->AUDIO_PLL2_GEN_CTRL)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_REG(base) ((base)->AUDIO_PLL2_FDIV_CTL0)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_REG(base) ((base)->AUDIO_PLL2_FDIV_CTL1)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_REG(base) ((base)->AUDIO_PLL2_SSCG_CTRL)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_REG(base) ((base)->AUDIO_PLL2_MNIT_CTRL)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_REG(base) ((base)->VIDEO_PLL1_GEN_CTRL)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_REG(base) ((base)->VIDEO_PLL1_FDIV_CTL0)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_REG(base) ((base)->VIDEO_PLL1_FDIV_CTL1)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_REG(base) ((base)->VIDEO_PLL1_SSCG_CTRL)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_REG(base) ((base)->VIDEO_PLL1_MNIT_CTRL)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_REG(base)   ((base)->DRAM_PLL_GEN_CTRL)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_REG(base)  ((base)->DRAM_PLL_FDIV_CTL0)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL1_REG(base)  ((base)->DRAM_PLL_FDIV_CTL1)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_REG(base)  ((base)->DRAM_PLL_SSCG_CTRL)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_REG(base)  ((base)->DRAM_PLL_MNIT_CTRL)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_REG(base)    ((base)->GPU_PLL_GEN_CTRL)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_REG(base)   ((base)->GPU_PLL_FDIV_CTL0)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_REG(base)  ((base)->GPU_PLL_LOCKD_CTRL)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_REG(base)   ((base)->GPU_PLL_MNIT_CTRL)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_REG(base) ((base)->M7_ALT_PLL_GEN_CTRL)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_REG(base) ((base)->M7_ALT_PLL_FDIV_CTL0)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_REG(base) ((base)->M7_ALT_PLL_LOCKD_CTRL)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_REG(base) ((base)->M7_ALT_PLL_MNIT_CTRL)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_REG(base)    ((base)->ARM_PLL_GEN_CTRL)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_REG(base)   ((base)->ARM_PLL_FDIV_CTL0)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_REG(base)  ((base)->ARM_PLL_LOCKD_CTRL)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_REG(base)   ((base)->ARM_PLL_MNIT_CTRL)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_REG(base)   ((base)->SYS_PLL1_GEN_CTRL)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_REG(base)  ((base)->SYS_PLL1_FDIV_CTL0)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_REG(base) ((base)->SYS_PLL1_LOCKD_CTRL)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_REG(base)  ((base)->SYS_PLL1_MNIT_CTRL)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_REG(base)   ((base)->SYS_PLL2_GEN_CTRL)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_REG(base)  ((base)->SYS_PLL2_FDIV_CTL0)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_REG(base) ((base)->SYS_PLL2_LOCKD_CTRL)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_REG(base)  ((base)->SYS_PLL2_MNIT_CTRL)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_REG(base)   ((base)->SYS_PLL3_GEN_CTRL)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_REG(base)  ((base)->SYS_PLL3_FDIV_CTL0)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_REG(base) ((base)->SYS_PLL3_LOCKD_CTRL)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_REG(base)  ((base)->SYS_PLL3_MNIT_CTRL)
#define CCM_ANALOG_OSC_MISC_CFG_REG(base)        ((base)->OSC_MISC_CFG)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_REG(base) ((base)->ANAMIX_PLL_MNIT_CTL)
#define CCM_ANALOG_DIGPROG_REG(base)             ((base)->DIGPROG)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- CCM_ANALOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Masks CCM_ANALOG Register Masks
 * @{
 */

/*! @name AUDIO_PLL1_GEN_CTRL - AUDIO PLL1 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_CLKE_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_CLKE_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (16U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL1_FDIV_CTL0 - AUDIO PLL1 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name AUDIO_PLL1_FDIV_CTL1 - AUDIO PLL1 Divide and Fraction Data Control 1 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_PLL_DSM_MASK (0xFFFFU)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_PLL_DSM_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_PLL_DSM(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_PLL_DSM_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_PLL_DSM_MASK)
/*! @} */

/*! @name AUDIO_PLL1_SSCG_CTRL - AUDIO PLL1 PLL SSCG Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SEL_PF_MASK (0x3U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SEL_PF_SHIFT (0U)
/*! SEL_PF
 *  0b00..Down spread
 *  0b01..Up spread
 *  0b1x..Center spread
 */
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SEL_PF(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SEL_PF_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SEL_PF_MASK)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_MASK (0x3F0U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MRAT_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_MASK (0xFF000U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SSCG_EN_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_SSCG_EN_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL1_MNIT_CTRL - AUDIO PLL1 PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_ICP_MASK (0x7U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_ICP_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_ICP(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFC_EN_MASK (0x8U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFC_EN_SHIFT (3U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_EXTAFC_MASK (0x1F0U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_EXTAFC_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_EXTAFC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_FEED_EN_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_FEED_EN_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_FSEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_FSEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFCINIT_SEL_MASK (0x20000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFCINIT_SEL_SHIFT (17U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_PBIAS_CTRL_MASK (0x80000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_PBIAS_CTRL_SHIFT (19U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFC_SEL_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_AFC_SEL_SHIFT (20U)
/*! @} */

/*! @name AUDIO_PLL2_GEN_CTRL - AUDIO PLL2 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_CLKE_MASK (0x2000U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_CLKE_SHIFT (13U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (16U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL2_FDIV_CTL0 - AUDIO PLL2 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name AUDIO_PLL2_FDIV_CTL1 - AUDIO PLL2 Divide and Fraction Data Control 1 Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_PLL_DSM_MASK (0xFFFFU)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_PLL_DSM_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_PLL_DSM(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_PLL_DSM_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_PLL_DSM_MASK)
/*! @} */

/*! @name AUDIO_PLL2_SSCG_CTRL - AUDIO PLL2 PLL SSCG Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SEL_PF_MASK (0x3U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SEL_PF_SHIFT (0U)
/*! SEL_PF
 *  0b00..Down spread
 *  0b01..Up spread
 *  0b1x..Center spread
 */
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SEL_PF(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SEL_PF_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SEL_PF_MASK)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MRAT_CTL_MASK (0x3F0U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MRAT_CTL_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MRAT_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MRAT_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MRAT_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MFREQ_CTL_MASK (0xFF000U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT (12U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MFREQ_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_PLL_MFREQ_CTL_MASK)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SSCG_EN_MASK (0x80000000U)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_SSCG_EN_SHIFT (31U)
/*! @} */

/*! @name AUDIO_PLL2_MNIT_CTRL - AUDIO PLL2 PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_ICP_MASK (0x7U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_ICP_SHIFT (0U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_ICP(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFC_EN_MASK (0x8U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFC_EN_SHIFT (3U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_EXTAFC_MASK (0x1F0U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_EXTAFC_SHIFT (4U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_EXTAFC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_FEED_EN_MASK (0x4000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_FEED_EN_SHIFT (14U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_FSEL_MASK (0x8000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_FSEL_SHIFT (15U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFCINIT_SEL_MASK (0x20000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFCINIT_SEL_SHIFT (17U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x40000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (18U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_PBIAS_CTRL_MASK (0x80000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_PBIAS_CTRL_SHIFT (19U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFC_SEL_MASK (0x100000U)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_AFC_SEL_SHIFT (20U)
/*! @} */

/*! @name VIDEO_PLL1_GEN_CTRL - VIDEO PLL1 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_CLKE_MASK (0x2000U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_CLKE_SHIFT (13U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (16U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name VIDEO_PLL1_FDIV_CTL0 - VIDEO PLL1 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name VIDEO_PLL1_FDIV_CTL1 - VIDEO PLL1 Divide and Fraction Data Control 1 Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_PLL_DSM_MASK (0xFFFFU)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_PLL_DSM_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_PLL_DSM(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_PLL_DSM_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_PLL_DSM_MASK)
/*! @} */

/*! @name VIDEO_PLL1_SSCG_CTRL - VIDEO PLL1 PLL SSCG Control Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SEL_PF_MASK (0x3U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SEL_PF_SHIFT (0U)
/*! SEL_PF
 *  0b00..Down spread
 *  0b01..Up spread
 *  0b1x..Center spread
 */
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SEL_PF(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SEL_PF_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SEL_PF_MASK)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_MASK (0x3F0U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MRAT_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MRAT_CTL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_MASK (0xFF000U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT (12U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_PLL_MFREQ_CTL_MASK)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SSCG_EN_MASK (0x80000000U)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_SSCG_EN_SHIFT (31U)
/*! @} */

/*! @name VIDEO_PLL1_MNIT_CTRL - VIDEO PLL1 PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_ICP_MASK (0x7U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_ICP_SHIFT (0U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_ICP(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFC_EN_MASK (0x8U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFC_EN_SHIFT (3U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_EXTAFC_MASK (0x1F0U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_EXTAFC_SHIFT (4U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_EXTAFC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_FEED_EN_MASK (0x4000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_FEED_EN_SHIFT (14U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_FSEL_MASK (0x8000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_FSEL_SHIFT (15U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFCINIT_SEL_MASK (0x20000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFCINIT_SEL_SHIFT (17U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x40000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (18U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_PBIAS_CTRL_MASK (0x80000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_PBIAS_CTRL_SHIFT (19U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFC_SEL_MASK (0x100000U)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_AFC_SEL_SHIFT (20U)
/*! @} */

/*! @name DRAM_PLL_GEN_CTRL - DRAM PLL General Function Control Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_DRAM_PLL_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_CLKE_MASK (0x2000U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_CLKE_SHIFT (13U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (16U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name DRAM_PLL_FDIV_CTL0 - DRAM PLL Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_DRAM_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name DRAM_PLL_FDIV_CTL1 - DRAM PLL Divide and Fraction Data Control 1 Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL1_PLL_DSM_MASK (0xFFFFU)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL1_PLL_DSM_SHIFT (0U)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL1_PLL_DSM(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_FDIV_CTL1_PLL_DSM_SHIFT)) & CCM_ANALOG_DRAM_PLL_FDIV_CTL1_PLL_DSM_MASK)
/*! @} */

/*! @name DRAM_PLL_SSCG_CTRL - DRAM PLL PLL SSCG Control Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SEL_PF_MASK (0x3U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SEL_PF_SHIFT (0U)
/*! SEL_PF
 *  0b00..Down spread
 *  0b01..Up spread
 *  0b1x..Center spread
 */
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SEL_PF(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SEL_PF_SHIFT)) & CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SEL_PF_MASK)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MRAT_CTL_MASK (0x3F0U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MRAT_CTL_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MRAT_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MRAT_CTL_SHIFT)) & CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MRAT_CTL_MASK)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MFREQ_CTL_MASK (0xFF000U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT (12U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MFREQ_CTL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MFREQ_CTL_SHIFT)) & CCM_ANALOG_DRAM_PLL_SSCG_CTRL_PLL_MFREQ_CTL_MASK)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SSCG_EN_MASK (0x80000000U)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL_SSCG_EN_SHIFT (31U)
/*! @} */

/*! @name DRAM_PLL_MNIT_CTRL - DRAM PLL PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_ICP_MASK   (0x7U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_ICP_SHIFT  (0U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_ICP(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_DRAM_PLL_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFC_EN_MASK (0x8U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFC_EN_SHIFT (3U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_EXTAFC_MASK (0x1F0U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_EXTAFC_SHIFT (4U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_EXTAFC(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DRAM_PLL_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_DRAM_PLL_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_FEED_EN_MASK (0x4000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_FEED_EN_SHIFT (14U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_FSEL_MASK  (0x8000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_FSEL_SHIFT (15U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFCINIT_SEL_MASK (0x20000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFCINIT_SEL_SHIFT (17U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x40000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (18U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_PBIAS_CTRL_MASK (0x80000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_PBIAS_CTRL_SHIFT (19U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFC_SEL_MASK (0x100000U)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL_AFC_SEL_SHIFT (20U)
/*! @} */

/*! @name GPU_PLL_GEN_CTRL - GPU PLL General Function Control Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_GPU_PLL_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name GPU_PLL_FDIV_CTL0 - GPU PLL Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_GPU_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name GPU_PLL_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_GPU_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name GPU_PLL_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_ICP_MASK    (0x3U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_ICP_SHIFT   (0U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_ICP(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_GPU_PLL_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_EXTAFC(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_GPU_PLL_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_GPU_PLL_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FSEL_MASK   (0x4000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FSEL_SHIFT  (14U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name M7_ALT_PLL_GEN_CTRL - M7 Alternate PLL General Function Control Register */
/*! @{ */
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name M7_ALT_PLL_FDIV_CTL0 - M7 Alternate PLL Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name M7_ALT_PLL_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name M7_ALT_PLL_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_ICP_MASK (0x3U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_ICP_SHIFT (0U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_ICP(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_EXTAFC(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FSEL_MASK (0x4000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FSEL_SHIFT (14U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name ARM_PLL_GEN_CTRL - ARM PLL General Function Control Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_ARM_PLL_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name ARM_PLL_FDIV_CTL0 - ARM PLL Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_ARM_PLL_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name ARM_PLL_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_ARM_PLL_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name ARM_PLL_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_ICP_MASK    (0x3U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_ICP_SHIFT   (0U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_ICP(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_ARM_PLL_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_EXTAFC(x)   (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ARM_PLL_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_ARM_PLL_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FSEL_MASK   (0x4000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FSEL_SHIFT  (14U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name SYS_PLL1_GEN_CTRL - SYS PLL1 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL1_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV2_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV2_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV2_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV2_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV3_CLKE_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV3_CLKE_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV3_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV3_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV4_CLKE_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV4_CLKE_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV4_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV4_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV5_CLKE_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV5_CLKE_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV5_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV5_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV6_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV6_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV6_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV6_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV8_CLKE_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV8_CLKE_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV8_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV8_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV10_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV10_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV10_CLKE_MASK (0x2000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV10_CLKE_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV20_CLKE_OVERRIDE_MASK (0x4000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV20_CLKE_OVERRIDE_SHIFT (26U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV20_CLKE_MASK (0x8000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_DIV20_CLKE_SHIFT (27U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name SYS_PLL1_FDIV_CTL0 - SYS PLL1 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL1_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name SYS_PLL1_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name SYS_PLL1_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_ICP_MASK   (0x3U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_ICP_SHIFT  (0U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_ICP(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_SYS_PLL1_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_EXTAFC(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL1_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_SYS_PLL1_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FSEL_MASK  (0x4000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FSEL_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name SYS_PLL2_GEN_CTRL - SYS PLL2 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL2_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV2_CLKE_OVERRIDE_MASK (0x1000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV2_CLKE_OVERRIDE_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV2_CLKE_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV2_CLKE_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV3_CLKE_OVERRIDE_MASK (0x4000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV3_CLKE_OVERRIDE_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV3_CLKE_MASK (0x8000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV3_CLKE_SHIFT (15U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV4_CLKE_OVERRIDE_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV4_CLKE_OVERRIDE_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV4_CLKE_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV4_CLKE_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV5_CLKE_OVERRIDE_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV5_CLKE_OVERRIDE_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV5_CLKE_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV5_CLKE_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV6_CLKE_OVERRIDE_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV6_CLKE_OVERRIDE_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV6_CLKE_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV6_CLKE_SHIFT (21U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV8_CLKE_OVERRIDE_MASK (0x400000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV8_CLKE_OVERRIDE_SHIFT (22U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV8_CLKE_MASK (0x800000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV8_CLKE_SHIFT (23U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV10_CLKE_OVERRIDE_MASK (0x1000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV10_CLKE_OVERRIDE_SHIFT (24U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV10_CLKE_MASK (0x2000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV10_CLKE_SHIFT (25U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV20_CLKE_OVERRIDE_MASK (0x4000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV20_CLKE_OVERRIDE_SHIFT (26U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV20_CLKE_MASK (0x8000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_DIV20_CLKE_SHIFT (27U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name SYS_PLL2_FDIV_CTL0 - SYS PLL2 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL2_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name SYS_PLL2_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name SYS_PLL2_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_ICP_MASK   (0x3U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_ICP_SHIFT  (0U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_ICP(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_SYS_PLL2_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_EXTAFC(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL2_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_SYS_PLL2_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FSEL_MASK  (0x4000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FSEL_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name SYS_PLL3_GEN_CTRL - SYS PLL3 General Function Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_REF_CLK_SEL_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT (0U)
/*! PLL_REF_CLK_SEL
 *  0b00..SYS_XTAL
 *  0b01..PAD_CLK
 *  0b10..Reserved
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_REF_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_REF_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_REF_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PAD_CLK_SEL_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PAD_CLK_SEL_SHIFT (2U)
/*! PAD_CLK_SEL
 *  0b00..CLKIN1 XOR CLKIN2
 *  0b01..CLKIN2
 *  0b10..CLKIN1
 *  0b11..Reserved
 */
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PAD_CLK_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_GEN_CTRL_PAD_CLK_SEL_SHIFT)) & CCM_ANALOG_SYS_PLL3_GEN_CTRL_PAD_CLK_SEL_MASK)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_BYPASS_MASK (0x10U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_BYPASS_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_RST_OVERRIDE_MASK (0x100U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_RST_OVERRIDE_SHIFT (8U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_RST_MASK (0x200U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_RST_SHIFT (9U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_CLKE_OVERRIDE_MASK (0x400U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_CLKE_OVERRIDE_SHIFT (10U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_CLKE_MASK (0x800U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_CLKE_SHIFT (11U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_EXT_BYPASS_MASK (0x10000000U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_EXT_BYPASS_SHIFT (28U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_LOCK_SEL_MASK (0x20000000U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_LOCK_SEL_SHIFT (29U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_LOCK_MASK (0x80000000U)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL_PLL_LOCK_SHIFT (31U)
/*! @} */

/*! @name SYS_PLL3_FDIV_CTL0 - SYS PLL3 Divide and Fraction Data Control 0 Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_POST_DIV_MASK (0x7U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_POST_DIV_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_POST_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_POST_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_POST_DIV_MASK)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_PRE_DIV_MASK (0x3F0U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_PRE_DIV_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_PRE_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_PRE_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_PRE_DIV_MASK)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_MAIN_DIV_MASK (0x3FF000U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_MAIN_DIV_SHIFT (12U)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_MAIN_DIV(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_MAIN_DIV_SHIFT)) & CCM_ANALOG_SYS_PLL3_FDIV_CTL0_PLL_MAIN_DIV_MASK)
/*! @} */

/*! @name SYS_PLL3_LOCKD_CTRL - PLL Lock Detector Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_IN_MASK (0x3U)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_IN_SHIFT (0U)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_IN(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_IN_SHIFT)) & CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_IN_MASK)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_OUT_MASK (0xCU)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_OUT_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_OUT(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_OUT_SHIFT)) & CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_OUT_MASK)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_DLY_MASK (0x30U)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_DLY_SHIFT (4U)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_DLY(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_DLY_SHIFT)) & CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_LOCK_CON_DLY_MASK)
/*! @} */

/*! @name SYS_PLL3_MNIT_CTRL - PLL Monitoring Control Register */
/*! @{ */
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_ICP_MASK   (0x3U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_ICP_SHIFT  (0U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_ICP(x)     (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_MNIT_CTRL_ICP_SHIFT)) & CCM_ANALOG_SYS_PLL3_MNIT_CTRL_ICP_MASK)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFC_EN_MASK (0x4U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFC_EN_SHIFT (2U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_EXTAFC_MASK (0xF8U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_EXTAFC_SHIFT (3U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_EXTAFC(x)  (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_SYS_PLL3_MNIT_CTRL_EXTAFC_SHIFT)) & CCM_ANALOG_SYS_PLL3_MNIT_CTRL_EXTAFC_MASK)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FEED_EN_MASK (0x2000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FEED_EN_SHIFT (13U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FSEL_MASK  (0x4000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FSEL_SHIFT (14U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFCINIT_SEL_MASK (0x10000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFCINIT_SEL_SHIFT (16U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_PBIAS_CTRL_EN_MASK (0x20000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_PBIAS_CTRL_EN_SHIFT (17U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_PBIAS_CTRL_MASK (0x40000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_PBIAS_CTRL_SHIFT (18U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFC_SEL_MASK (0x80000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_AFC_SEL_SHIFT (19U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FOUT_MASK_MASK (0x100000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_FOUT_MASK_SHIFT (20U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_LRD_EN_MASK (0x200000U)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL_LRD_EN_SHIFT (21U)
/*! @} */

/*! @name OSC_MISC_CFG - Osc Misc Configuration Register */
/*! @{ */
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_MASK (0x1U)
#define CCM_ANALOG_OSC_MISC_CFG_OSC_32K_SEL_SHIFT (0U)
/*! @} */

/*! @name ANAMIX_PLL_MNIT_CTL - PLL Clock Output for Test Enable and Select Register */
/*! @{ */
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_DIV_VAL_MASK (0xFU)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_DIV_VAL_SHIFT (0U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_SEL_MASK (0xF0U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_SEL_SHIFT (4U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_SEL_SHIFT)) & CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_SEL_MASK)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_CKE_MASK (0x100U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT1_OUTPUT_CKE_SHIFT (8U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_DIV_VAL_MASK (0xF0000U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_DIV_VAL_SHIFT (16U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_DIV_VAL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_DIV_VAL_SHIFT)) & CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_DIV_VAL_MASK)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_SEL_MASK (0xF00000U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_SEL_SHIFT (20U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_SEL(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_SEL_SHIFT)) & CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_SEL_MASK)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_CKE_MASK (0x1000000U)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_CLKOUT2_OUTPUT_CKE_SHIFT (24U)
/*! @} */

/*! @name DIGPROG - DIGPROG Register */
/*! @{ */
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK    (0xFFU)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT   (0U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MINOR(x)      (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MINOR_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MINOR_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK (0xFF00U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT (8U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_LOWER_MASK)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK (0xFF0000U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT (16U)
#define CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER(x) (((uint32_t)(((uint32_t)(x)) << CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_SHIFT)) & CCM_ANALOG_DIGPROG_DIGPROG_MAJOR_UPPER_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Masks */


/* CCM_ANALOG - Peripheral instance base addresses */
/** Peripheral CCM_ANALOG base pointer */
#define CCM_ANALOG_BASE_PTR                      ((CCM_ANALOG_MemMapPtr)0x30360000u)
/** Array initializer of CCM_ANALOG peripheral base pointers */
#define CCM_ANALOG_BASE_PTRS                     { CCM_ANALOG_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- CCM_ANALOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup CCM_ANALOG_Register_Accessor_Macros CCM_ANALOG - Register accessor macros
 * @{
 */


/* CCM_ANALOG - Register instance definitions */
/* CCM_ANALOG */
#define CCM_ANALOG_AUDIO_PLL1_GEN_CTRL           CCM_ANALOG_AUDIO_PLL1_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0          CCM_ANALOG_AUDIO_PLL1_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1          CCM_ANALOG_AUDIO_PLL1_FDIV_CTL1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL          CCM_ANALOG_AUDIO_PLL1_SSCG_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL          CCM_ANALOG_AUDIO_PLL1_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_GEN_CTRL           CCM_ANALOG_AUDIO_PLL2_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0          CCM_ANALOG_AUDIO_PLL2_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1          CCM_ANALOG_AUDIO_PLL2_FDIV_CTL1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL          CCM_ANALOG_AUDIO_PLL2_SSCG_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL          CCM_ANALOG_AUDIO_PLL2_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_GEN_CTRL           CCM_ANALOG_VIDEO_PLL1_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0          CCM_ANALOG_VIDEO_PLL1_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1          CCM_ANALOG_VIDEO_PLL1_FDIV_CTL1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL          CCM_ANALOG_VIDEO_PLL1_SSCG_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL          CCM_ANALOG_VIDEO_PLL1_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_GEN_CTRL             CCM_ANALOG_DRAM_PLL_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL0            CCM_ANALOG_DRAM_PLL_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_FDIV_CTL1            CCM_ANALOG_DRAM_PLL_FDIV_CTL1_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_SSCG_CTRL            CCM_ANALOG_DRAM_PLL_SSCG_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DRAM_PLL_MNIT_CTRL            CCM_ANALOG_DRAM_PLL_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_GEN_CTRL              CCM_ANALOG_GPU_PLL_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_FDIV_CTL0             CCM_ANALOG_GPU_PLL_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_LOCKD_CTRL            CCM_ANALOG_GPU_PLL_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_GPU_PLL_MNIT_CTRL             CCM_ANALOG_GPU_PLL_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_M7_ALT_PLL_GEN_CTRL           CCM_ANALOG_M7_ALT_PLL_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0          CCM_ANALOG_M7_ALT_PLL_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL         CCM_ANALOG_M7_ALT_PLL_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL          CCM_ANALOG_M7_ALT_PLL_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_GEN_CTRL              CCM_ANALOG_ARM_PLL_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_FDIV_CTL0             CCM_ANALOG_ARM_PLL_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_LOCKD_CTRL            CCM_ANALOG_ARM_PLL_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ARM_PLL_MNIT_CTRL             CCM_ANALOG_ARM_PLL_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_GEN_CTRL             CCM_ANALOG_SYS_PLL1_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_FDIV_CTL0            CCM_ANALOG_SYS_PLL1_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_LOCKD_CTRL           CCM_ANALOG_SYS_PLL1_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL1_MNIT_CTRL            CCM_ANALOG_SYS_PLL1_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_GEN_CTRL             CCM_ANALOG_SYS_PLL2_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_FDIV_CTL0            CCM_ANALOG_SYS_PLL2_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_LOCKD_CTRL           CCM_ANALOG_SYS_PLL2_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL2_MNIT_CTRL            CCM_ANALOG_SYS_PLL2_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_GEN_CTRL             CCM_ANALOG_SYS_PLL3_GEN_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_FDIV_CTL0            CCM_ANALOG_SYS_PLL3_FDIV_CTL0_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_LOCKD_CTRL           CCM_ANALOG_SYS_PLL3_LOCKD_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_SYS_PLL3_MNIT_CTRL            CCM_ANALOG_SYS_PLL3_MNIT_CTRL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_OSC_MISC_CFG                  CCM_ANALOG_OSC_MISC_CFG_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_ANAMIX_PLL_MNIT_CTL           CCM_ANALOG_ANAMIX_PLL_MNIT_CTL_REG(CCM_ANALOG_BASE_PTR)
#define CCM_ANALOG_DIGPROG                       CCM_ANALOG_DIGPROG_REG(CCM_ANALOG_BASE_PTR)

/*!
 * @}
 */ /* end of group CCM_ANALOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group CCM_ANALOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- DDRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_Peripheral DDRC
 * @{
 */

/** DDRC - Peripheral register structure */
typedef struct DDRC_MemMap {
  uint32_t MSTR;                                   /**< Master Register0, offset: 0x0 */
  uint32_t STAT;                                   /**< Operating Mode Status Register, offset: 0x4 */
  uint32_t MSTR1;                                  /**< Operating Mode Status Register, offset: 0x8 */
  uint32_t MRCTRL3;                                /**< Operating Mode Status Register, offset: 0xC */
  uint32_t MRCTRL0;                                /**< Mode Register Read/Write Control Register 0., offset: 0x10 */
  uint32_t MRCTRL1;                                /**< Mode Register Read/Write Control Register 1, offset: 0x14 */
  uint32_t MRSTAT;                                 /**< Mode Register Read/Write Status Register, offset: 0x18 */
  uint32_t MRCTRL2;                                /**< Mode Register Read/Write Control Register 2, offset: 0x1C */
  uint32_t DERATEEN;                               /**< Temperature Derate Enable Register, offset: 0x20 */
  uint32_t DERATEINT;                              /**< Temperature Derate Interval Register, offset: 0x24 */
  uint8_t RESERVED_0[8];
  uint32_t PWRCTL;                                 /**< Low Power Control Register, offset: 0x30 */
  uint32_t PWRTMG;                                 /**< Low Power Timing Register, offset: 0x34 */
  uint32_t HWLPCTL;                                /**< Hardware Low Power Control Register, offset: 0x38 */
  uint8_t RESERVED_1[20];
  uint32_t RFSHCTL0;                               /**< Refresh Control Register 0, offset: 0x50 */
  uint32_t RFSHCTL1;                               /**< Refresh Control Register 1, offset: 0x54 */
  uint8_t RESERVED_2[8];
  uint32_t RFSHCTL3;                               /**< Refresh Control Register 3, offset: 0x60 */
  uint32_t RFSHTMG;                                /**< Refresh Timing Register, offset: 0x64 */
  uint8_t RESERVED_3[104];
  uint32_t INIT0;                                  /**< SDRAM Initialization Register 0, offset: 0xD0 */
  uint32_t INIT1;                                  /**< SDRAM Initialization Register 1, offset: 0xD4 */
  uint32_t INIT2;                                  /**< SDRAM Initialization Register 2, offset: 0xD8 */
  uint32_t INIT3;                                  /**< SDRAM Initialization Register 3, offset: 0xDC */
  uint32_t INIT4;                                  /**< SDRAM Initialization Register 4, offset: 0xE0 */
  uint32_t INIT5;                                  /**< SDRAM Initialization Register 5, offset: 0xE4 */
  uint32_t INIT6;                                  /**< SDRAM Initialization Register 6, offset: 0xE8 */
  uint32_t INIT7;                                  /**< SDRAM Initialization Register 7, offset: 0xEC */
  uint32_t DIMMCTL;                                /**< DIMM Control Register, offset: 0xF0 */
  uint32_t RANKCTL;                                /**< Rank Control Register, offset: 0xF4 */
  uint8_t RESERVED_4[8];
  uint32_t DRAMTMG0;                               /**< SDRAM Timing Register 0, offset: 0x100 */
  uint32_t DRAMTMG1;                               /**< SDRAM Timing Register 1, offset: 0x104 */
  uint32_t DRAMTMG2;                               /**< SDRAM Timing Register 2, offset: 0x108 */
  uint32_t DRAMTMG3;                               /**< SDRAM Timing Register 3, offset: 0x10C */
  uint32_t DRAMTMG4;                               /**< SDRAM Timing Register 4, offset: 0x110 */
  uint32_t DRAMTMG5;                               /**< SDRAM Timing Register 5, offset: 0x114 */
  uint32_t DRAMTMG6;                               /**< SDRAM Timing Register 6, offset: 0x118 */
  uint32_t DRAMTMG7;                               /**< SDRAM Timing Register 7, offset: 0x11C */
  uint32_t DRAMTMG8;                               /**< SDRAM Timing Register 8, offset: 0x120 */
  uint32_t DRAMTMG9;                               /**< SDRAM Timing Register 9, offset: 0x124 */
  uint32_t DRAMTMG10;                              /**< SDRAM Timing Register 10, offset: 0x128 */
  uint32_t DRAMTMG11;                              /**< SDRAM Timing Register 11, offset: 0x12C */
  uint32_t DRAMTMG12;                              /**< SDRAM Timing Register 12, offset: 0x130 */
  uint32_t DRAMTMG13;                              /**< SDRAM Timing Register 13, offset: 0x134 */
  uint32_t DRAMTMG14;                              /**< SDRAM Timing Register 14, offset: 0x138 */
  uint32_t DRAMTMG15;                              /**< SDRAM Timing Register 15, offset: 0x13C */
  uint8_t RESERVED_5[64];
  uint32_t ZQCTL0;                                 /**< ZQ Control Register 0, offset: 0x180 */
  uint32_t ZQCTL1;                                 /**< ZQ Control Register 1, offset: 0x184 */
  uint32_t ZQCTL2;                                 /**< ZQ Control Register 2, offset: 0x188 */
  uint32_t ZQSTAT;                                 /**< ZQ Status Register, offset: 0x18C */
  uint32_t DFITMG0;                                /**< DFI Timing Register 0, offset: 0x190 */
  uint32_t DFITMG1;                                /**< DFI Timing Register 1, offset: 0x194 */
  uint32_t DFILPCFG0;                              /**< DFI Low Power Configuration Register 0, offset: 0x198 */
  uint32_t DFILPCFG1;                              /**< DFI Low Power Configuration Register 1, offset: 0x19C */
  uint32_t DFIUPD0;                                /**< DFI Update Register 0, offset: 0x1A0 */
  uint32_t DFIUPD1;                                /**< DFI Update Register 1, offset: 0x1A4 */
  uint32_t DFIUPD2;                                /**< DFI Update Register 2, offset: 0x1A8 */
  uint8_t RESERVED_6[4];
  uint32_t DFIMISC;                                /**< DFI Miscellaneous Control Register, offset: 0x1B0 */
  uint32_t DFITMG2;                                /**< DFI Timing Register 2, offset: 0x1B4 */
  uint32_t DFITMG3;                                /**< DFI Timing Register 3, offset: 0x1B8 */
  uint32_t DFISTAT;                                /**< DFI Status Register, offset: 0x1BC */
  uint32_t DBICTL;                                 /**< DM/DBI Control Register, offset: 0x1C0 */
  uint8_t RESERVED_7[60];
  uint32_t ADDRMAP0;                               /**< Address Map Register 0, offset: 0x200 */
  uint32_t ADDRMAP1;                               /**< Address Map Register 1, offset: 0x204 */
  uint32_t ADDRMAP2;                               /**< Address Map Register 2, offset: 0x208 */
  uint32_t ADDRMAP3;                               /**< Address Map Register 3, offset: 0x20C */
  uint32_t ADDRMAP4;                               /**< Address Map Register 4, offset: 0x210 */
  uint32_t ADDRMAP5;                               /**< Address Map Register 5, offset: 0x214 */
  uint32_t ADDRMAP6;                               /**< Address Map Register 6, offset: 0x218 */
  uint32_t ADDRMAP7;                               /**< Address Map Register 7, offset: 0x21C */
  uint32_t ADDRMAP8;                               /**< Address Map Register 8, offset: 0x220 */
  uint32_t ADDRMAP9;                               /**< Address Map Register 9, offset: 0x224 */
  uint32_t ADDRMAP10;                              /**< Address Map Register 10, offset: 0x228 */
  uint32_t ADDRMAP11;                              /**< Address Map Register 11, offset: 0x22C */
  uint8_t RESERVED_8[16];
  uint32_t ODTCFG;                                 /**< ODT Configuration Register, offset: 0x240 */
  uint32_t ODTMAP;                                 /**< ODT/Rank Map Register, offset: 0x244 */
  uint8_t RESERVED_9[8];
  uint32_t SCHED;                                  /**< Scheduler Control Register, offset: 0x250 */
  uint32_t SCHED1;                                 /**< Scheduler Control Register 1, offset: 0x254 */
  uint8_t RESERVED_10[4];
  uint32_t PERFHPR1;                               /**< High Priority Read CAM Register 1, offset: 0x25C */
  uint8_t RESERVED_11[4];
  uint32_t PERFLPR1;                               /**< Low Priority Read CAM Register 1, offset: 0x264 */
  uint8_t RESERVED_12[4];
  uint32_t PERFWR1;                                /**< Write CAM Register 1, offset: 0x26C */
  uint8_t RESERVED_13[144];
  uint32_t DBG0;                                   /**< Debug Register 0, offset: 0x300 */
  uint32_t DBG1;                                   /**< Debug Register 1, offset: 0x304 */
  uint32_t DBGCAM;                                 /**< CAM Debug Register, offset: 0x308 */
  uint32_t DBGCMD;                                 /**< Command Debug Register, offset: 0x30C */
  uint32_t DBGSTAT;                                /**< Status Debug Register, offset: 0x310 */
  uint8_t RESERVED_14[12];
  uint32_t SWCTL;                                  /**< Software Register Programming Control Enable, offset: 0x320 */
  uint32_t SWSTAT;                                 /**< Software Register Programming Control Status, offset: 0x324 */
  uint8_t RESERVED_15[68];
  uint32_t POISONCFG;                              /**< AXI Poison Configuration Register., offset: 0x36C */
  uint32_t POISONSTAT;                             /**< AXI Poison Status Register, offset: 0x370 */
  uint8_t RESERVED_16[136];
  uint32_t PSTAT;                                  /**< Port Status Register, offset: 0x3FC */
  uint32_t PCCFG;                                  /**< Port Common Configuration Register, offset: 0x400 */
  uint32_t PCFGR_0;                                /**< Port n Configuration Read Register, offset: 0x404 */
  uint32_t PCFGW_0;                                /**< Port n Configuration Write Register, offset: 0x408 */
  uint8_t RESERVED_17[132];
  uint32_t PCTRL_0;                                /**< Port n Control Register, offset: 0x490 */
  uint32_t PCFGQOS0_0;                             /**< Port n Read QoS Configuration Register 0, offset: 0x494 */
  uint32_t PCFGQOS1_0;                             /**< Port n Read QoS Configuration Register 1, offset: 0x498 */
  uint32_t PCFGWQOS0_0;                            /**< Port n Write QoS Configuration Register 0, offset: 0x49C */
  uint32_t PCFGWQOS1_0;                            /**< Port n Write QoS Configuration Register 1, offset: 0x4A0 */
  uint8_t RESERVED_18[7036];
  uint32_t DERATEEN_SHADOW;                        /**< [SHADOW] Temperature Derate Enable Register, offset: 0x2020 */
  uint32_t DERATEINT_SHADOW;                       /**< [SHADOW] Temperature Derate Interval Register, offset: 0x2024 */
  uint8_t RESERVED_19[40];
  uint32_t RFSHCTL0_SHADOW;                        /**< [SHADOW] Refresh Control Register 0, offset: 0x2050 */
  uint8_t RESERVED_20[16];
  uint32_t RFSHTMG_SHADOW;                         /**< [SHADOW] Refresh Timing Register, offset: 0x2064 */
  uint8_t RESERVED_21[116];
  uint32_t INIT3_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 3, offset: 0x20DC */
  uint32_t INIT4_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 4, offset: 0x20E0 */
  uint8_t RESERVED_22[4];
  uint32_t INIT6_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 6, offset: 0x20E8 */
  uint32_t INIT7_SHADOW;                           /**< [SHADOW] SDRAM Initialization Register 7, offset: 0x20EC */
  uint8_t RESERVED_23[16];
  uint32_t DRAMTMG0_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 0, offset: 0x2100 */
  uint32_t DRAMTMG1_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 1, offset: 0x2104 */
  uint32_t DRAMTMG2_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 2, offset: 0x2108 */
  uint32_t DRAMTMG3_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 3, offset: 0x210C */
  uint32_t DRAMTMG4_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 4, offset: 0x2110 */
  uint32_t DRAMTMG5_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 5, offset: 0x2114 */
  uint32_t DRAMTMG6_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 6, offset: 0x2118 */
  uint32_t DRAMTMG7_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 7, offset: 0x211C */
  uint32_t DRAMTMG8_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 8, offset: 0x2120 */
  uint32_t DRAMTMG9_SHADOW;                        /**< [SHADOW] SDRAM Timing Register 9, offset: 0x2124 */
  uint32_t DRAMTMG10_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 10, offset: 0x2128 */
  uint32_t DRAMTMG11_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 11, offset: 0x212C */
  uint32_t DRAMTMG12_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 12, offset: 0x2130 */
  uint32_t DRAMTMG13_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 13, offset: 0x2134 */
  uint32_t DRAMTMG14_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 14, offset: 0x2138 */
  uint32_t DRAMTMG15_SHADOW;                       /**< [SHADOW] SDRAM Timing Register 15, offset: 0x213C */
  uint8_t RESERVED_24[64];
  uint32_t ZQCTL0_SHADOW;                          /**< [SHADOW] ZQ Control Register 0, offset: 0x2180 */
  uint8_t RESERVED_25[12];
  uint32_t DFITMG0_SHADOW;                         /**< [SHADOW] DFI Timing Register 0, offset: 0x2190 */
  uint32_t DFITMG1_SHADOW;                         /**< [SHADOW] DFI Timing Register 1, offset: 0x2194 */
  uint8_t RESERVED_26[28];
  uint32_t DFITMG2_SHADOW;                         /**< [SHADOW] DFI Timing Register 2, offset: 0x21B4 */
  uint32_t DFITMG3_SHADOW;                         /**< [SHADOW] DFI Timing Register 3, offset: 0x21B8 */
  uint8_t RESERVED_27[132];
  uint32_t ODTCFG_SHADOW;                          /**< [SHADOW] ODT Configuration Register, offset: 0x2240 */
} volatile *DDRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DDRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_Register_Accessor_Macros DDRC - Register accessor macros
 * @{
 */


/* DDRC - Register accessors */
#define DDRC_MSTR_REG(base)                      ((base)->MSTR)
#define DDRC_STAT_REG(base)                      ((base)->STAT)
#define DDRC_MSTR1_REG(base)                     ((base)->MSTR1)
#define DDRC_MRCTRL3_REG(base)                   ((base)->MRCTRL3)
#define DDRC_MRCTRL0_REG(base)                   ((base)->MRCTRL0)
#define DDRC_MRCTRL1_REG(base)                   ((base)->MRCTRL1)
#define DDRC_MRSTAT_REG(base)                    ((base)->MRSTAT)
#define DDRC_MRCTRL2_REG(base)                   ((base)->MRCTRL2)
#define DDRC_DERATEEN_REG(base)                  ((base)->DERATEEN)
#define DDRC_DERATEINT_REG(base)                 ((base)->DERATEINT)
#define DDRC_PWRCTL_REG(base)                    ((base)->PWRCTL)
#define DDRC_PWRTMG_REG(base)                    ((base)->PWRTMG)
#define DDRC_HWLPCTL_REG(base)                   ((base)->HWLPCTL)
#define DDRC_RFSHCTL0_REG(base)                  ((base)->RFSHCTL0)
#define DDRC_RFSHCTL1_REG(base)                  ((base)->RFSHCTL1)
#define DDRC_RFSHCTL3_REG(base)                  ((base)->RFSHCTL3)
#define DDRC_RFSHTMG_REG(base)                   ((base)->RFSHTMG)
#define DDRC_INIT0_REG(base)                     ((base)->INIT0)
#define DDRC_INIT1_REG(base)                     ((base)->INIT1)
#define DDRC_INIT2_REG(base)                     ((base)->INIT2)
#define DDRC_INIT3_REG(base)                     ((base)->INIT3)
#define DDRC_INIT4_REG(base)                     ((base)->INIT4)
#define DDRC_INIT5_REG(base)                     ((base)->INIT5)
#define DDRC_INIT6_REG(base)                     ((base)->INIT6)
#define DDRC_INIT7_REG(base)                     ((base)->INIT7)
#define DDRC_DIMMCTL_REG(base)                   ((base)->DIMMCTL)
#define DDRC_RANKCTL_REG(base)                   ((base)->RANKCTL)
#define DDRC_DRAMTMG0_REG(base)                  ((base)->DRAMTMG0)
#define DDRC_DRAMTMG1_REG(base)                  ((base)->DRAMTMG1)
#define DDRC_DRAMTMG2_REG(base)                  ((base)->DRAMTMG2)
#define DDRC_DRAMTMG3_REG(base)                  ((base)->DRAMTMG3)
#define DDRC_DRAMTMG4_REG(base)                  ((base)->DRAMTMG4)
#define DDRC_DRAMTMG5_REG(base)                  ((base)->DRAMTMG5)
#define DDRC_DRAMTMG6_REG(base)                  ((base)->DRAMTMG6)
#define DDRC_DRAMTMG7_REG(base)                  ((base)->DRAMTMG7)
#define DDRC_DRAMTMG8_REG(base)                  ((base)->DRAMTMG8)
#define DDRC_DRAMTMG9_REG(base)                  ((base)->DRAMTMG9)
#define DDRC_DRAMTMG10_REG(base)                 ((base)->DRAMTMG10)
#define DDRC_DRAMTMG11_REG(base)                 ((base)->DRAMTMG11)
#define DDRC_DRAMTMG12_REG(base)                 ((base)->DRAMTMG12)
#define DDRC_DRAMTMG13_REG(base)                 ((base)->DRAMTMG13)
#define DDRC_DRAMTMG14_REG(base)                 ((base)->DRAMTMG14)
#define DDRC_DRAMTMG15_REG(base)                 ((base)->DRAMTMG15)
#define DDRC_ZQCTL0_REG(base)                    ((base)->ZQCTL0)
#define DDRC_ZQCTL1_REG(base)                    ((base)->ZQCTL1)
#define DDRC_ZQCTL2_REG(base)                    ((base)->ZQCTL2)
#define DDRC_ZQSTAT_REG(base)                    ((base)->ZQSTAT)
#define DDRC_DFITMG0_REG(base)                   ((base)->DFITMG0)
#define DDRC_DFITMG1_REG(base)                   ((base)->DFITMG1)
#define DDRC_DFILPCFG0_REG(base)                 ((base)->DFILPCFG0)
#define DDRC_DFILPCFG1_REG(base)                 ((base)->DFILPCFG1)
#define DDRC_DFIUPD0_REG(base)                   ((base)->DFIUPD0)
#define DDRC_DFIUPD1_REG(base)                   ((base)->DFIUPD1)
#define DDRC_DFIUPD2_REG(base)                   ((base)->DFIUPD2)
#define DDRC_DFIMISC_REG(base)                   ((base)->DFIMISC)
#define DDRC_DFITMG2_REG(base)                   ((base)->DFITMG2)
#define DDRC_DFITMG3_REG(base)                   ((base)->DFITMG3)
#define DDRC_DFISTAT_REG(base)                   ((base)->DFISTAT)
#define DDRC_DBICTL_REG(base)                    ((base)->DBICTL)
#define DDRC_ADDRMAP0_REG(base)                  ((base)->ADDRMAP0)
#define DDRC_ADDRMAP1_REG(base)                  ((base)->ADDRMAP1)
#define DDRC_ADDRMAP2_REG(base)                  ((base)->ADDRMAP2)
#define DDRC_ADDRMAP3_REG(base)                  ((base)->ADDRMAP3)
#define DDRC_ADDRMAP4_REG(base)                  ((base)->ADDRMAP4)
#define DDRC_ADDRMAP5_REG(base)                  ((base)->ADDRMAP5)
#define DDRC_ADDRMAP6_REG(base)                  ((base)->ADDRMAP6)
#define DDRC_ADDRMAP7_REG(base)                  ((base)->ADDRMAP7)
#define DDRC_ADDRMAP8_REG(base)                  ((base)->ADDRMAP8)
#define DDRC_ADDRMAP9_REG(base)                  ((base)->ADDRMAP9)
#define DDRC_ADDRMAP10_REG(base)                 ((base)->ADDRMAP10)
#define DDRC_ADDRMAP11_REG(base)                 ((base)->ADDRMAP11)
#define DDRC_ODTCFG_REG(base)                    ((base)->ODTCFG)
#define DDRC_ODTMAP_REG(base)                    ((base)->ODTMAP)
#define DDRC_SCHED_REG(base)                     ((base)->SCHED)
#define DDRC_SCHED1_REG(base)                    ((base)->SCHED1)
#define DDRC_PERFHPR1_REG(base)                  ((base)->PERFHPR1)
#define DDRC_PERFLPR1_REG(base)                  ((base)->PERFLPR1)
#define DDRC_PERFWR1_REG(base)                   ((base)->PERFWR1)
#define DDRC_DBG0_REG(base)                      ((base)->DBG0)
#define DDRC_DBG1_REG(base)                      ((base)->DBG1)
#define DDRC_DBGCAM_REG(base)                    ((base)->DBGCAM)
#define DDRC_DBGCMD_REG(base)                    ((base)->DBGCMD)
#define DDRC_DBGSTAT_REG(base)                   ((base)->DBGSTAT)
#define DDRC_SWCTL_REG(base)                     ((base)->SWCTL)
#define DDRC_SWSTAT_REG(base)                    ((base)->SWSTAT)
#define DDRC_POISONCFG_REG(base)                 ((base)->POISONCFG)
#define DDRC_POISONSTAT_REG(base)                ((base)->POISONSTAT)
#define DDRC_PSTAT_REG(base)                     ((base)->PSTAT)
#define DDRC_PCCFG_REG(base)                     ((base)->PCCFG)
#define DDRC_PCFGR_0_REG(base)                   ((base)->PCFGR_0)
#define DDRC_PCFGW_0_REG(base)                   ((base)->PCFGW_0)
#define DDRC_PCTRL_0_REG(base)                   ((base)->PCTRL_0)
#define DDRC_PCFGQOS0_0_REG(base)                ((base)->PCFGQOS0_0)
#define DDRC_PCFGQOS1_0_REG(base)                ((base)->PCFGQOS1_0)
#define DDRC_PCFGWQOS0_0_REG(base)               ((base)->PCFGWQOS0_0)
#define DDRC_PCFGWQOS1_0_REG(base)               ((base)->PCFGWQOS1_0)
#define DDRC_DERATEEN_SHADOW_REG(base)           ((base)->DERATEEN_SHADOW)
#define DDRC_DERATEINT_SHADOW_REG(base)          ((base)->DERATEINT_SHADOW)
#define DDRC_RFSHCTL0_SHADOW_REG(base)           ((base)->RFSHCTL0_SHADOW)
#define DDRC_RFSHTMG_SHADOW_REG(base)            ((base)->RFSHTMG_SHADOW)
#define DDRC_INIT3_SHADOW_REG(base)              ((base)->INIT3_SHADOW)
#define DDRC_INIT4_SHADOW_REG(base)              ((base)->INIT4_SHADOW)
#define DDRC_INIT6_SHADOW_REG(base)              ((base)->INIT6_SHADOW)
#define DDRC_INIT7_SHADOW_REG(base)              ((base)->INIT7_SHADOW)
#define DDRC_DRAMTMG0_SHADOW_REG(base)           ((base)->DRAMTMG0_SHADOW)
#define DDRC_DRAMTMG1_SHADOW_REG(base)           ((base)->DRAMTMG1_SHADOW)
#define DDRC_DRAMTMG2_SHADOW_REG(base)           ((base)->DRAMTMG2_SHADOW)
#define DDRC_DRAMTMG3_SHADOW_REG(base)           ((base)->DRAMTMG3_SHADOW)
#define DDRC_DRAMTMG4_SHADOW_REG(base)           ((base)->DRAMTMG4_SHADOW)
#define DDRC_DRAMTMG5_SHADOW_REG(base)           ((base)->DRAMTMG5_SHADOW)
#define DDRC_DRAMTMG6_SHADOW_REG(base)           ((base)->DRAMTMG6_SHADOW)
#define DDRC_DRAMTMG7_SHADOW_REG(base)           ((base)->DRAMTMG7_SHADOW)
#define DDRC_DRAMTMG8_SHADOW_REG(base)           ((base)->DRAMTMG8_SHADOW)
#define DDRC_DRAMTMG9_SHADOW_REG(base)           ((base)->DRAMTMG9_SHADOW)
#define DDRC_DRAMTMG10_SHADOW_REG(base)          ((base)->DRAMTMG10_SHADOW)
#define DDRC_DRAMTMG11_SHADOW_REG(base)          ((base)->DRAMTMG11_SHADOW)
#define DDRC_DRAMTMG12_SHADOW_REG(base)          ((base)->DRAMTMG12_SHADOW)
#define DDRC_DRAMTMG13_SHADOW_REG(base)          ((base)->DRAMTMG13_SHADOW)
#define DDRC_DRAMTMG14_SHADOW_REG(base)          ((base)->DRAMTMG14_SHADOW)
#define DDRC_DRAMTMG15_SHADOW_REG(base)          ((base)->DRAMTMG15_SHADOW)
#define DDRC_ZQCTL0_SHADOW_REG(base)             ((base)->ZQCTL0_SHADOW)
#define DDRC_DFITMG0_SHADOW_REG(base)            ((base)->DFITMG0_SHADOW)
#define DDRC_DFITMG1_SHADOW_REG(base)            ((base)->DFITMG1_SHADOW)
#define DDRC_DFITMG2_SHADOW_REG(base)            ((base)->DFITMG2_SHADOW)
#define DDRC_DFITMG3_SHADOW_REG(base)            ((base)->DFITMG3_SHADOW)
#define DDRC_ODTCFG_SHADOW_REG(base)             ((base)->ODTCFG_SHADOW)

/*!
 * @}
 */ /* end of group DDRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DDRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_Register_Masks DDRC Register Masks
 * @{
 */

/*! @name MSTR - Master Register0 */
/*! @{ */
#define DDRC_MSTR_ddr3_MASK                      (0x1U)
#define DDRC_MSTR_ddr3_SHIFT                     (0U)
#define DDRC_MSTR_lpddr2_MASK                    (0x4U)
#define DDRC_MSTR_lpddr2_SHIFT                   (2U)
#define DDRC_MSTR_lpddr3_MASK                    (0x8U)
#define DDRC_MSTR_lpddr3_SHIFT                   (3U)
#define DDRC_MSTR_ddr4_MASK                      (0x10U)
#define DDRC_MSTR_ddr4_SHIFT                     (4U)
#define DDRC_MSTR_lpddr4_MASK                    (0x20U)
#define DDRC_MSTR_lpddr4_SHIFT                   (5U)
#define DDRC_MSTR_burstchop_MASK                 (0x200U)
#define DDRC_MSTR_burstchop_SHIFT                (9U)
#define DDRC_MSTR_en_2t_timing_mode_MASK         (0x400U)
#define DDRC_MSTR_en_2t_timing_mode_SHIFT        (10U)
#define DDRC_MSTR_geardown_mode_MASK             (0x800U)
#define DDRC_MSTR_geardown_mode_SHIFT            (11U)
#define DDRC_MSTR_data_bus_width_MASK            (0x3000U)
#define DDRC_MSTR_data_bus_width_SHIFT           (12U)
#define DDRC_MSTR_data_bus_width(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_MSTR_data_bus_width_SHIFT)) & DDRC_MSTR_data_bus_width_MASK)
#define DDRC_MSTR_dll_off_mode_MASK              (0x8000U)
#define DDRC_MSTR_dll_off_mode_SHIFT             (15U)
#define DDRC_MSTR_burst_rdwr_MASK                (0xF0000U)
#define DDRC_MSTR_burst_rdwr_SHIFT               (16U)
/*! burst_rdwr - SDRAM burst length used
 *  0b0001..Burst length of 2 (only supported for mDDR)
 *  0b0010..Burst length of 4
 *  0b0100..Burst length of 8
 *  0b1000..Burst length of 16 (only supported for mDDR, LPDDR2, and LPDDR4)
 */
#define DDRC_MSTR_burst_rdwr(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_MSTR_burst_rdwr_SHIFT)) & DDRC_MSTR_burst_rdwr_MASK)
#define DDRC_MSTR_frequency_ratio_MASK           (0x400000U)
#define DDRC_MSTR_frequency_ratio_SHIFT          (22U)
#define DDRC_MSTR_active_ranks_MASK              (0x3000000U)
#define DDRC_MSTR_active_ranks_SHIFT             (24U)
#define DDRC_MSTR_active_ranks(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_MSTR_active_ranks_SHIFT)) & DDRC_MSTR_active_ranks_MASK)
#define DDRC_MSTR_frequency_mode_MASK            (0x20000000U)
#define DDRC_MSTR_frequency_mode_SHIFT           (29U)
#define DDRC_MSTR_device_config_MASK             (0xC0000000U)
#define DDRC_MSTR_device_config_SHIFT            (30U)
/*! device_config - Indicates the configuration of the device used in the system.
 *  0b00..x4 device
 *  0b01..x8 device
 *  0b10..x16 device
 *  0b11..x32 device
 */
#define DDRC_MSTR_device_config(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_MSTR_device_config_SHIFT)) & DDRC_MSTR_device_config_MASK)
/*! @} */

/*! @name STAT - Operating Mode Status Register */
/*! @{ */
#define DDRC_STAT_operating_mode_MASK            (0x7U)
#define DDRC_STAT_operating_mode_SHIFT           (0U)
#define DDRC_STAT_operating_mode(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_STAT_operating_mode_SHIFT)) & DDRC_STAT_operating_mode_MASK)
#define DDRC_STAT_selfref_type_MASK              (0x30U)
#define DDRC_STAT_selfref_type_SHIFT             (4U)
/*! selfref_type - Flags if Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4) is entered and if
 *    it was under Automatic Self Refresh control only or not.
 *  0b00..SDRAM is not in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4). If retry is enabled by
 *        CRCPARCTRL1.crc_parity_retry_enable, this also indicates SRE command is still in parity error window or retry is
 *        in-progress.
 *  0b11..SDRAM is in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4), which was caused by Automatic Self
 *        Refresh only. If retry is enabled, this guarantees SRE command is executed correctly without parity error.
 *  0b10..SDRAM is in Self Refresh (except LPDDR4) or SR-Powerdown (LPDDR4), which was not caused solely under
 *        Automatic Self Refresh control. It could have been caused by Hardware Low Power Interface and/or Software
 *        (reg_ddrc_selfref_sw). If retry is enabled, this guarantees SRE command is executed correctly without parity
 */
#define DDRC_STAT_selfref_type(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_STAT_selfref_type_SHIFT)) & DDRC_STAT_selfref_type_MASK)
#define DDRC_STAT_selfref_state_MASK             (0x300U)
#define DDRC_STAT_selfref_state_SHIFT            (8U)
/*! selfref_state - Self refresh state. This indicates self refresh or self refresh power down state
 *    for LPDDR4. This register is used for frequency change and MRR/MRW access during self refresh.
 *  0b00..SDRAM is not in Self Refresh.
 *  0b01..Self refresh 1
 *  0b10..Self refresh power down
 *  0b11..Self refresh
 */
#define DDRC_STAT_selfref_state(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_STAT_selfref_state_SHIFT)) & DDRC_STAT_selfref_state_MASK)
/*! @} */

/*! @name MSTR1 - Operating Mode Status Register */
/*! @{ */
#define DDRC_MSTR1_rank_tmgreg_sel_MASK          (0x3U)
#define DDRC_MSTR1_rank_tmgreg_sel_SHIFT         (0U)
/*! rank_tmgreg_sel - rank_tmgreg_sel
 *  0b00..USE DRAMTMGx registers for the rank
 *  0b01..USE MRAMTMGx registers for the rank
 */
#define DDRC_MSTR1_rank_tmgreg_sel(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_MSTR1_rank_tmgreg_sel_SHIFT)) & DDRC_MSTR1_rank_tmgreg_sel_MASK)
#define DDRC_MSTR1_alt_addrmap_en_MASK           (0x10000U)
#define DDRC_MSTR1_alt_addrmap_en_SHIFT          (16U)
/*! @} */

/*! @name MRCTRL3 - Operating Mode Status Register */
/*! @{ */
#define DDRC_MRCTRL3_mr_rank_sel_MASK            (0x3U)
#define DDRC_MRCTRL3_mr_rank_sel_SHIFT           (0U)
#define DDRC_MRCTRL3_mr_rank_sel(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_MRCTRL3_mr_rank_sel_SHIFT)) & DDRC_MRCTRL3_mr_rank_sel_MASK)
/*! @} */

/*! @name MRCTRL0 - Mode Register Read/Write Control Register 0. */
/*! @{ */
#define DDRC_MRCTRL0_mr_type_MASK                (0x1U)
#define DDRC_MRCTRL0_mr_type_SHIFT               (0U)
#define DDRC_MRCTRL0_mpr_en_MASK                 (0x2U)
#define DDRC_MRCTRL0_mpr_en_SHIFT                (1U)
#define DDRC_MRCTRL0_pda_en_MASK                 (0x4U)
#define DDRC_MRCTRL0_pda_en_SHIFT                (2U)
#define DDRC_MRCTRL0_sw_init_int_MASK            (0x8U)
#define DDRC_MRCTRL0_sw_init_int_SHIFT           (3U)
#define DDRC_MRCTRL0_mr_rank_MASK                (0x30U)
#define DDRC_MRCTRL0_mr_rank_SHIFT               (4U)
#define DDRC_MRCTRL0_mr_rank(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_MRCTRL0_mr_rank_SHIFT)) & DDRC_MRCTRL0_mr_rank_MASK)
#define DDRC_MRCTRL0_mr_addr_MASK                (0xF000U)
#define DDRC_MRCTRL0_mr_addr_SHIFT               (12U)
/*! mr_addr - Address of the mode register that is to be written to.
 *  0b0000..MR0
 *  0b0001..MR1
 *  0b0010..MR2
 *  0b0011..MR3
 *  0b0100..MR4
 *  0b0101..MR5
 *  0b0110..MR6
 *  0b0111..MR7
 */
#define DDRC_MRCTRL0_mr_addr(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_MRCTRL0_mr_addr_SHIFT)) & DDRC_MRCTRL0_mr_addr_MASK)
#define DDRC_MRCTRL0_pba_mode_MASK               (0x40000000U)
#define DDRC_MRCTRL0_pba_mode_SHIFT              (30U)
#define DDRC_MRCTRL0_mr_wr_MASK                  (0x80000000U)
#define DDRC_MRCTRL0_mr_wr_SHIFT                 (31U)
/*! @} */

/*! @name MRCTRL1 - Mode Register Read/Write Control Register 1 */
/*! @{ */
#define DDRC_MRCTRL1_mr_data_MASK                (0x3FFFFU)
#define DDRC_MRCTRL1_mr_data_SHIFT               (0U)
#define DDRC_MRCTRL1_mr_data(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_MRCTRL1_mr_data_SHIFT)) & DDRC_MRCTRL1_mr_data_MASK)
/*! @} */

/*! @name MRSTAT - Mode Register Read/Write Status Register */
/*! @{ */
#define DDRC_MRSTAT_mr_wr_busy_MASK              (0x1U)
#define DDRC_MRSTAT_mr_wr_busy_SHIFT             (0U)
#define DDRC_MRSTAT_pda_done_MASK                (0x100U)
#define DDRC_MRSTAT_pda_done_SHIFT               (8U)
/*! @} */

/*! @name MRCTRL2 - Mode Register Read/Write Control Register 2 */
/*! @{ */
#define DDRC_MRCTRL2_mr_device_sel_MASK          (0xFFFFFFFFU)
#define DDRC_MRCTRL2_mr_device_sel_SHIFT         (0U)
#define DDRC_MRCTRL2_mr_device_sel(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_MRCTRL2_mr_device_sel_SHIFT)) & DDRC_MRCTRL2_mr_device_sel_MASK)
/*! @} */

/*! @name DERATEEN - Temperature Derate Enable Register */
/*! @{ */
#define DDRC_DERATEEN_derate_enable_MASK         (0x1U)
#define DDRC_DERATEEN_derate_enable_SHIFT        (0U)
#define DDRC_DERATEEN_derate_value_MASK          (0x2U)
#define DDRC_DERATEEN_derate_value_SHIFT         (1U)
#define DDRC_DERATEEN_derate_byte_MASK           (0xF0U)
#define DDRC_DERATEEN_derate_byte_SHIFT          (4U)
#define DDRC_DERATEEN_derate_byte(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEEN_derate_byte_SHIFT)) & DDRC_DERATEEN_derate_byte_MASK)
#define DDRC_DERATEEN_rc_derate_value_MASK       (0x300U)
#define DDRC_DERATEEN_rc_derate_value_SHIFT      (8U)
/*! rc_derate_value - Derate value of tRC for LPDDR4. Present only in designs configured to support
 *    LPDDR4. The required number of cycles for derating can be determined by dividing 3.75ns by the
 *    core_ddrc_core_clk period, and rounding up the next integer.
 *  0b00..Derating uses +1
 *  0b01..Derating uses +2
 *  0b10..Derating uses +3
 *  0b11..Derating uses +4
 */
#define DDRC_DERATEEN_rc_derate_value(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEEN_rc_derate_value_SHIFT)) & DDRC_DERATEEN_rc_derate_value_MASK)
/*! @} */

/*! @name DERATEINT - Temperature Derate Interval Register */
/*! @{ */
#define DDRC_DERATEINT_mr4_read_interval_MASK    (0xFFFFFFFFU)
#define DDRC_DERATEINT_mr4_read_interval_SHIFT   (0U)
#define DDRC_DERATEINT_mr4_read_interval(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEINT_mr4_read_interval_SHIFT)) & DDRC_DERATEINT_mr4_read_interval_MASK)
/*! @} */

/*! @name PWRCTL - Low Power Control Register */
/*! @{ */
#define DDRC_PWRCTL_selfref_en_MASK              (0x1U)
#define DDRC_PWRCTL_selfref_en_SHIFT             (0U)
#define DDRC_PWRCTL_powerdown_en_MASK            (0x2U)
#define DDRC_PWRCTL_powerdown_en_SHIFT           (1U)
#define DDRC_PWRCTL_deeppowerdown_en_MASK        (0x4U)
#define DDRC_PWRCTL_deeppowerdown_en_SHIFT       (2U)
#define DDRC_PWRCTL_en_dfi_dram_clk_disable_MASK (0x8U)
#define DDRC_PWRCTL_en_dfi_dram_clk_disable_SHIFT (3U)
#define DDRC_PWRCTL_mpsm_en_MASK                 (0x10U)
#define DDRC_PWRCTL_mpsm_en_SHIFT                (4U)
#define DDRC_PWRCTL_selfref_sw_MASK              (0x20U)
#define DDRC_PWRCTL_selfref_sw_SHIFT             (5U)
#define DDRC_PWRCTL_stay_in_selfref_MASK         (0x40U)
#define DDRC_PWRCTL_stay_in_selfref_SHIFT        (6U)
/*! @} */

/*! @name PWRTMG - Low Power Timing Register */
/*! @{ */
#define DDRC_PWRTMG_powerdown_to_x32_MASK        (0x1FU)
#define DDRC_PWRTMG_powerdown_to_x32_SHIFT       (0U)
#define DDRC_PWRTMG_powerdown_to_x32(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_PWRTMG_powerdown_to_x32_SHIFT)) & DDRC_PWRTMG_powerdown_to_x32_MASK)
#define DDRC_PWRTMG_t_dpd_x4096_MASK             (0xFF00U)
#define DDRC_PWRTMG_t_dpd_x4096_SHIFT            (8U)
#define DDRC_PWRTMG_t_dpd_x4096(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_PWRTMG_t_dpd_x4096_SHIFT)) & DDRC_PWRTMG_t_dpd_x4096_MASK)
#define DDRC_PWRTMG_selfref_to_x32_MASK          (0xFF0000U)
#define DDRC_PWRTMG_selfref_to_x32_SHIFT         (16U)
#define DDRC_PWRTMG_selfref_to_x32(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_PWRTMG_selfref_to_x32_SHIFT)) & DDRC_PWRTMG_selfref_to_x32_MASK)
/*! @} */

/*! @name HWLPCTL - Hardware Low Power Control Register */
/*! @{ */
#define DDRC_HWLPCTL_hw_lp_en_MASK               (0x1U)
#define DDRC_HWLPCTL_hw_lp_en_SHIFT              (0U)
#define DDRC_HWLPCTL_hw_lp_exit_idle_en_MASK     (0x2U)
#define DDRC_HWLPCTL_hw_lp_exit_idle_en_SHIFT    (1U)
#define DDRC_HWLPCTL_hw_lp_idle_x32_MASK         (0xFFF0000U)
#define DDRC_HWLPCTL_hw_lp_idle_x32_SHIFT        (16U)
#define DDRC_HWLPCTL_hw_lp_idle_x32(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_HWLPCTL_hw_lp_idle_x32_SHIFT)) & DDRC_HWLPCTL_hw_lp_idle_x32_MASK)
/*! @} */

/*! @name RFSHCTL0 - Refresh Control Register 0 */
/*! @{ */
#define DDRC_RFSHCTL0_per_bank_refresh_MASK      (0x4U)
#define DDRC_RFSHCTL0_per_bank_refresh_SHIFT     (2U)
#define DDRC_RFSHCTL0_refresh_burst_MASK         (0x1F0U)
#define DDRC_RFSHCTL0_refresh_burst_SHIFT        (4U)
#define DDRC_RFSHCTL0_refresh_burst(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_refresh_burst_SHIFT)) & DDRC_RFSHCTL0_refresh_burst_MASK)
#define DDRC_RFSHCTL0_refresh_to_x32_MASK        (0x1F000U)
#define DDRC_RFSHCTL0_refresh_to_x32_SHIFT       (12U)
#define DDRC_RFSHCTL0_refresh_to_x32(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_refresh_to_x32_SHIFT)) & DDRC_RFSHCTL0_refresh_to_x32_MASK)
#define DDRC_RFSHCTL0_refresh_margin_MASK        (0xF00000U)
#define DDRC_RFSHCTL0_refresh_margin_SHIFT       (20U)
#define DDRC_RFSHCTL0_refresh_margin(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_refresh_margin_SHIFT)) & DDRC_RFSHCTL0_refresh_margin_MASK)
/*! @} */

/*! @name RFSHCTL1 - Refresh Control Register 1 */
/*! @{ */
#define DDRC_RFSHCTL1_refresh_timer0_start_value_x32_MASK (0xFFFU)
#define DDRC_RFSHCTL1_refresh_timer0_start_value_x32_SHIFT (0U)
#define DDRC_RFSHCTL1_refresh_timer0_start_value_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL1_refresh_timer0_start_value_x32_SHIFT)) & DDRC_RFSHCTL1_refresh_timer0_start_value_x32_MASK)
#define DDRC_RFSHCTL1_refresh_timer1_start_value_x32_MASK (0xFFF0000U)
#define DDRC_RFSHCTL1_refresh_timer1_start_value_x32_SHIFT (16U)
#define DDRC_RFSHCTL1_refresh_timer1_start_value_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL1_refresh_timer1_start_value_x32_SHIFT)) & DDRC_RFSHCTL1_refresh_timer1_start_value_x32_MASK)
/*! @} */

/*! @name RFSHCTL3 - Refresh Control Register 3 */
/*! @{ */
#define DDRC_RFSHCTL3_dis_auto_refresh_MASK      (0x1U)
#define DDRC_RFSHCTL3_dis_auto_refresh_SHIFT     (0U)
#define DDRC_RFSHCTL3_refresh_update_level_MASK  (0x2U)
#define DDRC_RFSHCTL3_refresh_update_level_SHIFT (1U)
#define DDRC_RFSHCTL3_refresh_mode_MASK          (0x70U)
#define DDRC_RFSHCTL3_refresh_mode_SHIFT         (4U)
#define DDRC_RFSHCTL3_refresh_mode(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL3_refresh_mode_SHIFT)) & DDRC_RFSHCTL3_refresh_mode_MASK)
/*! @} */

/*! @name RFSHTMG - Refresh Timing Register */
/*! @{ */
#define DDRC_RFSHTMG_t_rfc_min_MASK              (0x3FFU)
#define DDRC_RFSHTMG_t_rfc_min_SHIFT             (0U)
#define DDRC_RFSHTMG_t_rfc_min(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHTMG_t_rfc_min_SHIFT)) & DDRC_RFSHTMG_t_rfc_min_MASK)
#define DDRC_RFSHTMG_lpddr3_trefbw_en_MASK       (0x8000U)
#define DDRC_RFSHTMG_lpddr3_trefbw_en_SHIFT      (15U)
#define DDRC_RFSHTMG_t_rfc_nom_x32_MASK          (0xFFF0000U)
#define DDRC_RFSHTMG_t_rfc_nom_x32_SHIFT         (16U)
#define DDRC_RFSHTMG_t_rfc_nom_x32(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHTMG_t_rfc_nom_x32_SHIFT)) & DDRC_RFSHTMG_t_rfc_nom_x32_MASK)
/*! @} */

/*! @name INIT0 - SDRAM Initialization Register 0 */
/*! @{ */
#define DDRC_INIT0_pre_cke_x1024_MASK            (0xFFFU)
#define DDRC_INIT0_pre_cke_x1024_SHIFT           (0U)
#define DDRC_INIT0_pre_cke_x1024(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_INIT0_pre_cke_x1024_SHIFT)) & DDRC_INIT0_pre_cke_x1024_MASK)
#define DDRC_INIT0_post_cke_x1024_MASK           (0x3FF0000U)
#define DDRC_INIT0_post_cke_x1024_SHIFT          (16U)
#define DDRC_INIT0_post_cke_x1024(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_INIT0_post_cke_x1024_SHIFT)) & DDRC_INIT0_post_cke_x1024_MASK)
#define DDRC_INIT0_skip_dram_init_MASK           (0xC0000000U)
#define DDRC_INIT0_skip_dram_init_SHIFT          (30U)
/*! skip_dram_init - If lower bit is enabled the SDRAM initialization routine is skipped. The upper
 *    bit decides what state the controller starts up in when reset is removed - 00 - SDRAM
 *    Intialization routine is run after power-up - 01 - SDRAM Initialization routine is skipped after
 *    power-up. Controller starts up in Normal Mode - 11 - SDRAM Initialization routine is skipped after
 *    power-up. Controller starts up in Self-refresh Mode - 10 - SDRAM Initialization routine is run
 *    after power-up.
 *  0b00..SDRAM Initialization routine is run after power-up
 *  0b01..SDRAM Initialization routine is skipped after power-up
 *  0b10..SDRAM Initialization routine is run after power-up
 *  0b11..SDRAM Initialization routine is skipped after power-up
 */
#define DDRC_INIT0_skip_dram_init(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_INIT0_skip_dram_init_SHIFT)) & DDRC_INIT0_skip_dram_init_MASK)
/*! @} */

/*! @name INIT1 - SDRAM Initialization Register 1 */
/*! @{ */
#define DDRC_INIT1_pre_ocd_x32_MASK              (0xFU)
#define DDRC_INIT1_pre_ocd_x32_SHIFT             (0U)
#define DDRC_INIT1_pre_ocd_x32(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_INIT1_pre_ocd_x32_SHIFT)) & DDRC_INIT1_pre_ocd_x32_MASK)
#define DDRC_INIT1_dram_rstn_x1024_MASK          (0x1FF0000U)
#define DDRC_INIT1_dram_rstn_x1024_SHIFT         (16U)
#define DDRC_INIT1_dram_rstn_x1024(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_INIT1_dram_rstn_x1024_SHIFT)) & DDRC_INIT1_dram_rstn_x1024_MASK)
/*! @} */

/*! @name INIT2 - SDRAM Initialization Register 2 */
/*! @{ */
#define DDRC_INIT2_min_stable_clock_x1_MASK      (0xFU)
#define DDRC_INIT2_min_stable_clock_x1_SHIFT     (0U)
#define DDRC_INIT2_min_stable_clock_x1(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT2_min_stable_clock_x1_SHIFT)) & DDRC_INIT2_min_stable_clock_x1_MASK)
#define DDRC_INIT2_idle_after_reset_x32_MASK     (0xFF00U)
#define DDRC_INIT2_idle_after_reset_x32_SHIFT    (8U)
#define DDRC_INIT2_idle_after_reset_x32(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_INIT2_idle_after_reset_x32_SHIFT)) & DDRC_INIT2_idle_after_reset_x32_MASK)
/*! @} */

/*! @name INIT3 - SDRAM Initialization Register 3 */
/*! @{ */
#define DDRC_INIT3_emr_MASK                      (0xFFFFU)
#define DDRC_INIT3_emr_SHIFT                     (0U)
#define DDRC_INIT3_emr(x)                        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT3_emr_SHIFT)) & DDRC_INIT3_emr_MASK)
#define DDRC_INIT3_mr_MASK                       (0xFFFF0000U)
#define DDRC_INIT3_mr_SHIFT                      (16U)
#define DDRC_INIT3_mr(x)                         (((uint32_t)(((uint32_t)(x)) << DDRC_INIT3_mr_SHIFT)) & DDRC_INIT3_mr_MASK)
/*! @} */

/*! @name INIT4 - SDRAM Initialization Register 4 */
/*! @{ */
#define DDRC_INIT4_emr3_MASK                     (0xFFFFU)
#define DDRC_INIT4_emr3_SHIFT                    (0U)
#define DDRC_INIT4_emr3(x)                       (((uint32_t)(((uint32_t)(x)) << DDRC_INIT4_emr3_SHIFT)) & DDRC_INIT4_emr3_MASK)
#define DDRC_INIT4_emr2_MASK                     (0xFFFF0000U)
#define DDRC_INIT4_emr2_SHIFT                    (16U)
#define DDRC_INIT4_emr2(x)                       (((uint32_t)(((uint32_t)(x)) << DDRC_INIT4_emr2_SHIFT)) & DDRC_INIT4_emr2_MASK)
/*! @} */

/*! @name INIT5 - SDRAM Initialization Register 5 */
/*! @{ */
#define DDRC_INIT5_max_auto_init_x1024_MASK      (0x3FFU)
#define DDRC_INIT5_max_auto_init_x1024_SHIFT     (0U)
#define DDRC_INIT5_max_auto_init_x1024(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT5_max_auto_init_x1024_SHIFT)) & DDRC_INIT5_max_auto_init_x1024_MASK)
#define DDRC_INIT5_dev_zqinit_x32_MASK           (0xFF0000U)
#define DDRC_INIT5_dev_zqinit_x32_SHIFT          (16U)
#define DDRC_INIT5_dev_zqinit_x32(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_INIT5_dev_zqinit_x32_SHIFT)) & DDRC_INIT5_dev_zqinit_x32_MASK)
/*! @} */

/*! @name INIT6 - SDRAM Initialization Register 6 */
/*! @{ */
#define DDRC_INIT6_mr5_MASK                      (0xFFFFU)
#define DDRC_INIT6_mr5_SHIFT                     (0U)
#define DDRC_INIT6_mr5(x)                        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT6_mr5_SHIFT)) & DDRC_INIT6_mr5_MASK)
#define DDRC_INIT6_mr4_MASK                      (0xFFFF0000U)
#define DDRC_INIT6_mr4_SHIFT                     (16U)
#define DDRC_INIT6_mr4(x)                        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT6_mr4_SHIFT)) & DDRC_INIT6_mr4_MASK)
/*! @} */

/*! @name INIT7 - SDRAM Initialization Register 7 */
/*! @{ */
#define DDRC_INIT7_mr6_MASK                      (0xFFFF0000U)
#define DDRC_INIT7_mr6_SHIFT                     (16U)
#define DDRC_INIT7_mr6(x)                        (((uint32_t)(((uint32_t)(x)) << DDRC_INIT7_mr6_SHIFT)) & DDRC_INIT7_mr6_MASK)
/*! @} */

/*! @name DIMMCTL - DIMM Control Register */
/*! @{ */
#define DDRC_DIMMCTL_dimm_stagger_cs_en_MASK     (0x1U)
#define DDRC_DIMMCTL_dimm_stagger_cs_en_SHIFT    (0U)
#define DDRC_DIMMCTL_dimm_addr_mirr_en_MASK      (0x2U)
#define DDRC_DIMMCTL_dimm_addr_mirr_en_SHIFT     (1U)
#define DDRC_DIMMCTL_dimm_output_inv_en_MASK     (0x4U)
#define DDRC_DIMMCTL_dimm_output_inv_en_SHIFT    (2U)
#define DDRC_DIMMCTL_mrs_a17_en_MASK             (0x8U)
#define DDRC_DIMMCTL_mrs_a17_en_SHIFT            (3U)
#define DDRC_DIMMCTL_mrs_bg1_en_MASK             (0x10U)
#define DDRC_DIMMCTL_mrs_bg1_en_SHIFT            (4U)
#define DDRC_DIMMCTL_dimm_dis_bg_mirroring_MASK  (0x20U)
#define DDRC_DIMMCTL_dimm_dis_bg_mirroring_SHIFT (5U)
#define DDRC_DIMMCTL_lrdimm_bcom_cmd_prot_MASK   (0x40U)
#define DDRC_DIMMCTL_lrdimm_bcom_cmd_prot_SHIFT  (6U)
/*! @} */

/*! @name RANKCTL - Rank Control Register */
/*! @{ */
#define DDRC_RANKCTL_max_rank_rd_MASK            (0xFU)
#define DDRC_RANKCTL_max_rank_rd_SHIFT           (0U)
#define DDRC_RANKCTL_max_rank_rd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_RANKCTL_max_rank_rd_SHIFT)) & DDRC_RANKCTL_max_rank_rd_MASK)
#define DDRC_RANKCTL_diff_rank_rd_gap_MASK       (0xF0U)
#define DDRC_RANKCTL_diff_rank_rd_gap_SHIFT      (4U)
#define DDRC_RANKCTL_diff_rank_rd_gap(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_RANKCTL_diff_rank_rd_gap_SHIFT)) & DDRC_RANKCTL_diff_rank_rd_gap_MASK)
#define DDRC_RANKCTL_diff_rank_wr_gap_MASK       (0xF00U)
#define DDRC_RANKCTL_diff_rank_wr_gap_SHIFT      (8U)
#define DDRC_RANKCTL_diff_rank_wr_gap(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_RANKCTL_diff_rank_wr_gap_SHIFT)) & DDRC_RANKCTL_diff_rank_wr_gap_MASK)
/*! @} */

/*! @name DRAMTMG0 - SDRAM Timing Register 0 */
/*! @{ */
#define DDRC_DRAMTMG0_t_ras_min_MASK             (0x3FU)
#define DDRC_DRAMTMG0_t_ras_min_SHIFT            (0U)
#define DDRC_DRAMTMG0_t_ras_min(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_t_ras_min_SHIFT)) & DDRC_DRAMTMG0_t_ras_min_MASK)
#define DDRC_DRAMTMG0_t_ras_max_MASK             (0x7F00U)
#define DDRC_DRAMTMG0_t_ras_max_SHIFT            (8U)
#define DDRC_DRAMTMG0_t_ras_max(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_t_ras_max_SHIFT)) & DDRC_DRAMTMG0_t_ras_max_MASK)
#define DDRC_DRAMTMG0_t_faw_MASK                 (0x3F0000U)
#define DDRC_DRAMTMG0_t_faw_SHIFT                (16U)
#define DDRC_DRAMTMG0_t_faw(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_t_faw_SHIFT)) & DDRC_DRAMTMG0_t_faw_MASK)
#define DDRC_DRAMTMG0_wr2pre_MASK                (0x7F000000U)
#define DDRC_DRAMTMG0_wr2pre_SHIFT               (24U)
#define DDRC_DRAMTMG0_wr2pre(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_wr2pre_SHIFT)) & DDRC_DRAMTMG0_wr2pre_MASK)
/*! @} */

/*! @name DRAMTMG1 - SDRAM Timing Register 1 */
/*! @{ */
#define DDRC_DRAMTMG1_t_rc_MASK                  (0x7FU)
#define DDRC_DRAMTMG1_t_rc_SHIFT                 (0U)
#define DDRC_DRAMTMG1_t_rc(x)                    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_t_rc_SHIFT)) & DDRC_DRAMTMG1_t_rc_MASK)
#define DDRC_DRAMTMG1_rd2pre_MASK                (0x3F00U)
#define DDRC_DRAMTMG1_rd2pre_SHIFT               (8U)
#define DDRC_DRAMTMG1_rd2pre(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_rd2pre_SHIFT)) & DDRC_DRAMTMG1_rd2pre_MASK)
#define DDRC_DRAMTMG1_t_xp_MASK                  (0x1F0000U)
#define DDRC_DRAMTMG1_t_xp_SHIFT                 (16U)
#define DDRC_DRAMTMG1_t_xp(x)                    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_t_xp_SHIFT)) & DDRC_DRAMTMG1_t_xp_MASK)
/*! @} */

/*! @name DRAMTMG2 - SDRAM Timing Register 2 */
/*! @{ */
#define DDRC_DRAMTMG2_wr2rd_MASK                 (0x3FU)
#define DDRC_DRAMTMG2_wr2rd_SHIFT                (0U)
#define DDRC_DRAMTMG2_wr2rd(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_wr2rd_SHIFT)) & DDRC_DRAMTMG2_wr2rd_MASK)
#define DDRC_DRAMTMG2_rd2wr_MASK                 (0x3F00U)
#define DDRC_DRAMTMG2_rd2wr_SHIFT                (8U)
#define DDRC_DRAMTMG2_rd2wr(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_rd2wr_SHIFT)) & DDRC_DRAMTMG2_rd2wr_MASK)
#define DDRC_DRAMTMG2_read_latency_MASK          (0x3F0000U)
#define DDRC_DRAMTMG2_read_latency_SHIFT         (16U)
#define DDRC_DRAMTMG2_read_latency(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_read_latency_SHIFT)) & DDRC_DRAMTMG2_read_latency_MASK)
#define DDRC_DRAMTMG2_write_latency_MASK         (0x3F000000U)
#define DDRC_DRAMTMG2_write_latency_SHIFT        (24U)
#define DDRC_DRAMTMG2_write_latency(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_write_latency_SHIFT)) & DDRC_DRAMTMG2_write_latency_MASK)
/*! @} */

/*! @name DRAMTMG3 - SDRAM Timing Register 3 */
/*! @{ */
#define DDRC_DRAMTMG3_t_mod_MASK                 (0x3FFU)
#define DDRC_DRAMTMG3_t_mod_SHIFT                (0U)
#define DDRC_DRAMTMG3_t_mod(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_t_mod_SHIFT)) & DDRC_DRAMTMG3_t_mod_MASK)
#define DDRC_DRAMTMG3_t_mrd_MASK                 (0x3F000U)
#define DDRC_DRAMTMG3_t_mrd_SHIFT                (12U)
#define DDRC_DRAMTMG3_t_mrd(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_t_mrd_SHIFT)) & DDRC_DRAMTMG3_t_mrd_MASK)
#define DDRC_DRAMTMG3_t_mrw_MASK                 (0x3FF00000U)
#define DDRC_DRAMTMG3_t_mrw_SHIFT                (20U)
#define DDRC_DRAMTMG3_t_mrw(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_t_mrw_SHIFT)) & DDRC_DRAMTMG3_t_mrw_MASK)
/*! @} */

/*! @name DRAMTMG4 - SDRAM Timing Register 4 */
/*! @{ */
#define DDRC_DRAMTMG4_t_rp_MASK                  (0x1FU)
#define DDRC_DRAMTMG4_t_rp_SHIFT                 (0U)
#define DDRC_DRAMTMG4_t_rp(x)                    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_t_rp_SHIFT)) & DDRC_DRAMTMG4_t_rp_MASK)
#define DDRC_DRAMTMG4_t_rrd_MASK                 (0xF00U)
#define DDRC_DRAMTMG4_t_rrd_SHIFT                (8U)
#define DDRC_DRAMTMG4_t_rrd(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_t_rrd_SHIFT)) & DDRC_DRAMTMG4_t_rrd_MASK)
#define DDRC_DRAMTMG4_t_ccd_MASK                 (0xF0000U)
#define DDRC_DRAMTMG4_t_ccd_SHIFT                (16U)
#define DDRC_DRAMTMG4_t_ccd(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_t_ccd_SHIFT)) & DDRC_DRAMTMG4_t_ccd_MASK)
#define DDRC_DRAMTMG4_t_rcd_MASK                 (0x1F000000U)
#define DDRC_DRAMTMG4_t_rcd_SHIFT                (24U)
#define DDRC_DRAMTMG4_t_rcd(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_t_rcd_SHIFT)) & DDRC_DRAMTMG4_t_rcd_MASK)
/*! @} */

/*! @name DRAMTMG5 - SDRAM Timing Register 5 */
/*! @{ */
#define DDRC_DRAMTMG5_t_cke_MASK                 (0x1FU)
#define DDRC_DRAMTMG5_t_cke_SHIFT                (0U)
#define DDRC_DRAMTMG5_t_cke(x)                   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_t_cke_SHIFT)) & DDRC_DRAMTMG5_t_cke_MASK)
#define DDRC_DRAMTMG5_t_ckesr_MASK               (0x3F00U)
#define DDRC_DRAMTMG5_t_ckesr_SHIFT              (8U)
#define DDRC_DRAMTMG5_t_ckesr(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_t_ckesr_SHIFT)) & DDRC_DRAMTMG5_t_ckesr_MASK)
#define DDRC_DRAMTMG5_t_cksre_MASK               (0xF0000U)
#define DDRC_DRAMTMG5_t_cksre_SHIFT              (16U)
#define DDRC_DRAMTMG5_t_cksre(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_t_cksre_SHIFT)) & DDRC_DRAMTMG5_t_cksre_MASK)
#define DDRC_DRAMTMG5_t_cksrx_MASK               (0xF000000U)
#define DDRC_DRAMTMG5_t_cksrx_SHIFT              (24U)
#define DDRC_DRAMTMG5_t_cksrx(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_t_cksrx_SHIFT)) & DDRC_DRAMTMG5_t_cksrx_MASK)
/*! @} */

/*! @name DRAMTMG6 - SDRAM Timing Register 6 */
/*! @{ */
#define DDRC_DRAMTMG6_t_ckcsx_MASK               (0xFU)
#define DDRC_DRAMTMG6_t_ckcsx_SHIFT              (0U)
#define DDRC_DRAMTMG6_t_ckcsx(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_t_ckcsx_SHIFT)) & DDRC_DRAMTMG6_t_ckcsx_MASK)
#define DDRC_DRAMTMG6_t_ckdpdx_MASK              (0xF0000U)
#define DDRC_DRAMTMG6_t_ckdpdx_SHIFT             (16U)
#define DDRC_DRAMTMG6_t_ckdpdx(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_t_ckdpdx_SHIFT)) & DDRC_DRAMTMG6_t_ckdpdx_MASK)
#define DDRC_DRAMTMG6_t_ckdpde_MASK              (0xF000000U)
#define DDRC_DRAMTMG6_t_ckdpde_SHIFT             (24U)
#define DDRC_DRAMTMG6_t_ckdpde(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_t_ckdpde_SHIFT)) & DDRC_DRAMTMG6_t_ckdpde_MASK)
/*! @} */

/*! @name DRAMTMG7 - SDRAM Timing Register 7 */
/*! @{ */
#define DDRC_DRAMTMG7_t_ckpdx_MASK               (0xFU)
#define DDRC_DRAMTMG7_t_ckpdx_SHIFT              (0U)
#define DDRC_DRAMTMG7_t_ckpdx(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG7_t_ckpdx_SHIFT)) & DDRC_DRAMTMG7_t_ckpdx_MASK)
#define DDRC_DRAMTMG7_t_ckpde_MASK               (0xF00U)
#define DDRC_DRAMTMG7_t_ckpde_SHIFT              (8U)
#define DDRC_DRAMTMG7_t_ckpde(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG7_t_ckpde_SHIFT)) & DDRC_DRAMTMG7_t_ckpde_MASK)
/*! @} */

/*! @name DRAMTMG8 - SDRAM Timing Register 8 */
/*! @{ */
#define DDRC_DRAMTMG8_t_xs_x32_MASK              (0x7FU)
#define DDRC_DRAMTMG8_t_xs_x32_SHIFT             (0U)
#define DDRC_DRAMTMG8_t_xs_x32(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_t_xs_x32_SHIFT)) & DDRC_DRAMTMG8_t_xs_x32_MASK)
#define DDRC_DRAMTMG8_t_xs_dll_x32_MASK          (0x7F00U)
#define DDRC_DRAMTMG8_t_xs_dll_x32_SHIFT         (8U)
#define DDRC_DRAMTMG8_t_xs_dll_x32(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_t_xs_dll_x32_SHIFT)) & DDRC_DRAMTMG8_t_xs_dll_x32_MASK)
#define DDRC_DRAMTMG8_t_xs_abort_x32_MASK        (0x7F0000U)
#define DDRC_DRAMTMG8_t_xs_abort_x32_SHIFT       (16U)
#define DDRC_DRAMTMG8_t_xs_abort_x32(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_t_xs_abort_x32_SHIFT)) & DDRC_DRAMTMG8_t_xs_abort_x32_MASK)
#define DDRC_DRAMTMG8_t_xs_fast_x32_MASK         (0x7F000000U)
#define DDRC_DRAMTMG8_t_xs_fast_x32_SHIFT        (24U)
#define DDRC_DRAMTMG8_t_xs_fast_x32(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_t_xs_fast_x32_SHIFT)) & DDRC_DRAMTMG8_t_xs_fast_x32_MASK)
/*! @} */

/*! @name DRAMTMG9 - SDRAM Timing Register 9 */
/*! @{ */
#define DDRC_DRAMTMG9_wr2rd_s_MASK               (0x3FU)
#define DDRC_DRAMTMG9_wr2rd_s_SHIFT              (0U)
#define DDRC_DRAMTMG9_wr2rd_s(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_wr2rd_s_SHIFT)) & DDRC_DRAMTMG9_wr2rd_s_MASK)
#define DDRC_DRAMTMG9_t_rrd_s_MASK               (0xF00U)
#define DDRC_DRAMTMG9_t_rrd_s_SHIFT              (8U)
#define DDRC_DRAMTMG9_t_rrd_s(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_t_rrd_s_SHIFT)) & DDRC_DRAMTMG9_t_rrd_s_MASK)
#define DDRC_DRAMTMG9_t_ccd_s_MASK               (0x70000U)
#define DDRC_DRAMTMG9_t_ccd_s_SHIFT              (16U)
#define DDRC_DRAMTMG9_t_ccd_s(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_t_ccd_s_SHIFT)) & DDRC_DRAMTMG9_t_ccd_s_MASK)
#define DDRC_DRAMTMG9_ddr4_wr_preamble_MASK      (0x40000000U)
#define DDRC_DRAMTMG9_ddr4_wr_preamble_SHIFT     (30U)
/*! @} */

/*! @name DRAMTMG10 - SDRAM Timing Register 10 */
/*! @{ */
#define DDRC_DRAMTMG10_t_gear_hold_MASK          (0x3U)
#define DDRC_DRAMTMG10_t_gear_hold_SHIFT         (0U)
#define DDRC_DRAMTMG10_t_gear_hold(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_t_gear_hold_SHIFT)) & DDRC_DRAMTMG10_t_gear_hold_MASK)
#define DDRC_DRAMTMG10_t_gear_setup_MASK         (0xCU)
#define DDRC_DRAMTMG10_t_gear_setup_SHIFT        (2U)
#define DDRC_DRAMTMG10_t_gear_setup(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_t_gear_setup_SHIFT)) & DDRC_DRAMTMG10_t_gear_setup_MASK)
#define DDRC_DRAMTMG10_t_cmd_gear_MASK           (0x1F00U)
#define DDRC_DRAMTMG10_t_cmd_gear_SHIFT          (8U)
#define DDRC_DRAMTMG10_t_cmd_gear(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_t_cmd_gear_SHIFT)) & DDRC_DRAMTMG10_t_cmd_gear_MASK)
#define DDRC_DRAMTMG10_t_sync_gear_MASK          (0x1F0000U)
#define DDRC_DRAMTMG10_t_sync_gear_SHIFT         (16U)
#define DDRC_DRAMTMG10_t_sync_gear(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_t_sync_gear_SHIFT)) & DDRC_DRAMTMG10_t_sync_gear_MASK)
/*! @} */

/*! @name DRAMTMG11 - SDRAM Timing Register 11 */
/*! @{ */
#define DDRC_DRAMTMG11_t_ckmpe_MASK              (0x1FU)
#define DDRC_DRAMTMG11_t_ckmpe_SHIFT             (0U)
#define DDRC_DRAMTMG11_t_ckmpe(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_t_ckmpe_SHIFT)) & DDRC_DRAMTMG11_t_ckmpe_MASK)
#define DDRC_DRAMTMG11_t_mpx_s_MASK              (0x300U)
#define DDRC_DRAMTMG11_t_mpx_s_SHIFT             (8U)
#define DDRC_DRAMTMG11_t_mpx_s(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_t_mpx_s_SHIFT)) & DDRC_DRAMTMG11_t_mpx_s_MASK)
#define DDRC_DRAMTMG11_t_mpx_lh_MASK             (0x1F0000U)
#define DDRC_DRAMTMG11_t_mpx_lh_SHIFT            (16U)
#define DDRC_DRAMTMG11_t_mpx_lh(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_t_mpx_lh_SHIFT)) & DDRC_DRAMTMG11_t_mpx_lh_MASK)
#define DDRC_DRAMTMG11_post_mpsm_gap_x32_MASK    (0x7F000000U)
#define DDRC_DRAMTMG11_post_mpsm_gap_x32_SHIFT   (24U)
#define DDRC_DRAMTMG11_post_mpsm_gap_x32(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_post_mpsm_gap_x32_SHIFT)) & DDRC_DRAMTMG11_post_mpsm_gap_x32_MASK)
/*! @} */

/*! @name DRAMTMG12 - SDRAM Timing Register 12 */
/*! @{ */
#define DDRC_DRAMTMG12_t_mrd_pda_MASK            (0x1FU)
#define DDRC_DRAMTMG12_t_mrd_pda_SHIFT           (0U)
#define DDRC_DRAMTMG12_t_mrd_pda(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_t_mrd_pda_SHIFT)) & DDRC_DRAMTMG12_t_mrd_pda_MASK)
#define DDRC_DRAMTMG12_t_ckehcmd_MASK            (0xF00U)
#define DDRC_DRAMTMG12_t_ckehcmd_SHIFT           (8U)
#define DDRC_DRAMTMG12_t_ckehcmd(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_t_ckehcmd_SHIFT)) & DDRC_DRAMTMG12_t_ckehcmd_MASK)
#define DDRC_DRAMTMG12_t_cmdcke_MASK             (0x30000U)
#define DDRC_DRAMTMG12_t_cmdcke_SHIFT            (16U)
#define DDRC_DRAMTMG12_t_cmdcke(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_t_cmdcke_SHIFT)) & DDRC_DRAMTMG12_t_cmdcke_MASK)
/*! @} */

/*! @name DRAMTMG13 - SDRAM Timing Register 13 */
/*! @{ */
#define DDRC_DRAMTMG13_t_ppd_MASK                (0x7U)
#define DDRC_DRAMTMG13_t_ppd_SHIFT               (0U)
#define DDRC_DRAMTMG13_t_ppd(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_t_ppd_SHIFT)) & DDRC_DRAMTMG13_t_ppd_MASK)
#define DDRC_DRAMTMG13_t_ccd_mw_MASK             (0x3F0000U)
#define DDRC_DRAMTMG13_t_ccd_mw_SHIFT            (16U)
#define DDRC_DRAMTMG13_t_ccd_mw(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_t_ccd_mw_SHIFT)) & DDRC_DRAMTMG13_t_ccd_mw_MASK)
#define DDRC_DRAMTMG13_odtloff_MASK              (0x7F000000U)
#define DDRC_DRAMTMG13_odtloff_SHIFT             (24U)
#define DDRC_DRAMTMG13_odtloff(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_odtloff_SHIFT)) & DDRC_DRAMTMG13_odtloff_MASK)
/*! @} */

/*! @name DRAMTMG14 - SDRAM Timing Register 14 */
/*! @{ */
#define DDRC_DRAMTMG14_t_xsr_MASK                (0xFFFU)
#define DDRC_DRAMTMG14_t_xsr_SHIFT               (0U)
#define DDRC_DRAMTMG14_t_xsr(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG14_t_xsr_SHIFT)) & DDRC_DRAMTMG14_t_xsr_MASK)
/*! @} */

/*! @name DRAMTMG15 - SDRAM Timing Register 15 */
/*! @{ */
#define DDRC_DRAMTMG15_t_stab_x32_MASK           (0xFFU)
#define DDRC_DRAMTMG15_t_stab_x32_SHIFT          (0U)
#define DDRC_DRAMTMG15_t_stab_x32(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG15_t_stab_x32_SHIFT)) & DDRC_DRAMTMG15_t_stab_x32_MASK)
#define DDRC_DRAMTMG15_en_dfi_lp_t_stab_MASK     (0x80000000U)
#define DDRC_DRAMTMG15_en_dfi_lp_t_stab_SHIFT    (31U)
/*! @} */

/*! @name ZQCTL0 - ZQ Control Register 0 */
/*! @{ */
#define DDRC_ZQCTL0_t_zq_short_nop_MASK          (0x3FFU)
#define DDRC_ZQCTL0_t_zq_short_nop_SHIFT         (0U)
#define DDRC_ZQCTL0_t_zq_short_nop(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL0_t_zq_short_nop_SHIFT)) & DDRC_ZQCTL0_t_zq_short_nop_MASK)
#define DDRC_ZQCTL0_t_zq_long_nop_MASK           (0x7FF0000U)
#define DDRC_ZQCTL0_t_zq_long_nop_SHIFT          (16U)
#define DDRC_ZQCTL0_t_zq_long_nop(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL0_t_zq_long_nop_SHIFT)) & DDRC_ZQCTL0_t_zq_long_nop_MASK)
#define DDRC_ZQCTL0_dis_mpsmx_zqcl_MASK          (0x10000000U)
#define DDRC_ZQCTL0_dis_mpsmx_zqcl_SHIFT         (28U)
#define DDRC_ZQCTL0_zq_resistor_shared_MASK      (0x20000000U)
#define DDRC_ZQCTL0_zq_resistor_shared_SHIFT     (29U)
#define DDRC_ZQCTL0_dis_srx_zqcl_MASK            (0x40000000U)
#define DDRC_ZQCTL0_dis_srx_zqcl_SHIFT           (30U)
#define DDRC_ZQCTL0_dis_auto_zq_MASK             (0x80000000U)
#define DDRC_ZQCTL0_dis_auto_zq_SHIFT            (31U)
/*! @} */

/*! @name ZQCTL1 - ZQ Control Register 1 */
/*! @{ */
#define DDRC_ZQCTL1_t_zq_short_interval_x1024_MASK (0xFFFFFU)
#define DDRC_ZQCTL1_t_zq_short_interval_x1024_SHIFT (0U)
#define DDRC_ZQCTL1_t_zq_short_interval_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL1_t_zq_short_interval_x1024_SHIFT)) & DDRC_ZQCTL1_t_zq_short_interval_x1024_MASK)
#define DDRC_ZQCTL1_t_zq_reset_nop_MASK          (0x3FF00000U)
#define DDRC_ZQCTL1_t_zq_reset_nop_SHIFT         (20U)
#define DDRC_ZQCTL1_t_zq_reset_nop(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL1_t_zq_reset_nop_SHIFT)) & DDRC_ZQCTL1_t_zq_reset_nop_MASK)
/*! @} */

/*! @name ZQCTL2 - ZQ Control Register 2 */
/*! @{ */
#define DDRC_ZQCTL2_zq_reset_MASK                (0x1U)
#define DDRC_ZQCTL2_zq_reset_SHIFT               (0U)
/*! @} */

/*! @name ZQSTAT - ZQ Status Register */
/*! @{ */
#define DDRC_ZQSTAT_zq_reset_busy_MASK           (0x1U)
#define DDRC_ZQSTAT_zq_reset_busy_SHIFT          (0U)
/*! @} */

/*! @name DFITMG0 - DFI Timing Register 0 */
/*! @{ */
#define DDRC_DFITMG0_dfi_tphy_wrlat_MASK         (0x3FU)
#define DDRC_DFITMG0_dfi_tphy_wrlat_SHIFT        (0U)
#define DDRC_DFITMG0_dfi_tphy_wrlat(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_dfi_tphy_wrlat_SHIFT)) & DDRC_DFITMG0_dfi_tphy_wrlat_MASK)
#define DDRC_DFITMG0_dfi_tphy_wrdata_MASK        (0x3F00U)
#define DDRC_DFITMG0_dfi_tphy_wrdata_SHIFT       (8U)
#define DDRC_DFITMG0_dfi_tphy_wrdata(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_dfi_tphy_wrdata_SHIFT)) & DDRC_DFITMG0_dfi_tphy_wrdata_MASK)
#define DDRC_DFITMG0_dfi_wrdata_use_sdr_MASK     (0x8000U)
#define DDRC_DFITMG0_dfi_wrdata_use_sdr_SHIFT    (15U)
#define DDRC_DFITMG0_dfi_t_rddata_en_MASK        (0x7F0000U)
#define DDRC_DFITMG0_dfi_t_rddata_en_SHIFT       (16U)
#define DDRC_DFITMG0_dfi_t_rddata_en(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_dfi_t_rddata_en_SHIFT)) & DDRC_DFITMG0_dfi_t_rddata_en_MASK)
#define DDRC_DFITMG0_dfi_rddata_use_sdr_MASK     (0x800000U)
#define DDRC_DFITMG0_dfi_rddata_use_sdr_SHIFT    (23U)
#define DDRC_DFITMG0_dfi_t_ctrl_delay_MASK       (0x1F000000U)
#define DDRC_DFITMG0_dfi_t_ctrl_delay_SHIFT      (24U)
#define DDRC_DFITMG0_dfi_t_ctrl_delay(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_dfi_t_ctrl_delay_SHIFT)) & DDRC_DFITMG0_dfi_t_ctrl_delay_MASK)
/*! @} */

/*! @name DFITMG1 - DFI Timing Register 1 */
/*! @{ */
#define DDRC_DFITMG1_dfi_t_dram_clk_enable_MASK  (0x1FU)
#define DDRC_DFITMG1_dfi_t_dram_clk_enable_SHIFT (0U)
#define DDRC_DFITMG1_dfi_t_dram_clk_enable(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_dfi_t_dram_clk_enable_SHIFT)) & DDRC_DFITMG1_dfi_t_dram_clk_enable_MASK)
#define DDRC_DFITMG1_dfi_t_dram_clk_disable_MASK (0x1F00U)
#define DDRC_DFITMG1_dfi_t_dram_clk_disable_SHIFT (8U)
#define DDRC_DFITMG1_dfi_t_dram_clk_disable(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_dfi_t_dram_clk_disable_SHIFT)) & DDRC_DFITMG1_dfi_t_dram_clk_disable_MASK)
#define DDRC_DFITMG1_dfi_t_wrdata_delay_MASK     (0x1F0000U)
#define DDRC_DFITMG1_dfi_t_wrdata_delay_SHIFT    (16U)
#define DDRC_DFITMG1_dfi_t_wrdata_delay(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_dfi_t_wrdata_delay_SHIFT)) & DDRC_DFITMG1_dfi_t_wrdata_delay_MASK)
#define DDRC_DFITMG1_dfi_t_parin_lat_MASK        (0x3000000U)
#define DDRC_DFITMG1_dfi_t_parin_lat_SHIFT       (24U)
#define DDRC_DFITMG1_dfi_t_parin_lat(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_dfi_t_parin_lat_SHIFT)) & DDRC_DFITMG1_dfi_t_parin_lat_MASK)
#define DDRC_DFITMG1_dfi_t_cmd_lat_MASK          (0xF0000000U)
#define DDRC_DFITMG1_dfi_t_cmd_lat_SHIFT         (28U)
#define DDRC_DFITMG1_dfi_t_cmd_lat(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_dfi_t_cmd_lat_SHIFT)) & DDRC_DFITMG1_dfi_t_cmd_lat_MASK)
/*! @} */

/*! @name DFILPCFG0 - DFI Low Power Configuration Register 0 */
/*! @{ */
#define DDRC_DFILPCFG0_dfi_lp_en_pd_MASK         (0x1U)
#define DDRC_DFILPCFG0_dfi_lp_en_pd_SHIFT        (0U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_pd_MASK     (0xF0U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_pd_SHIFT    (4U)
/*! dfi_lp_wakeup_pd - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Power Down
 *    mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_DFILPCFG0_dfi_lp_wakeup_pd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_DFILPCFG0_dfi_lp_wakeup_pd_SHIFT)) & DDRC_DFILPCFG0_dfi_lp_wakeup_pd_MASK)
#define DDRC_DFILPCFG0_dfi_lp_en_sr_MASK         (0x100U)
#define DDRC_DFILPCFG0_dfi_lp_en_sr_SHIFT        (8U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_sr_MASK     (0xF000U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_sr_SHIFT    (12U)
/*! dfi_lp_wakeup_sr - Value in DFI clpck cycles to drive on dfi_lp_wakeup signal when Self Refresh
 *    mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_DFILPCFG0_dfi_lp_wakeup_sr(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_DFILPCFG0_dfi_lp_wakeup_sr_SHIFT)) & DDRC_DFILPCFG0_dfi_lp_wakeup_sr_MASK)
#define DDRC_DFILPCFG0_dfi_lp_en_dpd_MASK        (0x10000U)
#define DDRC_DFILPCFG0_dfi_lp_en_dpd_SHIFT       (16U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_dpd_MASK    (0xF00000U)
#define DDRC_DFILPCFG0_dfi_lp_wakeup_dpd_SHIFT   (20U)
/*! dfi_lp_wakeup_dpd - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Deep Power
 *    Down mode is entered. Determines the DFI's tlp_wakeup time: This is only present for designs
 *    supporting mDDR or LPDDR2/LPDDR3 devices.
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_DFILPCFG0_dfi_lp_wakeup_dpd(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DFILPCFG0_dfi_lp_wakeup_dpd_SHIFT)) & DDRC_DFILPCFG0_dfi_lp_wakeup_dpd_MASK)
#define DDRC_DFILPCFG0_dfi_tlp_resp_MASK         (0x1F000000U)
#define DDRC_DFILPCFG0_dfi_tlp_resp_SHIFT        (24U)
#define DDRC_DFILPCFG0_dfi_tlp_resp(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DFILPCFG0_dfi_tlp_resp_SHIFT)) & DDRC_DFILPCFG0_dfi_tlp_resp_MASK)
/*! @} */

/*! @name DFILPCFG1 - DFI Low Power Configuration Register 1 */
/*! @{ */
#define DDRC_DFILPCFG1_dfi_lp_en_mpsm_MASK       (0x1U)
#define DDRC_DFILPCFG1_dfi_lp_en_mpsm_SHIFT      (0U)
#define DDRC_DFILPCFG1_dfi_lp_wakeup_mpsm_MASK   (0xF0U)
#define DDRC_DFILPCFG1_dfi_lp_wakeup_mpsm_SHIFT  (4U)
/*! dfi_lp_wakeup_mpsm - Value in DFI clock cycles to drive on dfi_lp_wakeup signal when Maximum
 *    Power Saving Mode is entered. Determines the DFI's tlp_wakeup time:
 *  0b0000..16 cycles
 *  0b0001..32 cycles
 *  0b0010..64 cycles
 *  0b0011..128 cycles
 *  0b0100..256 cycles
 *  0b0101..512 cycles
 *  0b0110..1024 cycles
 *  0b0111..2048 cycles
 *  0b1000..4096 cycles
 *  0b1001..8192 cycles
 *  0b1010..16384 cycles
 *  0b1011..32768 cycles
 *  0b1100..65536 cycles
 *  0b1101..131072 cycles
 *  0b1110..262144 cycles
 *  0b1111..Unlimited cycles
 */
#define DDRC_DFILPCFG1_dfi_lp_wakeup_mpsm(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DFILPCFG1_dfi_lp_wakeup_mpsm_SHIFT)) & DDRC_DFILPCFG1_dfi_lp_wakeup_mpsm_MASK)
/*! @} */

/*! @name DFIUPD0 - DFI Update Register 0 */
/*! @{ */
#define DDRC_DFIUPD0_dfi_t_ctrlup_min_MASK       (0x3FFU)
#define DDRC_DFIUPD0_dfi_t_ctrlup_min_SHIFT      (0U)
#define DDRC_DFIUPD0_dfi_t_ctrlup_min(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DFIUPD0_dfi_t_ctrlup_min_SHIFT)) & DDRC_DFIUPD0_dfi_t_ctrlup_min_MASK)
#define DDRC_DFIUPD0_dfi_t_ctrlup_max_MASK       (0x3FF0000U)
#define DDRC_DFIUPD0_dfi_t_ctrlup_max_SHIFT      (16U)
#define DDRC_DFIUPD0_dfi_t_ctrlup_max(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DFIUPD0_dfi_t_ctrlup_max_SHIFT)) & DDRC_DFIUPD0_dfi_t_ctrlup_max_MASK)
#define DDRC_DFIUPD0_ctrlupd_pre_srx_MASK        (0x20000000U)
#define DDRC_DFIUPD0_ctrlupd_pre_srx_SHIFT       (29U)
#define DDRC_DFIUPD0_dis_auto_ctrlupd_srx_MASK   (0x40000000U)
#define DDRC_DFIUPD0_dis_auto_ctrlupd_srx_SHIFT  (30U)
#define DDRC_DFIUPD0_dis_auto_ctrlupd_MASK       (0x80000000U)
#define DDRC_DFIUPD0_dis_auto_ctrlupd_SHIFT      (31U)
/*! @} */

/*! @name DFIUPD1 - DFI Update Register 1 */
/*! @{ */
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_MASK (0xFFU)
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_SHIFT (0U)
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_SHIFT)) & DDRC_DFIUPD1_dfi_t_ctrlupd_interval_max_x1024_MASK)
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_MASK (0xFF0000U)
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_SHIFT (16U)
#define DDRC_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_SHIFT)) & DDRC_DFIUPD1_dfi_t_ctrlupd_interval_min_x1024_MASK)
/*! @} */

/*! @name DFIUPD2 - DFI Update Register 2 */
/*! @{ */
#define DDRC_DFIUPD2_dfi_phyupd_en_MASK          (0x80000000U)
#define DDRC_DFIUPD2_dfi_phyupd_en_SHIFT         (31U)
/*! @} */

/*! @name DFIMISC - DFI Miscellaneous Control Register */
/*! @{ */
#define DDRC_DFIMISC_dfi_init_complete_en_MASK   (0x1U)
#define DDRC_DFIMISC_dfi_init_complete_en_SHIFT  (0U)
#define DDRC_DFIMISC_phy_dbi_mode_MASK           (0x2U)
#define DDRC_DFIMISC_phy_dbi_mode_SHIFT          (1U)
#define DDRC_DFIMISC_dfi_data_cs_polarity_MASK   (0x4U)
#define DDRC_DFIMISC_dfi_data_cs_polarity_SHIFT  (2U)
#define DDRC_DFIMISC_ctl_idle_en_MASK            (0x10U)
#define DDRC_DFIMISC_ctl_idle_en_SHIFT           (4U)
#define DDRC_DFIMISC_dfi_init_start_MASK         (0x20U)
#define DDRC_DFIMISC_dfi_init_start_SHIFT        (5U)
#define DDRC_DFIMISC_dfi_frequency_MASK          (0x1F00U)
#define DDRC_DFIMISC_dfi_frequency_SHIFT         (8U)
#define DDRC_DFIMISC_dfi_frequency(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DFIMISC_dfi_frequency_SHIFT)) & DDRC_DFIMISC_dfi_frequency_MASK)
/*! @} */

/*! @name DFITMG2 - DFI Timing Register 2 */
/*! @{ */
#define DDRC_DFITMG2_dfi_tphy_wrcslat_MASK       (0x3FU)
#define DDRC_DFITMG2_dfi_tphy_wrcslat_SHIFT      (0U)
#define DDRC_DFITMG2_dfi_tphy_wrcslat(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG2_dfi_tphy_wrcslat_SHIFT)) & DDRC_DFITMG2_dfi_tphy_wrcslat_MASK)
#define DDRC_DFITMG2_dfi_tphy_rdcslat_MASK       (0x7F00U)
#define DDRC_DFITMG2_dfi_tphy_rdcslat_SHIFT      (8U)
#define DDRC_DFITMG2_dfi_tphy_rdcslat(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG2_dfi_tphy_rdcslat_SHIFT)) & DDRC_DFITMG2_dfi_tphy_rdcslat_MASK)
/*! @} */

/*! @name DFITMG3 - DFI Timing Register 3 */
/*! @{ */
#define DDRC_DFITMG3_dfi_t_geardown_delay_MASK   (0x1FU)
#define DDRC_DFITMG3_dfi_t_geardown_delay_SHIFT  (0U)
#define DDRC_DFITMG3_dfi_t_geardown_delay(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG3_dfi_t_geardown_delay_SHIFT)) & DDRC_DFITMG3_dfi_t_geardown_delay_MASK)
/*! @} */

/*! @name DFISTAT - DFI Status Register */
/*! @{ */
#define DDRC_DFISTAT_dfi_init_complete_MASK      (0x1U)
#define DDRC_DFISTAT_dfi_init_complete_SHIFT     (0U)
#define DDRC_DFISTAT_dfi_lp_ack_MASK             (0x2U)
#define DDRC_DFISTAT_dfi_lp_ack_SHIFT            (1U)
/*! @} */

/*! @name DBICTL - DM/DBI Control Register */
/*! @{ */
#define DDRC_DBICTL_dm_en_MASK                   (0x1U)
#define DDRC_DBICTL_dm_en_SHIFT                  (0U)
#define DDRC_DBICTL_wr_dbi_en_MASK               (0x2U)
#define DDRC_DBICTL_wr_dbi_en_SHIFT              (1U)
#define DDRC_DBICTL_rd_dbi_en_MASK               (0x4U)
#define DDRC_DBICTL_rd_dbi_en_SHIFT              (2U)
/*! @} */

/*! @name ADDRMAP0 - Address Map Register 0 */
/*! @{ */
#define DDRC_ADDRMAP0_addrmap_cs_bit0_MASK       (0x1FU)
#define DDRC_ADDRMAP0_addrmap_cs_bit0_SHIFT      (0U)
#define DDRC_ADDRMAP0_addrmap_cs_bit0(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP0_addrmap_cs_bit0_SHIFT)) & DDRC_ADDRMAP0_addrmap_cs_bit0_MASK)
/*! @} */

/*! @name ADDRMAP1 - Address Map Register 1 */
/*! @{ */
#define DDRC_ADDRMAP1_addrmap_bank_b0_MASK       (0x1FU)
#define DDRC_ADDRMAP1_addrmap_bank_b0_SHIFT      (0U)
#define DDRC_ADDRMAP1_addrmap_bank_b0(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP1_addrmap_bank_b0_SHIFT)) & DDRC_ADDRMAP1_addrmap_bank_b0_MASK)
#define DDRC_ADDRMAP1_addrmap_bank_b1_MASK       (0x1F00U)
#define DDRC_ADDRMAP1_addrmap_bank_b1_SHIFT      (8U)
#define DDRC_ADDRMAP1_addrmap_bank_b1(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP1_addrmap_bank_b1_SHIFT)) & DDRC_ADDRMAP1_addrmap_bank_b1_MASK)
#define DDRC_ADDRMAP1_addrmap_bank_b2_MASK       (0x1F0000U)
#define DDRC_ADDRMAP1_addrmap_bank_b2_SHIFT      (16U)
#define DDRC_ADDRMAP1_addrmap_bank_b2(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP1_addrmap_bank_b2_SHIFT)) & DDRC_ADDRMAP1_addrmap_bank_b2_MASK)
/*! @} */

/*! @name ADDRMAP2 - Address Map Register 2 */
/*! @{ */
#define DDRC_ADDRMAP2_addrmap_col_b2_MASK        (0xFU)
#define DDRC_ADDRMAP2_addrmap_col_b2_SHIFT       (0U)
#define DDRC_ADDRMAP2_addrmap_col_b2(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP2_addrmap_col_b2_SHIFT)) & DDRC_ADDRMAP2_addrmap_col_b2_MASK)
#define DDRC_ADDRMAP2_addrmap_col_b3_MASK        (0xF00U)
#define DDRC_ADDRMAP2_addrmap_col_b3_SHIFT       (8U)
#define DDRC_ADDRMAP2_addrmap_col_b3(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP2_addrmap_col_b3_SHIFT)) & DDRC_ADDRMAP2_addrmap_col_b3_MASK)
#define DDRC_ADDRMAP2_addrmap_col_b4_MASK        (0xF0000U)
#define DDRC_ADDRMAP2_addrmap_col_b4_SHIFT       (16U)
#define DDRC_ADDRMAP2_addrmap_col_b4(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP2_addrmap_col_b4_SHIFT)) & DDRC_ADDRMAP2_addrmap_col_b4_MASK)
#define DDRC_ADDRMAP2_addrmap_col_b5_MASK        (0xF000000U)
#define DDRC_ADDRMAP2_addrmap_col_b5_SHIFT       (24U)
#define DDRC_ADDRMAP2_addrmap_col_b5(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP2_addrmap_col_b5_SHIFT)) & DDRC_ADDRMAP2_addrmap_col_b5_MASK)
/*! @} */

/*! @name ADDRMAP3 - Address Map Register 3 */
/*! @{ */
#define DDRC_ADDRMAP3_addrmap_col_b6_MASK        (0xFU)
#define DDRC_ADDRMAP3_addrmap_col_b6_SHIFT       (0U)
#define DDRC_ADDRMAP3_addrmap_col_b6(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP3_addrmap_col_b6_SHIFT)) & DDRC_ADDRMAP3_addrmap_col_b6_MASK)
#define DDRC_ADDRMAP3_addrmap_col_b7_MASK        (0xF00U)
#define DDRC_ADDRMAP3_addrmap_col_b7_SHIFT       (8U)
#define DDRC_ADDRMAP3_addrmap_col_b7(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP3_addrmap_col_b7_SHIFT)) & DDRC_ADDRMAP3_addrmap_col_b7_MASK)
#define DDRC_ADDRMAP3_addrmap_col_b8_MASK        (0xF0000U)
#define DDRC_ADDRMAP3_addrmap_col_b8_SHIFT       (16U)
#define DDRC_ADDRMAP3_addrmap_col_b8(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP3_addrmap_col_b8_SHIFT)) & DDRC_ADDRMAP3_addrmap_col_b8_MASK)
#define DDRC_ADDRMAP3_addrmap_col_b9_MASK        (0xF000000U)
#define DDRC_ADDRMAP3_addrmap_col_b9_SHIFT       (24U)
#define DDRC_ADDRMAP3_addrmap_col_b9(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP3_addrmap_col_b9_SHIFT)) & DDRC_ADDRMAP3_addrmap_col_b9_MASK)
/*! @} */

/*! @name ADDRMAP4 - Address Map Register 4 */
/*! @{ */
#define DDRC_ADDRMAP4_addrmap_col_b10_MASK       (0xFU)
#define DDRC_ADDRMAP4_addrmap_col_b10_SHIFT      (0U)
#define DDRC_ADDRMAP4_addrmap_col_b10(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP4_addrmap_col_b10_SHIFT)) & DDRC_ADDRMAP4_addrmap_col_b10_MASK)
#define DDRC_ADDRMAP4_addrmap_col_b11_MASK       (0xF00U)
#define DDRC_ADDRMAP4_addrmap_col_b11_SHIFT      (8U)
#define DDRC_ADDRMAP4_addrmap_col_b11(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP4_addrmap_col_b11_SHIFT)) & DDRC_ADDRMAP4_addrmap_col_b11_MASK)
/*! @} */

/*! @name ADDRMAP5 - Address Map Register 5 */
/*! @{ */
#define DDRC_ADDRMAP5_addrmap_row_b0_MASK        (0xFU)
#define DDRC_ADDRMAP5_addrmap_row_b0_SHIFT       (0U)
#define DDRC_ADDRMAP5_addrmap_row_b0(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP5_addrmap_row_b0_SHIFT)) & DDRC_ADDRMAP5_addrmap_row_b0_MASK)
#define DDRC_ADDRMAP5_addrmap_row_b1_MASK        (0xF00U)
#define DDRC_ADDRMAP5_addrmap_row_b1_SHIFT       (8U)
#define DDRC_ADDRMAP5_addrmap_row_b1(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP5_addrmap_row_b1_SHIFT)) & DDRC_ADDRMAP5_addrmap_row_b1_MASK)
#define DDRC_ADDRMAP5_addrmap_row_b2_10_MASK     (0xF0000U)
#define DDRC_ADDRMAP5_addrmap_row_b2_10_SHIFT    (16U)
#define DDRC_ADDRMAP5_addrmap_row_b2_10(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP5_addrmap_row_b2_10_SHIFT)) & DDRC_ADDRMAP5_addrmap_row_b2_10_MASK)
#define DDRC_ADDRMAP5_addrmap_row_b11_MASK       (0xF000000U)
#define DDRC_ADDRMAP5_addrmap_row_b11_SHIFT      (24U)
#define DDRC_ADDRMAP5_addrmap_row_b11(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP5_addrmap_row_b11_SHIFT)) & DDRC_ADDRMAP5_addrmap_row_b11_MASK)
/*! @} */

/*! @name ADDRMAP6 - Address Map Register 6 */
/*! @{ */
#define DDRC_ADDRMAP6_addrmap_row_b12_MASK       (0xFU)
#define DDRC_ADDRMAP6_addrmap_row_b12_SHIFT      (0U)
#define DDRC_ADDRMAP6_addrmap_row_b12(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP6_addrmap_row_b12_SHIFT)) & DDRC_ADDRMAP6_addrmap_row_b12_MASK)
#define DDRC_ADDRMAP6_addrmap_row_b13_MASK       (0xF00U)
#define DDRC_ADDRMAP6_addrmap_row_b13_SHIFT      (8U)
#define DDRC_ADDRMAP6_addrmap_row_b13(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP6_addrmap_row_b13_SHIFT)) & DDRC_ADDRMAP6_addrmap_row_b13_MASK)
#define DDRC_ADDRMAP6_addrmap_row_b14_MASK       (0xF0000U)
#define DDRC_ADDRMAP6_addrmap_row_b14_SHIFT      (16U)
#define DDRC_ADDRMAP6_addrmap_row_b14(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP6_addrmap_row_b14_SHIFT)) & DDRC_ADDRMAP6_addrmap_row_b14_MASK)
#define DDRC_ADDRMAP6_addrmap_row_b15_MASK       (0xF000000U)
#define DDRC_ADDRMAP6_addrmap_row_b15_SHIFT      (24U)
#define DDRC_ADDRMAP6_addrmap_row_b15(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP6_addrmap_row_b15_SHIFT)) & DDRC_ADDRMAP6_addrmap_row_b15_MASK)
#define DDRC_ADDRMAP6_lpddr3_6gb_12gb_MASK       (0x80000000U)
#define DDRC_ADDRMAP6_lpddr3_6gb_12gb_SHIFT      (31U)
/*! @} */

/*! @name ADDRMAP7 - Address Map Register 7 */
/*! @{ */
#define DDRC_ADDRMAP7_addrmap_row_b16_MASK       (0xFU)
#define DDRC_ADDRMAP7_addrmap_row_b16_SHIFT      (0U)
#define DDRC_ADDRMAP7_addrmap_row_b16(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP7_addrmap_row_b16_SHIFT)) & DDRC_ADDRMAP7_addrmap_row_b16_MASK)
#define DDRC_ADDRMAP7_addrmap_row_b17_MASK       (0xF00U)
#define DDRC_ADDRMAP7_addrmap_row_b17_SHIFT      (8U)
#define DDRC_ADDRMAP7_addrmap_row_b17(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP7_addrmap_row_b17_SHIFT)) & DDRC_ADDRMAP7_addrmap_row_b17_MASK)
/*! @} */

/*! @name ADDRMAP8 - Address Map Register 8 */
/*! @{ */
#define DDRC_ADDRMAP8_addrmap_bg_b0_MASK         (0x1FU)
#define DDRC_ADDRMAP8_addrmap_bg_b0_SHIFT        (0U)
#define DDRC_ADDRMAP8_addrmap_bg_b0(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP8_addrmap_bg_b0_SHIFT)) & DDRC_ADDRMAP8_addrmap_bg_b0_MASK)
#define DDRC_ADDRMAP8_addrmap_bg_b1_MASK         (0x3F00U)
#define DDRC_ADDRMAP8_addrmap_bg_b1_SHIFT        (8U)
#define DDRC_ADDRMAP8_addrmap_bg_b1(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP8_addrmap_bg_b1_SHIFT)) & DDRC_ADDRMAP8_addrmap_bg_b1_MASK)
/*! @} */

/*! @name ADDRMAP9 - Address Map Register 9 */
/*! @{ */
#define DDRC_ADDRMAP9_addrmap_row_b2_MASK        (0xFU)
#define DDRC_ADDRMAP9_addrmap_row_b2_SHIFT       (0U)
#define DDRC_ADDRMAP9_addrmap_row_b2(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP9_addrmap_row_b2_SHIFT)) & DDRC_ADDRMAP9_addrmap_row_b2_MASK)
#define DDRC_ADDRMAP9_addrmap_row_b3_MASK        (0xF00U)
#define DDRC_ADDRMAP9_addrmap_row_b3_SHIFT       (8U)
#define DDRC_ADDRMAP9_addrmap_row_b3(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP9_addrmap_row_b3_SHIFT)) & DDRC_ADDRMAP9_addrmap_row_b3_MASK)
#define DDRC_ADDRMAP9_addrmap_row_b4_MASK        (0xF0000U)
#define DDRC_ADDRMAP9_addrmap_row_b4_SHIFT       (16U)
#define DDRC_ADDRMAP9_addrmap_row_b4(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP9_addrmap_row_b4_SHIFT)) & DDRC_ADDRMAP9_addrmap_row_b4_MASK)
#define DDRC_ADDRMAP9_addrmap_row_b5_MASK        (0xF000000U)
#define DDRC_ADDRMAP9_addrmap_row_b5_SHIFT       (24U)
#define DDRC_ADDRMAP9_addrmap_row_b5(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP9_addrmap_row_b5_SHIFT)) & DDRC_ADDRMAP9_addrmap_row_b5_MASK)
/*! @} */

/*! @name ADDRMAP10 - Address Map Register 10 */
/*! @{ */
#define DDRC_ADDRMAP10_addrmap_row_b6_MASK       (0xFU)
#define DDRC_ADDRMAP10_addrmap_row_b6_SHIFT      (0U)
#define DDRC_ADDRMAP10_addrmap_row_b6(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP10_addrmap_row_b6_SHIFT)) & DDRC_ADDRMAP10_addrmap_row_b6_MASK)
#define DDRC_ADDRMAP10_addrmap_row_b7_MASK       (0xF00U)
#define DDRC_ADDRMAP10_addrmap_row_b7_SHIFT      (8U)
#define DDRC_ADDRMAP10_addrmap_row_b7(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP10_addrmap_row_b7_SHIFT)) & DDRC_ADDRMAP10_addrmap_row_b7_MASK)
#define DDRC_ADDRMAP10_addrmap_row_b8_MASK       (0xF0000U)
#define DDRC_ADDRMAP10_addrmap_row_b8_SHIFT      (16U)
#define DDRC_ADDRMAP10_addrmap_row_b8(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP10_addrmap_row_b8_SHIFT)) & DDRC_ADDRMAP10_addrmap_row_b8_MASK)
#define DDRC_ADDRMAP10_addrmap_row_b9_MASK       (0xF000000U)
#define DDRC_ADDRMAP10_addrmap_row_b9_SHIFT      (24U)
#define DDRC_ADDRMAP10_addrmap_row_b9(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP10_addrmap_row_b9_SHIFT)) & DDRC_ADDRMAP10_addrmap_row_b9_MASK)
/*! @} */

/*! @name ADDRMAP11 - Address Map Register 11 */
/*! @{ */
#define DDRC_ADDRMAP11_addrmap_row_b10_MASK      (0xFU)
#define DDRC_ADDRMAP11_addrmap_row_b10_SHIFT     (0U)
#define DDRC_ADDRMAP11_addrmap_row_b10(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_ADDRMAP11_addrmap_row_b10_SHIFT)) & DDRC_ADDRMAP11_addrmap_row_b10_MASK)
/*! @} */

/*! @name ODTCFG - ODT Configuration Register */
/*! @{ */
#define DDRC_ODTCFG_rd_odt_delay_MASK            (0x7CU)
#define DDRC_ODTCFG_rd_odt_delay_SHIFT           (2U)
#define DDRC_ODTCFG_rd_odt_delay(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_rd_odt_delay_SHIFT)) & DDRC_ODTCFG_rd_odt_delay_MASK)
#define DDRC_ODTCFG_rd_odt_hold_MASK             (0xF00U)
#define DDRC_ODTCFG_rd_odt_hold_SHIFT            (8U)
#define DDRC_ODTCFG_rd_odt_hold(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_rd_odt_hold_SHIFT)) & DDRC_ODTCFG_rd_odt_hold_MASK)
#define DDRC_ODTCFG_wr_odt_delay_MASK            (0x1F0000U)
#define DDRC_ODTCFG_wr_odt_delay_SHIFT           (16U)
#define DDRC_ODTCFG_wr_odt_delay(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_wr_odt_delay_SHIFT)) & DDRC_ODTCFG_wr_odt_delay_MASK)
#define DDRC_ODTCFG_wr_odt_hold_MASK             (0xF000000U)
#define DDRC_ODTCFG_wr_odt_hold_SHIFT            (24U)
#define DDRC_ODTCFG_wr_odt_hold(x)               (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_wr_odt_hold_SHIFT)) & DDRC_ODTCFG_wr_odt_hold_MASK)
/*! @} */

/*! @name ODTMAP - ODT/Rank Map Register */
/*! @{ */
#define DDRC_ODTMAP_rank0_wr_odt_MASK            (0x3U)
#define DDRC_ODTMAP_rank0_wr_odt_SHIFT           (0U)
#define DDRC_ODTMAP_rank0_wr_odt(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTMAP_rank0_wr_odt_SHIFT)) & DDRC_ODTMAP_rank0_wr_odt_MASK)
#define DDRC_ODTMAP_rank0_rd_odt_MASK            (0x30U)
#define DDRC_ODTMAP_rank0_rd_odt_SHIFT           (4U)
#define DDRC_ODTMAP_rank0_rd_odt(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTMAP_rank0_rd_odt_SHIFT)) & DDRC_ODTMAP_rank0_rd_odt_MASK)
#define DDRC_ODTMAP_rank1_wr_odt_MASK            (0x300U)
#define DDRC_ODTMAP_rank1_wr_odt_SHIFT           (8U)
#define DDRC_ODTMAP_rank1_wr_odt(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTMAP_rank1_wr_odt_SHIFT)) & DDRC_ODTMAP_rank1_wr_odt_MASK)
#define DDRC_ODTMAP_rank1_rd_odt_MASK            (0x3000U)
#define DDRC_ODTMAP_rank1_rd_odt_SHIFT           (12U)
#define DDRC_ODTMAP_rank1_rd_odt(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_ODTMAP_rank1_rd_odt_SHIFT)) & DDRC_ODTMAP_rank1_rd_odt_MASK)
/*! @} */

/*! @name SCHED - Scheduler Control Register */
/*! @{ */
#define DDRC_SCHED_force_low_pri_n_MASK          (0x1U)
#define DDRC_SCHED_force_low_pri_n_SHIFT         (0U)
#define DDRC_SCHED_prefer_write_MASK             (0x2U)
#define DDRC_SCHED_prefer_write_SHIFT            (1U)
#define DDRC_SCHED_pageclose_MASK                (0x4U)
#define DDRC_SCHED_pageclose_SHIFT               (2U)
#define DDRC_SCHED_lpr_num_entries_MASK          (0x1F00U)
#define DDRC_SCHED_lpr_num_entries_SHIFT         (8U)
#define DDRC_SCHED_lpr_num_entries(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_SCHED_lpr_num_entries_SHIFT)) & DDRC_SCHED_lpr_num_entries_MASK)
#define DDRC_SCHED_go2critical_hysteresis_MASK   (0xFF0000U)
#define DDRC_SCHED_go2critical_hysteresis_SHIFT  (16U)
#define DDRC_SCHED_go2critical_hysteresis(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_SCHED_go2critical_hysteresis_SHIFT)) & DDRC_SCHED_go2critical_hysteresis_MASK)
#define DDRC_SCHED_rdwr_idle_gap_MASK            (0x7F000000U)
#define DDRC_SCHED_rdwr_idle_gap_SHIFT           (24U)
#define DDRC_SCHED_rdwr_idle_gap(x)              (((uint32_t)(((uint32_t)(x)) << DDRC_SCHED_rdwr_idle_gap_SHIFT)) & DDRC_SCHED_rdwr_idle_gap_MASK)
/*! @} */

/*! @name SCHED1 - Scheduler Control Register 1 */
/*! @{ */
#define DDRC_SCHED1_pageclose_timer_MASK         (0xFFU)
#define DDRC_SCHED1_pageclose_timer_SHIFT        (0U)
#define DDRC_SCHED1_pageclose_timer(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_SCHED1_pageclose_timer_SHIFT)) & DDRC_SCHED1_pageclose_timer_MASK)
/*! @} */

/*! @name PERFHPR1 - High Priority Read CAM Register 1 */
/*! @{ */
#define DDRC_PERFHPR1_hpr_max_starve_MASK        (0xFFFFU)
#define DDRC_PERFHPR1_hpr_max_starve_SHIFT       (0U)
#define DDRC_PERFHPR1_hpr_max_starve(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_PERFHPR1_hpr_max_starve_SHIFT)) & DDRC_PERFHPR1_hpr_max_starve_MASK)
#define DDRC_PERFHPR1_hpr_xact_run_length_MASK   (0xFF000000U)
#define DDRC_PERFHPR1_hpr_xact_run_length_SHIFT  (24U)
#define DDRC_PERFHPR1_hpr_xact_run_length(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PERFHPR1_hpr_xact_run_length_SHIFT)) & DDRC_PERFHPR1_hpr_xact_run_length_MASK)
/*! @} */

/*! @name PERFLPR1 - Low Priority Read CAM Register 1 */
/*! @{ */
#define DDRC_PERFLPR1_lpr_max_starve_MASK        (0xFFFFU)
#define DDRC_PERFLPR1_lpr_max_starve_SHIFT       (0U)
#define DDRC_PERFLPR1_lpr_max_starve(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_PERFLPR1_lpr_max_starve_SHIFT)) & DDRC_PERFLPR1_lpr_max_starve_MASK)
#define DDRC_PERFLPR1_lpr_xact_run_length_MASK   (0xFF000000U)
#define DDRC_PERFLPR1_lpr_xact_run_length_SHIFT  (24U)
#define DDRC_PERFLPR1_lpr_xact_run_length(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PERFLPR1_lpr_xact_run_length_SHIFT)) & DDRC_PERFLPR1_lpr_xact_run_length_MASK)
/*! @} */

/*! @name PERFWR1 - Write CAM Register 1 */
/*! @{ */
#define DDRC_PERFWR1_w_max_starve_MASK           (0xFFFFU)
#define DDRC_PERFWR1_w_max_starve_SHIFT          (0U)
#define DDRC_PERFWR1_w_max_starve(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_PERFWR1_w_max_starve_SHIFT)) & DDRC_PERFWR1_w_max_starve_MASK)
#define DDRC_PERFWR1_w_xact_run_length_MASK      (0xFF000000U)
#define DDRC_PERFWR1_w_xact_run_length_SHIFT     (24U)
#define DDRC_PERFWR1_w_xact_run_length(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_PERFWR1_w_xact_run_length_SHIFT)) & DDRC_PERFWR1_w_xact_run_length_MASK)
/*! @} */

/*! @name DBG0 - Debug Register 0 */
/*! @{ */
#define DDRC_DBG0_dis_wc_MASK                    (0x1U)
#define DDRC_DBG0_dis_wc_SHIFT                   (0U)
#define DDRC_DBG0_dis_rd_bypass_MASK             (0x2U)
#define DDRC_DBG0_dis_rd_bypass_SHIFT            (1U)
#define DDRC_DBG0_dis_act_bypass_MASK            (0x4U)
#define DDRC_DBG0_dis_act_bypass_SHIFT           (2U)
#define DDRC_DBG0_dis_collision_page_opt_MASK    (0x10U)
#define DDRC_DBG0_dis_collision_page_opt_SHIFT   (4U)
/*! @} */

/*! @name DBG1 - Debug Register 1 */
/*! @{ */
#define DDRC_DBG1_dis_dq_MASK                    (0x1U)
#define DDRC_DBG1_dis_dq_SHIFT                   (0U)
#define DDRC_DBG1_dis_hif_MASK                   (0x2U)
#define DDRC_DBG1_dis_hif_SHIFT                  (1U)
/*! @} */

/*! @name DBGCAM - CAM Debug Register */
/*! @{ */
#define DDRC_DBGCAM_dbg_hpr_q_depth_MASK         (0x3FU)
#define DDRC_DBGCAM_dbg_hpr_q_depth_SHIFT        (0U)
#define DDRC_DBGCAM_dbg_hpr_q_depth(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DBGCAM_dbg_hpr_q_depth_SHIFT)) & DDRC_DBGCAM_dbg_hpr_q_depth_MASK)
#define DDRC_DBGCAM_dbg_lpr_q_depth_MASK         (0x3F00U)
#define DDRC_DBGCAM_dbg_lpr_q_depth_SHIFT        (8U)
#define DDRC_DBGCAM_dbg_lpr_q_depth(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DBGCAM_dbg_lpr_q_depth_SHIFT)) & DDRC_DBGCAM_dbg_lpr_q_depth_MASK)
#define DDRC_DBGCAM_dbg_w_q_depth_MASK           (0x3F0000U)
#define DDRC_DBGCAM_dbg_w_q_depth_SHIFT          (16U)
#define DDRC_DBGCAM_dbg_w_q_depth(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DBGCAM_dbg_w_q_depth_SHIFT)) & DDRC_DBGCAM_dbg_w_q_depth_MASK)
#define DDRC_DBGCAM_dbg_stall_MASK               (0x1000000U)
#define DDRC_DBGCAM_dbg_stall_SHIFT              (24U)
#define DDRC_DBGCAM_dbg_rd_q_empty_MASK          (0x2000000U)
#define DDRC_DBGCAM_dbg_rd_q_empty_SHIFT         (25U)
#define DDRC_DBGCAM_dbg_wr_q_empty_MASK          (0x4000000U)
#define DDRC_DBGCAM_dbg_wr_q_empty_SHIFT         (26U)
#define DDRC_DBGCAM_rd_data_pipeline_empty_MASK  (0x10000000U)
#define DDRC_DBGCAM_rd_data_pipeline_empty_SHIFT (28U)
#define DDRC_DBGCAM_wr_data_pipeline_empty_MASK  (0x20000000U)
#define DDRC_DBGCAM_wr_data_pipeline_empty_SHIFT (29U)
#define DDRC_DBGCAM_dbg_stall_wr_MASK            (0x40000000U)
#define DDRC_DBGCAM_dbg_stall_wr_SHIFT           (30U)
#define DDRC_DBGCAM_dbg_stall_rd_MASK            (0x80000000U)
#define DDRC_DBGCAM_dbg_stall_rd_SHIFT           (31U)
/*! @} */

/*! @name DBGCMD - Command Debug Register */
/*! @{ */
#define DDRC_DBGCMD_rank0_refresh_MASK           (0x1U)
#define DDRC_DBGCMD_rank0_refresh_SHIFT          (0U)
#define DDRC_DBGCMD_rank1_refresh_MASK           (0x2U)
#define DDRC_DBGCMD_rank1_refresh_SHIFT          (1U)
#define DDRC_DBGCMD_zq_calib_short_MASK          (0x10U)
#define DDRC_DBGCMD_zq_calib_short_SHIFT         (4U)
#define DDRC_DBGCMD_ctrlupd_MASK                 (0x20U)
#define DDRC_DBGCMD_ctrlupd_SHIFT                (5U)
/*! @} */

/*! @name DBGSTAT - Status Debug Register */
/*! @{ */
#define DDRC_DBGSTAT_rank0_refresh_busy_MASK     (0x1U)
#define DDRC_DBGSTAT_rank0_refresh_busy_SHIFT    (0U)
#define DDRC_DBGSTAT_rank1_refresh_busy_MASK     (0x2U)
#define DDRC_DBGSTAT_rank1_refresh_busy_SHIFT    (1U)
#define DDRC_DBGSTAT_zq_calib_short_busy_MASK    (0x10U)
#define DDRC_DBGSTAT_zq_calib_short_busy_SHIFT   (4U)
#define DDRC_DBGSTAT_ctrlupd_busy_MASK           (0x20U)
#define DDRC_DBGSTAT_ctrlupd_busy_SHIFT          (5U)
/*! @} */

/*! @name SWCTL - Software Register Programming Control Enable */
/*! @{ */
#define DDRC_SWCTL_sw_done_MASK                  (0x1U)
#define DDRC_SWCTL_sw_done_SHIFT                 (0U)
/*! @} */

/*! @name SWSTAT - Software Register Programming Control Status */
/*! @{ */
#define DDRC_SWSTAT_sw_done_ack_MASK             (0x1U)
#define DDRC_SWSTAT_sw_done_ack_SHIFT            (0U)
/*! @} */

/*! @name POISONCFG - AXI Poison Configuration Register. */
/*! @{ */
#define DDRC_POISONCFG_wr_poison_slverr_en_MASK  (0x1U)
#define DDRC_POISONCFG_wr_poison_slverr_en_SHIFT (0U)
#define DDRC_POISONCFG_wr_poison_intr_en_MASK    (0x10U)
#define DDRC_POISONCFG_wr_poison_intr_en_SHIFT   (4U)
#define DDRC_POISONCFG_wr_poison_intr_clr_MASK   (0x100U)
#define DDRC_POISONCFG_wr_poison_intr_clr_SHIFT  (8U)
#define DDRC_POISONCFG_rd_poison_slverr_en_MASK  (0x10000U)
#define DDRC_POISONCFG_rd_poison_slverr_en_SHIFT (16U)
#define DDRC_POISONCFG_rd_poison_intr_en_MASK    (0x100000U)
#define DDRC_POISONCFG_rd_poison_intr_en_SHIFT   (20U)
#define DDRC_POISONCFG_rd_poison_intr_clr_MASK   (0x1000000U)
#define DDRC_POISONCFG_rd_poison_intr_clr_SHIFT  (24U)
/*! @} */

/*! @name POISONSTAT - AXI Poison Status Register */
/*! @{ */
#define DDRC_POISONSTAT_wr_poison_intr_0_MASK    (0x1U)
#define DDRC_POISONSTAT_wr_poison_intr_0_SHIFT   (0U)
#define DDRC_POISONSTAT_rd_poison_intr_0_MASK    (0x10000U)
#define DDRC_POISONSTAT_rd_poison_intr_0_SHIFT   (16U)
/*! @} */

/*! @name PSTAT - Port Status Register */
/*! @{ */
#define DDRC_PSTAT_rd_port_busy_0_MASK           (0x1U)
#define DDRC_PSTAT_rd_port_busy_0_SHIFT          (0U)
#define DDRC_PSTAT_wr_port_busy_0_MASK           (0x10000U)
#define DDRC_PSTAT_wr_port_busy_0_SHIFT          (16U)
/*! @} */

/*! @name PCCFG - Port Common Configuration Register */
/*! @{ */
#define DDRC_PCCFG_go2critical_en_MASK           (0x1U)
#define DDRC_PCCFG_go2critical_en_SHIFT          (0U)
#define DDRC_PCCFG_pagematch_limit_MASK          (0x10U)
#define DDRC_PCCFG_pagematch_limit_SHIFT         (4U)
#define DDRC_PCCFG_bl_exp_mode_MASK              (0x100U)
#define DDRC_PCCFG_bl_exp_mode_SHIFT             (8U)
/*! @} */

/*! @name PCFGR_0 - Port n Configuration Read Register */
/*! @{ */
#define DDRC_PCFGR_0_rd_port_priority_MASK       (0x3FFU)
#define DDRC_PCFGR_0_rd_port_priority_SHIFT      (0U)
#define DDRC_PCFGR_0_rd_port_priority(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGR_0_rd_port_priority_SHIFT)) & DDRC_PCFGR_0_rd_port_priority_MASK)
#define DDRC_PCFGR_0_rd_port_aging_en_MASK       (0x1000U)
#define DDRC_PCFGR_0_rd_port_aging_en_SHIFT      (12U)
#define DDRC_PCFGR_0_rd_port_urgent_en_MASK      (0x2000U)
#define DDRC_PCFGR_0_rd_port_urgent_en_SHIFT     (13U)
#define DDRC_PCFGR_0_rd_port_pagematch_en_MASK   (0x4000U)
#define DDRC_PCFGR_0_rd_port_pagematch_en_SHIFT  (14U)
#define DDRC_PCFGR_0_rdwr_ordered_en_MASK        (0x10000U)
#define DDRC_PCFGR_0_rdwr_ordered_en_SHIFT       (16U)
/*! @} */

/*! @name PCFGW_0 - Port n Configuration Write Register */
/*! @{ */
#define DDRC_PCFGW_0_wr_port_priority_MASK       (0x3FFU)
#define DDRC_PCFGW_0_wr_port_priority_SHIFT      (0U)
#define DDRC_PCFGW_0_wr_port_priority(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGW_0_wr_port_priority_SHIFT)) & DDRC_PCFGW_0_wr_port_priority_MASK)
#define DDRC_PCFGW_0_wr_port_aging_en_MASK       (0x1000U)
#define DDRC_PCFGW_0_wr_port_aging_en_SHIFT      (12U)
#define DDRC_PCFGW_0_wr_port_urgent_en_MASK      (0x2000U)
#define DDRC_PCFGW_0_wr_port_urgent_en_SHIFT     (13U)
#define DDRC_PCFGW_0_wr_port_pagematch_en_MASK   (0x4000U)
#define DDRC_PCFGW_0_wr_port_pagematch_en_SHIFT  (14U)
/*! @} */

/*! @name PCTRL_0 - Port n Control Register */
/*! @{ */
#define DDRC_PCTRL_0_port_en_MASK                (0x1U)
#define DDRC_PCTRL_0_port_en_SHIFT               (0U)
/*! @} */

/*! @name PCFGQOS0_0 - Port n Read QoS Configuration Register 0 */
/*! @{ */
#define DDRC_PCFGQOS0_0_rqos_map_level1_MASK     (0xFU)
#define DDRC_PCFGQOS0_0_rqos_map_level1_SHIFT    (0U)
#define DDRC_PCFGQOS0_0_rqos_map_level1(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGQOS0_0_rqos_map_level1_SHIFT)) & DDRC_PCFGQOS0_0_rqos_map_level1_MASK)
#define DDRC_PCFGQOS0_0_rqos_map_region0_MASK    (0x30000U)
#define DDRC_PCFGQOS0_0_rqos_map_region0_SHIFT   (16U)
#define DDRC_PCFGQOS0_0_rqos_map_region0(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGQOS0_0_rqos_map_region0_SHIFT)) & DDRC_PCFGQOS0_0_rqos_map_region0_MASK)
#define DDRC_PCFGQOS0_0_rqos_map_region1_MASK    (0x300000U)
#define DDRC_PCFGQOS0_0_rqos_map_region1_SHIFT   (20U)
#define DDRC_PCFGQOS0_0_rqos_map_region1(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGQOS0_0_rqos_map_region1_SHIFT)) & DDRC_PCFGQOS0_0_rqos_map_region1_MASK)
/*! @} */

/*! @name PCFGQOS1_0 - Port n Read QoS Configuration Register 1 */
/*! @{ */
#define DDRC_PCFGQOS1_0_rqos_map_timeoutb_MASK   (0x7FFU)
#define DDRC_PCFGQOS1_0_rqos_map_timeoutb_SHIFT  (0U)
#define DDRC_PCFGQOS1_0_rqos_map_timeoutb(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGQOS1_0_rqos_map_timeoutb_SHIFT)) & DDRC_PCFGQOS1_0_rqos_map_timeoutb_MASK)
#define DDRC_PCFGQOS1_0_rqos_map_timeoutr_MASK   (0x7FF0000U)
#define DDRC_PCFGQOS1_0_rqos_map_timeoutr_SHIFT  (16U)
#define DDRC_PCFGQOS1_0_rqos_map_timeoutr(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGQOS1_0_rqos_map_timeoutr_SHIFT)) & DDRC_PCFGQOS1_0_rqos_map_timeoutr_MASK)
/*! @} */

/*! @name PCFGWQOS0_0 - Port n Write QoS Configuration Register 0 */
/*! @{ */
#define DDRC_PCFGWQOS0_0_wqos_map_level_MASK     (0xFU)
#define DDRC_PCFGWQOS0_0_wqos_map_level_SHIFT    (0U)
#define DDRC_PCFGWQOS0_0_wqos_map_level(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGWQOS0_0_wqos_map_level_SHIFT)) & DDRC_PCFGWQOS0_0_wqos_map_level_MASK)
#define DDRC_PCFGWQOS0_0_wqos_map_region0_MASK   (0x30000U)
#define DDRC_PCFGWQOS0_0_wqos_map_region0_SHIFT  (16U)
#define DDRC_PCFGWQOS0_0_wqos_map_region0(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGWQOS0_0_wqos_map_region0_SHIFT)) & DDRC_PCFGWQOS0_0_wqos_map_region0_MASK)
#define DDRC_PCFGWQOS0_0_wqos_map_region1_MASK   (0x300000U)
#define DDRC_PCFGWQOS0_0_wqos_map_region1_SHIFT  (20U)
#define DDRC_PCFGWQOS0_0_wqos_map_region1(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGWQOS0_0_wqos_map_region1_SHIFT)) & DDRC_PCFGWQOS0_0_wqos_map_region1_MASK)
/*! @} */

/*! @name PCFGWQOS1_0 - Port n Write QoS Configuration Register 1 */
/*! @{ */
#define DDRC_PCFGWQOS1_0_wqos_map_timeout_MASK   (0x7FFU)
#define DDRC_PCFGWQOS1_0_wqos_map_timeout_SHIFT  (0U)
#define DDRC_PCFGWQOS1_0_wqos_map_timeout(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_PCFGWQOS1_0_wqos_map_timeout_SHIFT)) & DDRC_PCFGWQOS1_0_wqos_map_timeout_MASK)
/*! @} */

/*! @name DERATEEN_SHADOW - [SHADOW] Temperature Derate Enable Register */
/*! @{ */
#define DDRC_DERATEEN_SHADOW_derate_enable_MASK  (0x1U)
#define DDRC_DERATEEN_SHADOW_derate_enable_SHIFT (0U)
#define DDRC_DERATEEN_SHADOW_derate_value_MASK   (0x2U)
#define DDRC_DERATEEN_SHADOW_derate_value_SHIFT  (1U)
#define DDRC_DERATEEN_SHADOW_derate_byte_MASK    (0xF0U)
#define DDRC_DERATEEN_SHADOW_derate_byte_SHIFT   (4U)
#define DDRC_DERATEEN_SHADOW_derate_byte(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEEN_SHADOW_derate_byte_SHIFT)) & DDRC_DERATEEN_SHADOW_derate_byte_MASK)
#define DDRC_DERATEEN_SHADOW_rc_derate_value_MASK (0x300U)
#define DDRC_DERATEEN_SHADOW_rc_derate_value_SHIFT (8U)
#define DDRC_DERATEEN_SHADOW_rc_derate_value(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEEN_SHADOW_rc_derate_value_SHIFT)) & DDRC_DERATEEN_SHADOW_rc_derate_value_MASK)
/*! @} */

/*! @name DERATEINT_SHADOW - [SHADOW] Temperature Derate Interval Register */
/*! @{ */
#define DDRC_DERATEINT_SHADOW_mr4_read_interval_MASK (0xFFFFFFFFU)
#define DDRC_DERATEINT_SHADOW_mr4_read_interval_SHIFT (0U)
#define DDRC_DERATEINT_SHADOW_mr4_read_interval(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DERATEINT_SHADOW_mr4_read_interval_SHIFT)) & DDRC_DERATEINT_SHADOW_mr4_read_interval_MASK)
/*! @} */

/*! @name RFSHCTL0_SHADOW - [SHADOW] Refresh Control Register 0 */
/*! @{ */
#define DDRC_RFSHCTL0_SHADOW_per_bank_refresh_MASK (0x4U)
#define DDRC_RFSHCTL0_SHADOW_per_bank_refresh_SHIFT (2U)
#define DDRC_RFSHCTL0_SHADOW_refresh_burst_MASK  (0x1F0U)
#define DDRC_RFSHCTL0_SHADOW_refresh_burst_SHIFT (4U)
#define DDRC_RFSHCTL0_SHADOW_refresh_burst(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_SHADOW_refresh_burst_SHIFT)) & DDRC_RFSHCTL0_SHADOW_refresh_burst_MASK)
#define DDRC_RFSHCTL0_SHADOW_refresh_to_x32_MASK (0x1F000U)
#define DDRC_RFSHCTL0_SHADOW_refresh_to_x32_SHIFT (12U)
#define DDRC_RFSHCTL0_SHADOW_refresh_to_x32(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_SHADOW_refresh_to_x32_SHIFT)) & DDRC_RFSHCTL0_SHADOW_refresh_to_x32_MASK)
#define DDRC_RFSHCTL0_SHADOW_refresh_margin_MASK (0xF00000U)
#define DDRC_RFSHCTL0_SHADOW_refresh_margin_SHIFT (20U)
#define DDRC_RFSHCTL0_SHADOW_refresh_margin(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHCTL0_SHADOW_refresh_margin_SHIFT)) & DDRC_RFSHCTL0_SHADOW_refresh_margin_MASK)
/*! @} */

/*! @name RFSHTMG_SHADOW - [SHADOW] Refresh Timing Register */
/*! @{ */
#define DDRC_RFSHTMG_SHADOW_t_rfc_min_MASK       (0x3FFU)
#define DDRC_RFSHTMG_SHADOW_t_rfc_min_SHIFT      (0U)
#define DDRC_RFSHTMG_SHADOW_t_rfc_min(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHTMG_SHADOW_t_rfc_min_SHIFT)) & DDRC_RFSHTMG_SHADOW_t_rfc_min_MASK)
#define DDRC_RFSHTMG_SHADOW_lpddr3_trefbw_en_MASK (0x8000U)
#define DDRC_RFSHTMG_SHADOW_lpddr3_trefbw_en_SHIFT (15U)
#define DDRC_RFSHTMG_SHADOW_t_rfc_nom_x32_MASK   (0xFFF0000U)
#define DDRC_RFSHTMG_SHADOW_t_rfc_nom_x32_SHIFT  (16U)
#define DDRC_RFSHTMG_SHADOW_t_rfc_nom_x32(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_RFSHTMG_SHADOW_t_rfc_nom_x32_SHIFT)) & DDRC_RFSHTMG_SHADOW_t_rfc_nom_x32_MASK)
/*! @} */

/*! @name INIT3_SHADOW - [SHADOW] SDRAM Initialization Register 3 */
/*! @{ */
#define DDRC_INIT3_SHADOW_emr_MASK               (0xFFFFU)
#define DDRC_INIT3_SHADOW_emr_SHIFT              (0U)
#define DDRC_INIT3_SHADOW_emr(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_INIT3_SHADOW_emr_SHIFT)) & DDRC_INIT3_SHADOW_emr_MASK)
#define DDRC_INIT3_SHADOW_mr_MASK                (0xFFFF0000U)
#define DDRC_INIT3_SHADOW_mr_SHIFT               (16U)
#define DDRC_INIT3_SHADOW_mr(x)                  (((uint32_t)(((uint32_t)(x)) << DDRC_INIT3_SHADOW_mr_SHIFT)) & DDRC_INIT3_SHADOW_mr_MASK)
/*! @} */

/*! @name INIT4_SHADOW - [SHADOW] SDRAM Initialization Register 4 */
/*! @{ */
#define DDRC_INIT4_SHADOW_emr3_MASK              (0xFFFFU)
#define DDRC_INIT4_SHADOW_emr3_SHIFT             (0U)
#define DDRC_INIT4_SHADOW_emr3(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_INIT4_SHADOW_emr3_SHIFT)) & DDRC_INIT4_SHADOW_emr3_MASK)
#define DDRC_INIT4_SHADOW_emr2_MASK              (0xFFFF0000U)
#define DDRC_INIT4_SHADOW_emr2_SHIFT             (16U)
#define DDRC_INIT4_SHADOW_emr2(x)                (((uint32_t)(((uint32_t)(x)) << DDRC_INIT4_SHADOW_emr2_SHIFT)) & DDRC_INIT4_SHADOW_emr2_MASK)
/*! @} */

/*! @name INIT6_SHADOW - [SHADOW] SDRAM Initialization Register 6 */
/*! @{ */
#define DDRC_INIT6_SHADOW_mr5_MASK               (0xFFFFU)
#define DDRC_INIT6_SHADOW_mr5_SHIFT              (0U)
#define DDRC_INIT6_SHADOW_mr5(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_INIT6_SHADOW_mr5_SHIFT)) & DDRC_INIT6_SHADOW_mr5_MASK)
#define DDRC_INIT6_SHADOW_mr4_MASK               (0xFFFF0000U)
#define DDRC_INIT6_SHADOW_mr4_SHIFT              (16U)
#define DDRC_INIT6_SHADOW_mr4(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_INIT6_SHADOW_mr4_SHIFT)) & DDRC_INIT6_SHADOW_mr4_MASK)
/*! @} */

/*! @name INIT7_SHADOW - [SHADOW] SDRAM Initialization Register 7 */
/*! @{ */
#define DDRC_INIT7_SHADOW_mr6_MASK               (0xFFFF0000U)
#define DDRC_INIT7_SHADOW_mr6_SHIFT              (16U)
#define DDRC_INIT7_SHADOW_mr6(x)                 (((uint32_t)(((uint32_t)(x)) << DDRC_INIT7_SHADOW_mr6_SHIFT)) & DDRC_INIT7_SHADOW_mr6_MASK)
/*! @} */

/*! @name DRAMTMG0_SHADOW - [SHADOW] SDRAM Timing Register 0 */
/*! @{ */
#define DDRC_DRAMTMG0_SHADOW_t_ras_min_MASK      (0x3FU)
#define DDRC_DRAMTMG0_SHADOW_t_ras_min_SHIFT     (0U)
#define DDRC_DRAMTMG0_SHADOW_t_ras_min(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_SHADOW_t_ras_min_SHIFT)) & DDRC_DRAMTMG0_SHADOW_t_ras_min_MASK)
#define DDRC_DRAMTMG0_SHADOW_t_ras_max_MASK      (0x7F00U)
#define DDRC_DRAMTMG0_SHADOW_t_ras_max_SHIFT     (8U)
#define DDRC_DRAMTMG0_SHADOW_t_ras_max(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_SHADOW_t_ras_max_SHIFT)) & DDRC_DRAMTMG0_SHADOW_t_ras_max_MASK)
#define DDRC_DRAMTMG0_SHADOW_t_faw_MASK          (0x3F0000U)
#define DDRC_DRAMTMG0_SHADOW_t_faw_SHIFT         (16U)
#define DDRC_DRAMTMG0_SHADOW_t_faw(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_SHADOW_t_faw_SHIFT)) & DDRC_DRAMTMG0_SHADOW_t_faw_MASK)
#define DDRC_DRAMTMG0_SHADOW_wr2pre_MASK         (0x7F000000U)
#define DDRC_DRAMTMG0_SHADOW_wr2pre_SHIFT        (24U)
#define DDRC_DRAMTMG0_SHADOW_wr2pre(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG0_SHADOW_wr2pre_SHIFT)) & DDRC_DRAMTMG0_SHADOW_wr2pre_MASK)
/*! @} */

/*! @name DRAMTMG1_SHADOW - [SHADOW] SDRAM Timing Register 1 */
/*! @{ */
#define DDRC_DRAMTMG1_SHADOW_t_rc_MASK           (0x7FU)
#define DDRC_DRAMTMG1_SHADOW_t_rc_SHIFT          (0U)
#define DDRC_DRAMTMG1_SHADOW_t_rc(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_SHADOW_t_rc_SHIFT)) & DDRC_DRAMTMG1_SHADOW_t_rc_MASK)
#define DDRC_DRAMTMG1_SHADOW_rd2pre_MASK         (0x3F00U)
#define DDRC_DRAMTMG1_SHADOW_rd2pre_SHIFT        (8U)
#define DDRC_DRAMTMG1_SHADOW_rd2pre(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_SHADOW_rd2pre_SHIFT)) & DDRC_DRAMTMG1_SHADOW_rd2pre_MASK)
#define DDRC_DRAMTMG1_SHADOW_t_xp_MASK           (0x1F0000U)
#define DDRC_DRAMTMG1_SHADOW_t_xp_SHIFT          (16U)
#define DDRC_DRAMTMG1_SHADOW_t_xp(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG1_SHADOW_t_xp_SHIFT)) & DDRC_DRAMTMG1_SHADOW_t_xp_MASK)
/*! @} */

/*! @name DRAMTMG2_SHADOW - [SHADOW] SDRAM Timing Register 2 */
/*! @{ */
#define DDRC_DRAMTMG2_SHADOW_wr2rd_MASK          (0x3FU)
#define DDRC_DRAMTMG2_SHADOW_wr2rd_SHIFT         (0U)
#define DDRC_DRAMTMG2_SHADOW_wr2rd(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_SHADOW_wr2rd_SHIFT)) & DDRC_DRAMTMG2_SHADOW_wr2rd_MASK)
#define DDRC_DRAMTMG2_SHADOW_rd2wr_MASK          (0x3F00U)
#define DDRC_DRAMTMG2_SHADOW_rd2wr_SHIFT         (8U)
#define DDRC_DRAMTMG2_SHADOW_rd2wr(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_SHADOW_rd2wr_SHIFT)) & DDRC_DRAMTMG2_SHADOW_rd2wr_MASK)
#define DDRC_DRAMTMG2_SHADOW_read_latency_MASK   (0x3F0000U)
#define DDRC_DRAMTMG2_SHADOW_read_latency_SHIFT  (16U)
#define DDRC_DRAMTMG2_SHADOW_read_latency(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_SHADOW_read_latency_SHIFT)) & DDRC_DRAMTMG2_SHADOW_read_latency_MASK)
#define DDRC_DRAMTMG2_SHADOW_write_latency_MASK  (0x3F000000U)
#define DDRC_DRAMTMG2_SHADOW_write_latency_SHIFT (24U)
#define DDRC_DRAMTMG2_SHADOW_write_latency(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG2_SHADOW_write_latency_SHIFT)) & DDRC_DRAMTMG2_SHADOW_write_latency_MASK)
/*! @} */

/*! @name DRAMTMG3_SHADOW - [SHADOW] SDRAM Timing Register 3 */
/*! @{ */
#define DDRC_DRAMTMG3_SHADOW_t_mod_MASK          (0x3FFU)
#define DDRC_DRAMTMG3_SHADOW_t_mod_SHIFT         (0U)
#define DDRC_DRAMTMG3_SHADOW_t_mod(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_SHADOW_t_mod_SHIFT)) & DDRC_DRAMTMG3_SHADOW_t_mod_MASK)
#define DDRC_DRAMTMG3_SHADOW_t_mrd_MASK          (0x3F000U)
#define DDRC_DRAMTMG3_SHADOW_t_mrd_SHIFT         (12U)
#define DDRC_DRAMTMG3_SHADOW_t_mrd(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_SHADOW_t_mrd_SHIFT)) & DDRC_DRAMTMG3_SHADOW_t_mrd_MASK)
#define DDRC_DRAMTMG3_SHADOW_t_mrw_MASK          (0x3FF00000U)
#define DDRC_DRAMTMG3_SHADOW_t_mrw_SHIFT         (20U)
#define DDRC_DRAMTMG3_SHADOW_t_mrw(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG3_SHADOW_t_mrw_SHIFT)) & DDRC_DRAMTMG3_SHADOW_t_mrw_MASK)
/*! @} */

/*! @name DRAMTMG4_SHADOW - [SHADOW] SDRAM Timing Register 4 */
/*! @{ */
#define DDRC_DRAMTMG4_SHADOW_t_rp_MASK           (0x1FU)
#define DDRC_DRAMTMG4_SHADOW_t_rp_SHIFT          (0U)
#define DDRC_DRAMTMG4_SHADOW_t_rp(x)             (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_SHADOW_t_rp_SHIFT)) & DDRC_DRAMTMG4_SHADOW_t_rp_MASK)
#define DDRC_DRAMTMG4_SHADOW_t_rrd_MASK          (0xF00U)
#define DDRC_DRAMTMG4_SHADOW_t_rrd_SHIFT         (8U)
#define DDRC_DRAMTMG4_SHADOW_t_rrd(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_SHADOW_t_rrd_SHIFT)) & DDRC_DRAMTMG4_SHADOW_t_rrd_MASK)
#define DDRC_DRAMTMG4_SHADOW_t_ccd_MASK          (0xF0000U)
#define DDRC_DRAMTMG4_SHADOW_t_ccd_SHIFT         (16U)
#define DDRC_DRAMTMG4_SHADOW_t_ccd(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_SHADOW_t_ccd_SHIFT)) & DDRC_DRAMTMG4_SHADOW_t_ccd_MASK)
#define DDRC_DRAMTMG4_SHADOW_t_rcd_MASK          (0x1F000000U)
#define DDRC_DRAMTMG4_SHADOW_t_rcd_SHIFT         (24U)
#define DDRC_DRAMTMG4_SHADOW_t_rcd(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG4_SHADOW_t_rcd_SHIFT)) & DDRC_DRAMTMG4_SHADOW_t_rcd_MASK)
/*! @} */

/*! @name DRAMTMG5_SHADOW - [SHADOW] SDRAM Timing Register 5 */
/*! @{ */
#define DDRC_DRAMTMG5_SHADOW_t_cke_MASK          (0x1FU)
#define DDRC_DRAMTMG5_SHADOW_t_cke_SHIFT         (0U)
#define DDRC_DRAMTMG5_SHADOW_t_cke(x)            (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_SHADOW_t_cke_SHIFT)) & DDRC_DRAMTMG5_SHADOW_t_cke_MASK)
#define DDRC_DRAMTMG5_SHADOW_t_ckesr_MASK        (0x3F00U)
#define DDRC_DRAMTMG5_SHADOW_t_ckesr_SHIFT       (8U)
#define DDRC_DRAMTMG5_SHADOW_t_ckesr(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_SHADOW_t_ckesr_SHIFT)) & DDRC_DRAMTMG5_SHADOW_t_ckesr_MASK)
#define DDRC_DRAMTMG5_SHADOW_t_cksre_MASK        (0xF0000U)
#define DDRC_DRAMTMG5_SHADOW_t_cksre_SHIFT       (16U)
#define DDRC_DRAMTMG5_SHADOW_t_cksre(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_SHADOW_t_cksre_SHIFT)) & DDRC_DRAMTMG5_SHADOW_t_cksre_MASK)
#define DDRC_DRAMTMG5_SHADOW_t_cksrx_MASK        (0xF000000U)
#define DDRC_DRAMTMG5_SHADOW_t_cksrx_SHIFT       (24U)
#define DDRC_DRAMTMG5_SHADOW_t_cksrx(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG5_SHADOW_t_cksrx_SHIFT)) & DDRC_DRAMTMG5_SHADOW_t_cksrx_MASK)
/*! @} */

/*! @name DRAMTMG6_SHADOW - [SHADOW] SDRAM Timing Register 6 */
/*! @{ */
#define DDRC_DRAMTMG6_SHADOW_t_ckcsx_MASK        (0xFU)
#define DDRC_DRAMTMG6_SHADOW_t_ckcsx_SHIFT       (0U)
#define DDRC_DRAMTMG6_SHADOW_t_ckcsx(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_SHADOW_t_ckcsx_SHIFT)) & DDRC_DRAMTMG6_SHADOW_t_ckcsx_MASK)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpdx_MASK       (0xF0000U)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpdx_SHIFT      (16U)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpdx(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_SHADOW_t_ckdpdx_SHIFT)) & DDRC_DRAMTMG6_SHADOW_t_ckdpdx_MASK)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpde_MASK       (0xF000000U)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpde_SHIFT      (24U)
#define DDRC_DRAMTMG6_SHADOW_t_ckdpde(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG6_SHADOW_t_ckdpde_SHIFT)) & DDRC_DRAMTMG6_SHADOW_t_ckdpde_MASK)
/*! @} */

/*! @name DRAMTMG7_SHADOW - [SHADOW] SDRAM Timing Register 7 */
/*! @{ */
#define DDRC_DRAMTMG7_SHADOW_t_ckpdx_MASK        (0xFU)
#define DDRC_DRAMTMG7_SHADOW_t_ckpdx_SHIFT       (0U)
#define DDRC_DRAMTMG7_SHADOW_t_ckpdx(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG7_SHADOW_t_ckpdx_SHIFT)) & DDRC_DRAMTMG7_SHADOW_t_ckpdx_MASK)
#define DDRC_DRAMTMG7_SHADOW_t_ckpde_MASK        (0xF00U)
#define DDRC_DRAMTMG7_SHADOW_t_ckpde_SHIFT       (8U)
#define DDRC_DRAMTMG7_SHADOW_t_ckpde(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG7_SHADOW_t_ckpde_SHIFT)) & DDRC_DRAMTMG7_SHADOW_t_ckpde_MASK)
/*! @} */

/*! @name DRAMTMG8_SHADOW - [SHADOW] SDRAM Timing Register 8 */
/*! @{ */
#define DDRC_DRAMTMG8_SHADOW_t_xs_x32_MASK       (0x7FU)
#define DDRC_DRAMTMG8_SHADOW_t_xs_x32_SHIFT      (0U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_x32(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_SHADOW_t_xs_x32_SHIFT)) & DDRC_DRAMTMG8_SHADOW_t_xs_x32_MASK)
#define DDRC_DRAMTMG8_SHADOW_t_xs_dll_x32_MASK   (0x7F00U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_dll_x32_SHIFT  (8U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_dll_x32(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_SHADOW_t_xs_dll_x32_SHIFT)) & DDRC_DRAMTMG8_SHADOW_t_xs_dll_x32_MASK)
#define DDRC_DRAMTMG8_SHADOW_t_xs_abort_x32_MASK (0x7F0000U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_abort_x32_SHIFT (16U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_abort_x32(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_SHADOW_t_xs_abort_x32_SHIFT)) & DDRC_DRAMTMG8_SHADOW_t_xs_abort_x32_MASK)
#define DDRC_DRAMTMG8_SHADOW_t_xs_fast_x32_MASK  (0x7F000000U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_fast_x32_SHIFT (24U)
#define DDRC_DRAMTMG8_SHADOW_t_xs_fast_x32(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG8_SHADOW_t_xs_fast_x32_SHIFT)) & DDRC_DRAMTMG8_SHADOW_t_xs_fast_x32_MASK)
/*! @} */

/*! @name DRAMTMG9_SHADOW - [SHADOW] SDRAM Timing Register 9 */
/*! @{ */
#define DDRC_DRAMTMG9_SHADOW_wr2rd_s_MASK        (0x3FU)
#define DDRC_DRAMTMG9_SHADOW_wr2rd_s_SHIFT       (0U)
#define DDRC_DRAMTMG9_SHADOW_wr2rd_s(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_SHADOW_wr2rd_s_SHIFT)) & DDRC_DRAMTMG9_SHADOW_wr2rd_s_MASK)
#define DDRC_DRAMTMG9_SHADOW_t_rrd_s_MASK        (0xF00U)
#define DDRC_DRAMTMG9_SHADOW_t_rrd_s_SHIFT       (8U)
#define DDRC_DRAMTMG9_SHADOW_t_rrd_s(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_SHADOW_t_rrd_s_SHIFT)) & DDRC_DRAMTMG9_SHADOW_t_rrd_s_MASK)
#define DDRC_DRAMTMG9_SHADOW_t_ccd_s_MASK        (0x70000U)
#define DDRC_DRAMTMG9_SHADOW_t_ccd_s_SHIFT       (16U)
#define DDRC_DRAMTMG9_SHADOW_t_ccd_s(x)          (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG9_SHADOW_t_ccd_s_SHIFT)) & DDRC_DRAMTMG9_SHADOW_t_ccd_s_MASK)
#define DDRC_DRAMTMG9_SHADOW_ddr4_wr_preamble_MASK (0x40000000U)
#define DDRC_DRAMTMG9_SHADOW_ddr4_wr_preamble_SHIFT (30U)
/*! @} */

/*! @name DRAMTMG10_SHADOW - [SHADOW] SDRAM Timing Register 10 */
/*! @{ */
#define DDRC_DRAMTMG10_SHADOW_t_gear_hold_MASK   (0x3U)
#define DDRC_DRAMTMG10_SHADOW_t_gear_hold_SHIFT  (0U)
#define DDRC_DRAMTMG10_SHADOW_t_gear_hold(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_SHADOW_t_gear_hold_SHIFT)) & DDRC_DRAMTMG10_SHADOW_t_gear_hold_MASK)
#define DDRC_DRAMTMG10_SHADOW_t_gear_setup_MASK  (0xCU)
#define DDRC_DRAMTMG10_SHADOW_t_gear_setup_SHIFT (2U)
#define DDRC_DRAMTMG10_SHADOW_t_gear_setup(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_SHADOW_t_gear_setup_SHIFT)) & DDRC_DRAMTMG10_SHADOW_t_gear_setup_MASK)
#define DDRC_DRAMTMG10_SHADOW_t_cmd_gear_MASK    (0x1F00U)
#define DDRC_DRAMTMG10_SHADOW_t_cmd_gear_SHIFT   (8U)
#define DDRC_DRAMTMG10_SHADOW_t_cmd_gear(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_SHADOW_t_cmd_gear_SHIFT)) & DDRC_DRAMTMG10_SHADOW_t_cmd_gear_MASK)
#define DDRC_DRAMTMG10_SHADOW_t_sync_gear_MASK   (0x1F0000U)
#define DDRC_DRAMTMG10_SHADOW_t_sync_gear_SHIFT  (16U)
#define DDRC_DRAMTMG10_SHADOW_t_sync_gear(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG10_SHADOW_t_sync_gear_SHIFT)) & DDRC_DRAMTMG10_SHADOW_t_sync_gear_MASK)
/*! @} */

/*! @name DRAMTMG11_SHADOW - [SHADOW] SDRAM Timing Register 11 */
/*! @{ */
#define DDRC_DRAMTMG11_SHADOW_t_ckmpe_MASK       (0x1FU)
#define DDRC_DRAMTMG11_SHADOW_t_ckmpe_SHIFT      (0U)
#define DDRC_DRAMTMG11_SHADOW_t_ckmpe(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_SHADOW_t_ckmpe_SHIFT)) & DDRC_DRAMTMG11_SHADOW_t_ckmpe_MASK)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_s_MASK       (0x300U)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_s_SHIFT      (8U)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_s(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_SHADOW_t_mpx_s_SHIFT)) & DDRC_DRAMTMG11_SHADOW_t_mpx_s_MASK)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_lh_MASK      (0x1F0000U)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_lh_SHIFT     (16U)
#define DDRC_DRAMTMG11_SHADOW_t_mpx_lh(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_SHADOW_t_mpx_lh_SHIFT)) & DDRC_DRAMTMG11_SHADOW_t_mpx_lh_MASK)
#define DDRC_DRAMTMG11_SHADOW_post_mpsm_gap_x32_MASK (0x7F000000U)
#define DDRC_DRAMTMG11_SHADOW_post_mpsm_gap_x32_SHIFT (24U)
#define DDRC_DRAMTMG11_SHADOW_post_mpsm_gap_x32(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG11_SHADOW_post_mpsm_gap_x32_SHIFT)) & DDRC_DRAMTMG11_SHADOW_post_mpsm_gap_x32_MASK)
/*! @} */

/*! @name DRAMTMG12_SHADOW - [SHADOW] SDRAM Timing Register 12 */
/*! @{ */
#define DDRC_DRAMTMG12_SHADOW_t_mrd_pda_MASK     (0x1FU)
#define DDRC_DRAMTMG12_SHADOW_t_mrd_pda_SHIFT    (0U)
#define DDRC_DRAMTMG12_SHADOW_t_mrd_pda(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_SHADOW_t_mrd_pda_SHIFT)) & DDRC_DRAMTMG12_SHADOW_t_mrd_pda_MASK)
#define DDRC_DRAMTMG12_SHADOW_t_ckehcmd_MASK     (0xF00U)
#define DDRC_DRAMTMG12_SHADOW_t_ckehcmd_SHIFT    (8U)
#define DDRC_DRAMTMG12_SHADOW_t_ckehcmd(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_SHADOW_t_ckehcmd_SHIFT)) & DDRC_DRAMTMG12_SHADOW_t_ckehcmd_MASK)
#define DDRC_DRAMTMG12_SHADOW_t_cmdcke_MASK      (0x30000U)
#define DDRC_DRAMTMG12_SHADOW_t_cmdcke_SHIFT     (16U)
#define DDRC_DRAMTMG12_SHADOW_t_cmdcke(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG12_SHADOW_t_cmdcke_SHIFT)) & DDRC_DRAMTMG12_SHADOW_t_cmdcke_MASK)
/*! @} */

/*! @name DRAMTMG13_SHADOW - [SHADOW] SDRAM Timing Register 13 */
/*! @{ */
#define DDRC_DRAMTMG13_SHADOW_t_ppd_MASK         (0x7U)
#define DDRC_DRAMTMG13_SHADOW_t_ppd_SHIFT        (0U)
#define DDRC_DRAMTMG13_SHADOW_t_ppd(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_SHADOW_t_ppd_SHIFT)) & DDRC_DRAMTMG13_SHADOW_t_ppd_MASK)
#define DDRC_DRAMTMG13_SHADOW_t_ccd_mw_MASK      (0x3F0000U)
#define DDRC_DRAMTMG13_SHADOW_t_ccd_mw_SHIFT     (16U)
#define DDRC_DRAMTMG13_SHADOW_t_ccd_mw(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_SHADOW_t_ccd_mw_SHIFT)) & DDRC_DRAMTMG13_SHADOW_t_ccd_mw_MASK)
#define DDRC_DRAMTMG13_SHADOW_odtloff_MASK       (0x7F000000U)
#define DDRC_DRAMTMG13_SHADOW_odtloff_SHIFT      (24U)
#define DDRC_DRAMTMG13_SHADOW_odtloff(x)         (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG13_SHADOW_odtloff_SHIFT)) & DDRC_DRAMTMG13_SHADOW_odtloff_MASK)
/*! @} */

/*! @name DRAMTMG14_SHADOW - [SHADOW] SDRAM Timing Register 14 */
/*! @{ */
#define DDRC_DRAMTMG14_SHADOW_t_xsr_MASK         (0xFFFU)
#define DDRC_DRAMTMG14_SHADOW_t_xsr_SHIFT        (0U)
#define DDRC_DRAMTMG14_SHADOW_t_xsr(x)           (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG14_SHADOW_t_xsr_SHIFT)) & DDRC_DRAMTMG14_SHADOW_t_xsr_MASK)
/*! @} */

/*! @name DRAMTMG15_SHADOW - [SHADOW] SDRAM Timing Register 15 */
/*! @{ */
#define DDRC_DRAMTMG15_SHADOW_t_stab_x32_MASK    (0xFFU)
#define DDRC_DRAMTMG15_SHADOW_t_stab_x32_SHIFT   (0U)
#define DDRC_DRAMTMG15_SHADOW_t_stab_x32(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_DRAMTMG15_SHADOW_t_stab_x32_SHIFT)) & DDRC_DRAMTMG15_SHADOW_t_stab_x32_MASK)
#define DDRC_DRAMTMG15_SHADOW_en_dfi_lp_t_stab_MASK (0x80000000U)
#define DDRC_DRAMTMG15_SHADOW_en_dfi_lp_t_stab_SHIFT (31U)
/*! @} */

/*! @name ZQCTL0_SHADOW - [SHADOW] ZQ Control Register 0 */
/*! @{ */
#define DDRC_ZQCTL0_SHADOW_t_zq_short_nop_MASK   (0x3FFU)
#define DDRC_ZQCTL0_SHADOW_t_zq_short_nop_SHIFT  (0U)
#define DDRC_ZQCTL0_SHADOW_t_zq_short_nop(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL0_SHADOW_t_zq_short_nop_SHIFT)) & DDRC_ZQCTL0_SHADOW_t_zq_short_nop_MASK)
#define DDRC_ZQCTL0_SHADOW_t_zq_long_nop_MASK    (0x7FF0000U)
#define DDRC_ZQCTL0_SHADOW_t_zq_long_nop_SHIFT   (16U)
#define DDRC_ZQCTL0_SHADOW_t_zq_long_nop(x)      (((uint32_t)(((uint32_t)(x)) << DDRC_ZQCTL0_SHADOW_t_zq_long_nop_SHIFT)) & DDRC_ZQCTL0_SHADOW_t_zq_long_nop_MASK)
#define DDRC_ZQCTL0_SHADOW_dis_mpsmx_zqcl_MASK   (0x10000000U)
#define DDRC_ZQCTL0_SHADOW_dis_mpsmx_zqcl_SHIFT  (28U)
#define DDRC_ZQCTL0_SHADOW_zq_resistor_shared_MASK (0x20000000U)
#define DDRC_ZQCTL0_SHADOW_zq_resistor_shared_SHIFT (29U)
#define DDRC_ZQCTL0_SHADOW_dis_srx_zqcl_MASK     (0x40000000U)
#define DDRC_ZQCTL0_SHADOW_dis_srx_zqcl_SHIFT    (30U)
#define DDRC_ZQCTL0_SHADOW_dis_auto_zq_MASK      (0x80000000U)
#define DDRC_ZQCTL0_SHADOW_dis_auto_zq_SHIFT     (31U)
/*! @} */

/*! @name DFITMG0_SHADOW - [SHADOW] DFI Timing Register 0 */
/*! @{ */
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrlat_MASK  (0x3FU)
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrlat_SHIFT (0U)
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrlat(x)    (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_SHADOW_dfi_tphy_wrlat_SHIFT)) & DDRC_DFITMG0_SHADOW_dfi_tphy_wrlat_MASK)
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrdata_MASK (0x3F00U)
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrdata_SHIFT (8U)
#define DDRC_DFITMG0_SHADOW_dfi_tphy_wrdata(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_SHADOW_dfi_tphy_wrdata_SHIFT)) & DDRC_DFITMG0_SHADOW_dfi_tphy_wrdata_MASK)
#define DDRC_DFITMG0_SHADOW_dfi_wrdata_use_sdr_MASK (0x8000U)
#define DDRC_DFITMG0_SHADOW_dfi_wrdata_use_sdr_SHIFT (15U)
#define DDRC_DFITMG0_SHADOW_dfi_t_rddata_en_MASK (0x7F0000U)
#define DDRC_DFITMG0_SHADOW_dfi_t_rddata_en_SHIFT (16U)
#define DDRC_DFITMG0_SHADOW_dfi_t_rddata_en(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_SHADOW_dfi_t_rddata_en_SHIFT)) & DDRC_DFITMG0_SHADOW_dfi_t_rddata_en_MASK)
#define DDRC_DFITMG0_SHADOW_dfi_rddata_use_sdr_MASK (0x800000U)
#define DDRC_DFITMG0_SHADOW_dfi_rddata_use_sdr_SHIFT (23U)
#define DDRC_DFITMG0_SHADOW_dfi_t_ctrl_delay_MASK (0x1F000000U)
#define DDRC_DFITMG0_SHADOW_dfi_t_ctrl_delay_SHIFT (24U)
#define DDRC_DFITMG0_SHADOW_dfi_t_ctrl_delay(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG0_SHADOW_dfi_t_ctrl_delay_SHIFT)) & DDRC_DFITMG0_SHADOW_dfi_t_ctrl_delay_MASK)
/*! @} */

/*! @name DFITMG1_SHADOW - [SHADOW] DFI Timing Register 1 */
/*! @{ */
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_enable_MASK (0x1FU)
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_enable_SHIFT (0U)
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_enable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_enable_SHIFT)) & DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_enable_MASK)
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_disable_MASK (0x1F00U)
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_disable_SHIFT (8U)
#define DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_disable(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_disable_SHIFT)) & DDRC_DFITMG1_SHADOW_dfi_t_dram_clk_disable_MASK)
#define DDRC_DFITMG1_SHADOW_dfi_t_wrdata_delay_MASK (0x1F0000U)
#define DDRC_DFITMG1_SHADOW_dfi_t_wrdata_delay_SHIFT (16U)
#define DDRC_DFITMG1_SHADOW_dfi_t_wrdata_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_SHADOW_dfi_t_wrdata_delay_SHIFT)) & DDRC_DFITMG1_SHADOW_dfi_t_wrdata_delay_MASK)
#define DDRC_DFITMG1_SHADOW_dfi_t_parin_lat_MASK (0x3000000U)
#define DDRC_DFITMG1_SHADOW_dfi_t_parin_lat_SHIFT (24U)
#define DDRC_DFITMG1_SHADOW_dfi_t_parin_lat(x)   (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_SHADOW_dfi_t_parin_lat_SHIFT)) & DDRC_DFITMG1_SHADOW_dfi_t_parin_lat_MASK)
#define DDRC_DFITMG1_SHADOW_dfi_t_cmd_lat_MASK   (0xF0000000U)
#define DDRC_DFITMG1_SHADOW_dfi_t_cmd_lat_SHIFT  (28U)
#define DDRC_DFITMG1_SHADOW_dfi_t_cmd_lat(x)     (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG1_SHADOW_dfi_t_cmd_lat_SHIFT)) & DDRC_DFITMG1_SHADOW_dfi_t_cmd_lat_MASK)
/*! @} */

/*! @name DFITMG2_SHADOW - [SHADOW] DFI Timing Register 2 */
/*! @{ */
#define DDRC_DFITMG2_SHADOW_dfi_tphy_wrcslat_MASK (0x3FU)
#define DDRC_DFITMG2_SHADOW_dfi_tphy_wrcslat_SHIFT (0U)
#define DDRC_DFITMG2_SHADOW_dfi_tphy_wrcslat(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG2_SHADOW_dfi_tphy_wrcslat_SHIFT)) & DDRC_DFITMG2_SHADOW_dfi_tphy_wrcslat_MASK)
#define DDRC_DFITMG2_SHADOW_dfi_tphy_rdcslat_MASK (0x7F00U)
#define DDRC_DFITMG2_SHADOW_dfi_tphy_rdcslat_SHIFT (8U)
#define DDRC_DFITMG2_SHADOW_dfi_tphy_rdcslat(x)  (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG2_SHADOW_dfi_tphy_rdcslat_SHIFT)) & DDRC_DFITMG2_SHADOW_dfi_tphy_rdcslat_MASK)
/*! @} */

/*! @name DFITMG3_SHADOW - [SHADOW] DFI Timing Register 3 */
/*! @{ */
#define DDRC_DFITMG3_SHADOW_dfi_t_geardown_delay_MASK (0x1FU)
#define DDRC_DFITMG3_SHADOW_dfi_t_geardown_delay_SHIFT (0U)
#define DDRC_DFITMG3_SHADOW_dfi_t_geardown_delay(x) (((uint32_t)(((uint32_t)(x)) << DDRC_DFITMG3_SHADOW_dfi_t_geardown_delay_SHIFT)) & DDRC_DFITMG3_SHADOW_dfi_t_geardown_delay_MASK)
/*! @} */

/*! @name ODTCFG_SHADOW - [SHADOW] ODT Configuration Register */
/*! @{ */
#define DDRC_ODTCFG_SHADOW_rd_odt_delay_MASK     (0x7CU)
#define DDRC_ODTCFG_SHADOW_rd_odt_delay_SHIFT    (2U)
#define DDRC_ODTCFG_SHADOW_rd_odt_delay(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_SHADOW_rd_odt_delay_SHIFT)) & DDRC_ODTCFG_SHADOW_rd_odt_delay_MASK)
#define DDRC_ODTCFG_SHADOW_rd_odt_hold_MASK      (0xF00U)
#define DDRC_ODTCFG_SHADOW_rd_odt_hold_SHIFT     (8U)
#define DDRC_ODTCFG_SHADOW_rd_odt_hold(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_SHADOW_rd_odt_hold_SHIFT)) & DDRC_ODTCFG_SHADOW_rd_odt_hold_MASK)
#define DDRC_ODTCFG_SHADOW_wr_odt_delay_MASK     (0x1F0000U)
#define DDRC_ODTCFG_SHADOW_wr_odt_delay_SHIFT    (16U)
#define DDRC_ODTCFG_SHADOW_wr_odt_delay(x)       (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_SHADOW_wr_odt_delay_SHIFT)) & DDRC_ODTCFG_SHADOW_wr_odt_delay_MASK)
#define DDRC_ODTCFG_SHADOW_wr_odt_hold_MASK      (0xF000000U)
#define DDRC_ODTCFG_SHADOW_wr_odt_hold_SHIFT     (24U)
#define DDRC_ODTCFG_SHADOW_wr_odt_hold(x)        (((uint32_t)(((uint32_t)(x)) << DDRC_ODTCFG_SHADOW_wr_odt_hold_SHIFT)) & DDRC_ODTCFG_SHADOW_wr_odt_hold_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DDRC_Register_Masks */


/* DDRC - Peripheral instance base addresses */
/** Peripheral DDRC base pointer */
#define DDRC_BASE_PTR                            ((DDRC_MemMapPtr)0x3D400000u)
/** Array initializer of DDRC peripheral base pointers */
#define DDRC_BASE_PTRS                           { DDRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DDRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DDRC_Register_Accessor_Macros DDRC - Register accessor macros
 * @{
 */


/* DDRC - Register instance definitions */
/* DDRC */
#define DDRC_MSTR                                DDRC_MSTR_REG(DDRC_BASE_PTR)
#define DDRC_STAT                                DDRC_STAT_REG(DDRC_BASE_PTR)
#define DDRC_MSTR1                               DDRC_MSTR1_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL3                             DDRC_MRCTRL3_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL0                             DDRC_MRCTRL0_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL1                             DDRC_MRCTRL1_REG(DDRC_BASE_PTR)
#define DDRC_MRSTAT                              DDRC_MRSTAT_REG(DDRC_BASE_PTR)
#define DDRC_MRCTRL2                             DDRC_MRCTRL2_REG(DDRC_BASE_PTR)
#define DDRC_DERATEEN                            DDRC_DERATEEN_REG(DDRC_BASE_PTR)
#define DDRC_DERATEINT                           DDRC_DERATEINT_REG(DDRC_BASE_PTR)
#define DDRC_PWRCTL                              DDRC_PWRCTL_REG(DDRC_BASE_PTR)
#define DDRC_PWRTMG                              DDRC_PWRTMG_REG(DDRC_BASE_PTR)
#define DDRC_HWLPCTL                             DDRC_HWLPCTL_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL0                            DDRC_RFSHCTL0_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL1                            DDRC_RFSHCTL1_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL3                            DDRC_RFSHCTL3_REG(DDRC_BASE_PTR)
#define DDRC_RFSHTMG                             DDRC_RFSHTMG_REG(DDRC_BASE_PTR)
#define DDRC_INIT0                               DDRC_INIT0_REG(DDRC_BASE_PTR)
#define DDRC_INIT1                               DDRC_INIT1_REG(DDRC_BASE_PTR)
#define DDRC_INIT2                               DDRC_INIT2_REG(DDRC_BASE_PTR)
#define DDRC_INIT3                               DDRC_INIT3_REG(DDRC_BASE_PTR)
#define DDRC_INIT4                               DDRC_INIT4_REG(DDRC_BASE_PTR)
#define DDRC_INIT5                               DDRC_INIT5_REG(DDRC_BASE_PTR)
#define DDRC_INIT6                               DDRC_INIT6_REG(DDRC_BASE_PTR)
#define DDRC_INIT7                               DDRC_INIT7_REG(DDRC_BASE_PTR)
#define DDRC_DIMMCTL                             DDRC_DIMMCTL_REG(DDRC_BASE_PTR)
#define DDRC_RANKCTL                             DDRC_RANKCTL_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG0                            DDRC_DRAMTMG0_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG1                            DDRC_DRAMTMG1_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG2                            DDRC_DRAMTMG2_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG3                            DDRC_DRAMTMG3_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG4                            DDRC_DRAMTMG4_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG5                            DDRC_DRAMTMG5_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG6                            DDRC_DRAMTMG6_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG7                            DDRC_DRAMTMG7_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG8                            DDRC_DRAMTMG8_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG9                            DDRC_DRAMTMG9_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG10                           DDRC_DRAMTMG10_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG11                           DDRC_DRAMTMG11_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG12                           DDRC_DRAMTMG12_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG13                           DDRC_DRAMTMG13_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG14                           DDRC_DRAMTMG14_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG15                           DDRC_DRAMTMG15_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL0                              DDRC_ZQCTL0_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL1                              DDRC_ZQCTL1_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL2                              DDRC_ZQCTL2_REG(DDRC_BASE_PTR)
#define DDRC_ZQSTAT                              DDRC_ZQSTAT_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG0                             DDRC_DFITMG0_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG1                             DDRC_DFITMG1_REG(DDRC_BASE_PTR)
#define DDRC_DFILPCFG0                           DDRC_DFILPCFG0_REG(DDRC_BASE_PTR)
#define DDRC_DFILPCFG1                           DDRC_DFILPCFG1_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD0                             DDRC_DFIUPD0_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD1                             DDRC_DFIUPD1_REG(DDRC_BASE_PTR)
#define DDRC_DFIUPD2                             DDRC_DFIUPD2_REG(DDRC_BASE_PTR)
#define DDRC_DFIMISC                             DDRC_DFIMISC_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG2                             DDRC_DFITMG2_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG3                             DDRC_DFITMG3_REG(DDRC_BASE_PTR)
#define DDRC_DFISTAT                             DDRC_DFISTAT_REG(DDRC_BASE_PTR)
#define DDRC_DBICTL                              DDRC_DBICTL_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP0                            DDRC_ADDRMAP0_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP1                            DDRC_ADDRMAP1_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP2                            DDRC_ADDRMAP2_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP3                            DDRC_ADDRMAP3_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP4                            DDRC_ADDRMAP4_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP5                            DDRC_ADDRMAP5_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP6                            DDRC_ADDRMAP6_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP7                            DDRC_ADDRMAP7_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP8                            DDRC_ADDRMAP8_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP9                            DDRC_ADDRMAP9_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP10                           DDRC_ADDRMAP10_REG(DDRC_BASE_PTR)
#define DDRC_ADDRMAP11                           DDRC_ADDRMAP11_REG(DDRC_BASE_PTR)
#define DDRC_ODTCFG                              DDRC_ODTCFG_REG(DDRC_BASE_PTR)
#define DDRC_ODTMAP                              DDRC_ODTMAP_REG(DDRC_BASE_PTR)
#define DDRC_SCHED                               DDRC_SCHED_REG(DDRC_BASE_PTR)
#define DDRC_SCHED1                              DDRC_SCHED1_REG(DDRC_BASE_PTR)
#define DDRC_PERFHPR1                            DDRC_PERFHPR1_REG(DDRC_BASE_PTR)
#define DDRC_PERFLPR1                            DDRC_PERFLPR1_REG(DDRC_BASE_PTR)
#define DDRC_PERFWR1                             DDRC_PERFWR1_REG(DDRC_BASE_PTR)
#define DDRC_DBG0                                DDRC_DBG0_REG(DDRC_BASE_PTR)
#define DDRC_DBG1                                DDRC_DBG1_REG(DDRC_BASE_PTR)
#define DDRC_DBGCAM                              DDRC_DBGCAM_REG(DDRC_BASE_PTR)
#define DDRC_DBGCMD                              DDRC_DBGCMD_REG(DDRC_BASE_PTR)
#define DDRC_DBGSTAT                             DDRC_DBGSTAT_REG(DDRC_BASE_PTR)
#define DDRC_SWCTL                               DDRC_SWCTL_REG(DDRC_BASE_PTR)
#define DDRC_SWSTAT                              DDRC_SWSTAT_REG(DDRC_BASE_PTR)
#define DDRC_POISONCFG                           DDRC_POISONCFG_REG(DDRC_BASE_PTR)
#define DDRC_POISONSTAT                          DDRC_POISONSTAT_REG(DDRC_BASE_PTR)
#define DDRC_PSTAT                               DDRC_PSTAT_REG(DDRC_BASE_PTR)
#define DDRC_PCCFG                               DDRC_PCCFG_REG(DDRC_BASE_PTR)
#define DDRC_PCFGR_0                             DDRC_PCFGR_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGW_0                             DDRC_PCFGW_0_REG(DDRC_BASE_PTR)
#define DDRC_PCTRL_0                             DDRC_PCTRL_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGQOS0_0                          DDRC_PCFGQOS0_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGQOS1_0                          DDRC_PCFGQOS1_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGWQOS0_0                         DDRC_PCFGWQOS0_0_REG(DDRC_BASE_PTR)
#define DDRC_PCFGWQOS1_0                         DDRC_PCFGWQOS1_0_REG(DDRC_BASE_PTR)
#define DDRC_DERATEEN_SHADOW                     DDRC_DERATEEN_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DERATEINT_SHADOW                    DDRC_DERATEINT_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_RFSHCTL0_SHADOW                     DDRC_RFSHCTL0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_RFSHTMG_SHADOW                      DDRC_RFSHTMG_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT3_SHADOW                        DDRC_INIT3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT4_SHADOW                        DDRC_INIT4_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT6_SHADOW                        DDRC_INIT6_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_INIT7_SHADOW                        DDRC_INIT7_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG0_SHADOW                     DDRC_DRAMTMG0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG1_SHADOW                     DDRC_DRAMTMG1_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG2_SHADOW                     DDRC_DRAMTMG2_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG3_SHADOW                     DDRC_DRAMTMG3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG4_SHADOW                     DDRC_DRAMTMG4_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG5_SHADOW                     DDRC_DRAMTMG5_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG6_SHADOW                     DDRC_DRAMTMG6_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG7_SHADOW                     DDRC_DRAMTMG7_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG8_SHADOW                     DDRC_DRAMTMG8_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG9_SHADOW                     DDRC_DRAMTMG9_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG10_SHADOW                    DDRC_DRAMTMG10_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG11_SHADOW                    DDRC_DRAMTMG11_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG12_SHADOW                    DDRC_DRAMTMG12_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG13_SHADOW                    DDRC_DRAMTMG13_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG14_SHADOW                    DDRC_DRAMTMG14_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DRAMTMG15_SHADOW                    DDRC_DRAMTMG15_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_ZQCTL0_SHADOW                       DDRC_ZQCTL0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG0_SHADOW                      DDRC_DFITMG0_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG1_SHADOW                      DDRC_DFITMG1_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG2_SHADOW                      DDRC_DFITMG2_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_DFITMG3_SHADOW                      DDRC_DFITMG3_SHADOW_REG(DDRC_BASE_PTR)
#define DDRC_ODTCFG_SHADOW                       DDRC_ODTCFG_SHADOW_REG(DDRC_BASE_PTR)

/*!
 * @}
 */ /* end of group DDRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DDRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_ANIB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_ANIB_Peripheral DWC_DDRPHYA_ANIB
 * @{
 */

/** DWC_DDRPHYA_ANIB - Peripheral register structure */
typedef struct DWC_DDRPHYA_ANIB_MemMap {
  uint8_t RESERVED_0[52];
  uint16_t MTESTMUXSEL;                            /**< Digital Observation Pin control, offset: 0x34 */
  uint8_t RESERVED_1[24];
  uint16_t AFORCEDRVCONT;                          /**< Force Address/Command Driven (Lanes A3-A0), offset: 0x4E */
  uint16_t AFORCETRICONT;                          /**< Force Address/Command Tristate (Lanes A3-A0), offset: 0x50 */
  uint8_t RESERVED_2[52];
  uint16_t ATXIMPEDANCE;                           /**< Address TX impedance controls, offset: 0x86 */
  uint8_t RESERVED_3[30];
  uint16_t ATESTPRBSERR;                           /**< Address Loopback PRBS Error status for an entire ACX4 block, offset: 0xA6 */
  uint8_t RESERVED_4[2];
  uint16_t ATXSLEWRATE;                            /**< Address TX slew rate and predriver controls, offset: 0xAA */
  uint16_t ATESTPRBSERRCNT;                        /**< Address Loopback Test Result register, offset: 0xAC */
  uint8_t RESERVED_5[82];
  uint16_t ATXDLY_P0;                              /**< Address/Command Delay, per pstate., offset: 0x100 */
  uint8_t RESERVED_6[2097150];
  uint16_t ATXDLY_P1;                              /**< Address/Command Delay, per pstate., offset: 0x200100 */
  uint8_t RESERVED_7[2097150];
  uint16_t ATXDLY_P2;                              /**< Address/Command Delay, per pstate., offset: 0x400100 */
  uint8_t RESERVED_8[2097150];
  uint16_t ATXDLY_P3;                              /**< Address/Command Delay, per pstate., offset: 0x600100 */
} volatile *DWC_DDRPHYA_ANIB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_ANIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_ANIB_Register_Accessor_Macros DWC_DDRPHYA_ANIB - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_ANIB - Register accessors */
#define DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(base)   ((base)->MTESTMUXSEL)
#define DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(base) ((base)->AFORCEDRVCONT)
#define DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(base) ((base)->AFORCETRICONT)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(base)  ((base)->ATXIMPEDANCE)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(base)  ((base)->ATESTPRBSERR)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(base)   ((base)->ATXSLEWRATE)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(base) ((base)->ATESTPRBSERRCNT)
#define DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(base)     ((base)->ATXDLY_P0)
#define DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(base)     ((base)->ATXDLY_P1)
#define DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(base)     ((base)->ATXDLY_P2)
#define DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(base)     ((base)->ATXDLY_P3)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_ANIB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_ANIB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_ANIB_Register_Masks DWC_DDRPHYA_ANIB Register Masks
 * @{
 */

/*! @name MTESTMUXSEL - Digital Observation Pin control */
/*! @{ */
#define DWC_DDRPHYA_ANIB_MTESTMUXSEL_MtestMuxSel_MASK (0x3FU)
#define DWC_DDRPHYA_ANIB_MTESTMUXSEL_MtestMuxSel_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_MTESTMUXSEL_MtestMuxSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_MTESTMUXSEL_MtestMuxSel_SHIFT)) & DWC_DDRPHYA_ANIB_MTESTMUXSEL_MtestMuxSel_MASK)
/*! @} */

/*! @name AFORCEDRVCONT - Force Address/Command Driven (Lanes A3-A0) */
/*! @{ */
#define DWC_DDRPHYA_ANIB_AFORCEDRVCONT_AForceDrvCont_MASK (0xFU)
#define DWC_DDRPHYA_ANIB_AFORCEDRVCONT_AForceDrvCont_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_AFORCEDRVCONT_AForceDrvCont(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_AFORCEDRVCONT_AForceDrvCont_SHIFT)) & DWC_DDRPHYA_ANIB_AFORCEDRVCONT_AForceDrvCont_MASK)
/*! @} */

/*! @name AFORCETRICONT - Force Address/Command Tristate (Lanes A3-A0) */
/*! @{ */
#define DWC_DDRPHYA_ANIB_AFORCETRICONT_AForceTriCont_MASK (0xFU)
#define DWC_DDRPHYA_ANIB_AFORCETRICONT_AForceTriCont_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_AFORCETRICONT_AForceTriCont(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_AFORCETRICONT_AForceTriCont_SHIFT)) & DWC_DDRPHYA_ANIB_AFORCETRICONT_AForceTriCont_MASK)
/*! @} */

/*! @name ATXIMPEDANCE - Address TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenP_MASK (0x1FU)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenP_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenP_SHIFT)) & DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenP_MASK)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenN_MASK (0x3E0U)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenN_SHIFT (5U)
#define DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenN_SHIFT)) & DWC_DDRPHYA_ANIB_ATXIMPEDANCE_ADrvStrenN_MASK)
/*! @} */

/*! @name ATESTPRBSERR - Address Loopback PRBS Error status for an entire ACX4 block */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATESTPRBSERR_ATestPrbsErr_MASK (0xFU)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERR_ATestPrbsErr_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERR_ATestPrbsErr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATESTPRBSERR_ATestPrbsErr_SHIFT)) & DWC_DDRPHYA_ANIB_ATESTPRBSERR_ATestPrbsErr_MASK)
/*! @} */

/*! @name ATXSLEWRATE - Address TX slew rate and predriver controls */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreP_MASK (0xFU)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreP_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreP(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreP_SHIFT)) & DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreP_MASK)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreN_SHIFT (4U)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreN(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreN_SHIFT)) & DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreN_MASK)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreDrvMode_SHIFT)) & DWC_DDRPHYA_ANIB_ATXSLEWRATE_ATxPreDrvMode_MASK)
/*! @} */

/*! @name ATESTPRBSERRCNT - Address Loopback Test Result register */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_ATestPrbsErrCnt_MASK (0xFFFFU)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_ATestPrbsErrCnt_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_ATestPrbsErrCnt(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_ATestPrbsErrCnt_SHIFT)) & DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_ATestPrbsErrCnt_MASK)
/*! @} */

/*! @name ATXDLY_P0 - Address/Command Delay, per pstate. */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXDLY_P0_ATxDly_p0_MASK (0x7FU)
#define DWC_DDRPHYA_ANIB_ATXDLY_P0_ATxDly_p0_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXDLY_P0_ATxDly_p0(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXDLY_P0_ATxDly_p0_SHIFT)) & DWC_DDRPHYA_ANIB_ATXDLY_P0_ATxDly_p0_MASK)
/*! @} */

/*! @name ATXDLY_P1 - Address/Command Delay, per pstate. */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXDLY_P1_ATxDly_p1_MASK (0x7FU)
#define DWC_DDRPHYA_ANIB_ATXDLY_P1_ATxDly_p1_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXDLY_P1_ATxDly_p1(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXDLY_P1_ATxDly_p1_SHIFT)) & DWC_DDRPHYA_ANIB_ATXDLY_P1_ATxDly_p1_MASK)
/*! @} */

/*! @name ATXDLY_P2 - Address/Command Delay, per pstate. */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXDLY_P2_ATxDly_p2_MASK (0x7FU)
#define DWC_DDRPHYA_ANIB_ATXDLY_P2_ATxDly_p2_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXDLY_P2_ATxDly_p2(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXDLY_P2_ATxDly_p2_SHIFT)) & DWC_DDRPHYA_ANIB_ATXDLY_P2_ATxDly_p2_MASK)
/*! @} */

/*! @name ATXDLY_P3 - Address/Command Delay, per pstate. */
/*! @{ */
#define DWC_DDRPHYA_ANIB_ATXDLY_P3_ATxDly_p3_MASK (0x7FU)
#define DWC_DDRPHYA_ANIB_ATXDLY_P3_ATxDly_p3_SHIFT (0U)
#define DWC_DDRPHYA_ANIB_ATXDLY_P3_ATxDly_p3(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_ANIB_ATXDLY_P3_ATxDly_p3_SHIFT)) & DWC_DDRPHYA_ANIB_ATXDLY_P3_ATxDly_p3_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_ANIB_Register_Masks */


/* DWC_DDRPHYA_ANIB - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_ANIB0 base pointer */
#define DWC_DDRPHYA_ANIB0_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C000000u)
/** Peripheral DWC_DDRPHYA_ANIB1 base pointer */
#define DWC_DDRPHYA_ANIB1_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C001000u)
/** Peripheral DWC_DDRPHYA_ANIB2 base pointer */
#define DWC_DDRPHYA_ANIB2_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C002000u)
/** Peripheral DWC_DDRPHYA_ANIB3 base pointer */
#define DWC_DDRPHYA_ANIB3_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C003000u)
/** Peripheral DWC_DDRPHYA_ANIB4 base pointer */
#define DWC_DDRPHYA_ANIB4_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C004000u)
/** Peripheral DWC_DDRPHYA_ANIB5 base pointer */
#define DWC_DDRPHYA_ANIB5_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C005000u)
/** Peripheral DWC_DDRPHYA_ANIB6 base pointer */
#define DWC_DDRPHYA_ANIB6_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C006000u)
/** Peripheral DWC_DDRPHYA_ANIB7 base pointer */
#define DWC_DDRPHYA_ANIB7_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C007000u)
/** Peripheral DWC_DDRPHYA_ANIB8 base pointer */
#define DWC_DDRPHYA_ANIB8_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C008000u)
/** Peripheral DWC_DDRPHYA_ANIB9 base pointer */
#define DWC_DDRPHYA_ANIB9_BASE_PTR               ((DWC_DDRPHYA_ANIB_MemMapPtr)0x3C009000u)
/** Array initializer of DWC_DDRPHYA_ANIB peripheral base pointers */
#define DWC_DDRPHYA_ANIB_BASE_PTRS               { DWC_DDRPHYA_ANIB0_BASE_PTR, DWC_DDRPHYA_ANIB1_BASE_PTR, DWC_DDRPHYA_ANIB2_BASE_PTR, DWC_DDRPHYA_ANIB3_BASE_PTR, DWC_DDRPHYA_ANIB4_BASE_PTR, DWC_DDRPHYA_ANIB5_BASE_PTR, DWC_DDRPHYA_ANIB6_BASE_PTR, DWC_DDRPHYA_ANIB7_BASE_PTR, DWC_DDRPHYA_ANIB8_BASE_PTR, DWC_DDRPHYA_ANIB9_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_ANIB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_ANIB_Register_Accessor_Macros DWC_DDRPHYA_ANIB - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_ANIB - Register instance definitions */
/* DWC_DDRPHYA_ANIB0 */
#define DWC_DDRPHYA_ANIB0_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
#define DWC_DDRPHYA_ANIB0_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB0_BASE_PTR)
/* DWC_DDRPHYA_ANIB1 */
#define DWC_DDRPHYA_ANIB1_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
#define DWC_DDRPHYA_ANIB1_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB1_BASE_PTR)
/* DWC_DDRPHYA_ANIB2 */
#define DWC_DDRPHYA_ANIB2_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
#define DWC_DDRPHYA_ANIB2_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB2_BASE_PTR)
/* DWC_DDRPHYA_ANIB3 */
#define DWC_DDRPHYA_ANIB3_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
#define DWC_DDRPHYA_ANIB3_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB3_BASE_PTR)
/* DWC_DDRPHYA_ANIB4 */
#define DWC_DDRPHYA_ANIB4_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
#define DWC_DDRPHYA_ANIB4_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB4_BASE_PTR)
/* DWC_DDRPHYA_ANIB5 */
#define DWC_DDRPHYA_ANIB5_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
#define DWC_DDRPHYA_ANIB5_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB5_BASE_PTR)
/* DWC_DDRPHYA_ANIB6 */
#define DWC_DDRPHYA_ANIB6_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
#define DWC_DDRPHYA_ANIB6_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB6_BASE_PTR)
/* DWC_DDRPHYA_ANIB7 */
#define DWC_DDRPHYA_ANIB7_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
#define DWC_DDRPHYA_ANIB7_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB7_BASE_PTR)
/* DWC_DDRPHYA_ANIB8 */
#define DWC_DDRPHYA_ANIB8_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
#define DWC_DDRPHYA_ANIB8_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB8_BASE_PTR)
/* DWC_DDRPHYA_ANIB9 */
#define DWC_DDRPHYA_ANIB9_MTESTMUXSEL            DWC_DDRPHYA_ANIB_MTESTMUXSEL_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_AFORCEDRVCONT          DWC_DDRPHYA_ANIB_AFORCEDRVCONT_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_AFORCETRICONT          DWC_DDRPHYA_ANIB_AFORCETRICONT_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXIMPEDANCE           DWC_DDRPHYA_ANIB_ATXIMPEDANCE_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATESTPRBSERR           DWC_DDRPHYA_ANIB_ATESTPRBSERR_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXSLEWRATE            DWC_DDRPHYA_ANIB_ATXSLEWRATE_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATESTPRBSERRCNT        DWC_DDRPHYA_ANIB_ATESTPRBSERRCNT_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXDLY_P0              DWC_DDRPHYA_ANIB_ATXDLY_P0_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXDLY_P1              DWC_DDRPHYA_ANIB_ATXDLY_P1_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXDLY_P2              DWC_DDRPHYA_ANIB_ATXDLY_P2_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)
#define DWC_DDRPHYA_ANIB9_ATXDLY_P3              DWC_DDRPHYA_ANIB_ATXDLY_P3_REG(DWC_DDRPHYA_ANIB9_BASE_PTR)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_ANIB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_ANIB_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_APBONLY
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_APBONLY_Peripheral DWC_DDRPHYA_APBONLY
 * @{
 */

/** DWC_DDRPHYA_APBONLY - Peripheral register structure */
typedef struct DWC_DDRPHYA_APBONLY_MemMap {
  uint16_t MICROCONTMUXSEL;                        /**< PMU Config Mux Select, offset: 0x0 */
  uint8_t RESERVED_0[6];
  uint16_t UCTSHADOWREGS;                          /**< PMU/Controller Protocol - Controller Read-only Shadow, offset: 0x8 */
  uint8_t RESERVED_1[86];
  uint16_t DCTWRITEONLY;                           /**< Reserved for future use., offset: 0x60 */
  uint16_t DCTWRITEPROT;                           /**< DCT downstream mailbox protocol CSR., offset: 0x62 */
  uint16_t UCTWRITEONLYSHADOW;                     /**< Read-only view of the csr UctDatWriteOnly, offset: 0x64 */
  uint8_t RESERVED_2[2];
  uint16_t UCTDATWRITEONLYSHADOW;                  /**< Read-only view of the csr UctDatWriteOnly, offset: 0x68 */
  uint8_t RESERVED_3[4];
  uint16_t DFICFGRDDATAVALIDTICKS;                 /**< Number of DfiClk ticks required for valid csr Rd Data., offset: 0x6E */
  uint8_t RESERVED_4[194];
  uint16_t MICRORESET;                             /**< Controls reset and clock shutdown on the local microcontroller, offset: 0x132 */
  uint8_t RESERVED_5[192];
  uint16_t DFIINITCOMPLETESHADOW;                  /**< dfi_init_complete - Controller Read-only Shadow, offset: 0x1F4 */
} volatile *DWC_DDRPHYA_APBONLY_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_APBONLY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_APBONLY_Register_Accessor_Macros DWC_DDRPHYA_APBONLY - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_APBONLY - Register accessors */
#define DWC_DDRPHYA_APBONLY_MICROCONTMUXSEL_REG(base) ((base)->MICROCONTMUXSEL)
#define DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_REG(base) ((base)->UCTSHADOWREGS)
#define DWC_DDRPHYA_APBONLY_DCTWRITEONLY_REG(base) ((base)->DCTWRITEONLY)
#define DWC_DDRPHYA_APBONLY_DCTWRITEPROT_REG(base) ((base)->DCTWRITEPROT)
#define DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_REG(base) ((base)->UCTWRITEONLYSHADOW)
#define DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_REG(base) ((base)->UCTDATWRITEONLYSHADOW)
#define DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_REG(base) ((base)->DFICFGRDDATAVALIDTICKS)
#define DWC_DDRPHYA_APBONLY_MICRORESET_REG(base) ((base)->MICRORESET)
#define DWC_DDRPHYA_APBONLY_DFIINITCOMPLETESHADOW_REG(base) ((base)->DFIINITCOMPLETESHADOW)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_APBONLY_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_APBONLY Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_APBONLY_Register_Masks DWC_DDRPHYA_APBONLY Register Masks
 * @{
 */

/*! @name MICROCONTMUXSEL - PMU Config Mux Select */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_MICROCONTMUXSEL_MicroContMuxSel_MASK (0x1U)
#define DWC_DDRPHYA_APBONLY_MICROCONTMUXSEL_MicroContMuxSel_SHIFT (0U)
/*! @} */

/*! @name UCTSHADOWREGS - PMU/Controller Protocol - Controller Read-only Shadow */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_UctWriteProtShadow_MASK (0x1U)
#define DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_UctWriteProtShadow_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_UctDatWriteProtShadow_MASK (0x2U)
#define DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_UctDatWriteProtShadow_SHIFT (1U)
/*! @} */

/*! @name DCTWRITEONLY - Reserved for future use. */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_DCTWRITEONLY_DctWriteOnly_MASK (0xFFFFU)
#define DWC_DDRPHYA_APBONLY_DCTWRITEONLY_DctWriteOnly_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_DCTWRITEONLY_DctWriteOnly(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_APBONLY_DCTWRITEONLY_DctWriteOnly_SHIFT)) & DWC_DDRPHYA_APBONLY_DCTWRITEONLY_DctWriteOnly_MASK)
/*! @} */

/*! @name DCTWRITEPROT - DCT downstream mailbox protocol CSR. */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_DCTWRITEPROT_DctWriteProt_MASK (0x1U)
#define DWC_DDRPHYA_APBONLY_DCTWRITEPROT_DctWriteProt_SHIFT (0U)
/*! @} */

/*! @name UCTWRITEONLYSHADOW - Read-only view of the csr UctDatWriteOnly */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_UctWriteOnlyShadow_MASK (0xFFFFU)
#define DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_UctWriteOnlyShadow_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_UctWriteOnlyShadow(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_UctWriteOnlyShadow_SHIFT)) & DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_UctWriteOnlyShadow_MASK)
/*! @} */

/*! @name UCTDATWRITEONLYSHADOW - Read-only view of the csr UctDatWriteOnly */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_UctDatWriteOnlyShadow_MASK (0xFFFFU)
#define DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_UctDatWriteOnlyShadow_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_UctDatWriteOnlyShadow(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_UctDatWriteOnlyShadow_SHIFT)) & DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_UctDatWriteOnlyShadow_MASK)
/*! @} */

/*! @name DFICFGRDDATAVALIDTICKS - Number of DfiClk ticks required for valid csr Rd Data. */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_DfiCfgRdDataValidTicks_MASK (0x3FU)
#define DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_DfiCfgRdDataValidTicks_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_DfiCfgRdDataValidTicks(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_DfiCfgRdDataValidTicks_SHIFT)) & DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_DfiCfgRdDataValidTicks_MASK)
/*! @} */

/*! @name MICRORESET - Controls reset and clock shutdown on the local microcontroller */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_MICRORESET_StallToMicro_MASK (0x1U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_StallToMicro_SHIFT (0U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_TestWakeup_MASK (0x2U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_TestWakeup_SHIFT (1U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_RSVDMicro_MASK (0x4U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_RSVDMicro_SHIFT (2U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_ResetToMicro_MASK (0x8U)
#define DWC_DDRPHYA_APBONLY_MICRORESET_ResetToMicro_SHIFT (3U)
/*! @} */

/*! @name DFIINITCOMPLETESHADOW - dfi_init_complete - Controller Read-only Shadow */
/*! @{ */
#define DWC_DDRPHYA_APBONLY_DFIINITCOMPLETESHADOW_DfiInitCompleteShadow_MASK (0x1U)
#define DWC_DDRPHYA_APBONLY_DFIINITCOMPLETESHADOW_DfiInitCompleteShadow_SHIFT (0U)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_APBONLY_Register_Masks */


/* DWC_DDRPHYA_APBONLY - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_APBONLY0 base pointer */
#define DWC_DDRPHYA_APBONLY0_BASE_PTR            ((DWC_DDRPHYA_APBONLY_MemMapPtr)0x3C0D0000u)
/** Array initializer of DWC_DDRPHYA_APBONLY peripheral base pointers */
#define DWC_DDRPHYA_APBONLY_BASE_PTRS            { DWC_DDRPHYA_APBONLY0_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_APBONLY - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_APBONLY_Register_Accessor_Macros DWC_DDRPHYA_APBONLY - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_APBONLY - Register instance definitions */
/* DWC_DDRPHYA_APBONLY0 */
#define DWC_DDRPHYA_APBONLY0_MICROCONTMUXSEL     DWC_DDRPHYA_APBONLY_MICROCONTMUXSEL_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_UCTSHADOWREGS       DWC_DDRPHYA_APBONLY_UCTSHADOWREGS_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_DCTWRITEONLY        DWC_DDRPHYA_APBONLY_DCTWRITEONLY_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_DCTWRITEPROT        DWC_DDRPHYA_APBONLY_DCTWRITEPROT_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_UCTWRITEONLYSHADOW  DWC_DDRPHYA_APBONLY_UCTWRITEONLYSHADOW_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_UCTDATWRITEONLYSHADOW DWC_DDRPHYA_APBONLY_UCTDATWRITEONLYSHADOW_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_DFICFGRDDATAVALIDTICKS DWC_DDRPHYA_APBONLY_DFICFGRDDATAVALIDTICKS_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_MICRORESET          DWC_DDRPHYA_APBONLY_MICRORESET_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)
#define DWC_DDRPHYA_APBONLY0_DFIINITCOMPLETESHADOW DWC_DDRPHYA_APBONLY_DFIINITCOMPLETESHADOW_REG(DWC_DDRPHYA_APBONLY0_BASE_PTR)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_APBONLY_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_APBONLY_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DBYTE
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DBYTE_Peripheral DWC_DDRPHYA_DBYTE
 * @{
 */

/** DWC_DDRPHYA_DBYTE - Peripheral register structure */
typedef struct DWC_DDRPHYA_DBYTE_MemMap {
  uint16_t DBYTEMISCMODE;                          /**< DBYTE Module Disable, offset: 0x0 */
  uint8_t RESERVED_0[50];
  uint16_t MTESTMUXSEL;                            /**< Digital Observation Pin control, offset: 0x34 */
  uint8_t RESERVED_1[10];
  uint16_t DFIMRL_P0;                              /**< DFI MaxReadLatency, offset: 0x40 */
  uint8_t RESERVED_2[30];
  uint16_t VREFDAC1_R0;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x60 */
  uint8_t RESERVED_3[30];
  uint16_t VREFDAC0_R0;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x80 */
  uint16_t TXIMPEDANCECTRL0_B0_P0;                 /**< Data TX impedance controls, offset: 0x82 */
  uint8_t RESERVED_4[2];
  uint16_t DQDQSRCVCNTRL_B0_P0;                    /**< Dq/Dqs receiver control, offset: 0x86 */
  uint8_t RESERVED_5[8];
  uint16_t TXEQUALIZATIONMODE_P0;                  /**< Tx dq driver equalization mode controls., offset: 0x90 */
  uint16_t TXIMPEDANCECTRL1_B0_P0;                 /**< TX impedance controls, offset: 0x92 */
  uint16_t DQDQSRCVCNTRL1;                         /**< Dq/Dqs receiver control, offset: 0x94 */
  uint16_t TXIMPEDANCECTRL2_B0_P0;                 /**< TX equalization impedance controls, offset: 0x96 */
  uint16_t DQDQSRCVCNTRL2_P0;                      /**< Dq/Dqs receiver control, offset: 0x98 */
  uint16_t TXODTDRVSTREN_B0_P0;                    /**< TX ODT driver strength control, offset: 0x9A */
  uint8_t RESERVED_6[16];
  uint16_t RXFIFOCHECKSTATUS;                      /**< Status of RX FIFO Consistency Checks, offset: 0xAC */
  uint16_t RXFIFOCHECKERRVALUES;                   /**< Contains the captured values associated with an RxFifo consistency error, offset: 0xAE */
  uint16_t RXFIFOINFO;                             /**< Data Receive FIFO Pointer Values, offset: 0xB0 */
  uint16_t RXFIFOVISIBILITY;                       /**< RX FIFO visibility, offset: 0xB2 */
  uint16_t RXFIFOCONTENTSDQ3210;                   /**< RX FIFO contents, lane[3:0], offset: 0xB4 */
  uint16_t RXFIFOCONTENTSDQ7654;                   /**< RX FIFO contents, lane[7:4], offset: 0xB6 */
  uint16_t RXFIFOCONTENTSDBI;                      /**< RX FIFO contents, dbi, offset: 0xB8 */
  uint8_t RESERVED_7[4];
  uint16_t TXSLEWRATE_B0_P0;                       /**< TX slew rate controls, offset: 0xBE */
  uint8_t RESERVED_8[16];
  uint16_t RXPBDLYTG0_R0;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0xD0 */
  uint16_t RXPBDLYTG1_R0;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0xD2 */
  uint16_t RXPBDLYTG2_R0;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0xD4 */
  uint16_t RXPBDLYTG3_R0;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0xD6 */
  uint8_t RESERVED_9[40];
  uint16_t RXENDLYTG0_U0_P0;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x100 */
  uint16_t RXENDLYTG1_U0_P0;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x102 */
  uint16_t RXENDLYTG2_U0_P0;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x104 */
  uint16_t RXENDLYTG3_U0_P0;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x106 */
  uint8_t RESERVED_10[16];
  uint16_t RXCLKDLYTG0_U0_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x118 */
  uint16_t RXCLKDLYTG1_U0_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x11A */
  uint16_t RXCLKDLYTG2_U0_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x11C */
  uint16_t RXCLKDLYTG3_U0_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x11E */
  uint16_t RXCLKCDLYTG0_U0_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x120 */
  uint16_t RXCLKCDLYTG1_U0_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x122 */
  uint16_t RXCLKCDLYTG2_U0_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x124 */
  uint8_t RESERVED_11[2];
  uint16_t RXCLKCDLYTG3_U0_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x128 */
  uint8_t RESERVED_12[22];
  uint16_t DQLNSEL[8];                             /**< Maps Phy DQ lane to memory DQ0, array offset: 0x140, array step: 0x2 */
  uint8_t RESERVED_13[48];
  uint16_t TXDQDLYTG0_R0_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x180 */
  uint16_t TXDQDLYTG1_R0_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x182 */
  uint16_t TXDQDLYTG2_R0_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x184 */
  uint16_t TXDQDLYTG3_R0_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x186 */
  uint8_t RESERVED_14[24];
  uint16_t TXDQSDLYTG0_U0_P0;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x1A0 */
  uint16_t TXDQSDLYTG1_U0_P0;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x1A2 */
  uint16_t TXDQSDLYTG2_U0_P0;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x1A4 */
  uint16_t TXDQSDLYTG3_U0_P0;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x1A6 */
  uint8_t RESERVED_15[32];
  uint16_t DXLCDLSTATUS;                           /**< Debug status of the DBYTE LCDL, offset: 0x1C8 */
  uint8_t RESERVED_16[150];
  uint16_t VREFDAC1_R1;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x260 */
  uint8_t RESERVED_17[30];
  uint16_t VREFDAC0_R1;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x280 */
  uint16_t TXIMPEDANCECTRL0_B1_P0;                 /**< Data TX impedance controls, offset: 0x282 */
  uint8_t RESERVED_18[2];
  uint16_t DQDQSRCVCNTRL_B1_P0;                    /**< Dq/Dqs receiver control, offset: 0x286 */
  uint8_t RESERVED_19[10];
  uint16_t TXIMPEDANCECTRL1_B1_P0;                 /**< TX impedance controls, offset: 0x292 */
  uint8_t RESERVED_20[2];
  uint16_t TXIMPEDANCECTRL2_B1_P0;                 /**< TX equalization impedance controls, offset: 0x296 */
  uint8_t RESERVED_21[2];
  uint16_t TXODTDRVSTREN_B1_P0;                    /**< TX ODT driver strength control, offset: 0x29A */
  uint8_t RESERVED_22[34];
  uint16_t TXSLEWRATE_B1_P0;                       /**< TX slew rate controls, offset: 0x2BE */
  uint8_t RESERVED_23[16];
  uint16_t RXPBDLYTG0_R1;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0x2D0 */
  uint16_t RXPBDLYTG1_R1;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0x2D2 */
  uint16_t RXPBDLYTG2_R1;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0x2D4 */
  uint16_t RXPBDLYTG3_R1;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0x2D6 */
  uint8_t RESERVED_24[40];
  uint16_t RXENDLYTG0_U1_P0;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x300 */
  uint16_t RXENDLYTG1_U1_P0;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x302 */
  uint16_t RXENDLYTG2_U1_P0;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x304 */
  uint16_t RXENDLYTG3_U1_P0;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x306 */
  uint8_t RESERVED_25[16];
  uint16_t RXCLKDLYTG0_U1_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x318 */
  uint16_t RXCLKDLYTG1_U1_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x31A */
  uint16_t RXCLKDLYTG2_U1_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x31C */
  uint16_t RXCLKDLYTG3_U1_P0;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x31E */
  uint16_t RXCLKCDLYTG0_U1_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x320 */
  uint16_t RXCLKCDLYTG1_U1_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x322 */
  uint16_t RXCLKCDLYTG2_U1_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x324 */
  uint8_t RESERVED_26[2];
  uint16_t RXCLKCDLYTG3_U1_P0;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x328 */
  uint8_t RESERVED_27[86];
  uint16_t TXDQDLYTG0_R1_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x380 */
  uint16_t TXDQDLYTG1_R1_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x382 */
  uint16_t TXDQDLYTG2_R1_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x384 */
  uint16_t TXDQDLYTG3_R1_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x386 */
  uint8_t RESERVED_28[24];
  uint16_t TXDQSDLYTG0_U1_P0;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x3A0 */
  uint16_t TXDQSDLYTG1_U1_P0;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x3A2 */
  uint16_t TXDQSDLYTG2_U1_P0;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x3A4 */
  uint16_t TXDQSDLYTG3_U1_P0;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x3A6 */
  uint8_t RESERVED_29[184];
  uint16_t VREFDAC1_R2;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x460 */
  uint8_t RESERVED_30[30];
  uint16_t VREFDAC0_R2;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x480 */
  uint8_t RESERVED_31[78];
  uint16_t RXPBDLYTG0_R2;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0x4D0 */
  uint16_t RXPBDLYTG1_R2;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0x4D2 */
  uint16_t RXPBDLYTG2_R2;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0x4D4 */
  uint16_t RXPBDLYTG3_R2;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0x4D6 */
  uint8_t RESERVED_32[168];
  uint16_t TXDQDLYTG0_R2_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x580 */
  uint16_t TXDQDLYTG1_R2_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x582 */
  uint16_t TXDQDLYTG2_R2_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x584 */
  uint16_t TXDQDLYTG3_R2_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x586 */
  uint8_t RESERVED_33[216];
  uint16_t VREFDAC1_R3;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x660 */
  uint8_t RESERVED_34[30];
  uint16_t VREFDAC0_R3;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x680 */
  uint8_t RESERVED_35[78];
  uint16_t RXPBDLYTG0_R3;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0x6D0 */
  uint16_t RXPBDLYTG1_R3;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0x6D2 */
  uint16_t RXPBDLYTG2_R3;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0x6D4 */
  uint16_t RXPBDLYTG3_R3;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0x6D6 */
  uint8_t RESERVED_36[168];
  uint16_t TXDQDLYTG0_R3_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x780 */
  uint16_t TXDQDLYTG1_R3_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x782 */
  uint16_t TXDQDLYTG2_R3_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x784 */
  uint16_t TXDQDLYTG3_R3_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x786 */
  uint8_t RESERVED_37[216];
  uint16_t VREFDAC1_R4;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x860 */
  uint8_t RESERVED_38[30];
  uint16_t VREFDAC0_R4;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x880 */
  uint8_t RESERVED_39[78];
  uint16_t RXPBDLYTG0_R4;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0x8D0 */
  uint16_t RXPBDLYTG1_R4;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0x8D2 */
  uint16_t RXPBDLYTG2_R4;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0x8D4 */
  uint16_t RXPBDLYTG3_R4;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0x8D6 */
  uint8_t RESERVED_40[168];
  uint16_t TXDQDLYTG0_R4_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x980 */
  uint16_t TXDQDLYTG1_R4_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x982 */
  uint16_t TXDQDLYTG2_R4_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x984 */
  uint16_t TXDQDLYTG3_R4_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x986 */
  uint8_t RESERVED_41[216];
  uint16_t VREFDAC1_R5;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0xA60 */
  uint8_t RESERVED_42[30];
  uint16_t VREFDAC0_R5;                            /**< VrefDAC0 control for DQ Receiver, offset: 0xA80 */
  uint8_t RESERVED_43[78];
  uint16_t RXPBDLYTG0_R5;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0xAD0 */
  uint16_t RXPBDLYTG1_R5;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0xAD2 */
  uint16_t RXPBDLYTG2_R5;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0xAD4 */
  uint16_t RXPBDLYTG3_R5;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0xAD6 */
  uint8_t RESERVED_44[168];
  uint16_t TXDQDLYTG0_R5_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0xB80 */
  uint16_t TXDQDLYTG1_R5_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0xB82 */
  uint16_t TXDQDLYTG2_R5_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0xB84 */
  uint16_t TXDQDLYTG3_R5_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0xB86 */
  uint8_t RESERVED_45[216];
  uint16_t VREFDAC1_R6;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0xC60 */
  uint8_t RESERVED_46[30];
  uint16_t VREFDAC0_R6;                            /**< VrefDAC0 control for DQ Receiver, offset: 0xC80 */
  uint8_t RESERVED_47[78];
  uint16_t RXPBDLYTG0_R6;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0xCD0 */
  uint16_t RXPBDLYTG1_R6;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0xCD2 */
  uint16_t RXPBDLYTG2_R6;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0xCD4 */
  uint16_t RXPBDLYTG3_R6;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0xCD6 */
  uint8_t RESERVED_48[168];
  uint16_t TXDQDLYTG0_R6_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0xD80 */
  uint16_t TXDQDLYTG1_R6_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0xD82 */
  uint16_t TXDQDLYTG2_R6_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0xD84 */
  uint16_t TXDQDLYTG3_R6_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0xD86 */
  uint8_t RESERVED_49[216];
  uint16_t VREFDAC1_R7;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0xE60 */
  uint8_t RESERVED_50[30];
  uint16_t VREFDAC0_R7;                            /**< VrefDAC0 control for DQ Receiver, offset: 0xE80 */
  uint8_t RESERVED_51[78];
  uint16_t RXPBDLYTG0_R7;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0xED0 */
  uint16_t RXPBDLYTG1_R7;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0xED2 */
  uint16_t RXPBDLYTG2_R7;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0xED4 */
  uint16_t RXPBDLYTG3_R7;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0xED6 */
  uint8_t RESERVED_52[168];
  uint16_t TXDQDLYTG0_R7_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0xF80 */
  uint16_t TXDQDLYTG1_R7_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0xF82 */
  uint16_t TXDQDLYTG2_R7_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0xF84 */
  uint16_t TXDQDLYTG3_R7_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0xF86 */
  uint8_t RESERVED_53[216];
  uint16_t VREFDAC1_R8;                            /**< VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4), offset: 0x1060 */
  uint8_t RESERVED_54[30];
  uint16_t VREFDAC0_R8;                            /**< VrefDAC0 control for DQ Receiver, offset: 0x1080 */
  uint8_t RESERVED_55[78];
  uint16_t RXPBDLYTG0_R8;                          /**< Read DQ per-bit BDL delay (Timing Group 0)., offset: 0x10D0 */
  uint16_t RXPBDLYTG1_R8;                          /**< Read DQ per-bit BDL delay (Timing Group 1)., offset: 0x10D2 */
  uint16_t RXPBDLYTG2_R8;                          /**< Read DQ per-bit BDL delay (Timing Group 2)., offset: 0x10D4 */
  uint16_t RXPBDLYTG3_R8;                          /**< Read DQ per-bit BDL delay (Timing Group 3)., offset: 0x10D6 */
  uint8_t RESERVED_56[168];
  uint16_t TXDQDLYTG0_R8_P0;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x1180 */
  uint16_t TXDQDLYTG1_R8_P0;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x1182 */
  uint16_t TXDQDLYTG2_R8_P0;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x1184 */
  uint16_t TXDQDLYTG3_R8_P0;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x1186 */
  uint8_t RESERVED_57[2092728];
  uint16_t DFIMRL_P1;                              /**< DFI MaxReadLatency, offset: 0x200040 */
  uint8_t RESERVED_58[64];
  uint16_t TXIMPEDANCECTRL0_B0_P1;                 /**< Data TX impedance controls, offset: 0x200082 */
  uint8_t RESERVED_59[2];
  uint16_t DQDQSRCVCNTRL_B0_P1;                    /**< Dq/Dqs receiver control, offset: 0x200086 */
  uint8_t RESERVED_60[8];
  uint16_t TXEQUALIZATIONMODE_P1;                  /**< Tx dq driver equalization mode controls., offset: 0x200090 */
  uint16_t TXIMPEDANCECTRL1_B0_P1;                 /**< TX impedance controls, offset: 0x200092 */
  uint8_t RESERVED_61[2];
  uint16_t TXIMPEDANCECTRL2_B0_P1;                 /**< TX equalization impedance controls, offset: 0x200096 */
  uint16_t DQDQSRCVCNTRL2_P1;                      /**< Dq/Dqs receiver control, offset: 0x200098 */
  uint16_t TXODTDRVSTREN_B0_P1;                    /**< TX ODT driver strength control, offset: 0x20009A */
  uint8_t RESERVED_62[34];
  uint16_t TXSLEWRATE_B0_P1;                       /**< TX slew rate controls, offset: 0x2000BE */
  uint8_t RESERVED_63[64];
  uint16_t RXENDLYTG0_U0_P1;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x200100 */
  uint16_t RXENDLYTG1_U0_P1;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x200102 */
  uint16_t RXENDLYTG2_U0_P1;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x200104 */
  uint16_t RXENDLYTG3_U0_P1;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x200106 */
  uint8_t RESERVED_64[16];
  uint16_t RXCLKDLYTG0_U0_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x200118 */
  uint16_t RXCLKDLYTG1_U0_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x20011A */
  uint16_t RXCLKDLYTG2_U0_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x20011C */
  uint16_t RXCLKDLYTG3_U0_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x20011E */
  uint16_t RXCLKCDLYTG0_U0_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x200120 */
  uint16_t RXCLKCDLYTG1_U0_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x200122 */
  uint16_t RXCLKCDLYTG2_U0_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x200124 */
  uint8_t RESERVED_65[2];
  uint16_t RXCLKCDLYTG3_U0_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x200128 */
  uint8_t RESERVED_66[86];
  uint16_t TXDQDLYTG0_R0_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200180 */
  uint16_t TXDQDLYTG1_R0_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200182 */
  uint16_t TXDQDLYTG2_R0_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200184 */
  uint16_t TXDQDLYTG3_R0_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200186 */
  uint8_t RESERVED_67[24];
  uint16_t TXDQSDLYTG0_U0_P1;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x2001A0 */
  uint16_t TXDQSDLYTG1_U0_P1;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x2001A2 */
  uint16_t TXDQSDLYTG2_U0_P1;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x2001A4 */
  uint16_t TXDQSDLYTG3_U0_P1;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x2001A6 */
  uint8_t RESERVED_68[218];
  uint16_t TXIMPEDANCECTRL0_B1_P1;                 /**< Data TX impedance controls, offset: 0x200282 */
  uint8_t RESERVED_69[2];
  uint16_t DQDQSRCVCNTRL_B1_P1;                    /**< Dq/Dqs receiver control, offset: 0x200286 */
  uint8_t RESERVED_70[10];
  uint16_t TXIMPEDANCECTRL1_B1_P1;                 /**< TX impedance controls, offset: 0x200292 */
  uint8_t RESERVED_71[2];
  uint16_t TXIMPEDANCECTRL2_B1_P1;                 /**< TX equalization impedance controls, offset: 0x200296 */
  uint8_t RESERVED_72[2];
  uint16_t TXODTDRVSTREN_B1_P1;                    /**< TX ODT driver strength control, offset: 0x20029A */
  uint8_t RESERVED_73[34];
  uint16_t TXSLEWRATE_B1_P1;                       /**< TX slew rate controls, offset: 0x2002BE */
  uint8_t RESERVED_74[64];
  uint16_t RXENDLYTG0_U1_P1;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x200300 */
  uint16_t RXENDLYTG1_U1_P1;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x200302 */
  uint16_t RXENDLYTG2_U1_P1;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x200304 */
  uint16_t RXENDLYTG3_U1_P1;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x200306 */
  uint8_t RESERVED_75[16];
  uint16_t RXCLKDLYTG0_U1_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x200318 */
  uint16_t RXCLKDLYTG1_U1_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x20031A */
  uint16_t RXCLKDLYTG2_U1_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x20031C */
  uint16_t RXCLKDLYTG3_U1_P1;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x20031E */
  uint16_t RXCLKCDLYTG0_U1_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x200320 */
  uint16_t RXCLKCDLYTG1_U1_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x200322 */
  uint16_t RXCLKCDLYTG2_U1_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x200324 */
  uint8_t RESERVED_76[2];
  uint16_t RXCLKCDLYTG3_U1_P1;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x200328 */
  uint8_t RESERVED_77[86];
  uint16_t TXDQDLYTG0_R1_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200380 */
  uint16_t TXDQDLYTG1_R1_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200382 */
  uint16_t TXDQDLYTG2_R1_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200384 */
  uint16_t TXDQDLYTG3_R1_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200386 */
  uint8_t RESERVED_78[24];
  uint16_t TXDQSDLYTG0_U1_P1;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x2003A0 */
  uint16_t TXDQSDLYTG1_U1_P1;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x2003A2 */
  uint16_t TXDQSDLYTG2_U1_P1;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x2003A4 */
  uint16_t TXDQSDLYTG3_U1_P1;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x2003A6 */
  uint8_t RESERVED_79[472];
  uint16_t TXDQDLYTG0_R2_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200580 */
  uint16_t TXDQDLYTG1_R2_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200582 */
  uint16_t TXDQDLYTG2_R2_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200584 */
  uint16_t TXDQDLYTG3_R2_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200586 */
  uint8_t RESERVED_80[504];
  uint16_t TXDQDLYTG0_R3_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200780 */
  uint16_t TXDQDLYTG1_R3_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200782 */
  uint16_t TXDQDLYTG2_R3_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200784 */
  uint16_t TXDQDLYTG3_R3_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200786 */
  uint8_t RESERVED_81[504];
  uint16_t TXDQDLYTG0_R4_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200980 */
  uint16_t TXDQDLYTG1_R4_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200982 */
  uint16_t TXDQDLYTG2_R4_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200984 */
  uint16_t TXDQDLYTG3_R4_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200986 */
  uint8_t RESERVED_82[504];
  uint16_t TXDQDLYTG0_R5_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200B80 */
  uint16_t TXDQDLYTG1_R5_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200B82 */
  uint16_t TXDQDLYTG2_R5_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200B84 */
  uint16_t TXDQDLYTG3_R5_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200B86 */
  uint8_t RESERVED_83[504];
  uint16_t TXDQDLYTG0_R6_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200D80 */
  uint16_t TXDQDLYTG1_R6_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200D82 */
  uint16_t TXDQDLYTG2_R6_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200D84 */
  uint16_t TXDQDLYTG3_R6_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200D86 */
  uint8_t RESERVED_84[504];
  uint16_t TXDQDLYTG0_R7_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x200F80 */
  uint16_t TXDQDLYTG1_R7_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x200F82 */
  uint16_t TXDQDLYTG2_R7_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x200F84 */
  uint16_t TXDQDLYTG3_R7_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x200F86 */
  uint8_t RESERVED_85[504];
  uint16_t TXDQDLYTG0_R8_P1;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x201180 */
  uint16_t TXDQDLYTG1_R8_P1;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x201182 */
  uint16_t TXDQDLYTG2_R8_P1;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x201184 */
  uint16_t TXDQDLYTG3_R8_P1;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x201186 */
  uint8_t RESERVED_86[2092728];
  uint16_t DFIMRL_P2;                              /**< DFI MaxReadLatency, offset: 0x400040 */
  uint8_t RESERVED_87[64];
  uint16_t TXIMPEDANCECTRL0_B0_P2;                 /**< Data TX impedance controls, offset: 0x400082 */
  uint8_t RESERVED_88[2];
  uint16_t DQDQSRCVCNTRL_B0_P2;                    /**< Dq/Dqs receiver control, offset: 0x400086 */
  uint8_t RESERVED_89[8];
  uint16_t TXEQUALIZATIONMODE_P2;                  /**< Tx dq driver equalization mode controls., offset: 0x400090 */
  uint16_t TXIMPEDANCECTRL1_B0_P2;                 /**< TX impedance controls, offset: 0x400092 */
  uint8_t RESERVED_90[2];
  uint16_t TXIMPEDANCECTRL2_B0_P2;                 /**< TX equalization impedance controls, offset: 0x400096 */
  uint16_t DQDQSRCVCNTRL2_P2;                      /**< Dq/Dqs receiver control, offset: 0x400098 */
  uint16_t TXODTDRVSTREN_B0_P2;                    /**< TX ODT driver strength control, offset: 0x40009A */
  uint8_t RESERVED_91[34];
  uint16_t TXSLEWRATE_B0_P2;                       /**< TX slew rate controls, offset: 0x4000BE */
  uint8_t RESERVED_92[64];
  uint16_t RXENDLYTG0_U0_P2;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x400100 */
  uint16_t RXENDLYTG1_U0_P2;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x400102 */
  uint16_t RXENDLYTG2_U0_P2;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x400104 */
  uint16_t RXENDLYTG3_U0_P2;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x400106 */
  uint8_t RESERVED_93[16];
  uint16_t RXCLKDLYTG0_U0_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x400118 */
  uint16_t RXCLKDLYTG1_U0_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x40011A */
  uint16_t RXCLKDLYTG2_U0_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x40011C */
  uint16_t RXCLKDLYTG3_U0_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x40011E */
  uint16_t RXCLKCDLYTG0_U0_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x400120 */
  uint16_t RXCLKCDLYTG1_U0_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x400122 */
  uint16_t RXCLKCDLYTG2_U0_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x400124 */
  uint8_t RESERVED_94[2];
  uint16_t RXCLKCDLYTG3_U0_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x400128 */
  uint8_t RESERVED_95[50];
  uint16_t PPTDQSCNTINVTRNTG0_P2;                  /**< DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation, offset: 0x40015C */
  uint16_t PPTDQSCNTINVTRNTG1_P2;                  /**< DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation, offset: 0x40015E */
  uint8_t RESERVED_96[32];
  uint16_t TXDQDLYTG0_R0_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400180 */
  uint16_t TXDQDLYTG1_R0_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400182 */
  uint16_t TXDQDLYTG2_R0_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400184 */
  uint16_t TXDQDLYTG3_R0_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400186 */
  uint8_t RESERVED_97[24];
  uint16_t TXDQSDLYTG0_U0_P2;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x4001A0 */
  uint16_t TXDQSDLYTG1_U0_P2;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x4001A2 */
  uint16_t TXDQSDLYTG2_U0_P2;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x4001A4 */
  uint16_t TXDQSDLYTG3_U0_P2;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x4001A6 */
  uint8_t RESERVED_98[218];
  uint16_t TXIMPEDANCECTRL0_B1_P2;                 /**< Data TX impedance controls, offset: 0x400282 */
  uint8_t RESERVED_99[2];
  uint16_t DQDQSRCVCNTRL_B1_P2;                    /**< Dq/Dqs receiver control, offset: 0x400286 */
  uint8_t RESERVED_100[10];
  uint16_t TXIMPEDANCECTRL1_B1_P2;                 /**< TX impedance controls, offset: 0x400292 */
  uint8_t RESERVED_101[2];
  uint16_t TXIMPEDANCECTRL2_B1_P2;                 /**< TX equalization impedance controls, offset: 0x400296 */
  uint8_t RESERVED_102[2];
  uint16_t TXODTDRVSTREN_B1_P2;                    /**< TX ODT driver strength control, offset: 0x40029A */
  uint8_t RESERVED_103[34];
  uint16_t TXSLEWRATE_B1_P2;                       /**< TX slew rate controls, offset: 0x4002BE */
  uint8_t RESERVED_104[64];
  uint16_t RXENDLYTG0_U1_P2;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x400300 */
  uint16_t RXENDLYTG1_U1_P2;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x400302 */
  uint16_t RXENDLYTG2_U1_P2;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x400304 */
  uint16_t RXENDLYTG3_U1_P2;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x400306 */
  uint8_t RESERVED_105[16];
  uint16_t RXCLKDLYTG0_U1_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x400318 */
  uint16_t RXCLKDLYTG1_U1_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x40031A */
  uint16_t RXCLKDLYTG2_U1_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x40031C */
  uint16_t RXCLKDLYTG3_U1_P2;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x40031E */
  uint16_t RXCLKCDLYTG0_U1_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x400320 */
  uint16_t RXCLKCDLYTG1_U1_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x400322 */
  uint16_t RXCLKCDLYTG2_U1_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x400324 */
  uint8_t RESERVED_106[2];
  uint16_t RXCLKCDLYTG3_U1_P2;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x400328 */
  uint8_t RESERVED_107[86];
  uint16_t TXDQDLYTG0_R1_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400380 */
  uint16_t TXDQDLYTG1_R1_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400382 */
  uint16_t TXDQDLYTG2_R1_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400384 */
  uint16_t TXDQDLYTG3_R1_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400386 */
  uint8_t RESERVED_108[24];
  uint16_t TXDQSDLYTG0_U1_P2;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x4003A0 */
  uint16_t TXDQSDLYTG1_U1_P2;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x4003A2 */
  uint16_t TXDQSDLYTG2_U1_P2;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x4003A4 */
  uint16_t TXDQSDLYTG3_U1_P2;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x4003A6 */
  uint8_t RESERVED_109[472];
  uint16_t TXDQDLYTG0_R2_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400580 */
  uint16_t TXDQDLYTG1_R2_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400582 */
  uint16_t TXDQDLYTG2_R2_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400584 */
  uint16_t TXDQDLYTG3_R2_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400586 */
  uint8_t RESERVED_110[504];
  uint16_t TXDQDLYTG0_R3_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400780 */
  uint16_t TXDQDLYTG1_R3_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400782 */
  uint16_t TXDQDLYTG2_R3_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400784 */
  uint16_t TXDQDLYTG3_R3_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400786 */
  uint8_t RESERVED_111[504];
  uint16_t TXDQDLYTG0_R4_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400980 */
  uint16_t TXDQDLYTG1_R4_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400982 */
  uint16_t TXDQDLYTG2_R4_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400984 */
  uint16_t TXDQDLYTG3_R4_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400986 */
  uint8_t RESERVED_112[504];
  uint16_t TXDQDLYTG0_R5_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400B80 */
  uint16_t TXDQDLYTG1_R5_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400B82 */
  uint16_t TXDQDLYTG2_R5_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400B84 */
  uint16_t TXDQDLYTG3_R5_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400B86 */
  uint8_t RESERVED_113[504];
  uint16_t TXDQDLYTG0_R6_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400D80 */
  uint16_t TXDQDLYTG1_R6_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400D82 */
  uint16_t TXDQDLYTG2_R6_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400D84 */
  uint16_t TXDQDLYTG3_R6_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400D86 */
  uint8_t RESERVED_114[504];
  uint16_t TXDQDLYTG0_R7_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x400F80 */
  uint16_t TXDQDLYTG1_R7_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x400F82 */
  uint16_t TXDQDLYTG2_R7_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x400F84 */
  uint16_t TXDQDLYTG3_R7_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x400F86 */
  uint8_t RESERVED_115[504];
  uint16_t TXDQDLYTG0_R8_P2;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x401180 */
  uint16_t TXDQDLYTG1_R8_P2;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x401182 */
  uint16_t TXDQDLYTG2_R8_P2;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x401184 */
  uint16_t TXDQDLYTG3_R8_P2;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x401186 */
  uint8_t RESERVED_116[2092728];
  uint16_t DFIMRL_P3;                              /**< DFI MaxReadLatency, offset: 0x600040 */
  uint8_t RESERVED_117[64];
  uint16_t TXIMPEDANCECTRL0_B0_P3;                 /**< Data TX impedance controls, offset: 0x600082 */
  uint8_t RESERVED_118[2];
  uint16_t DQDQSRCVCNTRL_B0_P3;                    /**< Dq/Dqs receiver control, offset: 0x600086 */
  uint8_t RESERVED_119[8];
  uint16_t TXEQUALIZATIONMODE_P3;                  /**< Tx dq driver equalization mode controls., offset: 0x600090 */
  uint16_t TXIMPEDANCECTRL1_B0_P3;                 /**< TX impedance controls, offset: 0x600092 */
  uint8_t RESERVED_120[2];
  uint16_t TXIMPEDANCECTRL2_B0_P3;                 /**< TX equalization impedance controls, offset: 0x600096 */
  uint16_t DQDQSRCVCNTRL2_P3;                      /**< Dq/Dqs receiver control, offset: 0x600098 */
  uint16_t TXODTDRVSTREN_B0_P3;                    /**< TX ODT driver strength control, offset: 0x60009A */
  uint8_t RESERVED_121[34];
  uint16_t TXSLEWRATE_B0_P3;                       /**< TX slew rate controls, offset: 0x6000BE */
  uint8_t RESERVED_122[64];
  uint16_t RXENDLYTG0_U0_P3;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x600100 */
  uint16_t RXENDLYTG1_U0_P3;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x600102 */
  uint16_t RXENDLYTG2_U0_P3;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x600104 */
  uint16_t RXENDLYTG3_U0_P3;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x600106 */
  uint8_t RESERVED_123[16];
  uint16_t RXCLKDLYTG0_U0_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x600118 */
  uint16_t RXCLKDLYTG1_U0_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x60011A */
  uint16_t RXCLKDLYTG2_U0_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x60011C */
  uint16_t RXCLKDLYTG3_U0_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x60011E */
  uint16_t RXCLKCDLYTG0_U0_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x600120 */
  uint16_t RXCLKCDLYTG1_U0_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x600122 */
  uint16_t RXCLKCDLYTG2_U0_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x600124 */
  uint8_t RESERVED_124[2];
  uint16_t RXCLKCDLYTG3_U0_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x600128 */
  uint8_t RESERVED_125[50];
  uint16_t PPTDQSCNTINVTRNTG0_P3;                  /**< DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation, offset: 0x60015C */
  uint16_t PPTDQSCNTINVTRNTG1_P3;                  /**< DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation, offset: 0x60015E */
  uint8_t RESERVED_126[32];
  uint16_t TXDQDLYTG0_R0_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600180 */
  uint16_t TXDQDLYTG1_R0_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600182 */
  uint16_t TXDQDLYTG2_R0_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600184 */
  uint16_t TXDQDLYTG3_R0_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600186 */
  uint8_t RESERVED_127[24];
  uint16_t TXDQSDLYTG0_U0_P3;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x6001A0 */
  uint16_t TXDQSDLYTG1_U0_P3;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x6001A2 */
  uint16_t TXDQSDLYTG2_U0_P3;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x6001A4 */
  uint16_t TXDQSDLYTG3_U0_P3;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x6001A6 */
  uint8_t RESERVED_128[218];
  uint16_t TXIMPEDANCECTRL0_B1_P3;                 /**< Data TX impedance controls, offset: 0x600282 */
  uint8_t RESERVED_129[2];
  uint16_t DQDQSRCVCNTRL_B1_P3;                    /**< Dq/Dqs receiver control, offset: 0x600286 */
  uint8_t RESERVED_130[10];
  uint16_t TXIMPEDANCECTRL1_B1_P3;                 /**< TX impedance controls, offset: 0x600292 */
  uint8_t RESERVED_131[2];
  uint16_t TXIMPEDANCECTRL2_B1_P3;                 /**< TX equalization impedance controls, offset: 0x600296 */
  uint8_t RESERVED_132[2];
  uint16_t TXODTDRVSTREN_B1_P3;                    /**< TX ODT driver strength control, offset: 0x60029A */
  uint8_t RESERVED_133[34];
  uint16_t TXSLEWRATE_B1_P3;                       /**< TX slew rate controls, offset: 0x6002BE */
  uint8_t RESERVED_134[64];
  uint16_t RXENDLYTG0_U1_P3;                       /**< Trained Receive Enable Delay (For Timing Group 0), offset: 0x600300 */
  uint16_t RXENDLYTG1_U1_P3;                       /**< Trained Receive Enable Delay (For Timing Group 1), offset: 0x600302 */
  uint16_t RXENDLYTG2_U1_P3;                       /**< Trained Receive Enable Delay (For Timing Group 2), offset: 0x600304 */
  uint16_t RXENDLYTG3_U1_P3;                       /**< Trained Receive Enable Delay (For Timing Group 3), offset: 0x600306 */
  uint8_t RESERVED_135[16];
  uint16_t RXCLKDLYTG0_U1_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=0)., offset: 0x600318 */
  uint16_t RXCLKDLYTG1_U1_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=1)., offset: 0x60031A */
  uint16_t RXCLKDLYTG2_U1_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=2)., offset: 0x60031C */
  uint16_t RXCLKDLYTG3_U1_P3;                      /**< Trained Read DQS to RxClk Delay (Timing Group DEST=3)., offset: 0x60031E */
  uint16_t RXCLKCDLYTG0_U1_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x600320 */
  uint16_t RXCLKCDLYTG1_U1_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0)., offset: 0x600322 */
  uint16_t RXCLKCDLYTG2_U1_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2)., offset: 0x600324 */
  uint8_t RESERVED_136[2];
  uint16_t RXCLKCDLYTG3_U1_P3;                     /**< Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3)., offset: 0x600328 */
  uint8_t RESERVED_137[86];
  uint16_t TXDQDLYTG0_R1_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600380 */
  uint16_t TXDQDLYTG1_R1_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600382 */
  uint16_t TXDQDLYTG2_R1_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600384 */
  uint16_t TXDQDLYTG3_R1_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600386 */
  uint8_t RESERVED_138[24];
  uint16_t TXDQSDLYTG0_U1_P3;                      /**< Write DQS Delay (Timing Group DEST=0)., offset: 0x6003A0 */
  uint16_t TXDQSDLYTG1_U1_P3;                      /**< Write DQS Delay (Timing Group DEST=1)., offset: 0x6003A2 */
  uint16_t TXDQSDLYTG2_U1_P3;                      /**< Write DQS Delay (Timing Group DEST=2)., offset: 0x6003A4 */
  uint16_t TXDQSDLYTG3_U1_P3;                      /**< Write DQS Delay (Timing Group DEST=3)., offset: 0x6003A6 */
  uint8_t RESERVED_139[472];
  uint16_t TXDQDLYTG0_R2_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600580 */
  uint16_t TXDQDLYTG1_R2_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600582 */
  uint16_t TXDQDLYTG2_R2_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600584 */
  uint16_t TXDQDLYTG3_R2_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600586 */
  uint8_t RESERVED_140[504];
  uint16_t TXDQDLYTG0_R3_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600780 */
  uint16_t TXDQDLYTG1_R3_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600782 */
  uint16_t TXDQDLYTG2_R3_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600784 */
  uint16_t TXDQDLYTG3_R3_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600786 */
  uint8_t RESERVED_141[504];
  uint16_t TXDQDLYTG0_R4_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600980 */
  uint16_t TXDQDLYTG1_R4_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600982 */
  uint16_t TXDQDLYTG2_R4_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600984 */
  uint16_t TXDQDLYTG3_R4_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600986 */
  uint8_t RESERVED_142[504];
  uint16_t TXDQDLYTG0_R5_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600B80 */
  uint16_t TXDQDLYTG1_R5_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600B82 */
  uint16_t TXDQDLYTG2_R5_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600B84 */
  uint16_t TXDQDLYTG3_R5_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600B86 */
  uint8_t RESERVED_143[504];
  uint16_t TXDQDLYTG0_R6_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600D80 */
  uint16_t TXDQDLYTG1_R6_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600D82 */
  uint16_t TXDQDLYTG2_R6_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600D84 */
  uint16_t TXDQDLYTG3_R6_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600D86 */
  uint8_t RESERVED_144[504];
  uint16_t TXDQDLYTG0_R7_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x600F80 */
  uint16_t TXDQDLYTG1_R7_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x600F82 */
  uint16_t TXDQDLYTG2_R7_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x600F84 */
  uint16_t TXDQDLYTG3_R7_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x600F86 */
  uint8_t RESERVED_145[504];
  uint16_t TXDQDLYTG0_R8_P3;                       /**< Write DQ Delay (Timing Group 0)., offset: 0x601180 */
  uint16_t TXDQDLYTG1_R8_P3;                       /**< Write DQ Delay (Timing Group 1)., offset: 0x601182 */
  uint16_t TXDQDLYTG2_R8_P3;                       /**< Write DQ Delay (Timing Group 2)., offset: 0x601184 */
  uint16_t TXDQDLYTG3_R8_P3;                       /**< Write DQ Delay (Timing Group 3)., offset: 0x601186 */
} volatile *DWC_DDRPHYA_DBYTE_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DBYTE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DBYTE_Register_Accessor_Macros DWC_DDRPHYA_DBYTE - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_DBYTE - Register accessors */
#define DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_REG(base) ((base)->DBYTEMISCMODE)
#define DWC_DDRPHYA_DBYTE_MTESTMUXSEL_REG(base)  ((base)->MTESTMUXSEL)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P0_REG(base)    ((base)->DFIMRL_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R0_REG(base)  ((base)->VREFDAC1_R0)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R0_REG(base)  ((base)->VREFDAC0_R0)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_REG(base) ((base)->TXIMPEDANCECTRL0_B0_P0)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_REG(base) ((base)->DQDQSRCVCNTRL_B0_P0)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_REG(base) ((base)->TXEQUALIZATIONMODE_P0)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_REG(base) ((base)->TXIMPEDANCECTRL1_B0_P0)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_REG(base) ((base)->DQDQSRCVCNTRL1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_REG(base) ((base)->TXIMPEDANCECTRL2_B0_P0)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_REG(base) ((base)->DQDQSRCVCNTRL2_P0)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_REG(base) ((base)->TXODTDRVSTREN_B0_P0)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_REG(base) ((base)->RXFIFOCHECKSTATUS)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_REG(base) ((base)->RXFIFOCHECKERRVALUES)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_REG(base)   ((base)->RXFIFOINFO)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_REG(base) ((base)->RXFIFOVISIBILITY)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_REG(base) ((base)->RXFIFOCONTENTSDQ3210)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_REG(base) ((base)->RXFIFOCONTENTSDQ7654)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_REG(base) ((base)->RXFIFOCONTENTSDBI)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_REG(base) ((base)->TXSLEWRATE_B0_P0)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_REG(base) ((base)->RXPBDLYTG0_R0)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_REG(base) ((base)->RXPBDLYTG1_R0)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_REG(base) ((base)->RXPBDLYTG2_R0)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_REG(base) ((base)->RXPBDLYTG3_R0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_REG(base) ((base)->RXENDLYTG0_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_REG(base) ((base)->RXENDLYTG1_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_REG(base) ((base)->RXENDLYTG2_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_REG(base) ((base)->RXENDLYTG3_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_REG(base) ((base)->RXCLKDLYTG0_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_REG(base) ((base)->RXCLKDLYTG1_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_REG(base) ((base)->RXCLKDLYTG2_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_REG(base) ((base)->RXCLKDLYTG3_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_REG(base) ((base)->RXCLKCDLYTG0_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_REG(base) ((base)->RXCLKCDLYTG1_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_REG(base) ((base)->RXCLKCDLYTG2_U0_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_REG(base) ((base)->RXCLKCDLYTG3_U0_P0)
#define DWC_DDRPHYA_DBYTE_DQLNSEL_REG(base,index) ((base)->DQLNSEL[index])
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_REG(base) ((base)->TXDQDLYTG0_R0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_REG(base) ((base)->TXDQDLYTG1_R0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_REG(base) ((base)->TXDQDLYTG2_R0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_REG(base) ((base)->TXDQDLYTG3_R0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_REG(base) ((base)->TXDQSDLYTG0_U0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_REG(base) ((base)->TXDQSDLYTG1_U0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_REG(base) ((base)->TXDQSDLYTG2_U0_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_REG(base) ((base)->TXDQSDLYTG3_U0_P0)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_REG(base) ((base)->DXLCDLSTATUS)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R1_REG(base)  ((base)->VREFDAC1_R1)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R1_REG(base)  ((base)->VREFDAC0_R1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_REG(base) ((base)->TXIMPEDANCECTRL0_B1_P0)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_REG(base) ((base)->DQDQSRCVCNTRL_B1_P0)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_REG(base) ((base)->TXIMPEDANCECTRL1_B1_P0)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_REG(base) ((base)->TXIMPEDANCECTRL2_B1_P0)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_REG(base) ((base)->TXODTDRVSTREN_B1_P0)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_REG(base) ((base)->TXSLEWRATE_B1_P0)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_REG(base) ((base)->RXPBDLYTG0_R1)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_REG(base) ((base)->RXPBDLYTG1_R1)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_REG(base) ((base)->RXPBDLYTG2_R1)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_REG(base) ((base)->RXPBDLYTG3_R1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_REG(base) ((base)->RXENDLYTG0_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_REG(base) ((base)->RXENDLYTG1_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_REG(base) ((base)->RXENDLYTG2_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_REG(base) ((base)->RXENDLYTG3_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_REG(base) ((base)->RXCLKDLYTG0_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_REG(base) ((base)->RXCLKDLYTG1_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_REG(base) ((base)->RXCLKDLYTG2_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_REG(base) ((base)->RXCLKDLYTG3_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_REG(base) ((base)->RXCLKCDLYTG0_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_REG(base) ((base)->RXCLKCDLYTG1_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_REG(base) ((base)->RXCLKCDLYTG2_U1_P0)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_REG(base) ((base)->RXCLKCDLYTG3_U1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_REG(base) ((base)->TXDQDLYTG0_R1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_REG(base) ((base)->TXDQDLYTG1_R1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_REG(base) ((base)->TXDQDLYTG2_R1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_REG(base) ((base)->TXDQDLYTG3_R1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_REG(base) ((base)->TXDQSDLYTG0_U1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_REG(base) ((base)->TXDQSDLYTG1_U1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_REG(base) ((base)->TXDQSDLYTG2_U1_P0)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_REG(base) ((base)->TXDQSDLYTG3_U1_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R2_REG(base)  ((base)->VREFDAC1_R2)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R2_REG(base)  ((base)->VREFDAC0_R2)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_REG(base) ((base)->RXPBDLYTG0_R2)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_REG(base) ((base)->RXPBDLYTG1_R2)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_REG(base) ((base)->RXPBDLYTG2_R2)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_REG(base) ((base)->RXPBDLYTG3_R2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_REG(base) ((base)->TXDQDLYTG0_R2_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_REG(base) ((base)->TXDQDLYTG1_R2_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_REG(base) ((base)->TXDQDLYTG2_R2_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_REG(base) ((base)->TXDQDLYTG3_R2_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R3_REG(base)  ((base)->VREFDAC1_R3)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R3_REG(base)  ((base)->VREFDAC0_R3)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_REG(base) ((base)->RXPBDLYTG0_R3)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_REG(base) ((base)->RXPBDLYTG1_R3)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_REG(base) ((base)->RXPBDLYTG2_R3)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_REG(base) ((base)->RXPBDLYTG3_R3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_REG(base) ((base)->TXDQDLYTG0_R3_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_REG(base) ((base)->TXDQDLYTG1_R3_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_REG(base) ((base)->TXDQDLYTG2_R3_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_REG(base) ((base)->TXDQDLYTG3_R3_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R4_REG(base)  ((base)->VREFDAC1_R4)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R4_REG(base)  ((base)->VREFDAC0_R4)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_REG(base) ((base)->RXPBDLYTG0_R4)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_REG(base) ((base)->RXPBDLYTG1_R4)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_REG(base) ((base)->RXPBDLYTG2_R4)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_REG(base) ((base)->RXPBDLYTG3_R4)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_REG(base) ((base)->TXDQDLYTG0_R4_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_REG(base) ((base)->TXDQDLYTG1_R4_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_REG(base) ((base)->TXDQDLYTG2_R4_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_REG(base) ((base)->TXDQDLYTG3_R4_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R5_REG(base)  ((base)->VREFDAC1_R5)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R5_REG(base)  ((base)->VREFDAC0_R5)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_REG(base) ((base)->RXPBDLYTG0_R5)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_REG(base) ((base)->RXPBDLYTG1_R5)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_REG(base) ((base)->RXPBDLYTG2_R5)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_REG(base) ((base)->RXPBDLYTG3_R5)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_REG(base) ((base)->TXDQDLYTG0_R5_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_REG(base) ((base)->TXDQDLYTG1_R5_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_REG(base) ((base)->TXDQDLYTG2_R5_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_REG(base) ((base)->TXDQDLYTG3_R5_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R6_REG(base)  ((base)->VREFDAC1_R6)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R6_REG(base)  ((base)->VREFDAC0_R6)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_REG(base) ((base)->RXPBDLYTG0_R6)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_REG(base) ((base)->RXPBDLYTG1_R6)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_REG(base) ((base)->RXPBDLYTG2_R6)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_REG(base) ((base)->RXPBDLYTG3_R6)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_REG(base) ((base)->TXDQDLYTG0_R6_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_REG(base) ((base)->TXDQDLYTG1_R6_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_REG(base) ((base)->TXDQDLYTG2_R6_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_REG(base) ((base)->TXDQDLYTG3_R6_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R7_REG(base)  ((base)->VREFDAC1_R7)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R7_REG(base)  ((base)->VREFDAC0_R7)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_REG(base) ((base)->RXPBDLYTG0_R7)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_REG(base) ((base)->RXPBDLYTG1_R7)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_REG(base) ((base)->RXPBDLYTG2_R7)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_REG(base) ((base)->RXPBDLYTG3_R7)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_REG(base) ((base)->TXDQDLYTG0_R7_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_REG(base) ((base)->TXDQDLYTG1_R7_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_REG(base) ((base)->TXDQDLYTG2_R7_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_REG(base) ((base)->TXDQDLYTG3_R7_P0)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R8_REG(base)  ((base)->VREFDAC1_R8)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R8_REG(base)  ((base)->VREFDAC0_R8)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_REG(base) ((base)->RXPBDLYTG0_R8)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_REG(base) ((base)->RXPBDLYTG1_R8)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_REG(base) ((base)->RXPBDLYTG2_R8)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_REG(base) ((base)->RXPBDLYTG3_R8)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_REG(base) ((base)->TXDQDLYTG0_R8_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_REG(base) ((base)->TXDQDLYTG1_R8_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_REG(base) ((base)->TXDQDLYTG2_R8_P0)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_REG(base) ((base)->TXDQDLYTG3_R8_P0)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P1_REG(base)    ((base)->DFIMRL_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_REG(base) ((base)->TXIMPEDANCECTRL0_B0_P1)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_REG(base) ((base)->DQDQSRCVCNTRL_B0_P1)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_REG(base) ((base)->TXEQUALIZATIONMODE_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_REG(base) ((base)->TXIMPEDANCECTRL1_B0_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_REG(base) ((base)->TXIMPEDANCECTRL2_B0_P1)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_REG(base) ((base)->DQDQSRCVCNTRL2_P1)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_REG(base) ((base)->TXODTDRVSTREN_B0_P1)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_REG(base) ((base)->TXSLEWRATE_B0_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_REG(base) ((base)->RXENDLYTG0_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_REG(base) ((base)->RXENDLYTG1_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_REG(base) ((base)->RXENDLYTG2_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_REG(base) ((base)->RXENDLYTG3_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_REG(base) ((base)->RXCLKDLYTG0_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_REG(base) ((base)->RXCLKDLYTG1_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_REG(base) ((base)->RXCLKDLYTG2_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_REG(base) ((base)->RXCLKDLYTG3_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_REG(base) ((base)->RXCLKCDLYTG0_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_REG(base) ((base)->RXCLKCDLYTG1_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_REG(base) ((base)->RXCLKCDLYTG2_U0_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_REG(base) ((base)->RXCLKCDLYTG3_U0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_REG(base) ((base)->TXDQDLYTG0_R0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_REG(base) ((base)->TXDQDLYTG1_R0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_REG(base) ((base)->TXDQDLYTG2_R0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_REG(base) ((base)->TXDQDLYTG3_R0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_REG(base) ((base)->TXDQSDLYTG0_U0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_REG(base) ((base)->TXDQSDLYTG1_U0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_REG(base) ((base)->TXDQSDLYTG2_U0_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_REG(base) ((base)->TXDQSDLYTG3_U0_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_REG(base) ((base)->TXIMPEDANCECTRL0_B1_P1)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_REG(base) ((base)->DQDQSRCVCNTRL_B1_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_REG(base) ((base)->TXIMPEDANCECTRL1_B1_P1)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_REG(base) ((base)->TXIMPEDANCECTRL2_B1_P1)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_REG(base) ((base)->TXODTDRVSTREN_B1_P1)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_REG(base) ((base)->TXSLEWRATE_B1_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_REG(base) ((base)->RXENDLYTG0_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_REG(base) ((base)->RXENDLYTG1_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_REG(base) ((base)->RXENDLYTG2_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_REG(base) ((base)->RXENDLYTG3_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_REG(base) ((base)->RXCLKDLYTG0_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_REG(base) ((base)->RXCLKDLYTG1_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_REG(base) ((base)->RXCLKDLYTG2_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_REG(base) ((base)->RXCLKDLYTG3_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_REG(base) ((base)->RXCLKCDLYTG0_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_REG(base) ((base)->RXCLKCDLYTG1_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_REG(base) ((base)->RXCLKCDLYTG2_U1_P1)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_REG(base) ((base)->RXCLKCDLYTG3_U1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_REG(base) ((base)->TXDQDLYTG0_R1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_REG(base) ((base)->TXDQDLYTG1_R1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_REG(base) ((base)->TXDQDLYTG2_R1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_REG(base) ((base)->TXDQDLYTG3_R1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_REG(base) ((base)->TXDQSDLYTG0_U1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_REG(base) ((base)->TXDQSDLYTG1_U1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_REG(base) ((base)->TXDQSDLYTG2_U1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_REG(base) ((base)->TXDQSDLYTG3_U1_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_REG(base) ((base)->TXDQDLYTG0_R2_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_REG(base) ((base)->TXDQDLYTG1_R2_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_REG(base) ((base)->TXDQDLYTG2_R2_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_REG(base) ((base)->TXDQDLYTG3_R2_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_REG(base) ((base)->TXDQDLYTG0_R3_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_REG(base) ((base)->TXDQDLYTG1_R3_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_REG(base) ((base)->TXDQDLYTG2_R3_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_REG(base) ((base)->TXDQDLYTG3_R3_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_REG(base) ((base)->TXDQDLYTG0_R4_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_REG(base) ((base)->TXDQDLYTG1_R4_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_REG(base) ((base)->TXDQDLYTG2_R4_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_REG(base) ((base)->TXDQDLYTG3_R4_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_REG(base) ((base)->TXDQDLYTG0_R5_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_REG(base) ((base)->TXDQDLYTG1_R5_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_REG(base) ((base)->TXDQDLYTG2_R5_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_REG(base) ((base)->TXDQDLYTG3_R5_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_REG(base) ((base)->TXDQDLYTG0_R6_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_REG(base) ((base)->TXDQDLYTG1_R6_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_REG(base) ((base)->TXDQDLYTG2_R6_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_REG(base) ((base)->TXDQDLYTG3_R6_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_REG(base) ((base)->TXDQDLYTG0_R7_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_REG(base) ((base)->TXDQDLYTG1_R7_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_REG(base) ((base)->TXDQDLYTG2_R7_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_REG(base) ((base)->TXDQDLYTG3_R7_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_REG(base) ((base)->TXDQDLYTG0_R8_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_REG(base) ((base)->TXDQDLYTG1_R8_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_REG(base) ((base)->TXDQDLYTG2_R8_P1)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_REG(base) ((base)->TXDQDLYTG3_R8_P1)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P2_REG(base)    ((base)->DFIMRL_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_REG(base) ((base)->TXIMPEDANCECTRL0_B0_P2)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_REG(base) ((base)->DQDQSRCVCNTRL_B0_P2)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_REG(base) ((base)->TXEQUALIZATIONMODE_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_REG(base) ((base)->TXIMPEDANCECTRL1_B0_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_REG(base) ((base)->TXIMPEDANCECTRL2_B0_P2)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_REG(base) ((base)->DQDQSRCVCNTRL2_P2)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_REG(base) ((base)->TXODTDRVSTREN_B0_P2)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_REG(base) ((base)->TXSLEWRATE_B0_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_REG(base) ((base)->RXENDLYTG0_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_REG(base) ((base)->RXENDLYTG1_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_REG(base) ((base)->RXENDLYTG2_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_REG(base) ((base)->RXENDLYTG3_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_REG(base) ((base)->RXCLKDLYTG0_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_REG(base) ((base)->RXCLKDLYTG1_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_REG(base) ((base)->RXCLKDLYTG2_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_REG(base) ((base)->RXCLKDLYTG3_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_REG(base) ((base)->RXCLKCDLYTG0_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_REG(base) ((base)->RXCLKCDLYTG1_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_REG(base) ((base)->RXCLKCDLYTG2_U0_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_REG(base) ((base)->RXCLKCDLYTG3_U0_P2)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_REG(base) ((base)->PPTDQSCNTINVTRNTG0_P2)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_REG(base) ((base)->PPTDQSCNTINVTRNTG1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_REG(base) ((base)->TXDQDLYTG0_R0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_REG(base) ((base)->TXDQDLYTG1_R0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_REG(base) ((base)->TXDQDLYTG2_R0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_REG(base) ((base)->TXDQDLYTG3_R0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_REG(base) ((base)->TXDQSDLYTG0_U0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_REG(base) ((base)->TXDQSDLYTG1_U0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_REG(base) ((base)->TXDQSDLYTG2_U0_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_REG(base) ((base)->TXDQSDLYTG3_U0_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_REG(base) ((base)->TXIMPEDANCECTRL0_B1_P2)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_REG(base) ((base)->DQDQSRCVCNTRL_B1_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_REG(base) ((base)->TXIMPEDANCECTRL1_B1_P2)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_REG(base) ((base)->TXIMPEDANCECTRL2_B1_P2)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_REG(base) ((base)->TXODTDRVSTREN_B1_P2)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_REG(base) ((base)->TXSLEWRATE_B1_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_REG(base) ((base)->RXENDLYTG0_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_REG(base) ((base)->RXENDLYTG1_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_REG(base) ((base)->RXENDLYTG2_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_REG(base) ((base)->RXENDLYTG3_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_REG(base) ((base)->RXCLKDLYTG0_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_REG(base) ((base)->RXCLKDLYTG1_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_REG(base) ((base)->RXCLKDLYTG2_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_REG(base) ((base)->RXCLKDLYTG3_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_REG(base) ((base)->RXCLKCDLYTG0_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_REG(base) ((base)->RXCLKCDLYTG1_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_REG(base) ((base)->RXCLKCDLYTG2_U1_P2)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_REG(base) ((base)->RXCLKCDLYTG3_U1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_REG(base) ((base)->TXDQDLYTG0_R1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_REG(base) ((base)->TXDQDLYTG1_R1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_REG(base) ((base)->TXDQDLYTG2_R1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_REG(base) ((base)->TXDQDLYTG3_R1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_REG(base) ((base)->TXDQSDLYTG0_U1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_REG(base) ((base)->TXDQSDLYTG1_U1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_REG(base) ((base)->TXDQSDLYTG2_U1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_REG(base) ((base)->TXDQSDLYTG3_U1_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_REG(base) ((base)->TXDQDLYTG0_R2_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_REG(base) ((base)->TXDQDLYTG1_R2_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_REG(base) ((base)->TXDQDLYTG2_R2_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_REG(base) ((base)->TXDQDLYTG3_R2_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_REG(base) ((base)->TXDQDLYTG0_R3_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_REG(base) ((base)->TXDQDLYTG1_R3_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_REG(base) ((base)->TXDQDLYTG2_R3_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_REG(base) ((base)->TXDQDLYTG3_R3_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_REG(base) ((base)->TXDQDLYTG0_R4_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_REG(base) ((base)->TXDQDLYTG1_R4_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_REG(base) ((base)->TXDQDLYTG2_R4_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_REG(base) ((base)->TXDQDLYTG3_R4_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_REG(base) ((base)->TXDQDLYTG0_R5_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_REG(base) ((base)->TXDQDLYTG1_R5_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_REG(base) ((base)->TXDQDLYTG2_R5_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_REG(base) ((base)->TXDQDLYTG3_R5_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_REG(base) ((base)->TXDQDLYTG0_R6_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_REG(base) ((base)->TXDQDLYTG1_R6_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_REG(base) ((base)->TXDQDLYTG2_R6_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_REG(base) ((base)->TXDQDLYTG3_R6_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_REG(base) ((base)->TXDQDLYTG0_R7_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_REG(base) ((base)->TXDQDLYTG1_R7_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_REG(base) ((base)->TXDQDLYTG2_R7_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_REG(base) ((base)->TXDQDLYTG3_R7_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_REG(base) ((base)->TXDQDLYTG0_R8_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_REG(base) ((base)->TXDQDLYTG1_R8_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_REG(base) ((base)->TXDQDLYTG2_R8_P2)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_REG(base) ((base)->TXDQDLYTG3_R8_P2)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P3_REG(base)    ((base)->DFIMRL_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_REG(base) ((base)->TXIMPEDANCECTRL0_B0_P3)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_REG(base) ((base)->DQDQSRCVCNTRL_B0_P3)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_REG(base) ((base)->TXEQUALIZATIONMODE_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_REG(base) ((base)->TXIMPEDANCECTRL1_B0_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_REG(base) ((base)->TXIMPEDANCECTRL2_B0_P3)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_REG(base) ((base)->DQDQSRCVCNTRL2_P3)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_REG(base) ((base)->TXODTDRVSTREN_B0_P3)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_REG(base) ((base)->TXSLEWRATE_B0_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_REG(base) ((base)->RXENDLYTG0_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_REG(base) ((base)->RXENDLYTG1_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_REG(base) ((base)->RXENDLYTG2_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_REG(base) ((base)->RXENDLYTG3_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_REG(base) ((base)->RXCLKDLYTG0_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_REG(base) ((base)->RXCLKDLYTG1_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_REG(base) ((base)->RXCLKDLYTG2_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_REG(base) ((base)->RXCLKDLYTG3_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_REG(base) ((base)->RXCLKCDLYTG0_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_REG(base) ((base)->RXCLKCDLYTG1_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_REG(base) ((base)->RXCLKCDLYTG2_U0_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_REG(base) ((base)->RXCLKCDLYTG3_U0_P3)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_REG(base) ((base)->PPTDQSCNTINVTRNTG0_P3)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_REG(base) ((base)->PPTDQSCNTINVTRNTG1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_REG(base) ((base)->TXDQDLYTG0_R0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_REG(base) ((base)->TXDQDLYTG1_R0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_REG(base) ((base)->TXDQDLYTG2_R0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_REG(base) ((base)->TXDQDLYTG3_R0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_REG(base) ((base)->TXDQSDLYTG0_U0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_REG(base) ((base)->TXDQSDLYTG1_U0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_REG(base) ((base)->TXDQSDLYTG2_U0_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_REG(base) ((base)->TXDQSDLYTG3_U0_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_REG(base) ((base)->TXIMPEDANCECTRL0_B1_P3)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_REG(base) ((base)->DQDQSRCVCNTRL_B1_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_REG(base) ((base)->TXIMPEDANCECTRL1_B1_P3)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_REG(base) ((base)->TXIMPEDANCECTRL2_B1_P3)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_REG(base) ((base)->TXODTDRVSTREN_B1_P3)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_REG(base) ((base)->TXSLEWRATE_B1_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_REG(base) ((base)->RXENDLYTG0_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_REG(base) ((base)->RXENDLYTG1_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_REG(base) ((base)->RXENDLYTG2_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_REG(base) ((base)->RXENDLYTG3_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_REG(base) ((base)->RXCLKDLYTG0_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_REG(base) ((base)->RXCLKDLYTG1_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_REG(base) ((base)->RXCLKDLYTG2_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_REG(base) ((base)->RXCLKDLYTG3_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_REG(base) ((base)->RXCLKCDLYTG0_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_REG(base) ((base)->RXCLKCDLYTG1_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_REG(base) ((base)->RXCLKCDLYTG2_U1_P3)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_REG(base) ((base)->RXCLKCDLYTG3_U1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_REG(base) ((base)->TXDQDLYTG0_R1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_REG(base) ((base)->TXDQDLYTG1_R1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_REG(base) ((base)->TXDQDLYTG2_R1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_REG(base) ((base)->TXDQDLYTG3_R1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_REG(base) ((base)->TXDQSDLYTG0_U1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_REG(base) ((base)->TXDQSDLYTG1_U1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_REG(base) ((base)->TXDQSDLYTG2_U1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_REG(base) ((base)->TXDQSDLYTG3_U1_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_REG(base) ((base)->TXDQDLYTG0_R2_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_REG(base) ((base)->TXDQDLYTG1_R2_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_REG(base) ((base)->TXDQDLYTG2_R2_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_REG(base) ((base)->TXDQDLYTG3_R2_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_REG(base) ((base)->TXDQDLYTG0_R3_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_REG(base) ((base)->TXDQDLYTG1_R3_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_REG(base) ((base)->TXDQDLYTG2_R3_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_REG(base) ((base)->TXDQDLYTG3_R3_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_REG(base) ((base)->TXDQDLYTG0_R4_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_REG(base) ((base)->TXDQDLYTG1_R4_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_REG(base) ((base)->TXDQDLYTG2_R4_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_REG(base) ((base)->TXDQDLYTG3_R4_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_REG(base) ((base)->TXDQDLYTG0_R5_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_REG(base) ((base)->TXDQDLYTG1_R5_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_REG(base) ((base)->TXDQDLYTG2_R5_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_REG(base) ((base)->TXDQDLYTG3_R5_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_REG(base) ((base)->TXDQDLYTG0_R6_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_REG(base) ((base)->TXDQDLYTG1_R6_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_REG(base) ((base)->TXDQDLYTG2_R6_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_REG(base) ((base)->TXDQDLYTG3_R6_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_REG(base) ((base)->TXDQDLYTG0_R7_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_REG(base) ((base)->TXDQDLYTG1_R7_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_REG(base) ((base)->TXDQDLYTG2_R7_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_REG(base) ((base)->TXDQDLYTG3_R7_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_REG(base) ((base)->TXDQDLYTG0_R8_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_REG(base) ((base)->TXDQDLYTG1_R8_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_REG(base) ((base)->TXDQDLYTG2_R8_P3)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_REG(base) ((base)->TXDQDLYTG3_R8_P3)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DBYTE_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DBYTE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DBYTE_Register_Masks DWC_DDRPHYA_DBYTE Register Masks
 * @{
 */

/*! @name DBYTEMISCMODE - DBYTE Module Disable */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_DByteDisable_MASK (0x4U)
#define DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_DByteDisable_SHIFT (2U)
/*! @} */

/*! @name MTESTMUXSEL - Digital Observation Pin control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_MTESTMUXSEL_MtestMuxSel_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_MTESTMUXSEL_MtestMuxSel_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_MTESTMUXSEL_MtestMuxSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_MTESTMUXSEL_MtestMuxSel_SHIFT)) & DWC_DDRPHYA_DBYTE_MTESTMUXSEL_MtestMuxSel_MASK)
/*! @} */

/*! @name DFIMRL_P0 - DFI MaxReadLatency */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DFIMRL_P0_DFIMRL_p0_MASK (0x1FU)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P0_DFIMRL_p0_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P0_DFIMRL_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DFIMRL_P0_DFIMRL_p0_SHIFT)) & DWC_DDRPHYA_DBYTE_DFIMRL_P0_DFIMRL_p0_MASK)
/*! @} */

/*! @name VREFDAC1_R0 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R0_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R0_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R0_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R0_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R0_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R0 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R0_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R0_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R0_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R0_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R0_VrefDAC0_rx_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B0_P0 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B0_P0 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_GainCurrAdj_MASK)
/*! @} */

/*! @name TXEQUALIZATIONMODE_P0 - Tx dq driver equalization mode controls. */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_TxEqMode_MASK (0x3U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_TxEqMode_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_TxEqMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_TxEqMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_TxEqMode_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B0_P0 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL1 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvr_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvr_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvr_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvr_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvrDqs_MASK (0x200U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_PowerDownRcvrDqs_SHIFT (9U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_RxPadStandbyEn_MASK (0x400U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_RxPadStandbyEn_SHIFT (10U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_EnLPReqPDR_MASK (0x800U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_EnLPReqPDR_SHIFT (11U)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B0_P0 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL2_P0 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_EnRxAgressivePDR_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_EnRxAgressivePDR_SHIFT (0U)
/*! @} */

/*! @name TXODTDRVSTREN_B0_P0 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_ODTStrenN_MASK)
/*! @} */

/*! @name RXFIFOCHECKSTATUS - Status of RX FIFO Consistency Checks */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoRdLocErr_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoRdLocErr_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoWrLocErr_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoWrLocErr_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoRdLocUErr_MASK (0x4U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoRdLocUErr_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoWrLocUErr_MASK (0x8U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_RxFifoWrLocUErr_SHIFT (3U)
/*! @} */

/*! @name RXFIFOCHECKERRVALUES - Contains the captured values associated with an RxFifo consistency error */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocErrValue_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocErrValue_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocErrValue(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocErrValue_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocErrValue_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocErrValue_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocErrValue_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocErrValue(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocErrValue_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocErrValue_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocUErrValue_MASK (0xF00U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocUErrValue_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocUErrValue(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocUErrValue_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoRdLocUErrValue_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocUErrValue_MASK (0xF000U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocUErrValue_SHIFT (12U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocUErrValue(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocUErrValue_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_RxFifoWrLocUErrValue_MASK)
/*! @} */

/*! @name RXFIFOINFO - Data Receive FIFO Pointer Values */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLoc_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLoc_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLoc(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLoc_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLoc_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLoc_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLoc_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLoc(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLoc_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLoc_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLocU_MASK (0xF00U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLocU_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLocU(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLocU_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoRdLocU_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLocU_MASK (0xF000U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLocU_SHIFT (12U)
#define DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLocU(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLocU_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOINFO_RxFifoWrLocU_MASK)
/*! @} */

/*! @name RXFIFOVISIBILITY - RX FIFO visibility */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtr_MASK (0x7U)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtr_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtr_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtr_MASK)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtrOvr_MASK (0x8U)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdPtrOvr_SHIFT (3U)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdEn_MASK (0x10U)
#define DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_RxFifoRdEn_SHIFT (4U)
/*! @} */

/*! @name RXFIFOCONTENTSDQ3210 - RX FIFO contents, lane[3:0] */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_RxFifoContentsDQ3210_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_RxFifoContentsDQ3210_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_RxFifoContentsDQ3210(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_RxFifoContentsDQ3210_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_RxFifoContentsDQ3210_MASK)
/*! @} */

/*! @name RXFIFOCONTENTSDQ7654 - RX FIFO contents, lane[7:4] */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_RxFifoContentsDQ7654_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_RxFifoContentsDQ7654_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_RxFifoContentsDQ7654(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_RxFifoContentsDQ7654_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_RxFifoContentsDQ7654_MASK)
/*! @} */

/*! @name RXFIFOCONTENTSDBI - RX FIFO contents, dbi */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_RxFifoContentsDBI_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_RxFifoContentsDBI_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_RxFifoContentsDBI(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_RxFifoContentsDBI_SHIFT)) & DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_RxFifoContentsDBI_MASK)
/*! @} */

/*! @name TXSLEWRATE_B0_P0 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R0 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R0 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R0 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R0 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name RXENDLYTG0_U0_P0 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U0_P0 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U0_P0 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U0_P0 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U0_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U0_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U0_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U0_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U0_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U0_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U0_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U0_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name DQLNSEL - Maps Phy DQ lane to memory DQ0 */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQLNSEL_DqLnSel_MASK   (0x7U)
#define DWC_DDRPHYA_DBYTE_DQLNSEL_DqLnSel_SHIFT  (0U)
#define DWC_DDRPHYA_DBYTE_DQLNSEL_DqLnSel(x)     (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQLNSEL_DqLnSel_SHIFT)) & DWC_DDRPHYA_DBYTE_DQLNSEL_DqLnSel_MASK)
/*! @} */

/* The count of DWC_DDRPHYA_DBYTE_DQLNSEL */
#define DWC_DDRPHYA_DBYTE_DQLNSEL_COUNT          (8U)

/*! @name TXDQDLYTG0_R0_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R0_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R0_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R0_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U0_P0 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U0_P0 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U0_P0 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U0_P0 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name DXLCDLSTATUS - Debug status of the DBYTE LCDL */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlFineSnapVal_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlFineSnapVal_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlFineSnapVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlFineSnapVal_SHIFT)) & DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlFineSnapVal_MASK)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlPhdSnapVal_MASK (0x400U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlPhdSnapVal_SHIFT (10U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlStickyLock_MASK (0x800U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlStickyLock_SHIFT (11U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlStickyUnlock_MASK (0x1000U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlStickyUnlock_SHIFT (12U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlLiveLock_MASK (0x2000U)
#define DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_DxLcdlLiveLock_SHIFT (13U)
/*! @} */

/*! @name VREFDAC1_R1 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R1_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R1_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R1_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R1_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R1_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R1 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R1_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R1_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R1_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R1_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R1_VrefDAC0_rx_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B1_P0 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B1_P0 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_GainCurrAdj_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B1_P0 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B1_P0 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name TXODTDRVSTREN_B1_P0 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B1_P0 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R1 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R1 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R1 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R1 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name RXENDLYTG0_U1_P0 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U1_P0 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U1_P0 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U1_P0 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U1_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U1_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U1_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U1_P0 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U1_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U1_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U1_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U1_P0 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R1_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R1_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R1_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R1_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U1_P0 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U1_P0 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U1_P0 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U1_P0 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name VREFDAC1_R2 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R2_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R2_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R2_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R2_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R2_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R2 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R2_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R2_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R2_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R2_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R2_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R2 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R2 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R2 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R2 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R2_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R2_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R2_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R2_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R3 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R3_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R3_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R3_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R3_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R3_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R3 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R3_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R3_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R3_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R3_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R3_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R3 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R3 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R3 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R3 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R3_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R3_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R3_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R3_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R4 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R4_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R4_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R4_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R4_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R4_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R4 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R4_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R4_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R4_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R4_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R4_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R4 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R4 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R4 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R4 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R4_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R4_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R4_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R4_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R5 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R5_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R5_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R5_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R5_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R5_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R5 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R5_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R5_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R5_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R5_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R5_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R5 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R5 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R5 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R5 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R5_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R5_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R5_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R5_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R6 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R6_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R6_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R6_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R6_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R6_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R6 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R6_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R6_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R6_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R6_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R6_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R6 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R6 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R6 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R6 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R6_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R6_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R6_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R6_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R7 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R7_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R7_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R7_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R7_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R7_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R7 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R7_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R7_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R7_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R7_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R7_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R7 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R7 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R7 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R7 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R7_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R7_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R7_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R7_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name VREFDAC1_R8 - VrefDAC1 control for DQ Receiver (used only when DFE is enabled in DDR4) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R8_VrefDAC1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R8_VrefDAC1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC1_R8_VrefDAC1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC1_R8_VrefDAC1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC1_R8_VrefDAC1_rx_MASK)
/*! @} */

/*! @name VREFDAC0_R8 - VrefDAC0 control for DQ Receiver */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R8_VrefDAC0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R8_VrefDAC0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_VREFDAC0_R8_VrefDAC0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_VREFDAC0_R8_VrefDAC0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_VREFDAC0_R8_VrefDAC0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG0_R8 - Read DQ per-bit BDL delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_RxPBDlyTg0_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_RxPBDlyTg0_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_RxPBDlyTg0_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_RxPBDlyTg0_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_RxPBDlyTg0_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG1_R8 - Read DQ per-bit BDL delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_RxPBDlyTg1_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_RxPBDlyTg1_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_RxPBDlyTg1_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_RxPBDlyTg1_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_RxPBDlyTg1_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG2_R8 - Read DQ per-bit BDL delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_RxPBDlyTg2_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_RxPBDlyTg2_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_RxPBDlyTg2_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_RxPBDlyTg2_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_RxPBDlyTg2_rx_MASK)
/*! @} */

/*! @name RXPBDLYTG3_R8 - Read DQ per-bit BDL delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_RxPBDlyTg3_rx_MASK (0x7FU)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_RxPBDlyTg3_rx_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_RxPBDlyTg3_rx(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_RxPBDlyTg3_rx_SHIFT)) & DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_RxPBDlyTg3_rx_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R8_P0 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R8_P0 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R8_P0 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R8_P0 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name DFIMRL_P1 - DFI MaxReadLatency */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DFIMRL_P1_DFIMRL_p1_MASK (0x1FU)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P1_DFIMRL_p1_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P1_DFIMRL_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DFIMRL_P1_DFIMRL_p1_SHIFT)) & DWC_DDRPHYA_DBYTE_DFIMRL_P1_DFIMRL_p1_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B0_P1 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B0_P1 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_GainCurrAdj_MASK)
/*! @} */

/*! @name TXEQUALIZATIONMODE_P1 - Tx dq driver equalization mode controls. */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_TxEqMode_MASK (0x3U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_TxEqMode_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_TxEqMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_TxEqMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_TxEqMode_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B0_P1 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B0_P1 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL2_P1 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_EnRxAgressivePDR_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_EnRxAgressivePDR_SHIFT (0U)
/*! @} */

/*! @name TXODTDRVSTREN_B0_P1 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B0_P1 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U0_P1 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U0_P1 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U0_P1 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U0_P1 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U0_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U0_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U0_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U0_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U0_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U0_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U0_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U0_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R0_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R0_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R0_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R0_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U0_P1 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U0_P1 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U0_P1 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U0_P1 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B1_P1 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B1_P1 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_GainCurrAdj_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B1_P1 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B1_P1 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name TXODTDRVSTREN_B1_P1 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B1_P1 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U1_P1 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U1_P1 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U1_P1 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U1_P1 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U1_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U1_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U1_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U1_P1 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U1_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U1_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U1_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U1_P1 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R1_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R1_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R1_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R1_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U1_P1 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U1_P1 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U1_P1 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U1_P1 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R2_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R2_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R2_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R2_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R3_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R3_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R3_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R3_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R4_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R4_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R4_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R4_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R5_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R5_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R5_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R5_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R6_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R6_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R6_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R6_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R7_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R7_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R7_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R7_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R8_P1 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R8_P1 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R8_P1 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R8_P1 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name DFIMRL_P2 - DFI MaxReadLatency */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DFIMRL_P2_DFIMRL_p2_MASK (0x1FU)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P2_DFIMRL_p2_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P2_DFIMRL_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DFIMRL_P2_DFIMRL_p2_SHIFT)) & DWC_DDRPHYA_DBYTE_DFIMRL_P2_DFIMRL_p2_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B0_P2 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B0_P2 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_GainCurrAdj_MASK)
/*! @} */

/*! @name TXEQUALIZATIONMODE_P2 - Tx dq driver equalization mode controls. */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_TxEqMode_MASK (0x3U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_TxEqMode_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_TxEqMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_TxEqMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_TxEqMode_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B0_P2 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B0_P2 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL2_P2 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_EnRxAgressivePDR_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_EnRxAgressivePDR_SHIFT (0U)
/*! @} */

/*! @name TXODTDRVSTREN_B0_P2 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B0_P2 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U0_P2 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U0_P2 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U0_P2 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U0_P2 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U0_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U0_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U0_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U0_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U0_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U0_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U0_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U0_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name PPTDQSCNTINVTRNTG0_P2 - DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_PptDqsCntInvTrnTg0_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_PptDqsCntInvTrnTg0_p2_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_PptDqsCntInvTrnTg0_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_PptDqsCntInvTrnTg0_p2_SHIFT)) & DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_PptDqsCntInvTrnTg0_p2_MASK)
/*! @} */

/*! @name PPTDQSCNTINVTRNTG1_P2 - DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_PptDqsCntInvTrnTg1_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_PptDqsCntInvTrnTg1_p2_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_PptDqsCntInvTrnTg1_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_PptDqsCntInvTrnTg1_p2_SHIFT)) & DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_PptDqsCntInvTrnTg1_p2_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R0_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R0_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R0_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R0_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U0_P2 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U0_P2 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U0_P2 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U0_P2 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B1_P2 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B1_P2 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_GainCurrAdj_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B1_P2 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B1_P2 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name TXODTDRVSTREN_B1_P2 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B1_P2 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U1_P2 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U1_P2 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U1_P2 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U1_P2 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U1_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U1_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U1_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U1_P2 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U1_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U1_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U1_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U1_P2 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R1_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R1_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R1_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R1_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U1_P2 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U1_P2 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U1_P2 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U1_P2 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R2_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R2_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R2_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R2_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R3_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R3_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R3_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R3_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R4_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R4_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R4_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R4_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R5_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R5_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R5_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R5_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R6_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R6_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R6_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R6_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R7_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R7_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R7_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R7_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R8_P2 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R8_P2 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R8_P2 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R8_P2 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name DFIMRL_P3 - DFI MaxReadLatency */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DFIMRL_P3_DFIMRL_p3_MASK (0x1FU)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P3_DFIMRL_p3_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DFIMRL_P3_DFIMRL_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DFIMRL_P3_DFIMRL_p3_SHIFT)) & DWC_DDRPHYA_DBYTE_DFIMRL_P3_DFIMRL_p3_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B0_P3 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B0_P3 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_GainCurrAdj_MASK)
/*! @} */

/*! @name TXEQUALIZATIONMODE_P3 - Tx dq driver equalization mode controls. */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_TxEqMode_MASK (0x3U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_TxEqMode_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_TxEqMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_TxEqMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_TxEqMode_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B0_P3 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B0_P3 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL2_P3 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_EnRxAgressivePDR_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_EnRxAgressivePDR_SHIFT (0U)
/*! @} */

/*! @name TXODTDRVSTREN_B0_P3 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B0_P3 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U0_P3 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U0_P3 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U0_P3 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U0_P3 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U0_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U0_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U0_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U0_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U0_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U0_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U0_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U0_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name PPTDQSCNTINVTRNTG0_P3 - DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_PptDqsCntInvTrnTg0_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_PptDqsCntInvTrnTg0_p3_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_PptDqsCntInvTrnTg0_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_PptDqsCntInvTrnTg0_p3_SHIFT)) & DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_PptDqsCntInvTrnTg0_p3_MASK)
/*! @} */

/*! @name PPTDQSCNTINVTRNTG1_P3 - DQS Oscillator Count inverse at time of training in LPDDR4 drift compensation */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_PptDqsCntInvTrnTg1_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_PptDqsCntInvTrnTg1_p3_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_PptDqsCntInvTrnTg1_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_PptDqsCntInvTrnTg1_p3_SHIFT)) & DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_PptDqsCntInvTrnTg1_p3_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R0_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R0_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R0_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R0_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U0_P3 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U0_P3 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U0_P3 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U0_P3 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL0_B1_P3 - Data TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_DrvStrenDqN_MASK)
/*! @} */

/*! @name DQDQSRCVCNTRL_B1_P3 - Dq/Dqs receiver control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_SelAnalogVref_MASK (0x1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_SelAnalogVref_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_ExtVrefRange_MASK (0x2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_ExtVrefRange_SHIFT (1U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_DfeCtrl_MASK (0xCU)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_DfeCtrl_SHIFT (2U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_DfeCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_DfeCtrl_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_DfeCtrl_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_MajorModeDbyte_MASK (0x70U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_MajorModeDbyte_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_MajorModeDbyte(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_MajorModeDbyte_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_MajorModeDbyte_MASK)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_GainCurrAdj_MASK (0xF80U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_GainCurrAdj_SHIFT (7U)
#define DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_GainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_GainCurrAdj_SHIFT)) & DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_GainCurrAdj_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL1_B1_P3 - TX impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_DrvStrenFSDqN_MASK)
/*! @} */

/*! @name TXIMPEDANCECTRL2_B1_P3 - TX equalization impedance controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQHiDqP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQHiDqP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQHiDqP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQHiDqP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQHiDqP_MASK)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQLoDqN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQLoDqN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQLoDqN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQLoDqN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_DrvStrenEQLoDqN_MASK)
/*! @} */

/*! @name TXODTDRVSTREN_B1_P3 - TX ODT driver strength control */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenP_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenP_MASK)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenN_MASK (0xFC0U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenN_SHIFT (6U)
#define DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_ODTStrenN_MASK)
/*! @} */

/*! @name TXSLEWRATE_B1_P3 - TX slew rate controls */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreP_MASK (0xFU)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreP_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreP_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreP_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreN_MASK (0xF0U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreN_SHIFT (4U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreN_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreN_MASK)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreDrvMode_MASK (0x700U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreDrvMode_SHIFT (8U)
#define DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreDrvMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreDrvMode_SHIFT)) & DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_TxPreDrvMode_MASK)
/*! @} */

/*! @name RXENDLYTG0_U1_P3 - Trained Receive Enable Delay (For Timing Group 0) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_RxEnDlyTg0_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_RxEnDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_RxEnDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_RxEnDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_RxEnDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG1_U1_P3 - Trained Receive Enable Delay (For Timing Group 1) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_RxEnDlyTg1_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_RxEnDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_RxEnDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_RxEnDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_RxEnDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG2_U1_P3 - Trained Receive Enable Delay (For Timing Group 2) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_RxEnDlyTg2_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_RxEnDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_RxEnDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_RxEnDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_RxEnDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXENDLYTG3_U1_P3 - Trained Receive Enable Delay (For Timing Group 3) */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_RxEnDlyTg3_un_px_MASK (0x7FFU)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_RxEnDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_RxEnDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_RxEnDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_RxEnDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG0_U1_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_RxClkDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_RxClkDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_RxClkDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_RxClkDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_RxClkDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG1_U1_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_RxClkDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_RxClkDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_RxClkDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_RxClkDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_RxClkDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG2_U1_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_RxClkDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_RxClkDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_RxClkDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_RxClkDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_RxClkDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKDLYTG3_U1_P3 - Trained Read DQS to RxClk Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_RxClkDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_RxClkDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_RxClkDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_RxClkDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_RxClkDlyTg3_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG0_U1_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_RxClkcDlyTg0_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_RxClkcDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_RxClkcDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_RxClkcDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_RxClkcDlyTg0_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG1_U1_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_RxClkcDlyTg1_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_RxClkcDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_RxClkcDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_RxClkcDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_RxClkcDlyTg1_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG2_U1_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_RxClkcDlyTg2_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_RxClkcDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_RxClkcDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_RxClkcDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_RxClkcDlyTg2_un_px_MASK)
/*! @} */

/*! @name RXCLKCDLYTG3_U1_P3 - Trained Read DQS_c to RxClkc Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_RxClkcDlyTg3_un_px_MASK (0x3FU)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_RxClkcDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_RxClkcDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_RxClkcDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_RxClkcDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R1_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R1_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R1_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R1_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG0_U1_P3 - Write DQS Delay (Timing Group DEST=0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_TxDqsDlyTg0_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_TxDqsDlyTg0_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_TxDqsDlyTg0_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_TxDqsDlyTg0_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_TxDqsDlyTg0_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG1_U1_P3 - Write DQS Delay (Timing Group DEST=1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_TxDqsDlyTg1_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_TxDqsDlyTg1_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_TxDqsDlyTg1_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_TxDqsDlyTg1_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_TxDqsDlyTg1_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG2_U1_P3 - Write DQS Delay (Timing Group DEST=2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_TxDqsDlyTg2_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_TxDqsDlyTg2_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_TxDqsDlyTg2_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_TxDqsDlyTg2_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_TxDqsDlyTg2_un_px_MASK)
/*! @} */

/*! @name TXDQSDLYTG3_U1_P3 - Write DQS Delay (Timing Group DEST=3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_TxDqsDlyTg3_un_px_MASK (0x3FFU)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_TxDqsDlyTg3_un_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_TxDqsDlyTg3_un_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_TxDqsDlyTg3_un_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_TxDqsDlyTg3_un_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R2_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R2_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R2_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R2_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R3_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R3_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R3_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R3_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R4_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R4_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R4_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R4_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R5_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R5_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R5_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R5_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R6_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R6_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R6_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R6_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R7_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R7_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R7_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R7_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG0_R8_P3 - Write DQ Delay (Timing Group 0). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_TxDqDlyTg0_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_TxDqDlyTg0_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_TxDqDlyTg0_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_TxDqDlyTg0_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_TxDqDlyTg0_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG1_R8_P3 - Write DQ Delay (Timing Group 1). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_TxDqDlyTg1_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_TxDqDlyTg1_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_TxDqDlyTg1_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_TxDqDlyTg1_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_TxDqDlyTg1_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG2_R8_P3 - Write DQ Delay (Timing Group 2). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_TxDqDlyTg2_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_TxDqDlyTg2_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_TxDqDlyTg2_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_TxDqDlyTg2_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_TxDqDlyTg2_rn_px_MASK)
/*! @} */

/*! @name TXDQDLYTG3_R8_P3 - Write DQ Delay (Timing Group 3). */
/*! @{ */
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_TxDqDlyTg3_rn_px_MASK (0x1FFU)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_TxDqDlyTg3_rn_px_SHIFT (0U)
#define DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_TxDqDlyTg3_rn_px(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_TxDqDlyTg3_rn_px_SHIFT)) & DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_TxDqDlyTg3_rn_px_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DBYTE_Register_Masks */


/* DWC_DDRPHYA_DBYTE - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_DBYTE0 base pointer */
#define DWC_DDRPHYA_DBYTE0_BASE_PTR              ((DWC_DDRPHYA_DBYTE_MemMapPtr)0x3C010000u)
/** Peripheral DWC_DDRPHYA_DBYTE1 base pointer */
#define DWC_DDRPHYA_DBYTE1_BASE_PTR              ((DWC_DDRPHYA_DBYTE_MemMapPtr)0x3C011000u)
/** Peripheral DWC_DDRPHYA_DBYTE2 base pointer */
#define DWC_DDRPHYA_DBYTE2_BASE_PTR              ((DWC_DDRPHYA_DBYTE_MemMapPtr)0x3C012000u)
/** Peripheral DWC_DDRPHYA_DBYTE3 base pointer */
#define DWC_DDRPHYA_DBYTE3_BASE_PTR              ((DWC_DDRPHYA_DBYTE_MemMapPtr)0x3C013000u)
/** Array initializer of DWC_DDRPHYA_DBYTE peripheral base pointers */
#define DWC_DDRPHYA_DBYTE_BASE_PTRS              { DWC_DDRPHYA_DBYTE0_BASE_PTR, DWC_DDRPHYA_DBYTE1_BASE_PTR, DWC_DDRPHYA_DBYTE2_BASE_PTR, DWC_DDRPHYA_DBYTE3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DBYTE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DBYTE_Register_Accessor_Macros DWC_DDRPHYA_DBYTE - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_DBYTE - Register instance definitions */
/* DWC_DDRPHYA_DBYTE0 */
#define DWC_DDRPHYA_DBYTE0_DBYTEMISCMODE         DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_MTESTMUXSEL           DWC_DDRPHYA_DBYTE_MTESTMUXSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DFIMRL_P0             DWC_DDRPHYA_DBYTE_DFIMRL_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R0           DWC_DDRPHYA_DBYTE_VREFDAC1_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R0           DWC_DDRPHYA_DBYTE_VREFDAC0_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B0_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXEQUALIZATIONMODE_P0 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL1        DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL2_P0     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B0_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOCHECKSTATUS     DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOCHECKERRVALUES  DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOINFO            DWC_DDRPHYA_DBYTE_RXFIFOINFO_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOVISIBILITY      DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOCONTENTSDQ3210  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOCONTENTSDQ7654  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXFIFOCONTENTSDBI     DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B0_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQ0LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,0)
#define DWC_DDRPHYA_DBYTE0_DQ1LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,1)
#define DWC_DDRPHYA_DBYTE0_DQ2LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,2)
#define DWC_DDRPHYA_DBYTE0_DQ3LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,3)
#define DWC_DDRPHYA_DBYTE0_DQ4LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,4)
#define DWC_DDRPHYA_DBYTE0_DQ5LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,5)
#define DWC_DDRPHYA_DBYTE0_DQ6LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,6)
#define DWC_DDRPHYA_DBYTE0_DQ7LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,7)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DXLCDLSTATUS          DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R1           DWC_DDRPHYA_DBYTE_VREFDAC1_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R1           DWC_DDRPHYA_DBYTE_VREFDAC0_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B1_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B1_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B1_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R2           DWC_DDRPHYA_DBYTE_VREFDAC1_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R2           DWC_DDRPHYA_DBYTE_VREFDAC0_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R3           DWC_DDRPHYA_DBYTE_VREFDAC1_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R3           DWC_DDRPHYA_DBYTE_VREFDAC0_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R4           DWC_DDRPHYA_DBYTE_VREFDAC1_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R4           DWC_DDRPHYA_DBYTE_VREFDAC0_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R5           DWC_DDRPHYA_DBYTE_VREFDAC1_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R5           DWC_DDRPHYA_DBYTE_VREFDAC0_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R6           DWC_DDRPHYA_DBYTE_VREFDAC1_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R6           DWC_DDRPHYA_DBYTE_VREFDAC0_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R7           DWC_DDRPHYA_DBYTE_VREFDAC1_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R7           DWC_DDRPHYA_DBYTE_VREFDAC0_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC1_R8           DWC_DDRPHYA_DBYTE_VREFDAC1_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_VREFDAC0_R8           DWC_DDRPHYA_DBYTE_VREFDAC0_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG0_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG1_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG2_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXPBDLYTG3_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DFIMRL_P1             DWC_DDRPHYA_DBYTE_DFIMRL_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B0_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXEQUALIZATIONMODE_P1 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL2_P1     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B0_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B0_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B1_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B1_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B1_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DFIMRL_P2             DWC_DDRPHYA_DBYTE_DFIMRL_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B0_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXEQUALIZATIONMODE_P2 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL2_P2     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B0_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B0_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_PPTDQSCNTINVTRNTG0_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_PPTDQSCNTINVTRNTG1_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B1_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B1_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B1_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DFIMRL_P3             DWC_DDRPHYA_DBYTE_DFIMRL_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B0_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXEQUALIZATIONMODE_P3 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL2_P3     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B0_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B0_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_PPTDQSCNTINVTRNTG0_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_PPTDQSCNTINVTRNTG1_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL0_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_DQDQSRCVCNTRL_B1_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL1_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXIMPEDANCECTRL2_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXODTDRVSTREN_B1_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXSLEWRATE_B1_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG0_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG1_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG2_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXENDLYTG3_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG0_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG1_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG2_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_RXCLKCDLYTG3_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQSDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG0_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG1_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG2_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
#define DWC_DDRPHYA_DBYTE0_TXDQDLYTG3_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR)
/* DWC_DDRPHYA_DBYTE1 */
#define DWC_DDRPHYA_DBYTE1_DBYTEMISCMODE         DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_MTESTMUXSEL           DWC_DDRPHYA_DBYTE_MTESTMUXSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DFIMRL_P0             DWC_DDRPHYA_DBYTE_DFIMRL_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R0           DWC_DDRPHYA_DBYTE_VREFDAC1_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R0           DWC_DDRPHYA_DBYTE_VREFDAC0_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B0_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXEQUALIZATIONMODE_P0 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL1        DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL2_P0     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B0_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOCHECKSTATUS     DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOCHECKERRVALUES  DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOINFO            DWC_DDRPHYA_DBYTE_RXFIFOINFO_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOVISIBILITY      DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOCONTENTSDQ3210  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOCONTENTSDQ7654  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXFIFOCONTENTSDBI     DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B0_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQ0LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,0)
#define DWC_DDRPHYA_DBYTE1_DQ1LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,1)
#define DWC_DDRPHYA_DBYTE1_DQ2LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,2)
#define DWC_DDRPHYA_DBYTE1_DQ3LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,3)
#define DWC_DDRPHYA_DBYTE1_DQ4LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,4)
#define DWC_DDRPHYA_DBYTE1_DQ5LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,5)
#define DWC_DDRPHYA_DBYTE1_DQ6LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,6)
#define DWC_DDRPHYA_DBYTE1_DQ7LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,7)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DXLCDLSTATUS          DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R1           DWC_DDRPHYA_DBYTE_VREFDAC1_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R1           DWC_DDRPHYA_DBYTE_VREFDAC0_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B1_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B1_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B1_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R2           DWC_DDRPHYA_DBYTE_VREFDAC1_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R2           DWC_DDRPHYA_DBYTE_VREFDAC0_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R3           DWC_DDRPHYA_DBYTE_VREFDAC1_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R3           DWC_DDRPHYA_DBYTE_VREFDAC0_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R4           DWC_DDRPHYA_DBYTE_VREFDAC1_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R4           DWC_DDRPHYA_DBYTE_VREFDAC0_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R5           DWC_DDRPHYA_DBYTE_VREFDAC1_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R5           DWC_DDRPHYA_DBYTE_VREFDAC0_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R6           DWC_DDRPHYA_DBYTE_VREFDAC1_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R6           DWC_DDRPHYA_DBYTE_VREFDAC0_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R7           DWC_DDRPHYA_DBYTE_VREFDAC1_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R7           DWC_DDRPHYA_DBYTE_VREFDAC0_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC1_R8           DWC_DDRPHYA_DBYTE_VREFDAC1_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_VREFDAC0_R8           DWC_DDRPHYA_DBYTE_VREFDAC0_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG0_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG1_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG2_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXPBDLYTG3_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DFIMRL_P1             DWC_DDRPHYA_DBYTE_DFIMRL_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B0_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXEQUALIZATIONMODE_P1 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL2_P1     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B0_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B0_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B1_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B1_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B1_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DFIMRL_P2             DWC_DDRPHYA_DBYTE_DFIMRL_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B0_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXEQUALIZATIONMODE_P2 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL2_P2     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B0_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B0_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_PPTDQSCNTINVTRNTG0_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_PPTDQSCNTINVTRNTG1_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B1_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B1_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B1_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DFIMRL_P3             DWC_DDRPHYA_DBYTE_DFIMRL_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B0_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXEQUALIZATIONMODE_P3 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL2_P3     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B0_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B0_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_PPTDQSCNTINVTRNTG0_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_PPTDQSCNTINVTRNTG1_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL0_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_DQDQSRCVCNTRL_B1_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL1_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXIMPEDANCECTRL2_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXODTDRVSTREN_B1_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXSLEWRATE_B1_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG0_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG1_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG2_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXENDLYTG3_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG0_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG1_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG2_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_RXCLKCDLYTG3_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQSDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG0_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG1_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG2_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
#define DWC_DDRPHYA_DBYTE1_TXDQDLYTG3_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR)
/* DWC_DDRPHYA_DBYTE2 */
#define DWC_DDRPHYA_DBYTE2_DBYTEMISCMODE         DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_MTESTMUXSEL           DWC_DDRPHYA_DBYTE_MTESTMUXSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DFIMRL_P0             DWC_DDRPHYA_DBYTE_DFIMRL_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R0           DWC_DDRPHYA_DBYTE_VREFDAC1_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R0           DWC_DDRPHYA_DBYTE_VREFDAC0_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B0_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXEQUALIZATIONMODE_P0 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL1        DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL2_P0     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B0_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOCHECKSTATUS     DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOCHECKERRVALUES  DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOINFO            DWC_DDRPHYA_DBYTE_RXFIFOINFO_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOVISIBILITY      DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOCONTENTSDQ3210  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOCONTENTSDQ7654  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXFIFOCONTENTSDBI     DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B0_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQ0LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,0)
#define DWC_DDRPHYA_DBYTE2_DQ1LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,1)
#define DWC_DDRPHYA_DBYTE2_DQ2LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,2)
#define DWC_DDRPHYA_DBYTE2_DQ3LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,3)
#define DWC_DDRPHYA_DBYTE2_DQ4LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,4)
#define DWC_DDRPHYA_DBYTE2_DQ5LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,5)
#define DWC_DDRPHYA_DBYTE2_DQ6LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,6)
#define DWC_DDRPHYA_DBYTE2_DQ7LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,7)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DXLCDLSTATUS          DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R1           DWC_DDRPHYA_DBYTE_VREFDAC1_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R1           DWC_DDRPHYA_DBYTE_VREFDAC0_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B1_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B1_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B1_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R2           DWC_DDRPHYA_DBYTE_VREFDAC1_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R2           DWC_DDRPHYA_DBYTE_VREFDAC0_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R3           DWC_DDRPHYA_DBYTE_VREFDAC1_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R3           DWC_DDRPHYA_DBYTE_VREFDAC0_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R4           DWC_DDRPHYA_DBYTE_VREFDAC1_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R4           DWC_DDRPHYA_DBYTE_VREFDAC0_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R5           DWC_DDRPHYA_DBYTE_VREFDAC1_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R5           DWC_DDRPHYA_DBYTE_VREFDAC0_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R6           DWC_DDRPHYA_DBYTE_VREFDAC1_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R6           DWC_DDRPHYA_DBYTE_VREFDAC0_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R7           DWC_DDRPHYA_DBYTE_VREFDAC1_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R7           DWC_DDRPHYA_DBYTE_VREFDAC0_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC1_R8           DWC_DDRPHYA_DBYTE_VREFDAC1_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_VREFDAC0_R8           DWC_DDRPHYA_DBYTE_VREFDAC0_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG0_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG1_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG2_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXPBDLYTG3_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DFIMRL_P1             DWC_DDRPHYA_DBYTE_DFIMRL_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B0_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXEQUALIZATIONMODE_P1 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL2_P1     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B0_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B0_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B1_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B1_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B1_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DFIMRL_P2             DWC_DDRPHYA_DBYTE_DFIMRL_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B0_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXEQUALIZATIONMODE_P2 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL2_P2     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B0_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B0_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_PPTDQSCNTINVTRNTG0_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_PPTDQSCNTINVTRNTG1_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B1_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B1_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B1_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DFIMRL_P3             DWC_DDRPHYA_DBYTE_DFIMRL_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B0_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXEQUALIZATIONMODE_P3 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL2_P3     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B0_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B0_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_PPTDQSCNTINVTRNTG0_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_PPTDQSCNTINVTRNTG1_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL0_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_DQDQSRCVCNTRL_B1_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL1_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXIMPEDANCECTRL2_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXODTDRVSTREN_B1_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXSLEWRATE_B1_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG0_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG1_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG2_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXENDLYTG3_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG0_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG1_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG2_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_RXCLKCDLYTG3_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQSDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG0_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG1_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG2_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
#define DWC_DDRPHYA_DBYTE2_TXDQDLYTG3_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR)
/* DWC_DDRPHYA_DBYTE3 */
#define DWC_DDRPHYA_DBYTE3_DBYTEMISCMODE         DWC_DDRPHYA_DBYTE_DBYTEMISCMODE_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_MTESTMUXSEL           DWC_DDRPHYA_DBYTE_MTESTMUXSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DFIMRL_P0             DWC_DDRPHYA_DBYTE_DFIMRL_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R0           DWC_DDRPHYA_DBYTE_VREFDAC1_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R0           DWC_DDRPHYA_DBYTE_VREFDAC0_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B0_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXEQUALIZATIONMODE_P0 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL1        DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B0_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL2_P0     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B0_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOCHECKSTATUS     DWC_DDRPHYA_DBYTE_RXFIFOCHECKSTATUS_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOCHECKERRVALUES  DWC_DDRPHYA_DBYTE_RXFIFOCHECKERRVALUES_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOINFO            DWC_DDRPHYA_DBYTE_RXFIFOINFO_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOVISIBILITY      DWC_DDRPHYA_DBYTE_RXFIFOVISIBILITY_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOCONTENTSDQ3210  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ3210_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOCONTENTSDQ7654  DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDQ7654_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXFIFOCONTENTSDBI     DWC_DDRPHYA_DBYTE_RXFIFOCONTENTSDBI_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B0_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R0         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U0_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U0_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQ0LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,0)
#define DWC_DDRPHYA_DBYTE3_DQ1LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,1)
#define DWC_DDRPHYA_DBYTE3_DQ2LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,2)
#define DWC_DDRPHYA_DBYTE3_DQ3LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,3)
#define DWC_DDRPHYA_DBYTE3_DQ4LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,4)
#define DWC_DDRPHYA_DBYTE3_DQ5LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,5)
#define DWC_DDRPHYA_DBYTE3_DQ6LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,6)
#define DWC_DDRPHYA_DBYTE3_DQ7LNSEL              DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,7)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R0_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U0_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DXLCDLSTATUS          DWC_DDRPHYA_DBYTE_DXLCDLSTATUS_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R1           DWC_DDRPHYA_DBYTE_VREFDAC1_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R1           DWC_DDRPHYA_DBYTE_VREFDAC0_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B1_P0   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B1_P0 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B1_P0   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B1_P0      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R1         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U1_P0      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U1_P0    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R1_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U1_P0     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R2           DWC_DDRPHYA_DBYTE_VREFDAC1_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R2           DWC_DDRPHYA_DBYTE_VREFDAC0_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R2         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R2_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R3           DWC_DDRPHYA_DBYTE_VREFDAC1_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R3           DWC_DDRPHYA_DBYTE_VREFDAC0_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R3         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R3_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R4           DWC_DDRPHYA_DBYTE_VREFDAC1_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R4           DWC_DDRPHYA_DBYTE_VREFDAC0_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R4         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R4_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R4_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R5           DWC_DDRPHYA_DBYTE_VREFDAC1_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R5           DWC_DDRPHYA_DBYTE_VREFDAC0_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R5         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R5_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R5_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R6           DWC_DDRPHYA_DBYTE_VREFDAC1_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R6           DWC_DDRPHYA_DBYTE_VREFDAC0_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R6         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R6_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R6_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R7           DWC_DDRPHYA_DBYTE_VREFDAC1_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R7           DWC_DDRPHYA_DBYTE_VREFDAC0_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R7         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R7_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R7_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC1_R8           DWC_DDRPHYA_DBYTE_VREFDAC1_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_VREFDAC0_R8           DWC_DDRPHYA_DBYTE_VREFDAC0_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG0_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG0_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG1_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG1_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG2_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG2_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXPBDLYTG3_R8         DWC_DDRPHYA_DBYTE_RXPBDLYTG3_R8_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R8_P0      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P0_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DFIMRL_P1             DWC_DDRPHYA_DBYTE_DFIMRL_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B0_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXEQUALIZATIONMODE_P1 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B0_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL2_P1     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B0_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B0_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U0_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U0_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R0_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U0_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B1_P1   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B1_P1 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B1_P1   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B1_P1      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U1_P1      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U1_P1    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R1_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U1_P1     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R2_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R3_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R4_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R5_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R6_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R7_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R8_P1      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P1_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DFIMRL_P2             DWC_DDRPHYA_DBYTE_DFIMRL_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B0_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXEQUALIZATIONMODE_P2 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B0_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL2_P2     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B0_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B0_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U0_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U0_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_PPTDQSCNTINVTRNTG0_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_PPTDQSCNTINVTRNTG1_P2 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R0_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U0_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B1_P2   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B1_P2 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B1_P2   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B1_P2      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U1_P2      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U1_P2    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R1_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U1_P2     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R2_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R3_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R4_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R5_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R6_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R7_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R8_P2      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P2_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DFIMRL_P3             DWC_DDRPHYA_DBYTE_DFIMRL_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B0_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXEQUALIZATIONMODE_P3 DWC_DDRPHYA_DBYTE_TXEQUALIZATIONMODE_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B0_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL2_P3     DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL2_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B0_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B0_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U0_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U0_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_PPTDQSCNTINVTRNTG0_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_PPTDQSCNTINVTRNTG1_P3 DWC_DDRPHYA_DBYTE_PPTDQSCNTINVTRNTG1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R0_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U0_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U0_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL0_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL0_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_DQDQSRCVCNTRL_B1_P3   DWC_DDRPHYA_DBYTE_DQDQSRCVCNTRL_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL1_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL1_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXIMPEDANCECTRL2_B1_P3 DWC_DDRPHYA_DBYTE_TXIMPEDANCECTRL2_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXODTDRVSTREN_B1_P3   DWC_DDRPHYA_DBYTE_TXODTDRVSTREN_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXSLEWRATE_B1_P3      DWC_DDRPHYA_DBYTE_TXSLEWRATE_B1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG0_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG1_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG2_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXENDLYTG3_U1_P3      DWC_DDRPHYA_DBYTE_RXENDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_RXCLKDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG0_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG1_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG2_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_RXCLKCDLYTG3_U1_P3    DWC_DDRPHYA_DBYTE_RXCLKCDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R1_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG0_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG0_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG1_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG1_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG2_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG2_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQSDLYTG3_U1_P3     DWC_DDRPHYA_DBYTE_TXDQSDLYTG3_U1_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R2_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R2_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R2_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R2_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R2_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R3_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R3_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R3_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R3_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R3_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R4_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R4_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R4_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R4_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R4_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R5_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R5_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R5_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R5_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R5_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R6_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R6_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R6_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R6_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R6_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R7_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R7_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R7_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R7_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R7_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG0_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG0_R8_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG1_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG1_R8_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG2_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG2_R8_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)
#define DWC_DDRPHYA_DBYTE3_TXDQDLYTG3_R8_P3      DWC_DDRPHYA_DBYTE_TXDQDLYTG3_R8_P3_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR)

/* DWC_DDRPHYA_DBYTE - Register array accessors */
#define DWC_DDRPHYA_DBYTE0_DQLNSEL(index)        DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE0_BASE_PTR,index)
#define DWC_DDRPHYA_DBYTE1_DQLNSEL(index)        DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE1_BASE_PTR,index)
#define DWC_DDRPHYA_DBYTE2_DQLNSEL(index)        DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE2_BASE_PTR,index)
#define DWC_DDRPHYA_DBYTE3_DQLNSEL(index)        DWC_DDRPHYA_DBYTE_DQLNSEL_REG(DWC_DDRPHYA_DBYTE3_BASE_PTR,index)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DBYTE_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DBYTE_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DRTUB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DRTUB_Peripheral DWC_DDRPHYA_DRTUB
 * @{
 */

/** DWC_DDRPHYA_DRTUB - Peripheral register structure */
typedef struct DWC_DDRPHYA_DRTUB_MemMap {
  uint8_t RESERVED_0[256];
  uint16_t UCCLKHCLKENABLES;                       /**< Ucclk and Hclk enables, offset: 0x100 */
  uint16_t CURPSTATE0B;                            /**< PIE current Pstate value, offset: 0x102 */
  uint8_t RESERVED_1[214];
  uint16_t CUSTPUBREV;                             /**< Customer settable by the customer, offset: 0x1DA */
  uint16_t PUBREV;                                 /**< The hardware version of this PUB, excluding the PHY, offset: 0x1DC */
} volatile *DWC_DDRPHYA_DRTUB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DRTUB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DRTUB_Register_Accessor_Macros DWC_DDRPHYA_DRTUB - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_DRTUB - Register accessors */
#define DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_REG(base) ((base)->UCCLKHCLKENABLES)
#define DWC_DDRPHYA_DRTUB_CURPSTATE0B_REG(base)  ((base)->CURPSTATE0B)
#define DWC_DDRPHYA_DRTUB_CUSTPUBREV_REG(base)   ((base)->CUSTPUBREV)
#define DWC_DDRPHYA_DRTUB_PUBREV_REG(base)       ((base)->PUBREV)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DRTUB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DRTUB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DRTUB_Register_Masks DWC_DDRPHYA_DRTUB Register Masks
 * @{
 */

/*! @name UCCLKHCLKENABLES - Ucclk and Hclk enables */
/*! @{ */
#define DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_UcclkEn_MASK (0x1U)
#define DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_UcclkEn_SHIFT (0U)
#define DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_HclkEn_MASK (0x2U)
#define DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_HclkEn_SHIFT (1U)
/*! @} */

/*! @name CURPSTATE0B - PIE current Pstate value */
/*! @{ */
#define DWC_DDRPHYA_DRTUB_CURPSTATE0B_CurPstate0b_MASK (0xFU)
#define DWC_DDRPHYA_DRTUB_CURPSTATE0B_CurPstate0b_SHIFT (0U)
#define DWC_DDRPHYA_DRTUB_CURPSTATE0B_CurPstate0b(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DRTUB_CURPSTATE0B_CurPstate0b_SHIFT)) & DWC_DDRPHYA_DRTUB_CURPSTATE0B_CurPstate0b_MASK)
/*! @} */

/*! @name CUSTPUBREV - Customer settable by the customer */
/*! @{ */
#define DWC_DDRPHYA_DRTUB_CUSTPUBREV_CUSTPUBREV_MASK (0x3FU)
#define DWC_DDRPHYA_DRTUB_CUSTPUBREV_CUSTPUBREV_SHIFT (0U)
#define DWC_DDRPHYA_DRTUB_CUSTPUBREV_CUSTPUBREV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DRTUB_CUSTPUBREV_CUSTPUBREV_SHIFT)) & DWC_DDRPHYA_DRTUB_CUSTPUBREV_CUSTPUBREV_MASK)
/*! @} */

/*! @name PUBREV - The hardware version of this PUB, excluding the PHY */
/*! @{ */
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMNR_MASK     (0xFU)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMNR_SHIFT    (0U)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMNR(x)       (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DRTUB_PUBREV_PUBMNR_SHIFT)) & DWC_DDRPHYA_DRTUB_PUBREV_PUBMNR_MASK)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMDR_MASK     (0xF0U)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMDR_SHIFT    (4U)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMDR(x)       (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DRTUB_PUBREV_PUBMDR_SHIFT)) & DWC_DDRPHYA_DRTUB_PUBREV_PUBMDR_MASK)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMJR_MASK     (0xFF00U)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMJR_SHIFT    (8U)
#define DWC_DDRPHYA_DRTUB_PUBREV_PUBMJR(x)       (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_DRTUB_PUBREV_PUBMJR_SHIFT)) & DWC_DDRPHYA_DRTUB_PUBREV_PUBMJR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DRTUB_Register_Masks */


/* DWC_DDRPHYA_DRTUB - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_DRTUB0 base pointer */
#define DWC_DDRPHYA_DRTUB0_BASE_PTR              ((DWC_DDRPHYA_DRTUB_MemMapPtr)0x3C0C0000u)
/** Array initializer of DWC_DDRPHYA_DRTUB peripheral base pointers */
#define DWC_DDRPHYA_DRTUB_BASE_PTRS              { DWC_DDRPHYA_DRTUB0_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_DRTUB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_DRTUB_Register_Accessor_Macros DWC_DDRPHYA_DRTUB - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_DRTUB - Register instance definitions */
/* DWC_DDRPHYA_DRTUB0 */
#define DWC_DDRPHYA_DRTUB0_UCCLKHCLKENABLES      DWC_DDRPHYA_DRTUB_UCCLKHCLKENABLES_REG(DWC_DDRPHYA_DRTUB0_BASE_PTR)
#define DWC_DDRPHYA_DRTUB0_CURPSTATE0B           DWC_DDRPHYA_DRTUB_CURPSTATE0B_REG(DWC_DDRPHYA_DRTUB0_BASE_PTR)
#define DWC_DDRPHYA_DRTUB0_CUSTPUBREV            DWC_DDRPHYA_DRTUB_CUSTPUBREV_REG(DWC_DDRPHYA_DRTUB0_BASE_PTR)
#define DWC_DDRPHYA_DRTUB0_PUBREV                DWC_DDRPHYA_DRTUB_PUBREV_REG(DWC_DDRPHYA_DRTUB0_BASE_PTR)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DRTUB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_DRTUB_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_INITENG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_INITENG_Peripheral DWC_DDRPHYA_INITENG
 * @{
 */

/** DWC_DDRPHYA_INITENG - Peripheral register structure */
typedef struct DWC_DDRPHYA_INITENG_MemMap {
  uint8_t RESERVED_0[80];
  uint16_t PHYINLP3;                               /**< Indicator for PIE Lower Power 3 (LP3) Status, offset: 0x50 */
} volatile *DWC_DDRPHYA_INITENG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_INITENG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_INITENG_Register_Accessor_Macros DWC_DDRPHYA_INITENG - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_INITENG - Register accessors */
#define DWC_DDRPHYA_INITENG_PHYINLP3_REG(base)   ((base)->PHYINLP3)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_INITENG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_INITENG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_INITENG_Register_Masks DWC_DDRPHYA_INITENG Register Masks
 * @{
 */

/*! @name PHYINLP3 - Indicator for PIE Lower Power 3 (LP3) Status */
/*! @{ */
#define DWC_DDRPHYA_INITENG_PHYINLP3_PhyInLP3_MASK (0x1U)
#define DWC_DDRPHYA_INITENG_PHYINLP3_PhyInLP3_SHIFT (0U)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_INITENG_Register_Masks */


/* DWC_DDRPHYA_INITENG - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_INITENG0 base pointer */
#define DWC_DDRPHYA_INITENG0_BASE_PTR            ((DWC_DDRPHYA_INITENG_MemMapPtr)0x3C090000u)
/** Array initializer of DWC_DDRPHYA_INITENG peripheral base pointers */
#define DWC_DDRPHYA_INITENG_BASE_PTRS            { DWC_DDRPHYA_INITENG0_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_INITENG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_INITENG_Register_Accessor_Macros DWC_DDRPHYA_INITENG - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_INITENG - Register instance definitions */
/* DWC_DDRPHYA_INITENG0 */
#define DWC_DDRPHYA_INITENG0_PHYINLP3            DWC_DDRPHYA_INITENG_PHYINLP3_REG(DWC_DDRPHYA_INITENG0_BASE_PTR)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_INITENG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_INITENG_Peripheral */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_MASTER
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_MASTER_Peripheral DWC_DDRPHYA_MASTER
 * @{
 */

/** DWC_DDRPHYA_MASTER - Peripheral register structure */
typedef struct DWC_DDRPHYA_MASTER_MemMap {
  uint16_t RXFIFOINIT;                             /**< Rx FIFO pointer initialization control, offset: 0x0 */
  uint16_t FORCECLKDISABLE;                        /**< Clock gating control, offset: 0x2 */
  uint8_t RESERVED_0[2];
  uint16_t FORCEINTERNALUPDATE;                    /**< This Register used by Training Firmware to force an internal PHY Update Event., offset: 0x6 */
  uint16_t PHYCONFIG;                              /**< Read Only displays PHY Configuration., offset: 0x8 */
  uint16_t PGCR;                                   /**< PHY General Configuration Register(PGCR)., offset: 0xA */
  uint8_t RESERVED_1[2];
  uint16_t TESTBUMPCNTRL1;                         /**< Test Bump Control1, offset: 0xE */
  uint16_t CALUCLKINFO_P0;                         /**< Impedance Calibration Clock Ratio, offset: 0x10 */
  uint8_t RESERVED_2[2];
  uint16_t TESTBUMPCNTRL;                          /**< Test Bump Control, offset: 0x14 */
  uint16_t SEQ0BDLY0_P0;                           /**< PHY Initialization Engine (PIE) Delay Register 0, offset: 0x16 */
  uint16_t SEQ0BDLY1_P0;                           /**< PHY Initialization Engine (PIE) Delay Register 1, offset: 0x18 */
  uint16_t SEQ0BDLY2_P0;                           /**< PHY Initialization Engine (PIE) Delay Register 2, offset: 0x1A */
  uint16_t SEQ0BDLY3_P0;                           /**< PHY Initialization Engine (PIE) Delay Register 3, offset: 0x1C */
  uint16_t PHYALERTSTATUS;                         /**< PHY Alert status bit, offset: 0x1E */
  uint16_t PPTTRAINSETUP_P0;                       /**< Setup Intervals for DFI PHY Master operations, offset: 0x20 */
  uint8_t RESERVED_3[2];
  uint16_t ATESTMODE;                              /**< ATestMode control, offset: 0x24 */
  uint8_t RESERVED_4[2];
  uint16_t TXCALBINP;                              /**< TX P Impedance Calibration observation, offset: 0x28 */
  uint16_t TXCALBINN;                              /**< TX N Impedance Calibration observation, offset: 0x2A */
  uint16_t TXCALPOVR;                              /**< TX P Impedance Calibration override, offset: 0x2C */
  uint16_t TXCALNOVR;                              /**< TX N Impedance Calibration override, offset: 0x2E */
  uint16_t DFIMODE;                                /**< Enables for update and low-power interfaces for DFI0 and DFI1, offset: 0x30 */
  uint16_t TRISTATEMODECA_P0;                      /**< Mode select register for MEMCLK/Address/Command Tristates, offset: 0x32 */
  uint16_t MTESTMUXSEL;                            /**< Digital Observation Pin control, offset: 0x34 */
  uint16_t MTESTPGMINFO;                           /**< Digital Observation Pin program info for debug, offset: 0x36 */
  uint16_t DYNPWRDNUP;                             /**< Dynaimc Power Up/Down control, offset: 0x38 */
  uint8_t RESERVED_5[2];
  uint16_t PHYTID;                                 /**< PHY Technology ID Register, offset: 0x3C */
  uint8_t RESERVED_6[2];
  uint16_t HWTMRL_P0;                              /**< HWT MaxReadLatency., offset: 0x40 */
  uint16_t DFIPHYUPD;                              /**< DFI PhyUpdate Request time counter (in MEMCLKs), offset: 0x42 */
  uint16_t PDAMRSWRITEMODE;                        /**< Controls the write DQ generation for Per-Dram-Addressing of MRS, offset: 0x44 */
  uint16_t DFIGEARDOWNCTL;                         /**< Controls whether dfi_geardown_en will cause CS and CKE timing to change., offset: 0x46 */
  uint16_t DQSPREAMBLECONTROL_P0;                  /**< Control the PHY logic related to the read and write DQS preamble, offset: 0x48 */
  uint16_t MASTERX4CONFIG;                         /**< DBYTE module controls to select X4 Dram device mode, offset: 0x4A */
  uint16_t WRLEVBITS;                              /**< Write level feedback DQ observability select., offset: 0x4C */
  uint16_t ENABLECSMULTICAST;                      /**< In DDR4 Mode , this controls whether CS_N[3:2] should be multicast on CID[1:0], offset: 0x4E */
  uint16_t HWTLPCSMULTICAST;                       /**< Drives cs_n[0] onto cs_n[1] during training, offset: 0x50 */
  uint8_t RESERVED_7[6];
  uint16_t ACX4ANIBDIS;                            /**< Disable for unused ACX Nibbles, offset: 0x58 */
  uint16_t DMIPINPRESENT_P0;                       /**< This Register is used to enable the Read-DBI function in each DBYTE, offset: 0x5A */
  uint16_t ARDPTRINITVAL_P0;                       /**< Address/Command FIFO ReadPointer Initial Value, offset: 0x5C */
  uint8_t RESERVED_8[22];
  uint16_t DBYTEDLLMODECNTRL;                      /**< DLL Mode control CSR for DBYTEs, offset: 0x74 */
  uint8_t RESERVED_9[20];
  uint16_t CALOFFSETS;                             /**< Impedance Calibration offsets control, offset: 0x8A */
  uint8_t RESERVED_10[2];
  uint16_t SARINITVALS;                            /**< Sar Init Vals, offset: 0x8E */
  uint8_t RESERVED_11[2];
  uint16_t CALPEXTOVR;                             /**< Impedance Calibration PExt Override control, offset: 0x92 */
  uint16_t CALCMPR5OVR;                            /**< Impedance Calibration Cmpr 50 control, offset: 0x94 */
  uint16_t CALNINTOVR;                             /**< Impedance Calibration NInt Override control, offset: 0x96 */
  uint8_t RESERVED_12[8];
  uint16_t CALDRVSTR0;                             /**< Impedance Calibration driver strength control, offset: 0xA0 */
  uint8_t RESERVED_13[10];
  uint16_t PROCODTTIMECTL_P0;                      /**< READ DATA On-Die Termination Timing Control (by PHY), offset: 0xAC */
  uint8_t RESERVED_14[8];
  uint16_t MEMALERTCONTROL;                        /**< This Register is used to configure the MemAlert Receiver, offset: 0xB6 */
  uint16_t MEMALERTCONTROL2;                       /**< This Register is used to configure the MemAlert Receiver, offset: 0xB8 */
  uint8_t RESERVED_15[6];
  uint16_t MEMRESETL;                              /**< Protection and control of BP_MemReset_L, offset: 0xC0 */
  uint8_t RESERVED_16[24];
  uint16_t DRIVECSLOWONTOHIGH;                     /**< Drive CS_N 3:0 onto CS_N 7:4, offset: 0xDA */
  uint16_t PUBMODE;                                /**< PUBMODE - HWT Mux Select, offset: 0xDC */
  uint16_t MISCPHYSTATUS;                          /**< Misc PHY status bits, offset: 0xDE */
  uint16_t CORELOOPBACKSEL;                        /**< Controls whether the loopback path bypasses the final PAD node., offset: 0xE0 */
  uint16_t DLLTRAINPARAM;                          /**< DLL Various Training Parameters, offset: 0xE2 */
  uint8_t RESERVED_17[4];
  uint16_t HWTLPCSENBYPASS;                        /**< CSn Disable Bypass for LPDDR3/4, offset: 0xE8 */
  uint16_t DFICAMODE;                              /**< Dfi Command/Address Mode, offset: 0xEA */
  uint8_t RESERVED_18[4];
  uint16_t DLLCONTROL;                             /**< DLL Lock State machine control register, offset: 0xF0 */
  uint16_t PULSEDLLUPDATEPHASE;                    /**< DLL update phase control, offset: 0xF2 */
  uint8_t RESERVED_19[4];
  uint16_t DLLGAINCTL_P0;                          /**< DLL gain control, offset: 0xF8 */
  uint8_t RESERVED_20[22];
  uint16_t CALRATE;                                /**< Impedance Calibration Control, offset: 0x110 */
  uint16_t CALZAP;                                 /**< Impedance Calibration Zap/Reset, offset: 0x112 */
  uint8_t RESERVED_21[2];
  uint16_t PSTATE;                                 /**< PSTATE Selection, offset: 0x116 */
  uint8_t RESERVED_22[2];
  uint16_t PLLOUTGATECONTROL;                      /**< PLL Output Control, offset: 0x11A */
  uint8_t RESERVED_23[4];
  uint16_t PORCONTROL;                             /**< PMU Power-on Reset Control (PLL/DLL Lock Done), offset: 0x120 */
  uint8_t RESERVED_24[12];
  uint16_t CALBUSY;                                /**< Impedance Calibration Busy Status, offset: 0x12E */
  uint16_t CALMISC2;                               /**< Miscellaneous impedance calibration controls., offset: 0x130 */
  uint8_t RESERVED_25[2];
  uint16_t CALMISC;                                /**< Controls for disabling the impedance calibration of certain targets., offset: 0x134 */
  uint16_t CALVREFS;                               /**< , offset: 0x136 */
  uint16_t CALCMPR5;                               /**< Impedance Calibration Cmpr control, offset: 0x138 */
  uint16_t CALNINT;                                /**< Impedance Calibration NInt control, offset: 0x13A */
  uint16_t CALPEXT;                                /**< Impedance Calibration PExt control, offset: 0x13C */
  uint8_t RESERVED_26[18];
  uint16_t CALCMPINVERT;                           /**< Impedance Calibration Cmp Invert control, offset: 0x150 */
  uint8_t RESERVED_27[10];
  uint16_t CALCMPANACNTRL;                         /**< Impedance Calibration Cmpana control, offset: 0x15C */
  uint8_t RESERVED_28[2];
  uint16_t DFIRDDATACSDESTMAP_P0;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x160 */
  uint8_t RESERVED_29[2];
  uint16_t VREFINGLOBAL_P0;                        /**< PHY Global Vref Controls, offset: 0x164 */
  uint8_t RESERVED_30[2];
  uint16_t DFIWRDATACSDESTMAP_P0;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x168 */
  uint16_t MASUPDGOODCTR;                          /**< Counts successful PHY Master Interface Updates (PPTs), offset: 0x16A */
  uint16_t PHYUPD0GOODCTR;                         /**< Counts successful PHY-initiated DFI0 Interface Updates, offset: 0x16C */
  uint16_t PHYUPD1GOODCTR;                         /**< Counts successful PHY-initiated DFI1 Interface Updates, offset: 0x16E */
  uint16_t CTLUPD0GOODCTR;                         /**< Counts successful Memory Controller DFI0 Interface Updates, offset: 0x170 */
  uint16_t CTLUPD1GOODCTR;                         /**< Counts successful Memory Controller DFI1 Interface Updates, offset: 0x172 */
  uint16_t MASUPDFAILCTR;                          /**< Counts unsuccessful PHY Master Interface Updates, offset: 0x174 */
  uint16_t PHYUPD0FAILCTR;                         /**< Counts unsuccessful PHY-initiated DFI0 Interface Updates, offset: 0x176 */
  uint16_t PHYUPD1FAILCTR;                         /**< Counts unsuccessful PHY-initiated DFI1 Interface Updates, offset: 0x178 */
  uint16_t PHYPERFCTRENABLE;                       /**< Enables for Performance Counters, offset: 0x17A */
  uint8_t RESERVED_31[10];
  uint16_t PLLPWRDN;                               /**< PLL Power Down, offset: 0x186 */
  uint16_t PLLRESET;                               /**< PLL Reset, offset: 0x188 */
  uint16_t PLLCTRL2_P0;                            /**< PState dependent PLL Control Register 2, offset: 0x18A */
  uint16_t PLLCTRL0;                               /**< PLL Control Register 0, offset: 0x18C */
  uint16_t PLLCTRL1_P0;                            /**< PState dependent PLL Control Register 1, offset: 0x18E */
  uint16_t PLLTST;                                 /**< PLL Testing Control Register, offset: 0x190 */
  uint16_t PLLLOCKSTATUS;                          /**< PLL's pll_lock pin output, offset: 0x192 */
  uint16_t PLLTESTMODE_P0;                         /**< Additional controls for PLL CP/VCO modes of operation, offset: 0x194 */
  uint16_t PLLCTRL3;                               /**< PLL Control Register 3, offset: 0x196 */
  uint16_t PLLCTRL4_P0;                            /**< PState dependent PLL Control Register 4, offset: 0x198 */
  uint16_t PLLENDOFCAL;                            /**< PLL's eoc (end of calibration) output, offset: 0x19A */
  uint16_t PLLSTANDBYEFF;                          /**< PLL's standby_eff (effective standby) output, offset: 0x19C */
  uint16_t PLLDACVALOUT;                           /**< PLL's Dacval_out output, offset: 0x19E */
  uint8_t RESERVED_32[38];
  uint16_t LCDLDBGCNTL;                            /**< Controls for use in observing and testing the LCDLs., offset: 0x1C6 */
  uint16_t ACLCDLSTATUS;                           /**< Debug status of the DBYTE LCDL, offset: 0x1C8 */
  uint8_t RESERVED_33[16];
  uint16_t CUSTPHYREV;                             /**< Customer settable by the customer, offset: 0x1DA */
  uint16_t PHYREV;                                 /**< The hardware version of this PHY, excluding the PUB, offset: 0x1DC */
  uint16_t LP3EXITSEQ0BSTARTVECTOR;                /**< Start vector value to be used for LP3-exit or Init PIE Sequence, offset: 0x1DE */
  uint16_t DFIFREQXLAT0;                           /**< DFI Frequency Translation Register 0, offset: 0x1E0 */
  uint16_t DFIFREQXLAT1;                           /**< DFI Frequency Translation Register 1, offset: 0x1E2 */
  uint16_t DFIFREQXLAT2;                           /**< DFI Frequency Translation Register 2, offset: 0x1E4 */
  uint16_t DFIFREQXLAT3;                           /**< DFI Frequency Translation Register 3, offset: 0x1E6 */
  uint16_t DFIFREQXLAT4;                           /**< DFI Frequency Translation Register 4, offset: 0x1E8 */
  uint16_t DFIFREQXLAT5;                           /**< DFI Frequency Translation Register 5, offset: 0x1EA */
  uint16_t DFIFREQXLAT6;                           /**< DFI Frequency Translation Register 6, offset: 0x1EC */
  uint16_t DFIFREQXLAT7;                           /**< DFI Frequency Translation Register 7, offset: 0x1EE */
  uint16_t TXRDPTRINIT;                            /**< TxRdPtrInit control register, offset: 0x1F0 */
  uint16_t DFIINITCOMPLETE;                        /**< DFI Init Complete control, offset: 0x1F2 */
  uint16_t DFIFREQRATIO_P0;                        /**< DFI Frequency Ratio, offset: 0x1F4 */
  uint16_t RXFIFOCHECKS;                           /**< Enable more frequent consistency checks of the RX FIFOs, offset: 0x1F6 */
  uint8_t RESERVED_34[6];
  uint16_t MTESTDTOCTRL;                           /**< , offset: 0x1FE */
  uint16_t MAPCAA0TODFI;                           /**< Maps PHY CAA lane 0 from dfi0_address of the index of the register contents, offset: 0x200 */
  uint16_t MAPCAA1TODFI;                           /**< Maps PHY CAA lane 1 from dfi0_address of the index of the register contents, offset: 0x202 */
  uint16_t MAPCAA2TODFI;                           /**< Maps PHY CAA lane 2 from dfi0_address of the index of the register contents, offset: 0x204 */
  uint16_t MAPCAA3TODFI;                           /**< Maps PHY CAA lane 3 from dfi0_address of the index of the register contents, offset: 0x206 */
  uint16_t MAPCAA4TODFI;                           /**< Maps PHY CAA lane 4 from dfi0_address of the index of the register contents, offset: 0x208 */
  uint16_t MAPCAA5TODFI;                           /**< Maps PHY CAA lane 5 from dfi0_address of the index of the register contents, offset: 0x20A */
  uint16_t MAPCAA6TODFI;                           /**< Maps PHY CAA lane 6 from dfi0_address of the index of the register contents, offset: 0x20C */
  uint16_t MAPCAA7TODFI;                           /**< Maps PHY CAA lane 7 from dfi0_address of the index of the register contents, offset: 0x20E */
  uint16_t MAPCAA8TODFI;                           /**< Maps PHY CAA lane 8 from dfi0_address of the index of the register contents, offset: 0x210 */
  uint16_t MAPCAA9TODFI;                           /**< Maps PHY CAA lane 9 from dfi0_address of the index of the register contents, offset: 0x212 */
  uint8_t RESERVED_35[12];
  uint16_t MAPCAB0TODFI;                           /**< Maps PHY CAB lane 0 from dfi1_address of the index of the register contents, offset: 0x220 */
  uint16_t MAPCAB1TODFI;                           /**< Maps PHY CAB lane 1 from dfi1_address of the index of the register contents, offset: 0x222 */
  uint16_t MAPCAB2TODFI;                           /**< Maps PHY CAB lane 2 from dfi1_address of the index of the register contents, offset: 0x224 */
  uint16_t MAPCAB3TODFI;                           /**< Maps PHY CAB lane 3 from dfi1_address of the index of the register contents, offset: 0x226 */
  uint16_t MAPCAB4TODFI;                           /**< Maps PHY CAB lane 4 from dfi1_address of the index of the register contents, offset: 0x228 */
  uint16_t MAPCAB5TODFI;                           /**< Maps PHY CAB lane 5 from dfi1_address of the index of the register contents, offset: 0x22A */
  uint16_t MAPCAB6TODFI;                           /**< Maps PHY CAB lane 6 from dfi1_address of the index of the register contents, offset: 0x22C */
  uint16_t MAPCAB7TODFI;                           /**< Maps PHY CAB lane 7 from dfi1_address of the index of the register contents, offset: 0x22E */
  uint16_t MAPCAB8TODFI;                           /**< Maps PHY CAB lane 8 from dfi1_address of the index of the register contents, offset: 0x230 */
  uint16_t MAPCAB9TODFI;                           /**< Maps PHY CAB lane 9 from dfi1_address of the index of the register contents, offset: 0x232 */
  uint8_t RESERVED_36[2];
  uint16_t PHYINTERRUPTENABLE;                     /**< Interrupt Enable Bits, offset: 0x236 */
  uint16_t PHYINTERRUPTFWCONTROL;                  /**< Interrupt Firmware Control Bits, offset: 0x238 */
  uint16_t PHYINTERRUPTMASK;                       /**< Interrupt Mask Bits, offset: 0x23A */
  uint16_t PHYINTERRUPTCLEAR;                      /**< Interrupt Clear Bits, offset: 0x23C */
  uint16_t PHYINTERRUPTSTATUS;                     /**< Interrupt Status Bits, offset: 0x23E */
  uint16_t HWTSWIZZLEHWTADDRESS0;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x240 */
  uint16_t HWTSWIZZLEHWTADDRESS1;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x242 */
  uint16_t HWTSWIZZLEHWTADDRESS2;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x244 */
  uint16_t HWTSWIZZLEHWTADDRESS3;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x246 */
  uint16_t HWTSWIZZLEHWTADDRESS4;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x248 */
  uint16_t HWTSWIZZLEHWTADDRESS5;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x24A */
  uint16_t HWTSWIZZLEHWTADDRESS6;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x24C */
  uint16_t HWTSWIZZLEHWTADDRESS7;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x24E */
  uint16_t HWTSWIZZLEHWTADDRESS8;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x250 */
  uint16_t HWTSWIZZLEHWTADDRESS9;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x252 */
  uint16_t HWTSWIZZLEHWTADDRESS10;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x254 */
  uint16_t HWTSWIZZLEHWTADDRESS11;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x256 */
  uint16_t HWTSWIZZLEHWTADDRESS12;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x258 */
  uint16_t HWTSWIZZLEHWTADDRESS13;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x25A */
  uint16_t HWTSWIZZLEHWTADDRESS14;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x25C */
  uint16_t HWTSWIZZLEHWTADDRESS15;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x25E */
  uint16_t HWTSWIZZLEHWTADDRESS17;                 /**< Signal swizzle selection for HWT swizzle, offset: 0x260 */
  uint16_t HWTSWIZZLEHWTACTN;                      /**< Signal swizzle selection for HWT swizzle, offset: 0x262 */
  uint16_t HWTSWIZZLEHWTBANK0;                     /**< Signal swizzle selection for HWT swizzle, offset: 0x264 */
  uint16_t HWTSWIZZLEHWTBANK1;                     /**< Signal swizzle selection for HWT swizzle, offset: 0x266 */
  uint16_t HWTSWIZZLEHWTBANK2;                     /**< Signal swizzle selection for HWT swizzle, offset: 0x268 */
  uint16_t HWTSWIZZLEHWTBG0;                       /**< Signal swizzle selection for HWT swizzle, offset: 0x26A */
  uint16_t HWTSWIZZLEHWTBG1;                       /**< Signal swizzle selection for HWT swizzle, offset: 0x26C */
  uint16_t HWTSWIZZLEHWTCASN;                      /**< Signal swizzle selection for HWT swizzle, offset: 0x26E */
  uint16_t HWTSWIZZLEHWTRASN;                      /**< Signal swizzle selection for HWT swizzle, offset: 0x270 */
  uint16_t HWTSWIZZLEHWTWEN;                       /**< Signal swizzle selection for HWT swizzle, offset: 0x272 */
  uint16_t HWTSWIZZLEHWTPARITYIN;                  /**< Signal swizzle selection for HWT swizzle, offset: 0x274 */
  uint8_t RESERVED_37[2];
  uint16_t DFIHANDSHAKEDELAYS0;                    /**< Add assertion/deassertion delays on handshake signals Logic assumes that dfi signal assertions exceed the programmed delays, offset: 0x278 */
  uint16_t DFIHANDSHAKEDELAYS1;                    /**< Add assertion/deassertion delays on handshake signals Logic assumes that dfi signal assertions exceed the programmed delays, offset: 0x27A */
  uint8_t RESERVED_38[2096532];
  uint16_t CALUCLKINFO_P1;                         /**< Impedance Calibration Clock Ratio, offset: 0x200010 */
  uint8_t RESERVED_39[4];
  uint16_t SEQ0BDLY0_P1;                           /**< PHY Initialization Engine (PIE) Delay Register 0, offset: 0x200016 */
  uint16_t SEQ0BDLY1_P1;                           /**< PHY Initialization Engine (PIE) Delay Register 1, offset: 0x200018 */
  uint16_t SEQ0BDLY2_P1;                           /**< PHY Initialization Engine (PIE) Delay Register 2, offset: 0x20001A */
  uint16_t SEQ0BDLY3_P1;                           /**< PHY Initialization Engine (PIE) Delay Register 3, offset: 0x20001C */
  uint8_t RESERVED_40[2];
  uint16_t PPTTRAINSETUP_P1;                       /**< Setup Intervals for DFI PHY Master operations, offset: 0x200020 */
  uint8_t RESERVED_41[16];
  uint16_t TRISTATEMODECA_P1;                      /**< Mode select register for MEMCLK/Address/Command Tristates, offset: 0x200032 */
  uint8_t RESERVED_42[12];
  uint16_t HWTMRL_P1;                              /**< HWT MaxReadLatency., offset: 0x200040 */
  uint8_t RESERVED_43[6];
  uint16_t DQSPREAMBLECONTROL_P1;                  /**< Control the PHY logic related to the read and write DQS preamble, offset: 0x200048 */
  uint8_t RESERVED_44[16];
  uint16_t DMIPINPRESENT_P1;                       /**< This Register is used to enable the Read-DBI function in each DBYTE, offset: 0x20005A */
  uint16_t ARDPTRINITVAL_P1;                       /**< Address/Command FIFO ReadPointer Initial Value, offset: 0x20005C */
  uint8_t RESERVED_45[78];
  uint16_t PROCODTTIMECTL_P1;                      /**< READ DATA On-Die Termination Timing Control (by PHY), offset: 0x2000AC */
  uint8_t RESERVED_46[74];
  uint16_t DLLGAINCTL_P1;                          /**< DLL gain control, offset: 0x2000F8 */
  uint8_t RESERVED_47[102];
  uint16_t DFIRDDATACSDESTMAP_P1;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x200160 */
  uint8_t RESERVED_48[2];
  uint16_t VREFINGLOBAL_P1;                        /**< PHY Global Vref Controls, offset: 0x200164 */
  uint8_t RESERVED_49[2];
  uint16_t DFIWRDATACSDESTMAP_P1;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x200168 */
  uint8_t RESERVED_50[32];
  uint16_t PLLCTRL2_P1;                            /**< PState dependent PLL Control Register 2, offset: 0x20018A */
  uint8_t RESERVED_51[2];
  uint16_t PLLCTRL1_P1;                            /**< PState dependent PLL Control Register 1, offset: 0x20018E */
  uint8_t RESERVED_52[4];
  uint16_t PLLTESTMODE_P1;                         /**< Additional controls for PLL CP/VCO modes of operation, offset: 0x200194 */
  uint8_t RESERVED_53[2];
  uint16_t PLLCTRL4_P1;                            /**< PState dependent PLL Control Register 4, offset: 0x200198 */
  uint8_t RESERVED_54[90];
  uint16_t DFIFREQRATIO_P1;                        /**< DFI Frequency Ratio, offset: 0x2001F4 */
  uint8_t RESERVED_55[2096666];
  uint16_t CALUCLKINFO_P2;                         /**< Impedance Calibration Clock Ratio, offset: 0x400010 */
  uint8_t RESERVED_56[4];
  uint16_t SEQ0BDLY0_P2;                           /**< PHY Initialization Engine (PIE) Delay Register 0, offset: 0x400016 */
  uint16_t SEQ0BDLY1_P2;                           /**< PHY Initialization Engine (PIE) Delay Register 1, offset: 0x400018 */
  uint16_t SEQ0BDLY2_P2;                           /**< PHY Initialization Engine (PIE) Delay Register 2, offset: 0x40001A */
  uint16_t SEQ0BDLY3_P2;                           /**< PHY Initialization Engine (PIE) Delay Register 3, offset: 0x40001C */
  uint8_t RESERVED_57[2];
  uint16_t PPTTRAINSETUP_P2;                       /**< Setup Intervals for DFI PHY Master operations, offset: 0x400020 */
  uint8_t RESERVED_58[16];
  uint16_t TRISTATEMODECA_P2;                      /**< Mode select register for MEMCLK/Address/Command Tristates, offset: 0x400032 */
  uint8_t RESERVED_59[12];
  uint16_t HWTMRL_P2;                              /**< HWT MaxReadLatency., offset: 0x400040 */
  uint8_t RESERVED_60[6];
  uint16_t DQSPREAMBLECONTROL_P2;                  /**< Control the PHY logic related to the read and write DQS preamble, offset: 0x400048 */
  uint8_t RESERVED_61[16];
  uint16_t DMIPINPRESENT_P2;                       /**< This Register is used to enable the Read-DBI function in each DBYTE, offset: 0x40005A */
  uint16_t ARDPTRINITVAL_P2;                       /**< Address/Command FIFO ReadPointer Initial Value, offset: 0x40005C */
  uint8_t RESERVED_62[78];
  uint16_t PROCODTTIMECTL_P2;                      /**< READ DATA On-Die Termination Timing Control (by PHY), offset: 0x4000AC */
  uint8_t RESERVED_63[74];
  uint16_t DLLGAINCTL_P2;                          /**< DLL gain control, offset: 0x4000F8 */
  uint8_t RESERVED_64[102];
  uint16_t DFIRDDATACSDESTMAP_P2;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x400160 */
  uint8_t RESERVED_65[2];
  uint16_t VREFINGLOBAL_P2;                        /**< PHY Global Vref Controls, offset: 0x400164 */
  uint8_t RESERVED_66[2];
  uint16_t DFIWRDATACSDESTMAP_P2;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x400168 */
  uint8_t RESERVED_67[32];
  uint16_t PLLCTRL2_P2;                            /**< PState dependent PLL Control Register 2, offset: 0x40018A */
  uint8_t RESERVED_68[2];
  uint16_t PLLCTRL1_P2;                            /**< PState dependent PLL Control Register 1, offset: 0x40018E */
  uint8_t RESERVED_69[4];
  uint16_t PLLTESTMODE_P2;                         /**< Additional controls for PLL CP/VCO modes of operation, offset: 0x400194 */
  uint8_t RESERVED_70[2];
  uint16_t PLLCTRL4_P2;                            /**< PState dependent PLL Control Register 4, offset: 0x400198 */
  uint8_t RESERVED_71[90];
  uint16_t DFIFREQRATIO_P2;                        /**< DFI Frequency Ratio, offset: 0x4001F4 */
  uint8_t RESERVED_72[2096666];
  uint16_t CALUCLKINFO_P3;                         /**< Impedance Calibration Clock Ratio, offset: 0x600010 */
  uint8_t RESERVED_73[4];
  uint16_t SEQ0BDLY0_P3;                           /**< PHY Initialization Engine (PIE) Delay Register 0, offset: 0x600016 */
  uint16_t SEQ0BDLY1_P3;                           /**< PHY Initialization Engine (PIE) Delay Register 1, offset: 0x600018 */
  uint16_t SEQ0BDLY2_P3;                           /**< PHY Initialization Engine (PIE) Delay Register 2, offset: 0x60001A */
  uint16_t SEQ0BDLY3_P3;                           /**< PHY Initialization Engine (PIE) Delay Register 3, offset: 0x60001C */
  uint8_t RESERVED_74[2];
  uint16_t PPTTRAINSETUP_P3;                       /**< Setup Intervals for DFI PHY Master operations, offset: 0x600020 */
  uint8_t RESERVED_75[16];
  uint16_t TRISTATEMODECA_P3;                      /**< Mode select register for MEMCLK/Address/Command Tristates, offset: 0x600032 */
  uint8_t RESERVED_76[12];
  uint16_t HWTMRL_P3;                              /**< HWT MaxReadLatency., offset: 0x600040 */
  uint8_t RESERVED_77[6];
  uint16_t DQSPREAMBLECONTROL_P3;                  /**< Control the PHY logic related to the read and write DQS preamble, offset: 0x600048 */
  uint8_t RESERVED_78[16];
  uint16_t DMIPINPRESENT_P3;                       /**< This Register is used to enable the Read-DBI function in each DBYTE, offset: 0x60005A */
  uint16_t ARDPTRINITVAL_P3;                       /**< Address/Command FIFO ReadPointer Initial Value, offset: 0x60005C */
  uint8_t RESERVED_79[78];
  uint16_t PROCODTTIMECTL_P3;                      /**< READ DATA On-Die Termination Timing Control (by PHY), offset: 0x6000AC */
  uint8_t RESERVED_80[74];
  uint16_t DLLGAINCTL_P3;                          /**< DLL gain control, offset: 0x6000F8 */
  uint8_t RESERVED_81[102];
  uint16_t DFIRDDATACSDESTMAP_P3;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x600160 */
  uint8_t RESERVED_82[2];
  uint16_t VREFINGLOBAL_P3;                        /**< PHY Global Vref Controls, offset: 0x600164 */
  uint8_t RESERVED_83[2];
  uint16_t DFIWRDATACSDESTMAP_P3;                  /**< Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM, offset: 0x600168 */
  uint8_t RESERVED_84[32];
  uint16_t PLLCTRL2_P3;                            /**< PState dependent PLL Control Register 2, offset: 0x60018A */
  uint8_t RESERVED_85[2];
  uint16_t PLLCTRL1_P3;                            /**< PState dependent PLL Control Register 1, offset: 0x60018E */
  uint8_t RESERVED_86[4];
  uint16_t PLLTESTMODE_P3;                         /**< Additional controls for PLL CP/VCO modes of operation, offset: 0x600194 */
  uint8_t RESERVED_87[2];
  uint16_t PLLCTRL4_P3;                            /**< PState dependent PLL Control Register 4, offset: 0x600198 */
  uint8_t RESERVED_88[90];
  uint16_t DFIFREQRATIO_P3;                        /**< DFI Frequency Ratio, offset: 0x6001F4 */
} volatile *DWC_DDRPHYA_MASTER_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_MASTER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_MASTER_Register_Accessor_Macros DWC_DDRPHYA_MASTER - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_MASTER - Register accessors */
#define DWC_DDRPHYA_MASTER_RXFIFOINIT_REG(base)  ((base)->RXFIFOINIT)
#define DWC_DDRPHYA_MASTER_FORCECLKDISABLE_REG(base) ((base)->FORCECLKDISABLE)
#define DWC_DDRPHYA_MASTER_FORCEINTERNALUPDATE_REG(base) ((base)->FORCEINTERNALUPDATE)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_REG(base)   ((base)->PHYCONFIG)
#define DWC_DDRPHYA_MASTER_PGCR_REG(base)        ((base)->PGCR)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_REG(base) ((base)->TESTBUMPCNTRL1)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_REG(base) ((base)->CALUCLKINFO_P0)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_REG(base) ((base)->TESTBUMPCNTRL)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_REG(base) ((base)->SEQ0BDLY0_P0)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_REG(base) ((base)->SEQ0BDLY1_P0)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_REG(base) ((base)->SEQ0BDLY2_P0)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_REG(base) ((base)->SEQ0BDLY3_P0)
#define DWC_DDRPHYA_MASTER_PHYALERTSTATUS_REG(base) ((base)->PHYALERTSTATUS)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_REG(base) ((base)->PPTTRAINSETUP_P0)
#define DWC_DDRPHYA_MASTER_ATESTMODE_REG(base)   ((base)->ATESTMODE)
#define DWC_DDRPHYA_MASTER_TXCALBINP_REG(base)   ((base)->TXCALBINP)
#define DWC_DDRPHYA_MASTER_TXCALBINN_REG(base)   ((base)->TXCALBINN)
#define DWC_DDRPHYA_MASTER_TXCALPOVR_REG(base)   ((base)->TXCALPOVR)
#define DWC_DDRPHYA_MASTER_TXCALNOVR_REG(base)   ((base)->TXCALNOVR)
#define DWC_DDRPHYA_MASTER_DFIMODE_REG(base)     ((base)->DFIMODE)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_REG(base) ((base)->TRISTATEMODECA_P0)
#define DWC_DDRPHYA_MASTER_MTESTMUXSEL_REG(base) ((base)->MTESTMUXSEL)
#define DWC_DDRPHYA_MASTER_MTESTPGMINFO_REG(base) ((base)->MTESTPGMINFO)
#define DWC_DDRPHYA_MASTER_DYNPWRDNUP_REG(base)  ((base)->DYNPWRDNUP)
#define DWC_DDRPHYA_MASTER_PHYTID_REG(base)      ((base)->PHYTID)
#define DWC_DDRPHYA_MASTER_HWTMRL_P0_REG(base)   ((base)->HWTMRL_P0)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_REG(base)   ((base)->DFIPHYUPD)
#define DWC_DDRPHYA_MASTER_PDAMRSWRITEMODE_REG(base) ((base)->PDAMRSWRITEMODE)
#define DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_REG(base) ((base)->DFIGEARDOWNCTL)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_REG(base) ((base)->DQSPREAMBLECONTROL_P0)
#define DWC_DDRPHYA_MASTER_MASTERX4CONFIG_REG(base) ((base)->MASTERX4CONFIG)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_REG(base)   ((base)->WRLEVBITS)
#define DWC_DDRPHYA_MASTER_ENABLECSMULTICAST_REG(base) ((base)->ENABLECSMULTICAST)
#define DWC_DDRPHYA_MASTER_HWTLPCSMULTICAST_REG(base) ((base)->HWTLPCSMULTICAST)
#define DWC_DDRPHYA_MASTER_ACX4ANIBDIS_REG(base) ((base)->ACX4ANIBDIS)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P0_REG(base) ((base)->DMIPINPRESENT_P0)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_REG(base) ((base)->ARDPTRINITVAL_P0)
#define DWC_DDRPHYA_MASTER_DBYTEDLLMODECNTRL_REG(base) ((base)->DBYTEDLLMODECNTRL)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_REG(base)  ((base)->CALOFFSETS)
#define DWC_DDRPHYA_MASTER_SARINITVALS_REG(base) ((base)->SARINITVALS)
#define DWC_DDRPHYA_MASTER_CALPEXTOVR_REG(base)  ((base)->CALPEXTOVR)
#define DWC_DDRPHYA_MASTER_CALCMPR5OVR_REG(base) ((base)->CALCMPR5OVR)
#define DWC_DDRPHYA_MASTER_CALNINTOVR_REG(base)  ((base)->CALNINTOVR)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_REG(base)  ((base)->CALDRVSTR0)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_REG(base) ((base)->PROCODTTIMECTL_P0)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_REG(base) ((base)->MEMALERTCONTROL)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL2_REG(base) ((base)->MEMALERTCONTROL2)
#define DWC_DDRPHYA_MASTER_MEMRESETL_REG(base)   ((base)->MEMRESETL)
#define DWC_DDRPHYA_MASTER_DRIVECSLOWONTOHIGH_REG(base) ((base)->DRIVECSLOWONTOHIGH)
#define DWC_DDRPHYA_MASTER_PUBMODE_REG(base)     ((base)->PUBMODE)
#define DWC_DDRPHYA_MASTER_MISCPHYSTATUS_REG(base) ((base)->MISCPHYSTATUS)
#define DWC_DDRPHYA_MASTER_CORELOOPBACKSEL_REG(base) ((base)->CORELOOPBACKSEL)
#define DWC_DDRPHYA_MASTER_DLLTRAINPARAM_REG(base) ((base)->DLLTRAINPARAM)
#define DWC_DDRPHYA_MASTER_HWTLPCSENBYPASS_REG(base) ((base)->HWTLPCSENBYPASS)
#define DWC_DDRPHYA_MASTER_DFICAMODE_REG(base)   ((base)->DFICAMODE)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_REG(base)  ((base)->DLLCONTROL)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_REG(base) ((base)->PULSEDLLUPDATEPHASE)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_REG(base) ((base)->DLLGAINCTL_P0)
#define DWC_DDRPHYA_MASTER_CALRATE_REG(base)     ((base)->CALRATE)
#define DWC_DDRPHYA_MASTER_CALZAP_REG(base)      ((base)->CALZAP)
#define DWC_DDRPHYA_MASTER_PSTATE_REG(base)      ((base)->PSTATE)
#define DWC_DDRPHYA_MASTER_PLLOUTGATECONTROL_REG(base) ((base)->PLLOUTGATECONTROL)
#define DWC_DDRPHYA_MASTER_PORCONTROL_REG(base)  ((base)->PORCONTROL)
#define DWC_DDRPHYA_MASTER_CALBUSY_REG(base)     ((base)->CALBUSY)
#define DWC_DDRPHYA_MASTER_CALMISC2_REG(base)    ((base)->CALMISC2)
#define DWC_DDRPHYA_MASTER_CALMISC_REG(base)     ((base)->CALMISC)
#define DWC_DDRPHYA_MASTER_CALVREFS_REG(base)    ((base)->CALVREFS)
#define DWC_DDRPHYA_MASTER_CALCMPR5_REG(base)    ((base)->CALCMPR5)
#define DWC_DDRPHYA_MASTER_CALNINT_REG(base)     ((base)->CALNINT)
#define DWC_DDRPHYA_MASTER_CALPEXT_REG(base)     ((base)->CALPEXT)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_REG(base) ((base)->CALCMPINVERT)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_REG(base) ((base)->CALCMPANACNTRL)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_REG(base) ((base)->DFIRDDATACSDESTMAP_P0)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_REG(base) ((base)->VREFINGLOBAL_P0)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_REG(base) ((base)->DFIWRDATACSDESTMAP_P0)
#define DWC_DDRPHYA_MASTER_MASUPDGOODCTR_REG(base) ((base)->MASUPDGOODCTR)
#define DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_REG(base) ((base)->PHYUPD0GOODCTR)
#define DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_REG(base) ((base)->PHYUPD1GOODCTR)
#define DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_REG(base) ((base)->CTLUPD0GOODCTR)
#define DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_REG(base) ((base)->CTLUPD1GOODCTR)
#define DWC_DDRPHYA_MASTER_MASUPDFAILCTR_REG(base) ((base)->MASUPDFAILCTR)
#define DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_REG(base) ((base)->PHYUPD0FAILCTR)
#define DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_REG(base) ((base)->PHYUPD1FAILCTR)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_REG(base) ((base)->PHYPERFCTRENABLE)
#define DWC_DDRPHYA_MASTER_PLLPWRDN_REG(base)    ((base)->PLLPWRDN)
#define DWC_DDRPHYA_MASTER_PLLRESET_REG(base)    ((base)->PLLRESET)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P0_REG(base) ((base)->PLLCTRL2_P0)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_REG(base)    ((base)->PLLCTRL0)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_REG(base) ((base)->PLLCTRL1_P0)
#define DWC_DDRPHYA_MASTER_PLLTST_REG(base)      ((base)->PLLTST)
#define DWC_DDRPHYA_MASTER_PLLLOCKSTATUS_REG(base) ((base)->PLLLOCKSTATUS)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_REG(base) ((base)->PLLTESTMODE_P0)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_REG(base)    ((base)->PLLCTRL3)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_REG(base) ((base)->PLLCTRL4_P0)
#define DWC_DDRPHYA_MASTER_PLLENDOFCAL_REG(base) ((base)->PLLENDOFCAL)
#define DWC_DDRPHYA_MASTER_PLLSTANDBYEFF_REG(base) ((base)->PLLSTANDBYEFF)
#define DWC_DDRPHYA_MASTER_PLLDACVALOUT_REG(base) ((base)->PLLDACVALOUT)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_REG(base) ((base)->LCDLDBGCNTL)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_REG(base) ((base)->ACLCDLSTATUS)
#define DWC_DDRPHYA_MASTER_CUSTPHYREV_REG(base)  ((base)->CUSTPHYREV)
#define DWC_DDRPHYA_MASTER_PHYREV_REG(base)      ((base)->PHYREV)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_REG(base) ((base)->LP3EXITSEQ0BSTARTVECTOR)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_REG(base) ((base)->DFIFREQXLAT0)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_REG(base) ((base)->DFIFREQXLAT1)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_REG(base) ((base)->DFIFREQXLAT2)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_REG(base) ((base)->DFIFREQXLAT3)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_REG(base) ((base)->DFIFREQXLAT4)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_REG(base) ((base)->DFIFREQXLAT5)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_REG(base) ((base)->DFIFREQXLAT6)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_REG(base) ((base)->DFIFREQXLAT7)
#define DWC_DDRPHYA_MASTER_TXRDPTRINIT_REG(base) ((base)->TXRDPTRINIT)
#define DWC_DDRPHYA_MASTER_DFIINITCOMPLETE_REG(base) ((base)->DFIINITCOMPLETE)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_REG(base) ((base)->DFIFREQRATIO_P0)
#define DWC_DDRPHYA_MASTER_RXFIFOCHECKS_REG(base) ((base)->RXFIFOCHECKS)
#define DWC_DDRPHYA_MASTER_MTESTDTOCTRL_REG(base) ((base)->MTESTDTOCTRL)
#define DWC_DDRPHYA_MASTER_MAPCAA0TODFI_REG(base) ((base)->MAPCAA0TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA1TODFI_REG(base) ((base)->MAPCAA1TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA2TODFI_REG(base) ((base)->MAPCAA2TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA3TODFI_REG(base) ((base)->MAPCAA3TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA4TODFI_REG(base) ((base)->MAPCAA4TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA5TODFI_REG(base) ((base)->MAPCAA5TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA6TODFI_REG(base) ((base)->MAPCAA6TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA7TODFI_REG(base) ((base)->MAPCAA7TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA8TODFI_REG(base) ((base)->MAPCAA8TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAA9TODFI_REG(base) ((base)->MAPCAA9TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB0TODFI_REG(base) ((base)->MAPCAB0TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB1TODFI_REG(base) ((base)->MAPCAB1TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB2TODFI_REG(base) ((base)->MAPCAB2TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB3TODFI_REG(base) ((base)->MAPCAB3TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB4TODFI_REG(base) ((base)->MAPCAB4TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB5TODFI_REG(base) ((base)->MAPCAB5TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB6TODFI_REG(base) ((base)->MAPCAB6TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB7TODFI_REG(base) ((base)->MAPCAB7TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB8TODFI_REG(base) ((base)->MAPCAB8TODFI)
#define DWC_DDRPHYA_MASTER_MAPCAB9TODFI_REG(base) ((base)->MAPCAB9TODFI)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_REG(base) ((base)->PHYINTERRUPTENABLE)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_REG(base) ((base)->PHYINTERRUPTFWCONTROL)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_REG(base) ((base)->PHYINTERRUPTMASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_REG(base) ((base)->PHYINTERRUPTCLEAR)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_REG(base) ((base)->PHYINTERRUPTSTATUS)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_REG(base) ((base)->HWTSWIZZLEHWTADDRESS0)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_REG(base) ((base)->HWTSWIZZLEHWTADDRESS1)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_REG(base) ((base)->HWTSWIZZLEHWTADDRESS2)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_REG(base) ((base)->HWTSWIZZLEHWTADDRESS3)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_REG(base) ((base)->HWTSWIZZLEHWTADDRESS4)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_REG(base) ((base)->HWTSWIZZLEHWTADDRESS5)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_REG(base) ((base)->HWTSWIZZLEHWTADDRESS6)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_REG(base) ((base)->HWTSWIZZLEHWTADDRESS7)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_REG(base) ((base)->HWTSWIZZLEHWTADDRESS8)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_REG(base) ((base)->HWTSWIZZLEHWTADDRESS9)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_REG(base) ((base)->HWTSWIZZLEHWTADDRESS10)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_REG(base) ((base)->HWTSWIZZLEHWTADDRESS11)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_REG(base) ((base)->HWTSWIZZLEHWTADDRESS12)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_REG(base) ((base)->HWTSWIZZLEHWTADDRESS13)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_REG(base) ((base)->HWTSWIZZLEHWTADDRESS14)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_REG(base) ((base)->HWTSWIZZLEHWTADDRESS15)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_REG(base) ((base)->HWTSWIZZLEHWTADDRESS17)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_REG(base) ((base)->HWTSWIZZLEHWTACTN)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_REG(base) ((base)->HWTSWIZZLEHWTBANK0)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_REG(base) ((base)->HWTSWIZZLEHWTBANK1)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_REG(base) ((base)->HWTSWIZZLEHWTBANK2)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_REG(base) ((base)->HWTSWIZZLEHWTBG0)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_REG(base) ((base)->HWTSWIZZLEHWTBG1)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_REG(base) ((base)->HWTSWIZZLEHWTCASN)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_REG(base) ((base)->HWTSWIZZLEHWTRASN)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_REG(base) ((base)->HWTSWIZZLEHWTWEN)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_REG(base) ((base)->HWTSWIZZLEHWTPARITYIN)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_REG(base) ((base)->DFIHANDSHAKEDELAYS0)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_REG(base) ((base)->DFIHANDSHAKEDELAYS1)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_REG(base) ((base)->CALUCLKINFO_P1)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_REG(base) ((base)->SEQ0BDLY0_P1)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_REG(base) ((base)->SEQ0BDLY1_P1)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_REG(base) ((base)->SEQ0BDLY2_P1)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_REG(base) ((base)->SEQ0BDLY3_P1)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_REG(base) ((base)->PPTTRAINSETUP_P1)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_REG(base) ((base)->TRISTATEMODECA_P1)
#define DWC_DDRPHYA_MASTER_HWTMRL_P1_REG(base)   ((base)->HWTMRL_P1)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_REG(base) ((base)->DQSPREAMBLECONTROL_P1)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P1_REG(base) ((base)->DMIPINPRESENT_P1)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_REG(base) ((base)->ARDPTRINITVAL_P1)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_REG(base) ((base)->PROCODTTIMECTL_P1)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_REG(base) ((base)->DLLGAINCTL_P1)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_REG(base) ((base)->DFIRDDATACSDESTMAP_P1)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_REG(base) ((base)->VREFINGLOBAL_P1)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_REG(base) ((base)->DFIWRDATACSDESTMAP_P1)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P1_REG(base) ((base)->PLLCTRL2_P1)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_REG(base) ((base)->PLLCTRL1_P1)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_REG(base) ((base)->PLLTESTMODE_P1)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_REG(base) ((base)->PLLCTRL4_P1)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_REG(base) ((base)->DFIFREQRATIO_P1)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_REG(base) ((base)->CALUCLKINFO_P2)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_REG(base) ((base)->SEQ0BDLY0_P2)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_REG(base) ((base)->SEQ0BDLY1_P2)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_REG(base) ((base)->SEQ0BDLY2_P2)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_REG(base) ((base)->SEQ0BDLY3_P2)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_REG(base) ((base)->PPTTRAINSETUP_P2)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_REG(base) ((base)->TRISTATEMODECA_P2)
#define DWC_DDRPHYA_MASTER_HWTMRL_P2_REG(base)   ((base)->HWTMRL_P2)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_REG(base) ((base)->DQSPREAMBLECONTROL_P2)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P2_REG(base) ((base)->DMIPINPRESENT_P2)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_REG(base) ((base)->ARDPTRINITVAL_P2)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_REG(base) ((base)->PROCODTTIMECTL_P2)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_REG(base) ((base)->DLLGAINCTL_P2)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_REG(base) ((base)->DFIRDDATACSDESTMAP_P2)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_REG(base) ((base)->VREFINGLOBAL_P2)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_REG(base) ((base)->DFIWRDATACSDESTMAP_P2)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P2_REG(base) ((base)->PLLCTRL2_P2)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_REG(base) ((base)->PLLCTRL1_P2)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_REG(base) ((base)->PLLTESTMODE_P2)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_REG(base) ((base)->PLLCTRL4_P2)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_REG(base) ((base)->DFIFREQRATIO_P2)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_REG(base) ((base)->CALUCLKINFO_P3)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_REG(base) ((base)->SEQ0BDLY0_P3)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_REG(base) ((base)->SEQ0BDLY1_P3)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_REG(base) ((base)->SEQ0BDLY2_P3)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_REG(base) ((base)->SEQ0BDLY3_P3)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_REG(base) ((base)->PPTTRAINSETUP_P3)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_REG(base) ((base)->TRISTATEMODECA_P3)
#define DWC_DDRPHYA_MASTER_HWTMRL_P3_REG(base)   ((base)->HWTMRL_P3)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_REG(base) ((base)->DQSPREAMBLECONTROL_P3)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P3_REG(base) ((base)->DMIPINPRESENT_P3)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_REG(base) ((base)->ARDPTRINITVAL_P3)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_REG(base) ((base)->PROCODTTIMECTL_P3)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_REG(base) ((base)->DLLGAINCTL_P3)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_REG(base) ((base)->DFIRDDATACSDESTMAP_P3)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_REG(base) ((base)->VREFINGLOBAL_P3)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_REG(base) ((base)->DFIWRDATACSDESTMAP_P3)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P3_REG(base) ((base)->PLLCTRL2_P3)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_REG(base) ((base)->PLLCTRL1_P3)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_REG(base) ((base)->PLLTESTMODE_P3)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_REG(base) ((base)->PLLCTRL4_P3)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_REG(base) ((base)->DFIFREQRATIO_P3)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_MASTER_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_MASTER Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_MASTER_Register_Masks DWC_DDRPHYA_MASTER Register Masks
 * @{
 */

/*! @name RXFIFOINIT - Rx FIFO pointer initialization control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_RXFIFOINIT_RxFifoInitPtr_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_RXFIFOINIT_RxFifoInitPtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_RXFIFOINIT_InhibitRxFifoRd_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_RXFIFOINIT_InhibitRxFifoRd_SHIFT (1U)
/*! @} */

/*! @name FORCECLKDISABLE - Clock gating control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_FORCECLKDISABLE_ForceClkDisable_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_FORCECLKDISABLE_ForceClkDisable_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_FORCECLKDISABLE_ForceClkDisable(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_FORCECLKDISABLE_ForceClkDisable_SHIFT)) & DWC_DDRPHYA_MASTER_FORCECLKDISABLE_ForceClkDisable_MASK)
/*! @} */

/*! @name FORCEINTERNALUPDATE - This Register used by Training Firmware to force an internal PHY Update Event. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_FORCEINTERNALUPDATE_ForceInternalUpdate_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_FORCEINTERNALUPDATE_ForceInternalUpdate_SHIFT (0U)
/*! @} */

/*! @name PHYCONFIG - Read Only displays PHY Configuration. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigAnibs_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigAnibs_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigAnibs(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigAnibs_SHIFT)) & DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigAnibs_MASK)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDbytes_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDbytes_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDbytes(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDbytes_SHIFT)) & DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDbytes_MASK)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDfi_MASK (0x300U)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDfi_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDfi_SHIFT)) & DWC_DDRPHYA_MASTER_PHYCONFIG_PhyConfigDfi_MASK)
/*! @} */

/*! @name PGCR - PHY General Configuration Register(PGCR). */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PGCR_RxClkRiseFallMode_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PGCR_RxClkRiseFallMode_SHIFT (0U)
/*! @} */

/*! @name TESTBUMPCNTRL1 - Test Bump Control1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestMajorMode_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestMajorMode_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestMajorMode(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestMajorMode_SHIFT)) & DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestMajorMode_MASK)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestBiasBypassEn_MASK (0x8U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestBiasBypassEn_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestAnalogOutCtrl_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestAnalogOutCtrl_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestAnalogOutCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestAnalogOutCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestAnalogOutCtrl_MASK)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestGainCurrAdj_MASK (0x1F00U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestGainCurrAdj_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestGainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestGainCurrAdj_SHIFT)) & DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestGainCurrAdj_MASK)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestSelExternalVref_MASK (0x2000U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestSelExternalVref_SHIFT (13U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestExtVrefRange_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestExtVrefRange_SHIFT (14U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestPowerGateEn_MASK (0x8000U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_TestPowerGateEn_SHIFT (15U)
/*! @} */

/*! @name CALUCLKINFO_P0 - Impedance Calibration Clock Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_CalUClkTicksPer1uS_MASK (0x3FFU)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_CalUClkTicksPer1uS_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_CalUClkTicksPer1uS(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_CalUClkTicksPer1uS_SHIFT)) & DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_CalUClkTicksPer1uS_MASK)
/*! @} */

/*! @name TESTBUMPCNTRL - Test Bump Control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpEn_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpEn_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpEn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpEn_SHIFT)) & DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpEn_MASK)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpToggle_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpToggle_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpDataSel_MASK (0x1F8U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpDataSel_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpDataSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpDataSel_SHIFT)) & DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_TestBumpDataSel_MASK)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_ForceMtestOnAlert_MASK (0x200U)
#define DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_ForceMtestOnAlert_SHIFT (9U)
/*! @} */

/*! @name SEQ0BDLY0_P0 - PHY Initialization Engine (PIE) Delay Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_Seq0BDLY0_p0_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_Seq0BDLY0_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_Seq0BDLY0_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_Seq0BDLY0_p0_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_Seq0BDLY0_p0_MASK)
/*! @} */

/*! @name SEQ0BDLY1_P0 - PHY Initialization Engine (PIE) Delay Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_Seq0BDLY1_p0_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_Seq0BDLY1_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_Seq0BDLY1_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_Seq0BDLY1_p0_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_Seq0BDLY1_p0_MASK)
/*! @} */

/*! @name SEQ0BDLY2_P0 - PHY Initialization Engine (PIE) Delay Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_Seq0BDLY2_p0_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_Seq0BDLY2_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_Seq0BDLY2_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_Seq0BDLY2_p0_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_Seq0BDLY2_p0_MASK)
/*! @} */

/*! @name SEQ0BDLY3_P0 - PHY Initialization Engine (PIE) Delay Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_Seq0BDLY3_p0_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_Seq0BDLY3_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_Seq0BDLY3_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_Seq0BDLY3_p0_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_Seq0BDLY3_p0_MASK)
/*! @} */

/*! @name PHYALERTSTATUS - PHY Alert status bit */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYALERTSTATUS_PhyAlert_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYALERTSTATUS_PhyAlert_SHIFT (0U)
/*! @} */

/*! @name PPTTRAINSETUP_P0 - Setup Intervals for DFI PHY Master operations */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrTrainInterval_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrTrainInterval_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrTrainInterval(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrTrainInterval_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrTrainInterval_MASK)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrMaxReqToAck_MASK (0x70U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrMaxReqToAck_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrMaxReqToAck(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrMaxReqToAck_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_PhyMstrMaxReqToAck_MASK)
/*! @} */

/*! @name ATESTMODE - ATestMode control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestPrbsEn_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestPrbsEn_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestClkEn_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestClkEn_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestModeSel_MASK (0x1CU)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestModeSel_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_ATESTMODE_ATestModeSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ATESTMODE_ATestModeSel_SHIFT)) & DWC_DDRPHYA_MASTER_ATESTMODE_ATestModeSel_MASK)
/*! @} */

/*! @name TXCALBINP - TX P Impedance Calibration observation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TXCALBINP_TxCalBinP_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_TXCALBINP_TxCalBinP_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TXCALBINP_TxCalBinP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TXCALBINP_TxCalBinP_SHIFT)) & DWC_DDRPHYA_MASTER_TXCALBINP_TxCalBinP_MASK)
/*! @} */

/*! @name TXCALBINN - TX N Impedance Calibration observation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TXCALBINN_TxCalBinN_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_TXCALBINN_TxCalBinN_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TXCALBINN_TxCalBinN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TXCALBINN_TxCalBinN_SHIFT)) & DWC_DDRPHYA_MASTER_TXCALBINN_TxCalBinN_MASK)
/*! @} */

/*! @name TXCALPOVR - TX P Impedance Calibration override */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrVal_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrVal_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrVal_SHIFT)) & DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrVal_MASK)
#define DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrEn_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_TXCALPOVR_TxCalBinPOvrEn_SHIFT (5U)
/*! @} */

/*! @name TXCALNOVR - TX N Impedance Calibration override */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrVal_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrVal_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrVal_SHIFT)) & DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrVal_MASK)
#define DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrEn_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_TXCALNOVR_TxCalBinNOvrEn_SHIFT (5U)
/*! @} */

/*! @name DFIMODE - Enables for update and low-power interfaces for DFI0 and DFI1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi0Enable_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi0Enable_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi1Enable_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi1Enable_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi1Override_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_DFIMODE_Dfi1Override_SHIFT (2U)
/*! @} */

/*! @name TRISTATEMODECA_P0 - Mode select register for MEMCLK/Address/Command Tristates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_DisDynAdrTri_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_DisDynAdrTri_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_DDR2TMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_DDR2TMode_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_CkDisVal_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_CkDisVal_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_CkDisVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_CkDisVal_SHIFT)) & DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_CkDisVal_MASK)
/*! @} */

/*! @name MTESTMUXSEL - Digital Observation Pin control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MTESTMUXSEL_MtestMuxSel_MASK (0x3FU)
#define DWC_DDRPHYA_MASTER_MTESTMUXSEL_MtestMuxSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MTESTMUXSEL_MtestMuxSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MTESTMUXSEL_MtestMuxSel_SHIFT)) & DWC_DDRPHYA_MASTER_MTESTMUXSEL_MtestMuxSel_MASK)
/*! @} */

/*! @name MTESTPGMINFO - Digital Observation Pin program info for debug */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MTESTPGMINFO_MtestPgmInfo_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_MTESTPGMINFO_MtestPgmInfo_SHIFT (0U)
/*! @} */

/*! @name DYNPWRDNUP - Dynaimc Power Up/Down control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DYNPWRDNUP_DynPowerDown_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DYNPWRDNUP_DynPowerDown_SHIFT (0U)
/*! @} */

/*! @name PHYTID - PHY Technology ID Register */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYTID_PhyTID_MASK    (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PHYTID_PhyTID_SHIFT   (0U)
#define DWC_DDRPHYA_MASTER_PHYTID_PhyTID(x)      (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYTID_PhyTID_SHIFT)) & DWC_DDRPHYA_MASTER_PHYTID_PhyTID_MASK)
/*! @} */

/*! @name HWTMRL_P0 - HWT MaxReadLatency. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTMRL_P0_HwtMRL_p0_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTMRL_P0_HwtMRL_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTMRL_P0_HwtMRL_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTMRL_P0_HwtMRL_p0_SHIFT)) & DWC_DDRPHYA_MASTER_HWTMRL_P0_HwtMRL_p0_MASK)
/*! @} */

/*! @name DFIPHYUPD - DFI PhyUpdate Request time counter (in MEMCLKs) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDCNT_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDCNT_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDCNT(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDCNT_SHIFT)) & DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDCNT_MASK)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDRESP_MASK (0x70U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDRESP_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDRESP(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDRESP_SHIFT)) & DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDRESP_MASK)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDMODE_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDMODE_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDTHRESHOLD_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDTHRESHOLD_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDTHRESHOLD(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDTHRESHOLD_SHIFT)) & DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDTHRESHOLD_MASK)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDINTTHRESHOLD_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDINTTHRESHOLD_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDINTTHRESHOLD(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDINTTHRESHOLD_SHIFT)) & DWC_DDRPHYA_MASTER_DFIPHYUPD_DFIPHYUPDINTTHRESHOLD_MASK)
/*! @} */

/*! @name PDAMRSWRITEMODE - Controls the write DQ generation for Per-Dram-Addressing of MRS */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PDAMRSWRITEMODE_PdaMrsWriteMode_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PDAMRSWRITEMODE_PdaMrsWriteMode_SHIFT (0U)
/*! @} */

/*! @name DFIGEARDOWNCTL - Controls whether dfi_geardown_en will cause CS and CKE timing to change. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_DFIGEARDOWNCTL_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_DFIGEARDOWNCTL_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_DFIGEARDOWNCTL(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_DFIGEARDOWNCTL_SHIFT)) & DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_DFIGEARDOWNCTL_MASK)
/*! @} */

/*! @name DQSPREAMBLECONTROL_P0 - Control the PHY logic related to the read and write DQS preamble */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_TwoTckRxDqsPre_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_TwoTckRxDqsPre_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_TwoTckTxDqsPre_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_TwoTckTxDqsPre_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_PositionDfeInit_MASK (0x1CU)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_PositionDfeInit_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_PositionDfeInit(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_PositionDfeInit_SHIFT)) & DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_PositionDfeInit_MASK)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4TglTwoTckTxDqsPre_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4TglTwoTckTxDqsPre_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4PostambleExt_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4PostambleExt_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4SttcPreBridgeRxEn_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_LP4SttcPreBridgeRxEn_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_WDQSEXTENSION_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_WDQSEXTENSION_SHIFT (8U)
/*! @} */

/*! @name MASTERX4CONFIG - DBYTE module controls to select X4 Dram device mode */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MASTERX4CONFIG_X4TG_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MASTERX4CONFIG_X4TG_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MASTERX4CONFIG_X4TG(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MASTERX4CONFIG_X4TG_SHIFT)) & DWC_DDRPHYA_MASTER_MASTERX4CONFIG_X4TG_MASK)
/*! @} */

/*! @name WRLEVBITS - Write level feedback DQ observability select. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSL_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSL_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSL(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSL_SHIFT)) & DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSL_MASK)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSU_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSU_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSU(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSU_SHIFT)) & DWC_DDRPHYA_MASTER_WRLEVBITS_WrLevForDQSU_MASK)
/*! @} */

/*! @name ENABLECSMULTICAST - In DDR4 Mode , this controls whether CS_N[3:2] should be multicast on CID[1:0] */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ENABLECSMULTICAST_EnableCsMulticast_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_ENABLECSMULTICAST_EnableCsMulticast_SHIFT (0U)
/*! @} */

/*! @name HWTLPCSMULTICAST - Drives cs_n[0] onto cs_n[1] during training */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTLPCSMULTICAST_HwtLpCsMultiCast_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_HWTLPCSMULTICAST_HwtLpCsMultiCast_SHIFT (0U)
/*! @} */

/*! @name ACX4ANIBDIS - Disable for unused ACX Nibbles */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ACX4ANIBDIS_Acx4AnibDis_MASK (0xFFFU)
#define DWC_DDRPHYA_MASTER_ACX4ANIBDIS_Acx4AnibDis_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ACX4ANIBDIS_Acx4AnibDis(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ACX4ANIBDIS_Acx4AnibDis_SHIFT)) & DWC_DDRPHYA_MASTER_ACX4ANIBDIS_Acx4AnibDis_MASK)
/*! @} */

/*! @name DMIPINPRESENT_P0 - This Register is used to enable the Read-DBI function in each DBYTE */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P0_RdDbiEnabled_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P0_RdDbiEnabled_SHIFT (0U)
/*! @} */

/*! @name ARDPTRINITVAL_P0 - Address/Command FIFO ReadPointer Initial Value */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_ARdPtrInitVal_p0_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_ARdPtrInitVal_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_ARdPtrInitVal_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_ARdPtrInitVal_p0_SHIFT)) & DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_ARdPtrInitVal_p0_MASK)
/*! @} */

/*! @name DBYTEDLLMODECNTRL - DLL Mode control CSR for DBYTEs */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DBYTEDLLMODECNTRL_DllRxPreambleMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DBYTEDLLMODECNTRL_DllRxPreambleMode_SHIFT (1U)
/*! @} */

/*! @name CALOFFSETS - Impedance Calibration offsets control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalCmpr5Offset_MASK (0x3FU)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalCmpr5Offset_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalCmpr5Offset(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALOFFSETS_CalCmpr5Offset_SHIFT)) & DWC_DDRPHYA_MASTER_CALOFFSETS_CalCmpr5Offset_MASK)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPdThOffset_MASK (0x3C0U)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPdThOffset_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPdThOffset(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPdThOffset_SHIFT)) & DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPdThOffset_MASK)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPuThOffset_MASK (0x3C00U)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPuThOffset_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPuThOffset(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPuThOffset_SHIFT)) & DWC_DDRPHYA_MASTER_CALOFFSETS_CalDrvPuThOffset_MASK)
/*! @} */

/*! @name SARINITVALS - Sar Init Vals */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitOFFSET05_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitOFFSET05_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitOFFSET05(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SARINITVALS_SarInitOFFSET05_SHIFT)) & DWC_DDRPHYA_MASTER_SARINITVALS_SarInitOFFSET05_MASK)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitNINT_MASK (0x38U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitNINT_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitNINT(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SARINITVALS_SarInitNINT_SHIFT)) & DWC_DDRPHYA_MASTER_SARINITVALS_SarInitNINT_MASK)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitPEXT_MASK (0x1C0U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitPEXT_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_SARINITVALS_SarInitPEXT(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SARINITVALS_SarInitPEXT_SHIFT)) & DWC_DDRPHYA_MASTER_SARINITVALS_SarInitPEXT_MASK)
/*! @} */

/*! @name CALPEXTOVR - Impedance Calibration PExt Override control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALPEXTOVR_CalPExtOvr_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_CALPEXTOVR_CalPExtOvr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALPEXTOVR_CalPExtOvr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALPEXTOVR_CalPExtOvr_SHIFT)) & DWC_DDRPHYA_MASTER_CALPEXTOVR_CalPExtOvr_MASK)
/*! @} */

/*! @name CALCMPR5OVR - Impedance Calibration Cmpr 50 control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALCMPR5OVR_CalCmpr5Ovr_MASK (0xFFU)
#define DWC_DDRPHYA_MASTER_CALCMPR5OVR_CalCmpr5Ovr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALCMPR5OVR_CalCmpr5Ovr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALCMPR5OVR_CalCmpr5Ovr_SHIFT)) & DWC_DDRPHYA_MASTER_CALCMPR5OVR_CalCmpr5Ovr_MASK)
/*! @} */

/*! @name CALNINTOVR - Impedance Calibration NInt Override control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALNINTOVR_CalNIntOvr_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_CALNINTOVR_CalNIntOvr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALNINTOVR_CalNIntOvr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALNINTOVR_CalNIntOvr_SHIFT)) & DWC_DDRPHYA_MASTER_CALNINTOVR_CalNIntOvr_MASK)
/*! @} */

/*! @name CALDRVSTR0 - Impedance Calibration driver strength control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPd50_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPd50_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPd50(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPd50_SHIFT)) & DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPd50_MASK)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPu50_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPu50_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPu50(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPu50_SHIFT)) & DWC_DDRPHYA_MASTER_CALDRVSTR0_CalDrvStrPu50_MASK)
/*! @} */

/*! @name PROCODTTIMECTL_P0 - READ DATA On-Die Termination Timing Control (by PHY) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtTailWidth_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtTailWidth_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtTailWidth(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtTailWidth_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtTailWidth_MASK)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtStartDelay_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtStartDelay_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtStartDelay(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtStartDelay_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_POdtStartDelay_MASK)
/*! @} */

/*! @name MEMALERTCONTROL - This Register is used to configure the MemAlert Receiver */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefLevel_MASK (0x7FU)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefLevel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefLevel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefLevel_SHIFT)) & DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefLevel_MASK)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefExtEn_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTVrefExtEn_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuStren_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuStren_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuStren(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuStren_SHIFT)) & DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuStren_MASK)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuEn_MASK (0x1000U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTPuEn_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTRxEn_MASK (0x2000U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTRxEn_SHIFT (13U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTDisableVal_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTDisableVal_SHIFT (14U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTForceError_MASK (0x8000U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL_MALERTForceError_SHIFT (15U)
/*! @} */

/*! @name MEMALERTCONTROL2 - This Register is used to configure the MemAlert Receiver */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL2_MALERTSyncBypass_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_MEMALERTCONTROL2_MALERTSyncBypass_SHIFT (0U)
/*! @} */

/*! @name MEMRESETL - Protection and control of BP_MemReset_L */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MEMRESETL_MemResetLValue_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_MEMRESETL_MemResetLValue_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MEMRESETL_ProtectMemReset_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_MEMRESETL_ProtectMemReset_SHIFT (1U)
/*! @} */

/*! @name DRIVECSLOWONTOHIGH - Drive CS_N 3:0 onto CS_N 7:4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DRIVECSLOWONTOHIGH_CsLowOntoHigh_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DRIVECSLOWONTOHIGH_CsLowOntoHigh_SHIFT (0U)
/*! @} */

/*! @name PUBMODE - PUBMODE - HWT Mux Select */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PUBMODE_HwtMemSrc_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PUBMODE_HwtMemSrc_SHIFT (0U)
/*! @} */

/*! @name MISCPHYSTATUS - Misc PHY status bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MISCPHYSTATUS_DctSane_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_MISCPHYSTATUS_DctSane_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MISCPHYSTATUS_PORMemReset_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_MISCPHYSTATUS_PORMemReset_SHIFT (1U)
/*! @} */

/*! @name CORELOOPBACKSEL - Controls whether the loopback path bypasses the final PAD node. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CORELOOPBACKSEL_CoreLoopbackSel_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_CORELOOPBACKSEL_CoreLoopbackSel_SHIFT (0U)
/*! @} */

/*! @name DLLTRAINPARAM - DLL Various Training Parameters */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLTRAINPARAM_ExtendPhdTime_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DLLTRAINPARAM_ExtendPhdTime_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLTRAINPARAM_ExtendPhdTime(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLTRAINPARAM_ExtendPhdTime_SHIFT)) & DWC_DDRPHYA_MASTER_DLLTRAINPARAM_ExtendPhdTime_MASK)
/*! @} */

/*! @name HWTLPCSENBYPASS - CSn Disable Bypass for LPDDR3/4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTLPCSENBYPASS_HwtLpCsEnBypass_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_HWTLPCSENBYPASS_HwtLpCsEnBypass_SHIFT (0U)
/*! @} */

/*! @name DFICAMODE - Dfi Command/Address Mode */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiLp3CAMode_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiLp3CAMode_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiD4CAMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiD4CAMode_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiLp4CAMode_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiLp4CAMode_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiD4AltCAMode_MASK (0x8U)
#define DWC_DDRPHYA_MASTER_DFICAMODE_DfiD4AltCAMode_SHIFT (3U)
/*! @} */

/*! @name DLLCONTROL - DLL Lock State machine control register */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetRelock_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetRelock_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetSlave_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetSlave_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetRSVD_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_DLLCONTROL_DllResetRSVD_SHIFT (2U)
/*! @} */

/*! @name PULSEDLLUPDATEPHASE - DLL update phase control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseDbyteDllUpdatePhase_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseDbyteDllUpdatePhase_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseACkDllUpdatePhase_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseACkDllUpdatePhase_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseACaDllUpdatePhase_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_PulseACaDllUpdatePhase_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_UpdatePhaseDestReserved_MASK (0x38U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_UpdatePhaseDestReserved_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_UpdatePhaseDestReserved(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_UpdatePhaseDestReserved_SHIFT)) & DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_UpdatePhaseDestReserved_MASK)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_TrainUpdatePhaseOnLongBubble_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_TrainUpdatePhaseOnLongBubble_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_AlwaysUpdateLcdlPhase_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_AlwaysUpdateLcdlPhase_SHIFT (7U)
/*! @} */

/*! @name DLLGAINCTL_P0 - DLL gain control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainIV_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainIV_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainIV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainIV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainIV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainTV_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainTV_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainTV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainTV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllGainTV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllSeedSel_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllSeedSel_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllSeedSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllSeedSel_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_DllSeedSel_MASK)
/*! @} */

/*! @name CALRATE - Impedance Calibration Control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALRATE_CalInterval_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_CALRATE_CalInterval_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALRATE_CalInterval(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALRATE_CalInterval_SHIFT)) & DWC_DDRPHYA_MASTER_CALRATE_CalInterval_MASK)
#define DWC_DDRPHYA_MASTER_CALRATE_CalRun_MASK   (0x10U)
#define DWC_DDRPHYA_MASTER_CALRATE_CalRun_SHIFT  (4U)
#define DWC_DDRPHYA_MASTER_CALRATE_CalOnce_MASK  (0x20U)
#define DWC_DDRPHYA_MASTER_CALRATE_CalOnce_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_CALRATE_DisableBackgroundZQUpdates_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_CALRATE_DisableBackgroundZQUpdates_SHIFT (6U)
/*! @} */

/*! @name CALZAP - Impedance Calibration Zap/Reset */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALZAP_CalZap_MASK    (0x1U)
#define DWC_DDRPHYA_MASTER_CALZAP_CalZap_SHIFT   (0U)
/*! @} */

/*! @name PSTATE - PSTATE Selection */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PSTATE_PState_MASK    (0xFU)
#define DWC_DDRPHYA_MASTER_PSTATE_PState_SHIFT   (0U)
#define DWC_DDRPHYA_MASTER_PSTATE_PState(x)      (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PSTATE_PState_SHIFT)) & DWC_DDRPHYA_MASTER_PSTATE_PState_MASK)
/*! @} */

/*! @name PLLOUTGATECONTROL - PLL Output Control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLOUTGATECONTROL_PclkGateEn_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLOUTGATECONTROL_PclkGateEn_SHIFT (0U)
/*! @} */

/*! @name PORCONTROL - PMU Power-on Reset Control (PLL/DLL Lock Done) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PORCONTROL_PllDllLockDone_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PORCONTROL_PllDllLockDone_SHIFT (0U)
/*! @} */

/*! @name CALBUSY - Impedance Calibration Busy Status */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALBUSY_CalBusy_MASK  (0x1U)
#define DWC_DDRPHYA_MASTER_CALBUSY_CalBusy_SHIFT (0U)
/*! @} */

/*! @name CALMISC2 - Miscellaneous impedance calibration controls. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALMISC2_CalNumVotes_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalNumVotes_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalNumVotes(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALMISC2_CalNumVotes_SHIFT)) & DWC_DDRPHYA_MASTER_CALMISC2_CalNumVotes_MASK)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalCmptrResTrim_MASK (0x1000U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalCmptrResTrim_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalCancelRoundErrDis_MASK (0x2000U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalCancelRoundErrDis_SHIFT (13U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalSlowCmpana_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_CALMISC2_CalSlowCmpana_SHIFT (14U)
/*! @} */

/*! @name CALMISC - Controls for disabling the impedance calibration of certain targets. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALMISC_CalCmpr5Dis_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_CALMISC_CalCmpr5Dis_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALMISC_CalNIntDis_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_CALMISC_CalNIntDis_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_CALMISC_CalPExtDis_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_CALMISC_CalPExtDis_SHIFT (2U)
/*! @} */

/*! @name CALVREFS -  */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALVREFS_CalVRefs_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_CALVREFS_CalVRefs_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALVREFS_CalVRefs(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALVREFS_CalVRefs_SHIFT)) & DWC_DDRPHYA_MASTER_CALVREFS_CalVRefs_MASK)
/*! @} */

/*! @name CALCMPR5 - Impedance Calibration Cmpr control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALCMPR5_CalCmpr5_MASK (0xFFU)
#define DWC_DDRPHYA_MASTER_CALCMPR5_CalCmpr5_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALCMPR5_CalCmpr5(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALCMPR5_CalCmpr5_SHIFT)) & DWC_DDRPHYA_MASTER_CALCMPR5_CalCmpr5_MASK)
/*! @} */

/*! @name CALNINT - Impedance Calibration NInt control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALNINT_CalNIntThB_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_CALNINT_CalNIntThB_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALNINT_CalNIntThB(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALNINT_CalNIntThB_SHIFT)) & DWC_DDRPHYA_MASTER_CALNINT_CalNIntThB_MASK)
/*! @} */

/*! @name CALPEXT - Impedance Calibration PExt control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALPEXT_CalPExtThB_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_CALPEXT_CalPExtThB_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALPEXT_CalPExtThB(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALPEXT_CalPExtThB_SHIFT)) & DWC_DDRPHYA_MASTER_CALPEXT_CalPExtThB_MASK)
/*! @} */

/*! @name CALCMPINVERT - Impedance Calibration Cmp Invert control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDac50_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDac50_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDrvPd50_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDrvPd50_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDrvPu50_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalDrvPu50_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalOdtPd_MASK (0x8U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalOdtPd_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalOdtPu_MASK (0x10U)
#define DWC_DDRPHYA_MASTER_CALCMPINVERT_CmpInvertCalOdtPu_SHIFT (4U)
/*! @} */

/*! @name CALCMPANACNTRL - Impedance Calibration Cmpana control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainCurrAdj_MASK (0xFFU)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainCurrAdj_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainCurrAdj(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainCurrAdj_SHIFT)) & DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainCurrAdj_MASK)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainResAdj_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprGainResAdj_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprBiasBypassEn_MASK (0x200U)
#define DWC_DDRPHYA_MASTER_CALCMPANACNTRL_CmprBiasBypassEn_SHIFT (9U)
/*! @} */

/*! @name DFIRDDATACSDESTMAP_P0 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_DfiRdDestm3_MASK)
/*! @} */

/*! @name VREFINGLOBAL_P0 - PHY Global Vref Controls */
/*! @{ */
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInSel_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInSel_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInSel_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInDAC_MASK (0x3F8U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInDAC_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInDAC(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInDAC_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInDAC_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInTrim_MASK (0x3C00U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInTrim_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInTrim(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInTrim_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInTrim_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInMode_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_GlobalVrefInMode_SHIFT (14U)
/*! @} */

/*! @name DFIWRDATACSDESTMAP_P0 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_DfiWrDestm3_MASK)
/*! @} */

/*! @name MASUPDGOODCTR - Counts successful PHY Master Interface Updates (PPTs) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MASUPDGOODCTR_MasUpdGoodCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_MASUPDGOODCTR_MasUpdGoodCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MASUPDGOODCTR_MasUpdGoodCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MASUPDGOODCTR_MasUpdGoodCtr_SHIFT)) & DWC_DDRPHYA_MASTER_MASUPDGOODCTR_MasUpdGoodCtr_MASK)
/*! @} */

/*! @name PHYUPD0GOODCTR - Counts successful PHY-initiated DFI0 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_PhyUpd0GoodCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_PhyUpd0GoodCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_PhyUpd0GoodCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_PhyUpd0GoodCtr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_PhyUpd0GoodCtr_MASK)
/*! @} */

/*! @name PHYUPD1GOODCTR - Counts successful PHY-initiated DFI1 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_PhyUpd1GoodCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_PhyUpd1GoodCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_PhyUpd1GoodCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_PhyUpd1GoodCtr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_PhyUpd1GoodCtr_MASK)
/*! @} */

/*! @name CTLUPD0GOODCTR - Counts successful Memory Controller DFI0 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_CtlUpd0GoodCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_CtlUpd0GoodCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_CtlUpd0GoodCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_CtlUpd0GoodCtr_SHIFT)) & DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_CtlUpd0GoodCtr_MASK)
/*! @} */

/*! @name CTLUPD1GOODCTR - Counts successful Memory Controller DFI1 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_CtlUpd1GoodCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_CtlUpd1GoodCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_CtlUpd1GoodCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_CtlUpd1GoodCtr_SHIFT)) & DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_CtlUpd1GoodCtr_MASK)
/*! @} */

/*! @name MASUPDFAILCTR - Counts unsuccessful PHY Master Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MASUPDFAILCTR_MasUpdFailCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_MASUPDFAILCTR_MasUpdFailCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MASUPDFAILCTR_MasUpdFailCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MASUPDFAILCTR_MasUpdFailCtr_SHIFT)) & DWC_DDRPHYA_MASTER_MASUPDFAILCTR_MasUpdFailCtr_MASK)
/*! @} */

/*! @name PHYUPD0FAILCTR - Counts unsuccessful PHY-initiated DFI0 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_PhyUpd0FailCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_PhyUpd0FailCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_PhyUpd0FailCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_PhyUpd0FailCtr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_PhyUpd0FailCtr_MASK)
/*! @} */

/*! @name PHYUPD1FAILCTR - Counts unsuccessful PHY-initiated DFI1 Interface Updates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_PhyUpd1FailCtr_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_PhyUpd1FailCtr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_PhyUpd1FailCtr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_PhyUpd1FailCtr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_PhyUpd1FailCtr_MASK)
/*! @} */

/*! @name PHYPERFCTRENABLE - Enables for Performance Counters */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_MasUpdGoodCtl_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_MasUpdGoodCtl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd0GoodCtl_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd0GoodCtl_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd1GoodCtl_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd1GoodCtl_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_CtlUpd0GoodCtl_MASK (0x8U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_CtlUpd0GoodCtl_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_CtlUpd1GoodCtl_MASK (0x10U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_CtlUpd1GoodCtl_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_MasUpdFailCtl_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_MasUpdFailCtl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd0FailCtl_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd0FailCtl_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd1FailCtl_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_PhyUpd1FailCtl_SHIFT (7U)
/*! @} */

/*! @name PLLPWRDN - PLL Power Down */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLPWRDN_PllPwrDn_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLPWRDN_PllPwrDn_SHIFT (0U)
/*! @} */

/*! @name PLLRESET - PLL Reset */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLRESET_PllReset_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLRESET_PllReset_SHIFT (0U)
/*! @} */

/*! @name PLLCTRL2_P0 - PState dependent PLL Control Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P0_PllFreqSel_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P0_PllFreqSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P0_PllFreqSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL2_P0_PllFreqSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL2_P0_PllFreqSel_MASK)
/*! @} */

/*! @name PLLCTRL0 - PLL Control Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllStandby_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllStandby_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllBypSel_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllBypSel_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllX2Mode_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllX2Mode_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllOutBypEn_MASK (0x8U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllOutBypEn_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllPreset_MASK (0x10U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllPreset_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllBypassMode_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllBypassMode_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSelDfiFreqRatio_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSelDfiFreqRatio_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSyncBusFlush_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSyncBusFlush_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSyncBusByp_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSyncBusByp_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllReserved10x9_MASK (0x600U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllReserved10x9_SHIFT (9U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllReserved10x9(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL0_PllReserved10x9_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL0_PllReserved10x9_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllGearShift_MASK (0x800U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllGearShift_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockCntSel_MASK (0x1000U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockCntSel_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockPhSel_MASK (0x6000U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockPhSel_SHIFT (13U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockPhSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockPhSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL0_PllLockPhSel_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSpareCtrl0_MASK (0x8000U)
#define DWC_DDRPHYA_MASTER_PLLCTRL0_PllSpareCtrl0_SHIFT (15U)
/*! @} */

/*! @name PLLCTRL1_P0 - PState dependent PLL Control Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpIntCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpIntCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpIntCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpIntCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpIntCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpPropCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpPropCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpPropCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpPropCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P0_PllCpPropCtrl_MASK)
/*! @} */

/*! @name PLLTST - PLL Testing Control Register */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstEn_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstEn_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstSel_MASK (0x1EU)
#define DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstSel_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTST_PllAnaTstSel_MASK)
#define DWC_DDRPHYA_MASTER_PLLTST_PllDigTstSel_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLTST_PllDigTstSel_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLTST_PllDigTstSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTST_PllDigTstSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTST_PllDigTstSel_MASK)
/*! @} */

/*! @name PLLLOCKSTATUS - PLL's pll_lock pin output */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLLOCKSTATUS_PllLockStatus_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLLOCKSTATUS_PllLockStatus_SHIFT (0U)
/*! @} */

/*! @name PLLTESTMODE_P0 - Additional controls for PLL CP/VCO modes of operation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_PllTestMode_p0_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_PllTestMode_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_PllTestMode_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_PllTestMode_p0_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_PllTestMode_p0_MASK)
/*! @} */

/*! @name PLLCTRL3 - PLL Control Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllSpare_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllSpare_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllSpare(x)  (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL3_PllSpare_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL3_PllSpare_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllMaxRange_MASK (0x1F0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllMaxRange_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllMaxRange(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL3_PllMaxRange_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL3_PllMaxRange_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllDacValIn_MASK (0x3E00U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllDacValIn_SHIFT (9U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllDacValIn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL3_PllDacValIn_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL3_PllDacValIn_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllForceCal_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllForceCal_SHIFT (14U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllEnCal_MASK (0x8000U)
#define DWC_DDRPHYA_MASTER_PLLCTRL3_PllEnCal_SHIFT (15U)
/*! @} */

/*! @name PLLCTRL4_P0 - PState dependent PLL Control Register 4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpIntGsCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpIntGsCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpIntGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpIntGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpIntGsCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpPropGsCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpPropGsCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpPropGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpPropGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P0_PllCpPropGsCtrl_MASK)
/*! @} */

/*! @name PLLENDOFCAL - PLL's eoc (end of calibration) output */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLENDOFCAL_PllEndofCal_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLENDOFCAL_PllEndofCal_SHIFT (0U)
/*! @} */

/*! @name PLLSTANDBYEFF - PLL's standby_eff (effective standby) output */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLSTANDBYEFF_PllStandbyEff_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PLLSTANDBYEFF_PllStandbyEff_SHIFT (0U)
/*! @} */

/*! @name PLLDACVALOUT - PLL's Dacval_out output */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLDACVALOUT_PllDacValOut_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLDACVALOUT_PllDacValOut_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLDACVALOUT_PllDacValOut(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLDACVALOUT_PllDacValOut_SHIFT)) & DWC_DDRPHYA_MASTER_PLLDACVALOUT_PllDacValOut_MASK)
/*! @} */

/*! @name LCDLDBGCNTL - Controls for use in observing and testing the LCDLs. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvrVal_MASK (0x1FFU)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvrVal_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvrVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvrVal_SHIFT)) & DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvrVal_MASK)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvr_MASK (0x200U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineOvr_SHIFT (9U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineSnap_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlFineSnap_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlTstEnable_MASK (0x800U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlTstEnable_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlStatusSel_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlStatusSel_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlStatusSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlStatusSel_SHIFT)) & DWC_DDRPHYA_MASTER_LCDLDBGCNTL_LcdlStatusSel_MASK)
/*! @} */

/*! @name ACLCDLSTATUS - Debug status of the DBYTE LCDL */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlFineSnapVal_MASK (0x3FFU)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlFineSnapVal_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlFineSnapVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlFineSnapVal_SHIFT)) & DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlFineSnapVal_MASK)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlPhdSnapVal_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlPhdSnapVal_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlStickyLock_MASK (0x800U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlStickyLock_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlStickyUnlock_MASK (0x1000U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlStickyUnlock_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlLiveLock_MASK (0x2000U)
#define DWC_DDRPHYA_MASTER_ACLCDLSTATUS_AcLcdlLiveLock_SHIFT (13U)
/*! @} */

/*! @name CUSTPHYREV - Customer settable by the customer */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CUSTPHYREV_CUSTPHYREV_MASK (0x3FU)
#define DWC_DDRPHYA_MASTER_CUSTPHYREV_CUSTPHYREV_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CUSTPHYREV_CUSTPHYREV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CUSTPHYREV_CUSTPHYREV_SHIFT)) & DWC_DDRPHYA_MASTER_CUSTPHYREV_CUSTPHYREV_MASK)
/*! @} */

/*! @name PHYREV - The hardware version of this PHY, excluding the PUB */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMNR_MASK    (0xFU)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMNR_SHIFT   (0U)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMNR(x)      (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYREV_PHYMNR_SHIFT)) & DWC_DDRPHYA_MASTER_PHYREV_PHYMNR_MASK)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMDR_MASK    (0xF0U)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMDR_SHIFT   (4U)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMDR(x)      (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYREV_PHYMDR_SHIFT)) & DWC_DDRPHYA_MASTER_PHYREV_PHYMDR_MASK)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMJR_MASK    (0xFF00U)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMJR_SHIFT   (8U)
#define DWC_DDRPHYA_MASTER_PHYREV_PHYMJR(x)      (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYREV_PHYMJR_SHIFT)) & DWC_DDRPHYA_MASTER_PHYREV_PHYMJR_MASK)
/*! @} */

/*! @name LP3EXITSEQ0BSTARTVECTOR - Start vector value to be used for LP3-exit or Init PIE Sequence */
/*! @{ */
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllEnabled_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllEnabled_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllEnabled(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllEnabled_SHIFT)) & DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllEnabled_MASK)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllBypassed_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllBypassed_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllBypassed(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllBypassed_SHIFT)) & DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_LP3ExitSeq0BStartVecPllBypassed_MASK)
/*! @} */

/*! @name DFIFREQXLAT0 - DFI Frequency Translation Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal0_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal0_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal1_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal1_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal1_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal2_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal2_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal2_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal3_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal3_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT0_DfiFreqXlatVal3_MASK)
/*! @} */

/*! @name DFIFREQXLAT1 - DFI Frequency Translation Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal4_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal4_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal4(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal4_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal4_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal5_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal5_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal5(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal5_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal5_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal6_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal6_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal6(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal6_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal6_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal7_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal7_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal7(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal7_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT1_DfiFreqXlatVal7_MASK)
/*! @} */

/*! @name DFIFREQXLAT2 - DFI Frequency Translation Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal8_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal8_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal8(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal8_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal8_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal9_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal9_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal9(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal9_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal9_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal10_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal10_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal10(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal10_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal10_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal11_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal11_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal11(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal11_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT2_DfiFreqXlatVal11_MASK)
/*! @} */

/*! @name DFIFREQXLAT3 - DFI Frequency Translation Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal12_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal12_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal12(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal12_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal12_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal13_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal13_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal13(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal13_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal13_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal14_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal14_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal14(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal14_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal14_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal15_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal15_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal15(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal15_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT3_DfiFreqXlatVal15_MASK)
/*! @} */

/*! @name DFIFREQXLAT4 - DFI Frequency Translation Register 4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal16_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal16_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal16(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal16_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal16_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal17_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal17_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal17(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal17_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal17_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal18_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal18_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal18(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal18_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal18_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal19_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal19_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal19(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal19_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT4_DfiFreqXlatVal19_MASK)
/*! @} */

/*! @name DFIFREQXLAT5 - DFI Frequency Translation Register 5 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal20_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal20_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal20(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal20_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal20_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal21_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal21_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal21(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal21_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal21_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal22_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal22_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal22(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal22_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal22_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal23_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal23_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal23(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal23_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT5_DfiFreqXlatVal23_MASK)
/*! @} */

/*! @name DFIFREQXLAT6 - DFI Frequency Translation Register 6 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal24_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal24_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal24(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal24_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal24_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal25_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal25_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal25(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal25_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal25_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal26_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal26_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal26(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal26_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal26_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal27_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal27_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal27(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal27_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT6_DfiFreqXlatVal27_MASK)
/*! @} */

/*! @name DFIFREQXLAT7 - DFI Frequency Translation Register 7 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal28_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal28_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal28(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal28_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal28_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal29_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal29_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal29(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal29_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal29_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal30_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal30_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal30(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal30_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal30_MASK)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal31_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal31_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal31(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal31_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQXLAT7_DfiFreqXlatVal31_MASK)
/*! @} */

/*! @name TXRDPTRINIT - TxRdPtrInit control register */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TXRDPTRINIT_TxRdPtrInit_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_TXRDPTRINIT_TxRdPtrInit_SHIFT (0U)
/*! @} */

/*! @name DFIINITCOMPLETE - DFI Init Complete control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIINITCOMPLETE_DfiInitComplete_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DFIINITCOMPLETE_DfiInitComplete_SHIFT (0U)
/*! @} */

/*! @name DFIFREQRATIO_P0 - DFI Frequency Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_DfiFreqRatio_p0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_DfiFreqRatio_p0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_DfiFreqRatio_p0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_DfiFreqRatio_p0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_DfiFreqRatio_p0_MASK)
/*! @} */

/*! @name RXFIFOCHECKS - Enable more frequent consistency checks of the RX FIFOs */
/*! @{ */
#define DWC_DDRPHYA_MASTER_RXFIFOCHECKS_DoFrequentRxFifoChecks_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_RXFIFOCHECKS_DoFrequentRxFifoChecks_SHIFT (0U)
/*! @} */

/*! @name MTESTDTOCTRL -  */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MTESTDTOCTRL_MTestDtoCtrl_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_MTESTDTOCTRL_MTestDtoCtrl_SHIFT (0U)
/*! @} */

/*! @name MAPCAA0TODFI - Maps PHY CAA lane 0 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA0TODFI_MapCAA0toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA0TODFI_MapCAA0toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA0TODFI_MapCAA0toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA0TODFI_MapCAA0toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA0TODFI_MapCAA0toDfi_MASK)
/*! @} */

/*! @name MAPCAA1TODFI - Maps PHY CAA lane 1 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA1TODFI_MapCAA1toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA1TODFI_MapCAA1toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA1TODFI_MapCAA1toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA1TODFI_MapCAA1toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA1TODFI_MapCAA1toDfi_MASK)
/*! @} */

/*! @name MAPCAA2TODFI - Maps PHY CAA lane 2 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA2TODFI_MapCAA2toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA2TODFI_MapCAA2toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA2TODFI_MapCAA2toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA2TODFI_MapCAA2toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA2TODFI_MapCAA2toDfi_MASK)
/*! @} */

/*! @name MAPCAA3TODFI - Maps PHY CAA lane 3 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA3TODFI_MapCAA3toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA3TODFI_MapCAA3toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA3TODFI_MapCAA3toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA3TODFI_MapCAA3toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA3TODFI_MapCAA3toDfi_MASK)
/*! @} */

/*! @name MAPCAA4TODFI - Maps PHY CAA lane 4 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA4TODFI_MapCAA4toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA4TODFI_MapCAA4toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA4TODFI_MapCAA4toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA4TODFI_MapCAA4toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA4TODFI_MapCAA4toDfi_MASK)
/*! @} */

/*! @name MAPCAA5TODFI - Maps PHY CAA lane 5 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA5TODFI_MapCAA5toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA5TODFI_MapCAA5toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA5TODFI_MapCAA5toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA5TODFI_MapCAA5toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA5TODFI_MapCAA5toDfi_MASK)
/*! @} */

/*! @name MAPCAA6TODFI - Maps PHY CAA lane 6 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA6TODFI_MapCAA6toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA6TODFI_MapCAA6toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA6TODFI_MapCAA6toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA6TODFI_MapCAA6toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA6TODFI_MapCAA6toDfi_MASK)
/*! @} */

/*! @name MAPCAA7TODFI - Maps PHY CAA lane 7 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA7TODFI_MapCAA7toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA7TODFI_MapCAA7toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA7TODFI_MapCAA7toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA7TODFI_MapCAA7toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA7TODFI_MapCAA7toDfi_MASK)
/*! @} */

/*! @name MAPCAA8TODFI - Maps PHY CAA lane 8 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA8TODFI_MapCAA8toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA8TODFI_MapCAA8toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA8TODFI_MapCAA8toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA8TODFI_MapCAA8toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA8TODFI_MapCAA8toDfi_MASK)
/*! @} */

/*! @name MAPCAA9TODFI - Maps PHY CAA lane 9 from dfi0_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAA9TODFI_MapCAA9toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAA9TODFI_MapCAA9toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAA9TODFI_MapCAA9toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAA9TODFI_MapCAA9toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAA9TODFI_MapCAA9toDfi_MASK)
/*! @} */

/*! @name MAPCAB0TODFI - Maps PHY CAB lane 0 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB0TODFI_MapCAB0toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB0TODFI_MapCAB0toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB0TODFI_MapCAB0toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB0TODFI_MapCAB0toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB0TODFI_MapCAB0toDfi_MASK)
/*! @} */

/*! @name MAPCAB1TODFI - Maps PHY CAB lane 1 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB1TODFI_MapCAB1toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB1TODFI_MapCAB1toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB1TODFI_MapCAB1toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB1TODFI_MapCAB1toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB1TODFI_MapCAB1toDfi_MASK)
/*! @} */

/*! @name MAPCAB2TODFI - Maps PHY CAB lane 2 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB2TODFI_MapCAB2toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB2TODFI_MapCAB2toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB2TODFI_MapCAB2toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB2TODFI_MapCAB2toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB2TODFI_MapCAB2toDfi_MASK)
/*! @} */

/*! @name MAPCAB3TODFI - Maps PHY CAB lane 3 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB3TODFI_MapCAB3toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB3TODFI_MapCAB3toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB3TODFI_MapCAB3toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB3TODFI_MapCAB3toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB3TODFI_MapCAB3toDfi_MASK)
/*! @} */

/*! @name MAPCAB4TODFI - Maps PHY CAB lane 4 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB4TODFI_MapCAB4toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB4TODFI_MapCAB4toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB4TODFI_MapCAB4toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB4TODFI_MapCAB4toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB4TODFI_MapCAB4toDfi_MASK)
/*! @} */

/*! @name MAPCAB5TODFI - Maps PHY CAB lane 5 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB5TODFI_MapCAB5toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB5TODFI_MapCAB5toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB5TODFI_MapCAB5toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB5TODFI_MapCAB5toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB5TODFI_MapCAB5toDfi_MASK)
/*! @} */

/*! @name MAPCAB6TODFI - Maps PHY CAB lane 6 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB6TODFI_MapCAB6toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB6TODFI_MapCAB6toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB6TODFI_MapCAB6toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB6TODFI_MapCAB6toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB6TODFI_MapCAB6toDfi_MASK)
/*! @} */

/*! @name MAPCAB7TODFI - Maps PHY CAB lane 7 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB7TODFI_MapCAB7toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB7TODFI_MapCAB7toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB7TODFI_MapCAB7toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB7TODFI_MapCAB7toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB7TODFI_MapCAB7toDfi_MASK)
/*! @} */

/*! @name MAPCAB8TODFI - Maps PHY CAB lane 8 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB8TODFI_MapCAB8toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB8TODFI_MapCAB8toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB8TODFI_MapCAB8toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB8TODFI_MapCAB8toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB8TODFI_MapCAB8toDfi_MASK)
/*! @} */

/*! @name MAPCAB9TODFI - Maps PHY CAB lane 9 from dfi1_address of the index of the register contents */
/*! @{ */
#define DWC_DDRPHYA_MASTER_MAPCAB9TODFI_MapCAB9toDfi_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_MAPCAB9TODFI_MapCAB9toDfi_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_MAPCAB9TODFI_MapCAB9toDfi(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_MAPCAB9TODFI_MapCAB9toDfi_SHIFT)) & DWC_DDRPHYA_MASTER_MAPCAB9TODFI_MapCAB9toDfi_MASK)
/*! @} */

/*! @name PHYINTERRUPTENABLE - Interrupt Enable Bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyTrngCmpltEn_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyTrngCmpltEn_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyInitCmpltEn_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyInitCmpltEn_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyTrngFailEn_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyTrngFailEn_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyFWReservedEn_MASK (0xF8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyFWReservedEn_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyFWReservedEn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyFWReservedEn_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyFWReservedEn_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyVTDriftAlarmEn_MASK (0x300U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyVTDriftAlarmEn_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyVTDriftAlarmEn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyVTDriftAlarmEn_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyVTDriftAlarmEn_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyRxFifoCheckEn_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyRxFifoCheckEn_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyHWReservedEn_MASK (0xF800U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyHWReservedEn_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyHWReservedEn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyHWReservedEn_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_PhyHWReservedEn_MASK)
/*! @} */

/*! @name PHYINTERRUPTFWCONTROL - Interrupt Firmware Control Bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyTrngCmpltFW_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyTrngCmpltFW_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyInitCmpltFW_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyInitCmpltFW_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyTrngFailFW_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyTrngFailFW_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyFWReservedFW_MASK (0xF8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyFWReservedFW_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyFWReservedFW(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyFWReservedFW_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_PhyFWReservedFW_MASK)
/*! @} */

/*! @name PHYINTERRUPTMASK - Interrupt Mask Bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyTrngCmpltMsk_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyTrngCmpltMsk_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyInitCmpltMsk_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyInitCmpltMsk_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyTrngFailMsk_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyTrngFailMsk_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyFWReservedMsk_MASK (0xF8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyFWReservedMsk_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyFWReservedMsk(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyFWReservedMsk_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyFWReservedMsk_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyVTDriftAlarmMsk_MASK (0x300U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyVTDriftAlarmMsk_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyVTDriftAlarmMsk(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyVTDriftAlarmMsk_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyVTDriftAlarmMsk_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyRxFifoCheckMsk_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyRxFifoCheckMsk_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyHWReservedMsk_MASK (0xF800U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyHWReservedMsk_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyHWReservedMsk(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyHWReservedMsk_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_PhyHWReservedMsk_MASK)
/*! @} */

/*! @name PHYINTERRUPTCLEAR - Interrupt Clear Bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyTrngCmpltClr_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyTrngCmpltClr_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyInitCmpltClr_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyInitCmpltClr_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyTrngFailClr_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyTrngFailClr_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyFWReservedClr_MASK (0xF8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyFWReservedClr_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyFWReservedClr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyFWReservedClr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyFWReservedClr_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyVTDriftAlarmClr_MASK (0x300U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyVTDriftAlarmClr_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyVTDriftAlarmClr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyVTDriftAlarmClr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyVTDriftAlarmClr_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyRxFifoCheckClr_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyRxFifoCheckClr_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyHWReservedClr_MASK (0xF800U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyHWReservedClr_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyHWReservedClr(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyHWReservedClr_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_PhyHWReservedClr_MASK)
/*! @} */

/*! @name PHYINTERRUPTSTATUS - Interrupt Status Bits */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyTrngCmplt_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyTrngCmplt_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyInitCmplt_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyInitCmplt_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyTrngFail_MASK (0x4U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyTrngFail_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyFWReserved_MASK (0xF8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyFWReserved_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyFWReserved(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyFWReserved_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyFWReserved_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_VTDriftAlarm_MASK (0x300U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_VTDriftAlarm_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_VTDriftAlarm(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_VTDriftAlarm_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_VTDriftAlarm_MASK)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyRxFifoCheck_MASK (0x400U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyRxFifoCheck_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyHWReserved_MASK (0xF800U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyHWReserved_SHIFT (11U)
#define DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyHWReserved(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyHWReserved_SHIFT)) & DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_PhyHWReserved_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS0 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_HwtSwizzleHwtAddress0_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_HwtSwizzleHwtAddress0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_HwtSwizzleHwtAddress0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_HwtSwizzleHwtAddress0_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_HwtSwizzleHwtAddress0_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS1 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_HwtSwizzleHwtAddress1_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_HwtSwizzleHwtAddress1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_HwtSwizzleHwtAddress1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_HwtSwizzleHwtAddress1_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_HwtSwizzleHwtAddress1_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS2 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_HwtSwizzleHwtAddress2_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_HwtSwizzleHwtAddress2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_HwtSwizzleHwtAddress2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_HwtSwizzleHwtAddress2_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_HwtSwizzleHwtAddress2_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS3 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_HwtSwizzleHwtAddress3_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_HwtSwizzleHwtAddress3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_HwtSwizzleHwtAddress3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_HwtSwizzleHwtAddress3_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_HwtSwizzleHwtAddress3_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS4 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_HwtSwizzleHwtAddress4_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_HwtSwizzleHwtAddress4_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_HwtSwizzleHwtAddress4(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_HwtSwizzleHwtAddress4_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_HwtSwizzleHwtAddress4_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS5 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_HwtSwizzleHwtAddress5_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_HwtSwizzleHwtAddress5_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_HwtSwizzleHwtAddress5(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_HwtSwizzleHwtAddress5_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_HwtSwizzleHwtAddress5_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS6 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_HwtSwizzleHwtAddress6_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_HwtSwizzleHwtAddress6_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_HwtSwizzleHwtAddress6(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_HwtSwizzleHwtAddress6_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_HwtSwizzleHwtAddress6_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS7 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_HwtSwizzleHwtAddress7_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_HwtSwizzleHwtAddress7_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_HwtSwizzleHwtAddress7(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_HwtSwizzleHwtAddress7_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_HwtSwizzleHwtAddress7_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS8 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_HwtSwizzleHwtAddress8_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_HwtSwizzleHwtAddress8_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_HwtSwizzleHwtAddress8(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_HwtSwizzleHwtAddress8_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_HwtSwizzleHwtAddress8_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS9 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_HwtSwizzleHwtAddress9_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_HwtSwizzleHwtAddress9_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_HwtSwizzleHwtAddress9(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_HwtSwizzleHwtAddress9_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_HwtSwizzleHwtAddress9_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS10 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_HwtSwizzleHwtAddress10_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_HwtSwizzleHwtAddress10_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_HwtSwizzleHwtAddress10(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_HwtSwizzleHwtAddress10_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_HwtSwizzleHwtAddress10_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS11 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_HwtSwizzleHwtAddress11_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_HwtSwizzleHwtAddress11_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_HwtSwizzleHwtAddress11(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_HwtSwizzleHwtAddress11_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_HwtSwizzleHwtAddress11_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS12 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_HwtSwizzleHwtAddress12_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_HwtSwizzleHwtAddress12_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_HwtSwizzleHwtAddress12(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_HwtSwizzleHwtAddress12_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_HwtSwizzleHwtAddress12_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS13 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_HwtSwizzleHwtAddress13_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_HwtSwizzleHwtAddress13_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_HwtSwizzleHwtAddress13(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_HwtSwizzleHwtAddress13_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_HwtSwizzleHwtAddress13_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS14 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_HwtSwizzleHwtAddress14_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_HwtSwizzleHwtAddress14_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_HwtSwizzleHwtAddress14(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_HwtSwizzleHwtAddress14_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_HwtSwizzleHwtAddress14_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS15 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_HwtSwizzleHwtAddress15_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_HwtSwizzleHwtAddress15_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_HwtSwizzleHwtAddress15(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_HwtSwizzleHwtAddress15_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_HwtSwizzleHwtAddress15_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTADDRESS17 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_HwtSwizzleHwtAddress17_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_HwtSwizzleHwtAddress17_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_HwtSwizzleHwtAddress17(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_HwtSwizzleHwtAddress17_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_HwtSwizzleHwtAddress17_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTACTN - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_HwtSwizzleHwtActN_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_HwtSwizzleHwtActN_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_HwtSwizzleHwtActN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_HwtSwizzleHwtActN_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_HwtSwizzleHwtActN_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTBANK0 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_HwtSwizzleHwtBank0_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_HwtSwizzleHwtBank0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_HwtSwizzleHwtBank0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_HwtSwizzleHwtBank0_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_HwtSwizzleHwtBank0_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTBANK1 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_HwtSwizzleHwtBank1_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_HwtSwizzleHwtBank1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_HwtSwizzleHwtBank1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_HwtSwizzleHwtBank1_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_HwtSwizzleHwtBank1_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTBANK2 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_HwtSwizzleHwtBank2_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_HwtSwizzleHwtBank2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_HwtSwizzleHwtBank2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_HwtSwizzleHwtBank2_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_HwtSwizzleHwtBank2_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTBG0 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_HwtSwizzleHwtBg0_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_HwtSwizzleHwtBg0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_HwtSwizzleHwtBg0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_HwtSwizzleHwtBg0_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_HwtSwizzleHwtBg0_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTBG1 - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_HwtSwizzleHwtBg1_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_HwtSwizzleHwtBg1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_HwtSwizzleHwtBg1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_HwtSwizzleHwtBg1_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_HwtSwizzleHwtBg1_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTCASN - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_HwtSwizzleHwtCasN_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_HwtSwizzleHwtCasN_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_HwtSwizzleHwtCasN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_HwtSwizzleHwtCasN_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_HwtSwizzleHwtCasN_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTRASN - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_HwtSwizzleHwtRasN_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_HwtSwizzleHwtRasN_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_HwtSwizzleHwtRasN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_HwtSwizzleHwtRasN_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_HwtSwizzleHwtRasN_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTWEN - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_HwtSwizzleHwtWeN_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_HwtSwizzleHwtWeN_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_HwtSwizzleHwtWeN(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_HwtSwizzleHwtWeN_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_HwtSwizzleHwtWeN_MASK)
/*! @} */

/*! @name HWTSWIZZLEHWTPARITYIN - Signal swizzle selection for HWT swizzle */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_HwtSwizzleHwtParityIn_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_HwtSwizzleHwtParityIn_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_HwtSwizzleHwtParityIn(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_HwtSwizzleHwtParityIn_SHIFT)) & DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_HwtSwizzleHwtParityIn_MASK)
/*! @} */

/*! @name DFIHANDSHAKEDELAYS0 - Add assertion/deassertion delays on handshake signals Logic assumes that dfi signal assertions exceed the programmed delays */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdAckDelay0_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdAckDelay0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdAckDelay0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdAckDelay0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdAckDelay0_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdReqDelay0_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdReqDelay0_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdReqDelay0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdReqDelay0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_PhyUpdReqDelay0_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdAckDelay0_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdAckDelay0_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdAckDelay0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdAckDelay0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdAckDelay0_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdReqDelay0_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdReqDelay0_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdReqDelay0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdReqDelay0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_CtrlUpdReqDelay0_MASK)
/*! @} */

/*! @name DFIHANDSHAKEDELAYS1 - Add assertion/deassertion delays on handshake signals Logic assumes that dfi signal assertions exceed the programmed delays */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdAckDelay1_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdAckDelay1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdAckDelay1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdAckDelay1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdAckDelay1_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdReqDelay1_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdReqDelay1_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdReqDelay1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdReqDelay1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_PhyUpdReqDelay1_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdAckDelay1_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdAckDelay1_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdAckDelay1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdAckDelay1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdAckDelay1_MASK)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdReqDelay1_MASK (0xF000U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdReqDelay1_SHIFT (12U)
#define DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdReqDelay1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdReqDelay1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_CtrlUpdReqDelay1_MASK)
/*! @} */

/*! @name CALUCLKINFO_P1 - Impedance Calibration Clock Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_CalUClkTicksPer1uS_MASK (0x3FFU)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_CalUClkTicksPer1uS_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_CalUClkTicksPer1uS(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_CalUClkTicksPer1uS_SHIFT)) & DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_CalUClkTicksPer1uS_MASK)
/*! @} */

/*! @name SEQ0BDLY0_P1 - PHY Initialization Engine (PIE) Delay Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_Seq0BDLY0_p1_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_Seq0BDLY0_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_Seq0BDLY0_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_Seq0BDLY0_p1_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_Seq0BDLY0_p1_MASK)
/*! @} */

/*! @name SEQ0BDLY1_P1 - PHY Initialization Engine (PIE) Delay Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_Seq0BDLY1_p1_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_Seq0BDLY1_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_Seq0BDLY1_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_Seq0BDLY1_p1_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_Seq0BDLY1_p1_MASK)
/*! @} */

/*! @name SEQ0BDLY2_P1 - PHY Initialization Engine (PIE) Delay Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_Seq0BDLY2_p1_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_Seq0BDLY2_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_Seq0BDLY2_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_Seq0BDLY2_p1_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_Seq0BDLY2_p1_MASK)
/*! @} */

/*! @name SEQ0BDLY3_P1 - PHY Initialization Engine (PIE) Delay Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_Seq0BDLY3_p1_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_Seq0BDLY3_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_Seq0BDLY3_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_Seq0BDLY3_p1_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_Seq0BDLY3_p1_MASK)
/*! @} */

/*! @name PPTTRAINSETUP_P1 - Setup Intervals for DFI PHY Master operations */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrTrainInterval_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrTrainInterval_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrTrainInterval(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrTrainInterval_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrTrainInterval_MASK)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrMaxReqToAck_MASK (0x70U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrMaxReqToAck_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrMaxReqToAck(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrMaxReqToAck_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_PhyMstrMaxReqToAck_MASK)
/*! @} */

/*! @name TRISTATEMODECA_P1 - Mode select register for MEMCLK/Address/Command Tristates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_DisDynAdrTri_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_DisDynAdrTri_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_DDR2TMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_DDR2TMode_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_CkDisVal_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_CkDisVal_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_CkDisVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_CkDisVal_SHIFT)) & DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_CkDisVal_MASK)
/*! @} */

/*! @name HWTMRL_P1 - HWT MaxReadLatency. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTMRL_P1_HwtMRL_p1_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTMRL_P1_HwtMRL_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTMRL_P1_HwtMRL_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTMRL_P1_HwtMRL_p1_SHIFT)) & DWC_DDRPHYA_MASTER_HWTMRL_P1_HwtMRL_p1_MASK)
/*! @} */

/*! @name DQSPREAMBLECONTROL_P1 - Control the PHY logic related to the read and write DQS preamble */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_TwoTckRxDqsPre_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_TwoTckRxDqsPre_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_TwoTckTxDqsPre_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_TwoTckTxDqsPre_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_PositionDfeInit_MASK (0x1CU)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_PositionDfeInit_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_PositionDfeInit(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_PositionDfeInit_SHIFT)) & DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_PositionDfeInit_MASK)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4TglTwoTckTxDqsPre_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4TglTwoTckTxDqsPre_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4PostambleExt_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4PostambleExt_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4SttcPreBridgeRxEn_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_LP4SttcPreBridgeRxEn_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_WDQSEXTENSION_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_WDQSEXTENSION_SHIFT (8U)
/*! @} */

/*! @name DMIPINPRESENT_P1 - This Register is used to enable the Read-DBI function in each DBYTE */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P1_RdDbiEnabled_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P1_RdDbiEnabled_SHIFT (0U)
/*! @} */

/*! @name ARDPTRINITVAL_P1 - Address/Command FIFO ReadPointer Initial Value */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_ARdPtrInitVal_p1_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_ARdPtrInitVal_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_ARdPtrInitVal_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_ARdPtrInitVal_p1_SHIFT)) & DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_ARdPtrInitVal_p1_MASK)
/*! @} */

/*! @name PROCODTTIMECTL_P1 - READ DATA On-Die Termination Timing Control (by PHY) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtTailWidth_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtTailWidth_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtTailWidth(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtTailWidth_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtTailWidth_MASK)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtStartDelay_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtStartDelay_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtStartDelay(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtStartDelay_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_POdtStartDelay_MASK)
/*! @} */

/*! @name DLLGAINCTL_P1 - DLL gain control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainIV_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainIV_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainIV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainIV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainIV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainTV_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainTV_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainTV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainTV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllGainTV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllSeedSel_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllSeedSel_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllSeedSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllSeedSel_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_DllSeedSel_MASK)
/*! @} */

/*! @name DFIRDDATACSDESTMAP_P1 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_DfiRdDestm3_MASK)
/*! @} */

/*! @name VREFINGLOBAL_P1 - PHY Global Vref Controls */
/*! @{ */
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInSel_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInSel_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInSel_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInDAC_MASK (0x3F8U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInDAC_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInDAC(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInDAC_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInDAC_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInTrim_MASK (0x3C00U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInTrim_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInTrim(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInTrim_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInTrim_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInMode_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_GlobalVrefInMode_SHIFT (14U)
/*! @} */

/*! @name DFIWRDATACSDESTMAP_P1 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_DfiWrDestm3_MASK)
/*! @} */

/*! @name PLLCTRL2_P1 - PState dependent PLL Control Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P1_PllFreqSel_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P1_PllFreqSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P1_PllFreqSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL2_P1_PllFreqSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL2_P1_PllFreqSel_MASK)
/*! @} */

/*! @name PLLCTRL1_P1 - PState dependent PLL Control Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpIntCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpIntCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpIntCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpIntCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpIntCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpPropCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpPropCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpPropCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpPropCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P1_PllCpPropCtrl_MASK)
/*! @} */

/*! @name PLLTESTMODE_P1 - Additional controls for PLL CP/VCO modes of operation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_PllTestMode_p1_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_PllTestMode_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_PllTestMode_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_PllTestMode_p1_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_PllTestMode_p1_MASK)
/*! @} */

/*! @name PLLCTRL4_P1 - PState dependent PLL Control Register 4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpIntGsCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpIntGsCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpIntGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpIntGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpIntGsCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpPropGsCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpPropGsCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpPropGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpPropGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P1_PllCpPropGsCtrl_MASK)
/*! @} */

/*! @name DFIFREQRATIO_P1 - DFI Frequency Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_DfiFreqRatio_p1_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_DfiFreqRatio_p1_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_DfiFreqRatio_p1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_DfiFreqRatio_p1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_DfiFreqRatio_p1_MASK)
/*! @} */

/*! @name CALUCLKINFO_P2 - Impedance Calibration Clock Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_CalUClkTicksPer1uS_MASK (0x3FFU)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_CalUClkTicksPer1uS_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_CalUClkTicksPer1uS(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_CalUClkTicksPer1uS_SHIFT)) & DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_CalUClkTicksPer1uS_MASK)
/*! @} */

/*! @name SEQ0BDLY0_P2 - PHY Initialization Engine (PIE) Delay Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_Seq0BDLY0_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_Seq0BDLY0_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_Seq0BDLY0_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_Seq0BDLY0_p2_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_Seq0BDLY0_p2_MASK)
/*! @} */

/*! @name SEQ0BDLY1_P2 - PHY Initialization Engine (PIE) Delay Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_Seq0BDLY1_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_Seq0BDLY1_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_Seq0BDLY1_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_Seq0BDLY1_p2_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_Seq0BDLY1_p2_MASK)
/*! @} */

/*! @name SEQ0BDLY2_P2 - PHY Initialization Engine (PIE) Delay Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_Seq0BDLY2_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_Seq0BDLY2_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_Seq0BDLY2_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_Seq0BDLY2_p2_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_Seq0BDLY2_p2_MASK)
/*! @} */

/*! @name SEQ0BDLY3_P2 - PHY Initialization Engine (PIE) Delay Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_Seq0BDLY3_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_Seq0BDLY3_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_Seq0BDLY3_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_Seq0BDLY3_p2_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_Seq0BDLY3_p2_MASK)
/*! @} */

/*! @name PPTTRAINSETUP_P2 - Setup Intervals for DFI PHY Master operations */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrTrainInterval_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrTrainInterval_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrTrainInterval(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrTrainInterval_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrTrainInterval_MASK)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrMaxReqToAck_MASK (0x70U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrMaxReqToAck_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrMaxReqToAck(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrMaxReqToAck_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_PhyMstrMaxReqToAck_MASK)
/*! @} */

/*! @name TRISTATEMODECA_P2 - Mode select register for MEMCLK/Address/Command Tristates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_DisDynAdrTri_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_DisDynAdrTri_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_DDR2TMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_DDR2TMode_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_CkDisVal_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_CkDisVal_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_CkDisVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_CkDisVal_SHIFT)) & DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_CkDisVal_MASK)
/*! @} */

/*! @name HWTMRL_P2 - HWT MaxReadLatency. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTMRL_P2_HwtMRL_p2_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTMRL_P2_HwtMRL_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTMRL_P2_HwtMRL_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTMRL_P2_HwtMRL_p2_SHIFT)) & DWC_DDRPHYA_MASTER_HWTMRL_P2_HwtMRL_p2_MASK)
/*! @} */

/*! @name DQSPREAMBLECONTROL_P2 - Control the PHY logic related to the read and write DQS preamble */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_TwoTckRxDqsPre_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_TwoTckRxDqsPre_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_TwoTckTxDqsPre_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_TwoTckTxDqsPre_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_PositionDfeInit_MASK (0x1CU)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_PositionDfeInit_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_PositionDfeInit(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_PositionDfeInit_SHIFT)) & DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_PositionDfeInit_MASK)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4TglTwoTckTxDqsPre_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4TglTwoTckTxDqsPre_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4PostambleExt_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4PostambleExt_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4SttcPreBridgeRxEn_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_LP4SttcPreBridgeRxEn_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_WDQSEXTENSION_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_WDQSEXTENSION_SHIFT (8U)
/*! @} */

/*! @name DMIPINPRESENT_P2 - This Register is used to enable the Read-DBI function in each DBYTE */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P2_RdDbiEnabled_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P2_RdDbiEnabled_SHIFT (0U)
/*! @} */

/*! @name ARDPTRINITVAL_P2 - Address/Command FIFO ReadPointer Initial Value */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_ARdPtrInitVal_p2_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_ARdPtrInitVal_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_ARdPtrInitVal_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_ARdPtrInitVal_p2_SHIFT)) & DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_ARdPtrInitVal_p2_MASK)
/*! @} */

/*! @name PROCODTTIMECTL_P2 - READ DATA On-Die Termination Timing Control (by PHY) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtTailWidth_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtTailWidth_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtTailWidth(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtTailWidth_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtTailWidth_MASK)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtStartDelay_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtStartDelay_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtStartDelay(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtStartDelay_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_POdtStartDelay_MASK)
/*! @} */

/*! @name DLLGAINCTL_P2 - DLL gain control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainIV_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainIV_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainIV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainIV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainIV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainTV_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainTV_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainTV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainTV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllGainTV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllSeedSel_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllSeedSel_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllSeedSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllSeedSel_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_DllSeedSel_MASK)
/*! @} */

/*! @name DFIRDDATACSDESTMAP_P2 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_DfiRdDestm3_MASK)
/*! @} */

/*! @name VREFINGLOBAL_P2 - PHY Global Vref Controls */
/*! @{ */
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInSel_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInSel_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInSel_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInDAC_MASK (0x3F8U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInDAC_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInDAC(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInDAC_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInDAC_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInTrim_MASK (0x3C00U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInTrim_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInTrim(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInTrim_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInTrim_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInMode_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_GlobalVrefInMode_SHIFT (14U)
/*! @} */

/*! @name DFIWRDATACSDESTMAP_P2 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_DfiWrDestm3_MASK)
/*! @} */

/*! @name PLLCTRL2_P2 - PState dependent PLL Control Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P2_PllFreqSel_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P2_PllFreqSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P2_PllFreqSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL2_P2_PllFreqSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL2_P2_PllFreqSel_MASK)
/*! @} */

/*! @name PLLCTRL1_P2 - PState dependent PLL Control Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpIntCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpIntCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpIntCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpIntCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpIntCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpPropCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpPropCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpPropCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpPropCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P2_PllCpPropCtrl_MASK)
/*! @} */

/*! @name PLLTESTMODE_P2 - Additional controls for PLL CP/VCO modes of operation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_PllTestMode_p2_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_PllTestMode_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_PllTestMode_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_PllTestMode_p2_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_PllTestMode_p2_MASK)
/*! @} */

/*! @name PLLCTRL4_P2 - PState dependent PLL Control Register 4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpIntGsCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpIntGsCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpIntGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpIntGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpIntGsCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpPropGsCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpPropGsCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpPropGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpPropGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P2_PllCpPropGsCtrl_MASK)
/*! @} */

/*! @name DFIFREQRATIO_P2 - DFI Frequency Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_DfiFreqRatio_p2_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_DfiFreqRatio_p2_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_DfiFreqRatio_p2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_DfiFreqRatio_p2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_DfiFreqRatio_p2_MASK)
/*! @} */

/*! @name CALUCLKINFO_P3 - Impedance Calibration Clock Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_CalUClkTicksPer1uS_MASK (0x3FFU)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_CalUClkTicksPer1uS_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_CalUClkTicksPer1uS(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_CalUClkTicksPer1uS_SHIFT)) & DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_CalUClkTicksPer1uS_MASK)
/*! @} */

/*! @name SEQ0BDLY0_P3 - PHY Initialization Engine (PIE) Delay Register 0 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_Seq0BDLY0_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_Seq0BDLY0_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_Seq0BDLY0_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_Seq0BDLY0_p3_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_Seq0BDLY0_p3_MASK)
/*! @} */

/*! @name SEQ0BDLY1_P3 - PHY Initialization Engine (PIE) Delay Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_Seq0BDLY1_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_Seq0BDLY1_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_Seq0BDLY1_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_Seq0BDLY1_p3_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_Seq0BDLY1_p3_MASK)
/*! @} */

/*! @name SEQ0BDLY2_P3 - PHY Initialization Engine (PIE) Delay Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_Seq0BDLY2_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_Seq0BDLY2_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_Seq0BDLY2_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_Seq0BDLY2_p3_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_Seq0BDLY2_p3_MASK)
/*! @} */

/*! @name SEQ0BDLY3_P3 - PHY Initialization Engine (PIE) Delay Register 3 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_Seq0BDLY3_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_Seq0BDLY3_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_Seq0BDLY3_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_Seq0BDLY3_p3_SHIFT)) & DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_Seq0BDLY3_p3_MASK)
/*! @} */

/*! @name PPTTRAINSETUP_P3 - Setup Intervals for DFI PHY Master operations */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrTrainInterval_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrTrainInterval_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrTrainInterval(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrTrainInterval_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrTrainInterval_MASK)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrMaxReqToAck_MASK (0x70U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrMaxReqToAck_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrMaxReqToAck(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrMaxReqToAck_SHIFT)) & DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_PhyMstrMaxReqToAck_MASK)
/*! @} */

/*! @name TRISTATEMODECA_P3 - Mode select register for MEMCLK/Address/Command Tristates */
/*! @{ */
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_DisDynAdrTri_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_DisDynAdrTri_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_DDR2TMode_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_DDR2TMode_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_CkDisVal_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_CkDisVal_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_CkDisVal(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_CkDisVal_SHIFT)) & DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_CkDisVal_MASK)
/*! @} */

/*! @name HWTMRL_P3 - HWT MaxReadLatency. */
/*! @{ */
#define DWC_DDRPHYA_MASTER_HWTMRL_P3_HwtMRL_p3_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_HWTMRL_P3_HwtMRL_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_HWTMRL_P3_HwtMRL_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_HWTMRL_P3_HwtMRL_p3_SHIFT)) & DWC_DDRPHYA_MASTER_HWTMRL_P3_HwtMRL_p3_MASK)
/*! @} */

/*! @name DQSPREAMBLECONTROL_P3 - Control the PHY logic related to the read and write DQS preamble */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_TwoTckRxDqsPre_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_TwoTckRxDqsPre_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_TwoTckTxDqsPre_MASK (0x2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_TwoTckTxDqsPre_SHIFT (1U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_PositionDfeInit_MASK (0x1CU)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_PositionDfeInit_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_PositionDfeInit(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_PositionDfeInit_SHIFT)) & DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_PositionDfeInit_MASK)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4TglTwoTckTxDqsPre_MASK (0x20U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4TglTwoTckTxDqsPre_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4PostambleExt_MASK (0x40U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4PostambleExt_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4SttcPreBridgeRxEn_MASK (0x80U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_LP4SttcPreBridgeRxEn_SHIFT (7U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_WDQSEXTENSION_MASK (0x100U)
#define DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_WDQSEXTENSION_SHIFT (8U)
/*! @} */

/*! @name DMIPINPRESENT_P3 - This Register is used to enable the Read-DBI function in each DBYTE */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P3_RdDbiEnabled_MASK (0x1U)
#define DWC_DDRPHYA_MASTER_DMIPINPRESENT_P3_RdDbiEnabled_SHIFT (0U)
/*! @} */

/*! @name ARDPTRINITVAL_P3 - Address/Command FIFO ReadPointer Initial Value */
/*! @{ */
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_ARdPtrInitVal_p3_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_ARdPtrInitVal_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_ARdPtrInitVal_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_ARdPtrInitVal_p3_SHIFT)) & DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_ARdPtrInitVal_p3_MASK)
/*! @} */

/*! @name PROCODTTIMECTL_P3 - READ DATA On-Die Termination Timing Control (by PHY) */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtTailWidth_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtTailWidth_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtTailWidth(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtTailWidth_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtTailWidth_MASK)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtStartDelay_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtStartDelay_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtStartDelay(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtStartDelay_SHIFT)) & DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_POdtStartDelay_MASK)
/*! @} */

/*! @name DLLGAINCTL_P3 - DLL gain control */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainIV_MASK (0xFU)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainIV_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainIV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainIV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainIV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainTV_MASK (0xF0U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainTV_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainTV(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainTV_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllGainTV_MASK)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllSeedSel_MASK (0xF00U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllSeedSel_SHIFT (8U)
#define DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllSeedSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllSeedSel_SHIFT)) & DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_DllSeedSel_MASK)
/*! @} */

/*! @name DFIRDDATACSDESTMAP_P3 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_DfiRdDestm3_MASK)
/*! @} */

/*! @name VREFINGLOBAL_P3 - PHY Global Vref Controls */
/*! @{ */
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInSel_MASK (0x7U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInSel_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInSel_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInDAC_MASK (0x3F8U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInDAC_SHIFT (3U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInDAC(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInDAC_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInDAC_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInTrim_MASK (0x3C00U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInTrim_SHIFT (10U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInTrim(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInTrim_SHIFT)) & DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInTrim_MASK)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInMode_MASK (0x4000U)
#define DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_GlobalVrefInMode_SHIFT (14U)
/*! @} */

/*! @name DFIWRDATACSDESTMAP_P3 - Maps dfi_rddata_cs_n to destination dimm timing group for use with D4 LRDIMM */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm0_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm0_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm0(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm0_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm0_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm1_MASK (0xCU)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm1_SHIFT (2U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm1(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm1_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm1_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm2_MASK (0x30U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm2_SHIFT (4U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm2(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm2_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm2_MASK)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm3_MASK (0xC0U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm3_SHIFT (6U)
#define DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_DfiWrDestm3_MASK)
/*! @} */

/*! @name PLLCTRL2_P3 - PState dependent PLL Control Register 2 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P3_PllFreqSel_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P3_PllFreqSel_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL2_P3_PllFreqSel(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL2_P3_PllFreqSel_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL2_P3_PllFreqSel_MASK)
/*! @} */

/*! @name PLLCTRL1_P3 - PState dependent PLL Control Register 1 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpIntCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpIntCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpIntCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpIntCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpIntCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpPropCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpPropCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpPropCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpPropCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL1_P3_PllCpPropCtrl_MASK)
/*! @} */

/*! @name PLLTESTMODE_P3 - Additional controls for PLL CP/VCO modes of operation */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_PllTestMode_p3_MASK (0xFFFFU)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_PllTestMode_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_PllTestMode_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_PllTestMode_p3_SHIFT)) & DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_PllTestMode_p3_MASK)
/*! @} */

/*! @name PLLCTRL4_P3 - PState dependent PLL Control Register 4 */
/*! @{ */
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpIntGsCtrl_MASK (0x1FU)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpIntGsCtrl_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpIntGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpIntGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpIntGsCtrl_MASK)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpPropGsCtrl_MASK (0x1E0U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpPropGsCtrl_SHIFT (5U)
#define DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpPropGsCtrl(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpPropGsCtrl_SHIFT)) & DWC_DDRPHYA_MASTER_PLLCTRL4_P3_PllCpPropGsCtrl_MASK)
/*! @} */

/*! @name DFIFREQRATIO_P3 - DFI Frequency Ratio */
/*! @{ */
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_DfiFreqRatio_p3_MASK (0x3U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_DfiFreqRatio_p3_SHIFT (0U)
#define DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_DfiFreqRatio_p3(x) (((uint16_t)(((uint16_t)(x)) << DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_DfiFreqRatio_p3_SHIFT)) & DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_DfiFreqRatio_p3_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_MASTER_Register_Masks */


/* DWC_DDRPHYA_MASTER - Peripheral instance base addresses */
/** Peripheral DWC_DDRPHYA_MASTER0 base pointer */
#define DWC_DDRPHYA_MASTER0_BASE_PTR             ((DWC_DDRPHYA_MASTER_MemMapPtr)0x3C020000u)
/** Array initializer of DWC_DDRPHYA_MASTER peripheral base pointers */
#define DWC_DDRPHYA_MASTER_BASE_PTRS             { DWC_DDRPHYA_MASTER0_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- DWC_DDRPHYA_MASTER - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup DWC_DDRPHYA_MASTER_Register_Accessor_Macros DWC_DDRPHYA_MASTER - Register accessor macros
 * @{
 */


/* DWC_DDRPHYA_MASTER - Register instance definitions */
/* DWC_DDRPHYA_MASTER0 */
#define DWC_DDRPHYA_MASTER0_RXFIFOINIT           DWC_DDRPHYA_MASTER_RXFIFOINIT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_FORCECLKDISABLE      DWC_DDRPHYA_MASTER_FORCECLKDISABLE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_FORCEINTERNALUPDATE  DWC_DDRPHYA_MASTER_FORCEINTERNALUPDATE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYCONFIG            DWC_DDRPHYA_MASTER_PHYCONFIG_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PGCR                 DWC_DDRPHYA_MASTER_PGCR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TESTBUMPCNTRL1       DWC_DDRPHYA_MASTER_TESTBUMPCNTRL1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALUCLKINFO_P0       DWC_DDRPHYA_MASTER_CALUCLKINFO_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TESTBUMPCNTRL        DWC_DDRPHYA_MASTER_TESTBUMPCNTRL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY0_P0         DWC_DDRPHYA_MASTER_SEQ0BDLY0_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY1_P0         DWC_DDRPHYA_MASTER_SEQ0BDLY1_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY2_P0         DWC_DDRPHYA_MASTER_SEQ0BDLY2_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY3_P0         DWC_DDRPHYA_MASTER_SEQ0BDLY3_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYALERTSTATUS       DWC_DDRPHYA_MASTER_PHYALERTSTATUS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PPTTRAINSETUP_P0     DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ATESTMODE            DWC_DDRPHYA_MASTER_ATESTMODE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TXCALBINP            DWC_DDRPHYA_MASTER_TXCALBINP_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TXCALBINN            DWC_DDRPHYA_MASTER_TXCALBINN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TXCALPOVR            DWC_DDRPHYA_MASTER_TXCALPOVR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TXCALNOVR            DWC_DDRPHYA_MASTER_TXCALNOVR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIMODE              DWC_DDRPHYA_MASTER_DFIMODE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TRISTATEMODECA_P0    DWC_DDRPHYA_MASTER_TRISTATEMODECA_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MTESTMUXSEL          DWC_DDRPHYA_MASTER_MTESTMUXSEL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MTESTPGMINFO         DWC_DDRPHYA_MASTER_MTESTPGMINFO_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DYNPWRDNUP           DWC_DDRPHYA_MASTER_DYNPWRDNUP_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYTID               DWC_DDRPHYA_MASTER_PHYTID_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTMRL_P0            DWC_DDRPHYA_MASTER_HWTMRL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIPHYUPD            DWC_DDRPHYA_MASTER_DFIPHYUPD_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PDAMRSWRITEMODE      DWC_DDRPHYA_MASTER_PDAMRSWRITEMODE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIGEARDOWNCTL       DWC_DDRPHYA_MASTER_DFIGEARDOWNCTL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DQSPREAMBLECONTROL_P0 DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MASTERX4CONFIG       DWC_DDRPHYA_MASTER_MASTERX4CONFIG_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_WRLEVBITS            DWC_DDRPHYA_MASTER_WRLEVBITS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ENABLECSMULTICAST    DWC_DDRPHYA_MASTER_ENABLECSMULTICAST_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTLPCSMULTICAST     DWC_DDRPHYA_MASTER_HWTLPCSMULTICAST_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ACX4ANIBDIS          DWC_DDRPHYA_MASTER_ACX4ANIBDIS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DMIPINPRESENT_P0     DWC_DDRPHYA_MASTER_DMIPINPRESENT_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ARDPTRINITVAL_P0     DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DBYTEDLLMODECNTRL    DWC_DDRPHYA_MASTER_DBYTEDLLMODECNTRL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALOFFSETS           DWC_DDRPHYA_MASTER_CALOFFSETS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SARINITVALS          DWC_DDRPHYA_MASTER_SARINITVALS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALPEXTOVR           DWC_DDRPHYA_MASTER_CALPEXTOVR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALCMPR5OVR          DWC_DDRPHYA_MASTER_CALCMPR5OVR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALNINTOVR           DWC_DDRPHYA_MASTER_CALNINTOVR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALDRVSTR0           DWC_DDRPHYA_MASTER_CALDRVSTR0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PROCODTTIMECTL_P0    DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MEMALERTCONTROL      DWC_DDRPHYA_MASTER_MEMALERTCONTROL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MEMALERTCONTROL2     DWC_DDRPHYA_MASTER_MEMALERTCONTROL2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MEMRESETL            DWC_DDRPHYA_MASTER_MEMRESETL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DRIVECSLOWONTOHIGH   DWC_DDRPHYA_MASTER_DRIVECSLOWONTOHIGH_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PUBMODE              DWC_DDRPHYA_MASTER_PUBMODE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MISCPHYSTATUS        DWC_DDRPHYA_MASTER_MISCPHYSTATUS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CORELOOPBACKSEL      DWC_DDRPHYA_MASTER_CORELOOPBACKSEL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLTRAINPARAM        DWC_DDRPHYA_MASTER_DLLTRAINPARAM_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTLPCSENBYPASS      DWC_DDRPHYA_MASTER_HWTLPCSENBYPASS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFICAMODE            DWC_DDRPHYA_MASTER_DFICAMODE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLCONTROL           DWC_DDRPHYA_MASTER_DLLCONTROL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PULSEDLLUPDATEPHASE  DWC_DDRPHYA_MASTER_PULSEDLLUPDATEPHASE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLGAINCTL_P0        DWC_DDRPHYA_MASTER_DLLGAINCTL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALRATE              DWC_DDRPHYA_MASTER_CALRATE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALZAP               DWC_DDRPHYA_MASTER_CALZAP_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PSTATE               DWC_DDRPHYA_MASTER_PSTATE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLOUTGATECONTROL    DWC_DDRPHYA_MASTER_PLLOUTGATECONTROL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PORCONTROL           DWC_DDRPHYA_MASTER_PORCONTROL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALBUSY              DWC_DDRPHYA_MASTER_CALBUSY_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALMISC2             DWC_DDRPHYA_MASTER_CALMISC2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALMISC              DWC_DDRPHYA_MASTER_CALMISC_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALVREFS             DWC_DDRPHYA_MASTER_CALVREFS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALCMPR5             DWC_DDRPHYA_MASTER_CALCMPR5_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALNINT              DWC_DDRPHYA_MASTER_CALNINT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALPEXT              DWC_DDRPHYA_MASTER_CALPEXT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALCMPINVERT         DWC_DDRPHYA_MASTER_CALCMPINVERT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALCMPANACNTRL       DWC_DDRPHYA_MASTER_CALCMPANACNTRL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIRDDATACSDESTMAP_P0 DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_VREFINGLOBAL_P0      DWC_DDRPHYA_MASTER_VREFINGLOBAL_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIWRDATACSDESTMAP_P0 DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MASUPDGOODCTR        DWC_DDRPHYA_MASTER_MASUPDGOODCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYUPD0GOODCTR       DWC_DDRPHYA_MASTER_PHYUPD0GOODCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYUPD1GOODCTR       DWC_DDRPHYA_MASTER_PHYUPD1GOODCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CTLUPD0GOODCTR       DWC_DDRPHYA_MASTER_CTLUPD0GOODCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CTLUPD1GOODCTR       DWC_DDRPHYA_MASTER_CTLUPD1GOODCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MASUPDFAILCTR        DWC_DDRPHYA_MASTER_MASUPDFAILCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYUPD0FAILCTR       DWC_DDRPHYA_MASTER_PHYUPD0FAILCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYUPD1FAILCTR       DWC_DDRPHYA_MASTER_PHYUPD1FAILCTR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYPERFCTRENABLE     DWC_DDRPHYA_MASTER_PHYPERFCTRENABLE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLPWRDN             DWC_DDRPHYA_MASTER_PLLPWRDN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLRESET             DWC_DDRPHYA_MASTER_PLLRESET_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL2_P0          DWC_DDRPHYA_MASTER_PLLCTRL2_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL0             DWC_DDRPHYA_MASTER_PLLCTRL0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL1_P0          DWC_DDRPHYA_MASTER_PLLCTRL1_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLTST               DWC_DDRPHYA_MASTER_PLLTST_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLLOCKSTATUS        DWC_DDRPHYA_MASTER_PLLLOCKSTATUS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLTESTMODE_P0       DWC_DDRPHYA_MASTER_PLLTESTMODE_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL3             DWC_DDRPHYA_MASTER_PLLCTRL3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL4_P0          DWC_DDRPHYA_MASTER_PLLCTRL4_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLENDOFCAL          DWC_DDRPHYA_MASTER_PLLENDOFCAL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLSTANDBYEFF        DWC_DDRPHYA_MASTER_PLLSTANDBYEFF_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLDACVALOUT         DWC_DDRPHYA_MASTER_PLLDACVALOUT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_LCDLDBGCNTL          DWC_DDRPHYA_MASTER_LCDLDBGCNTL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ACLCDLSTATUS         DWC_DDRPHYA_MASTER_ACLCDLSTATUS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CUSTPHYREV           DWC_DDRPHYA_MASTER_CUSTPHYREV_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYREV               DWC_DDRPHYA_MASTER_PHYREV_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_LP3EXITSEQ0BSTARTVECTOR DWC_DDRPHYA_MASTER_LP3EXITSEQ0BSTARTVECTOR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT0         DWC_DDRPHYA_MASTER_DFIFREQXLAT0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT1         DWC_DDRPHYA_MASTER_DFIFREQXLAT1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT2         DWC_DDRPHYA_MASTER_DFIFREQXLAT2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT3         DWC_DDRPHYA_MASTER_DFIFREQXLAT3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT4         DWC_DDRPHYA_MASTER_DFIFREQXLAT4_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT5         DWC_DDRPHYA_MASTER_DFIFREQXLAT5_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT6         DWC_DDRPHYA_MASTER_DFIFREQXLAT6_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQXLAT7         DWC_DDRPHYA_MASTER_DFIFREQXLAT7_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TXRDPTRINIT          DWC_DDRPHYA_MASTER_TXRDPTRINIT_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIINITCOMPLETE      DWC_DDRPHYA_MASTER_DFIINITCOMPLETE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQRATIO_P0      DWC_DDRPHYA_MASTER_DFIFREQRATIO_P0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_RXFIFOCHECKS         DWC_DDRPHYA_MASTER_RXFIFOCHECKS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MTESTDTOCTRL         DWC_DDRPHYA_MASTER_MTESTDTOCTRL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA0TODFI         DWC_DDRPHYA_MASTER_MAPCAA0TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA1TODFI         DWC_DDRPHYA_MASTER_MAPCAA1TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA2TODFI         DWC_DDRPHYA_MASTER_MAPCAA2TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA3TODFI         DWC_DDRPHYA_MASTER_MAPCAA3TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA4TODFI         DWC_DDRPHYA_MASTER_MAPCAA4TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA5TODFI         DWC_DDRPHYA_MASTER_MAPCAA5TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA6TODFI         DWC_DDRPHYA_MASTER_MAPCAA6TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA7TODFI         DWC_DDRPHYA_MASTER_MAPCAA7TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA8TODFI         DWC_DDRPHYA_MASTER_MAPCAA8TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAA9TODFI         DWC_DDRPHYA_MASTER_MAPCAA9TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB0TODFI         DWC_DDRPHYA_MASTER_MAPCAB0TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB1TODFI         DWC_DDRPHYA_MASTER_MAPCAB1TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB2TODFI         DWC_DDRPHYA_MASTER_MAPCAB2TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB3TODFI         DWC_DDRPHYA_MASTER_MAPCAB3TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB4TODFI         DWC_DDRPHYA_MASTER_MAPCAB4TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB5TODFI         DWC_DDRPHYA_MASTER_MAPCAB5TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB6TODFI         DWC_DDRPHYA_MASTER_MAPCAB6TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB7TODFI         DWC_DDRPHYA_MASTER_MAPCAB7TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB8TODFI         DWC_DDRPHYA_MASTER_MAPCAB8TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_MAPCAB9TODFI         DWC_DDRPHYA_MASTER_MAPCAB9TODFI_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYINTERRUPTENABLE   DWC_DDRPHYA_MASTER_PHYINTERRUPTENABLE_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYINTERRUPTFWCONTROL DWC_DDRPHYA_MASTER_PHYINTERRUPTFWCONTROL_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYINTERRUPTMASK     DWC_DDRPHYA_MASTER_PHYINTERRUPTMASK_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYINTERRUPTCLEAR    DWC_DDRPHYA_MASTER_PHYINTERRUPTCLEAR_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PHYINTERRUPTSTATUS   DWC_DDRPHYA_MASTER_PHYINTERRUPTSTATUS_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS0 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS1 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS2 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS3 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS4 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS4_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS5 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS5_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS6 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS6_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS7 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS7_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS8 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS8_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS9 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS9_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS10 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS10_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS11 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS11_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS12 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS12_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS13 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS13_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS14 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS14_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS15 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS15_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTADDRESS17 DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTADDRESS17_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTACTN    DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTACTN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTBANK0   DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTBANK1   DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTBANK2   DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBANK2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTBG0     DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTBG1     DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTBG1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTCASN    DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTCASN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTRASN    DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTRASN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTWEN     DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTWEN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTSWIZZLEHWTPARITYIN DWC_DDRPHYA_MASTER_HWTSWIZZLEHWTPARITYIN_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIHANDSHAKEDELAYS0  DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS0_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIHANDSHAKEDELAYS1  DWC_DDRPHYA_MASTER_DFIHANDSHAKEDELAYS1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALUCLKINFO_P1       DWC_DDRPHYA_MASTER_CALUCLKINFO_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY0_P1         DWC_DDRPHYA_MASTER_SEQ0BDLY0_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY1_P1         DWC_DDRPHYA_MASTER_SEQ0BDLY1_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY2_P1         DWC_DDRPHYA_MASTER_SEQ0BDLY2_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY3_P1         DWC_DDRPHYA_MASTER_SEQ0BDLY3_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PPTTRAINSETUP_P1     DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TRISTATEMODECA_P1    DWC_DDRPHYA_MASTER_TRISTATEMODECA_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTMRL_P1            DWC_DDRPHYA_MASTER_HWTMRL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DQSPREAMBLECONTROL_P1 DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DMIPINPRESENT_P1     DWC_DDRPHYA_MASTER_DMIPINPRESENT_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ARDPTRINITVAL_P1     DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PROCODTTIMECTL_P1    DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLGAINCTL_P1        DWC_DDRPHYA_MASTER_DLLGAINCTL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIRDDATACSDESTMAP_P1 DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_VREFINGLOBAL_P1      DWC_DDRPHYA_MASTER_VREFINGLOBAL_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIWRDATACSDESTMAP_P1 DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL2_P1          DWC_DDRPHYA_MASTER_PLLCTRL2_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL1_P1          DWC_DDRPHYA_MASTER_PLLCTRL1_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLTESTMODE_P1       DWC_DDRPHYA_MASTER_PLLTESTMODE_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL4_P1          DWC_DDRPHYA_MASTER_PLLCTRL4_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQRATIO_P1      DWC_DDRPHYA_MASTER_DFIFREQRATIO_P1_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALUCLKINFO_P2       DWC_DDRPHYA_MASTER_CALUCLKINFO_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY0_P2         DWC_DDRPHYA_MASTER_SEQ0BDLY0_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY1_P2         DWC_DDRPHYA_MASTER_SEQ0BDLY1_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY2_P2         DWC_DDRPHYA_MASTER_SEQ0BDLY2_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY3_P2         DWC_DDRPHYA_MASTER_SEQ0BDLY3_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PPTTRAINSETUP_P2     DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TRISTATEMODECA_P2    DWC_DDRPHYA_MASTER_TRISTATEMODECA_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTMRL_P2            DWC_DDRPHYA_MASTER_HWTMRL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DQSPREAMBLECONTROL_P2 DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DMIPINPRESENT_P2     DWC_DDRPHYA_MASTER_DMIPINPRESENT_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ARDPTRINITVAL_P2     DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PROCODTTIMECTL_P2    DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLGAINCTL_P2        DWC_DDRPHYA_MASTER_DLLGAINCTL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIRDDATACSDESTMAP_P2 DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_VREFINGLOBAL_P2      DWC_DDRPHYA_MASTER_VREFINGLOBAL_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIWRDATACSDESTMAP_P2 DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL2_P2          DWC_DDRPHYA_MASTER_PLLCTRL2_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL1_P2          DWC_DDRPHYA_MASTER_PLLCTRL1_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLTESTMODE_P2       DWC_DDRPHYA_MASTER_PLLTESTMODE_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL4_P2          DWC_DDRPHYA_MASTER_PLLCTRL4_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQRATIO_P2      DWC_DDRPHYA_MASTER_DFIFREQRATIO_P2_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_CALUCLKINFO_P3       DWC_DDRPHYA_MASTER_CALUCLKINFO_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY0_P3         DWC_DDRPHYA_MASTER_SEQ0BDLY0_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY1_P3         DWC_DDRPHYA_MASTER_SEQ0BDLY1_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY2_P3         DWC_DDRPHYA_MASTER_SEQ0BDLY2_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_SEQ0BDLY3_P3         DWC_DDRPHYA_MASTER_SEQ0BDLY3_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PPTTRAINSETUP_P3     DWC_DDRPHYA_MASTER_PPTTRAINSETUP_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_TRISTATEMODECA_P3    DWC_DDRPHYA_MASTER_TRISTATEMODECA_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_HWTMRL_P3            DWC_DDRPHYA_MASTER_HWTMRL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DQSPREAMBLECONTROL_P3 DWC_DDRPHYA_MASTER_DQSPREAMBLECONTROL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DMIPINPRESENT_P3     DWC_DDRPHYA_MASTER_DMIPINPRESENT_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_ARDPTRINITVAL_P3     DWC_DDRPHYA_MASTER_ARDPTRINITVAL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PROCODTTIMECTL_P3    DWC_DDRPHYA_MASTER_PROCODTTIMECTL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DLLGAINCTL_P3        DWC_DDRPHYA_MASTER_DLLGAINCTL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIRDDATACSDESTMAP_P3 DWC_DDRPHYA_MASTER_DFIRDDATACSDESTMAP_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_VREFINGLOBAL_P3      DWC_DDRPHYA_MASTER_VREFINGLOBAL_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIWRDATACSDESTMAP_P3 DWC_DDRPHYA_MASTER_DFIWRDATACSDESTMAP_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL2_P3          DWC_DDRPHYA_MASTER_PLLCTRL2_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL1_P3          DWC_DDRPHYA_MASTER_PLLCTRL1_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLTESTMODE_P3       DWC_DDRPHYA_MASTER_PLLTESTMODE_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_PLLCTRL4_P3          DWC_DDRPHYA_MASTER_PLLCTRL4_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)
#define DWC_DDRPHYA_MASTER0_DFIFREQRATIO_P3      DWC_DDRPHYA_MASTER_DFIFREQRATIO_P3_REG(DWC_DDRPHYA_MASTER0_BASE_PTR)

/*!
 * @}
 */ /* end of group DWC_DDRPHYA_MASTER_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group DWC_DDRPHYA_MASTER_Peripheral */


/* ----------------------------------------------------------------------------
   -- ECSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Peripheral ECSPI
 * @{
 */

/** ECSPI - Peripheral register structure */
typedef struct ECSPI_MemMap {
  uint32_t RXDATA;                                 /**< Receive Data Register, offset: 0x0 */
  uint32_t TXDATA;                                 /**< Transmit Data Register, offset: 0x4 */
  uint32_t CONREG;                                 /**< Control Register, offset: 0x8 */
  uint32_t CONFIGREG;                              /**< Config Register, offset: 0xC */
  uint32_t INTREG;                                 /**< Interrupt Control Register, offset: 0x10 */
  uint32_t DMAREG;                                 /**< DMA Control Register, offset: 0x14 */
  uint32_t STATREG;                                /**< Status Register, offset: 0x18 */
  uint32_t PERIODREG;                              /**< Sample Period Control Register, offset: 0x1C */
  uint32_t TESTREG;                                /**< Test Control Register, offset: 0x20 */
  uint8_t RESERVED_0[28];
  uint32_t MSGDATA;                                /**< Message Data Register, offset: 0x40 */
} volatile *ECSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ECSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Accessor_Macros ECSPI - Register accessor macros
 * @{
 */


/* ECSPI - Register accessors */
#define ECSPI_RXDATA_REG(base)                   ((base)->RXDATA)
#define ECSPI_TXDATA_REG(base)                   ((base)->TXDATA)
#define ECSPI_CONREG_REG(base)                   ((base)->CONREG)
#define ECSPI_CONFIGREG_REG(base)                ((base)->CONFIGREG)
#define ECSPI_INTREG_REG(base)                   ((base)->INTREG)
#define ECSPI_DMAREG_REG(base)                   ((base)->DMAREG)
#define ECSPI_STATREG_REG(base)                  ((base)->STATREG)
#define ECSPI_PERIODREG_REG(base)                ((base)->PERIODREG)
#define ECSPI_TESTREG_REG(base)                  ((base)->TESTREG)
#define ECSPI_MSGDATA_REG(base)                  ((base)->MSGDATA)

/*!
 * @}
 */ /* end of group ECSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ECSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Masks ECSPI Register Masks
 * @{
 */

/*! @name RXDATA - Receive Data Register */
/*! @{ */
#define ECSPI_RXDATA_ECSPI_RXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_RXDATA_ECSPI_RXDATA_SHIFT          (0U)
#define ECSPI_RXDATA_ECSPI_RXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_RXDATA_ECSPI_RXDATA_SHIFT)) & ECSPI_RXDATA_ECSPI_RXDATA_MASK)
/*! @} */

/*! @name TXDATA - Transmit Data Register */
/*! @{ */
#define ECSPI_TXDATA_ECSPI_TXDATA_MASK           (0xFFFFFFFFU)
#define ECSPI_TXDATA_ECSPI_TXDATA_SHIFT          (0U)
#define ECSPI_TXDATA_ECSPI_TXDATA(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_TXDATA_ECSPI_TXDATA_SHIFT)) & ECSPI_TXDATA_ECSPI_TXDATA_MASK)
/*! @} */

/*! @name CONREG - Control Register */
/*! @{ */
#define ECSPI_CONREG_EN_MASK                     (0x1U)
#define ECSPI_CONREG_EN_SHIFT                    (0U)
#define ECSPI_CONREG_HT_MASK                     (0x2U)
#define ECSPI_CONREG_HT_SHIFT                    (1U)
#define ECSPI_CONREG_XCH_MASK                    (0x4U)
#define ECSPI_CONREG_XCH_SHIFT                   (2U)
#define ECSPI_CONREG_SMC_MASK                    (0x8U)
#define ECSPI_CONREG_SMC_SHIFT                   (3U)
#define ECSPI_CONREG_CHANNEL_MODE_MASK           (0xF0U)
#define ECSPI_CONREG_CHANNEL_MODE_SHIFT          (4U)
/*! CHANNEL_MODE
 *  0b0000..Slave mode.
 *  0b0001..Master mode.
 */
#define ECSPI_CONREG_CHANNEL_MODE(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_MODE_SHIFT)) & ECSPI_CONREG_CHANNEL_MODE_MASK)
#define ECSPI_CONREG_POST_DIVIDER_MASK           (0xF00U)
#define ECSPI_CONREG_POST_DIVIDER_SHIFT          (8U)
/*! POST_DIVIDER
 *  0b0000..Divide by 1.
 *  0b0001..Divide by 2.
 *  0b0010..Divide by 4.
 *  0b1110..Divide by 2 14 .
 *  0b1111..Divide by 2 15 .
 */
#define ECSPI_CONREG_POST_DIVIDER(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_POST_DIVIDER_SHIFT)) & ECSPI_CONREG_POST_DIVIDER_MASK)
#define ECSPI_CONREG_PRE_DIVIDER_MASK            (0xF000U)
#define ECSPI_CONREG_PRE_DIVIDER_SHIFT           (12U)
/*! PRE_DIVIDER
 *  0b0000..Divide by 1.
 *  0b0001..Divide by 2.
 *  0b0010..Divide by 3.
 *  0b1101..Divide by 14.
 *  0b1110..Divide by 15.
 *  0b1111..Divide by 16.
 */
#define ECSPI_CONREG_PRE_DIVIDER(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_PRE_DIVIDER_SHIFT)) & ECSPI_CONREG_PRE_DIVIDER_MASK)
#define ECSPI_CONREG_DRCTL_MASK                  (0x30000U)
#define ECSPI_CONREG_DRCTL_SHIFT                 (16U)
/*! DRCTL
 *  0b00..The SPI_RDY signal is a don't care.
 *  0b01..Burst will be triggered by the falling edge of the SPI_RDY signal (edge-triggered).
 *  0b10..Burst will be triggered by a low level of the SPI_RDY signal (level-triggered).
 *  0b11..Reserved.
 */
#define ECSPI_CONREG_DRCTL(x)                    (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_DRCTL_SHIFT)) & ECSPI_CONREG_DRCTL_MASK)
#define ECSPI_CONREG_CHANNEL_SELECT_MASK         (0xC0000U)
#define ECSPI_CONREG_CHANNEL_SELECT_SHIFT        (18U)
/*! CHANNEL_SELECT
 *  0b00..Channel 0 is selected. Chip Select 0 (SS0) will be asserted.
 *  0b01..Channel 1 is selected. Chip Select 1 (SS1) will be asserted.
 *  0b10..Channel 2 is selected. Chip Select 2 (SS2) will be asserted.
 *  0b11..Channel 3 is selected. Chip Select 3 (SS3) will be asserted.
 */
#define ECSPI_CONREG_CHANNEL_SELECT(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_CHANNEL_SELECT_SHIFT)) & ECSPI_CONREG_CHANNEL_SELECT_MASK)
#define ECSPI_CONREG_BURST_LENGTH_MASK           (0xFFF00000U)
#define ECSPI_CONREG_BURST_LENGTH_SHIFT          (20U)
/*! BURST_LENGTH
 *  0b000000000000..A SPI burst contains the 1 LSB in a word.
 *  0b000000000001..A SPI burst contains the 2 LSB in a word.
 *  0b000000000010..A SPI burst contains the 3 LSB in a word.
 *  0b000000011111..A SPI burst contains all 32 bits in a word.
 *  0b000000100000..A SPI burst contains the 1 LSB in first word and all 32 bits in second word.
 *  0b000000100001..A SPI burst contains the 2 LSB in first word and all 32 bits in second word.
 *  0b111111111110..A SPI burst contains the 31 LSB in first word and 2^7 -1 words.
 *  0b111111111111..A SPI burst contains 2^7 words.
 */
#define ECSPI_CONREG_BURST_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONREG_BURST_LENGTH_SHIFT)) & ECSPI_CONREG_BURST_LENGTH_MASK)
/*! @} */

/*! @name CONFIGREG - Config Register */
/*! @{ */
#define ECSPI_CONFIGREG_SCLK_PHA_MASK            (0xFU)
#define ECSPI_CONFIGREG_SCLK_PHA_SHIFT           (0U)
/*! SCLK_PHA
 *  0b0000..Phase 0 operation.
 *  0b0001..Phase 1 operation.
 */
#define ECSPI_CONFIGREG_SCLK_PHA(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_PHA_SHIFT)) & ECSPI_CONFIGREG_SCLK_PHA_MASK)
#define ECSPI_CONFIGREG_SCLK_POL_MASK            (0xF0U)
#define ECSPI_CONFIGREG_SCLK_POL_SHIFT           (4U)
/*! SCLK_POL
 *  0b0000..Active high polarity (0 = Idle).
 *  0b0001..Active low polarity (1 = Idle).
 */
#define ECSPI_CONFIGREG_SCLK_POL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_POL_SHIFT)) & ECSPI_CONFIGREG_SCLK_POL_MASK)
#define ECSPI_CONFIGREG_SS_CTL_MASK              (0xF00U)
#define ECSPI_CONFIGREG_SS_CTL_SHIFT             (8U)
/*! SS_CTL
 *  0b0000..In master mode - only one SPI burst will be transmitted.
 *  0b0001..In master mode - Negate Chip Select (SS) signal between SPI bursts. Multiple SPI bursts will be
 *          transmitted. The SPI transfer will automatically stop when the TXFIFO is empty.
 *  0b0000..In slave mode - an SPI burst is completed when the number of bits received in the shift register is
 *          equal to (BURST LENGTH + 1). Only the n least-significant bits (n = BURST LENGTH[4:0] + 1) of the first
 *          received word are valid. All bits subsequent to the first received word in RXFIFO are valid.
 *  0b0001..Reserved
 */
#define ECSPI_CONFIGREG_SS_CTL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_CTL_SHIFT)) & ECSPI_CONFIGREG_SS_CTL_MASK)
#define ECSPI_CONFIGREG_SS_POL_MASK              (0xF000U)
#define ECSPI_CONFIGREG_SS_POL_SHIFT             (12U)
/*! SS_POL
 *  0b0000..Active low.
 *  0b0001..Active high.
 */
#define ECSPI_CONFIGREG_SS_POL(x)                (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SS_POL_SHIFT)) & ECSPI_CONFIGREG_SS_POL_MASK)
#define ECSPI_CONFIGREG_DATA_CTL_MASK            (0xF0000U)
#define ECSPI_CONFIGREG_DATA_CTL_SHIFT           (16U)
/*! DATA_CTL
 *  0b0000..Stay high.
 *  0b0001..Stay low.
 */
#define ECSPI_CONFIGREG_DATA_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_DATA_CTL_SHIFT)) & ECSPI_CONFIGREG_DATA_CTL_MASK)
#define ECSPI_CONFIGREG_SCLK_CTL_MASK            (0xF00000U)
#define ECSPI_CONFIGREG_SCLK_CTL_SHIFT           (20U)
/*! SCLK_CTL
 *  0b0000..Stay low.
 *  0b0001..Stay high.
 */
#define ECSPI_CONFIGREG_SCLK_CTL(x)              (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_SCLK_CTL_SHIFT)) & ECSPI_CONFIGREG_SCLK_CTL_MASK)
#define ECSPI_CONFIGREG_HT_LENGTH_MASK           (0x1F000000U)
#define ECSPI_CONFIGREG_HT_LENGTH_SHIFT          (24U)
#define ECSPI_CONFIGREG_HT_LENGTH(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_CONFIGREG_HT_LENGTH_SHIFT)) & ECSPI_CONFIGREG_HT_LENGTH_MASK)
/*! @} */

/*! @name INTREG - Interrupt Control Register */
/*! @{ */
#define ECSPI_INTREG_TEEN_MASK                   (0x1U)
#define ECSPI_INTREG_TEEN_SHIFT                  (0U)
#define ECSPI_INTREG_TDREN_MASK                  (0x2U)
#define ECSPI_INTREG_TDREN_SHIFT                 (1U)
#define ECSPI_INTREG_TFEN_MASK                   (0x4U)
#define ECSPI_INTREG_TFEN_SHIFT                  (2U)
#define ECSPI_INTREG_RREN_MASK                   (0x8U)
#define ECSPI_INTREG_RREN_SHIFT                  (3U)
#define ECSPI_INTREG_RDREN_MASK                  (0x10U)
#define ECSPI_INTREG_RDREN_SHIFT                 (4U)
#define ECSPI_INTREG_RFEN_MASK                   (0x20U)
#define ECSPI_INTREG_RFEN_SHIFT                  (5U)
#define ECSPI_INTREG_ROEN_MASK                   (0x40U)
#define ECSPI_INTREG_ROEN_SHIFT                  (6U)
#define ECSPI_INTREG_TCEN_MASK                   (0x80U)
#define ECSPI_INTREG_TCEN_SHIFT                  (7U)
/*! @} */

/*! @name DMAREG - DMA Control Register */
/*! @{ */
#define ECSPI_DMAREG_TX_THRESHOLD_MASK           (0x3FU)
#define ECSPI_DMAREG_TX_THRESHOLD_SHIFT          (0U)
#define ECSPI_DMAREG_TX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_TX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_TX_THRESHOLD_MASK)
#define ECSPI_DMAREG_TEDEN_MASK                  (0x80U)
#define ECSPI_DMAREG_TEDEN_SHIFT                 (7U)
#define ECSPI_DMAREG_RX_THRESHOLD_MASK           (0x3F0000U)
#define ECSPI_DMAREG_RX_THRESHOLD_SHIFT          (16U)
#define ECSPI_DMAREG_RX_THRESHOLD(x)             (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_THRESHOLD_SHIFT)) & ECSPI_DMAREG_RX_THRESHOLD_MASK)
#define ECSPI_DMAREG_RXDEN_MASK                  (0x800000U)
#define ECSPI_DMAREG_RXDEN_SHIFT                 (23U)
#define ECSPI_DMAREG_RX_DMA_LENGTH_MASK          (0x3F000000U)
#define ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT         (24U)
#define ECSPI_DMAREG_RX_DMA_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT)) & ECSPI_DMAREG_RX_DMA_LENGTH_MASK)
#define ECSPI_DMAREG_RXTDEN_MASK                 (0x80000000U)
#define ECSPI_DMAREG_RXTDEN_SHIFT                (31U)
/*! @} */

/*! @name STATREG - Status Register */
/*! @{ */
#define ECSPI_STATREG_TE_MASK                    (0x1U)
#define ECSPI_STATREG_TE_SHIFT                   (0U)
#define ECSPI_STATREG_TDR_MASK                   (0x2U)
#define ECSPI_STATREG_TDR_SHIFT                  (1U)
#define ECSPI_STATREG_TF_MASK                    (0x4U)
#define ECSPI_STATREG_TF_SHIFT                   (2U)
#define ECSPI_STATREG_RR_MASK                    (0x8U)
#define ECSPI_STATREG_RR_SHIFT                   (3U)
#define ECSPI_STATREG_RDR_MASK                   (0x10U)
#define ECSPI_STATREG_RDR_SHIFT                  (4U)
#define ECSPI_STATREG_RF_MASK                    (0x20U)
#define ECSPI_STATREG_RF_SHIFT                   (5U)
#define ECSPI_STATREG_RO_MASK                    (0x40U)
#define ECSPI_STATREG_RO_SHIFT                   (6U)
#define ECSPI_STATREG_TC_MASK                    (0x80U)
#define ECSPI_STATREG_TC_SHIFT                   (7U)
/*! @} */

/*! @name PERIODREG - Sample Period Control Register */
/*! @{ */
#define ECSPI_PERIODREG_SAMPLE_PERIOD_MASK       (0x7FFFU)
#define ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT      (0U)
/*! SAMPLE_PERIOD
 *  0b000000000000000..0 wait states inserted
 *  0b000000000000001..1 wait state inserted
 *  0b111111111111110..32766 wait states inserted
 *  0b111111111111111..32767 wait states inserted
 */
#define ECSPI_PERIODREG_SAMPLE_PERIOD(x)         (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT)) & ECSPI_PERIODREG_SAMPLE_PERIOD_MASK)
#define ECSPI_PERIODREG_CSRC_MASK                (0x8000U)
#define ECSPI_PERIODREG_CSRC_SHIFT               (15U)
#define ECSPI_PERIODREG_CSD_CTL_MASK             (0x3F0000U)
#define ECSPI_PERIODREG_CSD_CTL_SHIFT            (16U)
#define ECSPI_PERIODREG_CSD_CTL(x)               (((uint32_t)(((uint32_t)(x)) << ECSPI_PERIODREG_CSD_CTL_SHIFT)) & ECSPI_PERIODREG_CSD_CTL_MASK)
/*! @} */

/*! @name TESTREG - Test Control Register */
/*! @{ */
#define ECSPI_TESTREG_TXCNT_MASK                 (0x7FU)
#define ECSPI_TESTREG_TXCNT_SHIFT                (0U)
#define ECSPI_TESTREG_TXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_TXCNT_SHIFT)) & ECSPI_TESTREG_TXCNT_MASK)
#define ECSPI_TESTREG_RXCNT_MASK                 (0x7F00U)
#define ECSPI_TESTREG_RXCNT_SHIFT                (8U)
#define ECSPI_TESTREG_RXCNT(x)                   (((uint32_t)(((uint32_t)(x)) << ECSPI_TESTREG_RXCNT_SHIFT)) & ECSPI_TESTREG_RXCNT_MASK)
#define ECSPI_TESTREG_LBC_MASK                   (0x80000000U)
#define ECSPI_TESTREG_LBC_SHIFT                  (31U)
/*! @} */

/*! @name MSGDATA - Message Data Register */
/*! @{ */
#define ECSPI_MSGDATA_ECSPI_MSGDATA_MASK         (0xFFFFFFFFU)
#define ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT        (0U)
#define ECSPI_MSGDATA_ECSPI_MSGDATA(x)           (((uint32_t)(((uint32_t)(x)) << ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT)) & ECSPI_MSGDATA_ECSPI_MSGDATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group ECSPI_Register_Masks */


/* ECSPI - Peripheral instance base addresses */
/** Peripheral ECSPI1 base pointer */
#define ECSPI1_BASE_PTR                          ((ECSPI_MemMapPtr)0x30820000u)
/** Peripheral ECSPI2 base pointer */
#define ECSPI2_BASE_PTR                          ((ECSPI_MemMapPtr)0x30830000u)
/** Peripheral ECSPI3 base pointer */
#define ECSPI3_BASE_PTR                          ((ECSPI_MemMapPtr)0x30840000u)
/** Array initializer of ECSPI peripheral base pointers */
#define ECSPI_BASE_PTRS                          { ECSPI1_BASE_PTR, ECSPI2_BASE_PTR, ECSPI3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ECSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ECSPI_Register_Accessor_Macros ECSPI - Register accessor macros
 * @{
 */


/* ECSPI - Register instance definitions */
/* ECSPI1 */
#define ECSPI1_RXDATA                            ECSPI_RXDATA_REG(ECSPI1_BASE_PTR)
#define ECSPI1_TXDATA                            ECSPI_TXDATA_REG(ECSPI1_BASE_PTR)
#define ECSPI1_CONREG                            ECSPI_CONREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_INTREG                            ECSPI_INTREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_DMAREG                            ECSPI_DMAREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_STATREG                           ECSPI_STATREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_TESTREG                           ECSPI_TESTREG_REG(ECSPI1_BASE_PTR)
#define ECSPI1_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI1_BASE_PTR)
/* ECSPI2 */
#define ECSPI2_RXDATA                            ECSPI_RXDATA_REG(ECSPI2_BASE_PTR)
#define ECSPI2_TXDATA                            ECSPI_TXDATA_REG(ECSPI2_BASE_PTR)
#define ECSPI2_CONREG                            ECSPI_CONREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_INTREG                            ECSPI_INTREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_DMAREG                            ECSPI_DMAREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_STATREG                           ECSPI_STATREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_TESTREG                           ECSPI_TESTREG_REG(ECSPI2_BASE_PTR)
#define ECSPI2_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI2_BASE_PTR)
/* ECSPI3 */
#define ECSPI3_RXDATA                            ECSPI_RXDATA_REG(ECSPI3_BASE_PTR)
#define ECSPI3_TXDATA                            ECSPI_TXDATA_REG(ECSPI3_BASE_PTR)
#define ECSPI3_CONREG                            ECSPI_CONREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_CONFIGREG                         ECSPI_CONFIGREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_INTREG                            ECSPI_INTREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_DMAREG                            ECSPI_DMAREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_STATREG                           ECSPI_STATREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_PERIODREG                         ECSPI_PERIODREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_TESTREG                           ECSPI_TESTREG_REG(ECSPI3_BASE_PTR)
#define ECSPI3_MSGDATA                           ECSPI_MSGDATA_REG(ECSPI3_BASE_PTR)

/*!
 * @}
 */ /* end of group ECSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ECSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- ENET
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Peripheral ENET
 * @{
 */

/** ENET - Peripheral register structure */
typedef struct ENET_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t EIR;                                    /**< Interrupt Event Register, offset: 0x4 */
  uint32_t EIMR;                                   /**< Interrupt Mask Register, offset: 0x8 */
  uint8_t RESERVED_1[4];
  uint32_t RDAR;                                   /**< Receive Descriptor Active Register - Ring 0, offset: 0x10 */
  uint32_t TDAR;                                   /**< Transmit Descriptor Active Register - Ring 0, offset: 0x14 */
  uint8_t RESERVED_2[12];
  uint32_t ECR;                                    /**< Ethernet Control Register, offset: 0x24 */
  uint8_t RESERVED_3[24];
  uint32_t MMFR;                                   /**< MII Management Frame Register, offset: 0x40 */
  uint32_t MSCR;                                   /**< MII Speed Control Register, offset: 0x44 */
  uint8_t RESERVED_4[28];
  uint32_t MIBC;                                   /**< MIB Control Register, offset: 0x64 */
  uint8_t RESERVED_5[28];
  uint32_t RCR;                                    /**< Receive Control Register, offset: 0x84 */
  uint8_t RESERVED_6[60];
  uint32_t TCR;                                    /**< Transmit Control Register, offset: 0xC4 */
  uint8_t RESERVED_7[28];
  uint32_t PALR;                                   /**< Physical Address Lower Register, offset: 0xE4 */
  uint32_t PAUR;                                   /**< Physical Address Upper Register, offset: 0xE8 */
  uint32_t OPD;                                    /**< Opcode/Pause Duration Register, offset: 0xEC */
  uint32_t TXIC[3];                                /**< Transmit Interrupt Coalescing Register, array offset: 0xF0, array step: 0x4 */
  uint8_t RESERVED_8[4];
  uint32_t RXIC[3];                                /**< Receive Interrupt Coalescing Register, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_9[12];
  uint32_t IAUR;                                   /**< Descriptor Individual Upper Address Register, offset: 0x118 */
  uint32_t IALR;                                   /**< Descriptor Individual Lower Address Register, offset: 0x11C */
  uint32_t GAUR;                                   /**< Descriptor Group Upper Address Register, offset: 0x120 */
  uint32_t GALR;                                   /**< Descriptor Group Lower Address Register, offset: 0x124 */
  uint8_t RESERVED_10[28];
  uint32_t TFWR;                                   /**< Transmit FIFO Watermark Register, offset: 0x144 */
  uint8_t RESERVED_11[24];
  uint32_t RDSR1;                                  /**< Receive Descriptor Ring 1 Start Register, offset: 0x160 */
  uint32_t TDSR1;                                  /**< Transmit Buffer Descriptor Ring 1 Start Register, offset: 0x164 */
  uint32_t MRBR1;                                  /**< Maximum Receive Buffer Size Register - Ring 1, offset: 0x168 */
  uint32_t RDSR2;                                  /**< Receive Descriptor Ring 2 Start Register, offset: 0x16C */
  uint32_t TDSR2;                                  /**< Transmit Buffer Descriptor Ring 2 Start Register, offset: 0x170 */
  uint32_t MRBR2;                                  /**< Maximum Receive Buffer Size Register - Ring 2, offset: 0x174 */
  uint8_t RESERVED_12[8];
  uint32_t RDSR;                                   /**< Receive Descriptor Ring 0 Start Register, offset: 0x180 */
  uint32_t TDSR;                                   /**< Transmit Buffer Descriptor Ring 0 Start Register, offset: 0x184 */
  uint32_t MRBR;                                   /**< Maximum Receive Buffer Size Register - Ring 0, offset: 0x188 */
  uint8_t RESERVED_13[4];
  uint32_t RSFL;                                   /**< Receive FIFO Section Full Threshold, offset: 0x190 */
  uint32_t RSEM;                                   /**< Receive FIFO Section Empty Threshold, offset: 0x194 */
  uint32_t RAEM;                                   /**< Receive FIFO Almost Empty Threshold, offset: 0x198 */
  uint32_t RAFL;                                   /**< Receive FIFO Almost Full Threshold, offset: 0x19C */
  uint32_t TSEM;                                   /**< Transmit FIFO Section Empty Threshold, offset: 0x1A0 */
  uint32_t TAEM;                                   /**< Transmit FIFO Almost Empty Threshold, offset: 0x1A4 */
  uint32_t TAFL;                                   /**< Transmit FIFO Almost Full Threshold, offset: 0x1A8 */
  uint32_t TIPG;                                   /**< Transmit Inter-Packet Gap, offset: 0x1AC */
  uint32_t FTRL;                                   /**< Frame Truncation Length, offset: 0x1B0 */
  uint8_t RESERVED_14[12];
  uint32_t TACC;                                   /**< Transmit Accelerator Function Configuration, offset: 0x1C0 */
  uint32_t RACC;                                   /**< Receive Accelerator Function Configuration, offset: 0x1C4 */
  uint32_t RCMR[2];                                /**< Receive Classification Match Register for Class n, array offset: 0x1C8, array step: 0x4 */
  uint8_t RESERVED_15[8];
  uint32_t DMACFG[2];                              /**< DMA Class Based Configuration, array offset: 0x1D8, array step: 0x4 */
  uint32_t RDAR1;                                  /**< Receive Descriptor Active Register - Ring 1, offset: 0x1E0 */
  uint32_t TDAR1;                                  /**< Transmit Descriptor Active Register - Ring 1, offset: 0x1E4 */
  uint32_t RDAR2;                                  /**< Receive Descriptor Active Register - Ring 2, offset: 0x1E8 */
  uint32_t TDAR2;                                  /**< Transmit Descriptor Active Register - Ring 2, offset: 0x1EC */
  uint32_t QOS;                                    /**< QOS Scheme, offset: 0x1F0 */
  uint8_t RESERVED_16[12];
  uint32_t RMON_T_DROP;                            /**< Reserved Statistic Register, offset: 0x200 */
  uint32_t RMON_T_PACKETS;                         /**< Tx Packet Count Statistic Register, offset: 0x204 */
  uint32_t RMON_T_BC_PKT;                          /**< Tx Broadcast Packets Statistic Register, offset: 0x208 */
  uint32_t RMON_T_MC_PKT;                          /**< Tx Multicast Packets Statistic Register, offset: 0x20C */
  uint32_t RMON_T_CRC_ALIGN;                       /**< Tx Packets with CRC/Align Error Statistic Register, offset: 0x210 */
  uint32_t RMON_T_UNDERSIZE;                       /**< Tx Packets Less Than Bytes and Good CRC Statistic Register, offset: 0x214 */
  uint32_t RMON_T_OVERSIZE;                        /**< Tx Packets GT MAX_FL bytes and Good CRC Statistic Register, offset: 0x218 */
  uint32_t RMON_T_FRAG;                            /**< Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x21C */
  uint32_t RMON_T_JAB;                             /**< Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register, offset: 0x220 */
  uint32_t RMON_T_COL;                             /**< Tx Collision Count Statistic Register, offset: 0x224 */
  uint32_t RMON_T_P64;                             /**< Tx 64-Byte Packets Statistic Register, offset: 0x228 */
  uint32_t RMON_T_P65TO127;                        /**< Tx 65- to 127-byte Packets Statistic Register, offset: 0x22C */
  uint32_t RMON_T_P128TO255;                       /**< Tx 128- to 255-byte Packets Statistic Register, offset: 0x230 */
  uint32_t RMON_T_P256TO511;                       /**< Tx 256- to 511-byte Packets Statistic Register, offset: 0x234 */
  uint32_t RMON_T_P512TO1023;                      /**< Tx 512- to 1023-byte Packets Statistic Register, offset: 0x238 */
  uint32_t RMON_T_P1024TO2047;                     /**< Tx 1024- to 2047-byte Packets Statistic Register, offset: 0x23C */
  uint32_t RMON_T_P_GTE2048;                       /**< Tx Packets Greater Than 2048 Bytes Statistic Register, offset: 0x240 */
  uint32_t RMON_T_OCTETS;                          /**< Tx Octets Statistic Register, offset: 0x244 */
  uint32_t IEEE_T_DROP;                            /**< Reserved Statistic Register, offset: 0x248 */
  uint32_t IEEE_T_FRAME_OK;                        /**< Frames Transmitted OK Statistic Register, offset: 0x24C */
  uint32_t IEEE_T_1COL;                            /**< Frames Transmitted with Single Collision Statistic Register, offset: 0x250 */
  uint32_t IEEE_T_MCOL;                            /**< Frames Transmitted with Multiple Collisions Statistic Register, offset: 0x254 */
  uint32_t IEEE_T_DEF;                             /**< Frames Transmitted after Deferral Delay Statistic Register, offset: 0x258 */
  uint32_t IEEE_T_LCOL;                            /**< Frames Transmitted with Late Collision Statistic Register, offset: 0x25C */
  uint32_t IEEE_T_EXCOL;                           /**< Frames Transmitted with Excessive Collisions Statistic Register, offset: 0x260 */
  uint32_t IEEE_T_MACERR;                          /**< Frames Transmitted with Tx FIFO Underrun Statistic Register, offset: 0x264 */
  uint32_t IEEE_T_CSERR;                           /**< Frames Transmitted with Carrier Sense Error Statistic Register, offset: 0x268 */
  uint32_t IEEE_T_SQE;                             /**< Reserved Statistic Register, offset: 0x26C */
  uint32_t IEEE_T_FDXFC;                           /**< Flow Control Pause Frames Transmitted Statistic Register, offset: 0x270 */
  uint32_t IEEE_T_OCTETS_OK;                       /**< Octet Count for Frames Transmitted w/o Error Statistic Register, offset: 0x274 */
  uint8_t RESERVED_17[12];
  uint32_t RMON_R_PACKETS;                         /**< Rx Packet Count Statistic Register, offset: 0x284 */
  uint32_t RMON_R_BC_PKT;                          /**< Rx Broadcast Packets Statistic Register, offset: 0x288 */
  uint32_t RMON_R_MC_PKT;                          /**< Rx Multicast Packets Statistic Register, offset: 0x28C */
  uint32_t RMON_R_CRC_ALIGN;                       /**< Rx Packets with CRC/Align Error Statistic Register, offset: 0x290 */
  uint32_t RMON_R_UNDERSIZE;                       /**< Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register, offset: 0x294 */
  uint32_t RMON_R_OVERSIZE;                        /**< Rx Packets Greater Than MAX_FL and Good CRC Statistic Register, offset: 0x298 */
  uint32_t RMON_R_FRAG;                            /**< Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register, offset: 0x29C */
  uint32_t RMON_R_JAB;                             /**< Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register, offset: 0x2A0 */
  uint32_t RMON_R_RESVD_0;                         /**< Reserved Statistic Register, offset: 0x2A4 */
  uint32_t RMON_R_P64;                             /**< Rx 64-Byte Packets Statistic Register, offset: 0x2A8 */
  uint32_t RMON_R_P65TO127;                        /**< Rx 65- to 127-Byte Packets Statistic Register, offset: 0x2AC */
  uint32_t RMON_R_P128TO255;                       /**< Rx 128- to 255-Byte Packets Statistic Register, offset: 0x2B0 */
  uint32_t RMON_R_P256TO511;                       /**< Rx 256- to 511-Byte Packets Statistic Register, offset: 0x2B4 */
  uint32_t RMON_R_P512TO1023;                      /**< Rx 512- to 1023-Byte Packets Statistic Register, offset: 0x2B8 */
  uint32_t RMON_R_P1024TO2047;                     /**< Rx 1024- to 2047-Byte Packets Statistic Register, offset: 0x2BC */
  uint32_t RMON_R_P_GTE2048;                       /**< Rx Packets Greater than 2048 Bytes Statistic Register, offset: 0x2C0 */
  uint32_t RMON_R_OCTETS;                          /**< Rx Octets Statistic Register, offset: 0x2C4 */
  uint32_t IEEE_R_DROP;                            /**< Frames not Counted Correctly Statistic Register, offset: 0x2C8 */
  uint32_t IEEE_R_FRAME_OK;                        /**< Frames Received OK Statistic Register, offset: 0x2CC */
  uint32_t IEEE_R_CRC;                             /**< Frames Received with CRC Error Statistic Register, offset: 0x2D0 */
  uint32_t IEEE_R_ALIGN;                           /**< Frames Received with Alignment Error Statistic Register, offset: 0x2D4 */
  uint32_t IEEE_R_MACERR;                          /**< Receive FIFO Overflow Count Statistic Register, offset: 0x2D8 */
  uint32_t IEEE_R_FDXFC;                           /**< Flow Control Pause Frames Received Statistic Register, offset: 0x2DC */
  uint32_t IEEE_R_OCTETS_OK;                       /**< Octet Count for Frames Received without Error Statistic Register, offset: 0x2E0 */
  uint8_t RESERVED_18[284];
  uint32_t ATCR;                                   /**< Adjustable Timer Control Register, offset: 0x400 */
  uint32_t ATVR;                                   /**< Timer Value Register, offset: 0x404 */
  uint32_t ATOFF;                                  /**< Timer Offset Register, offset: 0x408 */
  uint32_t ATPER;                                  /**< Timer Period Register, offset: 0x40C */
  uint32_t ATCOR;                                  /**< Timer Correction Register, offset: 0x410 */
  uint32_t ATINC;                                  /**< Time-Stamping Clock Period Register, offset: 0x414 */
  uint32_t ATSTMP;                                 /**< Timestamp of Last Transmitted Frame, offset: 0x418 */
  uint8_t RESERVED_19[488];
  uint32_t TGSR;                                   /**< Timer Global Status Register, offset: 0x604 */
  struct {                                         /* offset: 0x608, array step: 0x8 */
    uint32_t TCSR;                                   /**< Timer Control Status Register, array offset: 0x608, array step: 0x8 */
    uint32_t TCCR;                                   /**< Timer Compare Capture Register, array offset: 0x60C, array step: 0x8 */
  } CHANNEL[4];
} volatile *ENET_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register accessors */
#define ENET_EIR_REG(base)                       ((base)->EIR)
#define ENET_EIMR_REG(base)                      ((base)->EIMR)
#define ENET_RDAR_REG(base)                      ((base)->RDAR)
#define ENET_TDAR_REG(base)                      ((base)->TDAR)
#define ENET_ECR_REG(base)                       ((base)->ECR)
#define ENET_MMFR_REG(base)                      ((base)->MMFR)
#define ENET_MSCR_REG(base)                      ((base)->MSCR)
#define ENET_MIBC_REG(base)                      ((base)->MIBC)
#define ENET_RCR_REG(base)                       ((base)->RCR)
#define ENET_TCR_REG(base)                       ((base)->TCR)
#define ENET_PALR_REG(base)                      ((base)->PALR)
#define ENET_PAUR_REG(base)                      ((base)->PAUR)
#define ENET_OPD_REG(base)                       ((base)->OPD)
#define ENET_TXIC_REG(base,index)                ((base)->TXIC[index])
#define ENET_RXIC_REG(base,index)                ((base)->RXIC[index])
#define ENET_IAUR_REG(base)                      ((base)->IAUR)
#define ENET_IALR_REG(base)                      ((base)->IALR)
#define ENET_GAUR_REG(base)                      ((base)->GAUR)
#define ENET_GALR_REG(base)                      ((base)->GALR)
#define ENET_TFWR_REG(base)                      ((base)->TFWR)
#define ENET_RDSR1_REG(base)                     ((base)->RDSR1)
#define ENET_TDSR1_REG(base)                     ((base)->TDSR1)
#define ENET_MRBR1_REG(base)                     ((base)->MRBR1)
#define ENET_RDSR2_REG(base)                     ((base)->RDSR2)
#define ENET_TDSR2_REG(base)                     ((base)->TDSR2)
#define ENET_MRBR2_REG(base)                     ((base)->MRBR2)
#define ENET_RDSR_REG(base)                      ((base)->RDSR)
#define ENET_TDSR_REG(base)                      ((base)->TDSR)
#define ENET_MRBR_REG(base)                      ((base)->MRBR)
#define ENET_RSFL_REG(base)                      ((base)->RSFL)
#define ENET_RSEM_REG(base)                      ((base)->RSEM)
#define ENET_RAEM_REG(base)                      ((base)->RAEM)
#define ENET_RAFL_REG(base)                      ((base)->RAFL)
#define ENET_TSEM_REG(base)                      ((base)->TSEM)
#define ENET_TAEM_REG(base)                      ((base)->TAEM)
#define ENET_TAFL_REG(base)                      ((base)->TAFL)
#define ENET_TIPG_REG(base)                      ((base)->TIPG)
#define ENET_FTRL_REG(base)                      ((base)->FTRL)
#define ENET_TACC_REG(base)                      ((base)->TACC)
#define ENET_RACC_REG(base)                      ((base)->RACC)
#define ENET_RCMR_REG(base,index)                ((base)->RCMR[index])
#define ENET_DMACFG_REG(base,index)              ((base)->DMACFG[index])
#define ENET_RDAR1_REG(base)                     ((base)->RDAR1)
#define ENET_TDAR1_REG(base)                     ((base)->TDAR1)
#define ENET_RDAR2_REG(base)                     ((base)->RDAR2)
#define ENET_TDAR2_REG(base)                     ((base)->TDAR2)
#define ENET_QOS_REG(base)                       ((base)->QOS)
#define ENET_RMON_T_DROP_REG(base)               ((base)->RMON_T_DROP)
#define ENET_RMON_T_PACKETS_REG(base)            ((base)->RMON_T_PACKETS)
#define ENET_RMON_T_BC_PKT_REG(base)             ((base)->RMON_T_BC_PKT)
#define ENET_RMON_T_MC_PKT_REG(base)             ((base)->RMON_T_MC_PKT)
#define ENET_RMON_T_CRC_ALIGN_REG(base)          ((base)->RMON_T_CRC_ALIGN)
#define ENET_RMON_T_UNDERSIZE_REG(base)          ((base)->RMON_T_UNDERSIZE)
#define ENET_RMON_T_OVERSIZE_REG(base)           ((base)->RMON_T_OVERSIZE)
#define ENET_RMON_T_FRAG_REG(base)               ((base)->RMON_T_FRAG)
#define ENET_RMON_T_JAB_REG(base)                ((base)->RMON_T_JAB)
#define ENET_RMON_T_COL_REG(base)                ((base)->RMON_T_COL)
#define ENET_RMON_T_P64_REG(base)                ((base)->RMON_T_P64)
#define ENET_RMON_T_P65TO127_REG(base)           ((base)->RMON_T_P65TO127)
#define ENET_RMON_T_P128TO255_REG(base)          ((base)->RMON_T_P128TO255)
#define ENET_RMON_T_P256TO511_REG(base)          ((base)->RMON_T_P256TO511)
#define ENET_RMON_T_P512TO1023_REG(base)         ((base)->RMON_T_P512TO1023)
#define ENET_RMON_T_P1024TO2047_REG(base)        ((base)->RMON_T_P1024TO2047)
#define ENET_RMON_T_P_GTE2048_REG(base)          ((base)->RMON_T_P_GTE2048)
#define ENET_RMON_T_OCTETS_REG(base)             ((base)->RMON_T_OCTETS)
#define ENET_IEEE_T_DROP_REG(base)               ((base)->IEEE_T_DROP)
#define ENET_IEEE_T_FRAME_OK_REG(base)           ((base)->IEEE_T_FRAME_OK)
#define ENET_IEEE_T_1COL_REG(base)               ((base)->IEEE_T_1COL)
#define ENET_IEEE_T_MCOL_REG(base)               ((base)->IEEE_T_MCOL)
#define ENET_IEEE_T_DEF_REG(base)                ((base)->IEEE_T_DEF)
#define ENET_IEEE_T_LCOL_REG(base)               ((base)->IEEE_T_LCOL)
#define ENET_IEEE_T_EXCOL_REG(base)              ((base)->IEEE_T_EXCOL)
#define ENET_IEEE_T_MACERR_REG(base)             ((base)->IEEE_T_MACERR)
#define ENET_IEEE_T_CSERR_REG(base)              ((base)->IEEE_T_CSERR)
#define ENET_IEEE_T_SQE_REG(base)                ((base)->IEEE_T_SQE)
#define ENET_IEEE_T_FDXFC_REG(base)              ((base)->IEEE_T_FDXFC)
#define ENET_IEEE_T_OCTETS_OK_REG(base)          ((base)->IEEE_T_OCTETS_OK)
#define ENET_RMON_R_PACKETS_REG(base)            ((base)->RMON_R_PACKETS)
#define ENET_RMON_R_BC_PKT_REG(base)             ((base)->RMON_R_BC_PKT)
#define ENET_RMON_R_MC_PKT_REG(base)             ((base)->RMON_R_MC_PKT)
#define ENET_RMON_R_CRC_ALIGN_REG(base)          ((base)->RMON_R_CRC_ALIGN)
#define ENET_RMON_R_UNDERSIZE_REG(base)          ((base)->RMON_R_UNDERSIZE)
#define ENET_RMON_R_OVERSIZE_REG(base)           ((base)->RMON_R_OVERSIZE)
#define ENET_RMON_R_FRAG_REG(base)               ((base)->RMON_R_FRAG)
#define ENET_RMON_R_JAB_REG(base)                ((base)->RMON_R_JAB)
#define ENET_RMON_R_RESVD_0_REG(base)            ((base)->RMON_R_RESVD_0)
#define ENET_RMON_R_P64_REG(base)                ((base)->RMON_R_P64)
#define ENET_RMON_R_P65TO127_REG(base)           ((base)->RMON_R_P65TO127)
#define ENET_RMON_R_P128TO255_REG(base)          ((base)->RMON_R_P128TO255)
#define ENET_RMON_R_P256TO511_REG(base)          ((base)->RMON_R_P256TO511)
#define ENET_RMON_R_P512TO1023_REG(base)         ((base)->RMON_R_P512TO1023)
#define ENET_RMON_R_P1024TO2047_REG(base)        ((base)->RMON_R_P1024TO2047)
#define ENET_RMON_R_P_GTE2048_REG(base)          ((base)->RMON_R_P_GTE2048)
#define ENET_RMON_R_OCTETS_REG(base)             ((base)->RMON_R_OCTETS)
#define ENET_IEEE_R_DROP_REG(base)               ((base)->IEEE_R_DROP)
#define ENET_IEEE_R_FRAME_OK_REG(base)           ((base)->IEEE_R_FRAME_OK)
#define ENET_IEEE_R_CRC_REG(base)                ((base)->IEEE_R_CRC)
#define ENET_IEEE_R_ALIGN_REG(base)              ((base)->IEEE_R_ALIGN)
#define ENET_IEEE_R_MACERR_REG(base)             ((base)->IEEE_R_MACERR)
#define ENET_IEEE_R_FDXFC_REG(base)              ((base)->IEEE_R_FDXFC)
#define ENET_IEEE_R_OCTETS_OK_REG(base)          ((base)->IEEE_R_OCTETS_OK)
#define ENET_ATCR_REG(base)                      ((base)->ATCR)
#define ENET_ATVR_REG(base)                      ((base)->ATVR)
#define ENET_ATOFF_REG(base)                     ((base)->ATOFF)
#define ENET_ATPER_REG(base)                     ((base)->ATPER)
#define ENET_ATCOR_REG(base)                     ((base)->ATCOR)
#define ENET_ATINC_REG(base)                     ((base)->ATINC)
#define ENET_ATSTMP_REG(base)                    ((base)->ATSTMP)
#define ENET_TGSR_REG(base)                      ((base)->TGSR)
#define ENET_TCSR_REG(base,index)                ((base)->CHANNEL[index].TCSR)
#define ENET_TCCR_REG(base,index)                ((base)->CHANNEL[index].TCCR)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ENET Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Masks ENET Register Masks
 * @{
 */

/*! @name EIR - Interrupt Event Register */
/*! @{ */
#define ENET_EIR_RXB1_MASK                       (0x1U)
#define ENET_EIR_RXB1_SHIFT                      (0U)
#define ENET_EIR_RXF1_MASK                       (0x2U)
#define ENET_EIR_RXF1_SHIFT                      (1U)
#define ENET_EIR_TXB1_MASK                       (0x4U)
#define ENET_EIR_TXB1_SHIFT                      (2U)
#define ENET_EIR_TXF1_MASK                       (0x8U)
#define ENET_EIR_TXF1_SHIFT                      (3U)
#define ENET_EIR_RXB2_MASK                       (0x10U)
#define ENET_EIR_RXB2_SHIFT                      (4U)
#define ENET_EIR_RXF2_MASK                       (0x20U)
#define ENET_EIR_RXF2_SHIFT                      (5U)
#define ENET_EIR_TXB2_MASK                       (0x40U)
#define ENET_EIR_TXB2_SHIFT                      (6U)
#define ENET_EIR_TXF2_MASK                       (0x80U)
#define ENET_EIR_TXF2_SHIFT                      (7U)
#define ENET_EIR_RXFLUSH_0_MASK                  (0x1000U)
#define ENET_EIR_RXFLUSH_0_SHIFT                 (12U)
#define ENET_EIR_RXFLUSH_1_MASK                  (0x2000U)
#define ENET_EIR_RXFLUSH_1_SHIFT                 (13U)
#define ENET_EIR_RXFLUSH_2_MASK                  (0x4000U)
#define ENET_EIR_RXFLUSH_2_SHIFT                 (14U)
#define ENET_EIR_TS_TIMER_MASK                   (0x8000U)
#define ENET_EIR_TS_TIMER_SHIFT                  (15U)
#define ENET_EIR_TS_AVAIL_MASK                   (0x10000U)
#define ENET_EIR_TS_AVAIL_SHIFT                  (16U)
#define ENET_EIR_WAKEUP_MASK                     (0x20000U)
#define ENET_EIR_WAKEUP_SHIFT                    (17U)
#define ENET_EIR_PLR_MASK                        (0x40000U)
#define ENET_EIR_PLR_SHIFT                       (18U)
#define ENET_EIR_UN_MASK                         (0x80000U)
#define ENET_EIR_UN_SHIFT                        (19U)
#define ENET_EIR_RL_MASK                         (0x100000U)
#define ENET_EIR_RL_SHIFT                        (20U)
#define ENET_EIR_LC_MASK                         (0x200000U)
#define ENET_EIR_LC_SHIFT                        (21U)
#define ENET_EIR_EBERR_MASK                      (0x400000U)
#define ENET_EIR_EBERR_SHIFT                     (22U)
#define ENET_EIR_MII_MASK                        (0x800000U)
#define ENET_EIR_MII_SHIFT                       (23U)
#define ENET_EIR_RXB_MASK                        (0x1000000U)
#define ENET_EIR_RXB_SHIFT                       (24U)
#define ENET_EIR_RXF_MASK                        (0x2000000U)
#define ENET_EIR_RXF_SHIFT                       (25U)
#define ENET_EIR_TXB_MASK                        (0x4000000U)
#define ENET_EIR_TXB_SHIFT                       (26U)
#define ENET_EIR_TXF_MASK                        (0x8000000U)
#define ENET_EIR_TXF_SHIFT                       (27U)
#define ENET_EIR_GRA_MASK                        (0x10000000U)
#define ENET_EIR_GRA_SHIFT                       (28U)
#define ENET_EIR_BABT_MASK                       (0x20000000U)
#define ENET_EIR_BABT_SHIFT                      (29U)
#define ENET_EIR_BABR_MASK                       (0x40000000U)
#define ENET_EIR_BABR_SHIFT                      (30U)
/*! @} */

/*! @name EIMR - Interrupt Mask Register */
/*! @{ */
#define ENET_EIMR_RXB1_MASK                      (0x1U)
#define ENET_EIMR_RXB1_SHIFT                     (0U)
#define ENET_EIMR_RXF1_MASK                      (0x2U)
#define ENET_EIMR_RXF1_SHIFT                     (1U)
#define ENET_EIMR_TXB1_MASK                      (0x4U)
#define ENET_EIMR_TXB1_SHIFT                     (2U)
#define ENET_EIMR_TXF1_MASK                      (0x8U)
#define ENET_EIMR_TXF1_SHIFT                     (3U)
#define ENET_EIMR_RXB2_MASK                      (0x10U)
#define ENET_EIMR_RXB2_SHIFT                     (4U)
#define ENET_EIMR_RXF2_MASK                      (0x20U)
#define ENET_EIMR_RXF2_SHIFT                     (5U)
#define ENET_EIMR_TXB2_MASK                      (0x40U)
#define ENET_EIMR_TXB2_SHIFT                     (6U)
#define ENET_EIMR_TXF2_MASK                      (0x80U)
#define ENET_EIMR_TXF2_SHIFT                     (7U)
#define ENET_EIMR_RXFLUSH_0_MASK                 (0x1000U)
#define ENET_EIMR_RXFLUSH_0_SHIFT                (12U)
#define ENET_EIMR_RXFLUSH_1_MASK                 (0x2000U)
#define ENET_EIMR_RXFLUSH_1_SHIFT                (13U)
#define ENET_EIMR_RXFLUSH_2_MASK                 (0x4000U)
#define ENET_EIMR_RXFLUSH_2_SHIFT                (14U)
#define ENET_EIMR_TS_TIMER_MASK                  (0x8000U)
#define ENET_EIMR_TS_TIMER_SHIFT                 (15U)
#define ENET_EIMR_TS_AVAIL_MASK                  (0x10000U)
#define ENET_EIMR_TS_AVAIL_SHIFT                 (16U)
#define ENET_EIMR_WAKEUP_MASK                    (0x20000U)
#define ENET_EIMR_WAKEUP_SHIFT                   (17U)
#define ENET_EIMR_PLR_MASK                       (0x40000U)
#define ENET_EIMR_PLR_SHIFT                      (18U)
#define ENET_EIMR_UN_MASK                        (0x80000U)
#define ENET_EIMR_UN_SHIFT                       (19U)
#define ENET_EIMR_RL_MASK                        (0x100000U)
#define ENET_EIMR_RL_SHIFT                       (20U)
#define ENET_EIMR_LC_MASK                        (0x200000U)
#define ENET_EIMR_LC_SHIFT                       (21U)
#define ENET_EIMR_EBERR_MASK                     (0x400000U)
#define ENET_EIMR_EBERR_SHIFT                    (22U)
#define ENET_EIMR_MII_MASK                       (0x800000U)
#define ENET_EIMR_MII_SHIFT                      (23U)
#define ENET_EIMR_RXB_MASK                       (0x1000000U)
#define ENET_EIMR_RXB_SHIFT                      (24U)
#define ENET_EIMR_RXF_MASK                       (0x2000000U)
#define ENET_EIMR_RXF_SHIFT                      (25U)
#define ENET_EIMR_TXB_MASK                       (0x4000000U)
#define ENET_EIMR_TXB_SHIFT                      (26U)
#define ENET_EIMR_TXF_MASK                       (0x8000000U)
#define ENET_EIMR_TXF_SHIFT                      (27U)
#define ENET_EIMR_GRA_MASK                       (0x10000000U)
#define ENET_EIMR_GRA_SHIFT                      (28U)
#define ENET_EIMR_BABT_MASK                      (0x20000000U)
#define ENET_EIMR_BABT_SHIFT                     (29U)
#define ENET_EIMR_BABR_MASK                      (0x40000000U)
#define ENET_EIMR_BABR_SHIFT                     (30U)
/*! @} */

/*! @name RDAR - Receive Descriptor Active Register - Ring 0 */
/*! @{ */
#define ENET_RDAR_RDAR_MASK                      (0x1000000U)
#define ENET_RDAR_RDAR_SHIFT                     (24U)
/*! @} */

/*! @name TDAR - Transmit Descriptor Active Register - Ring 0 */
/*! @{ */
#define ENET_TDAR_TDAR_MASK                      (0x1000000U)
#define ENET_TDAR_TDAR_SHIFT                     (24U)
/*! @} */

/*! @name ECR - Ethernet Control Register */
/*! @{ */
#define ENET_ECR_RESET_MASK                      (0x1U)
#define ENET_ECR_RESET_SHIFT                     (0U)
#define ENET_ECR_ETHEREN_MASK                    (0x2U)
#define ENET_ECR_ETHEREN_SHIFT                   (1U)
#define ENET_ECR_MAGICEN_MASK                    (0x4U)
#define ENET_ECR_MAGICEN_SHIFT                   (2U)
#define ENET_ECR_SLEEP_MASK                      (0x8U)
#define ENET_ECR_SLEEP_SHIFT                     (3U)
#define ENET_ECR_EN1588_MASK                     (0x10U)
#define ENET_ECR_EN1588_SHIFT                    (4U)
#define ENET_ECR_SPEED_MASK                      (0x20U)
#define ENET_ECR_SPEED_SHIFT                     (5U)
#define ENET_ECR_DBGEN_MASK                      (0x40U)
#define ENET_ECR_DBGEN_SHIFT                     (6U)
#define ENET_ECR_DBSWP_MASK                      (0x100U)
#define ENET_ECR_DBSWP_SHIFT                     (8U)
#define ENET_ECR_SVLANEN_MASK                    (0x200U)
#define ENET_ECR_SVLANEN_SHIFT                   (9U)
#define ENET_ECR_VLANUSE2ND_MASK                 (0x400U)
#define ENET_ECR_VLANUSE2ND_SHIFT                (10U)
#define ENET_ECR_SVLANDBL_MASK                   (0x800U)
#define ENET_ECR_SVLANDBL_SHIFT                  (11U)
/*! @} */

/*! @name MMFR - MII Management Frame Register */
/*! @{ */
#define ENET_MMFR_DATA_MASK                      (0xFFFFU)
#define ENET_MMFR_DATA_SHIFT                     (0U)
#define ENET_MMFR_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_DATA_SHIFT)) & ENET_MMFR_DATA_MASK)
#define ENET_MMFR_TA_MASK                        (0x30000U)
#define ENET_MMFR_TA_SHIFT                       (16U)
#define ENET_MMFR_TA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_TA_SHIFT)) & ENET_MMFR_TA_MASK)
#define ENET_MMFR_RA_MASK                        (0x7C0000U)
#define ENET_MMFR_RA_SHIFT                       (18U)
#define ENET_MMFR_RA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_RA_SHIFT)) & ENET_MMFR_RA_MASK)
#define ENET_MMFR_PA_MASK                        (0xF800000U)
#define ENET_MMFR_PA_SHIFT                       (23U)
#define ENET_MMFR_PA(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_PA_SHIFT)) & ENET_MMFR_PA_MASK)
#define ENET_MMFR_OP_MASK                        (0x30000000U)
#define ENET_MMFR_OP_SHIFT                       (28U)
#define ENET_MMFR_OP(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_OP_SHIFT)) & ENET_MMFR_OP_MASK)
#define ENET_MMFR_ST_MASK                        (0xC0000000U)
#define ENET_MMFR_ST_SHIFT                       (30U)
#define ENET_MMFR_ST(x)                          (((uint32_t)(((uint32_t)(x)) << ENET_MMFR_ST_SHIFT)) & ENET_MMFR_ST_MASK)
/*! @} */

/*! @name MSCR - MII Speed Control Register */
/*! @{ */
#define ENET_MSCR_MII_SPEED_MASK                 (0x7EU)
#define ENET_MSCR_MII_SPEED_SHIFT                (1U)
#define ENET_MSCR_MII_SPEED(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_MII_SPEED_SHIFT)) & ENET_MSCR_MII_SPEED_MASK)
#define ENET_MSCR_DIS_PRE_MASK                   (0x80U)
#define ENET_MSCR_DIS_PRE_SHIFT                  (7U)
#define ENET_MSCR_HOLDTIME_MASK                  (0x700U)
#define ENET_MSCR_HOLDTIME_SHIFT                 (8U)
/*! HOLDTIME - Hold time On MDIO Output
 *  0b000..1 internal module clock cycle
 *  0b001..2 internal module clock cycles
 *  0b010..3 internal module clock cycles
 *  0b111..8 internal module clock cycles
 */
#define ENET_MSCR_HOLDTIME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_MSCR_HOLDTIME_SHIFT)) & ENET_MSCR_HOLDTIME_MASK)
/*! @} */

/*! @name MIBC - MIB Control Register */
/*! @{ */
#define ENET_MIBC_MIB_CLEAR_MASK                 (0x20000000U)
#define ENET_MIBC_MIB_CLEAR_SHIFT                (29U)
#define ENET_MIBC_MIB_IDLE_MASK                  (0x40000000U)
#define ENET_MIBC_MIB_IDLE_SHIFT                 (30U)
#define ENET_MIBC_MIB_DIS_MASK                   (0x80000000U)
#define ENET_MIBC_MIB_DIS_SHIFT                  (31U)
/*! @} */

/*! @name RCR - Receive Control Register */
/*! @{ */
#define ENET_RCR_LOOP_MASK                       (0x1U)
#define ENET_RCR_LOOP_SHIFT                      (0U)
#define ENET_RCR_DRT_MASK                        (0x2U)
#define ENET_RCR_DRT_SHIFT                       (1U)
#define ENET_RCR_MII_MODE_MASK                   (0x4U)
#define ENET_RCR_MII_MODE_SHIFT                  (2U)
#define ENET_RCR_PROM_MASK                       (0x8U)
#define ENET_RCR_PROM_SHIFT                      (3U)
#define ENET_RCR_BC_REJ_MASK                     (0x10U)
#define ENET_RCR_BC_REJ_SHIFT                    (4U)
#define ENET_RCR_FCE_MASK                        (0x20U)
#define ENET_RCR_FCE_SHIFT                       (5U)
#define ENET_RCR_RGMII_EN_MASK                   (0x40U)
#define ENET_RCR_RGMII_EN_SHIFT                  (6U)
#define ENET_RCR_RMII_MODE_MASK                  (0x100U)
#define ENET_RCR_RMII_MODE_SHIFT                 (8U)
#define ENET_RCR_RMII_10T_MASK                   (0x200U)
#define ENET_RCR_RMII_10T_SHIFT                  (9U)
#define ENET_RCR_PADEN_MASK                      (0x1000U)
#define ENET_RCR_PADEN_SHIFT                     (12U)
#define ENET_RCR_PAUFWD_MASK                     (0x2000U)
#define ENET_RCR_PAUFWD_SHIFT                    (13U)
#define ENET_RCR_CRCFWD_MASK                     (0x4000U)
#define ENET_RCR_CRCFWD_SHIFT                    (14U)
#define ENET_RCR_CFEN_MASK                       (0x8000U)
#define ENET_RCR_CFEN_SHIFT                      (15U)
#define ENET_RCR_MAX_FL_MASK                     (0x3FFF0000U)
#define ENET_RCR_MAX_FL_SHIFT                    (16U)
#define ENET_RCR_MAX_FL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_RCR_MAX_FL_SHIFT)) & ENET_RCR_MAX_FL_MASK)
#define ENET_RCR_NLC_MASK                        (0x40000000U)
#define ENET_RCR_NLC_SHIFT                       (30U)
#define ENET_RCR_GRS_MASK                        (0x80000000U)
#define ENET_RCR_GRS_SHIFT                       (31U)
/*! @} */

/*! @name TCR - Transmit Control Register */
/*! @{ */
#define ENET_TCR_GTS_MASK                        (0x1U)
#define ENET_TCR_GTS_SHIFT                       (0U)
#define ENET_TCR_FDEN_MASK                       (0x4U)
#define ENET_TCR_FDEN_SHIFT                      (2U)
#define ENET_TCR_TFC_PAUSE_MASK                  (0x8U)
#define ENET_TCR_TFC_PAUSE_SHIFT                 (3U)
#define ENET_TCR_RFC_PAUSE_MASK                  (0x10U)
#define ENET_TCR_RFC_PAUSE_SHIFT                 (4U)
#define ENET_TCR_ADDSEL_MASK                     (0xE0U)
#define ENET_TCR_ADDSEL_SHIFT                    (5U)
/*! ADDSEL - Source MAC Address Select On Transmit
 *  0b000..Node MAC address programmed on PADDR1/2 registers.
 *  0b100..Reserved.
 *  0b101..Reserved.
 *  0b110..Reserved.
 */
#define ENET_TCR_ADDSEL(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCR_ADDSEL_SHIFT)) & ENET_TCR_ADDSEL_MASK)
#define ENET_TCR_ADDINS_MASK                     (0x100U)
#define ENET_TCR_ADDINS_SHIFT                    (8U)
#define ENET_TCR_CRCFWD_MASK                     (0x200U)
#define ENET_TCR_CRCFWD_SHIFT                    (9U)
/*! @} */

/*! @name PALR - Physical Address Lower Register */
/*! @{ */
#define ENET_PALR_PADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_PALR_PADDR1_SHIFT                   (0U)
#define ENET_PALR_PADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PALR_PADDR1_SHIFT)) & ENET_PALR_PADDR1_MASK)
/*! @} */

/*! @name PAUR - Physical Address Upper Register */
/*! @{ */
#define ENET_PAUR_TYPE_MASK                      (0xFFFFU)
#define ENET_PAUR_TYPE_SHIFT                     (0U)
#define ENET_PAUR_TYPE(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_TYPE_SHIFT)) & ENET_PAUR_TYPE_MASK)
#define ENET_PAUR_PADDR2_MASK                    (0xFFFF0000U)
#define ENET_PAUR_PADDR2_SHIFT                   (16U)
#define ENET_PAUR_PADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_PAUR_PADDR2_SHIFT)) & ENET_PAUR_PADDR2_MASK)
/*! @} */

/*! @name OPD - Opcode/Pause Duration Register */
/*! @{ */
#define ENET_OPD_PAUSE_DUR_MASK                  (0xFFFFU)
#define ENET_OPD_PAUSE_DUR_SHIFT                 (0U)
#define ENET_OPD_PAUSE_DUR(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_OPD_PAUSE_DUR_SHIFT)) & ENET_OPD_PAUSE_DUR_MASK)
#define ENET_OPD_OPCODE_MASK                     (0xFFFF0000U)
#define ENET_OPD_OPCODE_SHIFT                    (16U)
#define ENET_OPD_OPCODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_OPD_OPCODE_SHIFT)) & ENET_OPD_OPCODE_MASK)
/*! @} */

/*! @name TXIC - Transmit Interrupt Coalescing Register */
/*! @{ */
#define ENET_TXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_TXIC_ICTT_SHIFT                     (0U)
#define ENET_TXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICTT_SHIFT)) & ENET_TXIC_ICTT_MASK)
#define ENET_TXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_TXIC_ICFT_SHIFT                     (20U)
#define ENET_TXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TXIC_ICFT_SHIFT)) & ENET_TXIC_ICFT_MASK)
#define ENET_TXIC_ICCS_MASK                      (0x40000000U)
#define ENET_TXIC_ICCS_SHIFT                     (30U)
#define ENET_TXIC_ICEN_MASK                      (0x80000000U)
#define ENET_TXIC_ICEN_SHIFT                     (31U)
/*! @} */

/* The count of ENET_TXIC */
#define ENET_TXIC_COUNT                          (3U)

/*! @name RXIC - Receive Interrupt Coalescing Register */
/*! @{ */
#define ENET_RXIC_ICTT_MASK                      (0xFFFFU)
#define ENET_RXIC_ICTT_SHIFT                     (0U)
#define ENET_RXIC_ICTT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICTT_SHIFT)) & ENET_RXIC_ICTT_MASK)
#define ENET_RXIC_ICFT_MASK                      (0xFF00000U)
#define ENET_RXIC_ICFT_SHIFT                     (20U)
#define ENET_RXIC_ICFT(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RXIC_ICFT_SHIFT)) & ENET_RXIC_ICFT_MASK)
#define ENET_RXIC_ICCS_MASK                      (0x40000000U)
#define ENET_RXIC_ICCS_SHIFT                     (30U)
#define ENET_RXIC_ICEN_MASK                      (0x80000000U)
#define ENET_RXIC_ICEN_SHIFT                     (31U)
/*! @} */

/* The count of ENET_RXIC */
#define ENET_RXIC_COUNT                          (3U)

/*! @name IAUR - Descriptor Individual Upper Address Register */
/*! @{ */
#define ENET_IAUR_IADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_IAUR_IADDR1_SHIFT                   (0U)
#define ENET_IAUR_IADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IAUR_IADDR1_SHIFT)) & ENET_IAUR_IADDR1_MASK)
/*! @} */

/*! @name IALR - Descriptor Individual Lower Address Register */
/*! @{ */
#define ENET_IALR_IADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_IALR_IADDR2_SHIFT                   (0U)
#define ENET_IALR_IADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_IALR_IADDR2_SHIFT)) & ENET_IALR_IADDR2_MASK)
/*! @} */

/*! @name GAUR - Descriptor Group Upper Address Register */
/*! @{ */
#define ENET_GAUR_GADDR1_MASK                    (0xFFFFFFFFU)
#define ENET_GAUR_GADDR1_SHIFT                   (0U)
#define ENET_GAUR_GADDR1(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GAUR_GADDR1_SHIFT)) & ENET_GAUR_GADDR1_MASK)
/*! @} */

/*! @name GALR - Descriptor Group Lower Address Register */
/*! @{ */
#define ENET_GALR_GADDR2_MASK                    (0xFFFFFFFFU)
#define ENET_GALR_GADDR2_SHIFT                   (0U)
#define ENET_GALR_GADDR2(x)                      (((uint32_t)(((uint32_t)(x)) << ENET_GALR_GADDR2_SHIFT)) & ENET_GALR_GADDR2_MASK)
/*! @} */

/*! @name TFWR - Transmit FIFO Watermark Register */
/*! @{ */
#define ENET_TFWR_TFWR_MASK                      (0x3FU)
#define ENET_TFWR_TFWR_SHIFT                     (0U)
/*! TFWR - Transmit FIFO Write
 *  0b000000..64 bytes written.
 *  0b000001..64 bytes written.
 *  0b000010..128 bytes written.
 *  0b000011..192 bytes written.
 *  0b111111..4032 bytes written.
 */
#define ENET_TFWR_TFWR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_TFWR_TFWR_SHIFT)) & ENET_TFWR_TFWR_MASK)
#define ENET_TFWR_STRFWD_MASK                    (0x100U)
#define ENET_TFWR_STRFWD_SHIFT                   (8U)
/*! @} */

/*! @name RDSR1 - Receive Descriptor Ring 1 Start Register */
/*! @{ */
#define ENET_RDSR1_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR1_R_DES_START_SHIFT             (3U)
#define ENET_RDSR1_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR1_R_DES_START_SHIFT)) & ENET_RDSR1_R_DES_START_MASK)
/*! @} */

/*! @name TDSR1 - Transmit Buffer Descriptor Ring 1 Start Register */
/*! @{ */
#define ENET_TDSR1_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR1_X_DES_START_SHIFT             (3U)
#define ENET_TDSR1_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR1_X_DES_START_SHIFT)) & ENET_TDSR1_X_DES_START_MASK)
/*! @} */

/*! @name MRBR1 - Maximum Receive Buffer Size Register - Ring 1 */
/*! @{ */
#define ENET_MRBR1_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR1_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR1_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR1_R_BUF_SIZE_SHIFT)) & ENET_MRBR1_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RDSR2 - Receive Descriptor Ring 2 Start Register */
/*! @{ */
#define ENET_RDSR2_R_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_RDSR2_R_DES_START_SHIFT             (3U)
#define ENET_RDSR2_R_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RDSR2_R_DES_START_SHIFT)) & ENET_RDSR2_R_DES_START_MASK)
/*! @} */

/*! @name TDSR2 - Transmit Buffer Descriptor Ring 2 Start Register */
/*! @{ */
#define ENET_TDSR2_X_DES_START_MASK              (0xFFFFFFF8U)
#define ENET_TDSR2_X_DES_START_SHIFT             (3U)
#define ENET_TDSR2_X_DES_START(x)                (((uint32_t)(((uint32_t)(x)) << ENET_TDSR2_X_DES_START_SHIFT)) & ENET_TDSR2_X_DES_START_MASK)
/*! @} */

/*! @name MRBR2 - Maximum Receive Buffer Size Register - Ring 2 */
/*! @{ */
#define ENET_MRBR2_R_BUF_SIZE_MASK               (0x7F0U)
#define ENET_MRBR2_R_BUF_SIZE_SHIFT              (4U)
#define ENET_MRBR2_R_BUF_SIZE(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_MRBR2_R_BUF_SIZE_SHIFT)) & ENET_MRBR2_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RDSR - Receive Descriptor Ring 0 Start Register */
/*! @{ */
#define ENET_RDSR_R_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_RDSR_R_DES_START_SHIFT              (3U)
#define ENET_RDSR_R_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RDSR_R_DES_START_SHIFT)) & ENET_RDSR_R_DES_START_MASK)
/*! @} */

/*! @name TDSR - Transmit Buffer Descriptor Ring 0 Start Register */
/*! @{ */
#define ENET_TDSR_X_DES_START_MASK               (0xFFFFFFF8U)
#define ENET_TDSR_X_DES_START_SHIFT              (3U)
#define ENET_TDSR_X_DES_START(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_TDSR_X_DES_START_SHIFT)) & ENET_TDSR_X_DES_START_MASK)
/*! @} */

/*! @name MRBR - Maximum Receive Buffer Size Register - Ring 0 */
/*! @{ */
#define ENET_MRBR_R_BUF_SIZE_MASK                (0x7F0U)
#define ENET_MRBR_R_BUF_SIZE_SHIFT               (4U)
#define ENET_MRBR_R_BUF_SIZE(x)                  (((uint32_t)(((uint32_t)(x)) << ENET_MRBR_R_BUF_SIZE_SHIFT)) & ENET_MRBR_R_BUF_SIZE_MASK)
/*! @} */

/*! @name RSFL - Receive FIFO Section Full Threshold */
/*! @{ */
#define ENET_RSFL_RX_SECTION_FULL_MASK           (0x3FFU)
#define ENET_RSFL_RX_SECTION_FULL_SHIFT          (0U)
#define ENET_RSFL_RX_SECTION_FULL(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RSFL_RX_SECTION_FULL_SHIFT)) & ENET_RSFL_RX_SECTION_FULL_MASK)
/*! @} */

/*! @name RSEM - Receive FIFO Section Empty Threshold */
/*! @{ */
#define ENET_RSEM_RX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_RSEM_RX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_RSEM_RX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_RX_SECTION_EMPTY_SHIFT)) & ENET_RSEM_RX_SECTION_EMPTY_MASK)
#define ENET_RSEM_STAT_SECTION_EMPTY_MASK        (0x1F0000U)
#define ENET_RSEM_STAT_SECTION_EMPTY_SHIFT       (16U)
#define ENET_RSEM_STAT_SECTION_EMPTY(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RSEM_STAT_SECTION_EMPTY_SHIFT)) & ENET_RSEM_STAT_SECTION_EMPTY_MASK)
/*! @} */

/*! @name RAEM - Receive FIFO Almost Empty Threshold */
/*! @{ */
#define ENET_RAEM_RX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_RAEM_RX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_RAEM_RX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RAEM_RX_ALMOST_EMPTY_SHIFT)) & ENET_RAEM_RX_ALMOST_EMPTY_MASK)
/*! @} */

/*! @name RAFL - Receive FIFO Almost Full Threshold */
/*! @{ */
#define ENET_RAFL_RX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_RAFL_RX_ALMOST_FULL_SHIFT           (0U)
#define ENET_RAFL_RX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RAFL_RX_ALMOST_FULL_SHIFT)) & ENET_RAFL_RX_ALMOST_FULL_MASK)
/*! @} */

/*! @name TSEM - Transmit FIFO Section Empty Threshold */
/*! @{ */
#define ENET_TSEM_TX_SECTION_EMPTY_MASK          (0x3FFU)
#define ENET_TSEM_TX_SECTION_EMPTY_SHIFT         (0U)
#define ENET_TSEM_TX_SECTION_EMPTY(x)            (((uint32_t)(((uint32_t)(x)) << ENET_TSEM_TX_SECTION_EMPTY_SHIFT)) & ENET_TSEM_TX_SECTION_EMPTY_MASK)
/*! @} */

/*! @name TAEM - Transmit FIFO Almost Empty Threshold */
/*! @{ */
#define ENET_TAEM_TX_ALMOST_EMPTY_MASK           (0x3FFU)
#define ENET_TAEM_TX_ALMOST_EMPTY_SHIFT          (0U)
#define ENET_TAEM_TX_ALMOST_EMPTY(x)             (((uint32_t)(((uint32_t)(x)) << ENET_TAEM_TX_ALMOST_EMPTY_SHIFT)) & ENET_TAEM_TX_ALMOST_EMPTY_MASK)
/*! @} */

/*! @name TAFL - Transmit FIFO Almost Full Threshold */
/*! @{ */
#define ENET_TAFL_TX_ALMOST_FULL_MASK            (0x3FFU)
#define ENET_TAFL_TX_ALMOST_FULL_SHIFT           (0U)
#define ENET_TAFL_TX_ALMOST_FULL(x)              (((uint32_t)(((uint32_t)(x)) << ENET_TAFL_TX_ALMOST_FULL_SHIFT)) & ENET_TAFL_TX_ALMOST_FULL_MASK)
/*! @} */

/*! @name TIPG - Transmit Inter-Packet Gap */
/*! @{ */
#define ENET_TIPG_IPG_MASK                       (0x1FU)
#define ENET_TIPG_IPG_SHIFT                      (0U)
#define ENET_TIPG_IPG(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TIPG_IPG_SHIFT)) & ENET_TIPG_IPG_MASK)
/*! @} */

/*! @name FTRL - Frame Truncation Length */
/*! @{ */
#define ENET_FTRL_TRUNC_FL_MASK                  (0x3FFFU)
#define ENET_FTRL_TRUNC_FL_SHIFT                 (0U)
#define ENET_FTRL_TRUNC_FL(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_FTRL_TRUNC_FL_SHIFT)) & ENET_FTRL_TRUNC_FL_MASK)
/*! @} */

/*! @name TACC - Transmit Accelerator Function Configuration */
/*! @{ */
#define ENET_TACC_SHIFT16_MASK                   (0x1U)
#define ENET_TACC_SHIFT16_SHIFT                  (0U)
#define ENET_TACC_IPCHK_MASK                     (0x8U)
#define ENET_TACC_IPCHK_SHIFT                    (3U)
#define ENET_TACC_PROCHK_MASK                    (0x10U)
#define ENET_TACC_PROCHK_SHIFT                   (4U)
/*! @} */

/*! @name RACC - Receive Accelerator Function Configuration */
/*! @{ */
#define ENET_RACC_PADREM_MASK                    (0x1U)
#define ENET_RACC_PADREM_SHIFT                   (0U)
#define ENET_RACC_IPDIS_MASK                     (0x2U)
#define ENET_RACC_IPDIS_SHIFT                    (1U)
#define ENET_RACC_PRODIS_MASK                    (0x4U)
#define ENET_RACC_PRODIS_SHIFT                   (2U)
#define ENET_RACC_LINEDIS_MASK                   (0x40U)
#define ENET_RACC_LINEDIS_SHIFT                  (6U)
#define ENET_RACC_SHIFT16_MASK                   (0x80U)
#define ENET_RACC_SHIFT16_SHIFT                  (7U)
/*! @} */

/*! @name RCMR - Receive Classification Match Register for Class n */
/*! @{ */
#define ENET_RCMR_CMP0_MASK                      (0x7U)
#define ENET_RCMR_CMP0_SHIFT                     (0U)
#define ENET_RCMR_CMP0(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP0_SHIFT)) & ENET_RCMR_CMP0_MASK)
#define ENET_RCMR_CMP1_MASK                      (0x70U)
#define ENET_RCMR_CMP1_SHIFT                     (4U)
#define ENET_RCMR_CMP1(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP1_SHIFT)) & ENET_RCMR_CMP1_MASK)
#define ENET_RCMR_CMP2_MASK                      (0x700U)
#define ENET_RCMR_CMP2_SHIFT                     (8U)
#define ENET_RCMR_CMP2(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP2_SHIFT)) & ENET_RCMR_CMP2_MASK)
#define ENET_RCMR_CMP3_MASK                      (0x7000U)
#define ENET_RCMR_CMP3_SHIFT                     (12U)
#define ENET_RCMR_CMP3(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_RCMR_CMP3_SHIFT)) & ENET_RCMR_CMP3_MASK)
#define ENET_RCMR_MATCHEN_MASK                   (0x10000U)
#define ENET_RCMR_MATCHEN_SHIFT                  (16U)
/*! @} */

/* The count of ENET_RCMR */
#define ENET_RCMR_COUNT                          (2U)

/*! @name DMACFG - DMA Class Based Configuration */
/*! @{ */
#define ENET_DMACFG_IDLE_SLOPE_MASK              (0xFFFFU)
#define ENET_DMACFG_IDLE_SLOPE_SHIFT             (0U)
#define ENET_DMACFG_IDLE_SLOPE(x)                (((uint32_t)(((uint32_t)(x)) << ENET_DMACFG_IDLE_SLOPE_SHIFT)) & ENET_DMACFG_IDLE_SLOPE_MASK)
#define ENET_DMACFG_DMA_CLASS_EN_MASK            (0x10000U)
#define ENET_DMACFG_DMA_CLASS_EN_SHIFT           (16U)
#define ENET_DMACFG_CALC_NOIPG_MASK              (0x20000U)
#define ENET_DMACFG_CALC_NOIPG_SHIFT             (17U)
/*! @} */

/* The count of ENET_DMACFG */
#define ENET_DMACFG_COUNT                        (2U)

/*! @name RDAR1 - Receive Descriptor Active Register - Ring 1 */
/*! @{ */
#define ENET_RDAR1_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR1_RDAR_SHIFT                    (24U)
/*! @} */

/*! @name TDAR1 - Transmit Descriptor Active Register - Ring 1 */
/*! @{ */
#define ENET_TDAR1_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR1_TDAR_SHIFT                    (24U)
/*! @} */

/*! @name RDAR2 - Receive Descriptor Active Register - Ring 2 */
/*! @{ */
#define ENET_RDAR2_RDAR_MASK                     (0x1000000U)
#define ENET_RDAR2_RDAR_SHIFT                    (24U)
/*! @} */

/*! @name TDAR2 - Transmit Descriptor Active Register - Ring 2 */
/*! @{ */
#define ENET_TDAR2_TDAR_MASK                     (0x1000000U)
#define ENET_TDAR2_TDAR_SHIFT                    (24U)
/*! @} */

/*! @name QOS - QOS Scheme */
/*! @{ */
#define ENET_QOS_TX_SCHEME_MASK                  (0x7U)
#define ENET_QOS_TX_SCHEME_SHIFT                 (0U)
/*! TX_SCHEME - TX scheme configuration
 *  0b000..Credit-based scheme
 *  0b001..Round-robin scheme
 */
#define ENET_QOS_TX_SCHEME(x)                    (((uint32_t)(((uint32_t)(x)) << ENET_QOS_TX_SCHEME_SHIFT)) & ENET_QOS_TX_SCHEME_MASK)
#define ENET_QOS_RX_FLUSH0_MASK                  (0x8U)
#define ENET_QOS_RX_FLUSH0_SHIFT                 (3U)
#define ENET_QOS_RX_FLUSH1_MASK                  (0x10U)
#define ENET_QOS_RX_FLUSH1_SHIFT                 (4U)
#define ENET_QOS_RX_FLUSH2_MASK                  (0x20U)
#define ENET_QOS_RX_FLUSH2_SHIFT                 (5U)
/*! @} */

/*! @name RMON_T_PACKETS - Tx Packet Count Statistic Register */
/*! @{ */
#define ENET_RMON_T_PACKETS_TXPKTS_MASK          (0xFFFFU)
#define ENET_RMON_T_PACKETS_TXPKTS_SHIFT         (0U)
#define ENET_RMON_T_PACKETS_TXPKTS(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_PACKETS_TXPKTS_SHIFT)) & ENET_RMON_T_PACKETS_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_BC_PKT - Tx Broadcast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_BC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_BC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_BC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_BC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_BC_PKT_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_MC_PKT - Tx Multicast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_MC_PKT_TXPKTS_MASK           (0xFFFFU)
#define ENET_RMON_T_MC_PKT_TXPKTS_SHIFT          (0U)
#define ENET_RMON_T_MC_PKT_TXPKTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_MC_PKT_TXPKTS_SHIFT)) & ENET_RMON_T_MC_PKT_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_CRC_ALIGN - Tx Packets with CRC/Align Error Statistic Register */
/*! @{ */
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_CRC_ALIGN_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT)) & ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_UNDERSIZE - Tx Packets Less Than Bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_UNDERSIZE_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_UNDERSIZE_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_UNDERSIZE_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_OVERSIZE - Tx Packets GT MAX_FL bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_OVERSIZE_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_OVERSIZE_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT)) & ENET_RMON_T_OVERSIZE_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_FRAG - Tx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_FRAG_TXPKTS_MASK             (0xFFFFU)
#define ENET_RMON_T_FRAG_TXPKTS_SHIFT            (0U)
#define ENET_RMON_T_FRAG_TXPKTS(x)               (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_FRAG_TXPKTS_SHIFT)) & ENET_RMON_T_FRAG_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_JAB - Tx Packets Greater Than MAX_FL bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_T_JAB_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_JAB_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_JAB_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_JAB_TXPKTS_SHIFT)) & ENET_RMON_T_JAB_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_COL - Tx Collision Count Statistic Register */
/*! @{ */
#define ENET_RMON_T_COL_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_COL_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_COL_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_COL_TXPKTS_SHIFT)) & ENET_RMON_T_COL_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P64 - Tx 64-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P64_TXPKTS_MASK              (0xFFFFU)
#define ENET_RMON_T_P64_TXPKTS_SHIFT             (0U)
#define ENET_RMON_T_P64_TXPKTS(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P64_TXPKTS_SHIFT)) & ENET_RMON_T_P64_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P65TO127 - Tx 65- to 127-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P65TO127_TXPKTS_MASK         (0xFFFFU)
#define ENET_RMON_T_P65TO127_TXPKTS_SHIFT        (0U)
#define ENET_RMON_T_P65TO127_TXPKTS(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P65TO127_TXPKTS_SHIFT)) & ENET_RMON_T_P65TO127_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P128TO255 - Tx 128- to 255-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P128TO255_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P128TO255_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P128TO255_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P128TO255_TXPKTS_SHIFT)) & ENET_RMON_T_P128TO255_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P256TO511 - Tx 256- to 511-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P256TO511_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P256TO511_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P256TO511_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P256TO511_TXPKTS_SHIFT)) & ENET_RMON_T_P256TO511_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P512TO1023 - Tx 512- to 1023-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P512TO1023_TXPKTS_MASK       (0xFFFFU)
#define ENET_RMON_T_P512TO1023_TXPKTS_SHIFT      (0U)
#define ENET_RMON_T_P512TO1023_TXPKTS(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P512TO1023_TXPKTS_SHIFT)) & ENET_RMON_T_P512TO1023_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P1024TO2047 - Tx 1024- to 2047-byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_T_P1024TO2047_TXPKTS_MASK      (0xFFFFU)
#define ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT     (0U)
#define ENET_RMON_T_P1024TO2047_TXPKTS(x)        (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT)) & ENET_RMON_T_P1024TO2047_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_P_GTE2048 - Tx Packets Greater Than 2048 Bytes Statistic Register */
/*! @{ */
#define ENET_RMON_T_P_GTE2048_TXPKTS_MASK        (0xFFFFU)
#define ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT       (0U)
#define ENET_RMON_T_P_GTE2048_TXPKTS(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT)) & ENET_RMON_T_P_GTE2048_TXPKTS_MASK)
/*! @} */

/*! @name RMON_T_OCTETS - Tx Octets Statistic Register */
/*! @{ */
#define ENET_RMON_T_OCTETS_TXOCTS_MASK           (0xFFFFFFFFU)
#define ENET_RMON_T_OCTETS_TXOCTS_SHIFT          (0U)
#define ENET_RMON_T_OCTETS_TXOCTS(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_T_OCTETS_TXOCTS_SHIFT)) & ENET_RMON_T_OCTETS_TXOCTS_MASK)
/*! @} */

/*! @name IEEE_T_FRAME_OK - Frames Transmitted OK Statistic Register */
/*! @{ */
#define ENET_IEEE_T_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_T_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_T_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_T_FRAME_OK_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_1COL - Frames Transmitted with Single Collision Statistic Register */
/*! @{ */
#define ENET_IEEE_T_1COL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_1COL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_1COL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_1COL_COUNT_SHIFT)) & ENET_IEEE_T_1COL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_MCOL - Frames Transmitted with Multiple Collisions Statistic Register */
/*! @{ */
#define ENET_IEEE_T_MCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_MCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_MCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MCOL_COUNT_SHIFT)) & ENET_IEEE_T_MCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_DEF - Frames Transmitted after Deferral Delay Statistic Register */
/*! @{ */
#define ENET_IEEE_T_DEF_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_DEF_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_DEF_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_DEF_COUNT_SHIFT)) & ENET_IEEE_T_DEF_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_LCOL - Frames Transmitted with Late Collision Statistic Register */
/*! @{ */
#define ENET_IEEE_T_LCOL_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_T_LCOL_COUNT_SHIFT             (0U)
#define ENET_IEEE_T_LCOL_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_LCOL_COUNT_SHIFT)) & ENET_IEEE_T_LCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_EXCOL - Frames Transmitted with Excessive Collisions Statistic Register */
/*! @{ */
#define ENET_IEEE_T_EXCOL_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_EXCOL_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_EXCOL_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_EXCOL_COUNT_SHIFT)) & ENET_IEEE_T_EXCOL_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_MACERR - Frames Transmitted with Tx FIFO Underrun Statistic Register */
/*! @{ */
#define ENET_IEEE_T_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_T_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_T_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_MACERR_COUNT_SHIFT)) & ENET_IEEE_T_MACERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_CSERR - Frames Transmitted with Carrier Sense Error Statistic Register */
/*! @{ */
#define ENET_IEEE_T_CSERR_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_CSERR_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_CSERR_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_CSERR_COUNT_SHIFT)) & ENET_IEEE_T_CSERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_SQE - Reserved Statistic Register */
/*! @{ */
#define ENET_IEEE_T_SQE_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_T_SQE_COUNT_SHIFT              (0U)
#define ENET_IEEE_T_SQE_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_SQE_COUNT_SHIFT)) & ENET_IEEE_T_SQE_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_FDXFC - Flow Control Pause Frames Transmitted Statistic Register */
/*! @{ */
#define ENET_IEEE_T_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_T_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_T_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_FDXFC_COUNT_SHIFT)) & ENET_IEEE_T_FDXFC_COUNT_MASK)
/*! @} */

/*! @name IEEE_T_OCTETS_OK - Octet Count for Frames Transmitted w/o Error Statistic Register */
/*! @{ */
#define ENET_IEEE_T_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_T_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_T_OCTETS_OK_COUNT_MASK)
/*! @} */

/*! @name RMON_R_PACKETS - Rx Packet Count Statistic Register */
/*! @{ */
#define ENET_RMON_R_PACKETS_COUNT_MASK           (0xFFFFU)
#define ENET_RMON_R_PACKETS_COUNT_SHIFT          (0U)
#define ENET_RMON_R_PACKETS_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_PACKETS_COUNT_SHIFT)) & ENET_RMON_R_PACKETS_COUNT_MASK)
/*! @} */

/*! @name RMON_R_BC_PKT - Rx Broadcast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_BC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_BC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_BC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_BC_PKT_COUNT_SHIFT)) & ENET_RMON_R_BC_PKT_COUNT_MASK)
/*! @} */

/*! @name RMON_R_MC_PKT - Rx Multicast Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_MC_PKT_COUNT_MASK            (0xFFFFU)
#define ENET_RMON_R_MC_PKT_COUNT_SHIFT           (0U)
#define ENET_RMON_R_MC_PKT_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_MC_PKT_COUNT_SHIFT)) & ENET_RMON_R_MC_PKT_COUNT_MASK)
/*! @} */

/*! @name RMON_R_CRC_ALIGN - Rx Packets with CRC/Align Error Statistic Register */
/*! @{ */
#define ENET_RMON_R_CRC_ALIGN_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT        (0U)
#define ENET_RMON_R_CRC_ALIGN_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT)) & ENET_RMON_R_CRC_ALIGN_COUNT_MASK)
/*! @} */

/*! @name RMON_R_UNDERSIZE - Rx Packets with Less Than 64 Bytes and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_UNDERSIZE_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_UNDERSIZE_COUNT_SHIFT        (0U)
#define ENET_RMON_R_UNDERSIZE_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_UNDERSIZE_COUNT_SHIFT)) & ENET_RMON_R_UNDERSIZE_COUNT_MASK)
/*! @} */

/*! @name RMON_R_OVERSIZE - Rx Packets Greater Than MAX_FL and Good CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_OVERSIZE_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_OVERSIZE_COUNT_SHIFT         (0U)
#define ENET_RMON_R_OVERSIZE_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OVERSIZE_COUNT_SHIFT)) & ENET_RMON_R_OVERSIZE_COUNT_MASK)
/*! @} */

/*! @name RMON_R_FRAG - Rx Packets Less Than 64 Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_FRAG_COUNT_MASK              (0xFFFFU)
#define ENET_RMON_R_FRAG_COUNT_SHIFT             (0U)
#define ENET_RMON_R_FRAG_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_FRAG_COUNT_SHIFT)) & ENET_RMON_R_FRAG_COUNT_MASK)
/*! @} */

/*! @name RMON_R_JAB - Rx Packets Greater Than MAX_FL Bytes and Bad CRC Statistic Register */
/*! @{ */
#define ENET_RMON_R_JAB_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_JAB_COUNT_SHIFT              (0U)
#define ENET_RMON_R_JAB_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_JAB_COUNT_SHIFT)) & ENET_RMON_R_JAB_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P64 - Rx 64-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P64_COUNT_MASK               (0xFFFFU)
#define ENET_RMON_R_P64_COUNT_SHIFT              (0U)
#define ENET_RMON_R_P64_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P64_COUNT_SHIFT)) & ENET_RMON_R_P64_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P65TO127 - Rx 65- to 127-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P65TO127_COUNT_MASK          (0xFFFFU)
#define ENET_RMON_R_P65TO127_COUNT_SHIFT         (0U)
#define ENET_RMON_R_P65TO127_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P65TO127_COUNT_SHIFT)) & ENET_RMON_R_P65TO127_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P128TO255 - Rx 128- to 255-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P128TO255_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P128TO255_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P128TO255_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P128TO255_COUNT_SHIFT)) & ENET_RMON_R_P128TO255_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P256TO511 - Rx 256- to 511-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P256TO511_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P256TO511_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P256TO511_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P256TO511_COUNT_SHIFT)) & ENET_RMON_R_P256TO511_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P512TO1023 - Rx 512- to 1023-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P512TO1023_COUNT_MASK        (0xFFFFU)
#define ENET_RMON_R_P512TO1023_COUNT_SHIFT       (0U)
#define ENET_RMON_R_P512TO1023_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P512TO1023_COUNT_SHIFT)) & ENET_RMON_R_P512TO1023_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P1024TO2047 - Rx 1024- to 2047-Byte Packets Statistic Register */
/*! @{ */
#define ENET_RMON_R_P1024TO2047_COUNT_MASK       (0xFFFFU)
#define ENET_RMON_R_P1024TO2047_COUNT_SHIFT      (0U)
#define ENET_RMON_R_P1024TO2047_COUNT(x)         (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P1024TO2047_COUNT_SHIFT)) & ENET_RMON_R_P1024TO2047_COUNT_MASK)
/*! @} */

/*! @name RMON_R_P_GTE2048 - Rx Packets Greater than 2048 Bytes Statistic Register */
/*! @{ */
#define ENET_RMON_R_P_GTE2048_COUNT_MASK         (0xFFFFU)
#define ENET_RMON_R_P_GTE2048_COUNT_SHIFT        (0U)
#define ENET_RMON_R_P_GTE2048_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_P_GTE2048_COUNT_SHIFT)) & ENET_RMON_R_P_GTE2048_COUNT_MASK)
/*! @} */

/*! @name RMON_R_OCTETS - Rx Octets Statistic Register */
/*! @{ */
#define ENET_RMON_R_OCTETS_COUNT_MASK            (0xFFFFFFFFU)
#define ENET_RMON_R_OCTETS_COUNT_SHIFT           (0U)
#define ENET_RMON_R_OCTETS_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_RMON_R_OCTETS_COUNT_SHIFT)) & ENET_RMON_R_OCTETS_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_DROP - Frames not Counted Correctly Statistic Register */
/*! @{ */
#define ENET_IEEE_R_DROP_COUNT_MASK              (0xFFFFU)
#define ENET_IEEE_R_DROP_COUNT_SHIFT             (0U)
#define ENET_IEEE_R_DROP_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_DROP_COUNT_SHIFT)) & ENET_IEEE_R_DROP_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_FRAME_OK - Frames Received OK Statistic Register */
/*! @{ */
#define ENET_IEEE_R_FRAME_OK_COUNT_MASK          (0xFFFFU)
#define ENET_IEEE_R_FRAME_OK_COUNT_SHIFT         (0U)
#define ENET_IEEE_R_FRAME_OK_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FRAME_OK_COUNT_SHIFT)) & ENET_IEEE_R_FRAME_OK_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_CRC - Frames Received with CRC Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_CRC_COUNT_MASK               (0xFFFFU)
#define ENET_IEEE_R_CRC_COUNT_SHIFT              (0U)
#define ENET_IEEE_R_CRC_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_CRC_COUNT_SHIFT)) & ENET_IEEE_R_CRC_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_ALIGN - Frames Received with Alignment Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_ALIGN_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_ALIGN_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_ALIGN_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_ALIGN_COUNT_SHIFT)) & ENET_IEEE_R_ALIGN_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_MACERR - Receive FIFO Overflow Count Statistic Register */
/*! @{ */
#define ENET_IEEE_R_MACERR_COUNT_MASK            (0xFFFFU)
#define ENET_IEEE_R_MACERR_COUNT_SHIFT           (0U)
#define ENET_IEEE_R_MACERR_COUNT(x)              (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_MACERR_COUNT_SHIFT)) & ENET_IEEE_R_MACERR_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_FDXFC - Flow Control Pause Frames Received Statistic Register */
/*! @{ */
#define ENET_IEEE_R_FDXFC_COUNT_MASK             (0xFFFFU)
#define ENET_IEEE_R_FDXFC_COUNT_SHIFT            (0U)
#define ENET_IEEE_R_FDXFC_COUNT(x)               (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_FDXFC_COUNT_SHIFT)) & ENET_IEEE_R_FDXFC_COUNT_MASK)
/*! @} */

/*! @name IEEE_R_OCTETS_OK - Octet Count for Frames Received without Error Statistic Register */
/*! @{ */
#define ENET_IEEE_R_OCTETS_OK_COUNT_MASK         (0xFFFFFFFFU)
#define ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT        (0U)
#define ENET_IEEE_R_OCTETS_OK_COUNT(x)           (((uint32_t)(((uint32_t)(x)) << ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT)) & ENET_IEEE_R_OCTETS_OK_COUNT_MASK)
/*! @} */

/*! @name ATCR - Adjustable Timer Control Register */
/*! @{ */
#define ENET_ATCR_EN_MASK                        (0x1U)
#define ENET_ATCR_EN_SHIFT                       (0U)
#define ENET_ATCR_OFFEN_MASK                     (0x4U)
#define ENET_ATCR_OFFEN_SHIFT                    (2U)
#define ENET_ATCR_OFFRST_MASK                    (0x8U)
#define ENET_ATCR_OFFRST_SHIFT                   (3U)
#define ENET_ATCR_PEREN_MASK                     (0x10U)
#define ENET_ATCR_PEREN_SHIFT                    (4U)
#define ENET_ATCR_PINPER_MASK                    (0x80U)
#define ENET_ATCR_PINPER_SHIFT                   (7U)
#define ENET_ATCR_RESTART_MASK                   (0x200U)
#define ENET_ATCR_RESTART_SHIFT                  (9U)
#define ENET_ATCR_CAPTURE_MASK                   (0x800U)
#define ENET_ATCR_CAPTURE_SHIFT                  (11U)
#define ENET_ATCR_SLAVE_MASK                     (0x2000U)
#define ENET_ATCR_SLAVE_SHIFT                    (13U)
/*! @} */

/*! @name ATVR - Timer Value Register */
/*! @{ */
#define ENET_ATVR_ATIME_MASK                     (0xFFFFFFFFU)
#define ENET_ATVR_ATIME_SHIFT                    (0U)
#define ENET_ATVR_ATIME(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_ATVR_ATIME_SHIFT)) & ENET_ATVR_ATIME_MASK)
/*! @} */

/*! @name ATOFF - Timer Offset Register */
/*! @{ */
#define ENET_ATOFF_OFFSET_MASK                   (0xFFFFFFFFU)
#define ENET_ATOFF_OFFSET_SHIFT                  (0U)
#define ENET_ATOFF_OFFSET(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATOFF_OFFSET_SHIFT)) & ENET_ATOFF_OFFSET_MASK)
/*! @} */

/*! @name ATPER - Timer Period Register */
/*! @{ */
#define ENET_ATPER_PERIOD_MASK                   (0xFFFFFFFFU)
#define ENET_ATPER_PERIOD_SHIFT                  (0U)
#define ENET_ATPER_PERIOD(x)                     (((uint32_t)(((uint32_t)(x)) << ENET_ATPER_PERIOD_SHIFT)) & ENET_ATPER_PERIOD_MASK)
/*! @} */

/*! @name ATCOR - Timer Correction Register */
/*! @{ */
#define ENET_ATCOR_COR_MASK                      (0x7FFFFFFFU)
#define ENET_ATCOR_COR_SHIFT                     (0U)
#define ENET_ATCOR_COR(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATCOR_COR_SHIFT)) & ENET_ATCOR_COR_MASK)
/*! @} */

/*! @name ATINC - Time-Stamping Clock Period Register */
/*! @{ */
#define ENET_ATINC_INC_MASK                      (0x7FU)
#define ENET_ATINC_INC_SHIFT                     (0U)
#define ENET_ATINC_INC(x)                        (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_SHIFT)) & ENET_ATINC_INC_MASK)
#define ENET_ATINC_INC_CORR_MASK                 (0x7F00U)
#define ENET_ATINC_INC_CORR_SHIFT                (8U)
#define ENET_ATINC_INC_CORR(x)                   (((uint32_t)(((uint32_t)(x)) << ENET_ATINC_INC_CORR_SHIFT)) & ENET_ATINC_INC_CORR_MASK)
/*! @} */

/*! @name ATSTMP - Timestamp of Last Transmitted Frame */
/*! @{ */
#define ENET_ATSTMP_TIMESTAMP_MASK               (0xFFFFFFFFU)
#define ENET_ATSTMP_TIMESTAMP_SHIFT              (0U)
#define ENET_ATSTMP_TIMESTAMP(x)                 (((uint32_t)(((uint32_t)(x)) << ENET_ATSTMP_TIMESTAMP_SHIFT)) & ENET_ATSTMP_TIMESTAMP_MASK)
/*! @} */

/*! @name TGSR - Timer Global Status Register */
/*! @{ */
#define ENET_TGSR_TF0_MASK                       (0x1U)
#define ENET_TGSR_TF0_SHIFT                      (0U)
#define ENET_TGSR_TF1_MASK                       (0x2U)
#define ENET_TGSR_TF1_SHIFT                      (1U)
#define ENET_TGSR_TF2_MASK                       (0x4U)
#define ENET_TGSR_TF2_SHIFT                      (2U)
#define ENET_TGSR_TF3_MASK                       (0x8U)
#define ENET_TGSR_TF3_SHIFT                      (3U)
/*! @} */

/*! @name TCSR - Timer Control Status Register */
/*! @{ */
#define ENET_TCSR_TDRE_MASK                      (0x1U)
#define ENET_TCSR_TDRE_SHIFT                     (0U)
#define ENET_TCSR_TMODE_MASK                     (0x3CU)
#define ENET_TCSR_TMODE_SHIFT                    (2U)
/*! TMODE - Timer Mode
 *  0b0000..Timer Channel is disabled.
 *  0b0001..Timer Channel is configured for Input Capture on rising edge.
 *  0b0010..Timer Channel is configured for Input Capture on falling edge.
 *  0b0011..Timer Channel is configured for Input Capture on both edges.
 *  0b0100..Timer Channel is configured for Output Compare - software only.
 *  0b0101..Timer Channel is configured for Output Compare - toggle output on compare.
 *  0b0110..Timer Channel is configured for Output Compare - clear output on compare.
 *  0b0111..Timer Channel is configured for Output Compare - set output on compare.
 *  0b1000..Reserved
 *  0b1010..Timer Channel is configured for Output Compare - clear output on compare, set output on overflow.
 *  0b10x1..Timer Channel is configured for Output Compare - set output on compare, clear output on overflow.
 *  0b110x..Reserved
 *  0b1110..Timer Channel is configured for Output Compare - pulse output low on compare for one 1588-clock cycle.
 *  0b1111..Timer Channel is configured for Output Compare - pulse output high on compare for one 1588-clock cycle.
 */
#define ENET_TCSR_TMODE(x)                       (((uint32_t)(((uint32_t)(x)) << ENET_TCSR_TMODE_SHIFT)) & ENET_TCSR_TMODE_MASK)
#define ENET_TCSR_TIE_MASK                       (0x40U)
#define ENET_TCSR_TIE_SHIFT                      (6U)
#define ENET_TCSR_TF_MASK                        (0x80U)
#define ENET_TCSR_TF_SHIFT                       (7U)
/*! @} */

/* The count of ENET_TCSR */
#define ENET_TCSR_COUNT                          (4U)

/*! @name TCCR - Timer Compare Capture Register */
/*! @{ */
#define ENET_TCCR_TCC_MASK                       (0xFFFFFFFFU)
#define ENET_TCCR_TCC_SHIFT                      (0U)
#define ENET_TCCR_TCC(x)                         (((uint32_t)(((uint32_t)(x)) << ENET_TCCR_TCC_SHIFT)) & ENET_TCCR_TCC_MASK)
/*! @} */

/* The count of ENET_TCCR */
#define ENET_TCCR_COUNT                          (4U)


/*!
 * @}
 */ /* end of group ENET_Register_Masks */


/* ENET - Peripheral instance base addresses */
/** Peripheral ENET base pointer */
#define ENET_BASE_PTR                            ((ENET_MemMapPtr)0x30BE0000u)
/** Array initializer of ENET peripheral base pointers */
#define ENET_BASE_PTRS                           { ENET_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ENET - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ENET_Register_Accessor_Macros ENET - Register accessor macros
 * @{
 */


/* ENET - Register instance definitions */
/* ENET */
#define ENET_EIR                                 ENET_EIR_REG(ENET_BASE_PTR)
#define ENET_EIMR                                ENET_EIMR_REG(ENET_BASE_PTR)
#define ENET_RDAR                                ENET_RDAR_REG(ENET_BASE_PTR)
#define ENET_TDAR                                ENET_TDAR_REG(ENET_BASE_PTR)
#define ENET_ECR                                 ENET_ECR_REG(ENET_BASE_PTR)
#define ENET_MMFR                                ENET_MMFR_REG(ENET_BASE_PTR)
#define ENET_MSCR                                ENET_MSCR_REG(ENET_BASE_PTR)
#define ENET_MIBC                                ENET_MIBC_REG(ENET_BASE_PTR)
#define ENET_RCR                                 ENET_RCR_REG(ENET_BASE_PTR)
#define ENET_TCR                                 ENET_TCR_REG(ENET_BASE_PTR)
#define ENET_PALR                                ENET_PALR_REG(ENET_BASE_PTR)
#define ENET_PAUR                                ENET_PAUR_REG(ENET_BASE_PTR)
#define ENET_OPD                                 ENET_OPD_REG(ENET_BASE_PTR)
#define ENET_TXIC0                               ENET_TXIC_REG(ENET_BASE_PTR,0)
#define ENET_TXIC1                               ENET_TXIC_REG(ENET_BASE_PTR,1)
#define ENET_TXIC2                               ENET_TXIC_REG(ENET_BASE_PTR,2)
#define ENET_RXIC0                               ENET_RXIC_REG(ENET_BASE_PTR,0)
#define ENET_RXIC1                               ENET_RXIC_REG(ENET_BASE_PTR,1)
#define ENET_RXIC2                               ENET_RXIC_REG(ENET_BASE_PTR,2)
#define ENET_IAUR                                ENET_IAUR_REG(ENET_BASE_PTR)
#define ENET_IALR                                ENET_IALR_REG(ENET_BASE_PTR)
#define ENET_GAUR                                ENET_GAUR_REG(ENET_BASE_PTR)
#define ENET_GALR                                ENET_GALR_REG(ENET_BASE_PTR)
#define ENET_TFWR                                ENET_TFWR_REG(ENET_BASE_PTR)
#define ENET_RDSR1                               ENET_RDSR1_REG(ENET_BASE_PTR)
#define ENET_TDSR1                               ENET_TDSR1_REG(ENET_BASE_PTR)
#define ENET_MRBR1                               ENET_MRBR1_REG(ENET_BASE_PTR)
#define ENET_RDSR2                               ENET_RDSR2_REG(ENET_BASE_PTR)
#define ENET_TDSR2                               ENET_TDSR2_REG(ENET_BASE_PTR)
#define ENET_MRBR2                               ENET_MRBR2_REG(ENET_BASE_PTR)
#define ENET_RDSR                                ENET_RDSR_REG(ENET_BASE_PTR)
#define ENET_TDSR                                ENET_TDSR_REG(ENET_BASE_PTR)
#define ENET_MRBR                                ENET_MRBR_REG(ENET_BASE_PTR)
#define ENET_RSFL                                ENET_RSFL_REG(ENET_BASE_PTR)
#define ENET_RSEM                                ENET_RSEM_REG(ENET_BASE_PTR)
#define ENET_RAEM                                ENET_RAEM_REG(ENET_BASE_PTR)
#define ENET_RAFL                                ENET_RAFL_REG(ENET_BASE_PTR)
#define ENET_TSEM                                ENET_TSEM_REG(ENET_BASE_PTR)
#define ENET_TAEM                                ENET_TAEM_REG(ENET_BASE_PTR)
#define ENET_TAFL                                ENET_TAFL_REG(ENET_BASE_PTR)
#define ENET_TIPG                                ENET_TIPG_REG(ENET_BASE_PTR)
#define ENET_FTRL                                ENET_FTRL_REG(ENET_BASE_PTR)
#define ENET_TACC                                ENET_TACC_REG(ENET_BASE_PTR)
#define ENET_RACC                                ENET_RACC_REG(ENET_BASE_PTR)
#define ENET_RCMR1                               ENET_RCMR_REG(ENET_BASE_PTR,0)
#define ENET_RCMR2                               ENET_RCMR_REG(ENET_BASE_PTR,1)
#define ENET_DMA1CFG                             ENET_DMACFG_REG(ENET_BASE_PTR,0)
#define ENET_DMA2CFG                             ENET_DMACFG_REG(ENET_BASE_PTR,1)
#define ENET_RDAR1                               ENET_RDAR1_REG(ENET_BASE_PTR)
#define ENET_TDAR1                               ENET_TDAR1_REG(ENET_BASE_PTR)
#define ENET_RDAR2                               ENET_RDAR2_REG(ENET_BASE_PTR)
#define ENET_TDAR2                               ENET_TDAR2_REG(ENET_BASE_PTR)
#define ENET_QOS                                 ENET_QOS_REG(ENET_BASE_PTR)
#define ENET_RMON_T_DROP                         ENET_RMON_T_DROP_REG(ENET_BASE_PTR)
#define ENET_RMON_T_PACKETS                      ENET_RMON_T_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_T_BC_PKT                       ENET_RMON_T_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_MC_PKT                       ENET_RMON_T_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_T_CRC_ALIGN                    ENET_RMON_T_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_T_UNDERSIZE                    ENET_RMON_T_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OVERSIZE                     ENET_RMON_T_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_T_FRAG                         ENET_RMON_T_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_T_JAB                          ENET_RMON_T_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_T_COL                          ENET_RMON_T_COL_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P64                          ENET_RMON_T_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P65TO127                     ENET_RMON_T_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P128TO255                    ENET_RMON_T_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P256TO511                    ENET_RMON_T_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P512TO1023                   ENET_RMON_T_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P1024TO2047                  ENET_RMON_T_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_T_P_GTE2048                    ENET_RMON_T_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_T_OCTETS                       ENET_RMON_T_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DROP                         ENET_IEEE_T_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FRAME_OK                     ENET_IEEE_T_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_1COL                         ENET_IEEE_T_1COL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MCOL                         ENET_IEEE_T_MCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_DEF                          ENET_IEEE_T_DEF_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_LCOL                         ENET_IEEE_T_LCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_EXCOL                        ENET_IEEE_T_EXCOL_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_MACERR                       ENET_IEEE_T_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_CSERR                        ENET_IEEE_T_CSERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_SQE                          ENET_IEEE_T_SQE_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_FDXFC                        ENET_IEEE_T_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_T_OCTETS_OK                    ENET_IEEE_T_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_RMON_R_PACKETS                      ENET_RMON_R_PACKETS_REG(ENET_BASE_PTR)
#define ENET_RMON_R_BC_PKT                       ENET_RMON_R_BC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_MC_PKT                       ENET_RMON_R_MC_PKT_REG(ENET_BASE_PTR)
#define ENET_RMON_R_CRC_ALIGN                    ENET_RMON_R_CRC_ALIGN_REG(ENET_BASE_PTR)
#define ENET_RMON_R_UNDERSIZE                    ENET_RMON_R_UNDERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OVERSIZE                     ENET_RMON_R_OVERSIZE_REG(ENET_BASE_PTR)
#define ENET_RMON_R_FRAG                         ENET_RMON_R_FRAG_REG(ENET_BASE_PTR)
#define ENET_RMON_R_JAB                          ENET_RMON_R_JAB_REG(ENET_BASE_PTR)
#define ENET_RMON_R_RESVD_0                      ENET_RMON_R_RESVD_0_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P64                          ENET_RMON_R_P64_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P65TO127                     ENET_RMON_R_P65TO127_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P128TO255                    ENET_RMON_R_P128TO255_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P256TO511                    ENET_RMON_R_P256TO511_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P512TO1023                   ENET_RMON_R_P512TO1023_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P1024TO2047                  ENET_RMON_R_P1024TO2047_REG(ENET_BASE_PTR)
#define ENET_RMON_R_P_GTE2048                    ENET_RMON_R_P_GTE2048_REG(ENET_BASE_PTR)
#define ENET_RMON_R_OCTETS                       ENET_RMON_R_OCTETS_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_DROP                         ENET_IEEE_R_DROP_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FRAME_OK                     ENET_IEEE_R_FRAME_OK_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_CRC                          ENET_IEEE_R_CRC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_ALIGN                        ENET_IEEE_R_ALIGN_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_MACERR                       ENET_IEEE_R_MACERR_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_FDXFC                        ENET_IEEE_R_FDXFC_REG(ENET_BASE_PTR)
#define ENET_IEEE_R_OCTETS_OK                    ENET_IEEE_R_OCTETS_OK_REG(ENET_BASE_PTR)
#define ENET_ATCR                                ENET_ATCR_REG(ENET_BASE_PTR)
#define ENET_ATVR                                ENET_ATVR_REG(ENET_BASE_PTR)
#define ENET_ATOFF                               ENET_ATOFF_REG(ENET_BASE_PTR)
#define ENET_ATPER                               ENET_ATPER_REG(ENET_BASE_PTR)
#define ENET_ATCOR                               ENET_ATCOR_REG(ENET_BASE_PTR)
#define ENET_ATINC                               ENET_ATINC_REG(ENET_BASE_PTR)
#define ENET_ATSTMP                              ENET_ATSTMP_REG(ENET_BASE_PTR)
#define ENET_TGSR                                ENET_TGSR_REG(ENET_BASE_PTR)
#define ENET_TCSR0                               ENET_TCSR_REG(ENET_BASE_PTR,0)
#define ENET_TCCR0                               ENET_TCCR_REG(ENET_BASE_PTR,0)
#define ENET_TCSR1                               ENET_TCSR_REG(ENET_BASE_PTR,1)
#define ENET_TCCR1                               ENET_TCCR_REG(ENET_BASE_PTR,1)
#define ENET_TCSR2                               ENET_TCSR_REG(ENET_BASE_PTR,2)
#define ENET_TCCR2                               ENET_TCCR_REG(ENET_BASE_PTR,2)
#define ENET_TCSR3                               ENET_TCSR_REG(ENET_BASE_PTR,3)
#define ENET_TCCR3                               ENET_TCCR_REG(ENET_BASE_PTR,3)

/* ENET - Register array accessors */
#define ENET_TXIC(index)                         ENET_TXIC_REG(ENET_BASE_PTR,index)
#define ENET_RXIC(index)                         ENET_RXIC_REG(ENET_BASE_PTR,index)
#define ENET_RCMR(index)                         ENET_RCMR_REG(ENET_BASE_PTR,index)
#define ENET_DMACFG(index)                       ENET_DMACFG_REG(ENET_BASE_PTR,index)
#define ENET_TCSR(index)                         ENET_TCSR_REG(ENET_BASE_PTR,index)
#define ENET_TCCR(index)                         ENET_TCCR_REG(ENET_BASE_PTR,index)

/*!
 * @}
 */ /* end of group ENET_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ENET_Peripheral */


/* ----------------------------------------------------------------------------
   -- FlexSPI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FlexSPI_Peripheral FlexSPI
 * @{
 */

/** FlexSPI - Peripheral register structure */
typedef struct FlexSPI_MemMap {
  uint32_t MCR0;                                   /**< Module Control Register 0, offset: 0x0 */
  uint32_t MCR1;                                   /**< Module Control Register 1, offset: 0x4 */
  uint32_t MCR2;                                   /**< Module Control Register 2, offset: 0x8 */
  uint32_t AHBCR;                                  /**< AHB Bus Control Register, offset: 0xC */
  uint32_t INTEN;                                  /**< Interrupt Enable Register, offset: 0x10 */
  uint32_t INTR;                                   /**< Interrupt Register, offset: 0x14 */
  uint32_t LUTKEY;                                 /**< LUT Key Register, offset: 0x18 */
  uint32_t LUTCR;                                  /**< LUT Control Register, offset: 0x1C */
  uint32_t AHBRXBUFCR0[8];                         /**< AHB RX Buffer 0 Control Register 0..AHB RX Buffer 7 Control Register 0, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_0[32];
  uint32_t FLSHCR0[4];                             /**< Flash Control Register 0, array offset: 0x60, array step: 0x4 */
  uint32_t FLSHCR1[4];                             /**< Flash Control Register 1, array offset: 0x70, array step: 0x4 */
  uint32_t FLSHCR2[4];                             /**< Flash Control Register 2, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_1[4];
  uint32_t FLSHCR4;                                /**< Flash Control Register 4, offset: 0x94 */
  uint8_t RESERVED_2[8];
  uint32_t IPCR0;                                  /**< IP Control Register 0, offset: 0xA0 */
  uint32_t IPCR1;                                  /**< IP Control Register 1, offset: 0xA4 */
  uint8_t RESERVED_3[8];
  uint32_t IPCMD;                                  /**< IP Command Register, offset: 0xB0 */
  uint32_t DLPR;                                   /**< Data Learn Pattern Register, offset: 0xB4 */
  uint32_t IPRXFCR;                                /**< IP RX FIFO Control Register, offset: 0xB8 */
  uint32_t IPTXFCR;                                /**< IP TX FIFO Control Register, offset: 0xBC */
  uint32_t DLLCR[2];                               /**< DLL Control Register 0, array offset: 0xC0, array step: 0x4 */
  uint8_t RESERVED_4[24];
  uint32_t STS0;                                   /**< Status Register 0, offset: 0xE0 */
  uint32_t STS1;                                   /**< Status Register 1, offset: 0xE4 */
  uint32_t STS2;                                   /**< Status Register 2, offset: 0xE8 */
  uint32_t AHBSPNDSTS;                             /**< AHB Suspend Status Register, offset: 0xEC */
  uint32_t IPRXFSTS;                               /**< IP RX FIFO Status Register, offset: 0xF0 */
  uint32_t IPTXFSTS;                               /**< IP TX FIFO Status Register, offset: 0xF4 */
  uint8_t RESERVED_5[8];
  uint32_t RFDR[32];                               /**< IP RX FIFO Data Register 0..IP RX FIFO Data Register 31, array offset: 0x100, array step: 0x4 */
  uint32_t TFDR[32];                               /**< IP TX FIFO Data Register 0..IP TX FIFO Data Register 31, array offset: 0x180, array step: 0x4 */
  uint32_t LUT[128];                               /**< LUT 0..LUT 127, array offset: 0x200, array step: 0x4 */
} volatile *FlexSPI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- FlexSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FlexSPI_Register_Accessor_Macros FlexSPI - Register accessor macros
 * @{
 */


/* FlexSPI - Register accessors */
#define FlexSPI_MCR0_REG(base)                   ((base)->MCR0)
#define FlexSPI_MCR1_REG(base)                   ((base)->MCR1)
#define FlexSPI_MCR2_REG(base)                   ((base)->MCR2)
#define FlexSPI_AHBCR_REG(base)                  ((base)->AHBCR)
#define FlexSPI_INTEN_REG(base)                  ((base)->INTEN)
#define FlexSPI_INTR_REG(base)                   ((base)->INTR)
#define FlexSPI_LUTKEY_REG(base)                 ((base)->LUTKEY)
#define FlexSPI_LUTCR_REG(base)                  ((base)->LUTCR)
#define FlexSPI_AHBRXBUFCR0_REG(base,index)      ((base)->AHBRXBUFCR0[index])
#define FlexSPI_FLSHCR0_REG(base,index)          ((base)->FLSHCR0[index])
#define FlexSPI_FLSHCR1_REG(base,index)          ((base)->FLSHCR1[index])
#define FlexSPI_FLSHCR2_REG(base,index)          ((base)->FLSHCR2[index])
#define FlexSPI_FLSHCR4_REG(base)                ((base)->FLSHCR4)
#define FlexSPI_IPCR0_REG(base)                  ((base)->IPCR0)
#define FlexSPI_IPCR1_REG(base)                  ((base)->IPCR1)
#define FlexSPI_IPCMD_REG(base)                  ((base)->IPCMD)
#define FlexSPI_DLPR_REG(base)                   ((base)->DLPR)
#define FlexSPI_IPRXFCR_REG(base)                ((base)->IPRXFCR)
#define FlexSPI_IPTXFCR_REG(base)                ((base)->IPTXFCR)
#define FlexSPI_DLLCR_REG(base,index)            ((base)->DLLCR[index])
#define FlexSPI_STS0_REG(base)                   ((base)->STS0)
#define FlexSPI_STS1_REG(base)                   ((base)->STS1)
#define FlexSPI_STS2_REG(base)                   ((base)->STS2)
#define FlexSPI_AHBSPNDSTS_REG(base)             ((base)->AHBSPNDSTS)
#define FlexSPI_IPRXFSTS_REG(base)               ((base)->IPRXFSTS)
#define FlexSPI_IPTXFSTS_REG(base)               ((base)->IPTXFSTS)
#define FlexSPI_RFDR_REG(base,index)             ((base)->RFDR[index])
#define FlexSPI_TFDR_REG(base,index)             ((base)->TFDR[index])
#define FlexSPI_LUT_REG(base,index)              ((base)->LUT[index])

/*!
 * @}
 */ /* end of group FlexSPI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- FlexSPI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FlexSPI_Register_Masks FlexSPI Register Masks
 * @{
 */

/*! @name MCR0 - Module Control Register 0 */
/*! @{ */
#define FlexSPI_MCR0_SWRESET_MASK                (0x1U)
#define FlexSPI_MCR0_SWRESET_SHIFT               (0U)
#define FlexSPI_MCR0_MDIS_MASK                   (0x2U)
#define FlexSPI_MCR0_MDIS_SHIFT                  (1U)
#define FlexSPI_MCR0_RXCLKSRC_MASK               (0x30U)
#define FlexSPI_MCR0_RXCLKSRC_SHIFT              (4U)
/*! RXCLKSRC - Sample Clock source selection for Flash Reading
 *  0b00..Dummy Read strobe generated by FlexSPI Controller and loopback internally.
 *  0b01..Dummy Read strobe generated by FlexSPI Controller and loopback from DQS pad.
 *  0b10..Reserved
 *  0b11..Flash provided Read strobe and input from DQS pad
 */
#define FlexSPI_MCR0_RXCLKSRC(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR0_RXCLKSRC_SHIFT)) & FlexSPI_MCR0_RXCLKSRC_MASK)
#define FlexSPI_MCR0_ARDFEN_MASK                 (0x40U)
#define FlexSPI_MCR0_ARDFEN_SHIFT                (6U)
#define FlexSPI_MCR0_ATDFEN_MASK                 (0x80U)
#define FlexSPI_MCR0_ATDFEN_SHIFT                (7U)
#define FlexSPI_MCR0_SERCLKDIV_MASK              (0x700U)
#define FlexSPI_MCR0_SERCLKDIV_SHIFT             (8U)
/*! SERCLKDIV - The serial root clock could be divided inside FlexSPI . Refer Clocks chapter for more details on clocking.
 *  0b000..Divided by 1
 *  0b001..Divided by 2
 *  0b010..Divided by 3
 *  0b011..Divided by 4
 *  0b100..Divided by 5
 *  0b101..Divided by 6
 *  0b110..Divided by 7
 *  0b111..Divided by 8
 */
#define FlexSPI_MCR0_SERCLKDIV(x)                (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR0_SERCLKDIV_SHIFT)) & FlexSPI_MCR0_SERCLKDIV_MASK)
#define FlexSPI_MCR0_HSEN_MASK                   (0x800U)
#define FlexSPI_MCR0_HSEN_SHIFT                  (11U)
#define FlexSPI_MCR0_DOZEEN_MASK                 (0x1000U)
#define FlexSPI_MCR0_DOZEEN_SHIFT                (12U)
#define FlexSPI_MCR0_COMBINATIONEN_MASK          (0x2000U)
#define FlexSPI_MCR0_COMBINATIONEN_SHIFT         (13U)
#define FlexSPI_MCR0_SCKFREERUNEN_MASK           (0x4000U)
#define FlexSPI_MCR0_SCKFREERUNEN_SHIFT          (14U)
#define FlexSPI_MCR0_LEARNEN_MASK                (0x8000U)
#define FlexSPI_MCR0_LEARNEN_SHIFT               (15U)
#define FlexSPI_MCR0_IPGRANTWAIT_MASK            (0xFF0000U)
#define FlexSPI_MCR0_IPGRANTWAIT_SHIFT           (16U)
#define FlexSPI_MCR0_IPGRANTWAIT(x)              (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR0_IPGRANTWAIT_SHIFT)) & FlexSPI_MCR0_IPGRANTWAIT_MASK)
#define FlexSPI_MCR0_AHBGRANTWAIT_MASK           (0xFF000000U)
#define FlexSPI_MCR0_AHBGRANTWAIT_SHIFT          (24U)
#define FlexSPI_MCR0_AHBGRANTWAIT(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR0_AHBGRANTWAIT_SHIFT)) & FlexSPI_MCR0_AHBGRANTWAIT_MASK)
/*! @} */

/*! @name MCR1 - Module Control Register 1 */
/*! @{ */
#define FlexSPI_MCR1_AHBBUSWAIT_MASK             (0xFFFFU)
#define FlexSPI_MCR1_AHBBUSWAIT_SHIFT            (0U)
#define FlexSPI_MCR1_AHBBUSWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR1_AHBBUSWAIT_SHIFT)) & FlexSPI_MCR1_AHBBUSWAIT_MASK)
#define FlexSPI_MCR1_SEQWAIT_MASK                (0xFFFF0000U)
#define FlexSPI_MCR1_SEQWAIT_SHIFT               (16U)
#define FlexSPI_MCR1_SEQWAIT(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR1_SEQWAIT_SHIFT)) & FlexSPI_MCR1_SEQWAIT_MASK)
/*! @} */

/*! @name MCR2 - Module Control Register 2 */
/*! @{ */
#define FlexSPI_MCR2_CLRAHBBUFOPT_MASK           (0x800U)
#define FlexSPI_MCR2_CLRAHBBUFOPT_SHIFT          (11U)
#define FlexSPI_MCR2_CLRLEARNPHASE_MASK          (0x4000U)
#define FlexSPI_MCR2_CLRLEARNPHASE_SHIFT         (14U)
#define FlexSPI_MCR2_SAMEDEVICEEN_MASK           (0x8000U)
#define FlexSPI_MCR2_SAMEDEVICEEN_SHIFT          (15U)
#define FlexSPI_MCR2_SCKBDIFFOPT_MASK            (0x80000U)
#define FlexSPI_MCR2_SCKBDIFFOPT_SHIFT           (19U)
#define FlexSPI_MCR2_RESUMEWAIT_MASK             (0xFF000000U)
#define FlexSPI_MCR2_RESUMEWAIT_SHIFT            (24U)
#define FlexSPI_MCR2_RESUMEWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_MCR2_RESUMEWAIT_SHIFT)) & FlexSPI_MCR2_RESUMEWAIT_MASK)
/*! @} */

/*! @name AHBCR - AHB Bus Control Register */
/*! @{ */
#define FlexSPI_AHBCR_APAREN_MASK                (0x1U)
#define FlexSPI_AHBCR_APAREN_SHIFT               (0U)
#define FlexSPI_AHBCR_CACHABLEEN_MASK            (0x8U)
#define FlexSPI_AHBCR_CACHABLEEN_SHIFT           (3U)
#define FlexSPI_AHBCR_BUFFERABLEEN_MASK          (0x10U)
#define FlexSPI_AHBCR_BUFFERABLEEN_SHIFT         (4U)
#define FlexSPI_AHBCR_PREFETCHEN_MASK            (0x20U)
#define FlexSPI_AHBCR_PREFETCHEN_SHIFT           (5U)
#define FlexSPI_AHBCR_READADDROPT_MASK           (0x40U)
#define FlexSPI_AHBCR_READADDROPT_SHIFT          (6U)
/*! @} */

/*! @name INTEN - Interrupt Enable Register */
/*! @{ */
#define FlexSPI_INTEN_IPCMDDONEEN_MASK           (0x1U)
#define FlexSPI_INTEN_IPCMDDONEEN_SHIFT          (0U)
#define FlexSPI_INTEN_IPCMDGEEN_MASK             (0x2U)
#define FlexSPI_INTEN_IPCMDGEEN_SHIFT            (1U)
#define FlexSPI_INTEN_AHBCMDGEEN_MASK            (0x4U)
#define FlexSPI_INTEN_AHBCMDGEEN_SHIFT           (2U)
#define FlexSPI_INTEN_IPCMDERREN_MASK            (0x8U)
#define FlexSPI_INTEN_IPCMDERREN_SHIFT           (3U)
#define FlexSPI_INTEN_AHBCMDERREN_MASK           (0x10U)
#define FlexSPI_INTEN_AHBCMDERREN_SHIFT          (4U)
#define FlexSPI_INTEN_IPRXWAEN_MASK              (0x20U)
#define FlexSPI_INTEN_IPRXWAEN_SHIFT             (5U)
#define FlexSPI_INTEN_IPTXWEEN_MASK              (0x40U)
#define FlexSPI_INTEN_IPTXWEEN_SHIFT             (6U)
#define FlexSPI_INTEN_DATALEARNFAILEN_MASK       (0x80U)
#define FlexSPI_INTEN_DATALEARNFAILEN_SHIFT      (7U)
#define FlexSPI_INTEN_SCKSTOPBYRDEN_MASK         (0x100U)
#define FlexSPI_INTEN_SCKSTOPBYRDEN_SHIFT        (8U)
#define FlexSPI_INTEN_SCKSTOPBYWREN_MASK         (0x200U)
#define FlexSPI_INTEN_SCKSTOPBYWREN_SHIFT        (9U)
#define FlexSPI_INTEN_AHBBUSTIMEOUTEN_MASK       (0x400U)
#define FlexSPI_INTEN_AHBBUSTIMEOUTEN_SHIFT      (10U)
#define FlexSPI_INTEN_SEQTIMEOUTEN_MASK          (0x800U)
#define FlexSPI_INTEN_SEQTIMEOUTEN_SHIFT         (11U)
/*! @} */

/*! @name INTR - Interrupt Register */
/*! @{ */
#define FlexSPI_INTR_IPCMDDONE_MASK              (0x1U)
#define FlexSPI_INTR_IPCMDDONE_SHIFT             (0U)
#define FlexSPI_INTR_IPCMDGE_MASK                (0x2U)
#define FlexSPI_INTR_IPCMDGE_SHIFT               (1U)
#define FlexSPI_INTR_AHBCMDGE_MASK               (0x4U)
#define FlexSPI_INTR_AHBCMDGE_SHIFT              (2U)
#define FlexSPI_INTR_IPCMDERR_MASK               (0x8U)
#define FlexSPI_INTR_IPCMDERR_SHIFT              (3U)
#define FlexSPI_INTR_AHBCMDERR_MASK              (0x10U)
#define FlexSPI_INTR_AHBCMDERR_SHIFT             (4U)
#define FlexSPI_INTR_IPRXWA_MASK                 (0x20U)
#define FlexSPI_INTR_IPRXWA_SHIFT                (5U)
#define FlexSPI_INTR_IPTXWE_MASK                 (0x40U)
#define FlexSPI_INTR_IPTXWE_SHIFT                (6U)
#define FlexSPI_INTR_DATALEARNFAIL_MASK          (0x80U)
#define FlexSPI_INTR_DATALEARNFAIL_SHIFT         (7U)
#define FlexSPI_INTR_SCKSTOPBYRD_MASK            (0x100U)
#define FlexSPI_INTR_SCKSTOPBYRD_SHIFT           (8U)
#define FlexSPI_INTR_SCKSTOPBYWR_MASK            (0x200U)
#define FlexSPI_INTR_SCKSTOPBYWR_SHIFT           (9U)
#define FlexSPI_INTR_AHBBUSTIMEOUT_MASK          (0x400U)
#define FlexSPI_INTR_AHBBUSTIMEOUT_SHIFT         (10U)
#define FlexSPI_INTR_SEQTIMEOUT_MASK             (0x800U)
#define FlexSPI_INTR_SEQTIMEOUT_SHIFT            (11U)
/*! @} */

/*! @name LUTKEY - LUT Key Register */
/*! @{ */
#define FlexSPI_LUTKEY_KEY_MASK                  (0xFFFFFFFFU)
#define FlexSPI_LUTKEY_KEY_SHIFT                 (0U)
#define FlexSPI_LUTKEY_KEY(x)                    (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUTKEY_KEY_SHIFT)) & FlexSPI_LUTKEY_KEY_MASK)
/*! @} */

/*! @name LUTCR - LUT Control Register */
/*! @{ */
#define FlexSPI_LUTCR_LOCK_MASK                  (0x1U)
#define FlexSPI_LUTCR_LOCK_SHIFT                 (0U)
#define FlexSPI_LUTCR_UNLOCK_MASK                (0x2U)
#define FlexSPI_LUTCR_UNLOCK_SHIFT               (1U)
/*! @} */

/*! @name AHBRXBUFCR0 - AHB RX Buffer 0 Control Register 0..AHB RX Buffer 7 Control Register 0 */
/*! @{ */
#define FlexSPI_AHBRXBUFCR0_BUFSZ_MASK           (0x1FFU)
#define FlexSPI_AHBRXBUFCR0_BUFSZ_SHIFT          (0U)
#define FlexSPI_AHBRXBUFCR0_BUFSZ(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_AHBRXBUFCR0_BUFSZ_SHIFT)) & FlexSPI_AHBRXBUFCR0_BUFSZ_MASK)
#define FlexSPI_AHBRXBUFCR0_MSTRID_MASK          (0xF0000U)
#define FlexSPI_AHBRXBUFCR0_MSTRID_SHIFT         (16U)
#define FlexSPI_AHBRXBUFCR0_MSTRID(x)            (((uint32_t)(((uint32_t)(x)) << FlexSPI_AHBRXBUFCR0_MSTRID_SHIFT)) & FlexSPI_AHBRXBUFCR0_MSTRID_MASK)
#define FlexSPI_AHBRXBUFCR0_PRIORITY_MASK        (0x7000000U)
#define FlexSPI_AHBRXBUFCR0_PRIORITY_SHIFT       (24U)
#define FlexSPI_AHBRXBUFCR0_PRIORITY(x)          (((uint32_t)(((uint32_t)(x)) << FlexSPI_AHBRXBUFCR0_PRIORITY_SHIFT)) & FlexSPI_AHBRXBUFCR0_PRIORITY_MASK)
#define FlexSPI_AHBRXBUFCR0_PREFETCHEN_MASK      (0x80000000U)
#define FlexSPI_AHBRXBUFCR0_PREFETCHEN_SHIFT     (31U)
/*! @} */

/* The count of FlexSPI_AHBRXBUFCR0 */
#define FlexSPI_AHBRXBUFCR0_COUNT                (8U)

/*! @name FLSHCR0 - Flash Control Register 0 */
/*! @{ */
#define FlexSPI_FLSHCR0_FLSHSZ_MASK              (0x7FFFFFU)
#define FlexSPI_FLSHCR0_FLSHSZ_SHIFT             (0U)
#define FlexSPI_FLSHCR0_FLSHSZ(x)                (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR0_FLSHSZ_SHIFT)) & FlexSPI_FLSHCR0_FLSHSZ_MASK)
/*! @} */

/* The count of FlexSPI_FLSHCR0 */
#define FlexSPI_FLSHCR0_COUNT                    (4U)

/*! @name FLSHCR1 - Flash Control Register 1 */
/*! @{ */
#define FlexSPI_FLSHCR1_TCSS_MASK                (0x1FU)
#define FlexSPI_FLSHCR1_TCSS_SHIFT               (0U)
#define FlexSPI_FLSHCR1_TCSS(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR1_TCSS_SHIFT)) & FlexSPI_FLSHCR1_TCSS_MASK)
#define FlexSPI_FLSHCR1_TCSH_MASK                (0x3E0U)
#define FlexSPI_FLSHCR1_TCSH_SHIFT               (5U)
#define FlexSPI_FLSHCR1_TCSH(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR1_TCSH_SHIFT)) & FlexSPI_FLSHCR1_TCSH_MASK)
#define FlexSPI_FLSHCR1_WA_MASK                  (0x400U)
#define FlexSPI_FLSHCR1_WA_SHIFT                 (10U)
#define FlexSPI_FLSHCR1_CAS_MASK                 (0x7800U)
#define FlexSPI_FLSHCR1_CAS_SHIFT                (11U)
#define FlexSPI_FLSHCR1_CAS(x)                   (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR1_CAS_SHIFT)) & FlexSPI_FLSHCR1_CAS_MASK)
#define FlexSPI_FLSHCR1_CSINTERVALUNIT_MASK      (0x8000U)
#define FlexSPI_FLSHCR1_CSINTERVALUNIT_SHIFT     (15U)
#define FlexSPI_FLSHCR1_CSINTERVAL_MASK          (0xFFFF0000U)
#define FlexSPI_FLSHCR1_CSINTERVAL_SHIFT         (16U)
#define FlexSPI_FLSHCR1_CSINTERVAL(x)            (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR1_CSINTERVAL_SHIFT)) & FlexSPI_FLSHCR1_CSINTERVAL_MASK)
/*! @} */

/* The count of FlexSPI_FLSHCR1 */
#define FlexSPI_FLSHCR1_COUNT                    (4U)

/*! @name FLSHCR2 - Flash Control Register 2 */
/*! @{ */
#define FlexSPI_FLSHCR2_ARDSEQID_MASK            (0x1FU)
#define FlexSPI_FLSHCR2_ARDSEQID_SHIFT           (0U)
#define FlexSPI_FLSHCR2_ARDSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_ARDSEQID_SHIFT)) & FlexSPI_FLSHCR2_ARDSEQID_MASK)
#define FlexSPI_FLSHCR2_ARDSEQNUM_MASK           (0xE0U)
#define FlexSPI_FLSHCR2_ARDSEQNUM_SHIFT          (5U)
#define FlexSPI_FLSHCR2_ARDSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_ARDSEQNUM_SHIFT)) & FlexSPI_FLSHCR2_ARDSEQNUM_MASK)
#define FlexSPI_FLSHCR2_AWRSEQID_MASK            (0x1F00U)
#define FlexSPI_FLSHCR2_AWRSEQID_SHIFT           (8U)
#define FlexSPI_FLSHCR2_AWRSEQID(x)              (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_AWRSEQID_SHIFT)) & FlexSPI_FLSHCR2_AWRSEQID_MASK)
#define FlexSPI_FLSHCR2_AWRSEQNUM_MASK           (0xE000U)
#define FlexSPI_FLSHCR2_AWRSEQNUM_SHIFT          (13U)
#define FlexSPI_FLSHCR2_AWRSEQNUM(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_AWRSEQNUM_SHIFT)) & FlexSPI_FLSHCR2_AWRSEQNUM_MASK)
#define FlexSPI_FLSHCR2_AWRWAIT_MASK             (0xFFF0000U)
#define FlexSPI_FLSHCR2_AWRWAIT_SHIFT            (16U)
#define FlexSPI_FLSHCR2_AWRWAIT(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_AWRWAIT_SHIFT)) & FlexSPI_FLSHCR2_AWRWAIT_MASK)
#define FlexSPI_FLSHCR2_AWRWAITUNIT_MASK         (0x70000000U)
#define FlexSPI_FLSHCR2_AWRWAITUNIT_SHIFT        (28U)
/*! AWRWAITUNIT - AWRWAIT unit
 *  0b000..The AWRWAIT unit is 2 ahb clock cycle
 *  0b001..The AWRWAIT unit is 8 ahb clock cycle
 *  0b010..The AWRWAIT unit is 32 ahb clock cycle
 *  0b011..The AWRWAIT unit is 128 ahb clock cycle
 *  0b100..The AWRWAIT unit is 512 ahb clock cycle
 *  0b101..The AWRWAIT unit is 2048 ahb clock cycle
 *  0b110..The AWRWAIT unit is 8192 ahb clock cycle
 *  0b111..The AWRWAIT unit is 32768 ahb clock cycle
 */
#define FlexSPI_FLSHCR2_AWRWAITUNIT(x)           (((uint32_t)(((uint32_t)(x)) << FlexSPI_FLSHCR2_AWRWAITUNIT_SHIFT)) & FlexSPI_FLSHCR2_AWRWAITUNIT_MASK)
#define FlexSPI_FLSHCR2_CLRINSTRPTR_MASK         (0x80000000U)
#define FlexSPI_FLSHCR2_CLRINSTRPTR_SHIFT        (31U)
/*! @} */

/* The count of FlexSPI_FLSHCR2 */
#define FlexSPI_FLSHCR2_COUNT                    (4U)

/*! @name FLSHCR4 - Flash Control Register 4 */
/*! @{ */
#define FlexSPI_FLSHCR4_WMOPT1_MASK              (0x1U)
#define FlexSPI_FLSHCR4_WMOPT1_SHIFT             (0U)
#define FlexSPI_FLSHCR4_WMENA_MASK               (0x4U)
#define FlexSPI_FLSHCR4_WMENA_SHIFT              (2U)
#define FlexSPI_FLSHCR4_WMENB_MASK               (0x8U)
#define FlexSPI_FLSHCR4_WMENB_SHIFT              (3U)
/*! @} */

/*! @name IPCR0 - IP Control Register 0 */
/*! @{ */
#define FlexSPI_IPCR0_SFAR_MASK                  (0xFFFFFFFFU)
#define FlexSPI_IPCR0_SFAR_SHIFT                 (0U)
#define FlexSPI_IPCR0_SFAR(x)                    (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPCR0_SFAR_SHIFT)) & FlexSPI_IPCR0_SFAR_MASK)
/*! @} */

/*! @name IPCR1 - IP Control Register 1 */
/*! @{ */
#define FlexSPI_IPCR1_IDATSZ_MASK                (0xFFFFU)
#define FlexSPI_IPCR1_IDATSZ_SHIFT               (0U)
#define FlexSPI_IPCR1_IDATSZ(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPCR1_IDATSZ_SHIFT)) & FlexSPI_IPCR1_IDATSZ_MASK)
#define FlexSPI_IPCR1_ISEQID_MASK                (0x1F0000U)
#define FlexSPI_IPCR1_ISEQID_SHIFT               (16U)
#define FlexSPI_IPCR1_ISEQID(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPCR1_ISEQID_SHIFT)) & FlexSPI_IPCR1_ISEQID_MASK)
#define FlexSPI_IPCR1_ISEQNUM_MASK               (0x7000000U)
#define FlexSPI_IPCR1_ISEQNUM_SHIFT              (24U)
#define FlexSPI_IPCR1_ISEQNUM(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPCR1_ISEQNUM_SHIFT)) & FlexSPI_IPCR1_ISEQNUM_MASK)
#define FlexSPI_IPCR1_IPAREN_MASK                (0x80000000U)
#define FlexSPI_IPCR1_IPAREN_SHIFT               (31U)
/*! @} */

/*! @name IPCMD - IP Command Register */
/*! @{ */
#define FlexSPI_IPCMD_TRG_MASK                   (0x1U)
#define FlexSPI_IPCMD_TRG_SHIFT                  (0U)
/*! @} */

/*! @name DLPR - Data Learn Pattern Register */
/*! @{ */
#define FlexSPI_DLPR_DLP_MASK                    (0xFFFFFFFFU)
#define FlexSPI_DLPR_DLP_SHIFT                   (0U)
#define FlexSPI_DLPR_DLP(x)                      (((uint32_t)(((uint32_t)(x)) << FlexSPI_DLPR_DLP_SHIFT)) & FlexSPI_DLPR_DLP_MASK)
/*! @} */

/*! @name IPRXFCR - IP RX FIFO Control Register */
/*! @{ */
#define FlexSPI_IPRXFCR_CLRIPRXF_MASK            (0x1U)
#define FlexSPI_IPRXFCR_CLRIPRXF_SHIFT           (0U)
#define FlexSPI_IPRXFCR_RXDMAEN_MASK             (0x2U)
#define FlexSPI_IPRXFCR_RXDMAEN_SHIFT            (1U)
#define FlexSPI_IPRXFCR_RXWMRK_MASK              (0xFCU)
#define FlexSPI_IPRXFCR_RXWMRK_SHIFT             (2U)
#define FlexSPI_IPRXFCR_RXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPRXFCR_RXWMRK_SHIFT)) & FlexSPI_IPRXFCR_RXWMRK_MASK)
/*! @} */

/*! @name IPTXFCR - IP TX FIFO Control Register */
/*! @{ */
#define FlexSPI_IPTXFCR_CLRIPTXF_MASK            (0x1U)
#define FlexSPI_IPTXFCR_CLRIPTXF_SHIFT           (0U)
#define FlexSPI_IPTXFCR_TXDMAEN_MASK             (0x2U)
#define FlexSPI_IPTXFCR_TXDMAEN_SHIFT            (1U)
#define FlexSPI_IPTXFCR_TXWMRK_MASK              (0x1FCU)
#define FlexSPI_IPTXFCR_TXWMRK_SHIFT             (2U)
#define FlexSPI_IPTXFCR_TXWMRK(x)                (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPTXFCR_TXWMRK_SHIFT)) & FlexSPI_IPTXFCR_TXWMRK_MASK)
/*! @} */

/*! @name DLLCR - DLL Control Register 0 */
/*! @{ */
#define FlexSPI_DLLCR_DLLEN_MASK                 (0x1U)
#define FlexSPI_DLLCR_DLLEN_SHIFT                (0U)
#define FlexSPI_DLLCR_DLLRESET_MASK              (0x2U)
#define FlexSPI_DLLCR_DLLRESET_SHIFT             (1U)
#define FlexSPI_DLLCR_SLVDLYTARGET_MASK          (0x78U)
#define FlexSPI_DLLCR_SLVDLYTARGET_SHIFT         (3U)
#define FlexSPI_DLLCR_SLVDLYTARGET(x)            (((uint32_t)(((uint32_t)(x)) << FlexSPI_DLLCR_SLVDLYTARGET_SHIFT)) & FlexSPI_DLLCR_SLVDLYTARGET_MASK)
#define FlexSPI_DLLCR_OVRDEN_MASK                (0x100U)
#define FlexSPI_DLLCR_OVRDEN_SHIFT               (8U)
#define FlexSPI_DLLCR_OVRDVAL_MASK               (0x7E00U)
#define FlexSPI_DLLCR_OVRDVAL_SHIFT              (9U)
#define FlexSPI_DLLCR_OVRDVAL(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_DLLCR_OVRDVAL_SHIFT)) & FlexSPI_DLLCR_OVRDVAL_MASK)
/*! @} */

/* The count of FlexSPI_DLLCR */
#define FlexSPI_DLLCR_COUNT                      (2U)

/*! @name STS0 - Status Register 0 */
/*! @{ */
#define FlexSPI_STS0_SEQIDLE_MASK                (0x1U)
#define FlexSPI_STS0_SEQIDLE_SHIFT               (0U)
#define FlexSPI_STS0_ARBIDLE_MASK                (0x2U)
#define FlexSPI_STS0_ARBIDLE_SHIFT               (1U)
#define FlexSPI_STS0_ARBCMDSRC_MASK              (0xCU)
#define FlexSPI_STS0_ARBCMDSRC_SHIFT             (2U)
/*! ARBCMDSRC - This status field indicates the trigger source of current command sequence granted
 *    by arbitrator. This field value is meaningless when ARB_CTL is not busy (STS0[ARBIDLE]=0x1).
 *  0b00..Triggered by AHB read command (triggered by AHB read).
 *  0b01..Triggered by AHB write command (triggered by AHB Write).
 *  0b10..Triggered by IP command (triggered by setting register bit IPCMD.TRG).
 *  0b11..Triggered by suspended command (resumed).
 */
#define FlexSPI_STS0_ARBCMDSRC(x)                (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS0_ARBCMDSRC_SHIFT)) & FlexSPI_STS0_ARBCMDSRC_MASK)
#define FlexSPI_STS0_DATALEARNPHASEA_MASK        (0xF0U)
#define FlexSPI_STS0_DATALEARNPHASEA_SHIFT       (4U)
#define FlexSPI_STS0_DATALEARNPHASEA(x)          (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS0_DATALEARNPHASEA_SHIFT)) & FlexSPI_STS0_DATALEARNPHASEA_MASK)
#define FlexSPI_STS0_DATALEARNPHASEB_MASK        (0xF00U)
#define FlexSPI_STS0_DATALEARNPHASEB_SHIFT       (8U)
#define FlexSPI_STS0_DATALEARNPHASEB(x)          (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS0_DATALEARNPHASEB_SHIFT)) & FlexSPI_STS0_DATALEARNPHASEB_MASK)
/*! @} */

/*! @name STS1 - Status Register 1 */
/*! @{ */
#define FlexSPI_STS1_AHBCMDERRID_MASK            (0x1FU)
#define FlexSPI_STS1_AHBCMDERRID_SHIFT           (0U)
#define FlexSPI_STS1_AHBCMDERRID(x)              (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS1_AHBCMDERRID_SHIFT)) & FlexSPI_STS1_AHBCMDERRID_MASK)
#define FlexSPI_STS1_AHBCMDERRCODE_MASK          (0xF00U)
#define FlexSPI_STS1_AHBCMDERRCODE_SHIFT         (8U)
/*! AHBCMDERRCODE - Indicates the Error Code when AHB command Error detected. This field will be
 *    cleared when INTR[AHBCMDERR] is write-1-clear(w1c).
 *  0b0000..No error.
 *  0b0010..AHB Write command with JMP_ON_CS instruction used in the sequence.
 *  0b0011..There is unknown instruction opcode in the sequence.
 *  0b0100..Instruction DUMMY_SDR/DUMMY_RWDS_SDR used in DDR sequence.
 *  0b0101..Instruction DUMMY_DDR/DUMMY_RWDS_DDR used in SDR sequence.
 *  0b1110..Sequence execution timeout.
 */
#define FlexSPI_STS1_AHBCMDERRCODE(x)            (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS1_AHBCMDERRCODE_SHIFT)) & FlexSPI_STS1_AHBCMDERRCODE_MASK)
#define FlexSPI_STS1_IPCMDERRID_MASK             (0x1F0000U)
#define FlexSPI_STS1_IPCMDERRID_SHIFT            (16U)
#define FlexSPI_STS1_IPCMDERRID(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS1_IPCMDERRID_SHIFT)) & FlexSPI_STS1_IPCMDERRID_MASK)
#define FlexSPI_STS1_IPCMDERRCODE_MASK           (0xF000000U)
#define FlexSPI_STS1_IPCMDERRCODE_SHIFT          (24U)
/*! IPCMDERRCODE - Indicates the Error Code when IP command Error detected. This field will be
 *    cleared when INTR[IPCMDERR] is write-1-clear(w1c).
 *  0b0000..No error.
 *  0b0010..IP command with JMP_ON_CS instruction used in the sequence.
 *  0b0011..There is unknown instruction opcode in the sequence.
 *  0b0100..Instruction DUMMY_SDR/DUMMY_RWDS_SDR used in DDR sequence.
 *  0b0101..Instruction DUMMY_DDR/DUMMY_RWDS_DDR used in SDR sequence.
 *  0b0110..Flash access start address exceed the whole flash address range (A1/A2/B1/B2).
 *  0b1110..Sequence execution timeout.
 *  0b1111..Flash boundary crossed.
 */
#define FlexSPI_STS1_IPCMDERRCODE(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS1_IPCMDERRCODE_SHIFT)) & FlexSPI_STS1_IPCMDERRCODE_MASK)
/*! @} */

/*! @name STS2 - Status Register 2 */
/*! @{ */
#define FlexSPI_STS2_ASLVLOCK_MASK               (0x1U)
#define FlexSPI_STS2_ASLVLOCK_SHIFT              (0U)
#define FlexSPI_STS2_AREFLOCK_MASK               (0x2U)
#define FlexSPI_STS2_AREFLOCK_SHIFT              (1U)
#define FlexSPI_STS2_ASLVSEL_MASK                (0xFCU)
#define FlexSPI_STS2_ASLVSEL_SHIFT               (2U)
#define FlexSPI_STS2_ASLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS2_ASLVSEL_SHIFT)) & FlexSPI_STS2_ASLVSEL_MASK)
#define FlexSPI_STS2_AREFSEL_MASK                (0x3F00U)
#define FlexSPI_STS2_AREFSEL_SHIFT               (8U)
#define FlexSPI_STS2_AREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS2_AREFSEL_SHIFT)) & FlexSPI_STS2_AREFSEL_MASK)
#define FlexSPI_STS2_BSLVLOCK_MASK               (0x10000U)
#define FlexSPI_STS2_BSLVLOCK_SHIFT              (16U)
#define FlexSPI_STS2_BREFLOCK_MASK               (0x20000U)
#define FlexSPI_STS2_BREFLOCK_SHIFT              (17U)
#define FlexSPI_STS2_BSLVSEL_MASK                (0xFC0000U)
#define FlexSPI_STS2_BSLVSEL_SHIFT               (18U)
#define FlexSPI_STS2_BSLVSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS2_BSLVSEL_SHIFT)) & FlexSPI_STS2_BSLVSEL_MASK)
#define FlexSPI_STS2_BREFSEL_MASK                (0x3F000000U)
#define FlexSPI_STS2_BREFSEL_SHIFT               (24U)
#define FlexSPI_STS2_BREFSEL(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_STS2_BREFSEL_SHIFT)) & FlexSPI_STS2_BREFSEL_MASK)
/*! @} */

/*! @name AHBSPNDSTS - AHB Suspend Status Register */
/*! @{ */
#define FlexSPI_AHBSPNDSTS_ACTIVE_MASK           (0x1U)
#define FlexSPI_AHBSPNDSTS_ACTIVE_SHIFT          (0U)
#define FlexSPI_AHBSPNDSTS_BUFID_MASK            (0xEU)
#define FlexSPI_AHBSPNDSTS_BUFID_SHIFT           (1U)
#define FlexSPI_AHBSPNDSTS_BUFID(x)              (((uint32_t)(((uint32_t)(x)) << FlexSPI_AHBSPNDSTS_BUFID_SHIFT)) & FlexSPI_AHBSPNDSTS_BUFID_MASK)
#define FlexSPI_AHBSPNDSTS_DATLFT_MASK           (0xFFFF0000U)
#define FlexSPI_AHBSPNDSTS_DATLFT_SHIFT          (16U)
#define FlexSPI_AHBSPNDSTS_DATLFT(x)             (((uint32_t)(((uint32_t)(x)) << FlexSPI_AHBSPNDSTS_DATLFT_SHIFT)) & FlexSPI_AHBSPNDSTS_DATLFT_MASK)
/*! @} */

/*! @name IPRXFSTS - IP RX FIFO Status Register */
/*! @{ */
#define FlexSPI_IPRXFSTS_FILL_MASK               (0xFFU)
#define FlexSPI_IPRXFSTS_FILL_SHIFT              (0U)
#define FlexSPI_IPRXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPRXFSTS_FILL_SHIFT)) & FlexSPI_IPRXFSTS_FILL_MASK)
#define FlexSPI_IPRXFSTS_RDCNTR_MASK             (0xFFFF0000U)
#define FlexSPI_IPRXFSTS_RDCNTR_SHIFT            (16U)
#define FlexSPI_IPRXFSTS_RDCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPRXFSTS_RDCNTR_SHIFT)) & FlexSPI_IPRXFSTS_RDCNTR_MASK)
/*! @} */

/*! @name IPTXFSTS - IP TX FIFO Status Register */
/*! @{ */
#define FlexSPI_IPTXFSTS_FILL_MASK               (0xFFU)
#define FlexSPI_IPTXFSTS_FILL_SHIFT              (0U)
#define FlexSPI_IPTXFSTS_FILL(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPTXFSTS_FILL_SHIFT)) & FlexSPI_IPTXFSTS_FILL_MASK)
#define FlexSPI_IPTXFSTS_WRCNTR_MASK             (0xFFFF0000U)
#define FlexSPI_IPTXFSTS_WRCNTR_SHIFT            (16U)
#define FlexSPI_IPTXFSTS_WRCNTR(x)               (((uint32_t)(((uint32_t)(x)) << FlexSPI_IPTXFSTS_WRCNTR_SHIFT)) & FlexSPI_IPTXFSTS_WRCNTR_MASK)
/*! @} */

/*! @name RFDR - IP RX FIFO Data Register 0..IP RX FIFO Data Register 31 */
/*! @{ */
#define FlexSPI_RFDR_RXDATA_MASK                 (0xFFFFFFFFU)
#define FlexSPI_RFDR_RXDATA_SHIFT                (0U)
#define FlexSPI_RFDR_RXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FlexSPI_RFDR_RXDATA_SHIFT)) & FlexSPI_RFDR_RXDATA_MASK)
/*! @} */

/* The count of FlexSPI_RFDR */
#define FlexSPI_RFDR_COUNT                       (32U)

/*! @name TFDR - IP TX FIFO Data Register 0..IP TX FIFO Data Register 31 */
/*! @{ */
#define FlexSPI_TFDR_TXDATA_MASK                 (0xFFFFFFFFU)
#define FlexSPI_TFDR_TXDATA_SHIFT                (0U)
#define FlexSPI_TFDR_TXDATA(x)                   (((uint32_t)(((uint32_t)(x)) << FlexSPI_TFDR_TXDATA_SHIFT)) & FlexSPI_TFDR_TXDATA_MASK)
/*! @} */

/* The count of FlexSPI_TFDR */
#define FlexSPI_TFDR_COUNT                       (32U)

/*! @name LUT - LUT 0..LUT 127 */
/*! @{ */
#define FlexSPI_LUT_OPERAND0_MASK                (0xFFU)
#define FlexSPI_LUT_OPERAND0_SHIFT               (0U)
#define FlexSPI_LUT_OPERAND0(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_OPERAND0_SHIFT)) & FlexSPI_LUT_OPERAND0_MASK)
#define FlexSPI_LUT_NUM_PADS0_MASK               (0x300U)
#define FlexSPI_LUT_NUM_PADS0_SHIFT              (8U)
#define FlexSPI_LUT_NUM_PADS0(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_NUM_PADS0_SHIFT)) & FlexSPI_LUT_NUM_PADS0_MASK)
#define FlexSPI_LUT_OPCODE0_MASK                 (0xFC00U)
#define FlexSPI_LUT_OPCODE0_SHIFT                (10U)
#define FlexSPI_LUT_OPCODE0(x)                   (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_OPCODE0_SHIFT)) & FlexSPI_LUT_OPCODE0_MASK)
#define FlexSPI_LUT_OPERAND1_MASK                (0xFF0000U)
#define FlexSPI_LUT_OPERAND1_SHIFT               (16U)
#define FlexSPI_LUT_OPERAND1(x)                  (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_OPERAND1_SHIFT)) & FlexSPI_LUT_OPERAND1_MASK)
#define FlexSPI_LUT_NUM_PADS1_MASK               (0x3000000U)
#define FlexSPI_LUT_NUM_PADS1_SHIFT              (24U)
#define FlexSPI_LUT_NUM_PADS1(x)                 (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_NUM_PADS1_SHIFT)) & FlexSPI_LUT_NUM_PADS1_MASK)
#define FlexSPI_LUT_OPCODE1_MASK                 (0xFC000000U)
#define FlexSPI_LUT_OPCODE1_SHIFT                (26U)
#define FlexSPI_LUT_OPCODE1(x)                   (((uint32_t)(((uint32_t)(x)) << FlexSPI_LUT_OPCODE1_SHIFT)) & FlexSPI_LUT_OPCODE1_MASK)
/*! @} */

/* The count of FlexSPI_LUT */
#define FlexSPI_LUT_COUNT                        (128U)


/*!
 * @}
 */ /* end of group FlexSPI_Register_Masks */


/* FlexSPI - Peripheral instance base addresses */
/** Peripheral FLEXSPI base pointer */
#define FLEXSPI_BASE_PTR                         ((FlexSPI_MemMapPtr)0x30BB0000u)
/** Array initializer of FlexSPI peripheral base pointers */
#define FlexSPI_BASE_PTRS                        { FLEXSPI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- FlexSPI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup FlexSPI_Register_Accessor_Macros FlexSPI - Register accessor macros
 * @{
 */


/* FlexSPI - Register instance definitions */
/* FLEXSPI */
#define FLEXSPI_MCR0                             FlexSPI_MCR0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_MCR1                             FlexSPI_MCR1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_MCR2                             FlexSPI_MCR2_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBCR                            FlexSPI_AHBCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_INTEN                            FlexSPI_INTEN_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_INTR                             FlexSPI_INTR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_LUTKEY                           FlexSPI_LUTKEY_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_LUTCR                            FlexSPI_LUTCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBRXBUF0CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_AHBRXBUF1CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_AHBRXBUF2CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_AHBRXBUF3CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_AHBRXBUF4CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_AHBRXBUF5CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_AHBRXBUF6CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_AHBRXBUF7CR0                     FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_FLSHA1CR0                        FlexSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR0                        FlexSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR0                        FlexSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR0                        FlexSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHA1CR1                        FlexSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR1                        FlexSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR1                        FlexSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR1                        FlexSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHA1CR2                        FlexSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_FLSHA2CR2                        FlexSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_FLSHB1CR2                        FlexSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_FLSHB2CR2                        FlexSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_FLSHCR4                          FlexSPI_FLSHCR4_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCR0                            FlexSPI_IPCR0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCR1                            FlexSPI_IPCR1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPCMD                            FlexSPI_IPCMD_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_DLPR                             FlexSPI_DLPR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPRXFCR                          FlexSPI_IPRXFCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPTXFCR                          FlexSPI_IPTXFCR_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_DLLACR                           FlexSPI_DLLCR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_DLLBCR                           FlexSPI_DLLCR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_STS0                             FlexSPI_STS0_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_STS1                             FlexSPI_STS1_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_STS2                             FlexSPI_STS2_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_AHBSPNDSTS                       FlexSPI_AHBSPNDSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPRXFSTS                         FlexSPI_IPRXFSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_IPTXFSTS                         FlexSPI_IPTXFSTS_REG(FLEXSPI_BASE_PTR)
#define FLEXSPI_RFDR0                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_RFDR1                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_RFDR2                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_RFDR3                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_RFDR4                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_RFDR5                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_RFDR6                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_RFDR7                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_RFDR8                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_RFDR9                            FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_RFDR10                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_RFDR11                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_RFDR12                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_RFDR13                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_RFDR14                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_RFDR15                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_RFDR16                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_RFDR17                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_RFDR18                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_RFDR19                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_RFDR20                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_RFDR21                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_RFDR22                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_RFDR23                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_RFDR24                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_RFDR25                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_RFDR26                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_RFDR27                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_RFDR28                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_RFDR29                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_RFDR30                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_RFDR31                           FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_TFDR0                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_TFDR1                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_TFDR2                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_TFDR3                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_TFDR4                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_TFDR5                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_TFDR6                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_TFDR7                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_TFDR8                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_TFDR9                            FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_TFDR10                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_TFDR11                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_TFDR12                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_TFDR13                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_TFDR14                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_TFDR15                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_TFDR16                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_TFDR17                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_TFDR18                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_TFDR19                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_TFDR20                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_TFDR21                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_TFDR22                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_TFDR23                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_TFDR24                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_TFDR25                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_TFDR26                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_TFDR27                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_TFDR28                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_TFDR29                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_TFDR30                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_TFDR31                           FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_LUT0                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,0)
#define FLEXSPI_LUT1                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,1)
#define FLEXSPI_LUT2                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,2)
#define FLEXSPI_LUT3                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,3)
#define FLEXSPI_LUT4                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,4)
#define FLEXSPI_LUT5                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,5)
#define FLEXSPI_LUT6                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,6)
#define FLEXSPI_LUT7                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,7)
#define FLEXSPI_LUT8                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,8)
#define FLEXSPI_LUT9                             FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,9)
#define FLEXSPI_LUT10                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,10)
#define FLEXSPI_LUT11                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,11)
#define FLEXSPI_LUT12                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,12)
#define FLEXSPI_LUT13                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,13)
#define FLEXSPI_LUT14                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,14)
#define FLEXSPI_LUT15                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,15)
#define FLEXSPI_LUT16                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,16)
#define FLEXSPI_LUT17                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,17)
#define FLEXSPI_LUT18                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,18)
#define FLEXSPI_LUT19                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,19)
#define FLEXSPI_LUT20                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,20)
#define FLEXSPI_LUT21                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,21)
#define FLEXSPI_LUT22                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,22)
#define FLEXSPI_LUT23                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,23)
#define FLEXSPI_LUT24                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,24)
#define FLEXSPI_LUT25                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,25)
#define FLEXSPI_LUT26                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,26)
#define FLEXSPI_LUT27                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,27)
#define FLEXSPI_LUT28                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,28)
#define FLEXSPI_LUT29                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,29)
#define FLEXSPI_LUT30                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,30)
#define FLEXSPI_LUT31                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,31)
#define FLEXSPI_LUT32                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,32)
#define FLEXSPI_LUT33                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,33)
#define FLEXSPI_LUT34                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,34)
#define FLEXSPI_LUT35                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,35)
#define FLEXSPI_LUT36                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,36)
#define FLEXSPI_LUT37                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,37)
#define FLEXSPI_LUT38                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,38)
#define FLEXSPI_LUT39                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,39)
#define FLEXSPI_LUT40                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,40)
#define FLEXSPI_LUT41                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,41)
#define FLEXSPI_LUT42                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,42)
#define FLEXSPI_LUT43                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,43)
#define FLEXSPI_LUT44                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,44)
#define FLEXSPI_LUT45                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,45)
#define FLEXSPI_LUT46                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,46)
#define FLEXSPI_LUT47                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,47)
#define FLEXSPI_LUT48                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,48)
#define FLEXSPI_LUT49                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,49)
#define FLEXSPI_LUT50                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,50)
#define FLEXSPI_LUT51                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,51)
#define FLEXSPI_LUT52                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,52)
#define FLEXSPI_LUT53                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,53)
#define FLEXSPI_LUT54                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,54)
#define FLEXSPI_LUT55                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,55)
#define FLEXSPI_LUT56                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,56)
#define FLEXSPI_LUT57                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,57)
#define FLEXSPI_LUT58                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,58)
#define FLEXSPI_LUT59                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,59)
#define FLEXSPI_LUT60                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,60)
#define FLEXSPI_LUT61                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,61)
#define FLEXSPI_LUT62                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,62)
#define FLEXSPI_LUT63                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,63)
#define FLEXSPI_LUT64                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,64)
#define FLEXSPI_LUT65                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,65)
#define FLEXSPI_LUT66                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,66)
#define FLEXSPI_LUT67                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,67)
#define FLEXSPI_LUT68                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,68)
#define FLEXSPI_LUT69                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,69)
#define FLEXSPI_LUT70                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,70)
#define FLEXSPI_LUT71                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,71)
#define FLEXSPI_LUT72                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,72)
#define FLEXSPI_LUT73                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,73)
#define FLEXSPI_LUT74                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,74)
#define FLEXSPI_LUT75                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,75)
#define FLEXSPI_LUT76                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,76)
#define FLEXSPI_LUT77                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,77)
#define FLEXSPI_LUT78                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,78)
#define FLEXSPI_LUT79                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,79)
#define FLEXSPI_LUT80                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,80)
#define FLEXSPI_LUT81                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,81)
#define FLEXSPI_LUT82                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,82)
#define FLEXSPI_LUT83                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,83)
#define FLEXSPI_LUT84                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,84)
#define FLEXSPI_LUT85                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,85)
#define FLEXSPI_LUT86                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,86)
#define FLEXSPI_LUT87                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,87)
#define FLEXSPI_LUT88                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,88)
#define FLEXSPI_LUT89                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,89)
#define FLEXSPI_LUT90                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,90)
#define FLEXSPI_LUT91                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,91)
#define FLEXSPI_LUT92                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,92)
#define FLEXSPI_LUT93                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,93)
#define FLEXSPI_LUT94                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,94)
#define FLEXSPI_LUT95                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,95)
#define FLEXSPI_LUT96                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,96)
#define FLEXSPI_LUT97                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,97)
#define FLEXSPI_LUT98                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,98)
#define FLEXSPI_LUT99                            FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,99)
#define FLEXSPI_LUT100                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,100)
#define FLEXSPI_LUT101                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,101)
#define FLEXSPI_LUT102                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,102)
#define FLEXSPI_LUT103                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,103)
#define FLEXSPI_LUT104                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,104)
#define FLEXSPI_LUT105                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,105)
#define FLEXSPI_LUT106                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,106)
#define FLEXSPI_LUT107                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,107)
#define FLEXSPI_LUT108                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,108)
#define FLEXSPI_LUT109                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,109)
#define FLEXSPI_LUT110                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,110)
#define FLEXSPI_LUT111                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,111)
#define FLEXSPI_LUT112                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,112)
#define FLEXSPI_LUT113                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,113)
#define FLEXSPI_LUT114                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,114)
#define FLEXSPI_LUT115                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,115)
#define FLEXSPI_LUT116                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,116)
#define FLEXSPI_LUT117                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,117)
#define FLEXSPI_LUT118                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,118)
#define FLEXSPI_LUT119                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,119)
#define FLEXSPI_LUT120                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,120)
#define FLEXSPI_LUT121                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,121)
#define FLEXSPI_LUT122                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,122)
#define FLEXSPI_LUT123                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,123)
#define FLEXSPI_LUT124                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,124)
#define FLEXSPI_LUT125                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,125)
#define FLEXSPI_LUT126                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,126)
#define FLEXSPI_LUT127                           FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,127)

/* FlexSPI - Register array accessors */
#define FLEXSPI_AHBRXBUFCR0(index)               FlexSPI_AHBRXBUFCR0_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR0(index)                   FlexSPI_FLSHCR0_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR1(index)                   FlexSPI_FLSHCR1_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_FLSHCR2(index)                   FlexSPI_FLSHCR2_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_DLLCR(index)                     FlexSPI_DLLCR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_RFDR(index)                      FlexSPI_RFDR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_TFDR(index)                      FlexSPI_TFDR_REG(FLEXSPI_BASE_PTR,index)
#define FLEXSPI_LUT(index)                       FlexSPI_LUT_REG(FLEXSPI_BASE_PTR,index)

/*!
 * @}
 */ /* end of group FlexSPI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group FlexSPI_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Peripheral GPC
 * @{
 */

/** GPC - Peripheral register structure */
typedef struct GPC_MemMap {
  uint32_t LPCR_A53_BSC;                           /**< Basic Low power control register of A53 platform, offset: 0x0 */
  uint32_t LPCR_A53_AD;                            /**< Advanced Low power control register of A53 platform, offset: 0x4 */
  uint32_t LPCR_M7;                                /**< Low power control register of CPU1, offset: 0x8 */
  uint8_t RESERVED_0[8];
  uint32_t SLPCR;                                  /**< System low power control register, offset: 0x14 */
  uint32_t MST_CPU_MAPPING;                        /**< MASTER LPM Handshake, offset: 0x18 */
  uint8_t RESERVED_1[4];
  uint32_t MLPCR;                                  /**< Memory low power control register, offset: 0x20 */
  uint32_t PGC_ACK_SEL_A53;                        /**< PGC acknowledge signal selection of A53 platform, offset: 0x24 */
  uint32_t PGC_ACK_SEL_M7;                         /**< PGC acknowledge signal selection of M7 platform, offset: 0x28 */
  uint32_t MISC;                                   /**< GPC Miscellaneous register, offset: 0x2C */
  uint32_t IMR_CORE0_A53[4];                       /**< IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0, array offset: 0x30, array step: 0x4 */
  uint32_t IMR_CORE1_A53[4];                       /**< IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1, array offset: 0x40, array step: 0x4 */
  uint32_t IMR_M7[4];                              /**< IRQ masking register 1 of M7..IRQ masking register 4 of M7, array offset: 0x50, array step: 0x4 */
  uint8_t RESERVED_2[16];
  uint32_t ISR_A53[4];                             /**< IRQ status register 1 of A53..IRQ status register 4 of A53, array offset: 0x70, array step: 0x4 */
  uint32_t ISR_M7[4];                              /**< IRQ status register 1 of M7..IRQ status register 4 of M7, array offset: 0x80, array step: 0x4 */
  uint8_t RESERVED_3[32];
  uint32_t SLT0_CFG;                               /**< Slot configure register for CPUs, offset: 0xB0 */
  uint32_t SLT1_CFG;                               /**< Slot configure register for CPUs, offset: 0xB4 */
  uint32_t SLT2_CFG;                               /**< Slot configure register for CPUs, offset: 0xB8 */
  uint32_t SLT3_CFG;                               /**< Slot configure register for CPUs, offset: 0xBC */
  uint32_t SLT4_CFG;                               /**< Slot configure register for CPUs, offset: 0xC0 */
  uint32_t SLT5_CFG;                               /**< Slot configure register for CPUs, offset: 0xC4 */
  uint32_t SLT6_CFG;                               /**< Slot configure register for CPUs, offset: 0xC8 */
  uint32_t SLT7_CFG;                               /**< Slot configure register for CPUs, offset: 0xCC */
  uint32_t SLT8_CFG;                               /**< Slot configure register for CPUs, offset: 0xD0 */
  uint32_t SLT9_CFG;                               /**< Slot configure register for CPUs, offset: 0xD4 */
  uint32_t SLT10_CFG;                              /**< Slot configure register for CPUs, offset: 0xD8 */
  uint32_t SLT11_CFG;                              /**< Slot configure register for CPUs, offset: 0xDC */
  uint32_t SLT12_CFG;                              /**< Slot configure register for CPUs, offset: 0xE0 */
  uint32_t SLT13_CFG;                              /**< Slot configure register for CPUs, offset: 0xE4 */
  uint32_t SLT14_CFG;                              /**< Slot configure register for CPUs, offset: 0xE8 */
  uint32_t PGC_CPU_0_1_MAPPING;                    /**< PGC CPU mapping, offset: 0xEC */
  uint32_t CPU_PGC_SW_PUP_REQ;                     /**< CPU PGC software power up trigger, offset: 0xF0 */
  uint32_t MIX_PGC_SW_PUP_REQ;                     /**< MIX PGC software power up trigger, offset: 0xF4 */
  uint32_t PU_PGC_SW_PUP_REQ;                      /**< PU PGC software up trigger, offset: 0xF8 */
  uint32_t CPU_PGC_SW_PDN_REQ;                     /**< CPU PGC software down trigger, offset: 0xFC */
  uint32_t MIX_PGC_SW_PDN_REQ;                     /**< MIX PGC software power down trigger, offset: 0x100 */
  uint32_t PU_PGC_SW_PDN_REQ;                      /**< PU PGC software down trigger, offset: 0x104 */
  uint32_t LPCR_A53_BSC2;                          /**< Basic Low power control register of A53 platform, offset: 0x108 */
  uint8_t RESERVED_4[36];
  uint32_t CPU_PGC_PUP_STATUS1;                    /**< CPU PGC software up trigger status1, offset: 0x130 */
  uint32_t A53_MIX_PGC_PUP_STATUS[3];              /**< A53 MIX software up trigger status register, array offset: 0x134, array step: 0x4 */
  uint32_t M7_MIX_PGC_PUP_STATUS[3];               /**< M7 MIX PGC software up trigger status register, array offset: 0x140, array step: 0x4 */
  uint32_t A53_PU_PGC_PUP_STATUS[3];               /**< A53 PU software up trigger status register, array offset: 0x14C, array step: 0x4 */
  uint32_t M7_PU_PGC_PUP_STATUS[3];                /**< M7 PU PGC software up trigger status register, array offset: 0x158, array step: 0x4 */
  uint8_t RESERVED_5[12];
  uint32_t CPU_PGC_PDN_STATUS1;                    /**< CPU PGC software dn trigger status1, offset: 0x170 */
  uint32_t A53_MIX_PGC_PDN_STATUS[3];              /**< A53 MIX software down trigger status register, array offset: 0x174, array step: 0x4 */
  uint32_t M7_MIX_PGC_PDN_STATUS[3];               /**< M7 MIX PGC software power down trigger status register, array offset: 0x180, array step: 0x4 */
  uint32_t A53_PU_PGC_PDN_STATUS[3];               /**< A53 PU PGC software down trigger status, array offset: 0x18C, array step: 0x4 */
  uint32_t M7_PU_PGC_PDN_STATUS[3];                /**< M7 PU PGC software down trigger status, array offset: 0x198, array step: 0x4 */
  uint8_t RESERVED_6[12];
  uint32_t A53_MIX_PDN_FLG;                        /**< A53 MIX PDN FLG, offset: 0x1B0 */
  uint32_t A53_PU_PDN_FLG;                         /**< A53 PU PDN FLG, offset: 0x1B4 */
  uint32_t M7_MIX_PDN_FLG;                         /**< M7 MIX PDN FLG, offset: 0x1B8 */
  uint32_t M7_PU_PDN_FLG;                          /**< M7 PU PDN FLG, offset: 0x1BC */
  uint32_t IMR_CORE2_A53[4];                       /**< IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2, array offset: 0x1C0, array step: 0x4 */
  uint32_t IMR_CORE3_A53[4];                       /**< IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3, array offset: 0x1D0, array step: 0x4 */
  uint32_t ACK_SEL_A53_PU;                         /**< PGC acknowledge signal selection of A53 platform for PUs, offset: 0x1E0 */
  uint32_t ACK_SEL_M7_PU;                          /**< PGC acknowledge signal selection of M7 platform for PUs, offset: 0x1E4 */
  uint32_t SLT15_CFG;                              /**< Slot configure register for PGC CPUs, offset: 0x1E8 */
  uint32_t SLT16_CFG;                              /**< Slot configure register for PGC CPUs, offset: 0x1EC */
  uint32_t SLT17_CFG;                              /**< Slot configure register for PGC CPUs, offset: 0x1F0 */
  uint32_t SLT18_CFG;                              /**< Slot configure register for PGC CPUs, offset: 0x1F4 */
  uint32_t SLT19_CFG;                              /**< Slot configure register for PGC CPUs, offset: 0x1F8 */
  uint32_t PU_PWRHSK;                              /**< Power handshake register, offset: 0x1FC */
  uint32_t SLT_CFG_PU[20];                         /**< Slot configure register for PGC PUs, array offset: 0x200, array step: 0x4 */
} volatile *GPC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register accessors */
#define GPC_LPCR_A53_BSC_REG(base)               ((base)->LPCR_A53_BSC)
#define GPC_LPCR_A53_AD_REG(base)                ((base)->LPCR_A53_AD)
#define GPC_LPCR_M7_REG(base)                    ((base)->LPCR_M7)
#define GPC_SLPCR_REG(base)                      ((base)->SLPCR)
#define GPC_MST_CPU_MAPPING_REG(base)            ((base)->MST_CPU_MAPPING)
#define GPC_MLPCR_REG(base)                      ((base)->MLPCR)
#define GPC_PGC_ACK_SEL_A53_REG(base)            ((base)->PGC_ACK_SEL_A53)
#define GPC_PGC_ACK_SEL_M7_REG(base)             ((base)->PGC_ACK_SEL_M7)
#define GPC_MISC_REG(base)                       ((base)->MISC)
#define GPC_IMR_CORE0_A53_REG(base,index)        ((base)->IMR_CORE0_A53[index])
#define GPC_IMR_CORE1_A53_REG(base,index)        ((base)->IMR_CORE1_A53[index])
#define GPC_IMR_M7_REG(base,index)               ((base)->IMR_M7[index])
#define GPC_ISR_A53_REG(base,index)              ((base)->ISR_A53[index])
#define GPC_ISR_M7_REG(base,index)               ((base)->ISR_M7[index])
#define GPC_SLT0_CFG_REG(base)                   ((base)->SLT0_CFG)
#define GPC_SLT1_CFG_REG(base)                   ((base)->SLT1_CFG)
#define GPC_SLT2_CFG_REG(base)                   ((base)->SLT2_CFG)
#define GPC_SLT3_CFG_REG(base)                   ((base)->SLT3_CFG)
#define GPC_SLT4_CFG_REG(base)                   ((base)->SLT4_CFG)
#define GPC_SLT5_CFG_REG(base)                   ((base)->SLT5_CFG)
#define GPC_SLT6_CFG_REG(base)                   ((base)->SLT6_CFG)
#define GPC_SLT7_CFG_REG(base)                   ((base)->SLT7_CFG)
#define GPC_SLT8_CFG_REG(base)                   ((base)->SLT8_CFG)
#define GPC_SLT9_CFG_REG(base)                   ((base)->SLT9_CFG)
#define GPC_SLT10_CFG_REG(base)                  ((base)->SLT10_CFG)
#define GPC_SLT11_CFG_REG(base)                  ((base)->SLT11_CFG)
#define GPC_SLT12_CFG_REG(base)                  ((base)->SLT12_CFG)
#define GPC_SLT13_CFG_REG(base)                  ((base)->SLT13_CFG)
#define GPC_SLT14_CFG_REG(base)                  ((base)->SLT14_CFG)
#define GPC_PGC_CPU_0_1_MAPPING_REG(base)        ((base)->PGC_CPU_0_1_MAPPING)
#define GPC_CPU_PGC_SW_PUP_REQ_REG(base)         ((base)->CPU_PGC_SW_PUP_REQ)
#define GPC_MIX_PGC_SW_PUP_REQ_REG(base)         ((base)->MIX_PGC_SW_PUP_REQ)
#define GPC_PU_PGC_SW_PUP_REQ_REG(base)          ((base)->PU_PGC_SW_PUP_REQ)
#define GPC_CPU_PGC_SW_PDN_REQ_REG(base)         ((base)->CPU_PGC_SW_PDN_REQ)
#define GPC_MIX_PGC_SW_PDN_REQ_REG(base)         ((base)->MIX_PGC_SW_PDN_REQ)
#define GPC_PU_PGC_SW_PDN_REQ_REG(base)          ((base)->PU_PGC_SW_PDN_REQ)
#define GPC_LPCR_A53_BSC2_REG(base)              ((base)->LPCR_A53_BSC2)
#define GPC_CPU_PGC_PUP_STATUS1_REG(base)        ((base)->CPU_PGC_PUP_STATUS1)
#define GPC_A53_MIX_PGC_PUP_STATUS_REG(base,index) ((base)->A53_MIX_PGC_PUP_STATUS[index])
#define GPC_M7_MIX_PGC_PUP_STATUS_REG(base,index) ((base)->M7_MIX_PGC_PUP_STATUS[index])
#define GPC_A53_PU_PGC_PUP_STATUS_REG(base,index) ((base)->A53_PU_PGC_PUP_STATUS[index])
#define GPC_M7_PU_PGC_PUP_STATUS_REG(base,index) ((base)->M7_PU_PGC_PUP_STATUS[index])
#define GPC_CPU_PGC_PDN_STATUS1_REG(base)        ((base)->CPU_PGC_PDN_STATUS1)
#define GPC_A53_MIX_PGC_PDN_STATUS_REG(base,index) ((base)->A53_MIX_PGC_PDN_STATUS[index])
#define GPC_M7_MIX_PGC_PDN_STATUS_REG(base,index) ((base)->M7_MIX_PGC_PDN_STATUS[index])
#define GPC_A53_PU_PGC_PDN_STATUS_REG(base,index) ((base)->A53_PU_PGC_PDN_STATUS[index])
#define GPC_M7_PU_PGC_PDN_STATUS_REG(base,index) ((base)->M7_PU_PGC_PDN_STATUS[index])
#define GPC_A53_MIX_PDN_FLG_REG(base)            ((base)->A53_MIX_PDN_FLG)
#define GPC_A53_PU_PDN_FLG_REG(base)             ((base)->A53_PU_PDN_FLG)
#define GPC_M7_MIX_PDN_FLG_REG(base)             ((base)->M7_MIX_PDN_FLG)
#define GPC_M7_PU_PDN_FLG_REG(base)              ((base)->M7_PU_PDN_FLG)
#define GPC_IMR_CORE2_A53_REG(base,index)        ((base)->IMR_CORE2_A53[index])
#define GPC_IMR_CORE3_A53_REG(base,index)        ((base)->IMR_CORE3_A53[index])
#define GPC_ACK_SEL_A53_PU_REG(base)             ((base)->ACK_SEL_A53_PU)
#define GPC_ACK_SEL_M7_PU_REG(base)              ((base)->ACK_SEL_M7_PU)
#define GPC_SLT15_CFG_REG(base)                  ((base)->SLT15_CFG)
#define GPC_SLT16_CFG_REG(base)                  ((base)->SLT16_CFG)
#define GPC_SLT17_CFG_REG(base)                  ((base)->SLT17_CFG)
#define GPC_SLT18_CFG_REG(base)                  ((base)->SLT18_CFG)
#define GPC_SLT19_CFG_REG(base)                  ((base)->SLT19_CFG)
#define GPC_PU_PWRHSK_REG(base)                  ((base)->PU_PWRHSK)
#define GPC_SLT_CFG_PU_REG(base,index)           ((base)->SLT_CFG_PU[index])

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Masks GPC Register Masks
 * @{
 */

/*! @name LPCR_A53_BSC - Basic Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_BSC_LPM0_MASK               (0x3U)
#define GPC_LPCR_A53_BSC_LPM0_SHIFT              (0U)
/*! LPM0
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC_LPM0(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM0_SHIFT)) & GPC_LPCR_A53_BSC_LPM0_MASK)
#define GPC_LPCR_A53_BSC_LPM1_MASK               (0xCU)
#define GPC_LPCR_A53_BSC_LPM1_SHIFT              (2U)
/*! LPM1
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC_LPM1(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC_LPM1_SHIFT)) & GPC_LPCR_A53_BSC_LPM1_MASK)
#define GPC_LPCR_A53_BSC_MST0_LPM_HSK_MASK_MASK  (0x40U)
#define GPC_LPCR_A53_BSC_MST0_LPM_HSK_MASK_SHIFT (6U)
#define GPC_LPCR_A53_BSC_MST1_LPM_HSK_MASK_MASK  (0x80U)
#define GPC_LPCR_A53_BSC_MST1_LPM_HSK_MASK_SHIFT (7U)
#define GPC_LPCR_A53_BSC_MST2_LPM_HSK_MASK_MASK  (0x100U)
#define GPC_LPCR_A53_BSC_MST2_LPM_HSK_MASK_SHIFT (8U)
#define GPC_LPCR_A53_BSC_MST3_LPM_HSK_MASK_MASK  (0x200U)
#define GPC_LPCR_A53_BSC_MST3_LPM_HSK_MASK_SHIFT (9U)
#define GPC_LPCR_A53_BSC_MST4_LPM_HSK_MASK_MASK  (0x400U)
#define GPC_LPCR_A53_BSC_MST4_LPM_HSK_MASK_SHIFT (10U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_MASK     (0x4000U)
#define GPC_LPCR_A53_BSC_CPU_CLK_ON_LPM_SHIFT    (14U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_MASK     (0x10000U)
#define GPC_LPCR_A53_BSC_MASK_CORE0_WFI_SHIFT    (16U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_MASK     (0x20000U)
#define GPC_LPCR_A53_BSC_MASK_CORE1_WFI_SHIFT    (17U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_MASK     (0x40000U)
#define GPC_LPCR_A53_BSC_MASK_CORE2_WFI_SHIFT    (18U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_MASK     (0x80000U)
#define GPC_LPCR_A53_BSC_MASK_CORE3_WFI_SHIFT    (19U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_MASK         (0x400000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C2_SHIFT        (22U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_MASK         (0x800000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C3_SHIFT        (23U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_MASK       (0x1000000U)
#define GPC_LPCR_A53_BSC_MASK_SCU_WFI_SHIFT      (24U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_MASK      (0x4000000U)
#define GPC_LPCR_A53_BSC_MASK_L2CC_WFI_SHIFT     (26U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_MASK         (0x10000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C0_SHIFT        (28U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_MASK         (0x20000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_C1_SHIFT        (29U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_MASK    (0x40000000U)
#define GPC_LPCR_A53_BSC_IRQ_SRC_A53_WUP_SHIFT   (30U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_MASK   (0x80000000U)
#define GPC_LPCR_A53_BSC_MASK_DSM_TRIGGER_SHIFT  (31U)
/*! @} */

/*! @name LPCR_A53_AD - Advanced Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_MASK       (0x1U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_SHIFT      (0U)
#define GPC_LPCR_A53_AD_EN_C0_PDN_MASK           (0x2U)
#define GPC_LPCR_A53_AD_EN_C0_PDN_SHIFT          (1U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_MASK       (0x4U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_SHIFT      (2U)
#define GPC_LPCR_A53_AD_EN_C1_PDN_MASK           (0x8U)
#define GPC_LPCR_A53_AD_EN_C1_PDN_SHIFT          (3U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_MASK         (0x10U)
#define GPC_LPCR_A53_AD_EN_PLAT_PDN_SHIFT        (4U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_MASK       (0x20U)
#define GPC_LPCR_A53_AD_EN_L2_WFI_PDN_SHIFT      (5U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_MASK       (0x100U)
#define GPC_LPCR_A53_AD_EN_C0_IRQ_PUP_SHIFT      (8U)
#define GPC_LPCR_A53_AD_EN_C0_PUP_MASK           (0x200U)
#define GPC_LPCR_A53_AD_EN_C0_PUP_SHIFT          (9U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_MASK       (0x400U)
#define GPC_LPCR_A53_AD_EN_C1_IRQ_PUP_SHIFT      (10U)
#define GPC_LPCR_A53_AD_EN_C1_PUP_MASK           (0x800U)
#define GPC_LPCR_A53_AD_EN_C1_PUP_SHIFT          (11U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_MASK       (0x10000U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_SHIFT      (16U)
#define GPC_LPCR_A53_AD_EN_C2_PDN_MASK           (0x20000U)
#define GPC_LPCR_A53_AD_EN_C2_PDN_SHIFT          (17U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_MASK       (0x40000U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_SHIFT      (18U)
#define GPC_LPCR_A53_AD_EN_C3_PDN_MASK           (0x80000U)
#define GPC_LPCR_A53_AD_EN_C3_PDN_SHIFT          (19U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_DIS_MASK   (0x100000U)
#define GPC_LPCR_A53_AD_EN_C0_WFI_PDN_DIS_SHIFT  (20U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_DIS_MASK   (0x200000U)
#define GPC_LPCR_A53_AD_EN_C1_WFI_PDN_DIS_SHIFT  (21U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_DIS_MASK   (0x400000U)
#define GPC_LPCR_A53_AD_EN_C2_WFI_PDN_DIS_SHIFT  (22U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_DIS_MASK   (0x800000U)
#define GPC_LPCR_A53_AD_EN_C3_WFI_PDN_DIS_SHIFT  (23U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_MASK       (0x1000000U)
#define GPC_LPCR_A53_AD_EN_C2_IRQ_PUP_SHIFT      (24U)
#define GPC_LPCR_A53_AD_EN_C2_PUP_MASK           (0x2000000U)
#define GPC_LPCR_A53_AD_EN_C2_PUP_SHIFT          (25U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_MASK       (0x4000000U)
#define GPC_LPCR_A53_AD_EN_C3_IRQ_PUP_SHIFT      (26U)
#define GPC_LPCR_A53_AD_EN_C3_PUP_MASK           (0x8000000U)
#define GPC_LPCR_A53_AD_EN_C3_PUP_SHIFT          (27U)
#define GPC_LPCR_A53_AD_L2PGE_MASK               (0x80000000U)
#define GPC_LPCR_A53_AD_L2PGE_SHIFT              (31U)
/*! @} */

/*! @name LPCR_M7 - Low power control register of CPU1 */
/*! @{ */
#define GPC_LPCR_M7_LPM0_MASK                    (0x3U)
#define GPC_LPCR_M7_LPM0_SHIFT                   (0U)
/*! LPM0
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_M7_LPM0(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_M7_LPM0_SHIFT)) & GPC_LPCR_M7_LPM0_MASK)
#define GPC_LPCR_M7_EN_M7_PDN_MASK               (0x4U)
#define GPC_LPCR_M7_EN_M7_PDN_SHIFT              (2U)
#define GPC_LPCR_M7_EN_M7_PUP_MASK               (0x8U)
#define GPC_LPCR_M7_EN_M7_PUP_SHIFT              (3U)
#define GPC_LPCR_M7_CPU_CLK_ON_LPM_MASK          (0x4000U)
#define GPC_LPCR_M7_CPU_CLK_ON_LPM_SHIFT         (14U)
#define GPC_LPCR_M7_MASK_M7_WFI_MASK             (0x10000U)
#define GPC_LPCR_M7_MASK_M7_WFI_SHIFT            (16U)
#define GPC_LPCR_M7_MASK_DSM_TRIGGER_MASK        (0x80000000U)
#define GPC_LPCR_M7_MASK_DSM_TRIGGER_SHIFT       (31U)
/*! @} */

/*! @name SLPCR - System low power control register */
/*! @{ */
#define GPC_SLPCR_BYPASS_PMIC_READY_MASK         (0x1U)
#define GPC_SLPCR_BYPASS_PMIC_READY_SHIFT        (0U)
#define GPC_SLPCR_SBYOS_MASK                     (0x2U)
#define GPC_SLPCR_SBYOS_SHIFT                    (1U)
#define GPC_SLPCR_VSTBY_MASK                     (0x4U)
#define GPC_SLPCR_VSTBY_SHIFT                    (2U)
#define GPC_SLPCR_STBY_COUNT_MASK                (0x38U)
#define GPC_SLPCR_STBY_COUNT_SHIFT               (3U)
/*! STBY_COUNT
 *  0b000..GPC will wait 4 ckil clock cycles
 *  0b001..GPC will wait 8 ckil clock cycles
 *  0b010..GPC will wait 16 ckil clock cycles
 *  0b011..GPC will wait 32 ckil clock cycles
 *  0b100..GPC will wait 64 ckil clock cycles
 *  0b101..GPC will wait 128 ckil clock cycles
 *  0b110..GPC will wait 256 ckil clock cycles
 *  0b111..GPC will wait 512 ckil clock cycles
 */
#define GPC_SLPCR_STBY_COUNT(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_STBY_COUNT_SHIFT)) & GPC_SLPCR_STBY_COUNT_MASK)
#define GPC_SLPCR_COSC_PWRDOWN_MASK              (0x40U)
#define GPC_SLPCR_COSC_PWRDOWN_SHIFT             (6U)
#define GPC_SLPCR_COSC_EN_MASK                   (0x80U)
#define GPC_SLPCR_COSC_EN_SHIFT                  (7U)
#define GPC_SLPCR_OSCCNT_MASK                    (0xFF00U)
#define GPC_SLPCR_OSCCNT_SHIFT                   (8U)
/*! OSCCNT
 *  0b00000000..count 1 ckil
 *  0b11111111..count 256 ckils
 */
#define GPC_SLPCR_OSCCNT(x)                      (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_OSCCNT_SHIFT)) & GPC_SLPCR_OSCCNT_MASK)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_MASK  (0x10000U)
#define GPC_SLPCR_EN_A53_FASTWUP_WAIT_MODE_SHIFT (16U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_MASK  (0x20000U)
#define GPC_SLPCR_EN_A53_FASTWUP_STOP_MODE_SHIFT (17U)
#define GPC_SLPCR_EN_M7_FASTWUP_WAIT_MODE_MASK   (0x40000U)
#define GPC_SLPCR_EN_M7_FASTWUP_WAIT_MODE_SHIFT  (18U)
#define GPC_SLPCR_EN_M7_FASTWUP_STOP_MODE_MASK   (0x80000U)
#define GPC_SLPCR_EN_M7_FASTWUP_STOP_MODE_SHIFT  (19U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_MASK        (0x800000U)
#define GPC_SLPCR_DISABLE_A53_IS_DSM_SHIFT       (23U)
#define GPC_SLPCR_REG_BYPASS_COUNT_MASK          (0x3F000000U)
#define GPC_SLPCR_REG_BYPASS_COUNT_SHIFT         (24U)
/*! REG_BYPASS_COUNT
 *  0b000000..no delay
 *  0b000001..1 CKIL clock period delay
 *  0b111111..63 CKIL clock period delay
 */
#define GPC_SLPCR_REG_BYPASS_COUNT(x)            (((uint32_t)(((uint32_t)(x)) << GPC_SLPCR_REG_BYPASS_COUNT_SHIFT)) & GPC_SLPCR_REG_BYPASS_COUNT_MASK)
#define GPC_SLPCR_RBC_EN_MASK                    (0x40000000U)
#define GPC_SLPCR_RBC_EN_SHIFT                   (30U)
#define GPC_SLPCR_EN_DSM_MASK                    (0x80000000U)
#define GPC_SLPCR_EN_DSM_SHIFT                   (31U)
/*! @} */

/*! @name MST_CPU_MAPPING - MASTER LPM Handshake */
/*! @{ */
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_MASK (0x1U)
#define GPC_MST_CPU_MAPPING_MST0_CPU_MAPPING_SHIFT (0U)
#define GPC_MST_CPU_MAPPING_MST1_CPU_MAPPING_MASK (0x2U)
#define GPC_MST_CPU_MAPPING_MST1_CPU_MAPPING_SHIFT (1U)
#define GPC_MST_CPU_MAPPING_MST2_CPU_MAPPING_MASK (0x4U)
#define GPC_MST_CPU_MAPPING_MST2_CPU_MAPPING_SHIFT (2U)
#define GPC_MST_CPU_MAPPING_MST3_CPU_MAPPING_MASK (0x8U)
#define GPC_MST_CPU_MAPPING_MST3_CPU_MAPPING_SHIFT (3U)
#define GPC_MST_CPU_MAPPING_MST4_CPU_MAPPING_MASK (0x10U)
#define GPC_MST_CPU_MAPPING_MST4_CPU_MAPPING_SHIFT (4U)
/*! @} */

/*! @name MLPCR - Memory low power control register */
/*! @{ */
#define GPC_MLPCR_MEMLP_CTL_DIS_MASK             (0x1U)
#define GPC_MLPCR_MEMLP_CTL_DIS_SHIFT            (0U)
#define GPC_MLPCR_MEMLP_RET_SEL_MASK             (0x2U)
#define GPC_MLPCR_MEMLP_RET_SEL_SHIFT            (1U)
#define GPC_MLPCR_ROMLP_PDN_DIS_MASK             (0x4U)
#define GPC_MLPCR_ROMLP_PDN_DIS_SHIFT            (2U)
#define GPC_MLPCR_MEMLP_ENT_CNT_MASK             (0xFF00U)
#define GPC_MLPCR_MEMLP_ENT_CNT_SHIFT            (8U)
#define GPC_MLPCR_MEMLP_ENT_CNT(x)               (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_ENT_CNT_SHIFT)) & GPC_MLPCR_MEMLP_ENT_CNT_MASK)
#define GPC_MLPCR_MEM_EXT_CNT_MASK               (0xFF0000U)
#define GPC_MLPCR_MEM_EXT_CNT_SHIFT              (16U)
#define GPC_MLPCR_MEM_EXT_CNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEM_EXT_CNT_SHIFT)) & GPC_MLPCR_MEM_EXT_CNT_MASK)
#define GPC_MLPCR_MEMLP_RET_PGEN_MASK            (0xFF000000U)
#define GPC_MLPCR_MEMLP_RET_PGEN_SHIFT           (24U)
#define GPC_MLPCR_MEMLP_RET_PGEN(x)              (((uint32_t)(((uint32_t)(x)) << GPC_MLPCR_MEMLP_RET_PGEN_SHIFT)) & GPC_MLPCR_MEMLP_RET_PGEN_MASK)
/*! @} */

/*! @name PGC_ACK_SEL_A53 - PGC acknowledge signal selection of A53 platform */
/*! @{ */
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_MASK (0x2U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PDN_ACK_SHIFT (1U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_MASK (0x4U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PDN_ACK_SHIFT (2U)
#define GPC_PGC_ACK_SEL_A53_NOC_PGC_PDN_ACK_MASK (0x8U)
#define GPC_PGC_ACK_SEL_A53_NOC_PGC_PDN_ACK_SHIFT (3U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_MASK (0x2000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PDN_ACK_SHIFT (13U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_MASK (0x4000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PDN_ACK_SHIFT (14U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_A53_A53_C0_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_MASK (0x20000U)
#define GPC_PGC_ACK_SEL_A53_A53_C1_PGC_PUP_ACK_SHIFT (17U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_PGC_ACK_SEL_A53_A53_PLAT_PGC_PUP_ACK_SHIFT (18U)
#define GPC_PGC_ACK_SEL_A53_NOC_PGC_PUP_ACK_MASK (0x80000U)
#define GPC_PGC_ACK_SEL_A53_NOC_PGC_PUP_ACK_SHIFT (19U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_MASK (0x20000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C2_PGC_PUP_ACK_SHIFT (29U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_MASK (0x40000000U)
#define GPC_PGC_ACK_SEL_A53_A53_C3_PGC_PUP_ACK_SHIFT (30U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_A53_A53_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name PGC_ACK_SEL_M7 - PGC acknowledge signal selection of M7 platform */
/*! @{ */
#define GPC_PGC_ACK_SEL_M7_M7_VIRTUAL_PGC_PDN_ACK_MASK (0x1U)
#define GPC_PGC_ACK_SEL_M7_M7_VIRTUAL_PGC_PDN_ACK_SHIFT (0U)
#define GPC_PGC_ACK_SEL_M7_NOC_PGC_PDN_ACK_MASK  (0x2U)
#define GPC_PGC_ACK_SEL_M7_NOC_PGC_PDN_ACK_SHIFT (1U)
#define GPC_PGC_ACK_SEL_M7_M7_DUMMY_PGC_PDN_ACK_MASK (0x8000U)
#define GPC_PGC_ACK_SEL_M7_M7_DUMMY_PGC_PDN_ACK_SHIFT (15U)
#define GPC_PGC_ACK_SEL_M7_M7_VIRTUAL_PGC_PUP_ACK_MASK (0x10000U)
#define GPC_PGC_ACK_SEL_M7_M7_VIRTUAL_PGC_PUP_ACK_SHIFT (16U)
#define GPC_PGC_ACK_SEL_M7_NOC_PGC_PUP_ACK_MASK  (0x20000U)
#define GPC_PGC_ACK_SEL_M7_NOC_PGC_PUP_ACK_SHIFT (17U)
#define GPC_PGC_ACK_SEL_M7_M7_DUMMY_PGC_PUP_ACK_MASK (0x80000000U)
#define GPC_PGC_ACK_SEL_M7_M7_DUMMY_PGC_PUP_ACK_SHIFT (31U)
/*! @} */

/*! @name MISC - GPC Miscellaneous register */
/*! @{ */
#define GPC_MISC_M7_SLEEP_HOLD_REQ_B_MASK        (0x1U)
#define GPC_MISC_M7_SLEEP_HOLD_REQ_B_SHIFT       (0U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_MASK       (0x2U)
#define GPC_MISC_A53_SLEEP_HOLD_REQ_B_SHIFT      (1U)
#define GPC_MISC_GPC_IRQ_MASK_MASK               (0x20U)
#define GPC_MISC_GPC_IRQ_MASK_SHIFT              (5U)
#define GPC_MISC_M7_PDN_REQ_MASK_MASK            (0x100U)
#define GPC_MISC_M7_PDN_REQ_MASK_SHIFT           (8U)
#define GPC_MISC_A53_BYPASS_PUP_MASK_MASK        (0x1000000U)
#define GPC_MISC_A53_BYPASS_PUP_MASK_SHIFT       (24U)
#define GPC_MISC_M7_BYPASS_PUP_MASK_MASK         (0x2000000U)
#define GPC_MISC_M7_BYPASS_PUP_MASK_SHIFT        (25U)
/*! @} */

/*! @name IMR_CORE0_A53 - IRQ masking register 1 of A53 core0..IRQ masking register 4 of A53 core0 */
/*! @{ */
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT   (0U)
/*! IMR1_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR1_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR1_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR1_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT   (0U)
/*! IMR2_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR2_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR2_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR2_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT   (0U)
/*! IMR3_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR3_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR3_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR3_CORE0_A53_MASK)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT   (0U)
/*! IMR4_CORE0_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE0_A53_IMR4_CORE0_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE0_A53_IMR4_CORE0_A53_SHIFT)) & GPC_IMR_CORE0_A53_IMR4_CORE0_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE0_A53 */
#define GPC_IMR_CORE0_A53_COUNT                  (4U)

/*! @name IMR_CORE1_A53 - IRQ masking register 1 of A53 core1..IRQ masking register 4 of A53 core1 */
/*! @{ */
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT   (0U)
/*! IMR1_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR1_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR1_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR1_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT   (0U)
/*! IMR2_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR2_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR2_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR2_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT   (0U)
/*! IMR3_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR3_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR3_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR3_CORE1_A53_MASK)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT   (0U)
/*! IMR4_CORE1_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE1_A53_IMR4_CORE1_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE1_A53_IMR4_CORE1_A53_SHIFT)) & GPC_IMR_CORE1_A53_IMR4_CORE1_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE1_A53 */
#define GPC_IMR_CORE1_A53_COUNT                  (4U)

/*! @name IMR_M7 - IRQ masking register 1 of M7..IRQ masking register 4 of M7 */
/*! @{ */
#define GPC_IMR_M7_IMR1_M7_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M7_IMR1_M7_SHIFT                 (0U)
/*! IMR1_M7
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M7_IMR1_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M7_IMR1_M7_SHIFT)) & GPC_IMR_M7_IMR1_M7_MASK)
#define GPC_IMR_M7_IMR2_M7_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M7_IMR2_M7_SHIFT                 (0U)
/*! IMR2_M7
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M7_IMR2_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M7_IMR2_M7_SHIFT)) & GPC_IMR_M7_IMR2_M7_MASK)
#define GPC_IMR_M7_IMR3_M7_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M7_IMR3_M7_SHIFT                 (0U)
/*! IMR3_M7
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M7_IMR3_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M7_IMR3_M7_SHIFT)) & GPC_IMR_M7_IMR3_M7_MASK)
#define GPC_IMR_M7_IMR4_M7_MASK                  (0xFFFFFFFFU)
#define GPC_IMR_M7_IMR4_M7_SHIFT                 (0U)
/*! IMR4_M7
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_M7_IMR4_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_IMR_M7_IMR4_M7_SHIFT)) & GPC_IMR_M7_IMR4_M7_MASK)
/*! @} */

/* The count of GPC_IMR_M7 */
#define GPC_IMR_M7_COUNT                         (4U)

/*! @name ISR_A53 - IRQ status register 1 of A53..IRQ status register 4 of A53 */
/*! @{ */
#define GPC_ISR_A53_ISR1_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR1_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR1_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR1_A53_SHIFT)) & GPC_ISR_A53_ISR1_A53_MASK)
#define GPC_ISR_A53_ISR2_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR2_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR2_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR2_A53_SHIFT)) & GPC_ISR_A53_ISR2_A53_MASK)
#define GPC_ISR_A53_ISR3_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR3_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR3_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR3_A53_SHIFT)) & GPC_ISR_A53_ISR3_A53_MASK)
#define GPC_ISR_A53_ISR4_A53_MASK                (0xFFFFFFFFU)
#define GPC_ISR_A53_ISR4_A53_SHIFT               (0U)
#define GPC_ISR_A53_ISR4_A53(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_ISR_A53_ISR4_A53_SHIFT)) & GPC_ISR_A53_ISR4_A53_MASK)
/*! @} */

/* The count of GPC_ISR_A53 */
#define GPC_ISR_A53_COUNT                        (4U)

/*! @name ISR_M7 - IRQ status register 1 of M7..IRQ status register 4 of M7 */
/*! @{ */
#define GPC_ISR_M7_ISR1_M7_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M7_ISR1_M7_SHIFT                 (0U)
#define GPC_ISR_M7_ISR1_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M7_ISR1_M7_SHIFT)) & GPC_ISR_M7_ISR1_M7_MASK)
#define GPC_ISR_M7_ISR2_M7_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M7_ISR2_M7_SHIFT                 (0U)
#define GPC_ISR_M7_ISR2_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M7_ISR2_M7_SHIFT)) & GPC_ISR_M7_ISR2_M7_MASK)
#define GPC_ISR_M7_ISR3_M7_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M7_ISR3_M7_SHIFT                 (0U)
#define GPC_ISR_M7_ISR3_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M7_ISR3_M7_SHIFT)) & GPC_ISR_M7_ISR3_M7_MASK)
#define GPC_ISR_M7_ISR4_M7_MASK                  (0xFFFFFFFFU)
#define GPC_ISR_M7_ISR4_M7_SHIFT                 (0U)
#define GPC_ISR_M7_ISR4_M7(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_ISR_M7_ISR4_M7_SHIFT)) & GPC_ISR_M7_ISR4_M7_MASK)
/*! @} */

/* The count of GPC_ISR_M7 */
#define GPC_ISR_M7_COUNT                         (4U)

/*! @name SLT0_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT0_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT0_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT0_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT0_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT0_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT0_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT0_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT0_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT0_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT0_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT0_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT0_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT0_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT0_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT1_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT1_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT1_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT1_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT1_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT1_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT1_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT1_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT1_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT1_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT1_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT1_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT1_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT1_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT1_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT2_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT2_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT2_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT2_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT2_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT2_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT2_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT2_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT2_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT2_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT2_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT2_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT2_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT2_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT2_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT3_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT3_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT3_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT3_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT3_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT3_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT3_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT3_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT3_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT3_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT3_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT3_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT3_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT3_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT3_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT4_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT4_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT4_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT4_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT4_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT4_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT4_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT4_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT4_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT4_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT4_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT4_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT4_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT4_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT4_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT5_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT5_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT5_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT5_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT5_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT5_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT5_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT5_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT5_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT5_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT5_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT5_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT5_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT5_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT5_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT6_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT6_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT6_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT6_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT6_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT6_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT6_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT6_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT6_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT6_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT6_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT6_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT6_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT6_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT6_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT7_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT7_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT7_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT7_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT7_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT7_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT7_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT7_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT7_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT7_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT7_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT7_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT7_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT7_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT7_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT8_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT8_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT8_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT8_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT8_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT8_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT8_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT8_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT8_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT8_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT8_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT8_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT8_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT8_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT8_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT9_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT9_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT9_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT9_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT9_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT9_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT9_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT9_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT9_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_MASK   (0x100U)
#define GPC_SLT9_CFG_SCU_PDN_SLOT_CONTROL_SHIFT  (8U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_MASK   (0x200U)
#define GPC_SLT9_CFG_SCU_PUP_SLOT_CONTROL_SHIFT  (9U)
#define GPC_SLT9_CFG_NOC_PDN_SLOT_CONTROL_MASK   (0x400U)
#define GPC_SLT9_CFG_NOC_PDN_SLOT_CONTROL_SHIFT  (10U)
#define GPC_SLT9_CFG_NOC_PUP_SLOT_CONTROL_MASK   (0x800U)
#define GPC_SLT9_CFG_NOC_PUP_SLOT_CONTROL_SHIFT  (11U)
/*! @} */

/*! @name SLT10_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT10_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT10_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT10_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT10_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT10_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT10_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT10_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT10_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT10_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT10_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT10_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT10_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT10_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT10_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT11_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT11_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT11_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT11_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT11_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT11_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT11_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT11_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT11_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT11_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT11_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT11_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT11_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT11_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT11_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT12_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT12_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT12_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT12_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT12_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT12_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT12_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT12_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT12_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT12_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT12_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT12_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT12_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT12_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT12_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT13_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT13_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT13_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT13_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT13_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT13_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT13_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT13_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT13_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT13_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT13_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT13_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT13_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT13_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT13_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT14_CFG - Slot configure register for CPUs */
/*! @{ */
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT14_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT14_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT14_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT14_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT14_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT14_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT14_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT14_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT14_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT14_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT14_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT14_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT14_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT14_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name PGC_CPU_0_1_MAPPING - PGC CPU mapping */
/*! @{ */
#define GPC_PGC_CPU_0_1_MAPPING_NOC_A53_DOMAIN_MASK (0x2U)
#define GPC_PGC_CPU_0_1_MAPPING_NOC_A53_DOMAIN_SHIFT (1U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_MASK (0x4U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_A53_DOMAIN_SHIFT (2U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_MASK (0x10U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_A53_DOMAIN_SHIFT (4U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_MASK (0x80U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_A53_DOMAIN_SHIFT (7U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_MASK (0x200U)
#define GPC_PGC_CPU_0_1_MAPPING_GPU_A53_DOMAIN_SHIFT (9U)
#define GPC_PGC_CPU_0_1_MAPPING_DISPMIX_A53_DOMAIN_MASK (0x1000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISPMIX_A53_DOMAIN_SHIFT (12U)
#define GPC_PGC_CPU_0_1_MAPPING_NOC_M7_DOMAIN_MASK (0x20000U)
#define GPC_PGC_CPU_0_1_MAPPING_NOC_M7_DOMAIN_SHIFT (17U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M7_DOMAIN_MASK (0x40000U)
#define GPC_PGC_CPU_0_1_MAPPING_MIPI_M7_DOMAIN_SHIFT (18U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M7_DOMAIN_MASK (0x100000U)
#define GPC_PGC_CPU_0_1_MAPPING_OTG1_M7_DOMAIN_SHIFT (20U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M7_DOMAIN_MASK (0x800000U)
#define GPC_PGC_CPU_0_1_MAPPING_DDR1_M7_DOMAIN_SHIFT (23U)
#define GPC_PGC_CPU_0_1_MAPPING_GPUMIX_M7_DOMAIN_MASK (0x2000000U)
#define GPC_PGC_CPU_0_1_MAPPING_GPUMIX_M7_DOMAIN_SHIFT (25U)
#define GPC_PGC_CPU_0_1_MAPPING_DISPMIX_M7_DOMAIN_MASK (0x10000000U)
#define GPC_PGC_CPU_0_1_MAPPING_DISPMIX_M7_DOMAIN_SHIFT (28U)
/*! @} */

/*! @name CPU_PGC_SW_PUP_REQ - CPU PGC software power up trigger */
/*! @{ */
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE0_A53_SW_PUP_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE1_A53_SW_PUP_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE2_A53_SW_PUP_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PUP_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PUP_REQ_SCU_A53_SW_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name MIX_PGC_SW_PUP_REQ - MIX PGC software power up trigger */
/*! @{ */
#define GPC_MIX_PGC_SW_PUP_REQ_NOC_SW_PUP_REQ_MASK (0x2U)
#define GPC_MIX_PGC_SW_PUP_REQ_NOC_SW_PUP_REQ_SHIFT (1U)
/*! @} */

/*! @name PU_PGC_SW_PUP_REQ - PU PGC software up trigger */
/*! @{ */
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_DSI_SW_PUP_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PUP_REQ_MIPI_DSI_SW_PUP_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PUP_REQ_USB_OTG1_SW_PUP_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PUP_REQ_DDR1_SW_PUP_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PUP_REQ_GPUMIX_SW_PUP_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PUP_REQ_GPUMIX_SW_PUP_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PUP_REQ_DISPMIX_SW_PUP_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PUP_REQ_DISPMIX_SW_PUP_REQ_SHIFT (10U)
/*! @} */

/*! @name CPU_PGC_SW_PDN_REQ - CPU PGC software down trigger */
/*! @{ */
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_MASK (0x1U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE0_A53_SW_PDN_REQ_SHIFT (0U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_MASK (0x2U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE1_A53_SW_PDN_REQ_SHIFT (1U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PDN_REQ_MASK (0x4U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE2_A53_SW_PDN_REQ_SHIFT (2U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_MASK (0x8U)
#define GPC_CPU_PGC_SW_PDN_REQ_CORE3_A53_SW_PUP_REQ_SHIFT (3U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_SW_PDN_REQ_SCU_A53_SW_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name MIX_PGC_SW_PDN_REQ - MIX PGC software power down trigger */
/*! @{ */
#define GPC_MIX_PGC_SW_PDN_REQ_NOC_SW_PDN_REQ_MASK (0x2U)
#define GPC_MIX_PGC_SW_PDN_REQ_NOC_SW_PDN_REQ_SHIFT (1U)
/*! @} */

/*! @name PU_PGC_SW_PDN_REQ - PU PGC software down trigger */
/*! @{ */
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_DSI_SW_PDN_REQ_MASK (0x1U)
#define GPC_PU_PGC_SW_PDN_REQ_MIPI_DSI_SW_PDN_REQ_SHIFT (0U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_MASK (0x4U)
#define GPC_PU_PGC_SW_PDN_REQ_USB_OTG1_SW_PDN_REQ_SHIFT (2U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_MASK (0x20U)
#define GPC_PU_PGC_SW_PDN_REQ_DDR1_SW_PDN_REQ_SHIFT (5U)
#define GPC_PU_PGC_SW_PDN_REQ_GPUMIX_SW_PDN_REQ_MASK (0x80U)
#define GPC_PU_PGC_SW_PDN_REQ_GPUMIX_SW_PDN_REQ_SHIFT (7U)
#define GPC_PU_PGC_SW_PDN_REQ_DISPMIX_SW_PDN_REQ_MASK (0x400U)
#define GPC_PU_PGC_SW_PDN_REQ_DISPMIX_SW_PDN_REQ_SHIFT (10U)
/*! @} */

/*! @name LPCR_A53_BSC2 - Basic Low power control register of A53 platform */
/*! @{ */
#define GPC_LPCR_A53_BSC2_LPM2_MASK              (0x3U)
#define GPC_LPCR_A53_BSC2_LPM2_SHIFT             (0U)
/*! LPM2
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC2_LPM2(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM2_SHIFT)) & GPC_LPCR_A53_BSC2_LPM2_MASK)
#define GPC_LPCR_A53_BSC2_LPM3_MASK              (0xCU)
#define GPC_LPCR_A53_BSC2_LPM3_SHIFT             (2U)
/*! LPM3
 *  0b00..Remain in RUN mode
 *  0b01..Transfer to WAIT mode
 *  0b10..Transfer to STOP mode
 *  0b11..Reserved
 */
#define GPC_LPCR_A53_BSC2_LPM3(x)                (((uint32_t)(((uint32_t)(x)) << GPC_LPCR_A53_BSC2_LPM3_SHIFT)) & GPC_LPCR_A53_BSC2_LPM3_MASK)
/*! @} */

/*! @name CPU_PGC_PUP_STATUS1 - CPU PGC software up trigger status1 */
/*! @{ */
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE0_A53_PUP_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE1_A53_PUP_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE2_A53_PUP_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PUP_STATUS1_CORE3_A53_PUP_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PUP_STATUS1_SCU_A53_PUP_REQ_SHIFT (4U)
/*! @} */

/*! @name A53_MIX_PGC_PUP_STATUS - A53 MIX software up trigger status register */
/*! @{ */
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PUP_STATUS_A53_MIX_PGC_PUP_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_A53_MIX_PGC_PUP_STATUS */
#define GPC_A53_MIX_PGC_PUP_STATUS_COUNT         (3U)

/*! @name M7_MIX_PGC_PUP_STATUS - M7 MIX PGC software up trigger status register */
/*! @{ */
#define GPC_M7_MIX_PGC_PUP_STATUS_M7_MIX_PGC_PUP_STATUS_MASK (0x1U)
#define GPC_M7_MIX_PGC_PUP_STATUS_M7_MIX_PGC_PUP_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_M7_MIX_PGC_PUP_STATUS */
#define GPC_M7_MIX_PGC_PUP_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PUP_STATUS - A53 PU software up trigger status register */
/*! @{ */
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PHY_PUP_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_MIPI_PHY_PUP_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPUMIX_PUP_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_GPUMIX_PUP_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISPMIX_PUP_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PUP_STATUS_A53_DISPMIX_PUP_STATUS_SHIFT (10U)
/*! @} */

/* The count of GPC_A53_PU_PGC_PUP_STATUS */
#define GPC_A53_PU_PGC_PUP_STATUS_COUNT          (3U)

/*! @name M7_PU_PGC_PUP_STATUS - M7 PU PGC software up trigger status register */
/*! @{ */
#define GPC_M7_PU_PGC_PUP_STATUS_M7_MIPI_PHY_PUP_STATUS_MASK (0x1U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_MIPI_PHY_PUP_STATUS_SHIFT (0U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_OTG1_PUP_STATUS_MASK (0x4U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_OTG1_PUP_STATUS_SHIFT (2U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_DDR1_PUP_STATUS_MASK (0x20U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_DDR1_PUP_STATUS_SHIFT (5U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_GPUMIX_PUP_STATUS_MASK (0x80U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_GPUMIX_PUP_STATUS_SHIFT (7U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_DISPMIX_PUP_STATUS_MASK (0x400U)
#define GPC_M7_PU_PGC_PUP_STATUS_M7_DISPMIX_PUP_STATUS_SHIFT (10U)
/*! @} */

/* The count of GPC_M7_PU_PGC_PUP_STATUS */
#define GPC_M7_PU_PGC_PUP_STATUS_COUNT           (3U)

/*! @name CPU_PGC_PDN_STATUS1 - CPU PGC software dn trigger status1 */
/*! @{ */
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_MASK (0x1U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE0_A53_PDN_STATUS_SHIFT (0U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_MASK (0x2U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE1_A53_PDN_STATUS_SHIFT (1U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_MASK (0x4U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE2_A53_PDN_STATUS_SHIFT (2U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_STATUS_MASK (0x8U)
#define GPC_CPU_PGC_PDN_STATUS1_CORE3_A53_PDN_STATUS_SHIFT (3U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_REQ_MASK (0x10U)
#define GPC_CPU_PGC_PDN_STATUS1_SCU_A53_PDN_REQ_SHIFT (4U)
/*! @} */

/*! @name A53_MIX_PGC_PDN_STATUS - A53 MIX software down trigger status register */
/*! @{ */
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_A53_MIX_PGC_PDN_STATUS_A53_MIX_PGC_PDN_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_A53_MIX_PGC_PDN_STATUS */
#define GPC_A53_MIX_PGC_PDN_STATUS_COUNT         (3U)

/*! @name M7_MIX_PGC_PDN_STATUS - M7 MIX PGC software power down trigger status register */
/*! @{ */
#define GPC_M7_MIX_PGC_PDN_STATUS_M7_MIX_PGC_PDN_STATUS_MASK (0x1U)
#define GPC_M7_MIX_PGC_PDN_STATUS_M7_MIX_PGC_PDN_STATUS_SHIFT (0U)
/*! @} */

/* The count of GPC_M7_MIX_PGC_PDN_STATUS */
#define GPC_M7_MIX_PGC_PDN_STATUS_COUNT          (3U)

/*! @name A53_PU_PGC_PDN_STATUS - A53 PU PGC software down trigger status */
/*! @{ */
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PHY_PDN_STATUS_MASK (0x1U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_MIPI_PHY_PDN_STATUS_SHIFT (0U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPUMIX_PDN_STATUS_MASK (0x80U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_GPUMIX_PDN_STATUS_SHIFT (7U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISPMIX_PDN_STATUS_MASK (0x400U)
#define GPC_A53_PU_PGC_PDN_STATUS_A53_DISPMIX_PDN_STATUS_SHIFT (10U)
/*! @} */

/* The count of GPC_A53_PU_PGC_PDN_STATUS */
#define GPC_A53_PU_PGC_PDN_STATUS_COUNT          (3U)

/*! @name M7_PU_PGC_PDN_STATUS - M7 PU PGC software down trigger status */
/*! @{ */
#define GPC_M7_PU_PGC_PDN_STATUS_M7_MIPI_PHY_PDN_STATUS_MASK (0x1U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_MIPI_PHY_PDN_STATUS_SHIFT (0U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_OTG1_PDN_STATUS_MASK (0x4U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_OTG1_PDN_STATUS_SHIFT (2U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_DDR1_PDN_STATUS_MASK (0x20U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_DDR1_PDN_STATUS_SHIFT (5U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_GPUMIX_PDN_STATUS_MASK (0x80U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_GPUMIX_PDN_STATUS_SHIFT (7U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_DISPMIX_PDN_STATUS_MASK (0x400U)
#define GPC_M7_PU_PGC_PDN_STATUS_M7_DISPMIX_PDN_STATUS_SHIFT (10U)
/*! @} */

/* The count of GPC_M7_PU_PGC_PDN_STATUS */
#define GPC_M7_PU_PGC_PDN_STATUS_COUNT           (3U)

/*! @name A53_MIX_PDN_FLG - A53 MIX PDN FLG */
/*! @{ */
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_MASK (0x1U)
#define GPC_A53_MIX_PDN_FLG_A53_MIX_PDN_FLAG_SHIFT (0U)
/*! @} */

/*! @name A53_PU_PDN_FLG - A53 PU PDN FLG */
/*! @{ */
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK   (0x3FFFU)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT  (0U)
#define GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG(x)     (((uint32_t)(((uint32_t)(x)) << GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_SHIFT)) & GPC_A53_PU_PDN_FLG_A53_PU_PDN_FLG_MASK)
/*! @} */

/*! @name M7_MIX_PDN_FLG - M7 MIX PDN FLG */
/*! @{ */
#define GPC_M7_MIX_PDN_FLG_M7_MIX_PDN_FLAG_MASK  (0x1U)
#define GPC_M7_MIX_PDN_FLG_M7_MIX_PDN_FLAG_SHIFT (0U)
/*! @} */

/*! @name M7_PU_PDN_FLG - M7 PU PDN FLG */
/*! @{ */
#define GPC_M7_PU_PDN_FLG_M7_PU_PDN_FLG_MASK     (0x3FFFU)
#define GPC_M7_PU_PDN_FLG_M7_PU_PDN_FLG_SHIFT    (0U)
#define GPC_M7_PU_PDN_FLG_M7_PU_PDN_FLG(x)       (((uint32_t)(((uint32_t)(x)) << GPC_M7_PU_PDN_FLG_M7_PU_PDN_FLG_SHIFT)) & GPC_M7_PU_PDN_FLG_M7_PU_PDN_FLG_MASK)
/*! @} */

/*! @name IMR_CORE2_A53 - IRQ masking register 1 of A53 core2..IRQ masking register 4 of A53 core2 */
/*! @{ */
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT   (0U)
/*! IMR1_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR1_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR1_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR1_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT   (0U)
/*! IMR2_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR2_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR2_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR2_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT   (0U)
/*! IMR3_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR3_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR3_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR3_CORE2_A53_MASK)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT   (0U)
/*! IMR4_CORE2_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE2_A53_IMR4_CORE2_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE2_A53_IMR4_CORE2_A53_SHIFT)) & GPC_IMR_CORE2_A53_IMR4_CORE2_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE2_A53 */
#define GPC_IMR_CORE2_A53_COUNT                  (4U)

/*! @name IMR_CORE3_A53 - IRQ masking register 1 of A53 core3..IRQ masking register 4 of A53 core3 */
/*! @{ */
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT   (0U)
/*! IMR1_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR1_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR1_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR1_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT   (0U)
/*! IMR2_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR2_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR2_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR2_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT   (0U)
/*! IMR3_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR3_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR3_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR3_CORE3_A53_MASK)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK    (0xFFFFFFFFU)
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT   (0U)
/*! IMR4_CORE3_A53
 *  0b00000000000000000000000000000000..IRQ not masked
 *  0b00000000000000000000000000000001..IRQ masked
 */
#define GPC_IMR_CORE3_A53_IMR4_CORE3_A53(x)      (((uint32_t)(((uint32_t)(x)) << GPC_IMR_CORE3_A53_IMR4_CORE3_A53_SHIFT)) & GPC_IMR_CORE3_A53_IMR4_CORE3_A53_MASK)
/*! @} */

/* The count of GPC_IMR_CORE3_A53 */
#define GPC_IMR_CORE3_A53_COUNT                  (4U)

/*! @name ACK_SEL_A53_PU - PGC acknowledge signal selection of A53 platform for PUs */
/*! @{ */
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_MASK (0x4U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_MASK (0x80U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_A53_PU_GPUMIX_PGC_PDN_ACK_MASK (0x200U)
#define GPC_ACK_SEL_A53_PU_GPUMIX_PGC_PDN_ACK_SHIFT (9U)
#define GPC_ACK_SEL_A53_PU_DISPMIX_PGC_PDN_ACK_MASK (0x1000U)
#define GPC_ACK_SEL_A53_PU_DISPMIX_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_MASK (0x40000U)
#define GPC_ACK_SEL_A53_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_A53_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_MASK (0x800000U)
#define GPC_ACK_SEL_A53_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_A53_PU_GPUMIX_PGC_PUP_ACK_MASK (0x2000000U)
#define GPC_ACK_SEL_A53_PU_GPUMIX_PGC_PUP_ACK_SHIFT (25U)
#define GPC_ACK_SEL_A53_PU_DISPMIX_PGC_PUP_ACK_MASK (0x10000000U)
#define GPC_ACK_SEL_A53_PU_DISPMIX_PGC_PUP_ACK_SHIFT (28U)
/*! @} */

/*! @name ACK_SEL_M7_PU - PGC acknowledge signal selection of M7 platform for PUs */
/*! @{ */
#define GPC_ACK_SEL_M7_PU_MIPI_PGC_PDN_ACK_MASK  (0x4U)
#define GPC_ACK_SEL_M7_PU_MIPI_PGC_PDN_ACK_SHIFT (2U)
#define GPC_ACK_SEL_M7_PU_USB_OTG1_PGC_PDN_ACK_MASK (0x10U)
#define GPC_ACK_SEL_M7_PU_USB_OTG1_PGC_PDN_ACK_SHIFT (4U)
#define GPC_ACK_SEL_M7_PU_DDR1_PGC_PDN_ACK_MASK  (0x80U)
#define GPC_ACK_SEL_M7_PU_DDR1_PGC_PDN_ACK_SHIFT (7U)
#define GPC_ACK_SEL_M7_PU_GPUMIX_PGC_PDN_ACK_MASK (0x200U)
#define GPC_ACK_SEL_M7_PU_GPUMIX_PGC_PDN_ACK_SHIFT (9U)
#define GPC_ACK_SEL_M7_PU_DISPMIX_PGC_PDN_ACK_MASK (0x1000U)
#define GPC_ACK_SEL_M7_PU_DISPMIX_PGC_PDN_ACK_SHIFT (12U)
#define GPC_ACK_SEL_M7_PU_MIPI_PGC_PUP_ACK_MASK  (0x40000U)
#define GPC_ACK_SEL_M7_PU_MIPI_PGC_PUP_ACK_SHIFT (18U)
#define GPC_ACK_SEL_M7_PU_USB_OTG1_PGC_PUP_ACK_MASK (0x100000U)
#define GPC_ACK_SEL_M7_PU_USB_OTG1_PGC_PUP_ACK_SHIFT (20U)
#define GPC_ACK_SEL_M7_PU_DDR1_PGC_PUP_ACK_MASK  (0x800000U)
#define GPC_ACK_SEL_M7_PU_DDR1_PGC_PUP_ACK_SHIFT (23U)
#define GPC_ACK_SEL_M7_PU_GPUMIX_PGC_PUP_ACK_MASK (0x2000000U)
#define GPC_ACK_SEL_M7_PU_GPUMIX_PGC_PUP_ACK_SHIFT (25U)
#define GPC_ACK_SEL_M7_PU_DISPMIX_PGC_PUP_ACK_MASK (0x10000000U)
#define GPC_ACK_SEL_M7_PU_DISPMIX_PGC_PUP_ACK_SHIFT (28U)
/*! @} */

/*! @name SLT15_CFG - Slot configure register for PGC CPUs */
/*! @{ */
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT15_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT15_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT15_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT15_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT15_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT15_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT15_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT15_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT15_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT15_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT15_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT15_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT15_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT15_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT16_CFG - Slot configure register for PGC CPUs */
/*! @{ */
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT16_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT16_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT16_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT16_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT16_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT16_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT16_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT16_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT16_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT16_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT16_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT16_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT16_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT16_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT17_CFG - Slot configure register for PGC CPUs */
/*! @{ */
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT17_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT17_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT17_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT17_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT17_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT17_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT17_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT17_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT17_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT17_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT17_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT17_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT17_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT17_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT18_CFG - Slot configure register for PGC CPUs */
/*! @{ */
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT18_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT18_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT18_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT18_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT18_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT18_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT18_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT18_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT18_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT18_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT18_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT18_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT18_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT18_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name SLT19_CFG - Slot configure register for PGC CPUs */
/*! @{ */
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_MASK (0x1U)
#define GPC_SLT19_CFG_CORE0_A53_PDN_SLOT_CONTROL_SHIFT (0U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_MASK (0x2U)
#define GPC_SLT19_CFG_CORE0_A53_PUP_SLOT_CONTROL_SHIFT (1U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT19_CFG_CORE1_A53_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT19_CFG_CORE1_A53_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_MASK (0x10U)
#define GPC_SLT19_CFG_CORE2_A53_PDN_SLOT_CONTROL_SHIFT (4U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_MASK (0x20U)
#define GPC_SLT19_CFG_CORE2_A53_PUP_SLOT_CONTROL_SHIFT (5U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT19_CFG_CORE3_A53_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT19_CFG_CORE3_A53_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_MASK  (0x100U)
#define GPC_SLT19_CFG_SCU_PDN_SLOT_CONTROL_SHIFT (8U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_MASK  (0x200U)
#define GPC_SLT19_CFG_SCU_PUP_SLOT_CONTROL_SHIFT (9U)
#define GPC_SLT19_CFG_NOC_PDN_SLOT_CONTROL_MASK  (0x400U)
#define GPC_SLT19_CFG_NOC_PDN_SLOT_CONTROL_SHIFT (10U)
#define GPC_SLT19_CFG_NOC_PUP_SLOT_CONTROL_MASK  (0x800U)
#define GPC_SLT19_CFG_NOC_PUP_SLOT_CONTROL_SHIFT (11U)
/*! @} */

/*! @name PU_PWRHSK - Power handshake register */
/*! @{ */
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSREQ_MASK (0x1U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSREQ_SHIFT (0U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSREQ_MASK  (0x2U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSREQ_SHIFT (1U)
#define GPC_PU_PWRHSK_GPC_NOC2DDR_PWRDNREQN_MASK (0x4U)
#define GPC_PU_PWRHSK_GPC_NOC2DDR_PWRDNREQN_SHIFT (2U)
#define GPC_PU_PWRHSK_GPC_NOC2SUPERMIX_PWRDNREQN_MASK (0x8U)
#define GPC_PU_PWRHSK_GPC_NOC2SUPERMIX_PWRDNREQN_SHIFT (3U)
#define GPC_PU_PWRHSK_GPC_SUPERMIX2NOC_PWRDNREQN_MASK (0x10U)
#define GPC_PU_PWRHSK_GPC_SUPERMIX2NOC_PWRDNREQN_SHIFT (4U)
#define GPC_PU_PWRHSK_GPC_HSIOMIX2NOC_PWRDNREQN_MASK (0x20U)
#define GPC_PU_PWRHSK_GPC_HSIOMIX2NOC_PWRDNREQN_SHIFT (5U)
#define GPC_PU_PWRHSK_GPC_DISPMIX2NOC_PWRDNREQN_MASK (0x80U)
#define GPC_PU_PWRHSK_GPC_DISPMIX2NOC_PWRDNREQN_SHIFT (7U)
#define GPC_PU_PWRHSK_GPC_GPUPMIX2NOC_PWRDNREQN_MASK (0x200U)
#define GPC_PU_PWRHSK_GPC_GPUPMIX2NOC_PWRDNREQN_SHIFT (9U)
#define GPC_PU_PWRHSK_GPC_NOC2GPUPMIX_PWRDNREQN_MASK (0x800U)
#define GPC_PU_PWRHSK_GPC_NOC2GPUPMIX_PWRDNREQN_SHIFT (11U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSACK_MASK (0x10000U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CSYSACK_SHIFT (16U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CACTIVE_MASK (0x20000U)
#define GPC_PU_PWRHSK_GPC_DDR1_CORE_CACTIVE_SHIFT (17U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSACK_MASK  (0x40000U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CSYSACK_SHIFT (18U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CACTIVE_MASK  (0x80000U)
#define GPC_PU_PWRHSK_GPC_DDR1_AXI_CACTIVE_SHIFT (19U)
#define GPC_PU_PWRHSK_GPC_NOC2DDR1_PWRDNACKN_MASK (0x100000U)
#define GPC_PU_PWRHSK_GPC_NOC2DDR1_PWRDNACKN_SHIFT (20U)
#define GPC_PU_PWRHSK_GPC_SUPERMIX2NOC_PWRDNACKN_MASK (0x200000U)
#define GPC_PU_PWRHSK_GPC_SUPERMIX2NOC_PWRDNACKN_SHIFT (21U)
#define GPC_PU_PWRHSK_GPC_NOC2SUPERMIX_PWRDNACKN_MASK (0x400000U)
#define GPC_PU_PWRHSK_GPC_NOC2SUPERMIX_PWRDNACKN_SHIFT (22U)
#define GPC_PU_PWRHSK_GPC_HSIOMIX2NOC_PWRDNACKN_MASK (0x800000U)
#define GPC_PU_PWRHSK_GPC_HSIOMIX2NOC_PWRDNACKN_SHIFT (23U)
#define GPC_PU_PWRHSK_GPC_DISPMIX2NOC_PWRDNACKN_MASK (0x2000000U)
#define GPC_PU_PWRHSK_GPC_DISPMIX2NOC_PWRDNACKN_SHIFT (25U)
#define GPC_PU_PWRHSK_GPC_GPUMIX2NOC_PWRDNACKN_MASK (0x8000000U)
#define GPC_PU_PWRHSK_GPC_GPUMIX2NOC_PWRDNACKN_SHIFT (27U)
#define GPC_PU_PWRHSK_GPC_NOC2GPUMIX_PWRDNACKN_MASK (0x20000000U)
#define GPC_PU_PWRHSK_GPC_NOC2GPUMIX_PWRDNACKN_SHIFT (29U)
/*! @} */

/*! @name SLT_CFG_PU - Slot configure register for PGC PUs */
/*! @{ */
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_MASK (0x4U)
#define GPC_SLT_CFG_PU_MIPI_PDN_SLOT_CONTROL_SHIFT (2U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_MASK (0x8U)
#define GPC_SLT_CFG_PU_MIPI_PUP_SLOT_CONTROL_SHIFT (3U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_MASK (0x40U)
#define GPC_SLT_CFG_PU_OTG1_PDN_SLOT_CONTROL_SHIFT (6U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_MASK (0x80U)
#define GPC_SLT_CFG_PU_OTG1_PUP_SLOT_CONTROL_SHIFT (7U)
#define GPC_SLT_CFG_PU_M7_PDN_SLOT_CONTROL_MASK  (0x1000U)
#define GPC_SLT_CFG_PU_M7_PDN_SLOT_CONTROL_SHIFT (12U)
#define GPC_SLT_CFG_PU_M7_PUP_SLOT_CONTROL_MASK  (0x2000U)
#define GPC_SLT_CFG_PU_M7_PUP_SLOT_CONTROL_SHIFT (13U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_MASK (0x4000U)
#define GPC_SLT_CFG_PU_DDR1_PDN_SLOT_CONTROL_SHIFT (14U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_MASK (0x8000U)
#define GPC_SLT_CFG_PU_DDR1_PUP_SLOT_CONTROL_SHIFT (15U)
#define GPC_SLT_CFG_PU_GPUMIX_PDN_SLOT_CONTROL_MASK (0x40000U)
#define GPC_SLT_CFG_PU_GPUMIX_PDN_SLOT_CONTROL_SHIFT (18U)
#define GPC_SLT_CFG_PU_GPUMIX_PUP_SLOT_CONTROL_MASK (0x80000U)
#define GPC_SLT_CFG_PU_GPUMIX_PUP_SLOT_CONTROL_SHIFT (19U)
#define GPC_SLT_CFG_PU_DISPMIX_PDN_SLOT_CONTROL_MASK (0x1000000U)
#define GPC_SLT_CFG_PU_DISPMIX_PDN_SLOT_CONTROL_SHIFT (24U)
#define GPC_SLT_CFG_PU_DISPMIX_PUP_SLOT_CONTROL_MASK (0x2000000U)
#define GPC_SLT_CFG_PU_DISPMIX_PUP_SLOT_CONTROL_SHIFT (25U)
/*! @} */

/* The count of GPC_SLT_CFG_PU */
#define GPC_SLT_CFG_PU_COUNT                     (20U)


/*!
 * @}
 */ /* end of group GPC_Register_Masks */


/* GPC - Peripheral instance base addresses */
/** Peripheral GPC base pointer */
#define GPC_BASE_PTR                             ((GPC_MemMapPtr)0x303A0000u)
/** Array initializer of GPC peripheral base pointers */
#define GPC_BASE_PTRS                            { GPC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_Register_Accessor_Macros GPC - Register accessor macros
 * @{
 */


/* GPC - Register instance definitions */
/* GPC */
#define GPC_LPCR_A53_BSC                         GPC_LPCR_A53_BSC_REG(GPC_BASE_PTR)
#define GPC_LPCR_A53_AD                          GPC_LPCR_A53_AD_REG(GPC_BASE_PTR)
#define GPC_LPCR_M7                              GPC_LPCR_M7_REG(GPC_BASE_PTR)
#define GPC_SLPCR                                GPC_SLPCR_REG(GPC_BASE_PTR)
#define GPC_MST_CPU_MAPPING                      GPC_MST_CPU_MAPPING_REG(GPC_BASE_PTR)
#define GPC_MLPCR                                GPC_MLPCR_REG(GPC_BASE_PTR)
#define GPC_PGC_ACK_SEL_A53                      GPC_PGC_ACK_SEL_A53_REG(GPC_BASE_PTR)
#define GPC_PGC_ACK_SEL_M7                       GPC_PGC_ACK_SEL_M7_REG(GPC_BASE_PTR)
#define GPC_MISC                                 GPC_MISC_REG(GPC_BASE_PTR)
#define GPC_IMR1_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE0_A53                       GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE1_A53                       GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_M7                              GPC_IMR_M7_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_M7                              GPC_IMR_M7_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_M7                              GPC_IMR_M7_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_M7                              GPC_IMR_M7_REG(GPC_BASE_PTR,3)
#define GPC_ISR1_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,0)
#define GPC_ISR2_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,1)
#define GPC_ISR3_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,2)
#define GPC_ISR4_A53                             GPC_ISR_A53_REG(GPC_BASE_PTR,3)
#define GPC_ISR1_M7                              GPC_ISR_M7_REG(GPC_BASE_PTR,0)
#define GPC_ISR2_M7                              GPC_ISR_M7_REG(GPC_BASE_PTR,1)
#define GPC_ISR3_M7                              GPC_ISR_M7_REG(GPC_BASE_PTR,2)
#define GPC_ISR4_M7                              GPC_ISR_M7_REG(GPC_BASE_PTR,3)
#define GPC_SLT0_CFG                             GPC_SLT0_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT1_CFG                             GPC_SLT1_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT2_CFG                             GPC_SLT2_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT3_CFG                             GPC_SLT3_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT4_CFG                             GPC_SLT4_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT5_CFG                             GPC_SLT5_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT6_CFG                             GPC_SLT6_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT7_CFG                             GPC_SLT7_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT8_CFG                             GPC_SLT8_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT9_CFG                             GPC_SLT9_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT10_CFG                            GPC_SLT10_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT11_CFG                            GPC_SLT11_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT12_CFG                            GPC_SLT12_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT13_CFG                            GPC_SLT13_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT14_CFG                            GPC_SLT14_CFG_REG(GPC_BASE_PTR)
#define GPC_PGC_CPU_0_1_MAPPING                  GPC_PGC_CPU_0_1_MAPPING_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_SW_PUP_REQ                   GPC_CPU_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_MIX_PGC_SW_PUP_REQ                   GPC_MIX_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_PU_PGC_SW_PUP_REQ                    GPC_PU_PGC_SW_PUP_REQ_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_SW_PDN_REQ                   GPC_CPU_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_MIX_PGC_SW_PDN_REQ                   GPC_MIX_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_PU_PGC_SW_PDN_REQ                    GPC_PU_PGC_SW_PDN_REQ_REG(GPC_BASE_PTR)
#define GPC_LPCR_A53_BSC2                        GPC_LPCR_A53_BSC2_REG(GPC_BASE_PTR)
#define GPC_CPU_PGC_PUP_STATUS1                  GPC_CPU_PGC_PUP_STATUS1_REG(GPC_BASE_PTR)
#define GPC_A53_MIX_PGC_PUP_STATUS0              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_MIX_PGC_PUP_STATUS1              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_MIX_PGC_PUP_STATUS2              GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M7_MIX_PGC_PUP_STATUS0               GPC_M7_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M7_MIX_PGC_PUP_STATUS1               GPC_M7_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M7_MIX_PGC_PUP_STATUS2               GPC_M7_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_PU_PGC_PUP_STATUS0               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_PU_PGC_PUP_STATUS1               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_PU_PGC_PUP_STATUS2               GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M7_PU_PGC_PUP_STATUS0                GPC_M7_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M7_PU_PGC_PUP_STATUS1                GPC_M7_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M7_PU_PGC_PUP_STATUS2                GPC_M7_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_CPU_PGC_PDN_STATUS1                  GPC_CPU_PGC_PDN_STATUS1_REG(GPC_BASE_PTR)
#define GPC_A53_MIX_PGC_PDN_STATUS0              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_MIX_PGC_PDN_STATUS1              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_MIX_PGC_PDN_STATUS2              GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M7_MIX_PGC_PDN_STATUS0               GPC_M7_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M7_MIX_PGC_PDN_STATUS1               GPC_M7_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M7_MIX_PGC_PDN_STATUS2               GPC_M7_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_PU_PGC_PDN_STATUS0               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_A53_PU_PGC_PDN_STATUS1               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_A53_PU_PGC_PDN_STATUS2               GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_M7_PU_PGC_PDN_STATUS0                GPC_M7_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,0)
#define GPC_M7_PU_PGC_PDN_STATUS1                GPC_M7_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,1)
#define GPC_M7_PU_PGC_PDN_STATUS2                GPC_M7_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,2)
#define GPC_A53_MIX_PDN_FLG                      GPC_A53_MIX_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_A53_PU_PDN_FLG                       GPC_A53_PU_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_M7_MIX_PDN_FLG                       GPC_M7_MIX_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_M7_PU_PDN_FLG                        GPC_M7_PU_PDN_FLG_REG(GPC_BASE_PTR)
#define GPC_IMR1_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE2_A53                       GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,3)
#define GPC_IMR1_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,0)
#define GPC_IMR2_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,1)
#define GPC_IMR3_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,2)
#define GPC_IMR4_CORE3_A53                       GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,3)
#define GPC_ACK_SEL_A53_PU                       GPC_ACK_SEL_A53_PU_REG(GPC_BASE_PTR)
#define GPC_ACK_SEL_M7_PU                        GPC_ACK_SEL_M7_PU_REG(GPC_BASE_PTR)
#define GPC_SLT15_CFG                            GPC_SLT15_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT16_CFG                            GPC_SLT16_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT17_CFG                            GPC_SLT17_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT18_CFG                            GPC_SLT18_CFG_REG(GPC_BASE_PTR)
#define GPC_SLT19_CFG                            GPC_SLT19_CFG_REG(GPC_BASE_PTR)
#define GPC_PU_PWRHSK                            GPC_PU_PWRHSK_REG(GPC_BASE_PTR)
#define GPC_SLT0_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,0)
#define GPC_SLT1_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,1)
#define GPC_SLT2_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,2)
#define GPC_SLT3_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,3)
#define GPC_SLT4_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,4)
#define GPC_SLT5_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,5)
#define GPC_SLT6_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,6)
#define GPC_SLT7_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,7)
#define GPC_SLT8_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,8)
#define GPC_SLT9_CFG_PU                          GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,9)
#define GPC_SLT10_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,10)
#define GPC_SLT11_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,11)
#define GPC_SLT12_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,12)
#define GPC_SLT13_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,13)
#define GPC_SLT14_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,14)
#define GPC_SLT15_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,15)
#define GPC_SLT16_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,16)
#define GPC_SLT17_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,17)
#define GPC_SLT18_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,18)
#define GPC_SLT19_CFG_PU                         GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,19)

/* GPC - Register array accessors */
#define GPC_IMR_CORE0_A53(index)                 GPC_IMR_CORE0_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE1_A53(index)                 GPC_IMR_CORE1_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_M7(index)                        GPC_IMR_M7_REG(GPC_BASE_PTR,index)
#define GPC_ISR_A53(index)                       GPC_ISR_A53_REG(GPC_BASE_PTR,index)
#define GPC_ISR_M7(index)                        GPC_ISR_M7_REG(GPC_BASE_PTR,index)
#define GPC_A53_MIX_PGC_PUP_STATUS(index)        GPC_A53_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M7_MIX_PGC_PUP_STATUS(index)         GPC_M7_MIX_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_PU_PGC_PUP_STATUS(index)         GPC_A53_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M7_PU_PGC_PUP_STATUS(index)          GPC_M7_PU_PGC_PUP_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_MIX_PGC_PDN_STATUS(index)        GPC_A53_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M7_MIX_PGC_PDN_STATUS(index)         GPC_M7_MIX_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_A53_PU_PGC_PDN_STATUS(index)         GPC_A53_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_M7_PU_PGC_PDN_STATUS(index)          GPC_M7_PU_PGC_PDN_STATUS_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE2_A53(index)                 GPC_IMR_CORE2_A53_REG(GPC_BASE_PTR,index)
#define GPC_IMR_CORE3_A53(index)                 GPC_IMR_CORE3_A53_REG(GPC_BASE_PTR,index)
#define GPC_SLT_CFG_PU(index)                    GPC_SLT_CFG_PU_REG(GPC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPC_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPC_PGC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Peripheral GPC_PGC
 * @{
 */

/** GPC_PGC - Peripheral register structure */
typedef struct GPC_PGC_MemMap {
  uint8_t RESERVED_0[2048];
  struct {                                         /* offset: 0x800, array step: 0x40 */
    uint32_t CTRL;                                   /**< GPC PGC Control Register for PGC CPUs, array offset: 0x800, array step: 0x40 */
    uint32_t PUPSCR;                                 /**< GPC PGC Up Sequence Control Register, array offset: 0x804, array step: 0x40 */
    uint32_t PDNSCR;                                 /**< GPC PGC Down Sequence Control Register, array offset: 0x808, array step: 0x40 */
    uint32_t SR;                                     /**< GPC PGC Status Register, array offset: 0x80C, array step: 0x40 */
    uint8_t RESERVED_0[48];
  } GPC_PGC_A53COREnCTRL[4];
  uint32_t A53SCU_CTRL;                            /**< GPC PGC Control Register for PGC CPUs, offset: 0x900 */
  uint32_t A53SCU_PUPSCR;                          /**< GPC PGC Up Sequence Control Register, offset: 0x904 */
  uint32_t A53SCU_PDNSCR;                          /**< GPC PGC Down Sequence Control Register, offset: 0x908 */
  uint32_t A53SCU_SR;                              /**< GPC PGC Status Register, offset: 0x90C */
  uint32_t A53SCU_AUXSW;                           /**< GPC PGC Auxiliary Power Switch Control Register, offset: 0x910 */
  uint8_t RESERVED_1[300];
  uint32_t NOC_MIX_CTRL;                           /**< GPC PGC Control Register for PGC MIX., offset: 0xA40 */
  uint32_t NOC_MIX_PUPSCR;                         /**< GPC PGC Up Sequence Control Register, offset: 0xA44 */
  uint32_t NOC_MIX_PDNSCR;                         /**< GPC PGC Down Sequence Control Register, offset: 0xA48 */
  uint32_t NOC_MIX_SR;                             /**< GPC PGC Status Register, offset: 0xA4C */
  uint8_t RESERVED_2[432];
  struct {                                         /* offset: 0xC00, array step: 0x40 */
    uint32_t PU_CTRL;                                /**< GPC PGC Control Register for PGC PUs, array offset: 0xC00, array step: 0x40 */
    uint32_t PU_PUPSCR;                              /**< GPC PGC Up Sequence Control Register, array offset: 0xC04, array step: 0x40 */
    uint32_t PU_PDNSCR;                              /**< GPC PGC Down Sequence Control Register, array offset: 0xC08, array step: 0x40 */
    uint32_t PU_SR;                                  /**< GPC PGC Status Register, array offset: 0xC0C, array step: 0x40 */
    uint8_t RESERVED_0[48];
  } GPC_PGC_CTRL[14];
} volatile *GPC_PGC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPC_PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Accessor_Macros GPC_PGC - Register accessor macros
 * @{
 */


/* GPC_PGC - Register accessors */
#define GPC_PGC_CTRL_REG(base,index)             ((base)->GPC_PGC_A53COREnCTRL[index].CTRL)
#define GPC_PGC_PUPSCR_REG(base,index)           ((base)->GPC_PGC_A53COREnCTRL[index].PUPSCR)
#define GPC_PGC_PDNSCR_REG(base,index)           ((base)->GPC_PGC_A53COREnCTRL[index].PDNSCR)
#define GPC_PGC_SR_REG(base,index)               ((base)->GPC_PGC_A53COREnCTRL[index].SR)
#define GPC_PGC_A53SCU_CTRL_REG(base)            ((base)->A53SCU_CTRL)
#define GPC_PGC_A53SCU_PUPSCR_REG(base)          ((base)->A53SCU_PUPSCR)
#define GPC_PGC_A53SCU_PDNSCR_REG(base)          ((base)->A53SCU_PDNSCR)
#define GPC_PGC_A53SCU_SR_REG(base)              ((base)->A53SCU_SR)
#define GPC_PGC_A53SCU_AUXSW_REG(base)           ((base)->A53SCU_AUXSW)
#define GPC_PGC_NOC_MIX_CTRL_REG(base)           ((base)->NOC_MIX_CTRL)
#define GPC_PGC_NOC_MIX_PUPSCR_REG(base)         ((base)->NOC_MIX_PUPSCR)
#define GPC_PGC_NOC_MIX_PDNSCR_REG(base)         ((base)->NOC_MIX_PDNSCR)
#define GPC_PGC_NOC_MIX_SR_REG(base)             ((base)->NOC_MIX_SR)
#define GPC_PGC_PU_CTRL_REG(base,index)          ((base)->GPC_PGC_CTRL[index].PU_CTRL)
#define GPC_PGC_PU_PUPSCR_REG(base,index)        ((base)->GPC_PGC_CTRL[index].PU_PUPSCR)
#define GPC_PGC_PU_PDNSCR_REG(base,index)        ((base)->GPC_PGC_CTRL[index].PU_PDNSCR)
#define GPC_PGC_PU_SR_REG(base,index)            ((base)->GPC_PGC_CTRL[index].PU_SR)

/*!
 * @}
 */ /* end of group GPC_PGC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPC_PGC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Masks GPC_PGC Register Masks
 * @{
 */

/*! @name CTRL - GPC PGC Control Register for PGC CPUs */
/*! @{ */
#define GPC_PGC_CTRL_PCR_MASK                    (0x1U)
#define GPC_PGC_CTRL_PCR_SHIFT                   (0U)
#define GPC_PGC_CTRL_L2RSTDIS_MASK               (0x7EU)
#define GPC_PGC_CTRL_L2RSTDIS_SHIFT              (1U)
#define GPC_PGC_CTRL_L2RSTDIS(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_CTRL_DFTRAM_TCD1_MASK            (0x3F00U)
#define GPC_PGC_CTRL_DFTRAM_TCD1_SHIFT           (8U)
#define GPC_PGC_CTRL_DFTRAM_TCD1(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR_MASK        (0x3F0000U)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR_SHIFT       (16U)
#define GPC_PGC_CTRL_L2RETN_TCD1_TDR(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_MASK    (0x3F000000U)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT   (24U)
#define GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/* The count of GPC_PGC_CTRL */
#define GPC_PGC_CTRL_COUNT                       (4U)

/*! @name PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PUPSCR_SW_MASK                   (0x3FU)
#define GPC_PGC_PUPSCR_SW_SHIFT                  (0U)
#define GPC_PGC_PUPSCR_SW(x)                     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_SW_SHIFT)) & GPC_PGC_PUPSCR_SW_MASK)
#define GPC_PGC_PUPSCR_SW2ISO_MASK               (0x7FFF80U)
#define GPC_PGC_PUPSCR_SW2ISO_SHIFT              (7U)
#define GPC_PGC_PUPSCR_SW2ISO(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PUPSCR_SW2ISO_MASK)
/*! @} */

/* The count of GPC_PGC_PUPSCR */
#define GPC_PGC_PUPSCR_COUNT                     (4U)

/*! @name PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PDNSCR_ISO_MASK                  (0x3FU)
#define GPC_PGC_PDNSCR_ISO_SHIFT                 (0U)
#define GPC_PGC_PDNSCR_ISO(x)                    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_ISO_SHIFT)) & GPC_PGC_PDNSCR_ISO_MASK)
#define GPC_PGC_PDNSCR_ISO2SW_MASK               (0x3F00U)
#define GPC_PGC_PDNSCR_ISO2SW_SHIFT              (8U)
#define GPC_PGC_PDNSCR_ISO2SW(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PDNSCR_ISO2SW_MASK)
/*! @} */

/* The count of GPC_PGC_PDNSCR */
#define GPC_PGC_PDNSCR_COUNT                     (4U)

/*! @name SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_SR_PSR_MASK                      (0x1U)
#define GPC_PGC_SR_PSR_SHIFT                     (0U)
#define GPC_PGC_SR_L2RETN_FLAG_MASK              (0x2U)
#define GPC_PGC_SR_L2RETN_FLAG_SHIFT             (1U)
#define GPC_PGC_SR_ALLOFF_FLAG_MASK              (0x4U)
#define GPC_PGC_SR_ALLOFF_FLAG_SHIFT             (2U)
#define GPC_PGC_SR_PUP_CLK_DIV_SEL_MASK          (0x78U)
#define GPC_PGC_SR_PUP_CLK_DIV_SEL_SHIFT         (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_SR_PUP_CLK_DIV_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_MASK    (0x3FF00U)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_SHIFT   (8U)
#define GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/* The count of GPC_PGC_SR */
#define GPC_PGC_SR_COUNT                         (4U)

/*! @name A53SCU_CTRL - GPC PGC Control Register for PGC CPUs */
/*! @{ */
#define GPC_PGC_A53SCU_CTRL_PCR_MASK             (0x1U)
#define GPC_PGC_A53SCU_CTRL_PCR_SHIFT            (0U)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK        (0x7EU)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT       (1U)
#define GPC_PGC_A53SCU_CTRL_L2RSTDIS(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK     (0x3F00U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT    (8U)
#define GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_A53SCU_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_A53SCU_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_A53SCU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name A53SCU_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_PUPSCR_SW_MASK            (0x3FU)
#define GPC_PGC_A53SCU_PUPSCR_SW_SHIFT           (0U)
#define GPC_PGC_A53SCU_PUPSCR_SW(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW_MASK)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK        (0x7FFF80U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT       (7U)
#define GPC_PGC_A53SCU_PUPSCR_SW2ISO(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_A53SCU_PUPSCR_SW2ISO_MASK)
/*! @} */

/*! @name A53SCU_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_PDNSCR_ISO_MASK           (0x3FU)
#define GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT          (0U)
#define GPC_PGC_A53SCU_PDNSCR_ISO(x)             (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO_MASK)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK        (0x3F00U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT       (8U)
#define GPC_PGC_A53SCU_PDNSCR_ISO2SW(x)          (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_A53SCU_PDNSCR_ISO2SW_MASK)
/*! @} */

/*! @name A53SCU_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_A53SCU_SR_PSR_MASK               (0x1U)
#define GPC_PGC_A53SCU_SR_PSR_SHIFT              (0U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_MASK       (0x2U)
#define GPC_PGC_A53SCU_SR_L2RETN_FLAG_SHIFT      (1U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_MASK       (0x4U)
#define GPC_PGC_A53SCU_SR_ALLOFF_FLAG_SHIFT      (2U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK   (0x78U)
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT  (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL(x)     (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_A53SCU_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_A53SCU_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name A53SCU_AUXSW - GPC PGC Auxiliary Power Switch Control Register */
/*! @{ */
#define GPC_PGC_A53SCU_AUXSW_DFTRAM_TRC1_TMC_TMR_TCD2_MASK (0x3FFU)
#define GPC_PGC_A53SCU_AUXSW_DFTRAM_TRC1_TMC_TMR_TCD2_SHIFT (0U)
#define GPC_PGC_A53SCU_AUXSW_DFTRAM_TRC1_TMC_TMR_TCD2(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_DFTRAM_TRC1_TMC_TMR_TCD2_SHIFT)) & GPC_PGC_A53SCU_AUXSW_DFTRAM_TRC1_TMC_TMR_TCD2_MASK)
#define GPC_PGC_A53SCU_AUXSW_L2RETN_RTC1_TMC_TMR_MASK (0xFFC00U)
#define GPC_PGC_A53SCU_AUXSW_L2RETN_RTC1_TMC_TMR_SHIFT (10U)
#define GPC_PGC_A53SCU_AUXSW_L2RETN_RTC1_TMC_TMR(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_L2RETN_RTC1_TMC_TMR_SHIFT)) & GPC_PGC_A53SCU_AUXSW_L2RETN_RTC1_TMC_TMR_MASK)
#define GPC_PGC_A53SCU_AUXSW_MEMPWR_TRC1_TMC_MASK (0x3FF00000U)
#define GPC_PGC_A53SCU_AUXSW_MEMPWR_TRC1_TMC_SHIFT (20U)
#define GPC_PGC_A53SCU_AUXSW_MEMPWR_TRC1_TMC(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_A53SCU_AUXSW_MEMPWR_TRC1_TMC_SHIFT)) & GPC_PGC_A53SCU_AUXSW_MEMPWR_TRC1_TMC_MASK)
/*! @} */

/*! @name NOC_MIX_CTRL - GPC PGC Control Register for PGC MIX. */
/*! @{ */
#define GPC_PGC_NOC_MIX_CTRL_MIX_PCR_MASK        (0x1U)
#define GPC_PGC_NOC_MIX_CTRL_MIX_PCR_SHIFT       (0U)
#define GPC_PGC_NOC_MIX_CTRL_L2RSTDIS_MASK       (0x7EU)
#define GPC_PGC_NOC_MIX_CTRL_L2RSTDIS_SHIFT      (1U)
#define GPC_PGC_NOC_MIX_CTRL_L2RSTDIS(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_NOC_MIX_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_NOC_MIX_CTRL_DFTRAM_TCD1_MASK    (0x3F00U)
#define GPC_PGC_NOC_MIX_CTRL_DFTRAM_TCD1_SHIFT   (8U)
#define GPC_PGC_NOC_MIX_CTRL_DFTRAM_TCD1(x)      (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_NOC_MIX_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_NOC_MIX_CTRL_L2RETN_TCD1_TDR_MASK (0x3F0000U)
#define GPC_PGC_NOC_MIX_CTRL_L2RETN_TCD1_TDR_SHIFT (16U)
#define GPC_PGC_NOC_MIX_CTRL_L2RETN_TCD1_TDR(x)  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_NOC_MIX_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_NOC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_NOC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_NOC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_NOC_MIX_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/*! @name NOC_MIX_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_NOC_MIX_PUPSCR_PUP_WAIT_SCALL_OUT_MASK (0x40U)
#define GPC_PGC_NOC_MIX_PUPSCR_PUP_WAIT_SCALL_OUT_SHIFT (6U)
#define GPC_PGC_NOC_MIX_PUPSCR_SW2ISO_MASK       (0x7FFF80U)
#define GPC_PGC_NOC_MIX_PUPSCR_SW2ISO_SHIFT      (7U)
#define GPC_PGC_NOC_MIX_PUPSCR_SW2ISO(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_NOC_MIX_PUPSCR_SW2ISO_MASK)
/*! @} */

/*! @name NOC_MIX_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_NOC_MIX_PDNSCR_ISO_MASK          (0x3FU)
#define GPC_PGC_NOC_MIX_PDNSCR_ISO_SHIFT         (0U)
#define GPC_PGC_NOC_MIX_PDNSCR_ISO(x)            (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_PDNSCR_ISO_SHIFT)) & GPC_PGC_NOC_MIX_PDNSCR_ISO_MASK)
#define GPC_PGC_NOC_MIX_PDNSCR_ISO2SW_MASK       (0x3F00U)
#define GPC_PGC_NOC_MIX_PDNSCR_ISO2SW_SHIFT      (8U)
#define GPC_PGC_NOC_MIX_PDNSCR_ISO2SW(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_NOC_MIX_PDNSCR_ISO2SW_MASK)
/*! @} */

/*! @name NOC_MIX_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_NOC_MIX_SR_PSR_MASK              (0x1U)
#define GPC_PGC_NOC_MIX_SR_PSR_SHIFT             (0U)
#define GPC_PGC_NOC_MIX_SR_L2RETN_FLAG_MASK      (0x2U)
#define GPC_PGC_NOC_MIX_SR_L2RETN_FLAG_SHIFT     (1U)
#define GPC_PGC_NOC_MIX_SR_ALLOFF_FLAG_MASK      (0x4U)
#define GPC_PGC_NOC_MIX_SR_ALLOFF_FLAG_SHIFT     (2U)
#define GPC_PGC_NOC_MIX_SR_PUP_CLK_DIV_SEL_MASK  (0x78U)
#define GPC_PGC_NOC_MIX_SR_PUP_CLK_DIV_SEL_SHIFT (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_NOC_MIX_SR_PUP_CLK_DIV_SEL(x)    (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_NOC_MIX_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_NOC_MIX_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_NOC_MIX_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_NOC_MIX_SR_L2RSTDIS_DEASSERT_CNT(x) (((uint32_t)(((uint32_t)(x)) << GPC_PGC_NOC_MIX_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_NOC_MIX_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/*! @name PU_CTRL - GPC PGC Control Register for PGC PUs */
/*! @{ */
#define GPC_PGC_PU_CTRL_PCR_MASK                 (0x1U)
#define GPC_PGC_PU_CTRL_PCR_SHIFT                (0U)
#define GPC_PGC_PU_CTRL_L2RSTDIS_MASK            (0x7EU)
#define GPC_PGC_PU_CTRL_L2RSTDIS_SHIFT           (1U)
#define GPC_PGC_PU_CTRL_L2RSTDIS(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_CTRL_L2RSTDIS_SHIFT)) & GPC_PGC_PU_CTRL_L2RSTDIS_MASK)
#define GPC_PGC_PU_CTRL_DFTRAM_TCD1_MASK         (0x3F00U)
#define GPC_PGC_PU_CTRL_DFTRAM_TCD1_SHIFT        (8U)
#define GPC_PGC_PU_CTRL_DFTRAM_TCD1(x)           (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_CTRL_DFTRAM_TCD1_SHIFT)) & GPC_PGC_PU_CTRL_DFTRAM_TCD1_MASK)
#define GPC_PGC_PU_CTRL_L2RETN_TCD1_TDR_MASK     (0x3F0000U)
#define GPC_PGC_PU_CTRL_L2RETN_TCD1_TDR_SHIFT    (16U)
#define GPC_PGC_PU_CTRL_L2RETN_TCD1_TDR(x)       (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_CTRL_L2RETN_TCD1_TDR_SHIFT)) & GPC_PGC_PU_CTRL_L2RETN_TCD1_TDR_MASK)
#define GPC_PGC_PU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK (0x3F000000U)
#define GPC_PGC_PU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT (24U)
#define GPC_PGC_PU_CTRL_MEMPWR_TCD1_TDR_TRM(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_CTRL_MEMPWR_TCD1_TDR_TRM_SHIFT)) & GPC_PGC_PU_CTRL_MEMPWR_TCD1_TDR_TRM_MASK)
/*! @} */

/* The count of GPC_PGC_PU_CTRL */
#define GPC_PGC_PU_CTRL_COUNT                    (14U)

/*! @name PU_PUPSCR - GPC PGC Up Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU_PUPSCR_SW_MASK                (0x3FU)
#define GPC_PGC_PU_PUPSCR_SW_SHIFT               (0U)
#define GPC_PGC_PU_PUPSCR_SW(x)                  (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_PUPSCR_SW_SHIFT)) & GPC_PGC_PU_PUPSCR_SW_MASK)
#define GPC_PGC_PU_PUPSCR_SW2ISO_MASK            (0x7FFF80U)
#define GPC_PGC_PU_PUPSCR_SW2ISO_SHIFT           (7U)
#define GPC_PGC_PU_PUPSCR_SW2ISO(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_PUPSCR_SW2ISO_SHIFT)) & GPC_PGC_PU_PUPSCR_SW2ISO_MASK)
/*! @} */

/* The count of GPC_PGC_PU_PUPSCR */
#define GPC_PGC_PU_PUPSCR_COUNT                  (14U)

/*! @name PU_PDNSCR - GPC PGC Down Sequence Control Register */
/*! @{ */
#define GPC_PGC_PU_PDNSCR_ISO_MASK               (0x3FU)
#define GPC_PGC_PU_PDNSCR_ISO_SHIFT              (0U)
#define GPC_PGC_PU_PDNSCR_ISO(x)                 (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_PDNSCR_ISO_SHIFT)) & GPC_PGC_PU_PDNSCR_ISO_MASK)
#define GPC_PGC_PU_PDNSCR_ISO2SW_MASK            (0x3F00U)
#define GPC_PGC_PU_PDNSCR_ISO2SW_SHIFT           (8U)
#define GPC_PGC_PU_PDNSCR_ISO2SW(x)              (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_PDNSCR_ISO2SW_SHIFT)) & GPC_PGC_PU_PDNSCR_ISO2SW_MASK)
/*! @} */

/* The count of GPC_PGC_PU_PDNSCR */
#define GPC_PGC_PU_PDNSCR_COUNT                  (14U)

/*! @name PU_SR - GPC PGC Status Register */
/*! @{ */
#define GPC_PGC_PU_SR_PSR_MASK                   (0x1U)
#define GPC_PGC_PU_SR_PSR_SHIFT                  (0U)
#define GPC_PGC_PU_SR_L2RETN_FLAG_MASK           (0x2U)
#define GPC_PGC_PU_SR_L2RETN_FLAG_SHIFT          (1U)
#define GPC_PGC_PU_SR_ALLOFF_FLAG_MASK           (0x4U)
#define GPC_PGC_PU_SR_ALLOFF_FLAG_SHIFT          (2U)
#define GPC_PGC_PU_SR_PUP_CLK_DIV_SEL_MASK       (0x78U)
#define GPC_PGC_PU_SR_PUP_CLK_DIV_SEL_SHIFT      (3U)
/*! PUP_CLK_DIV_SEL
 *  0b0000..1
 *  0b0001..1/2 count_clk
 *  0b0010..1/4 count_clk
 *  0b0011..1/8 count_clk
 *  0b0100..1/16 count_clk
 *  0b0101..1/32 count_clk
 *  0b0110..1/64 count_clk
 *  0b0111..1/128 count_clk
 *  0b1000..1/256 count_clk
 *  0b1001..1/512 count_clk
 *  0b1010..1/1024 count_clk
 *  0b1011..1/2056 count_clk
 *  0b1100..1/4096 count_clk
 *  0b1101..1/8192 count_clk
 *  0b1110..1/16384 count_clk
 *  0b1111..1/32768 count_clk
 */
#define GPC_PGC_PU_SR_PUP_CLK_DIV_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_SR_PUP_CLK_DIV_SEL_SHIFT)) & GPC_PGC_PU_SR_PUP_CLK_DIV_SEL_MASK)
#define GPC_PGC_PU_SR_L2RSTDIS_DEASSERT_CNT_MASK (0x3FF00U)
#define GPC_PGC_PU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT (8U)
#define GPC_PGC_PU_SR_L2RSTDIS_DEASSERT_CNT(x)   (((uint32_t)(((uint32_t)(x)) << GPC_PGC_PU_SR_L2RSTDIS_DEASSERT_CNT_SHIFT)) & GPC_PGC_PU_SR_L2RSTDIS_DEASSERT_CNT_MASK)
/*! @} */

/* The count of GPC_PGC_PU_SR */
#define GPC_PGC_PU_SR_COUNT                      (14U)


/*!
 * @}
 */ /* end of group GPC_PGC_Register_Masks */


/* GPC_PGC - Peripheral instance base addresses */
/** Peripheral GPC_PGC base pointer */
#define GPC_PGC_BASE_PTR                         ((GPC_PGC_MemMapPtr)0x303A0000u)
/** Array initializer of GPC_PGC peripheral base pointers */
#define GPC_PGC_BASE_PTRS                        { GPC_PGC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPC_PGC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPC_PGC_Register_Accessor_Macros GPC_PGC - Register accessor macros
 * @{
 */


/* GPC_PGC - Register instance definitions */
/* GPC_PGC */
#define GPC_PGC_A53CORE0_CTRL                    GPC_PGC_CTRL_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_A53CORE0_PUPSCR                  GPC_PGC_PUPSCR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_A53CORE0_PDNSCR                  GPC_PGC_PDNSCR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_A53CORE0_SR                      GPC_PGC_SR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_A53CORE1_CTRL                    GPC_PGC_CTRL_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_A53CORE1_PUPSCR                  GPC_PGC_PUPSCR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_A53CORE1_PDNSCR                  GPC_PGC_PDNSCR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_A53CORE1_SR                      GPC_PGC_SR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_A53CORE2_CTRL                    GPC_PGC_CTRL_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_A53CORE2_PUPSCR                  GPC_PGC_PUPSCR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_A53CORE2_PDNSCR                  GPC_PGC_PDNSCR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_A53CORE2_SR                      GPC_PGC_SR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_A53CORE3_CTRL                    GPC_PGC_CTRL_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_A53CORE3_PUPSCR                  GPC_PGC_PUPSCR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_A53CORE3_PDNSCR                  GPC_PGC_PDNSCR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_A53CORE3_SR                      GPC_PGC_SR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_A53SCU_CTRL                      GPC_PGC_A53SCU_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_PUPSCR                    GPC_PGC_A53SCU_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_PDNSCR                    GPC_PGC_A53SCU_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_SR                        GPC_PGC_A53SCU_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_A53SCU_AUXSW                     GPC_PGC_A53SCU_AUXSW_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_NOC_MIX_CTRL                     GPC_PGC_NOC_MIX_CTRL_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_NOC_MIX_PUPSCR                   GPC_PGC_NOC_MIX_PUPSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_NOC_MIX_PDNSCR                   GPC_PGC_NOC_MIX_PDNSCR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_NOC_MIX_SR                       GPC_PGC_NOC_MIX_SR_REG(GPC_PGC_BASE_PTR)
#define GPC_PGC_PU0_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_PU0_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_PU0_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_PU0_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,0)
#define GPC_PGC_PU1_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_PU1_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_PU1_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_PU1_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,1)
#define GPC_PGC_PU2_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_PU2_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_PU2_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_PU2_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,2)
#define GPC_PGC_PU3_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_PU3_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_PU3_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_PU3_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,3)
#define GPC_PGC_PU4_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,4)
#define GPC_PGC_PU4_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,4)
#define GPC_PGC_PU4_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,4)
#define GPC_PGC_PU4_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,4)
#define GPC_PGC_PU5_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,5)
#define GPC_PGC_PU5_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,5)
#define GPC_PGC_PU5_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,5)
#define GPC_PGC_PU5_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,5)
#define GPC_PGC_PU6_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,6)
#define GPC_PGC_PU6_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,6)
#define GPC_PGC_PU6_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,6)
#define GPC_PGC_PU6_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,6)
#define GPC_PGC_PU7_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,7)
#define GPC_PGC_PU7_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,7)
#define GPC_PGC_PU7_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,7)
#define GPC_PGC_PU7_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,7)
#define GPC_PGC_PU8_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,8)
#define GPC_PGC_PU8_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,8)
#define GPC_PGC_PU8_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,8)
#define GPC_PGC_PU8_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,8)
#define GPC_PGC_PU9_CTRL                         GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,9)
#define GPC_PGC_PU9_PUPSCR                       GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,9)
#define GPC_PGC_PU9_PDNSCR                       GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,9)
#define GPC_PGC_PU9_SR                           GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,9)
#define GPC_PGC_PU10_CTRL                        GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,10)
#define GPC_PGC_PU10_PUPSCR                      GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,10)
#define GPC_PGC_PU10_PDNSCR                      GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,10)
#define GPC_PGC_PU10_SR                          GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,10)
#define GPC_PGC_PU11_CTRL                        GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,11)
#define GPC_PGC_PU11_PUPSCR                      GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,11)
#define GPC_PGC_PU11_PDNSCR                      GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,11)
#define GPC_PGC_PU11_SR                          GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,11)
#define GPC_PGC_PU12_CTRL                        GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,12)
#define GPC_PGC_PU12_PUPSCR                      GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,12)
#define GPC_PGC_PU12_PDNSCR                      GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,12)
#define GPC_PGC_PU12_SR                          GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,12)
#define GPC_PGC_PU13_CTRL                        GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,13)
#define GPC_PGC_PU13_PUPSCR                      GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,13)
#define GPC_PGC_PU13_PDNSCR                      GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,13)
#define GPC_PGC_PU13_SR                          GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,13)

/* GPC_PGC - Register array accessors */
#define GPC_PGC_CTRL(index)                      GPC_PGC_CTRL_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PUPSCR(index)                    GPC_PGC_PUPSCR_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PDNSCR(index)                    GPC_PGC_PDNSCR_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_SR(index)                        GPC_PGC_SR_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PU_CTRL(index)                   GPC_PGC_PU_CTRL_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PU_PUPSCR(index)                 GPC_PGC_PU_PUPSCR_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PU_PDNSCR(index)                 GPC_PGC_PU_PDNSCR_REG(GPC_PGC_BASE_PTR,index)
#define GPC_PGC_PU_SR(index)                     GPC_PGC_PU_SR_REG(GPC_PGC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPC_PGC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPC_PGC_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPIO
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Peripheral GPIO
 * @{
 */

/** GPIO - Peripheral register structure */
typedef struct GPIO_MemMap {
  uint32_t DR;                                     /**< GPIO data register, offset: 0x0 */
  uint32_t GDIR;                                   /**< GPIO direction register, offset: 0x4 */
  uint32_t PSR;                                    /**< GPIO pad status register, offset: 0x8 */
  uint32_t ICR1;                                   /**< GPIO interrupt configuration register1, offset: 0xC */
  uint32_t ICR2;                                   /**< GPIO interrupt configuration register2, offset: 0x10 */
  uint32_t IMR;                                    /**< GPIO interrupt mask register, offset: 0x14 */
  uint32_t ISR;                                    /**< GPIO interrupt status register, offset: 0x18 */
  uint32_t EDGE_SEL;                               /**< GPIO edge select register, offset: 0x1C */
} volatile *GPIO_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register accessors */
#define GPIO_DR_REG(base)                        ((base)->DR)
#define GPIO_GDIR_REG(base)                      ((base)->GDIR)
#define GPIO_PSR_REG(base)                       ((base)->PSR)
#define GPIO_ICR1_REG(base)                      ((base)->ICR1)
#define GPIO_ICR2_REG(base)                      ((base)->ICR2)
#define GPIO_IMR_REG(base)                       ((base)->IMR)
#define GPIO_ISR_REG(base)                       ((base)->ISR)
#define GPIO_EDGE_SEL_REG(base)                  ((base)->EDGE_SEL)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPIO Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Masks GPIO Register Masks
 * @{
 */

/*! @name DR - GPIO data register */
/*! @{ */
#define GPIO_DR_DR_MASK                          (0xFFFFFFFFU)
#define GPIO_DR_DR_SHIFT                         (0U)
#define GPIO_DR_DR(x)                            (((uint32_t)(((uint32_t)(x)) << GPIO_DR_DR_SHIFT)) & GPIO_DR_DR_MASK)
/*! @} */

/*! @name GDIR - GPIO direction register */
/*! @{ */
#define GPIO_GDIR_GDIR_MASK                      (0xFFFFFFFFU)
#define GPIO_GDIR_GDIR_SHIFT                     (0U)
/*! GDIR
 *  0b00000000000000000000000000000000..GPIO is configured as input.
 *  0b00000000000000000000000000000001..GPIO is configured as output.
 */
#define GPIO_GDIR_GDIR(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_GDIR_GDIR_SHIFT)) & GPIO_GDIR_GDIR_MASK)
/*! @} */

/*! @name PSR - GPIO pad status register */
/*! @{ */
#define GPIO_PSR_PSR_MASK                        (0xFFFFFFFFU)
#define GPIO_PSR_PSR_SHIFT                       (0U)
#define GPIO_PSR_PSR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_PSR_PSR_SHIFT)) & GPIO_PSR_PSR_MASK)
/*! @} */

/*! @name ICR1 - GPIO interrupt configuration register1 */
/*! @{ */
#define GPIO_ICR1_ICR0_MASK                      (0x3U)
#define GPIO_ICR1_ICR0_SHIFT                     (0U)
/*! ICR0
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR0(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR0_SHIFT)) & GPIO_ICR1_ICR0_MASK)
#define GPIO_ICR1_ICR1_MASK                      (0xCU)
#define GPIO_ICR1_ICR1_SHIFT                     (2U)
/*! ICR1
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR1(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR1_SHIFT)) & GPIO_ICR1_ICR1_MASK)
#define GPIO_ICR1_ICR2_MASK                      (0x30U)
#define GPIO_ICR1_ICR2_SHIFT                     (4U)
/*! ICR2
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR2(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR2_SHIFT)) & GPIO_ICR1_ICR2_MASK)
#define GPIO_ICR1_ICR3_MASK                      (0xC0U)
#define GPIO_ICR1_ICR3_SHIFT                     (6U)
/*! ICR3
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR3(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR3_SHIFT)) & GPIO_ICR1_ICR3_MASK)
#define GPIO_ICR1_ICR4_MASK                      (0x300U)
#define GPIO_ICR1_ICR4_SHIFT                     (8U)
/*! ICR4
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR4(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR4_SHIFT)) & GPIO_ICR1_ICR4_MASK)
#define GPIO_ICR1_ICR5_MASK                      (0xC00U)
#define GPIO_ICR1_ICR5_SHIFT                     (10U)
/*! ICR5
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR5(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR5_SHIFT)) & GPIO_ICR1_ICR5_MASK)
#define GPIO_ICR1_ICR6_MASK                      (0x3000U)
#define GPIO_ICR1_ICR6_SHIFT                     (12U)
/*! ICR6
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR6(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR6_SHIFT)) & GPIO_ICR1_ICR6_MASK)
#define GPIO_ICR1_ICR7_MASK                      (0xC000U)
#define GPIO_ICR1_ICR7_SHIFT                     (14U)
/*! ICR7
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR7(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR7_SHIFT)) & GPIO_ICR1_ICR7_MASK)
#define GPIO_ICR1_ICR8_MASK                      (0x30000U)
#define GPIO_ICR1_ICR8_SHIFT                     (16U)
/*! ICR8
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR8(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR8_SHIFT)) & GPIO_ICR1_ICR8_MASK)
#define GPIO_ICR1_ICR9_MASK                      (0xC0000U)
#define GPIO_ICR1_ICR9_SHIFT                     (18U)
/*! ICR9
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR9(x)                        (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR9_SHIFT)) & GPIO_ICR1_ICR9_MASK)
#define GPIO_ICR1_ICR10_MASK                     (0x300000U)
#define GPIO_ICR1_ICR10_SHIFT                    (20U)
/*! ICR10
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR10(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR10_SHIFT)) & GPIO_ICR1_ICR10_MASK)
#define GPIO_ICR1_ICR11_MASK                     (0xC00000U)
#define GPIO_ICR1_ICR11_SHIFT                    (22U)
/*! ICR11
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR11(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR11_SHIFT)) & GPIO_ICR1_ICR11_MASK)
#define GPIO_ICR1_ICR12_MASK                     (0x3000000U)
#define GPIO_ICR1_ICR12_SHIFT                    (24U)
/*! ICR12
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR12(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR12_SHIFT)) & GPIO_ICR1_ICR12_MASK)
#define GPIO_ICR1_ICR13_MASK                     (0xC000000U)
#define GPIO_ICR1_ICR13_SHIFT                    (26U)
/*! ICR13
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR13(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR13_SHIFT)) & GPIO_ICR1_ICR13_MASK)
#define GPIO_ICR1_ICR14_MASK                     (0x30000000U)
#define GPIO_ICR1_ICR14_SHIFT                    (28U)
/*! ICR14
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR14(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR14_SHIFT)) & GPIO_ICR1_ICR14_MASK)
#define GPIO_ICR1_ICR15_MASK                     (0xC0000000U)
#define GPIO_ICR1_ICR15_SHIFT                    (30U)
/*! ICR15
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR1_ICR15(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR1_ICR15_SHIFT)) & GPIO_ICR1_ICR15_MASK)
/*! @} */

/*! @name ICR2 - GPIO interrupt configuration register2 */
/*! @{ */
#define GPIO_ICR2_ICR16_MASK                     (0x3U)
#define GPIO_ICR2_ICR16_SHIFT                    (0U)
/*! ICR16
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR16(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR16_SHIFT)) & GPIO_ICR2_ICR16_MASK)
#define GPIO_ICR2_ICR17_MASK                     (0xCU)
#define GPIO_ICR2_ICR17_SHIFT                    (2U)
/*! ICR17
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR17(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR17_SHIFT)) & GPIO_ICR2_ICR17_MASK)
#define GPIO_ICR2_ICR18_MASK                     (0x30U)
#define GPIO_ICR2_ICR18_SHIFT                    (4U)
/*! ICR18
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR18(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR18_SHIFT)) & GPIO_ICR2_ICR18_MASK)
#define GPIO_ICR2_ICR19_MASK                     (0xC0U)
#define GPIO_ICR2_ICR19_SHIFT                    (6U)
/*! ICR19
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR19(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR19_SHIFT)) & GPIO_ICR2_ICR19_MASK)
#define GPIO_ICR2_ICR20_MASK                     (0x300U)
#define GPIO_ICR2_ICR20_SHIFT                    (8U)
/*! ICR20
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR20(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR20_SHIFT)) & GPIO_ICR2_ICR20_MASK)
#define GPIO_ICR2_ICR21_MASK                     (0xC00U)
#define GPIO_ICR2_ICR21_SHIFT                    (10U)
/*! ICR21
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR21(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR21_SHIFT)) & GPIO_ICR2_ICR21_MASK)
#define GPIO_ICR2_ICR22_MASK                     (0x3000U)
#define GPIO_ICR2_ICR22_SHIFT                    (12U)
/*! ICR22
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR22(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR22_SHIFT)) & GPIO_ICR2_ICR22_MASK)
#define GPIO_ICR2_ICR23_MASK                     (0xC000U)
#define GPIO_ICR2_ICR23_SHIFT                    (14U)
/*! ICR23
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR23(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR23_SHIFT)) & GPIO_ICR2_ICR23_MASK)
#define GPIO_ICR2_ICR24_MASK                     (0x30000U)
#define GPIO_ICR2_ICR24_SHIFT                    (16U)
/*! ICR24
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR24(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR24_SHIFT)) & GPIO_ICR2_ICR24_MASK)
#define GPIO_ICR2_ICR25_MASK                     (0xC0000U)
#define GPIO_ICR2_ICR25_SHIFT                    (18U)
/*! ICR25
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR25(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR25_SHIFT)) & GPIO_ICR2_ICR25_MASK)
#define GPIO_ICR2_ICR26_MASK                     (0x300000U)
#define GPIO_ICR2_ICR26_SHIFT                    (20U)
/*! ICR26
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR26(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR26_SHIFT)) & GPIO_ICR2_ICR26_MASK)
#define GPIO_ICR2_ICR27_MASK                     (0xC00000U)
#define GPIO_ICR2_ICR27_SHIFT                    (22U)
/*! ICR27
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR27(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR27_SHIFT)) & GPIO_ICR2_ICR27_MASK)
#define GPIO_ICR2_ICR28_MASK                     (0x3000000U)
#define GPIO_ICR2_ICR28_SHIFT                    (24U)
/*! ICR28
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR28(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR28_SHIFT)) & GPIO_ICR2_ICR28_MASK)
#define GPIO_ICR2_ICR29_MASK                     (0xC000000U)
#define GPIO_ICR2_ICR29_SHIFT                    (26U)
/*! ICR29
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR29(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR29_SHIFT)) & GPIO_ICR2_ICR29_MASK)
#define GPIO_ICR2_ICR30_MASK                     (0x30000000U)
#define GPIO_ICR2_ICR30_SHIFT                    (28U)
/*! ICR30
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR30(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR30_SHIFT)) & GPIO_ICR2_ICR30_MASK)
#define GPIO_ICR2_ICR31_MASK                     (0xC0000000U)
#define GPIO_ICR2_ICR31_SHIFT                    (30U)
/*! ICR31
 *  0b00..Interrupt n is low-level sensitive.
 *  0b01..Interrupt n is high-level sensitive.
 *  0b10..Interrupt n is rising-edge sensitive.
 *  0b11..Interrupt n is falling-edge sensitive.
 */
#define GPIO_ICR2_ICR31(x)                       (((uint32_t)(((uint32_t)(x)) << GPIO_ICR2_ICR31_SHIFT)) & GPIO_ICR2_ICR31_MASK)
/*! @} */

/*! @name IMR - GPIO interrupt mask register */
/*! @{ */
#define GPIO_IMR_IMR_MASK                        (0xFFFFFFFFU)
#define GPIO_IMR_IMR_SHIFT                       (0U)
/*! IMR
 *  0b00000000000000000000000000000000..Interrupt n is disabled.
 *  0b00000000000000000000000000000001..Interrupt n is enabled.
 */
#define GPIO_IMR_IMR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_IMR_IMR_SHIFT)) & GPIO_IMR_IMR_MASK)
/*! @} */

/*! @name ISR - GPIO interrupt status register */
/*! @{ */
#define GPIO_ISR_ISR_MASK                        (0xFFFFFFFFU)
#define GPIO_ISR_ISR_SHIFT                       (0U)
#define GPIO_ISR_ISR(x)                          (((uint32_t)(((uint32_t)(x)) << GPIO_ISR_ISR_SHIFT)) & GPIO_ISR_ISR_MASK)
/*! @} */

/*! @name EDGE_SEL - GPIO edge select register */
/*! @{ */
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK         (0xFFFFFFFFU)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT        (0U)
#define GPIO_EDGE_SEL_GPIO_EDGE_SEL(x)           (((uint32_t)(((uint32_t)(x)) << GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT)) & GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPIO_Register_Masks */


/* GPIO - Peripheral instance base addresses */
/** Peripheral GPIO1 base pointer */
#define GPIO1_BASE_PTR                           ((GPIO_MemMapPtr)0x30200000u)
/** Peripheral GPIO2 base pointer */
#define GPIO2_BASE_PTR                           ((GPIO_MemMapPtr)0x30210000u)
/** Peripheral GPIO3 base pointer */
#define GPIO3_BASE_PTR                           ((GPIO_MemMapPtr)0x30220000u)
/** Peripheral GPIO4 base pointer */
#define GPIO4_BASE_PTR                           ((GPIO_MemMapPtr)0x30230000u)
/** Peripheral GPIO5 base pointer */
#define GPIO5_BASE_PTR                           ((GPIO_MemMapPtr)0x30240000u)
/** Array initializer of GPIO peripheral base pointers */
#define GPIO_BASE_PTRS                           { GPIO1_BASE_PTR, GPIO2_BASE_PTR, GPIO3_BASE_PTR, GPIO4_BASE_PTR, GPIO5_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPIO - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPIO_Register_Accessor_Macros GPIO - Register accessor macros
 * @{
 */


/* GPIO - Register instance definitions */
/* GPIO1 */
#define GPIO1_DR                                 GPIO_DR_REG(GPIO1_BASE_PTR)
#define GPIO1_GDIR                               GPIO_GDIR_REG(GPIO1_BASE_PTR)
#define GPIO1_PSR                                GPIO_PSR_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR1                               GPIO_ICR1_REG(GPIO1_BASE_PTR)
#define GPIO1_ICR2                               GPIO_ICR2_REG(GPIO1_BASE_PTR)
#define GPIO1_IMR                                GPIO_IMR_REG(GPIO1_BASE_PTR)
#define GPIO1_ISR                                GPIO_ISR_REG(GPIO1_BASE_PTR)
#define GPIO1_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO1_BASE_PTR)
/* GPIO2 */
#define GPIO2_DR                                 GPIO_DR_REG(GPIO2_BASE_PTR)
#define GPIO2_GDIR                               GPIO_GDIR_REG(GPIO2_BASE_PTR)
#define GPIO2_PSR                                GPIO_PSR_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR1                               GPIO_ICR1_REG(GPIO2_BASE_PTR)
#define GPIO2_ICR2                               GPIO_ICR2_REG(GPIO2_BASE_PTR)
#define GPIO2_IMR                                GPIO_IMR_REG(GPIO2_BASE_PTR)
#define GPIO2_ISR                                GPIO_ISR_REG(GPIO2_BASE_PTR)
#define GPIO2_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO2_BASE_PTR)
/* GPIO3 */
#define GPIO3_DR                                 GPIO_DR_REG(GPIO3_BASE_PTR)
#define GPIO3_GDIR                               GPIO_GDIR_REG(GPIO3_BASE_PTR)
#define GPIO3_PSR                                GPIO_PSR_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR1                               GPIO_ICR1_REG(GPIO3_BASE_PTR)
#define GPIO3_ICR2                               GPIO_ICR2_REG(GPIO3_BASE_PTR)
#define GPIO3_IMR                                GPIO_IMR_REG(GPIO3_BASE_PTR)
#define GPIO3_ISR                                GPIO_ISR_REG(GPIO3_BASE_PTR)
#define GPIO3_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO3_BASE_PTR)
/* GPIO4 */
#define GPIO4_DR                                 GPIO_DR_REG(GPIO4_BASE_PTR)
#define GPIO4_GDIR                               GPIO_GDIR_REG(GPIO4_BASE_PTR)
#define GPIO4_PSR                                GPIO_PSR_REG(GPIO4_BASE_PTR)
#define GPIO4_ICR1                               GPIO_ICR1_REG(GPIO4_BASE_PTR)
#define GPIO4_ICR2                               GPIO_ICR2_REG(GPIO4_BASE_PTR)
#define GPIO4_IMR                                GPIO_IMR_REG(GPIO4_BASE_PTR)
#define GPIO4_ISR                                GPIO_ISR_REG(GPIO4_BASE_PTR)
#define GPIO4_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO4_BASE_PTR)
/* GPIO5 */
#define GPIO5_DR                                 GPIO_DR_REG(GPIO5_BASE_PTR)
#define GPIO5_GDIR                               GPIO_GDIR_REG(GPIO5_BASE_PTR)
#define GPIO5_PSR                                GPIO_PSR_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR1                               GPIO_ICR1_REG(GPIO5_BASE_PTR)
#define GPIO5_ICR2                               GPIO_ICR2_REG(GPIO5_BASE_PTR)
#define GPIO5_IMR                                GPIO_IMR_REG(GPIO5_BASE_PTR)
#define GPIO5_ISR                                GPIO_ISR_REG(GPIO5_BASE_PTR)
#define GPIO5_EDGE_SEL                           GPIO_EDGE_SEL_REG(GPIO5_BASE_PTR)

/*!
 * @}
 */ /* end of group GPIO_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPIO_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPMI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Peripheral GPMI
 * @{
 */

/** GPMI - Peripheral register structure */
typedef struct GPMI_MemMap {
  uint32_t CTRL0;                                  /**< GPMI Control Register 0 Description, offset: 0x0 */
  uint32_t CTRL0_SET;                              /**< GPMI Control Register 0 Description, offset: 0x4 */
  uint32_t CTRL0_CLR;                              /**< GPMI Control Register 0 Description, offset: 0x8 */
  uint32_t CTRL0_TOG;                              /**< GPMI Control Register 0 Description, offset: 0xC */
  uint32_t COMPARE;                                /**< GPMI Compare Register Description, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t ECCCTRL;                                /**< GPMI Integrated ECC Control Register Description, offset: 0x20 */
  uint32_t ECCCTRL_SET;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x24 */
  uint32_t ECCCTRL_CLR;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x28 */
  uint32_t ECCCTRL_TOG;                            /**< GPMI Integrated ECC Control Register Description, offset: 0x2C */
  uint32_t ECCCOUNT;                               /**< GPMI Integrated ECC Transfer Count Register Description, offset: 0x30 */
  uint8_t RESERVED_1[12];
  uint32_t PAYLOAD;                                /**< GPMI Payload Address Register Description, offset: 0x40 */
  uint8_t RESERVED_2[12];
  uint32_t AUXILIARY;                              /**< GPMI Auxiliary Address Register Description, offset: 0x50 */
  uint8_t RESERVED_3[12];
  uint32_t CTRL1;                                  /**< GPMI Control Register 1 Description, offset: 0x60 */
  uint32_t CTRL1_SET;                              /**< GPMI Control Register 1 Description, offset: 0x64 */
  uint32_t CTRL1_CLR;                              /**< GPMI Control Register 1 Description, offset: 0x68 */
  uint32_t CTRL1_TOG;                              /**< GPMI Control Register 1 Description, offset: 0x6C */
  uint32_t TIMING0;                                /**< GPMI Timing Register 0 Description, offset: 0x70 */
  uint8_t RESERVED_4[12];
  uint32_t TIMING1;                                /**< GPMI Timing Register 1 Description, offset: 0x80 */
  uint8_t RESERVED_5[12];
  uint32_t TIMING2;                                /**< GPMI Timing Register 2 Description, offset: 0x90 */
  uint8_t RESERVED_6[12];
  uint32_t DATA;                                   /**< GPMI DMA Data Transfer Register Description, offset: 0xA0 */
  uint8_t RESERVED_7[12];
  uint32_t STAT;                                   /**< GPMI Status Register Description, offset: 0xB0 */
  uint8_t RESERVED_8[12];
  uint32_t DEBUG;                                  /**< GPMI Debug Information Register Description, offset: 0xC0 */
  uint8_t RESERVED_9[12];
  uint32_t VERSION;                                /**< GPMI Version Register Description, offset: 0xD0 */
  uint8_t RESERVED_10[12];
  uint32_t DEBUG2;                                 /**< GPMI Debug2 Information Register Description, offset: 0xE0 */
  uint8_t RESERVED_11[12];
  uint32_t DEBUG3;                                 /**< GPMI Debug3 Information Register Description, offset: 0xF0 */
  uint8_t RESERVED_12[12];
  uint32_t READ_DDR_DLL_CTRL;                      /**< GPMI Double Rate Read DLL Control Register Description, offset: 0x100 */
  uint8_t RESERVED_13[12];
  uint32_t WRITE_DDR_DLL_CTRL;                     /**< GPMI Double Rate Write DLL Control Register Description, offset: 0x110 */
  uint8_t RESERVED_14[12];
  uint32_t READ_DDR_DLL_STS;                       /**< GPMI Double Rate Read DLL Status Register Description, offset: 0x120 */
  uint8_t RESERVED_15[12];
  uint32_t WRITE_DDR_DLL_STS;                      /**< GPMI Double Rate Write DLL Status Register Description, offset: 0x130 */
} volatile *GPMI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPMI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Accessor_Macros GPMI - Register accessor macros
 * @{
 */


/* GPMI - Register accessors */
#define GPMI_CTRL0_REG(base)                     ((base)->CTRL0)
#define GPMI_CTRL0_SET_REG(base)                 ((base)->CTRL0_SET)
#define GPMI_CTRL0_CLR_REG(base)                 ((base)->CTRL0_CLR)
#define GPMI_CTRL0_TOG_REG(base)                 ((base)->CTRL0_TOG)
#define GPMI_COMPARE_REG(base)                   ((base)->COMPARE)
#define GPMI_ECCCTRL_REG(base)                   ((base)->ECCCTRL)
#define GPMI_ECCCTRL_SET_REG(base)               ((base)->ECCCTRL_SET)
#define GPMI_ECCCTRL_CLR_REG(base)               ((base)->ECCCTRL_CLR)
#define GPMI_ECCCTRL_TOG_REG(base)               ((base)->ECCCTRL_TOG)
#define GPMI_ECCCOUNT_REG(base)                  ((base)->ECCCOUNT)
#define GPMI_PAYLOAD_REG(base)                   ((base)->PAYLOAD)
#define GPMI_AUXILIARY_REG(base)                 ((base)->AUXILIARY)
#define GPMI_CTRL1_REG(base)                     ((base)->CTRL1)
#define GPMI_CTRL1_SET_REG(base)                 ((base)->CTRL1_SET)
#define GPMI_CTRL1_CLR_REG(base)                 ((base)->CTRL1_CLR)
#define GPMI_CTRL1_TOG_REG(base)                 ((base)->CTRL1_TOG)
#define GPMI_TIMING0_REG(base)                   ((base)->TIMING0)
#define GPMI_TIMING1_REG(base)                   ((base)->TIMING1)
#define GPMI_TIMING2_REG(base)                   ((base)->TIMING2)
#define GPMI_DATA_REG(base)                      ((base)->DATA)
#define GPMI_STAT_REG(base)                      ((base)->STAT)
#define GPMI_DEBUG_REG(base)                     ((base)->DEBUG)
#define GPMI_VERSION_REG(base)                   ((base)->VERSION)
#define GPMI_DEBUG2_REG(base)                    ((base)->DEBUG2)
#define GPMI_DEBUG3_REG(base)                    ((base)->DEBUG3)
#define GPMI_READ_DDR_DLL_CTRL_REG(base)         ((base)->READ_DDR_DLL_CTRL)
#define GPMI_WRITE_DDR_DLL_CTRL_REG(base)        ((base)->WRITE_DDR_DLL_CTRL)
#define GPMI_READ_DDR_DLL_STS_REG(base)          ((base)->READ_DDR_DLL_STS)
#define GPMI_WRITE_DDR_DLL_STS_REG(base)         ((base)->WRITE_DDR_DLL_STS)

/*!
 * @}
 */ /* end of group GPMI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPMI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Masks GPMI Register Masks
 * @{
 */

/*! @name CTRL0 - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_XFER_COUNT_MASK               (0xFFFFU)
#define GPMI_CTRL0_XFER_COUNT_SHIFT              (0U)
#define GPMI_CTRL0_XFER_COUNT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_XFER_COUNT_SHIFT)) & GPMI_CTRL0_XFER_COUNT_MASK)
#define GPMI_CTRL0_ADDRESS_INCREMENT_MASK        (0x10000U)
#define GPMI_CTRL0_ADDRESS_INCREMENT_SHIFT       (16U)
#define GPMI_CTRL0_ADDRESS_MASK                  (0xE0000U)
#define GPMI_CTRL0_ADDRESS_SHIFT                 (17U)
#define GPMI_CTRL0_ADDRESS(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_ADDRESS_SHIFT)) & GPMI_CTRL0_ADDRESS_MASK)
#define GPMI_CTRL0_CS_MASK                       (0x700000U)
#define GPMI_CTRL0_CS_SHIFT                      (20U)
#define GPMI_CTRL0_CS(x)                         (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CS_SHIFT)) & GPMI_CTRL0_CS_MASK)
#define GPMI_CTRL0_WORD_LENGTH_MASK              (0x800000U)
#define GPMI_CTRL0_WORD_LENGTH_SHIFT             (23U)
#define GPMI_CTRL0_COMMAND_MODE_MASK             (0x3000000U)
#define GPMI_CTRL0_COMMAND_MODE_SHIFT            (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_COMMAND_MODE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_COMMAND_MODE_MASK)
#define GPMI_CTRL0_UDMA_MASK                     (0x4000000U)
#define GPMI_CTRL0_UDMA_SHIFT                    (26U)
#define GPMI_CTRL0_LOCK_CS_MASK                  (0x8000000U)
#define GPMI_CTRL0_LOCK_CS_SHIFT                 (27U)
#define GPMI_CTRL0_DEV_IRQ_EN_MASK               (0x10000000U)
#define GPMI_CTRL0_DEV_IRQ_EN_SHIFT              (28U)
#define GPMI_CTRL0_RUN_MASK                      (0x20000000U)
#define GPMI_CTRL0_RUN_SHIFT                     (29U)
#define GPMI_CTRL0_CLKGATE_MASK                  (0x40000000U)
#define GPMI_CTRL0_CLKGATE_SHIFT                 (30U)
#define GPMI_CTRL0_SFTRST_MASK                   (0x80000000U)
#define GPMI_CTRL0_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL0_SET - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_SET_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_SET_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_SET_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_XFER_COUNT_SHIFT)) & GPMI_CTRL0_SET_XFER_COUNT_MASK)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_SET_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_SET_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_SET_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_SET_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_ADDRESS_SHIFT)) & GPMI_CTRL0_SET_ADDRESS_MASK)
#define GPMI_CTRL0_SET_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_SET_CS_SHIFT                  (20U)
#define GPMI_CTRL0_SET_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_CS_SHIFT)) & GPMI_CTRL0_SET_CS_MASK)
#define GPMI_CTRL0_SET_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_SET_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_SET_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_SET_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_SET_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_SET_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_SET_COMMAND_MODE_MASK)
#define GPMI_CTRL0_SET_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_SET_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_SET_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_SET_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_SET_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_SET_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_SET_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_SET_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_SET_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_SET_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_CLR - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_CLR_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_CLR_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_CLR_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_XFER_COUNT_SHIFT)) & GPMI_CTRL0_CLR_XFER_COUNT_MASK)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_CLR_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_CLR_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_CLR_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_CLR_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_ADDRESS_SHIFT)) & GPMI_CTRL0_CLR_ADDRESS_MASK)
#define GPMI_CTRL0_CLR_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_CLR_CS_SHIFT                  (20U)
#define GPMI_CTRL0_CLR_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_CS_SHIFT)) & GPMI_CTRL0_CLR_CS_MASK)
#define GPMI_CTRL0_CLR_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_CLR_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_CLR_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_CLR_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_CLR_COMMAND_MODE_MASK)
#define GPMI_CTRL0_CLR_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_CLR_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_CLR_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_CLR_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_CLR_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_CLR_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_CLR_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_CLR_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_CLR_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_CLR_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL0_TOG - GPMI Control Register 0 Description */
/*! @{ */
#define GPMI_CTRL0_TOG_XFER_COUNT_MASK           (0xFFFFU)
#define GPMI_CTRL0_TOG_XFER_COUNT_SHIFT          (0U)
#define GPMI_CTRL0_TOG_XFER_COUNT(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_XFER_COUNT_SHIFT)) & GPMI_CTRL0_TOG_XFER_COUNT_MASK)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_MASK    (0x10000U)
#define GPMI_CTRL0_TOG_ADDRESS_INCREMENT_SHIFT   (16U)
#define GPMI_CTRL0_TOG_ADDRESS_MASK              (0xE0000U)
#define GPMI_CTRL0_TOG_ADDRESS_SHIFT             (17U)
#define GPMI_CTRL0_TOG_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_ADDRESS_SHIFT)) & GPMI_CTRL0_TOG_ADDRESS_MASK)
#define GPMI_CTRL0_TOG_CS_MASK                   (0x700000U)
#define GPMI_CTRL0_TOG_CS_SHIFT                  (20U)
#define GPMI_CTRL0_TOG_CS(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_CS_SHIFT)) & GPMI_CTRL0_TOG_CS_MASK)
#define GPMI_CTRL0_TOG_WORD_LENGTH_MASK          (0x800000U)
#define GPMI_CTRL0_TOG_WORD_LENGTH_SHIFT         (23U)
#define GPMI_CTRL0_TOG_COMMAND_MODE_MASK         (0x3000000U)
#define GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT        (24U)
/*! COMMAND_MODE
 *  0b00..Write mode.
 *  0b01..Read Mode.
 *  0b10..Read and Compare Mode (setting sense flop).
 *  0b11..Wait for Ready.
 */
#define GPMI_CTRL0_TOG_COMMAND_MODE(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT)) & GPMI_CTRL0_TOG_COMMAND_MODE_MASK)
#define GPMI_CTRL0_TOG_UDMA_MASK                 (0x4000000U)
#define GPMI_CTRL0_TOG_UDMA_SHIFT                (26U)
#define GPMI_CTRL0_TOG_LOCK_CS_MASK              (0x8000000U)
#define GPMI_CTRL0_TOG_LOCK_CS_SHIFT             (27U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_MASK           (0x10000000U)
#define GPMI_CTRL0_TOG_DEV_IRQ_EN_SHIFT          (28U)
#define GPMI_CTRL0_TOG_RUN_MASK                  (0x20000000U)
#define GPMI_CTRL0_TOG_RUN_SHIFT                 (29U)
#define GPMI_CTRL0_TOG_CLKGATE_MASK              (0x40000000U)
#define GPMI_CTRL0_TOG_CLKGATE_SHIFT             (30U)
#define GPMI_CTRL0_TOG_SFTRST_MASK               (0x80000000U)
#define GPMI_CTRL0_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name COMPARE - GPMI Compare Register Description */
/*! @{ */
#define GPMI_COMPARE_REFERENCE_MASK              (0xFFFFU)
#define GPMI_COMPARE_REFERENCE_SHIFT             (0U)
#define GPMI_COMPARE_REFERENCE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_REFERENCE_SHIFT)) & GPMI_COMPARE_REFERENCE_MASK)
#define GPMI_COMPARE_MASK_MASK                   (0xFFFF0000U)
#define GPMI_COMPARE_MASK_SHIFT                  (16U)
#define GPMI_COMPARE_MASK(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_COMPARE_MASK_SHIFT)) & GPMI_COMPARE_MASK_MASK)
/*! @} */

/*! @name ECCCTRL - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_BUFFER_MASK_MASK            (0x1FFU)
#define GPMI_ECCCTRL_BUFFER_MASK_SHIFT           (0U)
#define GPMI_ECCCTRL_BUFFER_MASK(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK        (0x600U)
#define GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT       (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_RANDOMIZER_TYPE(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_MASK      (0x800U)
#define GPMI_ECCCTRL_RANDOMIZER_ENABLE_SHIFT     (11U)
#define GPMI_ECCCTRL_ENABLE_ECC_MASK             (0x1000U)
#define GPMI_ECCCTRL_ENABLE_ECC_SHIFT            (12U)
#define GPMI_ECCCTRL_ECC_CMD_MASK                (0x6000U)
#define GPMI_ECCCTRL_ECC_CMD_SHIFT               (13U)
#define GPMI_ECCCTRL_ECC_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_ECC_CMD_MASK)
#define GPMI_ECCCTRL_RSVD2_MASK                  (0x8000U)
#define GPMI_ECCCTRL_RSVD2_SHIFT                 (15U)
#define GPMI_ECCCTRL_HANDLE_MASK                 (0xFFFF0000U)
#define GPMI_ECCCTRL_HANDLE_SHIFT                (16U)
#define GPMI_ECCCTRL_HANDLE(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_HANDLE_SHIFT)) & GPMI_ECCCTRL_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_SET - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_SET_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_SET_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_SET_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_SET_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_SET_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_SET_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_SET_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_SET_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_SET_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_SET_ECC_CMD_MASK)
#define GPMI_ECCCTRL_SET_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_SET_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_SET_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_SET_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_SET_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_SET_HANDLE_SHIFT)) & GPMI_ECCCTRL_SET_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_CLR - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_CLR_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_CLR_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_CLR_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_CLR_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_CLR_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_CLR_ECC_CMD_MASK)
#define GPMI_ECCCTRL_CLR_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_CLR_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_CLR_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_CLR_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_CLR_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_CLR_HANDLE_SHIFT)) & GPMI_ECCCTRL_CLR_HANDLE_MASK)
/*! @} */

/*! @name ECCCTRL_TOG - GPMI Integrated ECC Control Register Description */
/*! @{ */
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK        (0x1FFU)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT       (0U)
#define GPMI_ECCCTRL_TOG_BUFFER_MASK(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT)) & GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK    (0x600U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT   (9U)
/*! RANDOMIZER_TYPE
 *  0b00..Type 0
 *  0b01..Type 1
 */
#define GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_SHIFT)) & GPMI_ECCCTRL_TOG_RANDOMIZER_TYPE_MASK)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_MASK  (0x800U)
#define GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_SHIFT (11U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_MASK         (0x1000U)
#define GPMI_ECCCTRL_TOG_ENABLE_ECC_SHIFT        (12U)
#define GPMI_ECCCTRL_TOG_ECC_CMD_MASK            (0x6000U)
#define GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT           (13U)
#define GPMI_ECCCTRL_TOG_ECC_CMD(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT)) & GPMI_ECCCTRL_TOG_ECC_CMD_MASK)
#define GPMI_ECCCTRL_TOG_RSVD2_MASK              (0x8000U)
#define GPMI_ECCCTRL_TOG_RSVD2_SHIFT             (15U)
#define GPMI_ECCCTRL_TOG_HANDLE_MASK             (0xFFFF0000U)
#define GPMI_ECCCTRL_TOG_HANDLE_SHIFT            (16U)
#define GPMI_ECCCTRL_TOG_HANDLE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCTRL_TOG_HANDLE_SHIFT)) & GPMI_ECCCTRL_TOG_HANDLE_MASK)
/*! @} */

/*! @name ECCCOUNT - GPMI Integrated ECC Transfer Count Register Description */
/*! @{ */
#define GPMI_ECCCOUNT_COUNT_MASK                 (0xFFFFU)
#define GPMI_ECCCOUNT_COUNT_SHIFT                (0U)
#define GPMI_ECCCOUNT_COUNT(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_COUNT_SHIFT)) & GPMI_ECCCOUNT_COUNT_MASK)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK       (0xFF0000U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT      (16U)
#define GPMI_ECCCOUNT_RANDOMIZER_PAGE(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT)) & GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK)
/*! @} */

/*! @name PAYLOAD - GPMI Payload Address Register Description */
/*! @{ */
#define GPMI_PAYLOAD_RSVD0_MASK                  (0x3U)
#define GPMI_PAYLOAD_RSVD0_SHIFT                 (0U)
#define GPMI_PAYLOAD_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_RSVD0_SHIFT)) & GPMI_PAYLOAD_RSVD0_MASK)
#define GPMI_PAYLOAD_ADDRESS_MASK                (0xFFFFFFFCU)
#define GPMI_PAYLOAD_ADDRESS_SHIFT               (2U)
#define GPMI_PAYLOAD_ADDRESS(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_PAYLOAD_ADDRESS_SHIFT)) & GPMI_PAYLOAD_ADDRESS_MASK)
/*! @} */

/*! @name AUXILIARY - GPMI Auxiliary Address Register Description */
/*! @{ */
#define GPMI_AUXILIARY_RSVD0_MASK                (0x3U)
#define GPMI_AUXILIARY_RSVD0_SHIFT               (0U)
#define GPMI_AUXILIARY_RSVD0(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_RSVD0_SHIFT)) & GPMI_AUXILIARY_RSVD0_MASK)
#define GPMI_AUXILIARY_ADDRESS_MASK              (0xFFFFFFFCU)
#define GPMI_AUXILIARY_ADDRESS_SHIFT             (2U)
#define GPMI_AUXILIARY_ADDRESS(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_AUXILIARY_ADDRESS_SHIFT)) & GPMI_AUXILIARY_ADDRESS_MASK)
/*! @} */

/*! @name CTRL1 - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_GPMI_MODE_MASK                (0x1U)
#define GPMI_CTRL1_GPMI_MODE_SHIFT               (0U)
#define GPMI_CTRL1_CAMERA_MODE_MASK              (0x2U)
#define GPMI_CTRL1_CAMERA_MODE_SHIFT             (1U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_MASK      (0x4U)
#define GPMI_CTRL1_ATA_IRQRDY_POLARITY_SHIFT     (2U)
#define GPMI_CTRL1_DEV_RESET_MASK                (0x8U)
#define GPMI_CTRL1_DEV_RESET_SHIFT               (3U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_MASK       (0x80U)
#define GPMI_CTRL1_ABORT_WAIT_REQUEST_SHIFT      (7U)
#define GPMI_CTRL1_BURST_EN_MASK                 (0x100U)
#define GPMI_CTRL1_BURST_EN_SHIFT                (8U)
#define GPMI_CTRL1_TIMEOUT_IRQ_MASK              (0x200U)
#define GPMI_CTRL1_TIMEOUT_IRQ_SHIFT             (9U)
#define GPMI_CTRL1_DEV_IRQ_MASK                  (0x400U)
#define GPMI_CTRL1_DEV_IRQ_SHIFT                 (10U)
#define GPMI_CTRL1_DMA2ECC_MODE_MASK             (0x800U)
#define GPMI_CTRL1_DMA2ECC_MODE_SHIFT            (11U)
#define GPMI_CTRL1_RDN_DELAY_MASK                (0xF000U)
#define GPMI_CTRL1_RDN_DELAY_SHIFT               (12U)
#define GPMI_CTRL1_RDN_DELAY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_RDN_DELAY_SHIFT)) & GPMI_CTRL1_RDN_DELAY_MASK)
#define GPMI_CTRL1_HALF_PERIOD_MASK              (0x10000U)
#define GPMI_CTRL1_HALF_PERIOD_SHIFT             (16U)
#define GPMI_CTRL1_DLL_ENABLE_MASK               (0x20000U)
#define GPMI_CTRL1_DLL_ENABLE_SHIFT              (17U)
#define GPMI_CTRL1_BCH_MODE_MASK                 (0x40000U)
#define GPMI_CTRL1_BCH_MODE_SHIFT                (18U)
#define GPMI_CTRL1_GANGED_RDYBUSY_MASK           (0x80000U)
#define GPMI_CTRL1_GANGED_RDYBUSY_SHIFT          (19U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_MASK           (0x100000U)
#define GPMI_CTRL1_TIMEOUT_IRQ_EN_SHIFT          (20U)
#define GPMI_CTRL1_TEST_TRIGGER_MASK             (0x200000U)
#define GPMI_CTRL1_TEST_TRIGGER_SHIFT            (21U)
#define GPMI_CTRL1_WRN_DLY_SEL_MASK              (0xC00000U)
#define GPMI_CTRL1_WRN_DLY_SEL_SHIFT             (22U)
#define GPMI_CTRL1_WRN_DLY_SEL(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_DECOUPLE_CS_MASK              (0x1000000U)
#define GPMI_CTRL1_DECOUPLE_CS_SHIFT             (24U)
#define GPMI_CTRL1_SSYNCMODE_MASK                (0x2000000U)
#define GPMI_CTRL1_SSYNCMODE_SHIFT               (25U)
#define GPMI_CTRL1_UPDATE_CS_MASK                (0x4000000U)
#define GPMI_CTRL1_UPDATE_CS_SHIFT               (26U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_MASK         (0x8000000U)
#define GPMI_CTRL1_GPMI_CLK_DIV2_EN_SHIFT        (27U)
#define GPMI_CTRL1_TOGGLE_MODE_MASK              (0x10000000U)
#define GPMI_CTRL1_TOGGLE_MODE_SHIFT             (28U)
#define GPMI_CTRL1_WRITE_CLK_STOP_MASK           (0x20000000U)
#define GPMI_CTRL1_WRITE_CLK_STOP_SHIFT          (29U)
#define GPMI_CTRL1_SSYNC_CLK_STOP_MASK           (0x40000000U)
#define GPMI_CTRL1_SSYNC_CLK_STOP_SHIFT          (30U)
#define GPMI_CTRL1_DEV_CLK_STOP_MASK             (0x80000000U)
#define GPMI_CTRL1_DEV_CLK_STOP_SHIFT            (31U)
/*! @} */

/*! @name CTRL1_SET - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_SET_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_SET_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_SET_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_SET_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_SET_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_SET_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_SET_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_SET_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_SET_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_SET_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_SET_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_SET_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_SET_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_SET_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_RDN_DELAY_SHIFT)) & GPMI_CTRL1_SET_RDN_DELAY_MASK)
#define GPMI_CTRL1_SET_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_SET_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_SET_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_SET_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_SET_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_SET_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_SET_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_SET_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_SET_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_SET_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_SET_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_SET_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_SET_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_SET_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_SET_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_SET_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_SET_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_SET_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_SET_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_SET_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_SET_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_SET_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name CTRL1_CLR - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_CLR_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_CLR_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_CLR_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_CLR_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_CLR_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_CLR_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_CLR_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_CLR_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_CLR_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_CLR_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_CLR_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_CLR_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_CLR_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_CLR_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_RDN_DELAY_SHIFT)) & GPMI_CTRL1_CLR_RDN_DELAY_MASK)
#define GPMI_CTRL1_CLR_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_CLR_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_CLR_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_CLR_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_CLR_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_CLR_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_CLR_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_CLR_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_CLR_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_CLR_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_CLR_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_CLR_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_CLR_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_CLR_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_CLR_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_CLR_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_CLR_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_CLR_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name CTRL1_TOG - GPMI Control Register 1 Description */
/*! @{ */
#define GPMI_CTRL1_TOG_GPMI_MODE_MASK            (0x1U)
#define GPMI_CTRL1_TOG_GPMI_MODE_SHIFT           (0U)
#define GPMI_CTRL1_TOG_CAMERA_MODE_MASK          (0x2U)
#define GPMI_CTRL1_TOG_CAMERA_MODE_SHIFT         (1U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_MASK  (0x4U)
#define GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_SHIFT (2U)
#define GPMI_CTRL1_TOG_DEV_RESET_MASK            (0x8U)
#define GPMI_CTRL1_TOG_DEV_RESET_SHIFT           (3U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK (0x70U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT (4U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT)) & GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_MASK   (0x80U)
#define GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_SHIFT  (7U)
#define GPMI_CTRL1_TOG_BURST_EN_MASK             (0x100U)
#define GPMI_CTRL1_TOG_BURST_EN_SHIFT            (8U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_MASK          (0x200U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_SHIFT         (9U)
#define GPMI_CTRL1_TOG_DEV_IRQ_MASK              (0x400U)
#define GPMI_CTRL1_TOG_DEV_IRQ_SHIFT             (10U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_MASK         (0x800U)
#define GPMI_CTRL1_TOG_DMA2ECC_MODE_SHIFT        (11U)
#define GPMI_CTRL1_TOG_RDN_DELAY_MASK            (0xF000U)
#define GPMI_CTRL1_TOG_RDN_DELAY_SHIFT           (12U)
#define GPMI_CTRL1_TOG_RDN_DELAY(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_RDN_DELAY_SHIFT)) & GPMI_CTRL1_TOG_RDN_DELAY_MASK)
#define GPMI_CTRL1_TOG_HALF_PERIOD_MASK          (0x10000U)
#define GPMI_CTRL1_TOG_HALF_PERIOD_SHIFT         (16U)
#define GPMI_CTRL1_TOG_DLL_ENABLE_MASK           (0x20000U)
#define GPMI_CTRL1_TOG_DLL_ENABLE_SHIFT          (17U)
#define GPMI_CTRL1_TOG_BCH_MODE_MASK             (0x40000U)
#define GPMI_CTRL1_TOG_BCH_MODE_SHIFT            (18U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_MASK       (0x80000U)
#define GPMI_CTRL1_TOG_GANGED_RDYBUSY_SHIFT      (19U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_MASK       (0x100000U)
#define GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_SHIFT      (20U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_MASK         (0x200000U)
#define GPMI_CTRL1_TOG_TEST_TRIGGER_SHIFT        (21U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK          (0xC00000U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT         (22U)
#define GPMI_CTRL1_TOG_WRN_DLY_SEL(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT)) & GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_MASK          (0x1000000U)
#define GPMI_CTRL1_TOG_DECOUPLE_CS_SHIFT         (24U)
#define GPMI_CTRL1_TOG_SSYNCMODE_MASK            (0x2000000U)
#define GPMI_CTRL1_TOG_SSYNCMODE_SHIFT           (25U)
#define GPMI_CTRL1_TOG_UPDATE_CS_MASK            (0x4000000U)
#define GPMI_CTRL1_TOG_UPDATE_CS_SHIFT           (26U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_MASK     (0x8000000U)
#define GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_SHIFT    (27U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_MASK          (0x10000000U)
#define GPMI_CTRL1_TOG_TOGGLE_MODE_SHIFT         (28U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_MASK       (0x20000000U)
#define GPMI_CTRL1_TOG_WRITE_CLK_STOP_SHIFT      (29U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_MASK       (0x40000000U)
#define GPMI_CTRL1_TOG_SSYNC_CLK_STOP_SHIFT      (30U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_MASK         (0x80000000U)
#define GPMI_CTRL1_TOG_DEV_CLK_STOP_SHIFT        (31U)
/*! @} */

/*! @name TIMING0 - GPMI Timing Register 0 Description */
/*! @{ */
#define GPMI_TIMING0_DATA_SETUP_MASK             (0xFFU)
#define GPMI_TIMING0_DATA_SETUP_SHIFT            (0U)
#define GPMI_TIMING0_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_SETUP_SHIFT)) & GPMI_TIMING0_DATA_SETUP_MASK)
#define GPMI_TIMING0_DATA_HOLD_MASK              (0xFF00U)
#define GPMI_TIMING0_DATA_HOLD_SHIFT             (8U)
#define GPMI_TIMING0_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_DATA_HOLD_SHIFT)) & GPMI_TIMING0_DATA_HOLD_MASK)
#define GPMI_TIMING0_ADDRESS_SETUP_MASK          (0xFF0000U)
#define GPMI_TIMING0_ADDRESS_SETUP_SHIFT         (16U)
#define GPMI_TIMING0_ADDRESS_SETUP(x)            (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_ADDRESS_SETUP_SHIFT)) & GPMI_TIMING0_ADDRESS_SETUP_MASK)
#define GPMI_TIMING0_RSVD1_MASK                  (0xFF000000U)
#define GPMI_TIMING0_RSVD1_SHIFT                 (24U)
#define GPMI_TIMING0_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING0_RSVD1_SHIFT)) & GPMI_TIMING0_RSVD1_MASK)
/*! @} */

/*! @name TIMING1 - GPMI Timing Register 1 Description */
/*! @{ */
#define GPMI_TIMING1_RSVD1_MASK                  (0xFFFFU)
#define GPMI_TIMING1_RSVD1_SHIFT                 (0U)
#define GPMI_TIMING1_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_RSVD1_SHIFT)) & GPMI_TIMING1_RSVD1_MASK)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK    (0xFFFF0000U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT   (16U)
#define GPMI_TIMING1_DEVICE_BUSY_TIMEOUT(x)      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT)) & GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK)
/*! @} */

/*! @name TIMING2 - GPMI Timing Register 2 Description */
/*! @{ */
#define GPMI_TIMING2_DATA_PAUSE_MASK             (0xFU)
#define GPMI_TIMING2_DATA_PAUSE_SHIFT            (0U)
#define GPMI_TIMING2_DATA_PAUSE(x)               (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_DATA_PAUSE_SHIFT)) & GPMI_TIMING2_DATA_PAUSE_MASK)
#define GPMI_TIMING2_CMDADD_PAUSE_MASK           (0xF0U)
#define GPMI_TIMING2_CMDADD_PAUSE_SHIFT          (4U)
#define GPMI_TIMING2_CMDADD_PAUSE(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CMDADD_PAUSE_SHIFT)) & GPMI_TIMING2_CMDADD_PAUSE_MASK)
#define GPMI_TIMING2_POSTAMBLE_DELAY_MASK        (0xF00U)
#define GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT       (8U)
#define GPMI_TIMING2_POSTAMBLE_DELAY(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_POSTAMBLE_DELAY_MASK)
#define GPMI_TIMING2_PREAMBLE_DELAY_MASK         (0xF000U)
#define GPMI_TIMING2_PREAMBLE_DELAY_SHIFT        (12U)
#define GPMI_TIMING2_PREAMBLE_DELAY(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_PREAMBLE_DELAY_SHIFT)) & GPMI_TIMING2_PREAMBLE_DELAY_MASK)
#define GPMI_TIMING2_CE_DELAY_MASK               (0x1F0000U)
#define GPMI_TIMING2_CE_DELAY_SHIFT              (16U)
#define GPMI_TIMING2_CE_DELAY(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_CE_DELAY_SHIFT)) & GPMI_TIMING2_CE_DELAY_MASK)
#define GPMI_TIMING2_RSVD0_MASK                  (0xE00000U)
#define GPMI_TIMING2_RSVD0_SHIFT                 (21U)
#define GPMI_TIMING2_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_RSVD0_SHIFT)) & GPMI_TIMING2_RSVD0_MASK)
#define GPMI_TIMING2_READ_LATENCY_MASK           (0x7000000U)
#define GPMI_TIMING2_READ_LATENCY_SHIFT          (24U)
/*! READ_LATENCY
 *  0b000..READ LATENCY is 0
 *  0b001..READ LATENCY is 1
 *  0b010..READ LATENCY is 2
 *  0b011..READ LATENCY is 3
 *  0b100..READ LATENCY is 4
 *  0b101..READ LATENCY is 5
 */
#define GPMI_TIMING2_READ_LATENCY(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_READ_LATENCY_SHIFT)) & GPMI_TIMING2_READ_LATENCY_MASK)
#define GPMI_TIMING2_TCR_MASK                    (0x18000000U)
#define GPMI_TIMING2_TCR_SHIFT                   (27U)
#define GPMI_TIMING2_TCR(x)                      (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TCR_SHIFT)) & GPMI_TIMING2_TCR_MASK)
#define GPMI_TIMING2_TRPSTH_MASK                 (0xE0000000U)
#define GPMI_TIMING2_TRPSTH_SHIFT                (29U)
#define GPMI_TIMING2_TRPSTH(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_TIMING2_TRPSTH_SHIFT)) & GPMI_TIMING2_TRPSTH_MASK)
/*! @} */

/*! @name DATA - GPMI DMA Data Transfer Register Description */
/*! @{ */
#define GPMI_DATA_DATA_MASK                      (0xFFFFFFFFU)
#define GPMI_DATA_DATA_SHIFT                     (0U)
#define GPMI_DATA_DATA(x)                        (((uint32_t)(((uint32_t)(x)) << GPMI_DATA_DATA_SHIFT)) & GPMI_DATA_DATA_MASK)
/*! @} */

/*! @name STAT - GPMI Status Register Description */
/*! @{ */
#define GPMI_STAT_PRESENT_MASK                   (0x1U)
#define GPMI_STAT_PRESENT_SHIFT                  (0U)
#define GPMI_STAT_FIFO_FULL_MASK                 (0x2U)
#define GPMI_STAT_FIFO_FULL_SHIFT                (1U)
#define GPMI_STAT_FIFO_EMPTY_MASK                (0x4U)
#define GPMI_STAT_FIFO_EMPTY_SHIFT               (2U)
#define GPMI_STAT_INVALID_BUFFER_MASK_MASK       (0x8U)
#define GPMI_STAT_INVALID_BUFFER_MASK_SHIFT      (3U)
#define GPMI_STAT_ATA_IRQ_MASK                   (0x10U)
#define GPMI_STAT_ATA_IRQ_SHIFT                  (4U)
#define GPMI_STAT_RSVD1_MASK                     (0xE0U)
#define GPMI_STAT_RSVD1_SHIFT                    (5U)
#define GPMI_STAT_RSVD1(x)                       (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RSVD1_SHIFT)) & GPMI_STAT_RSVD1_MASK)
#define GPMI_STAT_DEV0_ERROR_MASK                (0x100U)
#define GPMI_STAT_DEV0_ERROR_SHIFT               (8U)
#define GPMI_STAT_DEV1_ERROR_MASK                (0x200U)
#define GPMI_STAT_DEV1_ERROR_SHIFT               (9U)
#define GPMI_STAT_DEV2_ERROR_MASK                (0x400U)
#define GPMI_STAT_DEV2_ERROR_SHIFT               (10U)
#define GPMI_STAT_DEV3_ERROR_MASK                (0x800U)
#define GPMI_STAT_DEV3_ERROR_SHIFT               (11U)
#define GPMI_STAT_DEV4_ERROR_MASK                (0x1000U)
#define GPMI_STAT_DEV4_ERROR_SHIFT               (12U)
#define GPMI_STAT_DEV5_ERROR_MASK                (0x2000U)
#define GPMI_STAT_DEV5_ERROR_SHIFT               (13U)
#define GPMI_STAT_DEV6_ERROR_MASK                (0x4000U)
#define GPMI_STAT_DEV6_ERROR_SHIFT               (14U)
#define GPMI_STAT_DEV7_ERROR_MASK                (0x8000U)
#define GPMI_STAT_DEV7_ERROR_SHIFT               (15U)
#define GPMI_STAT_RDY_TIMEOUT_MASK               (0xFF0000U)
#define GPMI_STAT_RDY_TIMEOUT_SHIFT              (16U)
#define GPMI_STAT_RDY_TIMEOUT(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_RDY_TIMEOUT_SHIFT)) & GPMI_STAT_RDY_TIMEOUT_MASK)
#define GPMI_STAT_READY_BUSY_MASK                (0xFF000000U)
#define GPMI_STAT_READY_BUSY_SHIFT               (24U)
#define GPMI_STAT_READY_BUSY(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_STAT_READY_BUSY_SHIFT)) & GPMI_STAT_READY_BUSY_MASK)
/*! @} */

/*! @name DEBUG - GPMI Debug Information Register Description */
/*! @{ */
#define GPMI_DEBUG_CMD_END_MASK                  (0xFFU)
#define GPMI_DEBUG_CMD_END_SHIFT                 (0U)
#define GPMI_DEBUG_CMD_END(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_CMD_END_SHIFT)) & GPMI_DEBUG_CMD_END_MASK)
#define GPMI_DEBUG_DMAREQ_MASK                   (0xFF00U)
#define GPMI_DEBUG_DMAREQ_SHIFT                  (8U)
#define GPMI_DEBUG_DMAREQ(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMAREQ_SHIFT)) & GPMI_DEBUG_DMAREQ_MASK)
#define GPMI_DEBUG_DMA_SENSE_MASK                (0xFF0000U)
#define GPMI_DEBUG_DMA_SENSE_SHIFT               (16U)
#define GPMI_DEBUG_DMA_SENSE(x)                  (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_DMA_SENSE_SHIFT)) & GPMI_DEBUG_DMA_SENSE_MASK)
#define GPMI_DEBUG_WAIT_FOR_READY_END_MASK       (0xFF000000U)
#define GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT      (24U)
#define GPMI_DEBUG_WAIT_FOR_READY_END(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT)) & GPMI_DEBUG_WAIT_FOR_READY_END_MASK)
/*! @} */

/*! @name VERSION - GPMI Version Register Description */
/*! @{ */
#define GPMI_VERSION_STEP_MASK                   (0xFFFFU)
#define GPMI_VERSION_STEP_SHIFT                  (0U)
#define GPMI_VERSION_STEP(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_STEP_SHIFT)) & GPMI_VERSION_STEP_MASK)
#define GPMI_VERSION_MINOR_MASK                  (0xFF0000U)
#define GPMI_VERSION_MINOR_SHIFT                 (16U)
#define GPMI_VERSION_MINOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MINOR_SHIFT)) & GPMI_VERSION_MINOR_MASK)
#define GPMI_VERSION_MAJOR_MASK                  (0xFF000000U)
#define GPMI_VERSION_MAJOR_SHIFT                 (24U)
#define GPMI_VERSION_MAJOR(x)                    (((uint32_t)(((uint32_t)(x)) << GPMI_VERSION_MAJOR_SHIFT)) & GPMI_VERSION_MAJOR_MASK)
/*! @} */

/*! @name DEBUG2 - GPMI Debug2 Information Register Description */
/*! @{ */
#define GPMI_DEBUG2_RDN_TAP_MASK                 (0x3FU)
#define GPMI_DEBUG2_RDN_TAP_SHIFT                (0U)
#define GPMI_DEBUG2_RDN_TAP(x)                   (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RDN_TAP_SHIFT)) & GPMI_DEBUG2_RDN_TAP_MASK)
#define GPMI_DEBUG2_UPDATE_WINDOW_MASK           (0x40U)
#define GPMI_DEBUG2_UPDATE_WINDOW_SHIFT          (6U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_MASK        (0x80U)
#define GPMI_DEBUG2_VIEW_DELAYED_RDN_SHIFT       (7U)
#define GPMI_DEBUG2_SYND2GPMI_READY_MASK         (0x100U)
#define GPMI_DEBUG2_SYND2GPMI_READY_SHIFT        (8U)
#define GPMI_DEBUG2_SYND2GPMI_VALID_MASK         (0x200U)
#define GPMI_DEBUG2_SYND2GPMI_VALID_SHIFT        (9U)
#define GPMI_DEBUG2_GPMI2SYND_READY_MASK         (0x400U)
#define GPMI_DEBUG2_GPMI2SYND_READY_SHIFT        (10U)
#define GPMI_DEBUG2_GPMI2SYND_VALID_MASK         (0x800U)
#define GPMI_DEBUG2_GPMI2SYND_VALID_SHIFT        (11U)
#define GPMI_DEBUG2_SYND2GPMI_BE_MASK            (0xF000U)
#define GPMI_DEBUG2_SYND2GPMI_BE_SHIFT           (12U)
#define GPMI_DEBUG2_SYND2GPMI_BE(x)              (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_SYND2GPMI_BE_SHIFT)) & GPMI_DEBUG2_SYND2GPMI_BE_MASK)
#define GPMI_DEBUG2_MAIN_STATE_MASK              (0xF0000U)
#define GPMI_DEBUG2_MAIN_STATE_SHIFT             (16U)
#define GPMI_DEBUG2_MAIN_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_MAIN_STATE_SHIFT)) & GPMI_DEBUG2_MAIN_STATE_MASK)
#define GPMI_DEBUG2_PIN_STATE_MASK               (0x700000U)
#define GPMI_DEBUG2_PIN_STATE_SHIFT              (20U)
#define GPMI_DEBUG2_PIN_STATE(x)                 (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_PIN_STATE_SHIFT)) & GPMI_DEBUG2_PIN_STATE_MASK)
#define GPMI_DEBUG2_BUSY_MASK                    (0x800000U)
#define GPMI_DEBUG2_BUSY_SHIFT                   (23U)
#define GPMI_DEBUG2_UDMA_STATE_MASK              (0xF000000U)
#define GPMI_DEBUG2_UDMA_STATE_SHIFT             (24U)
#define GPMI_DEBUG2_UDMA_STATE(x)                (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_UDMA_STATE_SHIFT)) & GPMI_DEBUG2_UDMA_STATE_MASK)
#define GPMI_DEBUG2_RSVD1_MASK                   (0xF0000000U)
#define GPMI_DEBUG2_RSVD1_SHIFT                  (28U)
#define GPMI_DEBUG2_RSVD1(x)                     (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG2_RSVD1_SHIFT)) & GPMI_DEBUG2_RSVD1_MASK)
/*! @} */

/*! @name DEBUG3 - GPMI Debug3 Information Register Description */
/*! @{ */
#define GPMI_DEBUG3_DEV_WORD_CNTR_MASK           (0xFFFFU)
#define GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT          (0U)
#define GPMI_DEBUG3_DEV_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_DEV_WORD_CNTR_MASK)
#define GPMI_DEBUG3_APB_WORD_CNTR_MASK           (0xFFFF0000U)
#define GPMI_DEBUG3_APB_WORD_CNTR_SHIFT          (16U)
#define GPMI_DEBUG3_APB_WORD_CNTR(x)             (((uint32_t)(((uint32_t)(x)) << GPMI_DEBUG3_APB_WORD_CNTR_SHIFT)) & GPMI_DEBUG3_APB_WORD_CNTR_MASK)
/*! @} */

/*! @name READ_DDR_DLL_CTRL - GPMI Double Rate Read DLL Control Register Description */
/*! @{ */
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_MASK       (0x1U)
#define GPMI_READ_DDR_DLL_CTRL_ENABLE_SHIFT      (0U)
#define GPMI_READ_DDR_DLL_CTRL_RESET_MASK        (0x2U)
#define GPMI_READ_DDR_DLL_CTRL_RESET_SHIFT       (1U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_MASK  (0x80U)
#define GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_MASK    (0x100U)
#define GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_SHIFT   (8U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK        (0xC0000U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT       (18U)
#define GPMI_READ_DDR_DLL_CTRL_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name WRITE_DDR_DLL_CTRL - GPMI Double Rate Write DLL Control Register Description */
/*! @{ */
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_MASK      (0x1U)
#define GPMI_WRITE_DDR_DLL_CTRL_ENABLE_SHIFT     (0U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_MASK       (0x2U)
#define GPMI_WRITE_DDR_DLL_CTRL_RESET_SHIFT      (1U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK (0x78U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_MASK   (0x100U)
#define GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_SHIFT  (8U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_MASK (0x200U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT (9U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0x3FC00U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (10U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK       (0xC0000U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT      (18U)
#define GPMI_WRITE_DDR_DLL_CTRL_RSVD1(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name READ_DDR_DLL_STS - GPMI Double Rate Read DLL Status Register Description */
/*! @{ */
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_MASK      (0x1U)
#define GPMI_READ_DDR_DLL_STS_SLV_LOCK_SHIFT     (0U)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK       (0x1FEU)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT      (1U)
#define GPMI_READ_DDR_DLL_STS_SLV_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD0_MASK         (0xFE00U)
#define GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT        (9U)
#define GPMI_READ_DDR_DLL_STS_RSVD0(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_MASK      (0x10000U)
#define GPMI_READ_DDR_DLL_STS_REF_LOCK_SHIFT     (16U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_MASK       (0x1FE0000U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT      (17U)
#define GPMI_READ_DDR_DLL_STS_REF_SEL(x)         (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_READ_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_READ_DDR_DLL_STS_RSVD1_MASK         (0xFE000000U)
#define GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT        (25U)
#define GPMI_READ_DDR_DLL_STS_RSVD1(x)           (((uint32_t)(((uint32_t)(x)) << GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_READ_DDR_DLL_STS_RSVD1_MASK)
/*! @} */

/*! @name WRITE_DDR_DLL_STS - GPMI Double Rate Write DLL Status Register Description */
/*! @{ */
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_MASK     (0x1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_SHIFT    (0U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK      (0x1FEU)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT     (1U)
#define GPMI_WRITE_DDR_DLL_STS_SLV_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK        (0xFE00U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT       (9U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD0(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_MASK     (0x10000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_LOCK_SHIFT    (16U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK      (0x1FE0000U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT     (17U)
#define GPMI_WRITE_DDR_DLL_STS_REF_SEL(x)        (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK        (0xFE000000U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT       (25U)
#define GPMI_WRITE_DDR_DLL_STS_RSVD1(x)          (((uint32_t)(((uint32_t)(x)) << GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT)) & GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPMI_Register_Masks */


/* GPMI - Peripheral instance base addresses */
/** Peripheral GPMI base pointer */
#define GPMI_BASE_PTR                            ((GPMI_MemMapPtr)0x33002000u)
/** Array initializer of GPMI peripheral base pointers */
#define GPMI_BASE_PTRS                           { GPMI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPMI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPMI_Register_Accessor_Macros GPMI - Register accessor macros
 * @{
 */


/* GPMI - Register instance definitions */
/* GPMI */
#define GPMI_CTRL0                               GPMI_CTRL0_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_SET                           GPMI_CTRL0_SET_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_CLR                           GPMI_CTRL0_CLR_REG(GPMI_BASE_PTR)
#define GPMI_CTRL0_TOG                           GPMI_CTRL0_TOG_REG(GPMI_BASE_PTR)
#define GPMI_COMPARE                             GPMI_COMPARE_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL                             GPMI_ECCCTRL_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_SET                         GPMI_ECCCTRL_SET_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_CLR                         GPMI_ECCCTRL_CLR_REG(GPMI_BASE_PTR)
#define GPMI_ECCCTRL_TOG                         GPMI_ECCCTRL_TOG_REG(GPMI_BASE_PTR)
#define GPMI_ECCCOUNT                            GPMI_ECCCOUNT_REG(GPMI_BASE_PTR)
#define GPMI_PAYLOAD                             GPMI_PAYLOAD_REG(GPMI_BASE_PTR)
#define GPMI_AUXILIARY                           GPMI_AUXILIARY_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1                               GPMI_CTRL1_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_SET                           GPMI_CTRL1_SET_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_CLR                           GPMI_CTRL1_CLR_REG(GPMI_BASE_PTR)
#define GPMI_CTRL1_TOG                           GPMI_CTRL1_TOG_REG(GPMI_BASE_PTR)
#define GPMI_TIMING0                             GPMI_TIMING0_REG(GPMI_BASE_PTR)
#define GPMI_TIMING1                             GPMI_TIMING1_REG(GPMI_BASE_PTR)
#define GPMI_TIMING2                             GPMI_TIMING2_REG(GPMI_BASE_PTR)
#define GPMI_DATA                                GPMI_DATA_REG(GPMI_BASE_PTR)
#define GPMI_STAT                                GPMI_STAT_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG                               GPMI_DEBUG_REG(GPMI_BASE_PTR)
#define GPMI_VERSION                             GPMI_VERSION_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG2                              GPMI_DEBUG2_REG(GPMI_BASE_PTR)
#define GPMI_DEBUG3                              GPMI_DEBUG3_REG(GPMI_BASE_PTR)
#define GPMI_READ_DDR_DLL_CTRL                   GPMI_READ_DDR_DLL_CTRL_REG(GPMI_BASE_PTR)
#define GPMI_WRITE_DDR_DLL_CTRL                  GPMI_WRITE_DDR_DLL_CTRL_REG(GPMI_BASE_PTR)
#define GPMI_READ_DDR_DLL_STS                    GPMI_READ_DDR_DLL_STS_REG(GPMI_BASE_PTR)
#define GPMI_WRITE_DDR_DLL_STS                   GPMI_WRITE_DDR_DLL_STS_REG(GPMI_BASE_PTR)

/*!
 * @}
 */ /* end of group GPMI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPMI_Peripheral */


/* ----------------------------------------------------------------------------
   -- GPT
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Peripheral GPT
 * @{
 */

/** GPT - Peripheral register structure */
typedef struct GPT_MemMap {
  uint32_t CR;                                     /**< GPT Control Register, offset: 0x0 */
  uint32_t PR;                                     /**< GPT Prescaler Register, offset: 0x4 */
  uint32_t SR;                                     /**< GPT Status Register, offset: 0x8 */
  uint32_t IR;                                     /**< GPT Interrupt Register, offset: 0xC */
  uint32_t OCR[3];                                 /**< GPT Output Compare Register 1..GPT Output Compare Register 3, array offset: 0x10, array step: 0x4 */
  uint32_t ICR[2];                                 /**< GPT Input Capture Register 1..GPT Input Capture Register 2, array offset: 0x1C, array step: 0x4 */
  uint32_t CNT;                                    /**< GPT Counter Register, offset: 0x24 */
} volatile *GPT_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register accessors */
#define GPT_CR_REG(base)                         ((base)->CR)
#define GPT_PR_REG(base)                         ((base)->PR)
#define GPT_SR_REG(base)                         ((base)->SR)
#define GPT_IR_REG(base)                         ((base)->IR)
#define GPT_OCR_REG(base,index)                  ((base)->OCR[index])
#define GPT_ICR_REG(base,index)                  ((base)->ICR[index])
#define GPT_CNT_REG(base)                        ((base)->CNT)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- GPT Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Masks GPT Register Masks
 * @{
 */

/*! @name CR - GPT Control Register */
/*! @{ */
#define GPT_CR_EN_MASK                           (0x1U)
#define GPT_CR_EN_SHIFT                          (0U)
#define GPT_CR_ENMOD_MASK                        (0x2U)
#define GPT_CR_ENMOD_SHIFT                       (1U)
#define GPT_CR_DBGEN_MASK                        (0x4U)
#define GPT_CR_DBGEN_SHIFT                       (2U)
#define GPT_CR_WAITEN_MASK                       (0x8U)
#define GPT_CR_WAITEN_SHIFT                      (3U)
#define GPT_CR_DOZEEN_MASK                       (0x10U)
#define GPT_CR_DOZEEN_SHIFT                      (4U)
#define GPT_CR_STOPEN_MASK                       (0x20U)
#define GPT_CR_STOPEN_SHIFT                      (5U)
#define GPT_CR_CLKSRC_MASK                       (0x1C0U)
#define GPT_CR_CLKSRC_SHIFT                      (6U)
/*! CLKSRC
 *  0b000..No clock
 *  0b001..Peripheral Clock (ipg_clk)
 *  0b010..High Frequency Reference Clock (ipg_clk_highfreq)
 *  0b011..External Clock
 *  0b100..Low Frequency Reference Clock (ipg_clk_32k)
 *  0b101..Crystal oscillator as Reference Clock (ipg_clk_24M)
 */
#define GPT_CR_CLKSRC(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CR_CLKSRC_SHIFT)) & GPT_CR_CLKSRC_MASK)
#define GPT_CR_FRR_MASK                          (0x200U)
#define GPT_CR_FRR_SHIFT                         (9U)
#define GPT_CR_EN_24M_MASK                       (0x400U)
#define GPT_CR_EN_24M_SHIFT                      (10U)
#define GPT_CR_SWR_MASK                          (0x8000U)
#define GPT_CR_SWR_SHIFT                         (15U)
#define GPT_CR_IM1_MASK                          (0x30000U)
#define GPT_CR_IM1_SHIFT                         (16U)
#define GPT_CR_IM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM1_SHIFT)) & GPT_CR_IM1_MASK)
#define GPT_CR_IM2_MASK                          (0xC0000U)
#define GPT_CR_IM2_SHIFT                         (18U)
/*! IM2
 *  0b00..capture disabled
 *  0b01..capture on rising edge only
 *  0b10..capture on falling edge only
 *  0b11..capture on both edges
 */
#define GPT_CR_IM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_IM2_SHIFT)) & GPT_CR_IM2_MASK)
#define GPT_CR_OM1_MASK                          (0x700000U)
#define GPT_CR_OM1_SHIFT                         (20U)
#define GPT_CR_OM1(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM1_SHIFT)) & GPT_CR_OM1_MASK)
#define GPT_CR_OM2_MASK                          (0x3800000U)
#define GPT_CR_OM2_SHIFT                         (23U)
#define GPT_CR_OM2(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM2_SHIFT)) & GPT_CR_OM2_MASK)
#define GPT_CR_OM3_MASK                          (0x1C000000U)
#define GPT_CR_OM3_SHIFT                         (26U)
/*! OM3
 *  0b000..Output disconnected. No response on pin.
 *  0b001..Toggle output pin
 *  0b010..Clear output pin
 *  0b011..Set output pin
 *  0b1xx..Generate an active low pulse (that is one input clock wide) on the output pin.
 */
#define GPT_CR_OM3(x)                            (((uint32_t)(((uint32_t)(x)) << GPT_CR_OM3_SHIFT)) & GPT_CR_OM3_MASK)
#define GPT_CR_FO1_MASK                          (0x20000000U)
#define GPT_CR_FO1_SHIFT                         (29U)
#define GPT_CR_FO2_MASK                          (0x40000000U)
#define GPT_CR_FO2_SHIFT                         (30U)
#define GPT_CR_FO3_MASK                          (0x80000000U)
#define GPT_CR_FO3_SHIFT                         (31U)
/*! @} */

/*! @name PR - GPT Prescaler Register */
/*! @{ */
#define GPT_PR_PRESCALER_MASK                    (0xFFFU)
#define GPT_PR_PRESCALER_SHIFT                   (0U)
/*! PRESCALER
 *  0b000000000000..Divide by 1
 *  0b000000000001..Divide by 2
 *  0b111111111111..Divide by 4096
 */
#define GPT_PR_PRESCALER(x)                      (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER_SHIFT)) & GPT_PR_PRESCALER_MASK)
#define GPT_PR_PRESCALER24M_MASK                 (0xF000U)
#define GPT_PR_PRESCALER24M_SHIFT                (12U)
/*! PRESCALER24M
 *  0b0000..Divide by 1
 *  0b0001..Divide by 2
 *  0b1111..Divide by 16
 */
#define GPT_PR_PRESCALER24M(x)                   (((uint32_t)(((uint32_t)(x)) << GPT_PR_PRESCALER24M_SHIFT)) & GPT_PR_PRESCALER24M_MASK)
/*! @} */

/*! @name SR - GPT Status Register */
/*! @{ */
#define GPT_SR_OF1_MASK                          (0x1U)
#define GPT_SR_OF1_SHIFT                         (0U)
#define GPT_SR_OF2_MASK                          (0x2U)
#define GPT_SR_OF2_SHIFT                         (1U)
#define GPT_SR_OF3_MASK                          (0x4U)
#define GPT_SR_OF3_SHIFT                         (2U)
#define GPT_SR_IF1_MASK                          (0x8U)
#define GPT_SR_IF1_SHIFT                         (3U)
#define GPT_SR_IF2_MASK                          (0x10U)
#define GPT_SR_IF2_SHIFT                         (4U)
#define GPT_SR_ROV_MASK                          (0x20U)
#define GPT_SR_ROV_SHIFT                         (5U)
/*! @} */

/*! @name IR - GPT Interrupt Register */
/*! @{ */
#define GPT_IR_OF1IE_MASK                        (0x1U)
#define GPT_IR_OF1IE_SHIFT                       (0U)
#define GPT_IR_OF2IE_MASK                        (0x2U)
#define GPT_IR_OF2IE_SHIFT                       (1U)
#define GPT_IR_OF3IE_MASK                        (0x4U)
#define GPT_IR_OF3IE_SHIFT                       (2U)
#define GPT_IR_IF1IE_MASK                        (0x8U)
#define GPT_IR_IF1IE_SHIFT                       (3U)
#define GPT_IR_IF2IE_MASK                        (0x10U)
#define GPT_IR_IF2IE_SHIFT                       (4U)
#define GPT_IR_ROVIE_MASK                        (0x20U)
#define GPT_IR_ROVIE_SHIFT                       (5U)
/*! @} */

/*! @name OCR - GPT Output Compare Register 1..GPT Output Compare Register 3 */
/*! @{ */
#define GPT_OCR_COMP_MASK                        (0xFFFFFFFFU)
#define GPT_OCR_COMP_SHIFT                       (0U)
#define GPT_OCR_COMP(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_OCR_COMP_SHIFT)) & GPT_OCR_COMP_MASK)
/*! @} */

/* The count of GPT_OCR */
#define GPT_OCR_COUNT                            (3U)

/*! @name ICR - GPT Input Capture Register 1..GPT Input Capture Register 2 */
/*! @{ */
#define GPT_ICR_CAPT_MASK                        (0xFFFFFFFFU)
#define GPT_ICR_CAPT_SHIFT                       (0U)
#define GPT_ICR_CAPT(x)                          (((uint32_t)(((uint32_t)(x)) << GPT_ICR_CAPT_SHIFT)) & GPT_ICR_CAPT_MASK)
/*! @} */

/* The count of GPT_ICR */
#define GPT_ICR_COUNT                            (2U)

/*! @name CNT - GPT Counter Register */
/*! @{ */
#define GPT_CNT_COUNT_MASK                       (0xFFFFFFFFU)
#define GPT_CNT_COUNT_SHIFT                      (0U)
#define GPT_CNT_COUNT(x)                         (((uint32_t)(((uint32_t)(x)) << GPT_CNT_COUNT_SHIFT)) & GPT_CNT_COUNT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group GPT_Register_Masks */


/* GPT - Peripheral instance base addresses */
/** Peripheral GPT1 base pointer */
#define GPT1_BASE_PTR                            ((GPT_MemMapPtr)0x302D0000u)
/** Peripheral GPT2 base pointer */
#define GPT2_BASE_PTR                            ((GPT_MemMapPtr)0x302E0000u)
/** Peripheral GPT3 base pointer */
#define GPT3_BASE_PTR                            ((GPT_MemMapPtr)0x302F0000u)
/** Peripheral GPT4 base pointer */
#define GPT4_BASE_PTR                            ((GPT_MemMapPtr)0x30700000u)
/** Peripheral GPT5 base pointer */
#define GPT5_BASE_PTR                            ((GPT_MemMapPtr)0x306F0000u)
/** Peripheral GPT6 base pointer */
#define GPT6_BASE_PTR                            ((GPT_MemMapPtr)0x306E0000u)
/** Array initializer of GPT peripheral base pointers */
#define GPT_BASE_PTRS                            { GPT1_BASE_PTR, GPT2_BASE_PTR, GPT3_BASE_PTR, GPT4_BASE_PTR, GPT5_BASE_PTR, GPT6_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- GPT - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup GPT_Register_Accessor_Macros GPT - Register accessor macros
 * @{
 */


/* GPT - Register instance definitions */
/* GPT1 */
#define GPT1_CR                                  GPT_CR_REG(GPT1_BASE_PTR)
#define GPT1_PR                                  GPT_PR_REG(GPT1_BASE_PTR)
#define GPT1_SR                                  GPT_SR_REG(GPT1_BASE_PTR)
#define GPT1_IR                                  GPT_IR_REG(GPT1_BASE_PTR)
#define GPT1_OCR1                                GPT_OCR_REG(GPT1_BASE_PTR,0)
#define GPT1_OCR2                                GPT_OCR_REG(GPT1_BASE_PTR,1)
#define GPT1_OCR3                                GPT_OCR_REG(GPT1_BASE_PTR,2)
#define GPT1_ICR1                                GPT_ICR_REG(GPT1_BASE_PTR,0)
#define GPT1_ICR2                                GPT_ICR_REG(GPT1_BASE_PTR,1)
#define GPT1_CNT                                 GPT_CNT_REG(GPT1_BASE_PTR)
/* GPT2 */
#define GPT2_CR                                  GPT_CR_REG(GPT2_BASE_PTR)
#define GPT2_PR                                  GPT_PR_REG(GPT2_BASE_PTR)
#define GPT2_SR                                  GPT_SR_REG(GPT2_BASE_PTR)
#define GPT2_IR                                  GPT_IR_REG(GPT2_BASE_PTR)
#define GPT2_OCR1                                GPT_OCR_REG(GPT2_BASE_PTR,0)
#define GPT2_OCR2                                GPT_OCR_REG(GPT2_BASE_PTR,1)
#define GPT2_OCR3                                GPT_OCR_REG(GPT2_BASE_PTR,2)
#define GPT2_ICR1                                GPT_ICR_REG(GPT2_BASE_PTR,0)
#define GPT2_ICR2                                GPT_ICR_REG(GPT2_BASE_PTR,1)
#define GPT2_CNT                                 GPT_CNT_REG(GPT2_BASE_PTR)
/* GPT3 */
#define GPT3_CR                                  GPT_CR_REG(GPT3_BASE_PTR)
#define GPT3_PR                                  GPT_PR_REG(GPT3_BASE_PTR)
#define GPT3_SR                                  GPT_SR_REG(GPT3_BASE_PTR)
#define GPT3_IR                                  GPT_IR_REG(GPT3_BASE_PTR)
#define GPT3_OCR1                                GPT_OCR_REG(GPT3_BASE_PTR,0)
#define GPT3_OCR2                                GPT_OCR_REG(GPT3_BASE_PTR,1)
#define GPT3_OCR3                                GPT_OCR_REG(GPT3_BASE_PTR,2)
#define GPT3_ICR1                                GPT_ICR_REG(GPT3_BASE_PTR,0)
#define GPT3_ICR2                                GPT_ICR_REG(GPT3_BASE_PTR,1)
#define GPT3_CNT                                 GPT_CNT_REG(GPT3_BASE_PTR)
/* GPT4 */
#define GPT4_CR                                  GPT_CR_REG(GPT4_BASE_PTR)
#define GPT4_PR                                  GPT_PR_REG(GPT4_BASE_PTR)
#define GPT4_SR                                  GPT_SR_REG(GPT4_BASE_PTR)
#define GPT4_IR                                  GPT_IR_REG(GPT4_BASE_PTR)
#define GPT4_OCR1                                GPT_OCR_REG(GPT4_BASE_PTR,0)
#define GPT4_OCR2                                GPT_OCR_REG(GPT4_BASE_PTR,1)
#define GPT4_OCR3                                GPT_OCR_REG(GPT4_BASE_PTR,2)
#define GPT4_ICR1                                GPT_ICR_REG(GPT4_BASE_PTR,0)
#define GPT4_ICR2                                GPT_ICR_REG(GPT4_BASE_PTR,1)
#define GPT4_CNT                                 GPT_CNT_REG(GPT4_BASE_PTR)
/* GPT5 */
#define GPT5_CR                                  GPT_CR_REG(GPT5_BASE_PTR)
#define GPT5_PR                                  GPT_PR_REG(GPT5_BASE_PTR)
#define GPT5_SR                                  GPT_SR_REG(GPT5_BASE_PTR)
#define GPT5_IR                                  GPT_IR_REG(GPT5_BASE_PTR)
#define GPT5_OCR1                                GPT_OCR_REG(GPT5_BASE_PTR,0)
#define GPT5_OCR2                                GPT_OCR_REG(GPT5_BASE_PTR,1)
#define GPT5_OCR3                                GPT_OCR_REG(GPT5_BASE_PTR,2)
#define GPT5_ICR1                                GPT_ICR_REG(GPT5_BASE_PTR,0)
#define GPT5_ICR2                                GPT_ICR_REG(GPT5_BASE_PTR,1)
#define GPT5_CNT                                 GPT_CNT_REG(GPT5_BASE_PTR)
/* GPT6 */
#define GPT6_CR                                  GPT_CR_REG(GPT6_BASE_PTR)
#define GPT6_PR                                  GPT_PR_REG(GPT6_BASE_PTR)
#define GPT6_SR                                  GPT_SR_REG(GPT6_BASE_PTR)
#define GPT6_IR                                  GPT_IR_REG(GPT6_BASE_PTR)
#define GPT6_OCR1                                GPT_OCR_REG(GPT6_BASE_PTR,0)
#define GPT6_OCR2                                GPT_OCR_REG(GPT6_BASE_PTR,1)
#define GPT6_OCR3                                GPT_OCR_REG(GPT6_BASE_PTR,2)
#define GPT6_ICR1                                GPT_ICR_REG(GPT6_BASE_PTR,0)
#define GPT6_ICR2                                GPT_ICR_REG(GPT6_BASE_PTR,1)
#define GPT6_CNT                                 GPT_CNT_REG(GPT6_BASE_PTR)

/* GPT - Register array accessors */
#define GPT1_OCR(index)                          GPT_OCR_REG(GPT1_BASE_PTR,index)
#define GPT2_OCR(index)                          GPT_OCR_REG(GPT2_BASE_PTR,index)
#define GPT3_OCR(index)                          GPT_OCR_REG(GPT3_BASE_PTR,index)
#define GPT4_OCR(index)                          GPT_OCR_REG(GPT4_BASE_PTR,index)
#define GPT5_OCR(index)                          GPT_OCR_REG(GPT5_BASE_PTR,index)
#define GPT6_OCR(index)                          GPT_OCR_REG(GPT6_BASE_PTR,index)
#define GPT1_ICR(index)                          GPT_ICR_REG(GPT1_BASE_PTR,index)
#define GPT2_ICR(index)                          GPT_ICR_REG(GPT2_BASE_PTR,index)
#define GPT3_ICR(index)                          GPT_ICR_REG(GPT3_BASE_PTR,index)
#define GPT4_ICR(index)                          GPT_ICR_REG(GPT4_BASE_PTR,index)
#define GPT5_ICR(index)                          GPT_ICR_REG(GPT5_BASE_PTR,index)
#define GPT6_ICR(index)                          GPT_ICR_REG(GPT6_BASE_PTR,index)

/*!
 * @}
 */ /* end of group GPT_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group GPT_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2C
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Peripheral I2C
 * @{
 */

/** I2C - Peripheral register structure */
typedef struct I2C_MemMap {
  uint16_t IADR;                                   /**< I2C Address Register, offset: 0x0 */
  uint8_t RESERVED_0[2];
  uint16_t IFDR;                                   /**< I2C Frequency Divider Register, offset: 0x4 */
  uint8_t RESERVED_1[2];
  uint16_t I2CR;                                   /**< I2C Control Register, offset: 0x8 */
  uint8_t RESERVED_2[2];
  uint16_t I2SR;                                   /**< I2C Status Register, offset: 0xC */
  uint8_t RESERVED_3[2];
  uint16_t I2DR;                                   /**< I2C Data I/O Register, offset: 0x10 */
} volatile *I2C_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register accessors */
#define I2C_IADR_REG(base)                       ((base)->IADR)
#define I2C_IFDR_REG(base)                       ((base)->IFDR)
#define I2C_I2CR_REG(base)                       ((base)->I2CR)
#define I2C_I2SR_REG(base)                       ((base)->I2SR)
#define I2C_I2DR_REG(base)                       ((base)->I2DR)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2C Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Masks I2C Register Masks
 * @{
 */

/*! @name IADR - I2C Address Register */
/*! @{ */
#define I2C_IADR_ADR_MASK                        (0xFEU)
#define I2C_IADR_ADR_SHIFT                       (1U)
#define I2C_IADR_ADR(x)                          (((uint16_t)(((uint16_t)(x)) << I2C_IADR_ADR_SHIFT)) & I2C_IADR_ADR_MASK)
/*! @} */

/*! @name IFDR - I2C Frequency Divider Register */
/*! @{ */
#define I2C_IFDR_IC_MASK                         (0x3FU)
#define I2C_IFDR_IC_SHIFT                        (0U)
#define I2C_IFDR_IC(x)                           (((uint16_t)(((uint16_t)(x)) << I2C_IFDR_IC_SHIFT)) & I2C_IFDR_IC_MASK)
/*! @} */

/*! @name I2CR - I2C Control Register */
/*! @{ */
#define I2C_I2CR_RSTA_MASK                       (0x4U)
#define I2C_I2CR_RSTA_SHIFT                      (2U)
#define I2C_I2CR_TXAK_MASK                       (0x8U)
#define I2C_I2CR_TXAK_SHIFT                      (3U)
#define I2C_I2CR_MTX_MASK                        (0x10U)
#define I2C_I2CR_MTX_SHIFT                       (4U)
#define I2C_I2CR_MSTA_MASK                       (0x20U)
#define I2C_I2CR_MSTA_SHIFT                      (5U)
#define I2C_I2CR_IIEN_MASK                       (0x40U)
#define I2C_I2CR_IIEN_SHIFT                      (6U)
#define I2C_I2CR_IEN_MASK                        (0x80U)
#define I2C_I2CR_IEN_SHIFT                       (7U)
/*! @} */

/*! @name I2SR - I2C Status Register */
/*! @{ */
#define I2C_I2SR_RXAK_MASK                       (0x1U)
#define I2C_I2SR_RXAK_SHIFT                      (0U)
#define I2C_I2SR_IIF_MASK                        (0x2U)
#define I2C_I2SR_IIF_SHIFT                       (1U)
#define I2C_I2SR_SRW_MASK                        (0x4U)
#define I2C_I2SR_SRW_SHIFT                       (2U)
#define I2C_I2SR_IAL_MASK                        (0x10U)
#define I2C_I2SR_IAL_SHIFT                       (4U)
#define I2C_I2SR_IBB_MASK                        (0x20U)
#define I2C_I2SR_IBB_SHIFT                       (5U)
#define I2C_I2SR_IAAS_MASK                       (0x40U)
#define I2C_I2SR_IAAS_SHIFT                      (6U)
#define I2C_I2SR_ICF_MASK                        (0x80U)
#define I2C_I2SR_ICF_SHIFT                       (7U)
/*! @} */

/*! @name I2DR - I2C Data I/O Register */
/*! @{ */
#define I2C_I2DR_DATA_MASK                       (0xFFU)
#define I2C_I2DR_DATA_SHIFT                      (0U)
#define I2C_I2DR_DATA(x)                         (((uint16_t)(((uint16_t)(x)) << I2C_I2DR_DATA_SHIFT)) & I2C_I2DR_DATA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group I2C_Register_Masks */


/* I2C - Peripheral instance base addresses */
/** Peripheral I2C1 base pointer */
#define I2C1_BASE_PTR                            ((I2C_MemMapPtr)0x30A20000u)
/** Peripheral I2C2 base pointer */
#define I2C2_BASE_PTR                            ((I2C_MemMapPtr)0x30A30000u)
/** Peripheral I2C3 base pointer */
#define I2C3_BASE_PTR                            ((I2C_MemMapPtr)0x30A40000u)
/** Peripheral I2C4 base pointer */
#define I2C4_BASE_PTR                            ((I2C_MemMapPtr)0x30A50000u)
/** Array initializer of I2C peripheral base pointers */
#define I2C_BASE_PTRS                            { I2C1_BASE_PTR, I2C2_BASE_PTR, I2C3_BASE_PTR, I2C4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- I2C - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2C_Register_Accessor_Macros I2C - Register accessor macros
 * @{
 */


/* I2C - Register instance definitions */
/* I2C1 */
#define I2C1_IADR                                I2C_IADR_REG(I2C1_BASE_PTR)
#define I2C1_IFDR                                I2C_IFDR_REG(I2C1_BASE_PTR)
#define I2C1_I2CR                                I2C_I2CR_REG(I2C1_BASE_PTR)
#define I2C1_I2SR                                I2C_I2SR_REG(I2C1_BASE_PTR)
#define I2C1_I2DR                                I2C_I2DR_REG(I2C1_BASE_PTR)
/* I2C2 */
#define I2C2_IADR                                I2C_IADR_REG(I2C2_BASE_PTR)
#define I2C2_IFDR                                I2C_IFDR_REG(I2C2_BASE_PTR)
#define I2C2_I2CR                                I2C_I2CR_REG(I2C2_BASE_PTR)
#define I2C2_I2SR                                I2C_I2SR_REG(I2C2_BASE_PTR)
#define I2C2_I2DR                                I2C_I2DR_REG(I2C2_BASE_PTR)
/* I2C3 */
#define I2C3_IADR                                I2C_IADR_REG(I2C3_BASE_PTR)
#define I2C3_IFDR                                I2C_IFDR_REG(I2C3_BASE_PTR)
#define I2C3_I2CR                                I2C_I2CR_REG(I2C3_BASE_PTR)
#define I2C3_I2SR                                I2C_I2SR_REG(I2C3_BASE_PTR)
#define I2C3_I2DR                                I2C_I2DR_REG(I2C3_BASE_PTR)
/* I2C4 */
#define I2C4_IADR                                I2C_IADR_REG(I2C4_BASE_PTR)
#define I2C4_IFDR                                I2C_IFDR_REG(I2C4_BASE_PTR)
#define I2C4_I2CR                                I2C_I2CR_REG(I2C4_BASE_PTR)
#define I2C4_I2SR                                I2C_I2SR_REG(I2C4_BASE_PTR)
#define I2C4_I2DR                                I2C_I2DR_REG(I2C4_BASE_PTR)

/*!
 * @}
 */ /* end of group I2C_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2C_Peripheral */


/* ----------------------------------------------------------------------------
   -- I2S
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Peripheral I2S
 * @{
 */

/** I2S - Peripheral register structure */
typedef struct I2S_MemMap {
  uint32_t VERID;                                  /**< Version ID Register, offset: 0x0 */
  uint32_t PARAM;                                  /**< Parameter Register, offset: 0x4 */
  uint32_t TCSR;                                   /**< SAI Transmit Control Register, offset: 0x8 */
  uint32_t TCR1;                                   /**< SAI Transmit Configuration 1 Register, offset: 0xC */
  uint32_t TCR2;                                   /**< SAI Transmit Configuration 2 Register, offset: 0x10 */
  uint32_t TCR3;                                   /**< SAI Transmit Configuration 3 Register, offset: 0x14 */
  uint32_t TCR4;                                   /**< SAI Transmit Configuration 4 Register, offset: 0x18 */
  uint32_t TCR5;                                   /**< SAI Transmit Configuration 5 Register, offset: 0x1C */
  uint32_t TDR[4];                                 /**< SAI Transmit Data Register, array offset: 0x20, array step: 0x4 */
  uint8_t RESERVED_0[16];
  uint32_t TFR[4];                                 /**< SAI Transmit FIFO Register, array offset: 0x40, array step: 0x4 */
  uint8_t RESERVED_1[16];
  uint32_t TMR;                                    /**< SAI Transmit Mask Register, offset: 0x60 */
  uint8_t RESERVED_2[12];
  uint32_t TTCR;                                   /**< SAI Transmit Timestamp Control Register, offset: 0x70 */
  uint32_t TTSR;                                   /**< SAI Transmit Timestamp Register, offset: 0x74 */
  uint32_t TBCR;                                   /**< SAI Transmit Bit Count Register, offset: 0x78 */
  uint32_t TBCTR;                                  /**< SAI Transmit Bit Count Timestamp Register, offset: 0x7C */
  uint8_t RESERVED_3[8];
  uint32_t RCSR;                                   /**< SAI Receive Control Register, offset: 0x88 */
  uint32_t RCR1;                                   /**< SAI Receive Configuration 1 Register, offset: 0x8C */
  uint32_t RCR2;                                   /**< SAI Receive Configuration 2 Register, offset: 0x90 */
  uint32_t RCR3;                                   /**< SAI Receive Configuration 3 Register, offset: 0x94 */
  uint32_t RCR4;                                   /**< SAI Receive Configuration 4 Register, offset: 0x98 */
  uint32_t RCR5;                                   /**< SAI Receive Configuration 5 Register, offset: 0x9C */
  uint32_t RDR[4];                                 /**< SAI Receive Data Register, array offset: 0xA0, array step: 0x4 */
  uint8_t RESERVED_4[16];
  uint32_t RFR[4];                                 /**< SAI Receive FIFO Register, array offset: 0xC0, array step: 0x4 */
  uint8_t RESERVED_5[16];
  uint32_t RMR;                                    /**< SAI Receive Mask Register, offset: 0xE0 */
  uint8_t RESERVED_6[12];
  uint32_t RTCR;                                   /**< SAI Receive Timestamp Control Register, offset: 0xF0 */
  uint32_t RTSR;                                   /**< SAI Receive Timestamp Register, offset: 0xF4 */
  uint32_t RBCR;                                   /**< SAI Receive Bit Count Register, offset: 0xF8 */
  uint32_t RBCTR;                                  /**< SAI Receive Bit Count Timestamp Register, offset: 0xFC */
  uint32_t MCR;                                    /**< SAI MCLK Control Register, offset: 0x100 */
} volatile *I2S_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register accessors */
#define I2S_VERID_REG(base)                      ((base)->VERID)
#define I2S_PARAM_REG(base)                      ((base)->PARAM)
#define I2S_TCSR_REG(base)                       ((base)->TCSR)
#define I2S_TCR1_REG(base)                       ((base)->TCR1)
#define I2S_TCR2_REG(base)                       ((base)->TCR2)
#define I2S_TCR3_REG(base)                       ((base)->TCR3)
#define I2S_TCR4_REG(base)                       ((base)->TCR4)
#define I2S_TCR5_REG(base)                       ((base)->TCR5)
#define I2S_TDR_REG(base,index)                  ((base)->TDR[index])
#define I2S_TFR_REG(base,index)                  ((base)->TFR[index])
#define I2S_TMR_REG(base)                        ((base)->TMR)
#define I2S_TTCR_REG(base)                       ((base)->TTCR)
#define I2S_TTSR_REG(base)                       ((base)->TTSR)
#define I2S_TBCR_REG(base)                       ((base)->TBCR)
#define I2S_TBCTR_REG(base)                      ((base)->TBCTR)
#define I2S_RCSR_REG(base)                       ((base)->RCSR)
#define I2S_RCR1_REG(base)                       ((base)->RCR1)
#define I2S_RCR2_REG(base)                       ((base)->RCR2)
#define I2S_RCR3_REG(base)                       ((base)->RCR3)
#define I2S_RCR4_REG(base)                       ((base)->RCR4)
#define I2S_RCR5_REG(base)                       ((base)->RCR5)
#define I2S_RDR_REG(base,index)                  ((base)->RDR[index])
#define I2S_RFR_REG(base,index)                  ((base)->RFR[index])
#define I2S_RMR_REG(base)                        ((base)->RMR)
#define I2S_RTCR_REG(base)                       ((base)->RTCR)
#define I2S_RTSR_REG(base)                       ((base)->RTSR)
#define I2S_RBCR_REG(base)                       ((base)->RBCR)
#define I2S_RBCTR_REG(base)                      ((base)->RBCTR)
#define I2S_MCR_REG(base)                        ((base)->MCR)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- I2S Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Masks I2S Register Masks
 * @{
 */

/*! @name VERID - Version ID Register */
/*! @{ */
#define I2S_VERID_FEATURE_MASK                   (0xFFFFU)
#define I2S_VERID_FEATURE_SHIFT                  (0U)
/*! FEATURE - Feature Specification Number
 *  0b0000000000000000..Standard feature set.
 *  0b0000000000000010..Standard feature set with Timestamp Registers.
 */
#define I2S_VERID_FEATURE(x)                     (((uint32_t)(((uint32_t)(x)) << I2S_VERID_FEATURE_SHIFT)) & I2S_VERID_FEATURE_MASK)
#define I2S_VERID_MINOR_MASK                     (0xFF0000U)
#define I2S_VERID_MINOR_SHIFT                    (16U)
#define I2S_VERID_MINOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MINOR_SHIFT)) & I2S_VERID_MINOR_MASK)
#define I2S_VERID_MAJOR_MASK                     (0xFF000000U)
#define I2S_VERID_MAJOR_SHIFT                    (24U)
#define I2S_VERID_MAJOR(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_VERID_MAJOR_SHIFT)) & I2S_VERID_MAJOR_MASK)
/*! @} */

/*! @name PARAM - Parameter Register */
/*! @{ */
#define I2S_PARAM_DATALINE_MASK                  (0xFU)
#define I2S_PARAM_DATALINE_SHIFT                 (0U)
#define I2S_PARAM_DATALINE(x)                    (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_DATALINE_SHIFT)) & I2S_PARAM_DATALINE_MASK)
#define I2S_PARAM_FIFO_MASK                      (0xF00U)
#define I2S_PARAM_FIFO_SHIFT                     (8U)
#define I2S_PARAM_FIFO(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FIFO_SHIFT)) & I2S_PARAM_FIFO_MASK)
#define I2S_PARAM_FRAME_MASK                     (0xF0000U)
#define I2S_PARAM_FRAME_SHIFT                    (16U)
#define I2S_PARAM_FRAME(x)                       (((uint32_t)(((uint32_t)(x)) << I2S_PARAM_FRAME_SHIFT)) & I2S_PARAM_FRAME_MASK)
/*! @} */

/*! @name TCSR - SAI Transmit Control Register */
/*! @{ */
#define I2S_TCSR_FRDE_MASK                       (0x1U)
#define I2S_TCSR_FRDE_SHIFT                      (0U)
#define I2S_TCSR_FWDE_MASK                       (0x2U)
#define I2S_TCSR_FWDE_SHIFT                      (1U)
#define I2S_TCSR_FRIE_MASK                       (0x100U)
#define I2S_TCSR_FRIE_SHIFT                      (8U)
#define I2S_TCSR_FWIE_MASK                       (0x200U)
#define I2S_TCSR_FWIE_SHIFT                      (9U)
#define I2S_TCSR_FEIE_MASK                       (0x400U)
#define I2S_TCSR_FEIE_SHIFT                      (10U)
#define I2S_TCSR_SEIE_MASK                       (0x800U)
#define I2S_TCSR_SEIE_SHIFT                      (11U)
#define I2S_TCSR_WSIE_MASK                       (0x1000U)
#define I2S_TCSR_WSIE_SHIFT                      (12U)
#define I2S_TCSR_FRF_MASK                        (0x10000U)
#define I2S_TCSR_FRF_SHIFT                       (16U)
#define I2S_TCSR_FWF_MASK                        (0x20000U)
#define I2S_TCSR_FWF_SHIFT                       (17U)
#define I2S_TCSR_FEF_MASK                        (0x40000U)
#define I2S_TCSR_FEF_SHIFT                       (18U)
#define I2S_TCSR_SEF_MASK                        (0x80000U)
#define I2S_TCSR_SEF_SHIFT                       (19U)
#define I2S_TCSR_WSF_MASK                        (0x100000U)
#define I2S_TCSR_WSF_SHIFT                       (20U)
#define I2S_TCSR_SR_MASK                         (0x1000000U)
#define I2S_TCSR_SR_SHIFT                        (24U)
#define I2S_TCSR_FR_MASK                         (0x2000000U)
#define I2S_TCSR_FR_SHIFT                        (25U)
#define I2S_TCSR_BCE_MASK                        (0x10000000U)
#define I2S_TCSR_BCE_SHIFT                       (28U)
#define I2S_TCSR_DBGE_MASK                       (0x20000000U)
#define I2S_TCSR_DBGE_SHIFT                      (29U)
#define I2S_TCSR_TE_MASK                         (0x80000000U)
#define I2S_TCSR_TE_SHIFT                        (31U)
/*! @} */

/*! @name TCR1 - SAI Transmit Configuration 1 Register */
/*! @{ */
#define I2S_TCR1_TFW_MASK                        (0x7FU)
#define I2S_TCR1_TFW_SHIFT                       (0U)
#define I2S_TCR1_TFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR1_TFW_SHIFT)) & I2S_TCR1_TFW_MASK)
/*! @} */

/*! @name TCR2 - SAI Transmit Configuration 2 Register */
/*! @{ */
#define I2S_TCR2_DIV_MASK                        (0xFFU)
#define I2S_TCR2_DIV_SHIFT                       (0U)
#define I2S_TCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_DIV_SHIFT)) & I2S_TCR2_DIV_MASK)
#define I2S_TCR2_BYP_MASK                        (0x800000U)
#define I2S_TCR2_BYP_SHIFT                       (23U)
#define I2S_TCR2_BCD_MASK                        (0x1000000U)
#define I2S_TCR2_BCD_SHIFT                       (24U)
#define I2S_TCR2_BCP_MASK                        (0x2000000U)
#define I2S_TCR2_BCP_SHIFT                       (25U)
#define I2S_TCR2_MSEL_MASK                       (0xC000000U)
#define I2S_TCR2_MSEL_SHIFT                      (26U)
/*! MSEL - MCLK Select
 *  0b00..Bus Clock selected.
 *  0b01..Master Clock (MCLK) 1 option selected.
 *  0b10..Master Clock (MCLK) 2 option selected.
 *  0b11..Master Clock (MCLK) 3 option selected.
 */
#define I2S_TCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_MSEL_SHIFT)) & I2S_TCR2_MSEL_MASK)
#define I2S_TCR2_BCI_MASK                        (0x10000000U)
#define I2S_TCR2_BCI_SHIFT                       (28U)
#define I2S_TCR2_BCS_MASK                        (0x20000000U)
#define I2S_TCR2_BCS_SHIFT                       (29U)
#define I2S_TCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_TCR2_SYNC_SHIFT                      (30U)
/*! SYNC - Synchronous Mode
 *  0b00..Asynchronous mode.
 *  0b01..Synchronous with receiver.
 *  0b10..Reserved.
 *  0b11..Reserved.
 */
#define I2S_TCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR2_SYNC_SHIFT)) & I2S_TCR2_SYNC_MASK)
/*! @} */

/*! @name TCR3 - SAI Transmit Configuration 3 Register */
/*! @{ */
#define I2S_TCR3_WDFL_MASK                       (0x1FU)
#define I2S_TCR3_WDFL_SHIFT                      (0U)
#define I2S_TCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_WDFL_SHIFT)) & I2S_TCR3_WDFL_MASK)
#define I2S_TCR3_TCE_MASK                        (0xF0000U)
#define I2S_TCR3_TCE_SHIFT                       (16U)
#define I2S_TCR3_TCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_TCE_SHIFT)) & I2S_TCR3_TCE_MASK)
#define I2S_TCR3_CFR_MASK                        (0xF000000U)
#define I2S_TCR3_CFR_SHIFT                       (24U)
#define I2S_TCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR3_CFR_SHIFT)) & I2S_TCR3_CFR_MASK)
/*! @} */

/*! @name TCR4 - SAI Transmit Configuration 4 Register */
/*! @{ */
#define I2S_TCR4_FSD_MASK                        (0x1U)
#define I2S_TCR4_FSD_SHIFT                       (0U)
#define I2S_TCR4_FSP_MASK                        (0x2U)
#define I2S_TCR4_FSP_SHIFT                       (1U)
#define I2S_TCR4_ONDEM_MASK                      (0x4U)
#define I2S_TCR4_ONDEM_SHIFT                     (2U)
#define I2S_TCR4_FSE_MASK                        (0x8U)
#define I2S_TCR4_FSE_SHIFT                       (3U)
#define I2S_TCR4_MF_MASK                         (0x10U)
#define I2S_TCR4_MF_SHIFT                        (4U)
#define I2S_TCR4_CHMOD_MASK                      (0x20U)
#define I2S_TCR4_CHMOD_SHIFT                     (5U)
#define I2S_TCR4_SYWD_MASK                       (0x1F00U)
#define I2S_TCR4_SYWD_SHIFT                      (8U)
#define I2S_TCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_SYWD_SHIFT)) & I2S_TCR4_SYWD_MASK)
#define I2S_TCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_TCR4_FRSZ_SHIFT                      (16U)
#define I2S_TCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FRSZ_SHIFT)) & I2S_TCR4_FRSZ_MASK)
#define I2S_TCR4_FPACK_MASK                      (0x3000000U)
#define I2S_TCR4_FPACK_SHIFT                     (24U)
/*! FPACK - FIFO Packing Mode
 *  0b00..FIFO packing is disabled
 *  0b01..Reserved
 *  0b10..8-bit FIFO packing is enabled
 *  0b11..16-bit FIFO packing is enabled
 */
#define I2S_TCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FPACK_SHIFT)) & I2S_TCR4_FPACK_MASK)
#define I2S_TCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_TCR4_FCOMB_SHIFT                     (26U)
/*! FCOMB - FIFO Combine Mode
 *  0b00..FIFO combine mode disabled.
 *  0b01..FIFO combine mode enabled on FIFO reads (from transmit shift registers).
 *  0b10..FIFO combine mode enabled on FIFO writes (by software).
 *  0b11..FIFO combine mode enabled on FIFO reads (from transmit shift registers) and writes (by software).
 */
#define I2S_TCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TCR4_FCOMB_SHIFT)) & I2S_TCR4_FCOMB_MASK)
#define I2S_TCR4_FCONT_MASK                      (0x10000000U)
#define I2S_TCR4_FCONT_SHIFT                     (28U)
/*! @} */

/*! @name TCR5 - SAI Transmit Configuration 5 Register */
/*! @{ */
#define I2S_TCR5_FBT_MASK                        (0x1F00U)
#define I2S_TCR5_FBT_SHIFT                       (8U)
#define I2S_TCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_FBT_SHIFT)) & I2S_TCR5_FBT_MASK)
#define I2S_TCR5_W0W_MASK                        (0x1F0000U)
#define I2S_TCR5_W0W_SHIFT                       (16U)
#define I2S_TCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_W0W_SHIFT)) & I2S_TCR5_W0W_MASK)
#define I2S_TCR5_WNW_MASK                        (0x1F000000U)
#define I2S_TCR5_WNW_SHIFT                       (24U)
#define I2S_TCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TCR5_WNW_SHIFT)) & I2S_TCR5_WNW_MASK)
/*! @} */

/*! @name TDR - SAI Transmit Data Register */
/*! @{ */
#define I2S_TDR_TDR_MASK                         (0xFFFFFFFFU)
#define I2S_TDR_TDR_SHIFT                        (0U)
#define I2S_TDR_TDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TDR_TDR_SHIFT)) & I2S_TDR_TDR_MASK)
/*! @} */

/* The count of I2S_TDR */
#define I2S_TDR_COUNT                            (4U)

/*! @name TFR - SAI Transmit FIFO Register */
/*! @{ */
#define I2S_TFR_RFP_MASK                         (0xFFU)
#define I2S_TFR_RFP_SHIFT                        (0U)
#define I2S_TFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_RFP_SHIFT)) & I2S_TFR_RFP_MASK)
#define I2S_TFR_WFP_MASK                         (0xFF0000U)
#define I2S_TFR_WFP_SHIFT                        (16U)
#define I2S_TFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TFR_WFP_SHIFT)) & I2S_TFR_WFP_MASK)
#define I2S_TFR_WCP_MASK                         (0x80000000U)
#define I2S_TFR_WCP_SHIFT                        (31U)
/*! @} */

/* The count of I2S_TFR */
#define I2S_TFR_COUNT                            (4U)

/*! @name TMR - SAI Transmit Mask Register */
/*! @{ */
#define I2S_TMR_TWM_MASK                         (0xFFFFFFFFU)
#define I2S_TMR_TWM_SHIFT                        (0U)
/*! TWM - Transmit Word Mask
 *  0b00000000000000000000000000000000..Word N is enabled.
 *  0b00000000000000000000000000000001..Word N is masked. The transmit data pins are tri-stated or drive zero when masked.
 */
#define I2S_TMR_TWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_TMR_TWM_SHIFT)) & I2S_TMR_TWM_MASK)
/*! @} */

/*! @name TTCR - SAI Transmit Timestamp Control Register */
/*! @{ */
#define I2S_TTCR_TSEN_MASK                       (0x1U)
#define I2S_TTCR_TSEN_SHIFT                      (0U)
#define I2S_TTCR_TSINC_MASK                      (0x2U)
#define I2S_TTCR_TSINC_SHIFT                     (1U)
#define I2S_TTCR_RTSC_MASK                       (0x100U)
#define I2S_TTCR_RTSC_SHIFT                      (8U)
#define I2S_TTCR_RBC_MASK                        (0x200U)
#define I2S_TTCR_RBC_SHIFT                       (9U)
/*! @} */

/*! @name TTSR - SAI Transmit Timestamp Register */
/*! @{ */
#define I2S_TTSR_TSC_MASK                        (0xFFFFFFFFU)
#define I2S_TTSR_TSC_SHIFT                       (0U)
#define I2S_TTSR_TSC(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_TTSR_TSC_SHIFT)) & I2S_TTSR_TSC_MASK)
/*! @} */

/*! @name TBCR - SAI Transmit Bit Count Register */
/*! @{ */
#define I2S_TBCR_BCNT_MASK                       (0xFFFFFFFFU)
#define I2S_TBCR_BCNT_SHIFT                      (0U)
#define I2S_TBCR_BCNT(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_TBCR_BCNT_SHIFT)) & I2S_TBCR_BCNT_MASK)
/*! @} */

/*! @name TBCTR - SAI Transmit Bit Count Timestamp Register */
/*! @{ */
#define I2S_TBCTR_BCTS_MASK                      (0xFFFFFFFFU)
#define I2S_TBCTR_BCTS_SHIFT                     (0U)
#define I2S_TBCTR_BCTS(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_TBCTR_BCTS_SHIFT)) & I2S_TBCTR_BCTS_MASK)
/*! @} */

/*! @name RCSR - SAI Receive Control Register */
/*! @{ */
#define I2S_RCSR_FRDE_MASK                       (0x1U)
#define I2S_RCSR_FRDE_SHIFT                      (0U)
#define I2S_RCSR_FWDE_MASK                       (0x2U)
#define I2S_RCSR_FWDE_SHIFT                      (1U)
#define I2S_RCSR_FRIE_MASK                       (0x100U)
#define I2S_RCSR_FRIE_SHIFT                      (8U)
#define I2S_RCSR_FWIE_MASK                       (0x200U)
#define I2S_RCSR_FWIE_SHIFT                      (9U)
#define I2S_RCSR_FEIE_MASK                       (0x400U)
#define I2S_RCSR_FEIE_SHIFT                      (10U)
#define I2S_RCSR_SEIE_MASK                       (0x800U)
#define I2S_RCSR_SEIE_SHIFT                      (11U)
#define I2S_RCSR_WSIE_MASK                       (0x1000U)
#define I2S_RCSR_WSIE_SHIFT                      (12U)
#define I2S_RCSR_FRF_MASK                        (0x10000U)
#define I2S_RCSR_FRF_SHIFT                       (16U)
#define I2S_RCSR_FWF_MASK                        (0x20000U)
#define I2S_RCSR_FWF_SHIFT                       (17U)
#define I2S_RCSR_FEF_MASK                        (0x40000U)
#define I2S_RCSR_FEF_SHIFT                       (18U)
#define I2S_RCSR_SEF_MASK                        (0x80000U)
#define I2S_RCSR_SEF_SHIFT                       (19U)
#define I2S_RCSR_WSF_MASK                        (0x100000U)
#define I2S_RCSR_WSF_SHIFT                       (20U)
#define I2S_RCSR_SR_MASK                         (0x1000000U)
#define I2S_RCSR_SR_SHIFT                        (24U)
#define I2S_RCSR_FR_MASK                         (0x2000000U)
#define I2S_RCSR_FR_SHIFT                        (25U)
#define I2S_RCSR_BCE_MASK                        (0x10000000U)
#define I2S_RCSR_BCE_SHIFT                       (28U)
#define I2S_RCSR_DBGE_MASK                       (0x20000000U)
#define I2S_RCSR_DBGE_SHIFT                      (29U)
#define I2S_RCSR_RE_MASK                         (0x80000000U)
#define I2S_RCSR_RE_SHIFT                        (31U)
/*! @} */

/*! @name RCR1 - SAI Receive Configuration 1 Register */
/*! @{ */
#define I2S_RCR1_RFW_MASK                        (0x7FU)
#define I2S_RCR1_RFW_SHIFT                       (0U)
#define I2S_RCR1_RFW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR1_RFW_SHIFT)) & I2S_RCR1_RFW_MASK)
/*! @} */

/*! @name RCR2 - SAI Receive Configuration 2 Register */
/*! @{ */
#define I2S_RCR2_DIV_MASK                        (0xFFU)
#define I2S_RCR2_DIV_SHIFT                       (0U)
#define I2S_RCR2_DIV(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_DIV_SHIFT)) & I2S_RCR2_DIV_MASK)
#define I2S_RCR2_BYP_MASK                        (0x800000U)
#define I2S_RCR2_BYP_SHIFT                       (23U)
#define I2S_RCR2_BCD_MASK                        (0x1000000U)
#define I2S_RCR2_BCD_SHIFT                       (24U)
#define I2S_RCR2_BCP_MASK                        (0x2000000U)
#define I2S_RCR2_BCP_SHIFT                       (25U)
#define I2S_RCR2_MSEL_MASK                       (0xC000000U)
#define I2S_RCR2_MSEL_SHIFT                      (26U)
/*! MSEL - MCLK Select
 *  0b00..Bus Clock selected.
 *  0b01..Master Clock (MCLK) 1 option selected.
 *  0b10..Master Clock (MCLK) 2 option selected.
 *  0b11..Master Clock (MCLK) 3 option selected.
 */
#define I2S_RCR2_MSEL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_MSEL_SHIFT)) & I2S_RCR2_MSEL_MASK)
#define I2S_RCR2_BCI_MASK                        (0x10000000U)
#define I2S_RCR2_BCI_SHIFT                       (28U)
#define I2S_RCR2_BCS_MASK                        (0x20000000U)
#define I2S_RCR2_BCS_SHIFT                       (29U)
#define I2S_RCR2_SYNC_MASK                       (0xC0000000U)
#define I2S_RCR2_SYNC_SHIFT                      (30U)
/*! SYNC - Synchronous Mode
 *  0b00..Asynchronous mode.
 *  0b01..Synchronous with transmitter.
 *  0b10..Reserved.
 *  0b11..Reserved.
 */
#define I2S_RCR2_SYNC(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR2_SYNC_SHIFT)) & I2S_RCR2_SYNC_MASK)
/*! @} */

/*! @name RCR3 - SAI Receive Configuration 3 Register */
/*! @{ */
#define I2S_RCR3_WDFL_MASK                       (0x1FU)
#define I2S_RCR3_WDFL_SHIFT                      (0U)
#define I2S_RCR3_WDFL(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_WDFL_SHIFT)) & I2S_RCR3_WDFL_MASK)
#define I2S_RCR3_RCE_MASK                        (0xF0000U)
#define I2S_RCR3_RCE_SHIFT                       (16U)
#define I2S_RCR3_RCE(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_RCE_SHIFT)) & I2S_RCR3_RCE_MASK)
#define I2S_RCR3_CFR_MASK                        (0xF000000U)
#define I2S_RCR3_CFR_SHIFT                       (24U)
#define I2S_RCR3_CFR(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR3_CFR_SHIFT)) & I2S_RCR3_CFR_MASK)
/*! @} */

/*! @name RCR4 - SAI Receive Configuration 4 Register */
/*! @{ */
#define I2S_RCR4_FSD_MASK                        (0x1U)
#define I2S_RCR4_FSD_SHIFT                       (0U)
#define I2S_RCR4_FSP_MASK                        (0x2U)
#define I2S_RCR4_FSP_SHIFT                       (1U)
#define I2S_RCR4_ONDEM_MASK                      (0x4U)
#define I2S_RCR4_ONDEM_SHIFT                     (2U)
#define I2S_RCR4_FSE_MASK                        (0x8U)
#define I2S_RCR4_FSE_SHIFT                       (3U)
#define I2S_RCR4_MF_MASK                         (0x10U)
#define I2S_RCR4_MF_SHIFT                        (4U)
#define I2S_RCR4_SYWD_MASK                       (0x1F00U)
#define I2S_RCR4_SYWD_SHIFT                      (8U)
#define I2S_RCR4_SYWD(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_SYWD_SHIFT)) & I2S_RCR4_SYWD_MASK)
#define I2S_RCR4_FRSZ_MASK                       (0x1F0000U)
#define I2S_RCR4_FRSZ_SHIFT                      (16U)
#define I2S_RCR4_FRSZ(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FRSZ_SHIFT)) & I2S_RCR4_FRSZ_MASK)
#define I2S_RCR4_FPACK_MASK                      (0x3000000U)
#define I2S_RCR4_FPACK_SHIFT                     (24U)
/*! FPACK - FIFO Packing Mode
 *  0b00..FIFO packing is disabled
 *  0b01..Reserved.
 *  0b10..8-bit FIFO packing is enabled
 *  0b11..16-bit FIFO packing is enabled
 */
#define I2S_RCR4_FPACK(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FPACK_SHIFT)) & I2S_RCR4_FPACK_MASK)
#define I2S_RCR4_FCOMB_MASK                      (0xC000000U)
#define I2S_RCR4_FCOMB_SHIFT                     (26U)
/*! FCOMB - FIFO Combine Mode
 *  0b00..FIFO combine mode disabled.
 *  0b01..FIFO combine mode enabled on FIFO writes (from receive shift registers).
 *  0b10..FIFO combine mode enabled on FIFO reads (by software).
 *  0b11..FIFO combine mode enabled on FIFO writes (from receive shift registers) and reads (by software).
 */
#define I2S_RCR4_FCOMB(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RCR4_FCOMB_SHIFT)) & I2S_RCR4_FCOMB_MASK)
#define I2S_RCR4_FCONT_MASK                      (0x10000000U)
#define I2S_RCR4_FCONT_SHIFT                     (28U)
/*! @} */

/*! @name RCR5 - SAI Receive Configuration 5 Register */
/*! @{ */
#define I2S_RCR5_FBT_MASK                        (0x1F00U)
#define I2S_RCR5_FBT_SHIFT                       (8U)
#define I2S_RCR5_FBT(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_FBT_SHIFT)) & I2S_RCR5_FBT_MASK)
#define I2S_RCR5_W0W_MASK                        (0x1F0000U)
#define I2S_RCR5_W0W_SHIFT                       (16U)
#define I2S_RCR5_W0W(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_W0W_SHIFT)) & I2S_RCR5_W0W_MASK)
#define I2S_RCR5_WNW_MASK                        (0x1F000000U)
#define I2S_RCR5_WNW_SHIFT                       (24U)
#define I2S_RCR5_WNW(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RCR5_WNW_SHIFT)) & I2S_RCR5_WNW_MASK)
/*! @} */

/*! @name RDR - SAI Receive Data Register */
/*! @{ */
#define I2S_RDR_RDR_MASK                         (0xFFFFFFFFU)
#define I2S_RDR_RDR_SHIFT                        (0U)
#define I2S_RDR_RDR(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RDR_RDR_SHIFT)) & I2S_RDR_RDR_MASK)
/*! @} */

/* The count of I2S_RDR */
#define I2S_RDR_COUNT                            (4U)

/*! @name RFR - SAI Receive FIFO Register */
/*! @{ */
#define I2S_RFR_RFP_MASK                         (0xFFU)
#define I2S_RFR_RFP_SHIFT                        (0U)
#define I2S_RFR_RFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_RFP_SHIFT)) & I2S_RFR_RFP_MASK)
#define I2S_RFR_RCP_MASK                         (0x8000U)
#define I2S_RFR_RCP_SHIFT                        (15U)
#define I2S_RFR_WFP_MASK                         (0xFF0000U)
#define I2S_RFR_WFP_SHIFT                        (16U)
#define I2S_RFR_WFP(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RFR_WFP_SHIFT)) & I2S_RFR_WFP_MASK)
/*! @} */

/* The count of I2S_RFR */
#define I2S_RFR_COUNT                            (4U)

/*! @name RMR - SAI Receive Mask Register */
/*! @{ */
#define I2S_RMR_RWM_MASK                         (0xFFFFFFFFU)
#define I2S_RMR_RWM_SHIFT                        (0U)
/*! RWM - Receive Word Mask
 *  0b00000000000000000000000000000000..Word N is enabled.
 *  0b00000000000000000000000000000001..Word N is masked.
 */
#define I2S_RMR_RWM(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_RMR_RWM_SHIFT)) & I2S_RMR_RWM_MASK)
/*! @} */

/*! @name RTCR - SAI Receive Timestamp Control Register */
/*! @{ */
#define I2S_RTCR_TSEN_MASK                       (0x1U)
#define I2S_RTCR_TSEN_SHIFT                      (0U)
#define I2S_RTCR_TSINC_MASK                      (0x2U)
#define I2S_RTCR_TSINC_SHIFT                     (1U)
#define I2S_RTCR_RTSC_MASK                       (0x100U)
#define I2S_RTCR_RTSC_SHIFT                      (8U)
#define I2S_RTCR_RBC_MASK                        (0x200U)
#define I2S_RTCR_RBC_SHIFT                       (9U)
/*! @} */

/*! @name RTSR - SAI Receive Timestamp Register */
/*! @{ */
#define I2S_RTSR_TSC_MASK                        (0xFFFFFFFFU)
#define I2S_RTSR_TSC_SHIFT                       (0U)
#define I2S_RTSR_TSC(x)                          (((uint32_t)(((uint32_t)(x)) << I2S_RTSR_TSC_SHIFT)) & I2S_RTSR_TSC_MASK)
/*! @} */

/*! @name RBCR - SAI Receive Bit Count Register */
/*! @{ */
#define I2S_RBCR_BCNT_MASK                       (0xFFFFFFFFU)
#define I2S_RBCR_BCNT_SHIFT                      (0U)
#define I2S_RBCR_BCNT(x)                         (((uint32_t)(((uint32_t)(x)) << I2S_RBCR_BCNT_SHIFT)) & I2S_RBCR_BCNT_MASK)
/*! @} */

/*! @name RBCTR - SAI Receive Bit Count Timestamp Register */
/*! @{ */
#define I2S_RBCTR_BCTS_MASK                      (0xFFFFFFFFU)
#define I2S_RBCTR_BCTS_SHIFT                     (0U)
#define I2S_RBCTR_BCTS(x)                        (((uint32_t)(((uint32_t)(x)) << I2S_RBCTR_BCTS_SHIFT)) & I2S_RBCTR_BCTS_MASK)
/*! @} */

/*! @name MCR - SAI MCLK Control Register */
/*! @{ */
#define I2S_MCR_DIV_MASK                         (0xFFU)
#define I2S_MCR_DIV_SHIFT                        (0U)
#define I2S_MCR_DIV(x)                           (((uint32_t)(((uint32_t)(x)) << I2S_MCR_DIV_SHIFT)) & I2S_MCR_DIV_MASK)
#define I2S_MCR_DIVEN_MASK                       (0x800000U)
#define I2S_MCR_DIVEN_SHIFT                      (23U)
#define I2S_MCR_MOE_MASK                         (0x40000000U)
#define I2S_MCR_MOE_SHIFT                        (30U)
/*! @} */


/*!
 * @}
 */ /* end of group I2S_Register_Masks */


/* I2S - Peripheral instance base addresses */
/** Peripheral I2S2 base pointer */
#define I2S2_BASE_PTR                            ((I2S_MemMapPtr)0x30020000u)
/** Peripheral I2S3 base pointer */
#define I2S3_BASE_PTR                            ((I2S_MemMapPtr)0x30030000u)
/** Peripheral I2S5 base pointer */
#define I2S5_BASE_PTR                            ((I2S_MemMapPtr)0x30050000u)
/** Peripheral I2S6 base pointer */
#define I2S6_BASE_PTR                            ((I2S_MemMapPtr)0x30060000u)
/** Peripheral I2S7 base pointer */
#define I2S7_BASE_PTR                            ((I2S_MemMapPtr)0x300B0000u)
/** Array initializer of I2S peripheral base pointers */
#define I2S_BASE_PTRS                            { I2S2_BASE_PTR, I2S3_BASE_PTR, I2S5_BASE_PTR, I2S6_BASE_PTR, I2S7_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- I2S - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup I2S_Register_Accessor_Macros I2S - Register accessor macros
 * @{
 */


/* I2S - Register instance definitions */
/* I2S2 */
#define I2S2_VERID                               I2S_VERID_REG(I2S2_BASE_PTR)
#define I2S2_PARAM                               I2S_PARAM_REG(I2S2_BASE_PTR)
#define I2S2_TCSR                                I2S_TCSR_REG(I2S2_BASE_PTR)
#define I2S2_TCR1                                I2S_TCR1_REG(I2S2_BASE_PTR)
#define I2S2_TCR2                                I2S_TCR2_REG(I2S2_BASE_PTR)
#define I2S2_TCR3                                I2S_TCR3_REG(I2S2_BASE_PTR)
#define I2S2_TCR4                                I2S_TCR4_REG(I2S2_BASE_PTR)
#define I2S2_TCR5                                I2S_TCR5_REG(I2S2_BASE_PTR)
#define I2S2_TDR0                                I2S_TDR_REG(I2S2_BASE_PTR,0)
#define I2S2_TDR1                                I2S_TDR_REG(I2S2_BASE_PTR,1)
#define I2S2_TDR2                                I2S_TDR_REG(I2S2_BASE_PTR,2)
#define I2S2_TDR3                                I2S_TDR_REG(I2S2_BASE_PTR,3)
#define I2S2_TFR0                                I2S_TFR_REG(I2S2_BASE_PTR,0)
#define I2S2_TFR1                                I2S_TFR_REG(I2S2_BASE_PTR,1)
#define I2S2_TFR2                                I2S_TFR_REG(I2S2_BASE_PTR,2)
#define I2S2_TFR3                                I2S_TFR_REG(I2S2_BASE_PTR,3)
#define I2S2_TMR                                 I2S_TMR_REG(I2S2_BASE_PTR)
#define I2S2_TTCR                                I2S_TTCR_REG(I2S2_BASE_PTR)
#define I2S2_TTSR                                I2S_TTSR_REG(I2S2_BASE_PTR)
#define I2S2_TBCR                                I2S_TBCR_REG(I2S2_BASE_PTR)
#define I2S2_TBCTR                               I2S_TBCTR_REG(I2S2_BASE_PTR)
#define I2S2_RCSR                                I2S_RCSR_REG(I2S2_BASE_PTR)
#define I2S2_RCR1                                I2S_RCR1_REG(I2S2_BASE_PTR)
#define I2S2_RCR2                                I2S_RCR2_REG(I2S2_BASE_PTR)
#define I2S2_RCR3                                I2S_RCR3_REG(I2S2_BASE_PTR)
#define I2S2_RCR4                                I2S_RCR4_REG(I2S2_BASE_PTR)
#define I2S2_RCR5                                I2S_RCR5_REG(I2S2_BASE_PTR)
#define I2S2_RDR0                                I2S_RDR_REG(I2S2_BASE_PTR,0)
#define I2S2_RDR1                                I2S_RDR_REG(I2S2_BASE_PTR,1)
#define I2S2_RDR2                                I2S_RDR_REG(I2S2_BASE_PTR,2)
#define I2S2_RDR3                                I2S_RDR_REG(I2S2_BASE_PTR,3)
#define I2S2_RFR0                                I2S_RFR_REG(I2S2_BASE_PTR,0)
#define I2S2_RFR1                                I2S_RFR_REG(I2S2_BASE_PTR,1)
#define I2S2_RFR2                                I2S_RFR_REG(I2S2_BASE_PTR,2)
#define I2S2_RFR3                                I2S_RFR_REG(I2S2_BASE_PTR,3)
#define I2S2_RMR                                 I2S_RMR_REG(I2S2_BASE_PTR)
#define I2S2_RTCR                                I2S_RTCR_REG(I2S2_BASE_PTR)
#define I2S2_RTSR                                I2S_RTSR_REG(I2S2_BASE_PTR)
#define I2S2_RBCR                                I2S_RBCR_REG(I2S2_BASE_PTR)
#define I2S2_RBCTR                               I2S_RBCTR_REG(I2S2_BASE_PTR)
#define I2S2_MCR                                 I2S_MCR_REG(I2S2_BASE_PTR)
/* I2S3 */
#define I2S3_VERID                               I2S_VERID_REG(I2S3_BASE_PTR)
#define I2S3_PARAM                               I2S_PARAM_REG(I2S3_BASE_PTR)
#define I2S3_TCSR                                I2S_TCSR_REG(I2S3_BASE_PTR)
#define I2S3_TCR1                                I2S_TCR1_REG(I2S3_BASE_PTR)
#define I2S3_TCR2                                I2S_TCR2_REG(I2S3_BASE_PTR)
#define I2S3_TCR3                                I2S_TCR3_REG(I2S3_BASE_PTR)
#define I2S3_TCR4                                I2S_TCR4_REG(I2S3_BASE_PTR)
#define I2S3_TCR5                                I2S_TCR5_REG(I2S3_BASE_PTR)
#define I2S3_TDR0                                I2S_TDR_REG(I2S3_BASE_PTR,0)
#define I2S3_TDR1                                I2S_TDR_REG(I2S3_BASE_PTR,1)
#define I2S3_TDR2                                I2S_TDR_REG(I2S3_BASE_PTR,2)
#define I2S3_TDR3                                I2S_TDR_REG(I2S3_BASE_PTR,3)
#define I2S3_TFR0                                I2S_TFR_REG(I2S3_BASE_PTR,0)
#define I2S3_TFR1                                I2S_TFR_REG(I2S3_BASE_PTR,1)
#define I2S3_TFR2                                I2S_TFR_REG(I2S3_BASE_PTR,2)
#define I2S3_TFR3                                I2S_TFR_REG(I2S3_BASE_PTR,3)
#define I2S3_TMR                                 I2S_TMR_REG(I2S3_BASE_PTR)
#define I2S3_TTCR                                I2S_TTCR_REG(I2S3_BASE_PTR)
#define I2S3_TTSR                                I2S_TTSR_REG(I2S3_BASE_PTR)
#define I2S3_TBCR                                I2S_TBCR_REG(I2S3_BASE_PTR)
#define I2S3_TBCTR                               I2S_TBCTR_REG(I2S3_BASE_PTR)
#define I2S3_RCSR                                I2S_RCSR_REG(I2S3_BASE_PTR)
#define I2S3_RCR1                                I2S_RCR1_REG(I2S3_BASE_PTR)
#define I2S3_RCR2                                I2S_RCR2_REG(I2S3_BASE_PTR)
#define I2S3_RCR3                                I2S_RCR3_REG(I2S3_BASE_PTR)
#define I2S3_RCR4                                I2S_RCR4_REG(I2S3_BASE_PTR)
#define I2S3_RCR5                                I2S_RCR5_REG(I2S3_BASE_PTR)
#define I2S3_RDR0                                I2S_RDR_REG(I2S3_BASE_PTR,0)
#define I2S3_RDR1                                I2S_RDR_REG(I2S3_BASE_PTR,1)
#define I2S3_RDR2                                I2S_RDR_REG(I2S3_BASE_PTR,2)
#define I2S3_RDR3                                I2S_RDR_REG(I2S3_BASE_PTR,3)
#define I2S3_RFR0                                I2S_RFR_REG(I2S3_BASE_PTR,0)
#define I2S3_RFR1                                I2S_RFR_REG(I2S3_BASE_PTR,1)
#define I2S3_RFR2                                I2S_RFR_REG(I2S3_BASE_PTR,2)
#define I2S3_RFR3                                I2S_RFR_REG(I2S3_BASE_PTR,3)
#define I2S3_RMR                                 I2S_RMR_REG(I2S3_BASE_PTR)
#define I2S3_RTCR                                I2S_RTCR_REG(I2S3_BASE_PTR)
#define I2S3_RTSR                                I2S_RTSR_REG(I2S3_BASE_PTR)
#define I2S3_RBCR                                I2S_RBCR_REG(I2S3_BASE_PTR)
#define I2S3_RBCTR                               I2S_RBCTR_REG(I2S3_BASE_PTR)
#define I2S3_MCR                                 I2S_MCR_REG(I2S3_BASE_PTR)
/* I2S5 */
#define I2S5_VERID                               I2S_VERID_REG(I2S5_BASE_PTR)
#define I2S5_PARAM                               I2S_PARAM_REG(I2S5_BASE_PTR)
#define I2S5_TCSR                                I2S_TCSR_REG(I2S5_BASE_PTR)
#define I2S5_TCR1                                I2S_TCR1_REG(I2S5_BASE_PTR)
#define I2S5_TCR2                                I2S_TCR2_REG(I2S5_BASE_PTR)
#define I2S5_TCR3                                I2S_TCR3_REG(I2S5_BASE_PTR)
#define I2S5_TCR4                                I2S_TCR4_REG(I2S5_BASE_PTR)
#define I2S5_TCR5                                I2S_TCR5_REG(I2S5_BASE_PTR)
#define I2S5_TDR0                                I2S_TDR_REG(I2S5_BASE_PTR,0)
#define I2S5_TDR1                                I2S_TDR_REG(I2S5_BASE_PTR,1)
#define I2S5_TDR2                                I2S_TDR_REG(I2S5_BASE_PTR,2)
#define I2S5_TDR3                                I2S_TDR_REG(I2S5_BASE_PTR,3)
#define I2S5_TFR0                                I2S_TFR_REG(I2S5_BASE_PTR,0)
#define I2S5_TFR1                                I2S_TFR_REG(I2S5_BASE_PTR,1)
#define I2S5_TFR2                                I2S_TFR_REG(I2S5_BASE_PTR,2)
#define I2S5_TFR3                                I2S_TFR_REG(I2S5_BASE_PTR,3)
#define I2S5_TMR                                 I2S_TMR_REG(I2S5_BASE_PTR)
#define I2S5_TTCR                                I2S_TTCR_REG(I2S5_BASE_PTR)
#define I2S5_TTSR                                I2S_TTSR_REG(I2S5_BASE_PTR)
#define I2S5_TBCR                                I2S_TBCR_REG(I2S5_BASE_PTR)
#define I2S5_TBCTR                               I2S_TBCTR_REG(I2S5_BASE_PTR)
#define I2S5_RCSR                                I2S_RCSR_REG(I2S5_BASE_PTR)
#define I2S5_RCR1                                I2S_RCR1_REG(I2S5_BASE_PTR)
#define I2S5_RCR2                                I2S_RCR2_REG(I2S5_BASE_PTR)
#define I2S5_RCR3                                I2S_RCR3_REG(I2S5_BASE_PTR)
#define I2S5_RCR4                                I2S_RCR4_REG(I2S5_BASE_PTR)
#define I2S5_RCR5                                I2S_RCR5_REG(I2S5_BASE_PTR)
#define I2S5_RDR0                                I2S_RDR_REG(I2S5_BASE_PTR,0)
#define I2S5_RDR1                                I2S_RDR_REG(I2S5_BASE_PTR,1)
#define I2S5_RDR2                                I2S_RDR_REG(I2S5_BASE_PTR,2)
#define I2S5_RDR3                                I2S_RDR_REG(I2S5_BASE_PTR,3)
#define I2S5_RFR0                                I2S_RFR_REG(I2S5_BASE_PTR,0)
#define I2S5_RFR1                                I2S_RFR_REG(I2S5_BASE_PTR,1)
#define I2S5_RFR2                                I2S_RFR_REG(I2S5_BASE_PTR,2)
#define I2S5_RFR3                                I2S_RFR_REG(I2S5_BASE_PTR,3)
#define I2S5_RMR                                 I2S_RMR_REG(I2S5_BASE_PTR)
#define I2S5_RTCR                                I2S_RTCR_REG(I2S5_BASE_PTR)
#define I2S5_RTSR                                I2S_RTSR_REG(I2S5_BASE_PTR)
#define I2S5_RBCR                                I2S_RBCR_REG(I2S5_BASE_PTR)
#define I2S5_RBCTR                               I2S_RBCTR_REG(I2S5_BASE_PTR)
#define I2S5_MCR                                 I2S_MCR_REG(I2S5_BASE_PTR)
/* I2S6 */
#define I2S6_VERID                               I2S_VERID_REG(I2S6_BASE_PTR)
#define I2S6_PARAM                               I2S_PARAM_REG(I2S6_BASE_PTR)
#define I2S6_TCSR                                I2S_TCSR_REG(I2S6_BASE_PTR)
#define I2S6_TCR1                                I2S_TCR1_REG(I2S6_BASE_PTR)
#define I2S6_TCR2                                I2S_TCR2_REG(I2S6_BASE_PTR)
#define I2S6_TCR3                                I2S_TCR3_REG(I2S6_BASE_PTR)
#define I2S6_TCR4                                I2S_TCR4_REG(I2S6_BASE_PTR)
#define I2S6_TCR5                                I2S_TCR5_REG(I2S6_BASE_PTR)
#define I2S6_TDR0                                I2S_TDR_REG(I2S6_BASE_PTR,0)
#define I2S6_TDR1                                I2S_TDR_REG(I2S6_BASE_PTR,1)
#define I2S6_TDR2                                I2S_TDR_REG(I2S6_BASE_PTR,2)
#define I2S6_TDR3                                I2S_TDR_REG(I2S6_BASE_PTR,3)
#define I2S6_TFR0                                I2S_TFR_REG(I2S6_BASE_PTR,0)
#define I2S6_TFR1                                I2S_TFR_REG(I2S6_BASE_PTR,1)
#define I2S6_TFR2                                I2S_TFR_REG(I2S6_BASE_PTR,2)
#define I2S6_TFR3                                I2S_TFR_REG(I2S6_BASE_PTR,3)
#define I2S6_TMR                                 I2S_TMR_REG(I2S6_BASE_PTR)
#define I2S6_TTCR                                I2S_TTCR_REG(I2S6_BASE_PTR)
#define I2S6_TTSR                                I2S_TTSR_REG(I2S6_BASE_PTR)
#define I2S6_TBCR                                I2S_TBCR_REG(I2S6_BASE_PTR)
#define I2S6_TBCTR                               I2S_TBCTR_REG(I2S6_BASE_PTR)
#define I2S6_RCSR                                I2S_RCSR_REG(I2S6_BASE_PTR)
#define I2S6_RCR1                                I2S_RCR1_REG(I2S6_BASE_PTR)
#define I2S6_RCR2                                I2S_RCR2_REG(I2S6_BASE_PTR)
#define I2S6_RCR3                                I2S_RCR3_REG(I2S6_BASE_PTR)
#define I2S6_RCR4                                I2S_RCR4_REG(I2S6_BASE_PTR)
#define I2S6_RCR5                                I2S_RCR5_REG(I2S6_BASE_PTR)
#define I2S6_RDR0                                I2S_RDR_REG(I2S6_BASE_PTR,0)
#define I2S6_RDR1                                I2S_RDR_REG(I2S6_BASE_PTR,1)
#define I2S6_RDR2                                I2S_RDR_REG(I2S6_BASE_PTR,2)
#define I2S6_RDR3                                I2S_RDR_REG(I2S6_BASE_PTR,3)
#define I2S6_RFR0                                I2S_RFR_REG(I2S6_BASE_PTR,0)
#define I2S6_RFR1                                I2S_RFR_REG(I2S6_BASE_PTR,1)
#define I2S6_RFR2                                I2S_RFR_REG(I2S6_BASE_PTR,2)
#define I2S6_RFR3                                I2S_RFR_REG(I2S6_BASE_PTR,3)
#define I2S6_RMR                                 I2S_RMR_REG(I2S6_BASE_PTR)
#define I2S6_RTCR                                I2S_RTCR_REG(I2S6_BASE_PTR)
#define I2S6_RTSR                                I2S_RTSR_REG(I2S6_BASE_PTR)
#define I2S6_RBCR                                I2S_RBCR_REG(I2S6_BASE_PTR)
#define I2S6_RBCTR                               I2S_RBCTR_REG(I2S6_BASE_PTR)
#define I2S6_MCR                                 I2S_MCR_REG(I2S6_BASE_PTR)
/* I2S7 */
#define I2S7_VERID                               I2S_VERID_REG(I2S7_BASE_PTR)
#define I2S7_PARAM                               I2S_PARAM_REG(I2S7_BASE_PTR)
#define I2S7_TCSR                                I2S_TCSR_REG(I2S7_BASE_PTR)
#define I2S7_TCR1                                I2S_TCR1_REG(I2S7_BASE_PTR)
#define I2S7_TCR2                                I2S_TCR2_REG(I2S7_BASE_PTR)
#define I2S7_TCR3                                I2S_TCR3_REG(I2S7_BASE_PTR)
#define I2S7_TCR4                                I2S_TCR4_REG(I2S7_BASE_PTR)
#define I2S7_TCR5                                I2S_TCR5_REG(I2S7_BASE_PTR)
#define I2S7_TDR0                                I2S_TDR_REG(I2S7_BASE_PTR,0)
#define I2S7_TDR1                                I2S_TDR_REG(I2S7_BASE_PTR,1)
#define I2S7_TDR2                                I2S_TDR_REG(I2S7_BASE_PTR,2)
#define I2S7_TDR3                                I2S_TDR_REG(I2S7_BASE_PTR,3)
#define I2S7_TFR0                                I2S_TFR_REG(I2S7_BASE_PTR,0)
#define I2S7_TFR1                                I2S_TFR_REG(I2S7_BASE_PTR,1)
#define I2S7_TFR2                                I2S_TFR_REG(I2S7_BASE_PTR,2)
#define I2S7_TFR3                                I2S_TFR_REG(I2S7_BASE_PTR,3)
#define I2S7_TMR                                 I2S_TMR_REG(I2S7_BASE_PTR)
#define I2S7_TTCR                                I2S_TTCR_REG(I2S7_BASE_PTR)
#define I2S7_TTSR                                I2S_TTSR_REG(I2S7_BASE_PTR)
#define I2S7_TBCR                                I2S_TBCR_REG(I2S7_BASE_PTR)
#define I2S7_TBCTR                               I2S_TBCTR_REG(I2S7_BASE_PTR)
#define I2S7_RCSR                                I2S_RCSR_REG(I2S7_BASE_PTR)
#define I2S7_RCR1                                I2S_RCR1_REG(I2S7_BASE_PTR)
#define I2S7_RCR2                                I2S_RCR2_REG(I2S7_BASE_PTR)
#define I2S7_RCR3                                I2S_RCR3_REG(I2S7_BASE_PTR)
#define I2S7_RCR4                                I2S_RCR4_REG(I2S7_BASE_PTR)
#define I2S7_RCR5                                I2S_RCR5_REG(I2S7_BASE_PTR)
#define I2S7_RDR0                                I2S_RDR_REG(I2S7_BASE_PTR,0)
#define I2S7_RDR1                                I2S_RDR_REG(I2S7_BASE_PTR,1)
#define I2S7_RDR2                                I2S_RDR_REG(I2S7_BASE_PTR,2)
#define I2S7_RDR3                                I2S_RDR_REG(I2S7_BASE_PTR,3)
#define I2S7_RFR0                                I2S_RFR_REG(I2S7_BASE_PTR,0)
#define I2S7_RFR1                                I2S_RFR_REG(I2S7_BASE_PTR,1)
#define I2S7_RFR2                                I2S_RFR_REG(I2S7_BASE_PTR,2)
#define I2S7_RFR3                                I2S_RFR_REG(I2S7_BASE_PTR,3)
#define I2S7_RMR                                 I2S_RMR_REG(I2S7_BASE_PTR)
#define I2S7_RTCR                                I2S_RTCR_REG(I2S7_BASE_PTR)
#define I2S7_RTSR                                I2S_RTSR_REG(I2S7_BASE_PTR)
#define I2S7_RBCR                                I2S_RBCR_REG(I2S7_BASE_PTR)
#define I2S7_RBCTR                               I2S_RBCTR_REG(I2S7_BASE_PTR)
#define I2S7_MCR                                 I2S_MCR_REG(I2S7_BASE_PTR)

/* I2S - Register array accessors */
#define I2S2_TDR(index)                          I2S_TDR_REG(I2S2_BASE_PTR,index)
#define I2S3_TDR(index)                          I2S_TDR_REG(I2S3_BASE_PTR,index)
#define I2S5_TDR(index)                          I2S_TDR_REG(I2S5_BASE_PTR,index)
#define I2S6_TDR(index)                          I2S_TDR_REG(I2S6_BASE_PTR,index)
#define I2S7_TDR(index)                          I2S_TDR_REG(I2S7_BASE_PTR,index)
#define I2S2_TFR(index)                          I2S_TFR_REG(I2S2_BASE_PTR,index)
#define I2S3_TFR(index)                          I2S_TFR_REG(I2S3_BASE_PTR,index)
#define I2S5_TFR(index)                          I2S_TFR_REG(I2S5_BASE_PTR,index)
#define I2S6_TFR(index)                          I2S_TFR_REG(I2S6_BASE_PTR,index)
#define I2S7_TFR(index)                          I2S_TFR_REG(I2S7_BASE_PTR,index)
#define I2S2_RDR(index)                          I2S_RDR_REG(I2S2_BASE_PTR,index)
#define I2S3_RDR(index)                          I2S_RDR_REG(I2S3_BASE_PTR,index)
#define I2S5_RDR(index)                          I2S_RDR_REG(I2S5_BASE_PTR,index)
#define I2S6_RDR(index)                          I2S_RDR_REG(I2S6_BASE_PTR,index)
#define I2S7_RDR(index)                          I2S_RDR_REG(I2S7_BASE_PTR,index)
#define I2S2_RFR(index)                          I2S_RFR_REG(I2S2_BASE_PTR,index)
#define I2S3_RFR(index)                          I2S_RFR_REG(I2S3_BASE_PTR,index)
#define I2S5_RFR(index)                          I2S_RFR_REG(I2S5_BASE_PTR,index)
#define I2S6_RFR(index)                          I2S_RFR_REG(I2S6_BASE_PTR,index)
#define I2S7_RFR(index)                          I2S_RFR_REG(I2S7_BASE_PTR,index)

/*!
 * @}
 */ /* end of group I2S_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group I2S_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Peripheral IOMUXC
 * @{
 */

/** IOMUXC - Peripheral register structure */
typedef struct IOMUXC_MemMap {
  uint8_t RESERVED_0[32];
  uint32_t SW_MUX_CTL_PAD[141];                    /**< Pad Mux Register, array offset: 0x20, array step: 0x4 */
  uint32_t SW_PAD_CTL_PAD[154];                    /**< Pad Control Register, array offset: 0x254, array step: 0x4 */
  uint32_t SELECT_INPUT[78];                       /**< Select Input Register, array offset: 0x4BC, array step: 0x4 */
} volatile *IOMUXC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register accessors */
#define IOMUXC_SW_MUX_CTL_PAD_REG(base,index)    ((base)->SW_MUX_CTL_PAD[index])
#define IOMUXC_SW_PAD_CTL_PAD_REG(base,index)    ((base)->SW_PAD_CTL_PAD[index])
#define IOMUXC_SELECT_INPUT_REG(base,index)      ((base)->SELECT_INPUT[index])

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Masks IOMUXC Register Masks
 * @{
 */

/*! @name SW_MUX_CTL_PAD - Pad Mux Register */
/*! @{ */
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK      (0x7U)
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT     (0U)
/*! MUX_MODE
 *  0b000..Select signal SRC_BOOT_MODE2
 *  0b001..Select signal I2C1_SCL- Configure register IOMUXC_I2C1_SCL_SELECT_INPUTSelect Input Register for mode ALT1.
 */
#define IOMUXC_SW_MUX_CTL_PAD_MUX_MODE(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_SHIFT)) & IOMUXC_SW_MUX_CTL_PAD_MUX_MODE_MASK)
#define IOMUXC_SW_MUX_CTL_PAD_SION_MASK          (0x10U)
#define IOMUXC_SW_MUX_CTL_PAD_SION_SHIFT         (4U)
/*! @} */

/* The count of IOMUXC_SW_MUX_CTL_PAD */
#define IOMUXC_SW_MUX_CTL_PAD_COUNT              (141U)

/*! @name SW_PAD_CTL_PAD - Pad Control Register */
/*! @{ */
#define IOMUXC_SW_PAD_CTL_PAD_DSE_MASK           (0x7U)
#define IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT          (0U)
/*! DSE - Drive Strength Field
 *  0b00x..Drive strength X1
 *  0b01x..Drive strength X4
 *  0b10x..Drive strength X2
 *  0b11x..Drive strength X6
 */
#define IOMUXC_SW_PAD_CTL_PAD_DSE(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_DSE_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_DSE_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_FSEL_MASK          (0x18U)
#define IOMUXC_SW_PAD_CTL_PAD_FSEL_SHIFT         (3U)
/*! FSEL - Slew Rate Field
 *  0b0x..Select slow slew rate (IO.SR = 1)
 *  0b1x..Select fast slew rate (IO.SR = 0)
 */
#define IOMUXC_SW_PAD_CTL_PAD_FSEL(x)            (((uint32_t)(((uint32_t)(x)) << IOMUXC_SW_PAD_CTL_PAD_FSEL_SHIFT)) & IOMUXC_SW_PAD_CTL_PAD_FSEL_MASK)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_MASK           (0x20U)
#define IOMUXC_SW_PAD_CTL_PAD_ODE_SHIFT          (5U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_MASK           (0x40U)
#define IOMUXC_SW_PAD_CTL_PAD_PUE_SHIFT          (6U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_MASK           (0x80U)
#define IOMUXC_SW_PAD_CTL_PAD_HYS_SHIFT          (7U)
#define IOMUXC_SW_PAD_CTL_PAD_PE_MASK            (0x100U)
#define IOMUXC_SW_PAD_CTL_PAD_PE_SHIFT           (8U)
/*! @} */

/* The count of IOMUXC_SW_PAD_CTL_PAD */
#define IOMUXC_SW_PAD_CTL_PAD_COUNT              (154U)

/*! @name SELECT_INPUT - Select Input Register */
/*! @{ */
#define IOMUXC_SELECT_INPUT_DAISY_MASK           (0xFU)  /* Merged from fields with different position or width, of widths (1, 2, 3, 4), largest definition used */
#define IOMUXC_SELECT_INPUT_DAISY_SHIFT          (0U)
/*! DAISY - Input Select (DAISY) Field
 *  0b0..Selecting ALT5 mode of pad GPIO1_IO05 for CCM_PMIC_READY.
 *  0b1..Selecting ALT5 mode of pad GPIO1_IO11 for CCM_PMIC_READY.
 */
#define IOMUXC_SELECT_INPUT_DAISY(x)             (((uint32_t)(((uint32_t)(x)) << IOMUXC_SELECT_INPUT_DAISY_SHIFT)) & IOMUXC_SELECT_INPUT_DAISY_MASK)  /* Merged from fields with different position or width, of widths (1, 2, 3, 4), largest definition used */
/*! @} */

/* The count of IOMUXC_SELECT_INPUT */
#define IOMUXC_SELECT_INPUT_COUNT                (78U)


/*!
 * @}
 */ /* end of group IOMUXC_Register_Masks */


/* IOMUXC - Peripheral instance base addresses */
/** Peripheral IOMUXC base pointer */
#define IOMUXC_BASE_PTR                          ((IOMUXC_MemMapPtr)0x30330000u)
/** Array initializer of IOMUXC peripheral base pointers */
#define IOMUXC_BASE_PTRS                         { IOMUXC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_Register_Accessor_Macros IOMUXC - Register accessor macros
 * @{
 */


/* IOMUXC - Register instance definitions */
/* IOMUXC */
#define IOMUXC_SW_MUX_CTL_PAD_BOOT_MODE2         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_SW_MUX_CTL_PAD_BOOT_MODE3         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,2)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,3)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,4)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,9)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,12)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,13)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,14)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO14         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO15         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_MDIO          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD3           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD2           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,21)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD1           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,22)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TD0           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,23)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TX_CTL        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,24)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,25)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RX_CTL        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,26)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,27)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD0           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,28)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD1           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,29)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD2           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,30)
#define IOMUXC_SW_MUX_CTL_PAD_ENET_RD3           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,31)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_CLK            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,32)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_CMD            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,33)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,34)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,35)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,36)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,37)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA4          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,38)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA5          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,39)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA6          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,40)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_DATA7          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,41)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_RESET_B        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,42)
#define IOMUXC_SW_MUX_CTL_PAD_SD1_STROBE         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,43)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CD_B           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,44)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CLK            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,45)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_CMD            IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,46)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,47)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,48)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,49)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,50)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_RESET_B        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,51)
#define IOMUXC_SW_MUX_CTL_PAD_SD2_WP             IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,52)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_ALE           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,53)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,54)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,55)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE2_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,56)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CE3_B         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,57)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_CLE           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,58)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,59)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,60)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,61)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,62)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,63)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,64)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,65)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,66)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_DQS           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,67)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,68)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B       IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,69)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,70)
#define IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,71)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,72)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,73)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,74)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD1          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,75)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD2          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,76)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_RXD3          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,77)
#define IOMUXC_SW_MUX_CTL_PAD_SAI5_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,78)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,100)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,101)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_RXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,102)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,103)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,104)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_TXD0          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,105)
#define IOMUXC_SW_MUX_CTL_PAD_SAI2_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,106)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,107)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,108)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_RXD           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,109)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXFS          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,110)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXC           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,111)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_TXD           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,112)
#define IOMUXC_SW_MUX_CTL_PAD_SAI3_MCLK          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,113)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_TX           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,114)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_RX           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,115)
#define IOMUXC_SW_MUX_CTL_PAD_SPDIF_EXT_CLK      IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,116)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_SCLK        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,117)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_MOSI        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,118)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_MISO        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,119)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI1_SS0         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,120)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_SCLK        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,121)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_MOSI        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,122)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_MISO        IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,123)
#define IOMUXC_SW_MUX_CTL_PAD_ECSPI2_SS0         IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,124)
#define IOMUXC_SW_MUX_CTL_PAD_I2C1_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,125)
#define IOMUXC_SW_MUX_CTL_PAD_I2C1_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,126)
#define IOMUXC_SW_MUX_CTL_PAD_I2C2_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,127)
#define IOMUXC_SW_MUX_CTL_PAD_I2C2_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,128)
#define IOMUXC_SW_MUX_CTL_PAD_I2C3_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,129)
#define IOMUXC_SW_MUX_CTL_PAD_I2C3_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,130)
#define IOMUXC_SW_MUX_CTL_PAD_I2C4_SCL           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,131)
#define IOMUXC_SW_MUX_CTL_PAD_I2C4_SDA           IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,132)
#define IOMUXC_SW_MUX_CTL_PAD_UART1_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,133)
#define IOMUXC_SW_MUX_CTL_PAD_UART1_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,134)
#define IOMUXC_SW_MUX_CTL_PAD_UART2_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,135)
#define IOMUXC_SW_MUX_CTL_PAD_UART2_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,136)
#define IOMUXC_SW_MUX_CTL_PAD_UART3_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,137)
#define IOMUXC_SW_MUX_CTL_PAD_UART3_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,138)
#define IOMUXC_SW_MUX_CTL_PAD_UART4_RXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,139)
#define IOMUXC_SW_MUX_CTL_PAD_UART4_TXD          IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,140)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE1         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE2         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,2)
#define IOMUXC_SW_PAD_CTL_PAD_BOOT_MODE3         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,3)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,4)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SW_PAD_CTL_PAD_PMIC_STBY_REQ      IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SW_PAD_CTL_PAD_PMIC_ON_REQ        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,21)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,22)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,23)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,24)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,25)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,26)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,27)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,28)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO14         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,29)
#define IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO15         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,30)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,31)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_MDIO          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,32)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD3           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,33)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD2           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,34)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD1           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,35)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TD0           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,36)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TX_CTL        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,37)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,38)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RX_CTL        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,39)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,40)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD0           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,41)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD1           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,42)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD2           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,43)
#define IOMUXC_SW_PAD_CTL_PAD_ENET_RD3           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,44)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_CLK            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,45)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_CMD            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,46)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,47)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,48)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,49)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,50)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA4          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,51)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA5          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,52)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA6          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,53)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_DATA7          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,54)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_RESET_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,55)
#define IOMUXC_SW_PAD_CTL_PAD_SD1_STROBE         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,56)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CD_B           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,57)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CLK            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,58)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_CMD            IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,59)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,60)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,61)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,62)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,63)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_RESET_B        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,64)
#define IOMUXC_SW_PAD_CTL_PAD_SD2_WP             IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,65)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_ALE           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,66)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,67)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,68)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE2_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,69)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CE3_B         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,70)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_CLE           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,71)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,72)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,73)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,74)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,75)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,76)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,77)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,78)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,79)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_DQS           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,80)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,81)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B       IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,82)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,83)
#define IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,84)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,85)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,86)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,87)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD1          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,88)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD2          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,89)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_RXD3          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,90)
#define IOMUXC_SW_PAD_CTL_PAD_SAI5_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,91)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,113)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,114)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_RXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,115)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,116)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,117)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_TXD0          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,118)
#define IOMUXC_SW_PAD_CTL_PAD_SAI2_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,119)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,120)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,121)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_RXD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,122)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXFS          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,123)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXC           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,124)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_TXD           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,125)
#define IOMUXC_SW_PAD_CTL_PAD_SAI3_MCLK          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,126)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_TX           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,127)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_RX           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,128)
#define IOMUXC_SW_PAD_CTL_PAD_SPDIF_EXT_CLK      IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,129)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_SCLK        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,130)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_MOSI        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,131)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_MISO        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,132)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI1_SS0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,133)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_SCLK        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,134)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_MOSI        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,135)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_MISO        IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,136)
#define IOMUXC_SW_PAD_CTL_PAD_ECSPI2_SS0         IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,137)
#define IOMUXC_SW_PAD_CTL_PAD_I2C1_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,138)
#define IOMUXC_SW_PAD_CTL_PAD_I2C1_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,139)
#define IOMUXC_SW_PAD_CTL_PAD_I2C2_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,140)
#define IOMUXC_SW_PAD_CTL_PAD_I2C2_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,141)
#define IOMUXC_SW_PAD_CTL_PAD_I2C3_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,142)
#define IOMUXC_SW_PAD_CTL_PAD_I2C3_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,143)
#define IOMUXC_SW_PAD_CTL_PAD_I2C4_SCL           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,144)
#define IOMUXC_SW_PAD_CTL_PAD_I2C4_SDA           IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,145)
#define IOMUXC_SW_PAD_CTL_PAD_UART1_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,146)
#define IOMUXC_SW_PAD_CTL_PAD_UART1_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,147)
#define IOMUXC_SW_PAD_CTL_PAD_UART2_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,148)
#define IOMUXC_SW_PAD_CTL_PAD_UART2_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,149)
#define IOMUXC_SW_PAD_CTL_PAD_UART3_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,150)
#define IOMUXC_SW_PAD_CTL_PAD_UART3_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,151)
#define IOMUXC_SW_PAD_CTL_PAD_UART4_RXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,152)
#define IOMUXC_SW_PAD_CTL_PAD_UART4_TXD          IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,153)
#define IOMUXC_CCM_PMIC_READY_SELECT_INPUT       IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,0)
#define IOMUXC_ENET1_MDIO_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,1)
#define IOMUXC_SAI5_RX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,5)
#define IOMUXC_SAI5_RX_DATA0_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,6)
#define IOMUXC_SAI5_RX_DATA1_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,7)
#define IOMUXC_SAI5_RX_DATA2_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,8)
#define IOMUXC_SAI5_RX_DATA3_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,9)
#define IOMUXC_SAI5_RX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,10)
#define IOMUXC_SAI5_TX_BCLK_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,11)
#define IOMUXC_SAI5_TX_SYNC_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,12)
#define IOMUXC_UART1_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,13)
#define IOMUXC_UART1_RX_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,14)
#define IOMUXC_UART2_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,15)
#define IOMUXC_UART2_RX_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,16)
#define IOMUXC_UART3_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,17)
#define IOMUXC_UART3_RX_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,18)
#define IOMUXC_UART4_RTS_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,19)
#define IOMUXC_UART4_RX_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,20)
#define IOMUXC_PDM_BIT_STREAM0_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,30)
#define IOMUXC_PDM_BIT_STREAM1_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,31)
#define IOMUXC_PDM_BIT_STREAM2_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,32)
#define IOMUXC_PDM_BIT_STREAM3_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,33)
#define IOMUXC_USDHC3_DATA7_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,36)
#define IOMUXC_USDHC3_DATA5_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,37)
#define IOMUXC_ENET1_RGMII_RD1_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,38)
#define IOMUXC_USDHC3_DATA4_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,39)
#define IOMUXC_I2C1_SCL_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,40)
#define IOMUXC_I2C2_SDA_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,41)
#define IOMUXC_ECSPI1_SS0_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,42)
#define IOMUXC_SPDIF1_EXT_CLK_SELECT_INPUT       IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,43)
#define IOMUXC_I2C1_SDA_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,44)
#define IOMUXC_ECSPI2_SS0_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,45)
#define IOMUXC_ENET1_RGMII_RX_CTL_SELECT_INPUT   IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,46)
#define IOMUXC_ECSPI2_MISO_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,47)
#define IOMUXC_ENET1_RGMII_RD0_SELECT_INPUT      IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,48)
#define IOMUXC_ECSPI2_SCLK_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,49)
#define IOMUXC_USDHC3_DATA6_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,50)
#define IOMUXC_I2C3_SCL_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,51)
#define IOMUXC_I2C4_SDA_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,52)
#define IOMUXC_ECSPI2_MOSI_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,53)
#define IOMUXC_SAI5_MCLK_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,54)
#define IOMUXC_USDHC3_CD_B_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,55)
#define IOMUXC_USDHC3_STROBE_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,56)
#define IOMUXC_USDHC3_CLK_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,57)
#define IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT   IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,58)
#define IOMUXC_ECSPI1_MOSI_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,59)
#define IOMUXC_SAI2_RX_DATA1_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,60)
#define IOMUXC_USDHC3_DATA1_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,61)
#define IOMUXC_USDHC3_DATA0_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,62)
#define IOMUXC_USDHC3_WP_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,63)
#define IOMUXC_I2C3_SDA_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,64)
#define IOMUXC_SAI3_MCLK_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,65)
#define IOMUXC_ECSPI1_MISO_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,66)
#define IOMUXC_ENET1_RX_ER_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,67)
#define IOMUXC_SPDIF1_IN_SELECT_INPUT            IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,68)
#define IOMUXC_I2C2_SCL_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,69)
#define IOMUXC_I2C4_SCL_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,70)
#define IOMUXC_ECSPI1_SCLK_SELECT_INPUT          IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,71)
#define IOMUXC_USDHC3_CMD_SELECT_INPUT           IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,72)
#define IOMUXC_USDHC3_DATA3_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,73)
#define IOMUXC_USDHC3_DATA2_SELECT_INPUT         IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,74)
#define IOMUXC_GPT1_CLK_SELECT_INPUT             IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,75)
#define IOMUXC_GPT1_CAPTURE2_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,76)
#define IOMUXC_GPT1_CAPTURE1_SELECT_INPUT        IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,77)

/* IOMUXC - Register array accessors */
#define IOMUXC_SW_MUX_CTL_PAD(index)             IOMUXC_SW_MUX_CTL_PAD_REG(IOMUXC_BASE_PTR,index)
#define IOMUXC_SW_PAD_CTL_PAD(index)             IOMUXC_SW_PAD_CTL_PAD_REG(IOMUXC_BASE_PTR,index)
#define IOMUXC_SELECT_INPUT(index)               IOMUXC_SELECT_INPUT_REG(IOMUXC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group IOMUXC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_Peripheral */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Peripheral IOMUXC_GPR
 * @{
 */

/** IOMUXC_GPR - Peripheral register structure */
typedef struct IOMUXC_GPR_MemMap {
  uint32_t GPR0;                                   /**< General Purpose Register 0, offset: 0x0 */
  uint32_t GPR1;                                   /**< General Purpose Register 1, offset: 0x4 */
  uint32_t GPR2;                                   /**< General Purpose Register 2, offset: 0x8 */
  uint32_t GPR3;                                   /**< General Purpose Register 3, offset: 0xC */
  uint32_t GPR4;                                   /**< General Purpose Register 4, offset: 0x10 */
  uint32_t GPR5;                                   /**< General Purpose Register 5, offset: 0x14 */
  uint32_t GPR6;                                   /**< General Purpose Register 6, offset: 0x18 */
  uint32_t GPR7;                                   /**< General Purpose Register 7, offset: 0x1C */
  uint32_t GPR8;                                   /**< General Purpose Register 8, offset: 0x20 */
  uint32_t GPR9;                                   /**< General Purpose Register 9, offset: 0x24 */
  uint32_t GPR10;                                  /**< General Purpose Register 10, offset: 0x28 */
  uint32_t GPR11;                                  /**< General Purpose Register 11, offset: 0x2C */
  uint32_t GPR12;                                  /**< General Purpose Register 12, offset: 0x30 */
  uint32_t GPR13;                                  /**< General Purpose Register 13, offset: 0x34 */
  uint32_t GPR14;                                  /**< General Purpose Register 14, offset: 0x38 */
  uint32_t GPR15;                                  /**< General Purpose Register 15, offset: 0x3C */
  uint32_t GPR16;                                  /**< General Purpose Register 16, offset: 0x40 */
  uint32_t GPR17;                                  /**< General Purpose Register 17, offset: 0x44 */
  uint32_t GPR18;                                  /**< General Purpose Register 18, offset: 0x48 */
  uint32_t GPR19;                                  /**< General Purpose Register 19, offset: 0x4C */
  uint32_t GPR20;                                  /**< General Purpose Register 20, offset: 0x50 */
  uint32_t GPR21;                                  /**< General Purpose Register 21, offset: 0x54 */
  uint32_t GPR22;                                  /**< General Purpose Register 22, offset: 0x58 */
  uint32_t GPR[25];                                /**< General Purpose Register, array offset: 0x5C, array step: 0x4 */
} volatile *IOMUXC_GPR_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register accessors */
#define IOMUXC_GPR_GPR0_REG(base)                ((base)->GPR0)
#define IOMUXC_GPR_GPR1_REG(base)                ((base)->GPR1)
#define IOMUXC_GPR_GPR2_REG(base)                ((base)->GPR2)
#define IOMUXC_GPR_GPR3_REG(base)                ((base)->GPR3)
#define IOMUXC_GPR_GPR4_REG(base)                ((base)->GPR4)
#define IOMUXC_GPR_GPR5_REG(base)                ((base)->GPR5)
#define IOMUXC_GPR_GPR6_REG(base)                ((base)->GPR6)
#define IOMUXC_GPR_GPR7_REG(base)                ((base)->GPR7)
#define IOMUXC_GPR_GPR8_REG(base)                ((base)->GPR8)
#define IOMUXC_GPR_GPR9_REG(base)                ((base)->GPR9)
#define IOMUXC_GPR_GPR10_REG(base)               ((base)->GPR10)
#define IOMUXC_GPR_GPR11_REG(base)               ((base)->GPR11)
#define IOMUXC_GPR_GPR12_REG(base)               ((base)->GPR12)
#define IOMUXC_GPR_GPR13_REG(base)               ((base)->GPR13)
#define IOMUXC_GPR_GPR14_REG(base)               ((base)->GPR14)
#define IOMUXC_GPR_GPR15_REG(base)               ((base)->GPR15)
#define IOMUXC_GPR_GPR16_REG(base)               ((base)->GPR16)
#define IOMUXC_GPR_GPR17_REG(base)               ((base)->GPR17)
#define IOMUXC_GPR_GPR18_REG(base)               ((base)->GPR18)
#define IOMUXC_GPR_GPR19_REG(base)               ((base)->GPR19)
#define IOMUXC_GPR_GPR20_REG(base)               ((base)->GPR20)
#define IOMUXC_GPR_GPR21_REG(base)               ((base)->GPR21)
#define IOMUXC_GPR_GPR22_REG(base)               ((base)->GPR22)
#define IOMUXC_GPR_GPR_REG(base,index)           ((base)->GPR[index])

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Masks IOMUXC_GPR Register Masks
 * @{
 */

/*! @name GPR1 - General Purpose Register 1 */
/*! @{ */
#define IOMUXC_GPR_GPR1_GPR_IRQ_MASK             (0x1000U)
#define IOMUXC_GPR_GPR1_GPR_IRQ_SHIFT            (12U)
#define IOMUXC_GPR_GPR1_GPR_ENET1_TX_CLK_SEL_MASK (0x2000U)
#define IOMUXC_GPR_GPR1_GPR_ENET1_TX_CLK_SEL_SHIFT (13U)
#define IOMUXC_GPR_GPR1_GPR_TZASC1_SECURE_BOOT_LOCK_MASK (0x800000U)
#define IOMUXC_GPR_GPR1_GPR_TZASC1_SECURE_BOOT_LOCK_SHIFT (23U)
#define IOMUXC_GPR_GPR1_GPR_DBG_ACK_MASK         (0xF0000000U)
#define IOMUXC_GPR_GPR1_GPR_DBG_ACK_SHIFT        (28U)
#define IOMUXC_GPR_GPR1_GPR_DBG_ACK(x)           (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR1_GPR_DBG_ACK_SHIFT)) & IOMUXC_GPR_GPR1_GPR_DBG_ACK_MASK)
/*! @} */

/*! @name GPR2 - General Purpose Register 2 */
/*! @{ */
#define IOMUXC_GPR_GPR2_GPR_SAI2_EXT_MCLK_EN_MASK (0x2U)
#define IOMUXC_GPR_GPR2_GPR_SAI2_EXT_MCLK_EN_SHIFT (1U)
#define IOMUXC_GPR_GPR2_GPR_SAI3_EXT_MCLK_EN_MASK (0x4U)
#define IOMUXC_GPR_GPR2_GPR_SAI3_EXT_MCLK_EN_SHIFT (2U)
#define IOMUXC_GPR_GPR2_GPR_SAI5_EXT_MCLK_EN_MASK (0x10U)
#define IOMUXC_GPR_GPR2_GPR_SAI5_EXT_MCLK_EN_SHIFT (4U)
#define IOMUXC_GPR_GPR2_GPR_SAI6_EXT_MCLK_EN_MASK (0x20U)
#define IOMUXC_GPR_GPR2_GPR_SAI6_EXT_MCLK_EN_SHIFT (5U)
#define IOMUXC_GPR_GPR2_GPR_SAI7_EXT_MCLK_EN_MASK (0x40U)
#define IOMUXC_GPR_GPR2_GPR_SAI7_EXT_MCLK_EN_SHIFT (6U)
#define IOMUXC_GPR_GPR2_GPR_GPT4_EXT_CLK_SEL_MASK (0xF00U)
#define IOMUXC_GPR_GPR2_GPR_GPT4_EXT_CLK_SEL_SHIFT (8U)
/*! GPR_GPT4_EXT_CLK_SEL
 *  0b0000..SAI7_TX_SYNC
 *  0b0001..SAI2_TX_SYNC
 *  0b0010..SAI3_TX_SYNC
 *  0b0011..Reserved
 *  0b0100..SAI5_TX_SYNC
 *  0b0101..SAI6_TX_SYNC
 *  0b0110..SAI7_RX_SYNC
 *  0b0111..SAI2_RX_SYNC
 *  0b1000..SAI3_RX_SYNC
 *  0b1001..Reserved
 *  0b1010..SAI5_RX_SYNC
 */
#define IOMUXC_GPR_GPR2_GPR_GPT4_EXT_CLK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR2_GPR_GPT4_EXT_CLK_SEL_SHIFT)) & IOMUXC_GPR_GPR2_GPR_GPT4_EXT_CLK_SEL_MASK)
#define IOMUXC_GPR_GPR2_GPR_GPT5_EXT_CLK_SEL_MASK (0xF000U)
#define IOMUXC_GPR_GPR2_GPR_GPT5_EXT_CLK_SEL_SHIFT (12U)
/*! GPR_GPT5_EXT_CLK_SEL
 *  0b0000..SAI7_TX_SYNC
 *  0b0001..SAI2_TX_SYNC
 *  0b0010..SAI3_TX_SYNC
 *  0b0011..Reserved
 *  0b0100..SAI5_TX_SYNC
 *  0b0101..SAI6_TX_SYNC
 *  0b0110..SAI7_RX_SYNC
 *  0b0111..SAI2_RX_SYNC
 *  0b1000..SAI3_RX_SYNC
 *  0b1001..Reserved
 *  0b1010..SAI5_RX_SYNC
 */
#define IOMUXC_GPR_GPR2_GPR_GPT5_EXT_CLK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR2_GPR_GPT5_EXT_CLK_SEL_SHIFT)) & IOMUXC_GPR_GPR2_GPR_GPT5_EXT_CLK_SEL_MASK)
#define IOMUXC_GPR_GPR2_GPR_GPT6_EXT_CLK_SEL_MASK (0xF0000U)
#define IOMUXC_GPR_GPR2_GPR_GPT6_EXT_CLK_SEL_SHIFT (16U)
/*! GPR_GPT6_EXT_CLK_SEL
 *  0b0000..SAI7_TX_SYNC
 *  0b0001..SAI2_TX_SYNC
 *  0b0010..SAI3_TX_SYNC
 *  0b0011..Reserved
 *  0b0100..SAI5_TX_SYNC
 *  0b0101..SAI6_TX_SYNC
 *  0b0110..SAI7_RX_SYNC
 *  0b0111..SAI2_RX_SYNC
 *  0b1000..SAI3_RX_SYNC
 *  0b1001..Reserved
 *  0b1010..SAI5_RX_SYNC
 */
#define IOMUXC_GPR_GPR2_GPR_GPT6_EXT_CLK_SEL(x)  (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR2_GPR_GPT6_EXT_CLK_SEL_SHIFT)) & IOMUXC_GPR_GPR2_GPR_GPT6_EXT_CLK_SEL_MASK)
/*! @} */

/*! @name GPR3 - General Purpose Register 3 */
/*! @{ */
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_data_wait_en_MASK (0x1U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_data_wait_en_SHIFT (0U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_addr_pipeline_en_MASK (0x2U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_addr_pipeline_en_SHIFT (1U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_data_pipeline_en_MASK (0x4U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_data_pipeline_en_SHIFT (2U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_addr_pipeline_en_MASK (0x8U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_addr_pipeline_en_SHIFT (3U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_data_wait_en_MASK (0x10U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_data_wait_en_SHIFT (4U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_addr_pipeline_en_MASK (0x20U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_addr_pipeline_en_SHIFT (5U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_data_pipeline_en_MASK (0x40U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_data_pipeline_en_SHIFT (6U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_addr_pipeline_en_MASK (0x80U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_addr_pipeline_en_SHIFT (7U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_data_wait_en_pndg_MASK (0x10000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_data_wait_en_pndg_SHIFT (16U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_addr_pipeline_en_pndg_MASK (0x20000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_read_addr_pipeline_en_pndg_SHIFT (17U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_data_pipeline_en_pndg_MASK (0x40000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_data_pipeline_en_pndg_SHIFT (18U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_addr_pipeline_en_pndg_MASK (0x80000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_write_addr_pipeline_en_pndg_SHIFT (19U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_data_wait_en_pndg_MASK (0x100000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_data_wait_en_pndg_SHIFT (20U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_addr_pipeline_en_pndg_MASK (0x200000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_read_addr_pipeline_en_pndg_SHIFT (21U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_data_pipeline_en_pndg_MASK (0x400000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_data_pipeline_en_pndg_SHIFT (22U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_addr_pipeline_en_pndg_MASK (0x800000U)
#define IOMUXC_GPR_GPR3_ocram_ctrl_s_write_addr_pipeline_en_pndg_SHIFT (23U)
/*! @} */

/*! @name GPR4 - General Purpose Register 4 */
/*! @{ */
#define IOMUXC_GPR_GPR4_GPR_SDMA1_IPG_STOP_MASK  (0x1U)
#define IOMUXC_GPR_GPR4_GPR_SDMA1_IPG_STOP_SHIFT (0U)
#define IOMUXC_GPR_GPR4_GPR_ENET1_IPG_STOP_MASK  (0x8U)
#define IOMUXC_GPR_GPR4_GPR_ENET1_IPG_STOP_SHIFT (3U)
#define IOMUXC_GPR_GPR4_GPR_SDMA2_IPG_STOP_MASK  (0x10U)
#define IOMUXC_GPR_GPR4_GPR_SDMA2_IPG_STOP_SHIFT (4U)
#define IOMUXC_GPR_GPR4_GPR_SDMA3_IPG_STOP_MASK  (0x1000U)
#define IOMUXC_GPR_GPR4_GPR_SDMA3_IPG_STOP_SHIFT (12U)
#define IOMUXC_GPR_GPR4_SDMA1_IPG_STOP_ACK_MASK  (0x10000U)
#define IOMUXC_GPR_GPR4_SDMA1_IPG_STOP_ACK_SHIFT (16U)
#define IOMUXC_GPR_GPR4_SDMA3_IPG_STOP_ACK_MASK  (0x40000U)
#define IOMUXC_GPR_GPR4_SDMA3_IPG_STOP_ACK_SHIFT (18U)
#define IOMUXC_GPR_GPR4_ENET1_IPG_STOP_ACK_MASK  (0x80000U)
#define IOMUXC_GPR_GPR4_ENET1_IPG_STOP_ACK_SHIFT (19U)
#define IOMUXC_GPR_GPR4_SDMA2_IPG_STOP_ACK_MASK  (0x100000U)
#define IOMUXC_GPR_GPR4_SDMA2_IPG_STOP_ACK_SHIFT (20U)
#define IOMUXC_GPR_GPR4_SAI7_IPG_STOP_ACK_MASK   (0x200000U)
#define IOMUXC_GPR_GPR4_SAI7_IPG_STOP_ACK_SHIFT  (21U)
#define IOMUXC_GPR_GPR4_SAI2_IPG_STOP_ACK_MASK   (0x400000U)
#define IOMUXC_GPR_GPR4_SAI2_IPG_STOP_ACK_SHIFT  (22U)
#define IOMUXC_GPR_GPR4_SAI3_IPG_STOP_ACK_MASK   (0x800000U)
#define IOMUXC_GPR_GPR4_SAI3_IPG_STOP_ACK_SHIFT  (23U)
#define IOMUXC_GPR_GPR4_SAI5_IPG_STOP_ACK_MASK   (0x2000000U)
#define IOMUXC_GPR_GPR4_SAI5_IPG_STOP_ACK_SHIFT  (25U)
#define IOMUXC_GPR_GPR4_SAI6_IPG_STOP_ACK_MASK   (0x4000000U)
#define IOMUXC_GPR_GPR4_SAI6_IPG_STOP_ACK_SHIFT  (26U)
#define IOMUXC_GPR_GPR4_PDM_IPG_STOP_ACK_MASK    (0x8000000U)
#define IOMUXC_GPR_GPR4_PDM_IPG_STOP_ACK_SHIFT   (27U)
/*! @} */

/*! @name GPR5 - General Purpose Register 5 */
/*! @{ */
#define IOMUXC_GPR_GPR5_GPR_PDM_CLK_SEL_MASK     (0xFU)
#define IOMUXC_GPR_GPR5_GPR_PDM_CLK_SEL_SHIFT    (0U)
/*! GPR_PDM_CLK_SEL
 *  0b0000..normal clock.
 *  0b0001..32K clock.
 */
#define IOMUXC_GPR_GPR5_GPR_PDM_CLK_SEL(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR5_GPR_PDM_CLK_SEL_SHIFT)) & IOMUXC_GPR_GPR5_GPR_PDM_CLK_SEL_MASK)
#define IOMUXC_GPR_GPR5_GPR_WDOG1_MASK_MASK      (0x40U)
#define IOMUXC_GPR_GPR5_GPR_WDOG1_MASK_SHIFT     (6U)
#define IOMUXC_GPR_GPR5_GPR_WDOG2_MASK_MASK      (0x80U)
#define IOMUXC_GPR_GPR5_GPR_WDOG2_MASK_SHIFT     (7U)
#define IOMUXC_GPR_GPR5_GPR_WDOG3_MASK_MASK      (0x100000U)
#define IOMUXC_GPR_GPR5_GPR_WDOG3_MASK_SHIFT     (20U)
/*! @} */

/*! @name GPR6 - General Purpose Register 6 */
/*! @{ */
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL3_MASK       (0x1FU)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL3_SHIFT      (0U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL3(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR6_GPR_SAI7_SEL3_SHIFT)) & IOMUXC_GPR_GPR6_GPR_SAI7_SEL3_MASK)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL1_MASK       (0x20U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL1_SHIFT      (5U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL2_MASK       (0x1F00U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL2_SHIFT      (8U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_SEL2(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR6_GPR_SAI7_SEL2_SHIFT)) & IOMUXC_GPR_GPR6_GPR_SAI7_SEL2_MASK)
#define IOMUXC_GPR_GPR6_GPR_SAI7_MCLK_OUT_SEL_MASK (0x2000U)
#define IOMUXC_GPR_GPR6_GPR_SAI7_MCLK_OUT_SEL_SHIFT (13U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL3_MASK       (0x1F0000U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL3_SHIFT      (16U)
/*! GPR_SAI2_SEL3
 *  0b00000..SAI1_CLK_ROOT
 *  0b00001..SAI2_CLK_ROOT
 *  0b00010..SAI3_CLK_ROOT
 *  0b00011..SAI4_CLK_ROOT
 *  0b00100..SAI5_CLK_ROOT
 *  0b00101..SAI6_CLK_ROOT
 *  0b00110..SAI7_CLK_ROOT
 *  0b00111..Reserved
 *  0b01000..SAI2_MCLK
 *  0b01001..SAI3_MCLK
 *  0b01010..Reserved
 *  0b01011..SAI5_MCLK
 *  0b01100..SAI6_MCLK
 *  0b01101..SAI7_MCLK
 *  0b01110..SPDIF1_CLK_ROOT
 *  0b01111..Reserved
 *  0b10000..SPDIF1_EXTCLK
 *  0b10001..SPDIF1_SRCCLK
 *  0b10010..SPDIF1_OUTCLK
 *  0b10011..Reserved
 */
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL3(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR6_GPR_SAI2_SEL3_SHIFT)) & IOMUXC_GPR_GPR6_GPR_SAI2_SEL3_MASK)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL1_MASK       (0x200000U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL1_SHIFT      (21U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL2_MASK       (0x1F000000U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL2_SHIFT      (24U)
/*! GPR_SAI2_SEL2
 *  0b00000..SAI1_CLK_ROOT
 *  0b00001..SAI2_CLK_ROOT
 *  0b00010..SAI3_CLK_ROOT
 *  0b00011..SAI4_CLK_ROOT
 *  0b00100..SAI5_CLK_ROOT
 *  0b00101..SAI6_CLK_ROOT
 *  0b00110..SAI7_CLK_ROOT
 *  0b00111..Reserved
 *  0b01000..SAI2_MCLK
 *  0b01001..SAI3_MCLK
 *  0b01010..Reserved
 *  0b01011..SAI5_MCLK
 *  0b01100..SAI6_MCLK
 *  0b01101..SAI7_MCLK
 *  0b01110..SPDIF1_CLK_ROOT
 *  0b01111..Reserved
 *  0b10000..SPDIF1_EXTCLK
 *  0b10001..SPDIF1_SRCCLK
 *  0b10010..SPDIF1_OUTCLK
 *  0b10011..Reserved
 */
#define IOMUXC_GPR_GPR6_GPR_SAI2_SEL2(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR6_GPR_SAI2_SEL2_SHIFT)) & IOMUXC_GPR_GPR6_GPR_SAI2_SEL2_MASK)
#define IOMUXC_GPR_GPR6_GPR_SAI2_MCLK_OUT_SEL_MASK (0x20000000U)
#define IOMUXC_GPR_GPR6_GPR_SAI2_MCLK_OUT_SEL_SHIFT (29U)
/*! @} */

/*! @name GPR7 - General Purpose Register 7 */
/*! @{ */
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL3_MASK       (0x1FU)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL3_SHIFT      (0U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL3(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR7_GPR_SAI3_SEL3_SHIFT)) & IOMUXC_GPR_GPR7_GPR_SAI3_SEL3_MASK)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL1_MASK       (0x20U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL1_SHIFT      (5U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL2_MASK       (0x1F00U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL2_SHIFT      (8U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_SEL2(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR7_GPR_SAI3_SEL2_SHIFT)) & IOMUXC_GPR_GPR7_GPR_SAI3_SEL2_MASK)
#define IOMUXC_GPR_GPR7_GPR_SAI3_MCLK_OUT_SEL_MASK (0x2000U)
#define IOMUXC_GPR_GPR7_GPR_SAI3_MCLK_OUT_SEL_SHIFT (13U)
/*! @} */

/*! @name GPR8 - General Purpose Register 8 */
/*! @{ */
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL3_MASK       (0x1FU)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL3_SHIFT      (0U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL3(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR8_GPR_SAI5_SEL3_SHIFT)) & IOMUXC_GPR_GPR8_GPR_SAI5_SEL3_MASK)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL1_MASK       (0x20U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL1_SHIFT      (5U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL2_MASK       (0x1F00U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL2_SHIFT      (8U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_SEL2(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR8_GPR_SAI5_SEL2_SHIFT)) & IOMUXC_GPR_GPR8_GPR_SAI5_SEL2_MASK)
#define IOMUXC_GPR_GPR8_GPR_SAI5_MCLK_OUT_SEL_MASK (0x2000U)
#define IOMUXC_GPR_GPR8_GPR_SAI5_MCLK_OUT_SEL_SHIFT (13U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL3_MASK       (0x1F0000U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL3_SHIFT      (16U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL3(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR8_GPR_SAI6_SEL3_SHIFT)) & IOMUXC_GPR_GPR8_GPR_SAI6_SEL3_MASK)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL1_MASK       (0x200000U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL1_SHIFT      (21U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL2_MASK       (0x1F000000U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL2_SHIFT      (24U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_SEL2(x)         (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR8_GPR_SAI6_SEL2_SHIFT)) & IOMUXC_GPR_GPR8_GPR_SAI6_SEL2_MASK)
#define IOMUXC_GPR_GPR8_GPR_SAI6_MCLK_OUT_SEL_MASK (0x20000000U)
#define IOMUXC_GPR_GPR8_GPR_SAI6_MCLK_OUT_SEL_SHIFT (29U)
/*! @} */

/*! @name GPR10 - General Purpose Register 10 */
/*! @{ */
#define IOMUXC_GPR_GPR10_GPR_TZASC_EN_MASK       (0x1U)
#define IOMUXC_GPR_GPR10_GPR_TZASC_EN_SHIFT      (0U)
#define IOMUXC_GPR_GPR10_GPR_TZASC_ID_SWAP_BYPASS_MASK (0x2U)
#define IOMUXC_GPR_GPR10_GPR_TZASC_ID_SWAP_BYPASS_SHIFT (1U)
#define IOMUXC_GPR_GPR10_GPR_SEC_ERR_RESP_EN_MASK (0x4U)
#define IOMUXC_GPR_GPR10_GPR_SEC_ERR_RESP_EN_SHIFT (2U)
#define IOMUXC_GPR_GPR10_GPR_EXC_ERR_RESP_EN_MASK (0x8U)
#define IOMUXC_GPR_GPR10_GPR_EXC_ERR_RESP_EN_SHIFT (3U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_TZASC_EN_MASK  (0x10000U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_TZASC_EN_SHIFT (16U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_TZASC_ID_SWAP_BYPASS_MASK (0x20000U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_TZASC_ID_SWAP_BYPASS_SHIFT (17U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_SEC_ERR_RESP_EN_MASK (0x40000U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_SEC_ERR_RESP_EN_SHIFT (18U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_EXC_ERR_RESP_EN_MASK (0x80000U)
#define IOMUXC_GPR_GPR10_LOCK_GPR_EXC_ERR_RESP_EN_SHIFT (19U)
/*! @} */

/*! @name GPR11 - General Purpose Register 11 */
/*! @{ */
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION0_MASK (0x1U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION0_SHIFT (0U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_MASK (0xFEU)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_SHIFT (1U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_SHIFT)) & IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_MASK)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION0_MASK (0x400U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION0_SHIFT (10U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_MASK (0x3800U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_SHIFT (11U)
#define IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_SHIFT)) & IOMUXC_GPR_GPR11_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_MASK)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION0_MASK (0x10000U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION0_SHIFT (16U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_MASK (0xFE0000U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_SHIFT (17U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_SHIFT)) & IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_OCRAM_TZ_SECURE_REGION1_MASK)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION0_MASK (0x4000000U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION0_SHIFT (26U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_MASK (0x38000000U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_SHIFT (27U)
#define IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1(x) (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_SHIFT)) & IOMUXC_GPR_GPR11_LOCK_GPR_OCRAM_CTRL_S_OCRAM_TZ_SECURE_REGION1_MASK)
/*! @} */

/*! @name GPR13 - General Purpose Register 13 */
/*! @{ */
#define IOMUXC_GPR_GPR13_GPR_ARCACHE_USDHC_MASK  (0x1U)
#define IOMUXC_GPR_GPR13_GPR_ARCACHE_USDHC_SHIFT (0U)
#define IOMUXC_GPR_GPR13_GPR_AWCACHE_USDHC_MASK  (0x2U)
#define IOMUXC_GPR_GPR13_GPR_AWCACHE_USDHC_SHIFT (1U)
/*! @} */

/*! @name GPR20 - General Purpose Register 20 */
/*! @{ */
#define IOMUXC_GPR_GPR20_SRAM_HSD_RAWLM_MASK     (0x3U)
#define IOMUXC_GPR_GPR20_SRAM_HSD_RAWLM_SHIFT    (0U)
/*! SRAM_HSD_RAWLM
 *  0b00..when supermix operates on 0.8V (default)
 *  0b00..when supermix operates on 0.9V
 */
#define IOMUXC_GPR_GPR20_SRAM_HSD_RAWLM(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR20_SRAM_HSD_RAWLM_SHIFT)) & IOMUXC_GPR_GPR20_SRAM_HSD_RAWLM_MASK)
#define IOMUXC_GPR_GPR20_SRAM_HSD_RAWL_MASK      (0x4U)
#define IOMUXC_GPR_GPR20_SRAM_HSD_RAWL_SHIFT     (2U)
#define IOMUXC_GPR_GPR20_SRAM_HSD_WABLM_MASK     (0x18U)
#define IOMUXC_GPR_GPR20_SRAM_HSD_WABLM_SHIFT    (3U)
/*! SRAM_HSD_WABLM
 *  0b01..when supermix operates on 0.8V (default)
 *  0b00..when supermix operates on 0.9V
 */
#define IOMUXC_GPR_GPR20_SRAM_HSD_WABLM(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR20_SRAM_HSD_WABLM_SHIFT)) & IOMUXC_GPR_GPR20_SRAM_HSD_WABLM_MASK)
#define IOMUXC_GPR_GPR20_SRAM_HSD_WABL_MASK      (0x20U)
#define IOMUXC_GPR_GPR20_SRAM_HSD_WABL_SHIFT     (5U)
/*! @} */

/*! @name GPR21 - General Purpose Register 21 */
/*! @{ */
#define IOMUXC_GPR_GPR21_CM7_INIT_VTOR_MASK      (0xFFFFFF80U)
#define IOMUXC_GPR_GPR21_CM7_INIT_VTOR_SHIFT     (7U)
#define IOMUXC_GPR_GPR21_CM7_INIT_VTOR(x)        (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR21_CM7_INIT_VTOR_SHIFT)) & IOMUXC_GPR_GPR21_CM7_INIT_VTOR_MASK)
/*! @} */

/*! @name GPR22 - General Purpose Register 22 */
/*! @{ */
#define IOMUXC_GPR_GPR22_CM7_CPUWAIT_MASK        (0x1U)
#define IOMUXC_GPR_GPR22_CM7_CPUWAIT_SHIFT       (0U)
#define IOMUXC_GPR_GPR22_CM7_HCLK_AUTO_GATE_EN_MASK (0x4U)
#define IOMUXC_GPR_GPR22_CM7_HCLK_AUTO_GATE_EN_SHIFT (2U)
#define IOMUXC_GPR_GPR22_CM7_HCLK_GATE_EN_MASK   (0x8U)
#define IOMUXC_GPR_GPR22_CM7_HCLK_GATE_EN_SHIFT  (3U)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFI_MASK     (0xF0000U)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFI_SHIFT    (16U)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFI(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR22_CPU_STANDBYWFI_SHIFT)) & IOMUXC_GPR_GPR22_CPU_STANDBYWFI_MASK)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFE_MASK     (0xF00000U)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFE_SHIFT    (20U)
#define IOMUXC_GPR_GPR22_CPU_STANDBYWFE(x)       (((uint32_t)(((uint32_t)(x)) << IOMUXC_GPR_GPR22_CPU_STANDBYWFE_SHIFT)) & IOMUXC_GPR_GPR22_CPU_STANDBYWFE_MASK)
#define IOMUXC_GPR_GPR22_CM7_AHBSRDY_MASK        (0x40000000U)
#define IOMUXC_GPR_GPR22_CM7_AHBSRDY_SHIFT       (30U)
/*! @} */

/* The count of IOMUXC_GPR_GPR */
#define IOMUXC_GPR_GPR_COUNT                     (25U)


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Masks */


/* IOMUXC_GPR - Peripheral instance base addresses */
/** Peripheral IOMUXC_GPR base pointer */
#define IOMUXC_GPR_BASE_PTR                      ((IOMUXC_GPR_MemMapPtr)0x30340000u)
/** Array initializer of IOMUXC_GPR peripheral base pointers */
#define IOMUXC_GPR_BASE_PTRS                     { IOMUXC_GPR_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- IOMUXC_GPR - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup IOMUXC_GPR_Register_Accessor_Macros IOMUXC_GPR - Register accessor macros
 * @{
 */


/* IOMUXC_GPR - Register instance definitions */
/* IOMUXC_GPR */
#define IOMUXC_GPR_GPR0                          IOMUXC_GPR_GPR0_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR1                          IOMUXC_GPR_GPR1_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR2                          IOMUXC_GPR_GPR2_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR3                          IOMUXC_GPR_GPR3_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR4                          IOMUXC_GPR_GPR4_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR5                          IOMUXC_GPR_GPR5_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR6                          IOMUXC_GPR_GPR6_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR7                          IOMUXC_GPR_GPR7_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR8                          IOMUXC_GPR_GPR8_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR9                          IOMUXC_GPR_GPR9_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR10                         IOMUXC_GPR_GPR10_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR11                         IOMUXC_GPR_GPR11_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR12                         IOMUXC_GPR_GPR12_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR13                         IOMUXC_GPR_GPR13_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR14                         IOMUXC_GPR_GPR14_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR15                         IOMUXC_GPR_GPR15_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR16                         IOMUXC_GPR_GPR16_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR17                         IOMUXC_GPR_GPR17_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR18                         IOMUXC_GPR_GPR18_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR19                         IOMUXC_GPR_GPR19_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR20                         IOMUXC_GPR_GPR20_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR21                         IOMUXC_GPR_GPR21_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR22                         IOMUXC_GPR_GPR22_REG(IOMUXC_GPR_BASE_PTR)
#define IOMUXC_GPR_GPR23                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,0)
#define IOMUXC_GPR_GPR24                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,1)
#define IOMUXC_GPR_GPR25                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,2)
#define IOMUXC_GPR_GPR26                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,3)
#define IOMUXC_GPR_GPR27                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,4)
#define IOMUXC_GPR_GPR28                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,5)
#define IOMUXC_GPR_GPR29                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,6)
#define IOMUXC_GPR_GPR30                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,7)
#define IOMUXC_GPR_GPR31                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,8)
#define IOMUXC_GPR_GPR32                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,9)
#define IOMUXC_GPR_GPR33                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,10)
#define IOMUXC_GPR_GPR34                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,11)
#define IOMUXC_GPR_GPR35                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,12)
#define IOMUXC_GPR_GPR36                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,13)
#define IOMUXC_GPR_GPR37                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,14)
#define IOMUXC_GPR_GPR38                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,15)
#define IOMUXC_GPR_GPR39                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,16)
#define IOMUXC_GPR_GPR40                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,17)
#define IOMUXC_GPR_GPR41                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,18)
#define IOMUXC_GPR_GPR42                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,19)
#define IOMUXC_GPR_GPR43                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,20)
#define IOMUXC_GPR_GPR44                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,21)
#define IOMUXC_GPR_GPR45                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,22)
#define IOMUXC_GPR_GPR46                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,23)
#define IOMUXC_GPR_GPR47                         IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,24)

/* IOMUXC_GPR - Register array accessors */
#define IOMUXC_GPR_GPR(index)                    IOMUXC_GPR_GPR_REG(IOMUXC_GPR_BASE_PTR,index)

/*!
 * @}
 */ /* end of group IOMUXC_GPR_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group IOMUXC_GPR_Peripheral */


/* ----------------------------------------------------------------------------
   -- ISI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ISI_Peripheral ISI
 * @{
 */

/** ISI - Peripheral register structure */
typedef struct ISI_MemMap {
  uint32_t CHNL_CTRL;                              /**< Channel Control Register, offset: 0x0 */
  uint32_t CHNL_IMG_CTRL;                          /**< Channel Image Control Register, offset: 0x4 */
  uint32_t CHNL_OUT_BUF_CTRL;                      /**< Channel Output Buffer Control Register, offset: 0x8 */
  uint32_t CHNL_IMG_CFG;                           /**< Channel Image Configuration, offset: 0xC */
  uint32_t CHNL_IER;                               /**< Channel Interrupt Enable Register, offset: 0x10 */
  uint32_t CHNL_STS;                               /**< Channel Status Register, offset: 0x14 */
  uint32_t CHNL_SCALE_FACTOR;                      /**< Channel Scale Factor Register, offset: 0x18 */
  uint32_t CHNL_SCALE_OFFSET;                      /**< Channel Scale Offset Register, offset: 0x1C */
  uint32_t CHNL_CROP_ULC;                          /**< Channel Crop Upper Left Corner Coordinate Register, offset: 0x20 */
  uint32_t CHNL_CROP_LRC;                          /**< Channel Crop Lower Right Corner Coordinate Register, offset: 0x24 */
  uint32_t CHNL_CSC_COEFF0;                        /**< Channel Color Space Conversion Coefficient Register 0, offset: 0x28 */
  uint32_t CHNL_CSC_COEFF1;                        /**< Channel Color Space Conversion Coefficient Register 1, offset: 0x2C */
  uint32_t CHNL_CSC_COEFF2;                        /**< Channel Color Space Conversion Coefficient Register 2, offset: 0x30 */
  uint32_t CHNL_CSC_COEFF3;                        /**< Channel Color Space Conversion Coefficient Register 3, offset: 0x34 */
  uint32_t CHNL_CSC_COEFF4;                        /**< Channel Color Space Conversion Coefficient Register 4, offset: 0x38 */
  uint32_t CHNL_CSC_COEFF5;                        /**< Channel Color Space Conversion Coefficient Register 5, offset: 0x3C */
  uint32_t CHNL_ROI_0_ALPHA;                       /**< Channel Alpha Value Register for Region of Interest 0, offset: 0x40 */
  uint32_t CHNL_ROI_0_ULC;                         /**< Channel Upper Left Coordinate Register for Region of Interest 0, offset: 0x44 */
  uint32_t CHNL_ROI_0_LRC;                         /**< Channel Lower Right Coordinate Register for Region of Interest 0, offset: 0x48 */
  uint32_t CHNL_ROI_1_ALPHA;                       /**< Channel Alpha Value Register for Region of Interest 1, offset: 0x4C */
  uint32_t CHNL_ROI_1_ULC;                         /**< Channel Upper Left Coordinate Register for Region of Interest 1, offset: 0x50 */
  uint32_t CHNL_ROI_1_LRC;                         /**< Channel Lower Right Coordinate Register for Region of Interest 1, offset: 0x54 */
  uint32_t CHNL_ROI_2_ALPHA;                       /**< Channel Alpha Value Register for Region of Interest 2, offset: 0x58 */
  uint32_t CHNL_ROI_2_ULC;                         /**< Channel Upper Left Coordinate Register for Region of Interest 2, offset: 0x5C */
  uint32_t CHNL_ROI_2_LRC;                         /**< Channel Lower Right Coordinate Register for Region of Interest 2, offset: 0x60 */
  uint32_t CHNL_ROI_3_ALPHA;                       /**< Channel Alpha Value Register for Region of Interest 3, offset: 0x64 */
  uint32_t CHNL_ROI_3_ULC;                         /**< Channel Upper Left Coordinate Register for Region of Interest 3, offset: 0x68 */
  uint32_t CHNL_ROI_3_LRC;                         /**< Channel Lower Right Coordinate Register for Region of Interest 3, offset: 0x6C */
  uint32_t CHNL_OUT_BUF1_ADDR_Y;                   /**< Channel RGB or Luma (Y) Output Buffer 1 Address, offset: 0x70 */
  uint32_t CHNL_OUT_BUF1_ADDR_U;                   /**< Channel Chroma (U/Cb/UV/CbCr) Output Buffer 1 Address, offset: 0x74 */
  uint32_t CHNL_OUT_BUF1_ADDR_V;                   /**< Channel Chroma (V/Cr) Output Buffer 1 Address, offset: 0x78 */
  uint32_t CHNL_OUT_BUF_PITCH;                     /**< Channel Output Buffer Pitch, offset: 0x7C */
  uint32_t CHNL_IN_BUF_ADDR;                       /**< Channel Input Buffer Address, offset: 0x80 */
  uint32_t CHNL_IN_BUF_PITCH;                      /**< Channel Input Buffer Pitch, offset: 0x84 */
  uint32_t CHNL_MEM_RD_CTRL;                       /**< Channel Memory Read Control, offset: 0x88 */
  uint32_t CHNL_OUT_BUF2_ADDR_Y;                   /**< Channel RGB or Luma (Y) Output Buffer 2 Address, offset: 0x8C */
  uint32_t CHNL_OUT_BUF2_ADDR_U;                   /**< Channel Chroma (U/Cb/UV/CbCr) Output Buffer 2 Address, offset: 0x90 */
  uint32_t CHNL_OUT_BUF2_ADDR_V;                   /**< Channel Chroma (V/Cr) Output Buffer 2 Address, offset: 0x94 */
  uint32_t CHNL_SCL_IMG_CFG;                       /**< Channel Scaled Image Configuration, offset: 0x98 */
  uint32_t CHNL_FLOW_CTRL;                         /**< Channel Flow Control Register, offset: 0x9C */
} volatile *ISI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- ISI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ISI_Register_Accessor_Macros ISI - Register accessor macros
 * @{
 */


/* ISI - Register accessors */
#define ISI_CHNL_CTRL_REG(base)                  ((base)->CHNL_CTRL)
#define ISI_CHNL_IMG_CTRL_REG(base)              ((base)->CHNL_IMG_CTRL)
#define ISI_CHNL_OUT_BUF_CTRL_REG(base)          ((base)->CHNL_OUT_BUF_CTRL)
#define ISI_CHNL_IMG_CFG_REG(base)               ((base)->CHNL_IMG_CFG)
#define ISI_CHNL_IER_REG(base)                   ((base)->CHNL_IER)
#define ISI_CHNL_STS_REG(base)                   ((base)->CHNL_STS)
#define ISI_CHNL_SCALE_FACTOR_REG(base)          ((base)->CHNL_SCALE_FACTOR)
#define ISI_CHNL_SCALE_OFFSET_REG(base)          ((base)->CHNL_SCALE_OFFSET)
#define ISI_CHNL_CROP_ULC_REG(base)              ((base)->CHNL_CROP_ULC)
#define ISI_CHNL_CROP_LRC_REG(base)              ((base)->CHNL_CROP_LRC)
#define ISI_CHNL_CSC_COEFF0_REG(base)            ((base)->CHNL_CSC_COEFF0)
#define ISI_CHNL_CSC_COEFF1_REG(base)            ((base)->CHNL_CSC_COEFF1)
#define ISI_CHNL_CSC_COEFF2_REG(base)            ((base)->CHNL_CSC_COEFF2)
#define ISI_CHNL_CSC_COEFF3_REG(base)            ((base)->CHNL_CSC_COEFF3)
#define ISI_CHNL_CSC_COEFF4_REG(base)            ((base)->CHNL_CSC_COEFF4)
#define ISI_CHNL_CSC_COEFF5_REG(base)            ((base)->CHNL_CSC_COEFF5)
#define ISI_CHNL_ROI_0_ALPHA_REG(base)           ((base)->CHNL_ROI_0_ALPHA)
#define ISI_CHNL_ROI_0_ULC_REG(base)             ((base)->CHNL_ROI_0_ULC)
#define ISI_CHNL_ROI_0_LRC_REG(base)             ((base)->CHNL_ROI_0_LRC)
#define ISI_CHNL_ROI_1_ALPHA_REG(base)           ((base)->CHNL_ROI_1_ALPHA)
#define ISI_CHNL_ROI_1_ULC_REG(base)             ((base)->CHNL_ROI_1_ULC)
#define ISI_CHNL_ROI_1_LRC_REG(base)             ((base)->CHNL_ROI_1_LRC)
#define ISI_CHNL_ROI_2_ALPHA_REG(base)           ((base)->CHNL_ROI_2_ALPHA)
#define ISI_CHNL_ROI_2_ULC_REG(base)             ((base)->CHNL_ROI_2_ULC)
#define ISI_CHNL_ROI_2_LRC_REG(base)             ((base)->CHNL_ROI_2_LRC)
#define ISI_CHNL_ROI_3_ALPHA_REG(base)           ((base)->CHNL_ROI_3_ALPHA)
#define ISI_CHNL_ROI_3_ULC_REG(base)             ((base)->CHNL_ROI_3_ULC)
#define ISI_CHNL_ROI_3_LRC_REG(base)             ((base)->CHNL_ROI_3_LRC)
#define ISI_CHNL_OUT_BUF1_ADDR_Y_REG(base)       ((base)->CHNL_OUT_BUF1_ADDR_Y)
#define ISI_CHNL_OUT_BUF1_ADDR_U_REG(base)       ((base)->CHNL_OUT_BUF1_ADDR_U)
#define ISI_CHNL_OUT_BUF1_ADDR_V_REG(base)       ((base)->CHNL_OUT_BUF1_ADDR_V)
#define ISI_CHNL_OUT_BUF_PITCH_REG(base)         ((base)->CHNL_OUT_BUF_PITCH)
#define ISI_CHNL_IN_BUF_ADDR_REG(base)           ((base)->CHNL_IN_BUF_ADDR)
#define ISI_CHNL_IN_BUF_PITCH_REG(base)          ((base)->CHNL_IN_BUF_PITCH)
#define ISI_CHNL_MEM_RD_CTRL_REG(base)           ((base)->CHNL_MEM_RD_CTRL)
#define ISI_CHNL_OUT_BUF2_ADDR_Y_REG(base)       ((base)->CHNL_OUT_BUF2_ADDR_Y)
#define ISI_CHNL_OUT_BUF2_ADDR_U_REG(base)       ((base)->CHNL_OUT_BUF2_ADDR_U)
#define ISI_CHNL_OUT_BUF2_ADDR_V_REG(base)       ((base)->CHNL_OUT_BUF2_ADDR_V)
#define ISI_CHNL_SCL_IMG_CFG_REG(base)           ((base)->CHNL_SCL_IMG_CFG)
#define ISI_CHNL_FLOW_CTRL_REG(base)             ((base)->CHNL_FLOW_CTRL)

/*!
 * @}
 */ /* end of group ISI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- ISI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ISI_Register_Masks ISI Register Masks
 * @{
 */

/*! @name CHNL_CTRL - Channel Control Register */
/*! @{ */
#define ISI_CHNL_CTRL_SRC_TYPE_MASK              (0x10U)
#define ISI_CHNL_CTRL_SRC_TYPE_SHIFT             (4U)
#define ISI_CHNL_CTRL_VC_ID_MASK                 (0xC0U)
#define ISI_CHNL_CTRL_VC_ID_SHIFT                (6U)
/*! VC_ID - Virtual channel ID
 *  0b00..Virtual Channel 0 selected or no virtual channel used
 *  0b01..Virtual Channel 1 selected
 *  0b10..Virtual Channel 2 selected
 *  0b11..Virtual Channel 3 selected
 */
#define ISI_CHNL_CTRL_VC_ID(x)                   (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CTRL_VC_ID_SHIFT)) & ISI_CHNL_CTRL_VC_ID_MASK)
#define ISI_CHNL_CTRL_SW_RST_MASK                (0x1000000U)
#define ISI_CHNL_CTRL_SW_RST_SHIFT               (24U)
#define ISI_CHNL_CTRL_CHAIN_BUF_MASK             (0x6000000U)
#define ISI_CHNL_CTRL_CHAIN_BUF_SHIFT            (25U)
/*! CHAIN_BUF - Chain line buffer control
 *  0b00..No line buffers chained (supports 2048 or less horizontal resolution)
 *  0b01..2 line buffers chained (supports 4096 horizontal resolution). Line buffers of channels 'n' and 'n+1' are chained.
 *  0b10..4 line buffers chained (supports 8192 horizontal resolution). Line buffers of channels 'n', 'n+1', 'n+2' and 'n+3' are chained.
 *  0b11..Reserved for future use
 */
#define ISI_CHNL_CTRL_CHAIN_BUF(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CTRL_CHAIN_BUF_SHIFT)) & ISI_CHNL_CTRL_CHAIN_BUF_MASK)
#define ISI_CHNL_CTRL_CHNL_BYPASS_MASK           (0x20000000U)
#define ISI_CHNL_CTRL_CHNL_BYPASS_SHIFT          (29U)
#define ISI_CHNL_CTRL_CLK_EN_MASK                (0x40000000U)
#define ISI_CHNL_CTRL_CLK_EN_SHIFT               (30U)
#define ISI_CHNL_CTRL_CHNL_EN_MASK               (0x80000000U)
#define ISI_CHNL_CTRL_CHNL_EN_SHIFT              (31U)
/*! @} */

/*! @name CHNL_IMG_CTRL - Channel Image Control Register */
/*! @{ */
#define ISI_CHNL_IMG_CTRL_CSC_BYP_MASK           (0x1U)
#define ISI_CHNL_IMG_CTRL_CSC_BYP_SHIFT          (0U)
#define ISI_CHNL_IMG_CTRL_CSC_MODE_MASK          (0x6U)
#define ISI_CHNL_IMG_CTRL_CSC_MODE_SHIFT         (1U)
/*! CSC_MODE - Color Space Conversion operating mode
 *  0b00..Convert from YUV to RGB
 *  0b01..Convert from YCbCr to RGB
 *  0b10..Convert from RGB to YUV
 *  0b11..Convert from RGB to YCbCr
 */
#define ISI_CHNL_IMG_CTRL_CSC_MODE(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_CSC_MODE_SHIFT)) & ISI_CHNL_IMG_CTRL_CSC_MODE_MASK)
#define ISI_CHNL_IMG_CTRL_YCBCR_MODE_MASK        (0x8U)
#define ISI_CHNL_IMG_CTRL_YCBCR_MODE_SHIFT       (3U)
#define ISI_CHNL_IMG_CTRL_RSVD2_MASK             (0x10U)
#define ISI_CHNL_IMG_CTRL_RSVD2_SHIFT            (4U)
#define ISI_CHNL_IMG_CTRL_HFLIP_EN_MASK          (0x20U)
#define ISI_CHNL_IMG_CTRL_HFLIP_EN_SHIFT         (5U)
#define ISI_CHNL_IMG_CTRL_VFLIP_EN_MASK          (0x40U)
#define ISI_CHNL_IMG_CTRL_VFLIP_EN_SHIFT         (6U)
#define ISI_CHNL_IMG_CTRL_CROP_EN_MASK           (0x80U)
#define ISI_CHNL_IMG_CTRL_CROP_EN_SHIFT          (7U)
#define ISI_CHNL_IMG_CTRL_DEC_Y_MASK             (0x300U)
#define ISI_CHNL_IMG_CTRL_DEC_Y_SHIFT            (8U)
/*! DEC_Y - Vertical pre-decimation control
 *  0b00..Pre-decimation filter is disabled. Bilinear scaling filter is still operational.
 *  0b01..Decimate by 2
 *  0b10..Decimate by 4
 *  0b11..Decimate by 8
 */
#define ISI_CHNL_IMG_CTRL_DEC_Y(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_DEC_Y_SHIFT)) & ISI_CHNL_IMG_CTRL_DEC_Y_MASK)
#define ISI_CHNL_IMG_CTRL_DEC_X_MASK             (0xC00U)
#define ISI_CHNL_IMG_CTRL_DEC_X_SHIFT            (10U)
/*! DEC_X - Horizontal pre-decimation control
 *  0b00..Pre-decimation filter is disabled. Bilinear scaling filter is still operational.
 *  0b01..Decimate by 2
 *  0b10..Decimate by 4
 *  0b11..Decimate by 8
 */
#define ISI_CHNL_IMG_CTRL_DEC_X(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_DEC_X_SHIFT)) & ISI_CHNL_IMG_CTRL_DEC_X_MASK)
#define ISI_CHNL_IMG_CTRL_DEINT_MASK             (0x7000U)
#define ISI_CHNL_IMG_CTRL_DEINT_SHIFT            (12U)
/*! DEINT - De-interlace control
 *  0b000, 0b001..No de-interlacing done
 *  0b010..Weave de-interlacing (Odd, Even) method used
 *  0b011..Weave de-interlacing (Even, Odd) method used
 *  0b100..Blending or linear interpolation (Odd + Even) de-interlacing method used
 *  0b101..Blending or linear interpolation (Even + Odd) de-interlacing method used
 *  0b110, 0b111..Line doubling de-interlacing method used. Both Odd and Even fields are doubled.
 */
#define ISI_CHNL_IMG_CTRL_DEINT(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_DEINT_SHIFT)) & ISI_CHNL_IMG_CTRL_DEINT_MASK)
#define ISI_CHNL_IMG_CTRL_GBL_ALPHA_EN_MASK      (0x8000U)
#define ISI_CHNL_IMG_CTRL_GBL_ALPHA_EN_SHIFT     (15U)
#define ISI_CHNL_IMG_CTRL_GBL_ALPHA_VAL_MASK     (0xFF0000U)
#define ISI_CHNL_IMG_CTRL_GBL_ALPHA_VAL_SHIFT    (16U)
/*! GBL_ALPHA_VAL - Global alpha value
 *  0b00000000-0b11111111..Alpha value to be inserted with all RGB pixels
 */
#define ISI_CHNL_IMG_CTRL_GBL_ALPHA_VAL(x)       (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_GBL_ALPHA_VAL_SHIFT)) & ISI_CHNL_IMG_CTRL_GBL_ALPHA_VAL_MASK)
#define ISI_CHNL_IMG_CTRL_FORMAT_MASK            (0x3F000000U)
#define ISI_CHNL_IMG_CTRL_FORMAT_SHIFT           (24U)
/*! FORMAT - Output image format
 *  0b000000..RGBA8888 - RGB format with alpha in LSB; 8-bits per component. 'A' indicates alpha value.
 *  0b000001..ABGR8888 - BGR format with alpha in MSB; 8-bits per component. 'A' indicates alpha value.
 *  0b000010..ARGB8888 - RGB format with alpha in MSB; 8-bits per component. 'A' indicates alpha value.
 *  0b000011..RGBX888 - RGB format with 8-bits per color component (unpacked and MSB-alinged in 32-bit DWORD). 'X' indicates the waste bits.
 *  0b000100..XBGR888 - BGR format with 8-bits per color component (unpacked and LSB aligned in 32-bit DWORD). 'X' indicates the waste bits.
 *  0b000101..XRGB888 - RGB format with 8-bits per color component (unpacked and LSB aligned in 32-bit DWORD). 'X' indicates the waste bits.
 *  0b000110..RGB888P - RGB format with 8-bits per color component (packed into 24-bits). No waste bits.
 *  0b000111..BGR888P - BGR format with 8-bits per color component (packed into 24-bits). No waste bits.
 *  0b001000..A2BGR10 - BGR format with 2-bits alpha in MSB; 10-bits per color component. 'A' indicates alpha value.
 *  0b001001..A2RGB10 - RGB format with 2-bits alpha in MSB; 10-bits per color component. 'A' indicates alpha value.
 *  0b001010..RGB565 - RGB format with 5-bits of R, B; 6-bits of G (packed into 16-bits WORD). No waste bits.
 *  0b001011..RAW8 - 8-bit RAW data packed into 32-bit DWORD
 *  0b001100..RAW10 - 10-bit RAW data packed into 16-bit WORD with 6 LSBs waste bits
 *  0b001101..RAW10P - 10-bit RAW data packed into 32-bit DWORD
 *  0b001110..RAW12 - 12-bit RAW data packed into 16-bit DWORD with 4 LSBs waste bits
 *  0b001111..RAW16 - 16-bit RAW data packed into 32-bit DWORD
 *  0b010000..YUV444_1P8P with 8-bits per color component; 1-plane, YUV interleaved packed bytes
 *  0b010001..YUV444_2P8P with 8-bits per color component; 2-plane, UV interleaved packed bytes
 *  0b010010..YUV444_3P8P with 8-bits per color component; 3-plane, non-interleaved packed bytes
 *  0b010011..YUV444_1P8 with 8-bits per color component; 1-plane YUV interleaved unpacked bytes (8 MSBs waste bits in 32-bit DWORD)
 *  0b010100..YUV444_1P10 with 10-bits per color component; 1-plane, YUV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b010101..YUV444_2P10 with 10-bits per color component; 2-plane, UV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b010110..YUV444_3P10 with 10-bits per color component; 3-plane, non-interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b010111..Reserved for future use
 *  0b011000..YUV444_1P10P with 10-bits per color component; 1-plane, YUV interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b011001..YUV444_2P10P with 10-bits per color component; 2-plane, UV interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b011010..YUV444_3P10P with 10-bits per color component; 3-plane, non-interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b011011..Reserved for future use
 *  0b011100..YUV444_1P12 with 12-bits per color component; 1-plane, YUV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b011101..YUV444_2P12 with 12-bits per color component; 2-plane, UV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b011110..YUV444_3P12 with 12-bits per color component; 3-plane, non-interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b011111..Reserved for future use
 *  0b100000..YUV422_1P8P with 8-bits per color component; 1-plane, YUV interleaved packed bytes
 *  0b100001..YUV422_2P8P with 8-bits per color component; 2-plane, UV interleaved packed bytes
 *  0b100010..YUV422_3P8P with 8-bits per color component; 3-plane, non-interleaved packed bytes
 *  0b100011..Reserved for future use
 *  0b100100..YUV422_1P10 with 10-bits per color component; 1-plane, YUV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b100101..YUV422_2P10 with 10-bits per color component; 2-plane, UV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b100110..YUV422_3P10 with 10-bits per color component; 3-plane, non-interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b100111..Reserved for future use
 *  0b101000..YUV422_1P10P with 10-bits per color component; 1-plane, YUV interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b101001..YUV422_2P10P with 10-bits per color component; 2-plane, UV interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b101010..YUV422_3P10P with 10-bits per color component; 3-plane, non-interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b101011..Reserved for future use
 *  0b101100..YUV422_1P12 with 12-bits per color component; 1-plane, YUV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b101101..YUV422_2P12 with 12-bits per color component; 2-plane, UV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b101110..YUV422_3P12 with 12-bits per color component; 3-plane, non-interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b101111..Reserved for future use
 *  0b110000..Reserved for future use
 *  0b110001..YUV420_2P8P with 8-bits per color component; 2-plane, UV interleaved packed bytes
 *  0b110010..YUV420_3P8P with 8-bits per color component; 3-plane, non-interleaved packed bytes
 *  0b110011..Reserved for future use
 *  0b110100..Reserved for future use
 *  0b110101..YUV420_2P10 with 10-bits per color component; 2-plane, UV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b110110..YUV420_3P10 with 10-bits per color component; 3-plane, non-interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b110111..Reserved for future use
 *  0b111000..Reserved for future use
 *  0b111001..YUV420_2P10P with 10-bits per color component; 2-plane, UV interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b111010..YUV420_3P10P with 10-bits per color component; 3-plane, non-interleaved packed bytes (2 MSBs waste bits in 32-bit DWORD)
 *  0b111011..Reserved for future use
 *  0b111100..Reserved for future use
 *  0b111101..YUV420_2P12 with 12-bits per color component; 2-plane, UV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b111110..YUV420_3P12 with 12-bits per color component; 3-plane, non-interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b111111..Reserved for future use
 */
#define ISI_CHNL_IMG_CTRL_FORMAT(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_FORMAT_SHIFT)) & ISI_CHNL_IMG_CTRL_FORMAT_MASK)
#define ISI_CHNL_IMG_CTRL_RSVD0_MASK             (0xC0000000U)
#define ISI_CHNL_IMG_CTRL_RSVD0_SHIFT            (30U)
#define ISI_CHNL_IMG_CTRL_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CTRL_RSVD0_SHIFT)) & ISI_CHNL_IMG_CTRL_RSVD0_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF_CTRL - Channel Output Buffer Control Register */
/*! @{ */
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_Y_MASK (0xFU)
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_Y_SHIFT (0U)
/*! PANIC_SET_THD_Y - Overflow panic set threshold value for Y/RGB output buffer
 *  0b0000..No panic alert will be asserted
 *  0b0001-0b1111..Panic will assert when buffer is n * 6.25% full, where n = 1 to 15
 */
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_Y(x) (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_Y_SHIFT)) & ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_Y_MASK)
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_U_MASK (0xF00U)
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_U_SHIFT (8U)
/*! PANIC_SET_THD_U - Overflow panic set threshold value for U output buffer
 *  0b0000..No panic alert will be asserted
 *  0b0001-0b1111..Panic will assert when buffer is n * 6.25% full, where n = 1 to 15
 */
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_U(x) (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_U_SHIFT)) & ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_U_MASK)
#define ISI_CHNL_OUT_BUF_CTRL_LOAD_BUF1_ADDR_MASK (0x4000U)
#define ISI_CHNL_OUT_BUF_CTRL_LOAD_BUF1_ADDR_SHIFT (14U)
#define ISI_CHNL_OUT_BUF_CTRL_LOAD_BUF2_ADDR_MASK (0x8000U)
#define ISI_CHNL_OUT_BUF_CTRL_LOAD_BUF2_ADDR_SHIFT (15U)
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_V_MASK (0xF0000U)
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_V_SHIFT (16U)
/*! PANIC_SET_THD_V - Overflow panic set threshold value for V output buffer
 *  0b0000..No panic alert will be asserted
 *  0b0001-0b1111..Panic will assert when buffer is n * 6.25% full, where n = 1 to 15
 */
#define ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_V(x) (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_V_SHIFT)) & ISI_CHNL_OUT_BUF_CTRL_PANIC_SET_THD_V_MASK)
#define ISI_CHNL_OUT_BUF_CTRL_MAX_WR_BEATS_UV_MASK (0x40000000U)
#define ISI_CHNL_OUT_BUF_CTRL_MAX_WR_BEATS_UV_SHIFT (30U)
#define ISI_CHNL_OUT_BUF_CTRL_MAX_WR_BEATS_Y_MASK (0x80000000U)
#define ISI_CHNL_OUT_BUF_CTRL_MAX_WR_BEATS_Y_SHIFT (31U)
/*! @} */

/*! @name CHNL_IMG_CFG - Channel Image Configuration */
/*! @{ */
#define ISI_CHNL_IMG_CFG_WIDTH_MASK              (0x1FFFU)
#define ISI_CHNL_IMG_CFG_WIDTH_SHIFT             (0U)
#define ISI_CHNL_IMG_CFG_WIDTH(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CFG_WIDTH_SHIFT)) & ISI_CHNL_IMG_CFG_WIDTH_MASK)
#define ISI_CHNL_IMG_CFG_RSVD0_MASK              (0xE000U)
#define ISI_CHNL_IMG_CFG_RSVD0_SHIFT             (13U)
#define ISI_CHNL_IMG_CFG_RSVD0(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CFG_RSVD0_SHIFT)) & ISI_CHNL_IMG_CFG_RSVD0_MASK)
#define ISI_CHNL_IMG_CFG_HEIGHT_MASK             (0x1FFF0000U)
#define ISI_CHNL_IMG_CFG_HEIGHT_SHIFT            (16U)
#define ISI_CHNL_IMG_CFG_HEIGHT(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CFG_HEIGHT_SHIFT)) & ISI_CHNL_IMG_CFG_HEIGHT_MASK)
#define ISI_CHNL_IMG_CFG_RSVD1_MASK              (0xE0000000U)
#define ISI_CHNL_IMG_CFG_RSVD1_SHIFT             (29U)
#define ISI_CHNL_IMG_CFG_RSVD1(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IMG_CFG_RSVD1_SHIFT)) & ISI_CHNL_IMG_CFG_RSVD1_MASK)
/*! @} */

/*! @name CHNL_IER - Channel Interrupt Enable Register */
/*! @{ */
#define ISI_CHNL_IER_RSVD0_MASK                  (0xFFFFU)
#define ISI_CHNL_IER_RSVD0_SHIFT                 (0U)
#define ISI_CHNL_IER_RSVD0(x)                    (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IER_RSVD0_SHIFT)) & ISI_CHNL_IER_RSVD0_MASK)
#define ISI_CHNL_IER_LATE_VSYNC_ERR_EN_MASK      (0x10000U)
#define ISI_CHNL_IER_LATE_VSYNC_ERR_EN_SHIFT     (16U)
#define ISI_CHNL_IER_EARLY_VSYNC_ERR_EN_MASK     (0x20000U)
#define ISI_CHNL_IER_EARLY_VSYNC_ERR_EN_SHIFT    (17U)
#define ISI_CHNL_IER_OFLW_Y_BUF_EN_MASK          (0x40000U)
#define ISI_CHNL_IER_OFLW_Y_BUF_EN_SHIFT         (18U)
#define ISI_CHNL_IER_PANIC_Y_BUF_EN_MASK         (0x80000U)
#define ISI_CHNL_IER_PANIC_Y_BUF_EN_SHIFT        (19U)
#define ISI_CHNL_IER_OFLW_U_BUF_EN_MASK          (0x100000U)
#define ISI_CHNL_IER_OFLW_U_BUF_EN_SHIFT         (20U)
#define ISI_CHNL_IER_PANIC_U_BUF_EN_MASK         (0x200000U)
#define ISI_CHNL_IER_PANIC_U_BUF_EN_SHIFT        (21U)
#define ISI_CHNL_IER_OFLW_V_BUF_EN_MASK          (0x400000U)
#define ISI_CHNL_IER_OFLW_V_BUF_EN_SHIFT         (22U)
#define ISI_CHNL_IER_PANIC_V_BUF_EN_MASK         (0x800000U)
#define ISI_CHNL_IER_PANIC_V_BUF_EN_SHIFT        (23U)
#define ISI_CHNL_IER_AXI_RD_ERR_EN_MASK          (0x2000000U)
#define ISI_CHNL_IER_AXI_RD_ERR_EN_SHIFT         (25U)
#define ISI_CHNL_IER_AXI_WR_ERR_Y_EN_MASK        (0x4000000U)
#define ISI_CHNL_IER_AXI_WR_ERR_Y_EN_SHIFT       (26U)
#define ISI_CHNL_IER_AXI_WR_ERR_U_EN_MASK        (0x8000000U)
#define ISI_CHNL_IER_AXI_WR_ERR_U_EN_SHIFT       (27U)
#define ISI_CHNL_IER_AXI_WR_ERR_V_EN_MASK        (0x10000000U)
#define ISI_CHNL_IER_AXI_WR_ERR_V_EN_SHIFT       (28U)
#define ISI_CHNL_IER_FRM_RCVD_EN_MASK            (0x20000000U)
#define ISI_CHNL_IER_FRM_RCVD_EN_SHIFT           (29U)
#define ISI_CHNL_IER_LINE_RCVD_EN_MASK           (0x40000000U)
#define ISI_CHNL_IER_LINE_RCVD_EN_SHIFT          (30U)
#define ISI_CHNL_IER_MEM_RD_DONE_EN_MASK         (0x80000000U)
#define ISI_CHNL_IER_MEM_RD_DONE_EN_SHIFT        (31U)
/*! @} */

/*! @name CHNL_STS - Channel Status Register */
/*! @{ */
#define ISI_CHNL_STS_BUF1_ACTIVE_MASK            (0x100U)
#define ISI_CHNL_STS_BUF1_ACTIVE_SHIFT           (8U)
#define ISI_CHNL_STS_BUF2_ACTIVE_MASK            (0x200U)
#define ISI_CHNL_STS_BUF2_ACTIVE_SHIFT           (9U)
#define ISI_CHNL_STS_MEM_RD_OFLOW_MASK           (0x400U)
#define ISI_CHNL_STS_MEM_RD_OFLOW_SHIFT          (10U)
#define ISI_CHNL_STS_RSVD1_MASK                  (0xF800U)
#define ISI_CHNL_STS_RSVD1_SHIFT                 (11U)
#define ISI_CHNL_STS_RSVD1(x)                    (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_STS_RSVD1_SHIFT)) & ISI_CHNL_STS_RSVD1_MASK)
#define ISI_CHNL_STS_LATE_VSYNC_ERR_MASK         (0x10000U)
#define ISI_CHNL_STS_LATE_VSYNC_ERR_SHIFT        (16U)
#define ISI_CHNL_STS_EARLY_VSYNC_ERR_MASK        (0x20000U)
#define ISI_CHNL_STS_EARLY_VSYNC_ERR_SHIFT       (17U)
#define ISI_CHNL_STS_OFLW_Y_BUF_MASK             (0x40000U)
#define ISI_CHNL_STS_OFLW_Y_BUF_SHIFT            (18U)
#define ISI_CHNL_STS_PANIC_Y_BUF_MASK            (0x80000U)
#define ISI_CHNL_STS_PANIC_Y_BUF_SHIFT           (19U)
#define ISI_CHNL_STS_OFLW_U_BUF_MASK             (0x100000U)
#define ISI_CHNL_STS_OFLW_U_BUF_SHIFT            (20U)
#define ISI_CHNL_STS_PANIC_U_BUF_MASK            (0x200000U)
#define ISI_CHNL_STS_PANIC_U_BUF_SHIFT           (21U)
#define ISI_CHNL_STS_OFLW_V_BUF_MASK             (0x400000U)
#define ISI_CHNL_STS_OFLW_V_BUF_SHIFT            (22U)
#define ISI_CHNL_STS_PANIC_V_BUF_MASK            (0x800000U)
#define ISI_CHNL_STS_PANIC_V_BUF_SHIFT           (23U)
#define ISI_CHNL_STS_AXI_RD_ERR_MASK             (0x2000000U)
#define ISI_CHNL_STS_AXI_RD_ERR_SHIFT            (25U)
#define ISI_CHNL_STS_AXI_WR_ERR_Y_MASK           (0x4000000U)
#define ISI_CHNL_STS_AXI_WR_ERR_Y_SHIFT          (26U)
#define ISI_CHNL_STS_AXI_WR_ERR_U_MASK           (0x8000000U)
#define ISI_CHNL_STS_AXI_WR_ERR_U_SHIFT          (27U)
#define ISI_CHNL_STS_AXI_WR_ERR_V_MASK           (0x10000000U)
#define ISI_CHNL_STS_AXI_WR_ERR_V_SHIFT          (28U)
#define ISI_CHNL_STS_FRM_STRD_MASK               (0x20000000U)
#define ISI_CHNL_STS_FRM_STRD_SHIFT              (29U)
#define ISI_CHNL_STS_LINE_STRD_MASK              (0x40000000U)
#define ISI_CHNL_STS_LINE_STRD_SHIFT             (30U)
#define ISI_CHNL_STS_MEM_RD_DONE_MASK            (0x80000000U)
#define ISI_CHNL_STS_MEM_RD_DONE_SHIFT           (31U)
/*! @} */

/*! @name CHNL_SCALE_FACTOR - Channel Scale Factor Register */
/*! @{ */
#define ISI_CHNL_SCALE_FACTOR_X_SCALE_MASK       (0x3FFFU)
#define ISI_CHNL_SCALE_FACTOR_X_SCALE_SHIFT      (0U)
#define ISI_CHNL_SCALE_FACTOR_X_SCALE(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_FACTOR_X_SCALE_SHIFT)) & ISI_CHNL_SCALE_FACTOR_X_SCALE_MASK)
#define ISI_CHNL_SCALE_FACTOR_RSVD1_MASK         (0xC000U)
#define ISI_CHNL_SCALE_FACTOR_RSVD1_SHIFT        (14U)
#define ISI_CHNL_SCALE_FACTOR_RSVD1(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_FACTOR_RSVD1_SHIFT)) & ISI_CHNL_SCALE_FACTOR_RSVD1_MASK)
#define ISI_CHNL_SCALE_FACTOR_Y_SCALE_MASK       (0x3FFF0000U)
#define ISI_CHNL_SCALE_FACTOR_Y_SCALE_SHIFT      (16U)
#define ISI_CHNL_SCALE_FACTOR_Y_SCALE(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_FACTOR_Y_SCALE_SHIFT)) & ISI_CHNL_SCALE_FACTOR_Y_SCALE_MASK)
#define ISI_CHNL_SCALE_FACTOR_RSVD0_MASK         (0xC0000000U)
#define ISI_CHNL_SCALE_FACTOR_RSVD0_SHIFT        (30U)
#define ISI_CHNL_SCALE_FACTOR_RSVD0(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_FACTOR_RSVD0_SHIFT)) & ISI_CHNL_SCALE_FACTOR_RSVD0_MASK)
/*! @} */

/*! @name CHNL_SCALE_OFFSET - Channel Scale Offset Register */
/*! @{ */
#define ISI_CHNL_SCALE_OFFSET_X_OFFSET_MASK      (0xFFFU)
#define ISI_CHNL_SCALE_OFFSET_X_OFFSET_SHIFT     (0U)
#define ISI_CHNL_SCALE_OFFSET_X_OFFSET(x)        (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_OFFSET_X_OFFSET_SHIFT)) & ISI_CHNL_SCALE_OFFSET_X_OFFSET_MASK)
#define ISI_CHNL_SCALE_OFFSET_RSVD1_MASK         (0xF000U)
#define ISI_CHNL_SCALE_OFFSET_RSVD1_SHIFT        (12U)
#define ISI_CHNL_SCALE_OFFSET_RSVD1(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_OFFSET_RSVD1_SHIFT)) & ISI_CHNL_SCALE_OFFSET_RSVD1_MASK)
#define ISI_CHNL_SCALE_OFFSET_Y_OFFSET_MASK      (0xFFF0000U)
#define ISI_CHNL_SCALE_OFFSET_Y_OFFSET_SHIFT     (16U)
#define ISI_CHNL_SCALE_OFFSET_Y_OFFSET(x)        (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_OFFSET_Y_OFFSET_SHIFT)) & ISI_CHNL_SCALE_OFFSET_Y_OFFSET_MASK)
#define ISI_CHNL_SCALE_OFFSET_RSVD0_MASK         (0xF0000000U)
#define ISI_CHNL_SCALE_OFFSET_RSVD0_SHIFT        (28U)
#define ISI_CHNL_SCALE_OFFSET_RSVD0(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCALE_OFFSET_RSVD0_SHIFT)) & ISI_CHNL_SCALE_OFFSET_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CROP_ULC - Channel Crop Upper Left Corner Coordinate Register */
/*! @{ */
#define ISI_CHNL_CROP_ULC_Y_MASK                 (0xFFFU)
#define ISI_CHNL_CROP_ULC_Y_SHIFT                (0U)
#define ISI_CHNL_CROP_ULC_Y(x)                   (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_ULC_Y_SHIFT)) & ISI_CHNL_CROP_ULC_Y_MASK)
#define ISI_CHNL_CROP_ULC_RSVD1_MASK             (0xF000U)
#define ISI_CHNL_CROP_ULC_RSVD1_SHIFT            (12U)
#define ISI_CHNL_CROP_ULC_RSVD1(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_ULC_RSVD1_SHIFT)) & ISI_CHNL_CROP_ULC_RSVD1_MASK)
#define ISI_CHNL_CROP_ULC_X_MASK                 (0xFFF0000U)
#define ISI_CHNL_CROP_ULC_X_SHIFT                (16U)
#define ISI_CHNL_CROP_ULC_X(x)                   (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_ULC_X_SHIFT)) & ISI_CHNL_CROP_ULC_X_MASK)
#define ISI_CHNL_CROP_ULC_RSVD0_MASK             (0xF0000000U)
#define ISI_CHNL_CROP_ULC_RSVD0_SHIFT            (28U)
#define ISI_CHNL_CROP_ULC_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_ULC_RSVD0_SHIFT)) & ISI_CHNL_CROP_ULC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CROP_LRC - Channel Crop Lower Right Corner Coordinate Register */
/*! @{ */
#define ISI_CHNL_CROP_LRC_Y_MASK                 (0xFFFU)
#define ISI_CHNL_CROP_LRC_Y_SHIFT                (0U)
#define ISI_CHNL_CROP_LRC_Y(x)                   (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_LRC_Y_SHIFT)) & ISI_CHNL_CROP_LRC_Y_MASK)
#define ISI_CHNL_CROP_LRC_RSVD1_MASK             (0xF000U)
#define ISI_CHNL_CROP_LRC_RSVD1_SHIFT            (12U)
#define ISI_CHNL_CROP_LRC_RSVD1(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_LRC_RSVD1_SHIFT)) & ISI_CHNL_CROP_LRC_RSVD1_MASK)
#define ISI_CHNL_CROP_LRC_X_MASK                 (0xFFF0000U)
#define ISI_CHNL_CROP_LRC_X_SHIFT                (16U)
#define ISI_CHNL_CROP_LRC_X(x)                   (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_LRC_X_SHIFT)) & ISI_CHNL_CROP_LRC_X_MASK)
#define ISI_CHNL_CROP_LRC_RSVD0_MASK             (0xF0000000U)
#define ISI_CHNL_CROP_LRC_RSVD0_SHIFT            (28U)
#define ISI_CHNL_CROP_LRC_RSVD0(x)               (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CROP_LRC_RSVD0_SHIFT)) & ISI_CHNL_CROP_LRC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF0 - Channel Color Space Conversion Coefficient Register 0 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF0_A1_MASK              (0x7FFU)
#define ISI_CHNL_CSC_COEFF0_A1_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF0_A1(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF0_A1_SHIFT)) & ISI_CHNL_CSC_COEFF0_A1_MASK)
#define ISI_CHNL_CSC_COEFF0_RSVD1_MASK           (0xF800U)
#define ISI_CHNL_CSC_COEFF0_RSVD1_SHIFT          (11U)
#define ISI_CHNL_CSC_COEFF0_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF0_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF0_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF0_A2_MASK              (0x7FF0000U)
#define ISI_CHNL_CSC_COEFF0_A2_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF0_A2(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF0_A2_SHIFT)) & ISI_CHNL_CSC_COEFF0_A2_MASK)
#define ISI_CHNL_CSC_COEFF0_RSVD0_MASK           (0xF8000000U)
#define ISI_CHNL_CSC_COEFF0_RSVD0_SHIFT          (27U)
#define ISI_CHNL_CSC_COEFF0_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF0_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF0_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF1 - Channel Color Space Conversion Coefficient Register 1 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF1_A3_MASK              (0x7FFU)
#define ISI_CHNL_CSC_COEFF1_A3_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF1_A3(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF1_A3_SHIFT)) & ISI_CHNL_CSC_COEFF1_A3_MASK)
#define ISI_CHNL_CSC_COEFF1_RSVD1_MASK           (0xF800U)
#define ISI_CHNL_CSC_COEFF1_RSVD1_SHIFT          (11U)
#define ISI_CHNL_CSC_COEFF1_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF1_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF1_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF1_B1_MASK              (0x7FF0000U)
#define ISI_CHNL_CSC_COEFF1_B1_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF1_B1(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF1_B1_SHIFT)) & ISI_CHNL_CSC_COEFF1_B1_MASK)
#define ISI_CHNL_CSC_COEFF1_RSVD0_MASK           (0xF8000000U)
#define ISI_CHNL_CSC_COEFF1_RSVD0_SHIFT          (27U)
#define ISI_CHNL_CSC_COEFF1_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF1_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF1_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF2 - Channel Color Space Conversion Coefficient Register 2 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF2_B2_MASK              (0x7FFU)
#define ISI_CHNL_CSC_COEFF2_B2_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF2_B2(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF2_B2_SHIFT)) & ISI_CHNL_CSC_COEFF2_B2_MASK)
#define ISI_CHNL_CSC_COEFF2_RSVD1_MASK           (0xF800U)
#define ISI_CHNL_CSC_COEFF2_RSVD1_SHIFT          (11U)
#define ISI_CHNL_CSC_COEFF2_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF2_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF2_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF2_B3_MASK              (0x7FF0000U)
#define ISI_CHNL_CSC_COEFF2_B3_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF2_B3(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF2_B3_SHIFT)) & ISI_CHNL_CSC_COEFF2_B3_MASK)
#define ISI_CHNL_CSC_COEFF2_RSVD0_MASK           (0xF8000000U)
#define ISI_CHNL_CSC_COEFF2_RSVD0_SHIFT          (27U)
#define ISI_CHNL_CSC_COEFF2_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF2_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF2_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF3 - Channel Color Space Conversion Coefficient Register 3 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF3_C1_MASK              (0x7FFU)
#define ISI_CHNL_CSC_COEFF3_C1_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF3_C1(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF3_C1_SHIFT)) & ISI_CHNL_CSC_COEFF3_C1_MASK)
#define ISI_CHNL_CSC_COEFF3_RSVD1_MASK           (0xF800U)
#define ISI_CHNL_CSC_COEFF3_RSVD1_SHIFT          (11U)
#define ISI_CHNL_CSC_COEFF3_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF3_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF3_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF3_C2_MASK              (0x7FF0000U)
#define ISI_CHNL_CSC_COEFF3_C2_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF3_C2(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF3_C2_SHIFT)) & ISI_CHNL_CSC_COEFF3_C2_MASK)
#define ISI_CHNL_CSC_COEFF3_RSVD0_MASK           (0xF8000000U)
#define ISI_CHNL_CSC_COEFF3_RSVD0_SHIFT          (27U)
#define ISI_CHNL_CSC_COEFF3_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF3_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF3_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF4 - Channel Color Space Conversion Coefficient Register 4 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF4_C3_MASK              (0x7FFU)
#define ISI_CHNL_CSC_COEFF4_C3_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF4_C3(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF4_C3_SHIFT)) & ISI_CHNL_CSC_COEFF4_C3_MASK)
#define ISI_CHNL_CSC_COEFF4_RSVD1_MASK           (0xF800U)
#define ISI_CHNL_CSC_COEFF4_RSVD1_SHIFT          (11U)
#define ISI_CHNL_CSC_COEFF4_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF4_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF4_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF4_D1_MASK              (0x1FF0000U)
#define ISI_CHNL_CSC_COEFF4_D1_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF4_D1(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF4_D1_SHIFT)) & ISI_CHNL_CSC_COEFF4_D1_MASK)
#define ISI_CHNL_CSC_COEFF4_RSVD0_MASK           (0xFE000000U)
#define ISI_CHNL_CSC_COEFF4_RSVD0_SHIFT          (25U)
#define ISI_CHNL_CSC_COEFF4_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF4_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF4_RSVD0_MASK)
/*! @} */

/*! @name CHNL_CSC_COEFF5 - Channel Color Space Conversion Coefficient Register 5 */
/*! @{ */
#define ISI_CHNL_CSC_COEFF5_D2_MASK              (0x1FFU)
#define ISI_CHNL_CSC_COEFF5_D2_SHIFT             (0U)
#define ISI_CHNL_CSC_COEFF5_D2(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF5_D2_SHIFT)) & ISI_CHNL_CSC_COEFF5_D2_MASK)
#define ISI_CHNL_CSC_COEFF5_RSVD1_MASK           (0xFE00U)
#define ISI_CHNL_CSC_COEFF5_RSVD1_SHIFT          (9U)
#define ISI_CHNL_CSC_COEFF5_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF5_RSVD1_SHIFT)) & ISI_CHNL_CSC_COEFF5_RSVD1_MASK)
#define ISI_CHNL_CSC_COEFF5_D3_MASK              (0x1FF0000U)
#define ISI_CHNL_CSC_COEFF5_D3_SHIFT             (16U)
#define ISI_CHNL_CSC_COEFF5_D3(x)                (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF5_D3_SHIFT)) & ISI_CHNL_CSC_COEFF5_D3_MASK)
#define ISI_CHNL_CSC_COEFF5_RSVD0_MASK           (0xFE000000U)
#define ISI_CHNL_CSC_COEFF5_RSVD0_SHIFT          (25U)
#define ISI_CHNL_CSC_COEFF5_RSVD0(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_CSC_COEFF5_RSVD0_SHIFT)) & ISI_CHNL_CSC_COEFF5_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_0_ALPHA - Channel Alpha Value Register for Region of Interest 0 */
/*! @{ */
#define ISI_CHNL_ROI_0_ALPHA_RSVD1_MASK          (0xFFFFU)
#define ISI_CHNL_ROI_0_ALPHA_RSVD1_SHIFT         (0U)
#define ISI_CHNL_ROI_0_ALPHA_RSVD1(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ALPHA_RSVD1_SHIFT)) & ISI_CHNL_ROI_0_ALPHA_RSVD1_MASK)
#define ISI_CHNL_ROI_0_ALPHA_ALPHA_EN_MASK       (0x10000U)
#define ISI_CHNL_ROI_0_ALPHA_ALPHA_EN_SHIFT      (16U)
#define ISI_CHNL_ROI_0_ALPHA_RSVD0_MASK          (0xFE0000U)
#define ISI_CHNL_ROI_0_ALPHA_RSVD0_SHIFT         (17U)
#define ISI_CHNL_ROI_0_ALPHA_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ALPHA_RSVD0_SHIFT)) & ISI_CHNL_ROI_0_ALPHA_RSVD0_MASK)
#define ISI_CHNL_ROI_0_ALPHA_ALPHA_MASK          (0xFF000000U)
#define ISI_CHNL_ROI_0_ALPHA_ALPHA_SHIFT         (24U)
#define ISI_CHNL_ROI_0_ALPHA_ALPHA(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ALPHA_ALPHA_SHIFT)) & ISI_CHNL_ROI_0_ALPHA_ALPHA_MASK)
/*! @} */

/*! @name CHNL_ROI_0_ULC - Channel Upper Left Coordinate Register for Region of Interest 0 */
/*! @{ */
#define ISI_CHNL_ROI_0_ULC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_0_ULC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_0_ULC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ULC_Y_SHIFT)) & ISI_CHNL_ROI_0_ULC_Y_MASK)
#define ISI_CHNL_ROI_0_ULC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_0_ULC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_0_ULC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ULC_RSVD1_SHIFT)) & ISI_CHNL_ROI_0_ULC_RSVD1_MASK)
#define ISI_CHNL_ROI_0_ULC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_0_ULC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_0_ULC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ULC_X_SHIFT)) & ISI_CHNL_ROI_0_ULC_X_MASK)
#define ISI_CHNL_ROI_0_ULC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_0_ULC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_0_ULC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_ULC_RSVD0_SHIFT)) & ISI_CHNL_ROI_0_ULC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_0_LRC - Channel Lower Right Coordinate Register for Region of Interest 0 */
/*! @{ */
#define ISI_CHNL_ROI_0_LRC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_0_LRC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_0_LRC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_LRC_Y_SHIFT)) & ISI_CHNL_ROI_0_LRC_Y_MASK)
#define ISI_CHNL_ROI_0_LRC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_0_LRC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_0_LRC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_LRC_RSVD1_SHIFT)) & ISI_CHNL_ROI_0_LRC_RSVD1_MASK)
#define ISI_CHNL_ROI_0_LRC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_0_LRC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_0_LRC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_LRC_X_SHIFT)) & ISI_CHNL_ROI_0_LRC_X_MASK)
#define ISI_CHNL_ROI_0_LRC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_0_LRC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_0_LRC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_0_LRC_RSVD0_SHIFT)) & ISI_CHNL_ROI_0_LRC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_1_ALPHA - Channel Alpha Value Register for Region of Interest 1 */
/*! @{ */
#define ISI_CHNL_ROI_1_ALPHA_RSVD1_MASK          (0xFFFFU)
#define ISI_CHNL_ROI_1_ALPHA_RSVD1_SHIFT         (0U)
#define ISI_CHNL_ROI_1_ALPHA_RSVD1(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ALPHA_RSVD1_SHIFT)) & ISI_CHNL_ROI_1_ALPHA_RSVD1_MASK)
#define ISI_CHNL_ROI_1_ALPHA_ALPHA_EN_MASK       (0x10000U)
#define ISI_CHNL_ROI_1_ALPHA_ALPHA_EN_SHIFT      (16U)
#define ISI_CHNL_ROI_1_ALPHA_RSVD0_MASK          (0xFE0000U)
#define ISI_CHNL_ROI_1_ALPHA_RSVD0_SHIFT         (17U)
#define ISI_CHNL_ROI_1_ALPHA_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ALPHA_RSVD0_SHIFT)) & ISI_CHNL_ROI_1_ALPHA_RSVD0_MASK)
#define ISI_CHNL_ROI_1_ALPHA_ALPHA_MASK          (0xFF000000U)
#define ISI_CHNL_ROI_1_ALPHA_ALPHA_SHIFT         (24U)
#define ISI_CHNL_ROI_1_ALPHA_ALPHA(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ALPHA_ALPHA_SHIFT)) & ISI_CHNL_ROI_1_ALPHA_ALPHA_MASK)
/*! @} */

/*! @name CHNL_ROI_1_ULC - Channel Upper Left Coordinate Register for Region of Interest 1 */
/*! @{ */
#define ISI_CHNL_ROI_1_ULC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_1_ULC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_1_ULC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ULC_Y_SHIFT)) & ISI_CHNL_ROI_1_ULC_Y_MASK)
#define ISI_CHNL_ROI_1_ULC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_1_ULC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_1_ULC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ULC_RSVD1_SHIFT)) & ISI_CHNL_ROI_1_ULC_RSVD1_MASK)
#define ISI_CHNL_ROI_1_ULC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_1_ULC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_1_ULC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ULC_X_SHIFT)) & ISI_CHNL_ROI_1_ULC_X_MASK)
#define ISI_CHNL_ROI_1_ULC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_1_ULC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_1_ULC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_ULC_RSVD0_SHIFT)) & ISI_CHNL_ROI_1_ULC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_1_LRC - Channel Lower Right Coordinate Register for Region of Interest 1 */
/*! @{ */
#define ISI_CHNL_ROI_1_LRC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_1_LRC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_1_LRC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_LRC_Y_SHIFT)) & ISI_CHNL_ROI_1_LRC_Y_MASK)
#define ISI_CHNL_ROI_1_LRC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_1_LRC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_1_LRC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_LRC_RSVD1_SHIFT)) & ISI_CHNL_ROI_1_LRC_RSVD1_MASK)
#define ISI_CHNL_ROI_1_LRC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_1_LRC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_1_LRC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_LRC_X_SHIFT)) & ISI_CHNL_ROI_1_LRC_X_MASK)
#define ISI_CHNL_ROI_1_LRC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_1_LRC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_1_LRC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_1_LRC_RSVD0_SHIFT)) & ISI_CHNL_ROI_1_LRC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_2_ALPHA - Channel Alpha Value Register for Region of Interest 2 */
/*! @{ */
#define ISI_CHNL_ROI_2_ALPHA_RSVD1_MASK          (0xFFFFU)
#define ISI_CHNL_ROI_2_ALPHA_RSVD1_SHIFT         (0U)
#define ISI_CHNL_ROI_2_ALPHA_RSVD1(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ALPHA_RSVD1_SHIFT)) & ISI_CHNL_ROI_2_ALPHA_RSVD1_MASK)
#define ISI_CHNL_ROI_2_ALPHA_ALPHA_EN_MASK       (0x10000U)
#define ISI_CHNL_ROI_2_ALPHA_ALPHA_EN_SHIFT      (16U)
#define ISI_CHNL_ROI_2_ALPHA_RSVD0_MASK          (0xFE0000U)
#define ISI_CHNL_ROI_2_ALPHA_RSVD0_SHIFT         (17U)
#define ISI_CHNL_ROI_2_ALPHA_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ALPHA_RSVD0_SHIFT)) & ISI_CHNL_ROI_2_ALPHA_RSVD0_MASK)
#define ISI_CHNL_ROI_2_ALPHA_ALPHA_MASK          (0xFF000000U)
#define ISI_CHNL_ROI_2_ALPHA_ALPHA_SHIFT         (24U)
#define ISI_CHNL_ROI_2_ALPHA_ALPHA(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ALPHA_ALPHA_SHIFT)) & ISI_CHNL_ROI_2_ALPHA_ALPHA_MASK)
/*! @} */

/*! @name CHNL_ROI_2_ULC - Channel Upper Left Coordinate Register for Region of Interest 2 */
/*! @{ */
#define ISI_CHNL_ROI_2_ULC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_2_ULC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_2_ULC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ULC_Y_SHIFT)) & ISI_CHNL_ROI_2_ULC_Y_MASK)
#define ISI_CHNL_ROI_2_ULC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_2_ULC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_2_ULC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ULC_RSVD1_SHIFT)) & ISI_CHNL_ROI_2_ULC_RSVD1_MASK)
#define ISI_CHNL_ROI_2_ULC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_2_ULC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_2_ULC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ULC_X_SHIFT)) & ISI_CHNL_ROI_2_ULC_X_MASK)
#define ISI_CHNL_ROI_2_ULC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_2_ULC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_2_ULC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_ULC_RSVD0_SHIFT)) & ISI_CHNL_ROI_2_ULC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_2_LRC - Channel Lower Right Coordinate Register for Region of Interest 2 */
/*! @{ */
#define ISI_CHNL_ROI_2_LRC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_2_LRC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_2_LRC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_LRC_Y_SHIFT)) & ISI_CHNL_ROI_2_LRC_Y_MASK)
#define ISI_CHNL_ROI_2_LRC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_2_LRC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_2_LRC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_LRC_RSVD1_SHIFT)) & ISI_CHNL_ROI_2_LRC_RSVD1_MASK)
#define ISI_CHNL_ROI_2_LRC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_2_LRC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_2_LRC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_LRC_X_SHIFT)) & ISI_CHNL_ROI_2_LRC_X_MASK)
#define ISI_CHNL_ROI_2_LRC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_2_LRC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_2_LRC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_2_LRC_RSVD0_SHIFT)) & ISI_CHNL_ROI_2_LRC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_3_ALPHA - Channel Alpha Value Register for Region of Interest 3 */
/*! @{ */
#define ISI_CHNL_ROI_3_ALPHA_RSVD1_MASK          (0xFFFFU)
#define ISI_CHNL_ROI_3_ALPHA_RSVD1_SHIFT         (0U)
#define ISI_CHNL_ROI_3_ALPHA_RSVD1(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ALPHA_RSVD1_SHIFT)) & ISI_CHNL_ROI_3_ALPHA_RSVD1_MASK)
#define ISI_CHNL_ROI_3_ALPHA_ALPHA_EN_MASK       (0x10000U)
#define ISI_CHNL_ROI_3_ALPHA_ALPHA_EN_SHIFT      (16U)
#define ISI_CHNL_ROI_3_ALPHA_RSVD0_MASK          (0xFE0000U)
#define ISI_CHNL_ROI_3_ALPHA_RSVD0_SHIFT         (17U)
#define ISI_CHNL_ROI_3_ALPHA_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ALPHA_RSVD0_SHIFT)) & ISI_CHNL_ROI_3_ALPHA_RSVD0_MASK)
#define ISI_CHNL_ROI_3_ALPHA_ALPHA_MASK          (0xFF000000U)
#define ISI_CHNL_ROI_3_ALPHA_ALPHA_SHIFT         (24U)
#define ISI_CHNL_ROI_3_ALPHA_ALPHA(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ALPHA_ALPHA_SHIFT)) & ISI_CHNL_ROI_3_ALPHA_ALPHA_MASK)
/*! @} */

/*! @name CHNL_ROI_3_ULC - Channel Upper Left Coordinate Register for Region of Interest 3 */
/*! @{ */
#define ISI_CHNL_ROI_3_ULC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_3_ULC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_3_ULC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ULC_Y_SHIFT)) & ISI_CHNL_ROI_3_ULC_Y_MASK)
#define ISI_CHNL_ROI_3_ULC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_3_ULC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_3_ULC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ULC_RSVD1_SHIFT)) & ISI_CHNL_ROI_3_ULC_RSVD1_MASK)
#define ISI_CHNL_ROI_3_ULC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_3_ULC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_3_ULC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ULC_X_SHIFT)) & ISI_CHNL_ROI_3_ULC_X_MASK)
#define ISI_CHNL_ROI_3_ULC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_3_ULC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_3_ULC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_ULC_RSVD0_SHIFT)) & ISI_CHNL_ROI_3_ULC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_ROI_3_LRC - Channel Lower Right Coordinate Register for Region of Interest 3 */
/*! @{ */
#define ISI_CHNL_ROI_3_LRC_Y_MASK                (0xFFFU)
#define ISI_CHNL_ROI_3_LRC_Y_SHIFT               (0U)
#define ISI_CHNL_ROI_3_LRC_Y(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_LRC_Y_SHIFT)) & ISI_CHNL_ROI_3_LRC_Y_MASK)
#define ISI_CHNL_ROI_3_LRC_RSVD1_MASK            (0xF000U)
#define ISI_CHNL_ROI_3_LRC_RSVD1_SHIFT           (12U)
#define ISI_CHNL_ROI_3_LRC_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_LRC_RSVD1_SHIFT)) & ISI_CHNL_ROI_3_LRC_RSVD1_MASK)
#define ISI_CHNL_ROI_3_LRC_X_MASK                (0xFFF0000U)
#define ISI_CHNL_ROI_3_LRC_X_SHIFT               (16U)
#define ISI_CHNL_ROI_3_LRC_X(x)                  (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_LRC_X_SHIFT)) & ISI_CHNL_ROI_3_LRC_X_MASK)
#define ISI_CHNL_ROI_3_LRC_RSVD0_MASK            (0xF0000000U)
#define ISI_CHNL_ROI_3_LRC_RSVD0_SHIFT           (28U)
#define ISI_CHNL_ROI_3_LRC_RSVD0(x)              (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_ROI_3_LRC_RSVD0_SHIFT)) & ISI_CHNL_ROI_3_LRC_RSVD0_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF1_ADDR_Y - Channel RGB or Luma (Y) Output Buffer 1 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF1_ADDR_Y_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF1_ADDR_Y_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF1_ADDR_Y_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF1_ADDR_Y_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF1_ADDR_Y_ADDR_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF1_ADDR_U - Channel Chroma (U/Cb/UV/CbCr) Output Buffer 1 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF1_ADDR_U_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF1_ADDR_U_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF1_ADDR_U_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF1_ADDR_U_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF1_ADDR_U_ADDR_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF1_ADDR_V - Channel Chroma (V/Cr) Output Buffer 1 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF1_ADDR_V_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF1_ADDR_V_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF1_ADDR_V_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF1_ADDR_V_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF1_ADDR_V_ADDR_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF_PITCH - Channel Output Buffer Pitch */
/*! @{ */
#define ISI_CHNL_OUT_BUF_PITCH_LINE_PITCH_MASK   (0xFFFFU)
#define ISI_CHNL_OUT_BUF_PITCH_LINE_PITCH_SHIFT  (0U)
#define ISI_CHNL_OUT_BUF_PITCH_LINE_PITCH(x)     (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF_PITCH_LINE_PITCH_SHIFT)) & ISI_CHNL_OUT_BUF_PITCH_LINE_PITCH_MASK)
/*! @} */

/*! @name CHNL_IN_BUF_ADDR - Channel Input Buffer Address */
/*! @{ */
#define ISI_CHNL_IN_BUF_ADDR_ADDR_MASK           (0xFFFFFFFFU)
#define ISI_CHNL_IN_BUF_ADDR_ADDR_SHIFT          (0U)
#define ISI_CHNL_IN_BUF_ADDR_ADDR(x)             (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IN_BUF_ADDR_ADDR_SHIFT)) & ISI_CHNL_IN_BUF_ADDR_ADDR_MASK)
/*! @} */

/*! @name CHNL_IN_BUF_PITCH - Channel Input Buffer Pitch */
/*! @{ */
#define ISI_CHNL_IN_BUF_PITCH_LINE_PITCH_MASK    (0xFFFFU)
#define ISI_CHNL_IN_BUF_PITCH_LINE_PITCH_SHIFT   (0U)
#define ISI_CHNL_IN_BUF_PITCH_LINE_PITCH(x)      (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IN_BUF_PITCH_LINE_PITCH_SHIFT)) & ISI_CHNL_IN_BUF_PITCH_LINE_PITCH_MASK)
#define ISI_CHNL_IN_BUF_PITCH_FRM_PITCH_MASK     (0xFFFF0000U)
#define ISI_CHNL_IN_BUF_PITCH_FRM_PITCH_SHIFT    (16U)
#define ISI_CHNL_IN_BUF_PITCH_FRM_PITCH(x)       (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_IN_BUF_PITCH_FRM_PITCH_SHIFT)) & ISI_CHNL_IN_BUF_PITCH_FRM_PITCH_MASK)
/*! @} */

/*! @name CHNL_MEM_RD_CTRL - Channel Memory Read Control */
/*! @{ */
#define ISI_CHNL_MEM_RD_CTRL_READ_MEM_MASK       (0x1U)
#define ISI_CHNL_MEM_RD_CTRL_READ_MEM_SHIFT      (0U)
#define ISI_CHNL_MEM_RD_CTRL_RSVD0_MASK          (0xFFFFFFEU)
#define ISI_CHNL_MEM_RD_CTRL_RSVD0_SHIFT         (1U)
#define ISI_CHNL_MEM_RD_CTRL_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_MEM_RD_CTRL_RSVD0_SHIFT)) & ISI_CHNL_MEM_RD_CTRL_RSVD0_MASK)
#define ISI_CHNL_MEM_RD_CTRL_IMG_TYPE_MASK       (0xF0000000U)
#define ISI_CHNL_MEM_RD_CTRL_IMG_TYPE_SHIFT      (28U)
/*! IMG_TYPE - Input image format
 *  0b0000..BGR8P - BGR format with 8-bits per color component (packed into 32-bit DWORD)
 *  0b0001..RGB8P - RGB format with 8-bits per color component (packed into 32-bit DWORD)
 *  0b0010..XRGB8 - RGB format with 8-bits per color component (unpacked and LSB aligned in 32-bit DWORD)
 *  0b0011..RGBX8 - RGB format with 8-bits per color component (unpacked and MSBalinged in 32-bit DWORD)
 *  0b0100..XBGR8 - BGR format with 8-bits per color component (unpacked and LSB aligned in 32-bit DWORD)
 *  0b0101..RGB565 - RGB format with 5-bits of R, B; 6-bits of G (packed into 32-bit DWORD)
 *  0b0110..A2BGR10 - BGR format with 2-bits alpha in MSB; 10-bits per color component
 *  0b0111..A2RGB10 - RGB format with 2-bits alpha in MSB; 10-bits per color component
 *  0b1000..YUV444_1P8P with 8-bits per color component; 1-plane, YUV interleaved packed bytes
 *  0b1001..YUV444_1P10 with 10-bits per color component; 1-plane, YUV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b1010..YUV444_1P10P with 10-bits per color component; 1-plane, YUV interleaved packed bytes (2 MSBs waste bits in 32-bit WORD)
 *  0b1011..YUV444_1P12 with 12-bits per color component; 1-plane, YUV interleaved unpacked bytes (4 LSBs waste bits in 16-bit WORD)
 *  0b1100..YUV444_1P8 with 8-bits per color component; 1-plane YUV interleaved unpacked bytes (8 MSBs waste bits in 32-bit DWORD)
 *  0b1101..YUV422_1P8P with 8-bits per color component; 1-plane YUV interleaved packed bytes
 *  0b1110..YUV422_1P10 with 10-bits per color component; 1-plane, YUV interleaved unpacked bytes (6 LSBs waste bits in 16-bit WORD)
 *  0b1111..YUV422_1P12 with 12-bits per color component; 1-plane, YUV interleaved packed bytes (4 MSBs waste bits in 16-bit WORD)
 */
#define ISI_CHNL_MEM_RD_CTRL_IMG_TYPE(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_MEM_RD_CTRL_IMG_TYPE_SHIFT)) & ISI_CHNL_MEM_RD_CTRL_IMG_TYPE_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF2_ADDR_Y - Channel RGB or Luma (Y) Output Buffer 2 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF2_ADDR_Y_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF2_ADDR_Y_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF2_ADDR_Y_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF2_ADDR_Y_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF2_ADDR_Y_ADDR_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF2_ADDR_U - Channel Chroma (U/Cb/UV/CbCr) Output Buffer 2 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF2_ADDR_U_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF2_ADDR_U_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF2_ADDR_U_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF2_ADDR_U_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF2_ADDR_U_ADDR_MASK)
/*! @} */

/*! @name CHNL_OUT_BUF2_ADDR_V - Channel Chroma (V/Cr) Output Buffer 2 Address */
/*! @{ */
#define ISI_CHNL_OUT_BUF2_ADDR_V_ADDR_MASK       (0xFFFFFFFFU)
#define ISI_CHNL_OUT_BUF2_ADDR_V_ADDR_SHIFT      (0U)
#define ISI_CHNL_OUT_BUF2_ADDR_V_ADDR(x)         (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_OUT_BUF2_ADDR_V_ADDR_SHIFT)) & ISI_CHNL_OUT_BUF2_ADDR_V_ADDR_MASK)
/*! @} */

/*! @name CHNL_SCL_IMG_CFG - Channel Scaled Image Configuration */
/*! @{ */
#define ISI_CHNL_SCL_IMG_CFG_WIDTH_MASK          (0x1FFFU)
#define ISI_CHNL_SCL_IMG_CFG_WIDTH_SHIFT         (0U)
#define ISI_CHNL_SCL_IMG_CFG_WIDTH(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCL_IMG_CFG_WIDTH_SHIFT)) & ISI_CHNL_SCL_IMG_CFG_WIDTH_MASK)
#define ISI_CHNL_SCL_IMG_CFG_RSVD0_MASK          (0xE000U)
#define ISI_CHNL_SCL_IMG_CFG_RSVD0_SHIFT         (13U)
#define ISI_CHNL_SCL_IMG_CFG_RSVD0(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCL_IMG_CFG_RSVD0_SHIFT)) & ISI_CHNL_SCL_IMG_CFG_RSVD0_MASK)
#define ISI_CHNL_SCL_IMG_CFG_HEIGHT_MASK         (0x1FFF0000U)
#define ISI_CHNL_SCL_IMG_CFG_HEIGHT_SHIFT        (16U)
#define ISI_CHNL_SCL_IMG_CFG_HEIGHT(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCL_IMG_CFG_HEIGHT_SHIFT)) & ISI_CHNL_SCL_IMG_CFG_HEIGHT_MASK)
#define ISI_CHNL_SCL_IMG_CFG_RSVD1_MASK          (0xE0000000U)
#define ISI_CHNL_SCL_IMG_CFG_RSVD1_SHIFT         (29U)
#define ISI_CHNL_SCL_IMG_CFG_RSVD1(x)            (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_SCL_IMG_CFG_RSVD1_SHIFT)) & ISI_CHNL_SCL_IMG_CFG_RSVD1_MASK)
/*! @} */

/*! @name CHNL_FLOW_CTRL - Channel Flow Control Register */
/*! @{ */
#define ISI_CHNL_FLOW_CTRL_FC_DENOM_MASK         (0xFFU)
#define ISI_CHNL_FLOW_CTRL_FC_DENOM_SHIFT        (0U)
/*! FC_DENOM - Denominator value of fraction of usable bandwidth
 *  0b00000000..Invalid value. Flow control will be disabled.
 */
#define ISI_CHNL_FLOW_CTRL_FC_DENOM(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_FLOW_CTRL_FC_DENOM_SHIFT)) & ISI_CHNL_FLOW_CTRL_FC_DENOM_MASK)
#define ISI_CHNL_FLOW_CTRL_FC_NUMER_MASK         (0xFF0000U)
#define ISI_CHNL_FLOW_CTRL_FC_NUMER_SHIFT        (16U)
/*! FC_NUMER - Numertor value of fraction of usable bandwidth
 *  0b00000000..Flow control is disabled.
 */
#define ISI_CHNL_FLOW_CTRL_FC_NUMER(x)           (((uint32_t)(((uint32_t)(x)) << ISI_CHNL_FLOW_CTRL_FC_NUMER_SHIFT)) & ISI_CHNL_FLOW_CTRL_FC_NUMER_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group ISI_Register_Masks */


/* ISI - Peripheral instance base addresses */
/** Peripheral ISI base pointer */
#define ISI_BASE_PTR                             ((ISI_MemMapPtr)0x32E20000u)
/** Array initializer of ISI peripheral base pointers */
#define ISI_BASE_PTRS                            { ISI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- ISI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup ISI_Register_Accessor_Macros ISI - Register accessor macros
 * @{
 */


/* ISI - Register instance definitions */
/* ISI */
#define ISI_CHNL_CTRL                            ISI_CHNL_CTRL_REG(ISI_BASE_PTR)
#define ISI_CHNL_IMG_CTRL                        ISI_CHNL_IMG_CTRL_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF_CTRL                    ISI_CHNL_OUT_BUF_CTRL_REG(ISI_BASE_PTR)
#define ISI_CHNL_IMG_CFG                         ISI_CHNL_IMG_CFG_REG(ISI_BASE_PTR)
#define ISI_CHNL_IER                             ISI_CHNL_IER_REG(ISI_BASE_PTR)
#define ISI_CHNL_STS                             ISI_CHNL_STS_REG(ISI_BASE_PTR)
#define ISI_CHNL_SCALE_FACTOR                    ISI_CHNL_SCALE_FACTOR_REG(ISI_BASE_PTR)
#define ISI_CHNL_SCALE_OFFSET                    ISI_CHNL_SCALE_OFFSET_REG(ISI_BASE_PTR)
#define ISI_CHNL_CROP_ULC                        ISI_CHNL_CROP_ULC_REG(ISI_BASE_PTR)
#define ISI_CHNL_CROP_LRC                        ISI_CHNL_CROP_LRC_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF0                      ISI_CHNL_CSC_COEFF0_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF1                      ISI_CHNL_CSC_COEFF1_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF2                      ISI_CHNL_CSC_COEFF2_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF3                      ISI_CHNL_CSC_COEFF3_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF4                      ISI_CHNL_CSC_COEFF4_REG(ISI_BASE_PTR)
#define ISI_CHNL_CSC_COEFF5                      ISI_CHNL_CSC_COEFF5_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_0_ALPHA                     ISI_CHNL_ROI_0_ALPHA_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_0_ULC                       ISI_CHNL_ROI_0_ULC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_0_LRC                       ISI_CHNL_ROI_0_LRC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_1_ALPHA                     ISI_CHNL_ROI_1_ALPHA_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_1_ULC                       ISI_CHNL_ROI_1_ULC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_1_LRC                       ISI_CHNL_ROI_1_LRC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_2_ALPHA                     ISI_CHNL_ROI_2_ALPHA_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_2_ULC                       ISI_CHNL_ROI_2_ULC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_2_LRC                       ISI_CHNL_ROI_2_LRC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_3_ALPHA                     ISI_CHNL_ROI_3_ALPHA_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_3_ULC                       ISI_CHNL_ROI_3_ULC_REG(ISI_BASE_PTR)
#define ISI_CHNL_ROI_3_LRC                       ISI_CHNL_ROI_3_LRC_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF1_ADDR_Y                 ISI_CHNL_OUT_BUF1_ADDR_Y_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF1_ADDR_U                 ISI_CHNL_OUT_BUF1_ADDR_U_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF1_ADDR_V                 ISI_CHNL_OUT_BUF1_ADDR_V_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF_PITCH                   ISI_CHNL_OUT_BUF_PITCH_REG(ISI_BASE_PTR)
#define ISI_CHNL_IN_BUF_ADDR                     ISI_CHNL_IN_BUF_ADDR_REG(ISI_BASE_PTR)
#define ISI_CHNL_IN_BUF_PITCH                    ISI_CHNL_IN_BUF_PITCH_REG(ISI_BASE_PTR)
#define ISI_CHNL_MEM_RD_CTRL                     ISI_CHNL_MEM_RD_CTRL_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF2_ADDR_Y                 ISI_CHNL_OUT_BUF2_ADDR_Y_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF2_ADDR_U                 ISI_CHNL_OUT_BUF2_ADDR_U_REG(ISI_BASE_PTR)
#define ISI_CHNL_OUT_BUF2_ADDR_V                 ISI_CHNL_OUT_BUF2_ADDR_V_REG(ISI_BASE_PTR)
#define ISI_CHNL_SCL_IMG_CFG                     ISI_CHNL_SCL_IMG_CFG_REG(ISI_BASE_PTR)
#define ISI_CHNL_FLOW_CTRL                       ISI_CHNL_FLOW_CTRL_REG(ISI_BASE_PTR)

/*!
 * @}
 */ /* end of group ISI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group ISI_Peripheral */


/* ----------------------------------------------------------------------------
   -- LCDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Peripheral LCDIF
 * @{
 */

/** LCDIF - Peripheral register structure */
typedef struct LCDIF_MemMap {
  uint32_t CTRL;                                   /**< LCDIF General Control Register, offset: 0x0 */
  uint32_t CTRL_SET;                               /**< LCDIF General Control Register, offset: 0x4 */
  uint32_t CTRL_CLR;                               /**< LCDIF General Control Register, offset: 0x8 */
  uint32_t CTRL_TOG;                               /**< LCDIF General Control Register, offset: 0xC */
  uint32_t CTRL1;                                  /**< LCDIF General Control1 Register, offset: 0x10 */
  uint32_t CTRL1_SET;                              /**< LCDIF General Control1 Register, offset: 0x14 */
  uint32_t CTRL1_CLR;                              /**< LCDIF General Control1 Register, offset: 0x18 */
  uint32_t CTRL1_TOG;                              /**< LCDIF General Control1 Register, offset: 0x1C */
  uint32_t CTRL2;                                  /**< LCDIF General Control2 Register, offset: 0x20 */
  uint32_t CTRL2_SET;                              /**< LCDIF General Control2 Register, offset: 0x24 */
  uint32_t CTRL2_CLR;                              /**< LCDIF General Control2 Register, offset: 0x28 */
  uint32_t CTRL2_TOG;                              /**< LCDIF General Control2 Register, offset: 0x2C */
  uint32_t TRANSFER_COUNT;                         /**< LCDIF Horizontal and Vertical Valid Data Count Register, offset: 0x30 */
  uint8_t RESERVED_0[12];
  uint32_t CUR_BUF;                                /**< LCD Interface Current Buffer Address Register, offset: 0x40 */
  uint8_t RESERVED_1[12];
  uint32_t NEXT_BUF;                               /**< LCD Interface Next Buffer Address Register, offset: 0x50 */
  uint8_t RESERVED_2[12];
  uint32_t TIMING;                                 /**< LCD Interface Timing Register, offset: 0x60 */
  uint8_t RESERVED_3[12];
  uint32_t VDCTRL0;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x70 */
  uint32_t VDCTRL0_SET;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x74 */
  uint32_t VDCTRL0_CLR;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x78 */
  uint32_t VDCTRL0_TOG;                            /**< LCDIF VSYNC Mode and Dotclk Mode Control Register0, offset: 0x7C */
  uint32_t VDCTRL1;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register1, offset: 0x80 */
  uint8_t RESERVED_4[12];
  uint32_t VDCTRL2;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register2, offset: 0x90 */
  uint8_t RESERVED_5[12];
  uint32_t VDCTRL3;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register3, offset: 0xA0 */
  uint8_t RESERVED_6[12];
  uint32_t VDCTRL4;                                /**< LCDIF VSYNC Mode and Dotclk Mode Control Register4, offset: 0xB0 */
  uint8_t RESERVED_7[12];
  uint32_t DVICTRL0;                               /**< Digital Video Interface Control0 Register, offset: 0xC0 */
  uint8_t RESERVED_8[12];
  uint32_t DVICTRL1;                               /**< Digital Video Interface Control1 Register, offset: 0xD0 */
  uint8_t RESERVED_9[12];
  uint32_t DVICTRL2;                               /**< Digital Video Interface Control2 Register, offset: 0xE0 */
  uint8_t RESERVED_10[12];
  uint32_t DVICTRL3;                               /**< Digital Video Interface Control3 Register, offset: 0xF0 */
  uint8_t RESERVED_11[12];
  uint32_t DVICTRL4;                               /**< Digital Video Interface Control4 Register, offset: 0x100 */
  uint8_t RESERVED_12[12];
  uint32_t CSC_COEFF0;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient0 Register, offset: 0x110 */
  uint8_t RESERVED_13[12];
  uint32_t CSC_COEFF1;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient1 Register, offset: 0x120 */
  uint8_t RESERVED_14[12];
  uint32_t CSC_COEFF2;                             /**< RGB to YCbCr 4:2:2 CSC Coefficent2 Register, offset: 0x130 */
  uint8_t RESERVED_15[12];
  uint32_t CSC_COEFF3;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient3 Register, offset: 0x140 */
  uint8_t RESERVED_16[12];
  uint32_t CSC_COEFF4;                             /**< RGB to YCbCr 4:2:2 CSC Coefficient4 Register, offset: 0x150 */
  uint8_t RESERVED_17[12];
  uint32_t CSC_OFFSET;                             /**< RGB to YCbCr 4:2:2 CSC Offset Register, offset: 0x160 */
  uint8_t RESERVED_18[12];
  uint32_t CSC_LIMIT;                              /**< RGB to YCbCr 4:2:2 CSC Limit Register, offset: 0x170 */
  uint8_t RESERVED_19[12];
  uint32_t DATA;                                   /**< LCD Interface Data Register, offset: 0x180 */
  uint8_t RESERVED_20[12];
  uint32_t BM_ERROR_STAT;                          /**< Bus Master Error Status Register, offset: 0x190 */
  uint8_t RESERVED_21[12];
  uint32_t CRC_STAT;                               /**< CRC Status Register, offset: 0x1A0 */
  uint8_t RESERVED_22[12];
  uint32_t STAT;                                   /**< LCD Interface Status Register, offset: 0x1B0 */
  uint8_t RESERVED_23[76];
  uint32_t THRES;                                  /**< LCDIF Threshold Register, offset: 0x200 */
  uint8_t RESERVED_24[12];
  uint32_t AS_CTRL;                                /**< LCDIF AS Buffer Control Register, offset: 0x210 */
  uint8_t RESERVED_25[12];
  uint32_t AS_BUF;                                 /**< Alpha Surface Buffer Pointer, offset: 0x220 */
  uint8_t RESERVED_26[12];
  uint32_t AS_NEXT_BUF;                            /**< , offset: 0x230 */
  uint8_t RESERVED_27[12];
  uint32_t AS_CLRKEYLOW;                           /**< LCDIF Overlay Color Key Low, offset: 0x240 */
  uint8_t RESERVED_28[12];
  uint32_t AS_CLRKEYHIGH;                          /**< LCDIF Overlay Color Key High, offset: 0x250 */
  uint8_t RESERVED_29[12];
  uint32_t SYNC_DELAY;                             /**< LCD working insync mode with CSI for VSYNC delay, offset: 0x260 */
  uint8_t RESERVED_30[284];
  uint32_t PIGEONCTRL0;                            /**< LCDIF Pigeon Mode Control0 Register, offset: 0x380 */
  uint32_t PIGEONCTRL0_SET;                        /**< LCDIF Pigeon Mode Control0 Register, offset: 0x384 */
  uint32_t PIGEONCTRL0_CLR;                        /**< LCDIF Pigeon Mode Control0 Register, offset: 0x388 */
  uint32_t PIGEONCTRL0_TOG;                        /**< LCDIF Pigeon Mode Control0 Register, offset: 0x38C */
  uint32_t PIGEONCTRL1;                            /**< LCDIF Pigeon Mode Control1 Register, offset: 0x390 */
  uint32_t PIGEONCTRL1_SET;                        /**< LCDIF Pigeon Mode Control1 Register, offset: 0x394 */
  uint32_t PIGEONCTRL1_CLR;                        /**< LCDIF Pigeon Mode Control1 Register, offset: 0x398 */
  uint32_t PIGEONCTRL1_TOG;                        /**< LCDIF Pigeon Mode Control1 Register, offset: 0x39C */
  uint32_t PIGEONCTRL2;                            /**< LCDIF Pigeon Mode Control2 Register, offset: 0x3A0 */
  uint32_t PIGEONCTRL2_SET;                        /**< LCDIF Pigeon Mode Control2 Register, offset: 0x3A4 */
  uint32_t PIGEONCTRL2_CLR;                        /**< LCDIF Pigeon Mode Control2 Register, offset: 0x3A8 */
  uint32_t PIGEONCTRL2_TOG;                        /**< LCDIF Pigeon Mode Control2 Register, offset: 0x3AC */
  uint8_t RESERVED_31[1104];
  struct {                                         /* offset: 0x800, array step: 0x40 */
    uint32_t PIGEON_n_0;                             /**< Panel Interface Signal Generator Register, array offset: 0x800, array step: 0x40 */
    uint8_t RESERVED_0[12];
    uint32_t PIGEON_n_1;                             /**< Panel Interface Signal Generator Register, array offset: 0x810, array step: 0x40 */
    uint8_t RESERVED_1[12];
    uint32_t PIGEON_n_2;                             /**< Panel Interface Signal Generator Register, array offset: 0x820, array step: 0x40 */
    uint8_t RESERVED_2[28];
  } PIGEON_n[12];
} volatile *LCDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register accessors */
#define LCDIF_CTRL_REG(base)                     ((base)->CTRL)
#define LCDIF_CTRL_SET_REG(base)                 ((base)->CTRL_SET)
#define LCDIF_CTRL_CLR_REG(base)                 ((base)->CTRL_CLR)
#define LCDIF_CTRL_TOG_REG(base)                 ((base)->CTRL_TOG)
#define LCDIF_CTRL1_REG(base)                    ((base)->CTRL1)
#define LCDIF_CTRL1_SET_REG(base)                ((base)->CTRL1_SET)
#define LCDIF_CTRL1_CLR_REG(base)                ((base)->CTRL1_CLR)
#define LCDIF_CTRL1_TOG_REG(base)                ((base)->CTRL1_TOG)
#define LCDIF_CTRL2_REG(base)                    ((base)->CTRL2)
#define LCDIF_CTRL2_SET_REG(base)                ((base)->CTRL2_SET)
#define LCDIF_CTRL2_CLR_REG(base)                ((base)->CTRL2_CLR)
#define LCDIF_CTRL2_TOG_REG(base)                ((base)->CTRL2_TOG)
#define LCDIF_TRANSFER_COUNT_REG(base)           ((base)->TRANSFER_COUNT)
#define LCDIF_CUR_BUF_REG(base)                  ((base)->CUR_BUF)
#define LCDIF_NEXT_BUF_REG(base)                 ((base)->NEXT_BUF)
#define LCDIF_TIMING_REG(base)                   ((base)->TIMING)
#define LCDIF_VDCTRL0_REG(base)                  ((base)->VDCTRL0)
#define LCDIF_VDCTRL0_SET_REG(base)              ((base)->VDCTRL0_SET)
#define LCDIF_VDCTRL0_CLR_REG(base)              ((base)->VDCTRL0_CLR)
#define LCDIF_VDCTRL0_TOG_REG(base)              ((base)->VDCTRL0_TOG)
#define LCDIF_VDCTRL1_REG(base)                  ((base)->VDCTRL1)
#define LCDIF_VDCTRL2_REG(base)                  ((base)->VDCTRL2)
#define LCDIF_VDCTRL3_REG(base)                  ((base)->VDCTRL3)
#define LCDIF_VDCTRL4_REG(base)                  ((base)->VDCTRL4)
#define LCDIF_DVICTRL0_REG(base)                 ((base)->DVICTRL0)
#define LCDIF_DVICTRL1_REG(base)                 ((base)->DVICTRL1)
#define LCDIF_DVICTRL2_REG(base)                 ((base)->DVICTRL2)
#define LCDIF_DVICTRL3_REG(base)                 ((base)->DVICTRL3)
#define LCDIF_DVICTRL4_REG(base)                 ((base)->DVICTRL4)
#define LCDIF_CSC_COEFF0_REG(base)               ((base)->CSC_COEFF0)
#define LCDIF_CSC_COEFF1_REG(base)               ((base)->CSC_COEFF1)
#define LCDIF_CSC_COEFF2_REG(base)               ((base)->CSC_COEFF2)
#define LCDIF_CSC_COEFF3_REG(base)               ((base)->CSC_COEFF3)
#define LCDIF_CSC_COEFF4_REG(base)               ((base)->CSC_COEFF4)
#define LCDIF_CSC_OFFSET_REG(base)               ((base)->CSC_OFFSET)
#define LCDIF_CSC_LIMIT_REG(base)                ((base)->CSC_LIMIT)
#define LCDIF_DATA_REG(base)                     ((base)->DATA)
#define LCDIF_BM_ERROR_STAT_REG(base)            ((base)->BM_ERROR_STAT)
#define LCDIF_CRC_STAT_REG(base)                 ((base)->CRC_STAT)
#define LCDIF_STAT_REG(base)                     ((base)->STAT)
#define LCDIF_THRES_REG(base)                    ((base)->THRES)
#define LCDIF_AS_CTRL_REG(base)                  ((base)->AS_CTRL)
#define LCDIF_AS_BUF_REG(base)                   ((base)->AS_BUF)
#define LCDIF_AS_NEXT_BUF_REG(base)              ((base)->AS_NEXT_BUF)
#define LCDIF_AS_CLRKEYLOW_REG(base)             ((base)->AS_CLRKEYLOW)
#define LCDIF_AS_CLRKEYHIGH_REG(base)            ((base)->AS_CLRKEYHIGH)
#define LCDIF_SYNC_DELAY_REG(base)               ((base)->SYNC_DELAY)
#define LCDIF_PIGEONCTRL0_REG(base)              ((base)->PIGEONCTRL0)
#define LCDIF_PIGEONCTRL0_SET_REG(base)          ((base)->PIGEONCTRL0_SET)
#define LCDIF_PIGEONCTRL0_CLR_REG(base)          ((base)->PIGEONCTRL0_CLR)
#define LCDIF_PIGEONCTRL0_TOG_REG(base)          ((base)->PIGEONCTRL0_TOG)
#define LCDIF_PIGEONCTRL1_REG(base)              ((base)->PIGEONCTRL1)
#define LCDIF_PIGEONCTRL1_SET_REG(base)          ((base)->PIGEONCTRL1_SET)
#define LCDIF_PIGEONCTRL1_CLR_REG(base)          ((base)->PIGEONCTRL1_CLR)
#define LCDIF_PIGEONCTRL1_TOG_REG(base)          ((base)->PIGEONCTRL1_TOG)
#define LCDIF_PIGEONCTRL2_REG(base)              ((base)->PIGEONCTRL2)
#define LCDIF_PIGEONCTRL2_SET_REG(base)          ((base)->PIGEONCTRL2_SET)
#define LCDIF_PIGEONCTRL2_CLR_REG(base)          ((base)->PIGEONCTRL2_CLR)
#define LCDIF_PIGEONCTRL2_TOG_REG(base)          ((base)->PIGEONCTRL2_TOG)
#define LCDIF_PIGEON_n_0_REG(base,index)         ((base)->PIGEON_n[index].PIGEON_n_0)
#define LCDIF_PIGEON_n_1_REG(base,index)         ((base)->PIGEON_n[index].PIGEON_n_1)
#define LCDIF_PIGEON_n_2_REG(base,index)         ((base)->PIGEON_n[index].PIGEON_n_2)

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- LCDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Masks LCDIF Register Masks
 * @{
 */

/*! @name CTRL - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_RUN_MASK                      (0x1U)
#define LCDIF_CTRL_RUN_SHIFT                     (0U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_MASK       (0x2U)
#define LCDIF_CTRL_DATA_FORMAT_24_BIT_SHIFT      (1U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_MASK       (0x4U)
#define LCDIF_CTRL_DATA_FORMAT_18_BIT_SHIFT      (2U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_MASK       (0x8U)
#define LCDIF_CTRL_DATA_FORMAT_16_BIT_SHIFT      (3U)
#define LCDIF_CTRL_RSRVD0_MASK                   (0x10U)
#define LCDIF_CTRL_RSRVD0_SHIFT                  (4U)
#define LCDIF_CTRL_MASTER_MASK                   (0x20U)
#define LCDIF_CTRL_MASTER_SHIFT                  (5U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_MASK     (0x40U)
#define LCDIF_CTRL_ENABLE_PXP_HANDSHAKE_SHIFT    (6U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_MASK      (0x80U)
#define LCDIF_CTRL_RGB_TO_YCBCR422_CSC_SHIFT     (7U)
#define LCDIF_CTRL_WORD_LENGTH_MASK              (0x300U)
#define LCDIF_CTRL_WORD_LENGTH_SHIFT             (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_WORD_LENGTH(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_WORD_LENGTH_MASK)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK        (0xC00U)
#define LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT       (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_LCD_DATABUS_WIDTH(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK         (0x3000U)
#define LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT        (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CSC_DATA_SWIZZLE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK       (0xC000U)
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT      (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_INPUT_DATA_SWIZZLE(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_DATA_SELECT_MASK              (0x10000U)
#define LCDIF_CTRL_DATA_SELECT_SHIFT             (16U)
#define LCDIF_CTRL_DOTCLK_MODE_MASK              (0x20000U)
#define LCDIF_CTRL_DOTCLK_MODE_SHIFT             (17U)
#define LCDIF_CTRL_VSYNC_MODE_MASK               (0x40000U)
#define LCDIF_CTRL_VSYNC_MODE_SHIFT              (18U)
#define LCDIF_CTRL_BYPASS_COUNT_MASK             (0x80000U)
#define LCDIF_CTRL_BYPASS_COUNT_SHIFT            (19U)
#define LCDIF_CTRL_DVI_MODE_MASK                 (0x100000U)
#define LCDIF_CTRL_DVI_MODE_SHIFT                (20U)
#define LCDIF_CTRL_SHIFT_NUM_BITS_MASK           (0x3E00000U)
#define LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT          (21U)
#define LCDIF_CTRL_SHIFT_NUM_BITS(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_DATA_SHIFT_DIR_MASK           (0x4000000U)
#define LCDIF_CTRL_DATA_SHIFT_DIR_SHIFT          (26U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_MASK      (0x8000000U)
#define LCDIF_CTRL_WAIT_FOR_VSYNC_EDGE_SHIFT     (27U)
#define LCDIF_CTRL_READ_WRITEB_MASK              (0x10000000U)
#define LCDIF_CTRL_READ_WRITEB_SHIFT             (28U)
#define LCDIF_CTRL_YCBCR422_INPUT_MASK           (0x20000000U)
#define LCDIF_CTRL_YCBCR422_INPUT_SHIFT          (29U)
#define LCDIF_CTRL_CLKGATE_MASK                  (0x40000000U)
#define LCDIF_CTRL_CLKGATE_SHIFT                 (30U)
#define LCDIF_CTRL_SFTRST_MASK                   (0x80000000U)
#define LCDIF_CTRL_SFTRST_SHIFT                  (31U)
/*! @} */

/*! @name CTRL_SET - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_SET_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_SET_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_SET_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_SET_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_SET_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_SET_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_SET_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_SET_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_SET_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_SET_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_SET_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_SET_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_SET_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_SET_WORD_LENGTH_MASK)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_SET_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_SET_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_SET_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_SET_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_SET_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_SET_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_SET_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_SET_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_SET_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_SET_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_SET_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_SET_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_SET_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_SET_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_SET_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_SET_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_SET_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_SET_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_SET_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_SET_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_SET_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_SET_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_SET_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_SET_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_SET_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_SET_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL_CLR - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_CLR_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_CLR_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_CLR_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_CLR_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_CLR_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_CLR_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_CLR_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_CLR_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_CLR_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_CLR_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_CLR_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_CLR_WORD_LENGTH_MASK)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_CLR_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_CLR_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_CLR_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_CLR_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_CLR_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_CLR_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_CLR_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_CLR_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_CLR_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_CLR_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_CLR_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_CLR_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_CLR_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_CLR_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_CLR_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_CLR_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_CLR_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_CLR_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_CLR_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_CLR_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_CLR_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_CLR_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL_TOG - LCDIF General Control Register */
/*! @{ */
#define LCDIF_CTRL_TOG_RUN_MASK                  (0x1U)
#define LCDIF_CTRL_TOG_RUN_SHIFT                 (0U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_MASK   (0x2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_24_BIT_SHIFT  (1U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_MASK   (0x4U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_18_BIT_SHIFT  (2U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_MASK   (0x8U)
#define LCDIF_CTRL_TOG_DATA_FORMAT_16_BIT_SHIFT  (3U)
#define LCDIF_CTRL_TOG_RSRVD0_MASK               (0x10U)
#define LCDIF_CTRL_TOG_RSRVD0_SHIFT              (4U)
#define LCDIF_CTRL_TOG_MASTER_MASK               (0x20U)
#define LCDIF_CTRL_TOG_MASTER_SHIFT              (5U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_MASK (0x40U)
#define LCDIF_CTRL_TOG_ENABLE_PXP_HANDSHAKE_SHIFT (6U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_MASK  (0x80U)
#define LCDIF_CTRL_TOG_RGB_TO_YCBCR422_CSC_SHIFT (7U)
#define LCDIF_CTRL_TOG_WORD_LENGTH_MASK          (0x300U)
#define LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT         (8U)
/*! WORD_LENGTH
 *  0b00..Input data is 16 bits per pixel.
 *  0b01..Input data is 8 bits wide.
 *  0b10..Input data is 18 bits per pixel.
 *  0b11..Input data is 24 bits per pixel.
 */
#define LCDIF_CTRL_TOG_WORD_LENGTH(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_WORD_LENGTH_SHIFT)) & LCDIF_CTRL_TOG_WORD_LENGTH_MASK)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK    (0xC00U)
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT   (10U)
/*! LCD_DATABUS_WIDTH
 *  0b00..16-bit data bus mode.
 *  0b01..8-bit data bus mode.
 *  0b10..18-bit data bus mode.
 *  0b11..24-bit data bus mode.
 */
#define LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_SHIFT)) & LCDIF_CTRL_TOG_LCD_DATABUS_WIDTH_MASK)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK     (0x3000U)
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT    (12U)
/*! CSC_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_CSC_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK   (0xC000U)
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT  (14U)
/*! INPUT_DATA_SWIZZLE
 *  0b00..No byte swapping.(Little endian)
 *  0b00..Little Endian byte ordering (same as NO_SWAP).
 *  0b01..Big Endian swap (swap bytes 0,3 and 1,2).
 *  0b01..Swizzle all bytes, swap bytes 0,3 and 1,2 (aka Big Endian).
 *  0b10..Swap half-words.
 *  0b11..Swap bytes within each half-word.
 */
#define LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_CTRL_TOG_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_CTRL_TOG_DATA_SELECT_MASK          (0x10000U)
#define LCDIF_CTRL_TOG_DATA_SELECT_SHIFT         (16U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_MASK          (0x20000U)
#define LCDIF_CTRL_TOG_DOTCLK_MODE_SHIFT         (17U)
#define LCDIF_CTRL_TOG_VSYNC_MODE_MASK           (0x40000U)
#define LCDIF_CTRL_TOG_VSYNC_MODE_SHIFT          (18U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_MASK         (0x80000U)
#define LCDIF_CTRL_TOG_BYPASS_COUNT_SHIFT        (19U)
#define LCDIF_CTRL_TOG_DVI_MODE_MASK             (0x100000U)
#define LCDIF_CTRL_TOG_DVI_MODE_SHIFT            (20U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK       (0x3E00000U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT      (21U)
#define LCDIF_CTRL_TOG_SHIFT_NUM_BITS(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL_TOG_SHIFT_NUM_BITS_SHIFT)) & LCDIF_CTRL_TOG_SHIFT_NUM_BITS_MASK)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_MASK       (0x4000000U)
#define LCDIF_CTRL_TOG_DATA_SHIFT_DIR_SHIFT      (26U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_MASK  (0x8000000U)
#define LCDIF_CTRL_TOG_WAIT_FOR_VSYNC_EDGE_SHIFT (27U)
#define LCDIF_CTRL_TOG_READ_WRITEB_MASK          (0x10000000U)
#define LCDIF_CTRL_TOG_READ_WRITEB_SHIFT         (28U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_MASK       (0x20000000U)
#define LCDIF_CTRL_TOG_YCBCR422_INPUT_SHIFT      (29U)
#define LCDIF_CTRL_TOG_CLKGATE_MASK              (0x40000000U)
#define LCDIF_CTRL_TOG_CLKGATE_SHIFT             (30U)
#define LCDIF_CTRL_TOG_SFTRST_MASK               (0x80000000U)
#define LCDIF_CTRL_TOG_SFTRST_SHIFT              (31U)
/*! @} */

/*! @name CTRL1 - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_RESET_MASK                   (0x1U)
#define LCDIF_CTRL1_RESET_SHIFT                  (0U)
#define LCDIF_CTRL1_MODE86_MASK                  (0x2U)
#define LCDIF_CTRL1_MODE86_SHIFT                 (1U)
#define LCDIF_CTRL1_BUSY_ENABLE_MASK             (0x4U)
#define LCDIF_CTRL1_BUSY_ENABLE_SHIFT            (2U)
#define LCDIF_CTRL1_RSRVD0_MASK                  (0xF8U)
#define LCDIF_CTRL1_RSRVD0_SHIFT                 (3U)
#define LCDIF_CTRL1_RSRVD0(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_RSRVD0_SHIFT)) & LCDIF_CTRL1_RSRVD0_MASK)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_MASK          (0x100U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_SHIFT         (8U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_MASK      (0x200U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_SHIFT     (9U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_MASK           (0x400U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_SHIFT          (10U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_MASK            (0x800U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_SHIFT           (11U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_MASK       (0x1000U)
#define LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_SHIFT      (12U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_MASK   (0x2000U)
#define LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_SHIFT  (13U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_MASK        (0x4000U)
#define LCDIF_CTRL1_UNDERFLOW_IRQ_EN_SHIFT       (14U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_MASK         (0x8000U)
#define LCDIF_CTRL1_OVERFLOW_IRQ_EN_SHIFT        (15U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK     (0xF0000U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT    (16U)
#define LCDIF_CTRL1_BYTE_PACKING_FORMAT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_FIFO_CLEAR_MASK              (0x200000U)
#define LCDIF_CTRL1_FIFO_CLEAR_SHIFT             (21U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_INTERLACE_FIELDS_MASK        (0x800000U)
#define LCDIF_CTRL1_INTERLACE_FIELDS_SHIFT       (23U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_MASK    (0x1000000U)
#define LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_SHIFT   (24U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_MASK            (0x2000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_SHIFT           (25U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_MASK         (0x4000000U)
#define LCDIF_CTRL1_BM_ERROR_IRQ_EN_SHIFT        (26U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_MASK     (0x8000000U)
#define LCDIF_CTRL1_COMBINE_MPU_WR_STRB_SHIFT    (27U)
/*! @} */

/*! @name CTRL1_SET - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_SET_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_SET_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_SET_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_SET_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_SET_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_SET_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_SET_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_SET_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_RSRVD0_SHIFT)) & LCDIF_CTRL1_SET_RSRVD0_MASK)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_SET_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_SET_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL1_CLR - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_CLR_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_CLR_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_CLR_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_CLR_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_CLR_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_CLR_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_CLR_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_CLR_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_RSRVD0_SHIFT)) & LCDIF_CTRL1_CLR_RSRVD0_MASK)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_CLR_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_CLR_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL1_TOG - LCDIF General Control1 Register */
/*! @{ */
#define LCDIF_CTRL1_TOG_RESET_MASK               (0x1U)
#define LCDIF_CTRL1_TOG_RESET_SHIFT              (0U)
#define LCDIF_CTRL1_TOG_MODE86_MASK              (0x2U)
#define LCDIF_CTRL1_TOG_MODE86_SHIFT             (1U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_MASK         (0x4U)
#define LCDIF_CTRL1_TOG_BUSY_ENABLE_SHIFT        (2U)
#define LCDIF_CTRL1_TOG_RSRVD0_MASK              (0xF8U)
#define LCDIF_CTRL1_TOG_RSRVD0_SHIFT             (3U)
#define LCDIF_CTRL1_TOG_RSRVD0(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_RSRVD0_SHIFT)) & LCDIF_CTRL1_TOG_RSRVD0_MASK)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_MASK      (0x100U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_SHIFT     (8U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_MASK  (0x200U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_SHIFT (9U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_MASK       (0x400U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_SHIFT      (10U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_MASK        (0x800U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_SHIFT       (11U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_MASK   (0x1000U)
#define LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_SHIFT  (12U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_MASK (0x2000U)
#define LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_SHIFT (13U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_MASK    (0x4000U)
#define LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_SHIFT   (14U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_MASK     (0x8000U)
#define LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_SHIFT    (15U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK (0xF0000U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT (16U)
#define LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT)) & LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_MASK (0x100000U)
#define LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_SHIFT (20U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_MASK          (0x200000U)
#define LCDIF_CTRL1_TOG_FIFO_CLEAR_SHIFT         (21U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_MASK (0x400000U)
#define LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_SHIFT (22U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_MASK    (0x800000U)
#define LCDIF_CTRL1_TOG_INTERLACE_FIELDS_SHIFT   (23U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_MASK (0x1000000U)
#define LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_SHIFT (24U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_MASK        (0x2000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_SHIFT       (25U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_MASK     (0x4000000U)
#define LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_SHIFT    (26U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_MASK (0x8000000U)
#define LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_SHIFT (27U)
/*! @} */

/*! @name CTRL2 - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_RSRVD0_MASK                  (0x1U)
#define LCDIF_CTRL2_RSRVD0_SHIFT                 (0U)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK      (0xEU)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT     (1U)
#define LCDIF_CTRL2_INITIAL_DUMMY_READ(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_RSRVD1_MASK                  (0x80U)
#define LCDIF_CTRL2_RSRVD1_SHIFT                 (7U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_MASK   (0x100U)
#define LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_SHIFT  (8U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_READ_PACK_DIR_MASK           (0x400U)
#define LCDIF_CTRL2_READ_PACK_DIR_SHIFT          (10U)
#define LCDIF_CTRL2_RSRVD2_MASK                  (0x800U)
#define LCDIF_CTRL2_RSRVD2_SHIFT                 (11U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK       (0x7000U)
#define LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT      (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_EVEN_LINE_PATTERN(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD3_MASK                  (0x8000U)
#define LCDIF_CTRL2_RSRVD3_SHIFT                 (15U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_MASK        (0x70000U)
#define LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT       (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_ODD_LINE_PATTERN(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_RSRVD4_MASK                  (0x80000U)
#define LCDIF_CTRL2_RSRVD4_SHIFT                 (19U)
#define LCDIF_CTRL2_BURST_LEN_8_MASK             (0x100000U)
#define LCDIF_CTRL2_BURST_LEN_8_SHIFT            (20U)
#define LCDIF_CTRL2_OUTSTANDING_REQS_MASK        (0xE00000U)
#define LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT       (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_OUTSTANDING_REQS(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_RSRVD5_MASK                  (0xFF000000U)
#define LCDIF_CTRL2_RSRVD5_SHIFT                 (24U)
#define LCDIF_CTRL2_RSRVD5(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_RSRVD5_SHIFT)) & LCDIF_CTRL2_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_SET - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_SET_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_SET_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_SET_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_SET_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_SET_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_SET_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_SET_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_SET_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_SET_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_SET_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_SET_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_SET_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_SET_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_SET_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_SET_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_SET_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_SET_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_SET_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_SET_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_SET_RSRVD5_SHIFT)) & LCDIF_CTRL2_SET_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_CLR - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_CLR_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_CLR_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_CLR_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_CLR_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_CLR_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_CLR_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_CLR_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_CLR_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_CLR_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_CLR_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_CLR_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_CLR_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_CLR_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_CLR_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_CLR_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_CLR_RSRVD5_SHIFT)) & LCDIF_CTRL2_CLR_RSRVD5_MASK)
/*! @} */

/*! @name CTRL2_TOG - LCDIF General Control2 Register */
/*! @{ */
#define LCDIF_CTRL2_TOG_RSRVD0_MASK              (0x1U)
#define LCDIF_CTRL2_TOG_RSRVD0_SHIFT             (0U)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK  (0xEU)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT (1U)
#define LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT)) & LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK (0x70U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT (4U)
#define LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT)) & LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD1_MASK              (0x80U)
#define LCDIF_CTRL2_TOG_RSRVD1_SHIFT             (7U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_MASK (0x100U)
#define LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_SHIFT (8U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK (0x200U)
#define LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT (9U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_MASK       (0x400U)
#define LCDIF_CTRL2_TOG_READ_PACK_DIR_SHIFT      (10U)
#define LCDIF_CTRL2_TOG_RSRVD2_MASK              (0x800U)
#define LCDIF_CTRL2_TOG_RSRVD2_SHIFT             (11U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK   (0x7000U)
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT  (12U)
/*! EVEN_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD3_MASK              (0x8000U)
#define LCDIF_CTRL2_TOG_RSRVD3_SHIFT             (15U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK    (0x70000U)
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT   (16U)
/*! ODD_LINE_PATTERN
 *  0b000..RGB
 *  0b001..RBG
 *  0b010..GBR
 *  0b011..GRB
 *  0b100..BRG
 *  0b101..BGR
 */
#define LCDIF_CTRL2_TOG_ODD_LINE_PATTERN(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT)) & LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK)
#define LCDIF_CTRL2_TOG_RSRVD4_MASK              (0x80000U)
#define LCDIF_CTRL2_TOG_RSRVD4_SHIFT             (19U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_MASK         (0x100000U)
#define LCDIF_CTRL2_TOG_BURST_LEN_8_SHIFT        (20U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK    (0xE00000U)
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT   (21U)
/*! OUTSTANDING_REQS
 *  0b000..REQ_1
 *  0b001..REQ_2
 *  0b010..REQ_4
 *  0b011..REQ_8
 *  0b100..REQ_16
 */
#define LCDIF_CTRL2_TOG_OUTSTANDING_REQS(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT)) & LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK)
#define LCDIF_CTRL2_TOG_RSRVD5_MASK              (0xFF000000U)
#define LCDIF_CTRL2_TOG_RSRVD5_SHIFT             (24U)
#define LCDIF_CTRL2_TOG_RSRVD5(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_CTRL2_TOG_RSRVD5_SHIFT)) & LCDIF_CTRL2_TOG_RSRVD5_MASK)
/*! @} */

/*! @name TRANSFER_COUNT - LCDIF Horizontal and Vertical Valid Data Count Register */
/*! @{ */
#define LCDIF_TRANSFER_COUNT_H_COUNT_MASK        (0xFFFFU)
#define LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT       (0U)
#define LCDIF_TRANSFER_COUNT_H_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_H_COUNT_MASK)
#define LCDIF_TRANSFER_COUNT_V_COUNT_MASK        (0xFFFF0000U)
#define LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT       (16U)
#define LCDIF_TRANSFER_COUNT_V_COUNT(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT)) & LCDIF_TRANSFER_COUNT_V_COUNT_MASK)
/*! @} */

/*! @name CUR_BUF - LCD Interface Current Buffer Address Register */
/*! @{ */
#define LCDIF_CUR_BUF_ADDR_MASK                  (0xFFFFFFFFU)
#define LCDIF_CUR_BUF_ADDR_SHIFT                 (0U)
#define LCDIF_CUR_BUF_ADDR(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_CUR_BUF_ADDR_SHIFT)) & LCDIF_CUR_BUF_ADDR_MASK)
/*! @} */

/*! @name NEXT_BUF - LCD Interface Next Buffer Address Register */
/*! @{ */
#define LCDIF_NEXT_BUF_ADDR_MASK                 (0xFFFFFFFFU)
#define LCDIF_NEXT_BUF_ADDR_SHIFT                (0U)
#define LCDIF_NEXT_BUF_ADDR(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_NEXT_BUF_ADDR_SHIFT)) & LCDIF_NEXT_BUF_ADDR_MASK)
/*! @} */

/*! @name TIMING - LCD Interface Timing Register */
/*! @{ */
#define LCDIF_TIMING_DATA_SETUP_MASK             (0xFFU)
#define LCDIF_TIMING_DATA_SETUP_SHIFT            (0U)
#define LCDIF_TIMING_DATA_SETUP(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_SETUP_SHIFT)) & LCDIF_TIMING_DATA_SETUP_MASK)
#define LCDIF_TIMING_DATA_HOLD_MASK              (0xFF00U)
#define LCDIF_TIMING_DATA_HOLD_SHIFT             (8U)
#define LCDIF_TIMING_DATA_HOLD(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_DATA_HOLD_SHIFT)) & LCDIF_TIMING_DATA_HOLD_MASK)
#define LCDIF_TIMING_CMD_SETUP_MASK              (0xFF0000U)
#define LCDIF_TIMING_CMD_SETUP_SHIFT             (16U)
#define LCDIF_TIMING_CMD_SETUP(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_SETUP_SHIFT)) & LCDIF_TIMING_CMD_SETUP_MASK)
#define LCDIF_TIMING_CMD_HOLD_MASK               (0xFF000000U)
#define LCDIF_TIMING_CMD_HOLD_SHIFT              (24U)
#define LCDIF_TIMING_CMD_HOLD(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_TIMING_CMD_HOLD_SHIFT)) & LCDIF_TIMING_CMD_HOLD_MASK)
/*! @} */

/*! @name VDCTRL0 - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK     (0x3FFFFU)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT    (0U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_MASK        (0x40000U)
#define LCDIF_VDCTRL0_HALF_LINE_MODE_SHIFT       (18U)
#define LCDIF_VDCTRL0_HALF_LINE_MASK             (0x80000U)
#define LCDIF_VDCTRL0_HALF_LINE_SHIFT            (19U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_MASK     (0x200000U)
#define LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_SHIFT    (21U)
#define LCDIF_VDCTRL0_RSRVD1_MASK                (0xC00000U)
#define LCDIF_VDCTRL0_RSRVD1_SHIFT               (22U)
#define LCDIF_VDCTRL0_RSRVD1(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_RSRVD1_MASK)
#define LCDIF_VDCTRL0_ENABLE_POL_MASK            (0x1000000U)
#define LCDIF_VDCTRL0_ENABLE_POL_SHIFT           (24U)
#define LCDIF_VDCTRL0_DOTCLK_POL_MASK            (0x2000000U)
#define LCDIF_VDCTRL0_DOTCLK_POL_SHIFT           (25U)
#define LCDIF_VDCTRL0_HSYNC_POL_MASK             (0x4000000U)
#define LCDIF_VDCTRL0_HSYNC_POL_SHIFT            (26U)
#define LCDIF_VDCTRL0_VSYNC_POL_MASK             (0x8000000U)
#define LCDIF_VDCTRL0_VSYNC_POL_SHIFT            (27U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_MASK        (0x10000000U)
#define LCDIF_VDCTRL0_ENABLE_PRESENT_SHIFT       (28U)
#define LCDIF_VDCTRL0_VSYNC_OEB_MASK             (0x20000000U)
#define LCDIF_VDCTRL0_VSYNC_OEB_SHIFT            (29U)
#define LCDIF_VDCTRL0_RSRVD2_MASK                (0xC0000000U)
#define LCDIF_VDCTRL0_RSRVD2_SHIFT               (30U)
#define LCDIF_VDCTRL0_RSRVD2(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_SET - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_SET_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_SET_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_SET_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_SET_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD1_MASK)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_SET_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_SET_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_SET_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_SET_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_SET_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_SET_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_SET_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_SET_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_SET_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_CLR - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_CLR_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_CLR_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_CLR_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD1_MASK)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_CLR_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_CLR_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_CLR_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_CLR_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_CLR_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_CLR_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL0_TOG - LCDIF VSYNC Mode and Dotclk Mode Control Register0 */
/*! @{ */
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK (0x3FFFFU)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT (0U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH(x)   (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_MASK    (0x40000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_SHIFT   (18U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_MASK         (0x80000U)
#define LCDIF_VDCTRL0_TOG_HALF_LINE_SHIFT        (19U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_MASK (0x100000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_SHIFT (20U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_MASK (0x200000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_SHIFT (21U)
#define LCDIF_VDCTRL0_TOG_RSRVD1_MASK            (0xC00000U)
#define LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT           (22U)
#define LCDIF_VDCTRL0_TOG_RSRVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD1_MASK)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_MASK        (0x1000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_POL_SHIFT       (24U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_MASK        (0x2000000U)
#define LCDIF_VDCTRL0_TOG_DOTCLK_POL_SHIFT       (25U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_MASK         (0x4000000U)
#define LCDIF_VDCTRL0_TOG_HSYNC_POL_SHIFT        (26U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_MASK         (0x8000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_POL_SHIFT        (27U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_MASK    (0x10000000U)
#define LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_SHIFT   (28U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_MASK         (0x20000000U)
#define LCDIF_VDCTRL0_TOG_VSYNC_OEB_SHIFT        (29U)
#define LCDIF_VDCTRL0_TOG_RSRVD2_MASK            (0xC0000000U)
#define LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT           (30U)
#define LCDIF_VDCTRL0_TOG_RSRVD2(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT)) & LCDIF_VDCTRL0_TOG_RSRVD2_MASK)
/*! @} */

/*! @name VDCTRL1 - LCDIF VSYNC Mode and Dotclk Mode Control Register1 */
/*! @{ */
#define LCDIF_VDCTRL1_VSYNC_PERIOD_MASK          (0xFFFFFFFFU)
#define LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL1_VSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL1_VSYNC_PERIOD_MASK)
/*! @} */

/*! @name VDCTRL2 - LCDIF VSYNC Mode and Dotclk Mode Control Register2 */
/*! @{ */
#define LCDIF_VDCTRL2_HSYNC_PERIOD_MASK          (0x3FFFFU)
#define LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT         (0U)
#define LCDIF_VDCTRL2_HSYNC_PERIOD(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PERIOD_MASK)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK     (0xFFFC0000U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT    (18U)
#define LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT)) & LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK)
/*! @} */

/*! @name VDCTRL3 - LCDIF VSYNC Mode and Dotclk Mode Control Register3 */
/*! @{ */
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK     (0xFFFFU)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT    (0U)
#define LCDIF_VDCTRL3_VERTICAL_WAIT_CNT(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK   (0xFFF0000U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT  (16U)
#define LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT(x)     (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT)) & LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK)
#define LCDIF_VDCTRL3_VSYNC_ONLY_MASK            (0x10000000U)
#define LCDIF_VDCTRL3_VSYNC_ONLY_SHIFT           (28U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_MASK      (0x20000000U)
#define LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_SHIFT     (29U)
#define LCDIF_VDCTRL3_RSRVD0_MASK                (0xC0000000U)
#define LCDIF_VDCTRL3_RSRVD0_SHIFT               (30U)
#define LCDIF_VDCTRL3_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL3_RSRVD0_SHIFT)) & LCDIF_VDCTRL3_RSRVD0_MASK)
/*! @} */

/*! @name VDCTRL4 - LCDIF VSYNC Mode and Dotclk Mode Control Register4 */
/*! @{ */
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK (0x3FFFFU)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT (0U)
#define LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_MASK       (0x40000U)
#define LCDIF_VDCTRL4_SYNC_SIGNALS_ON_SHIFT      (18U)
#define LCDIF_VDCTRL4_RSRVD0_MASK                (0x1FF80000U)
#define LCDIF_VDCTRL4_RSRVD0_SHIFT               (19U)
#define LCDIF_VDCTRL4_RSRVD0(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_RSRVD0_SHIFT)) & LCDIF_VDCTRL4_RSRVD0_MASK)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK        (0xE0000000U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT       (29U)
#define LCDIF_VDCTRL4_DOTCLK_DLY_SEL(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT)) & LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK)
/*! @} */

/*! @name DVICTRL0 - Digital Video Interface Control0 Register */
/*! @{ */
#define LCDIF_DVICTRL0_H_BLANKING_CNT_MASK       (0xFFFU)
#define LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT      (0U)
#define LCDIF_DVICTRL0_H_BLANKING_CNT(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT)) & LCDIF_DVICTRL0_H_BLANKING_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD0_MASK               (0xF000U)
#define LCDIF_DVICTRL0_RSRVD0_SHIFT              (12U)
#define LCDIF_DVICTRL0_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD0_SHIFT)) & LCDIF_DVICTRL0_RSRVD0_MASK)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK         (0xFFF0000U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT        (16U)
#define LCDIF_DVICTRL0_H_ACTIVE_CNT(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT)) & LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK)
#define LCDIF_DVICTRL0_RSRVD1_MASK               (0xF0000000U)
#define LCDIF_DVICTRL0_RSRVD1_SHIFT              (28U)
#define LCDIF_DVICTRL0_RSRVD1(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL0_RSRVD1_SHIFT)) & LCDIF_DVICTRL0_RSRVD1_MASK)
/*! @} */

/*! @name DVICTRL1 - Digital Video Interface Control1 Register */
/*! @{ */
#define LCDIF_DVICTRL1_F2_START_LINE_MASK        (0x3FFU)
#define LCDIF_DVICTRL1_F2_START_LINE_SHIFT       (0U)
#define LCDIF_DVICTRL1_F2_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F2_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F2_START_LINE_MASK)
#define LCDIF_DVICTRL1_F1_END_LINE_MASK          (0xFFC00U)
#define LCDIF_DVICTRL1_F1_END_LINE_SHIFT         (10U)
#define LCDIF_DVICTRL1_F1_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_END_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_END_LINE_MASK)
#define LCDIF_DVICTRL1_F1_START_LINE_MASK        (0x3FF00000U)
#define LCDIF_DVICTRL1_F1_START_LINE_SHIFT       (20U)
#define LCDIF_DVICTRL1_F1_START_LINE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_F1_START_LINE_SHIFT)) & LCDIF_DVICTRL1_F1_START_LINE_MASK)
#define LCDIF_DVICTRL1_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL1_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL1_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL1_RSRVD0_SHIFT)) & LCDIF_DVICTRL1_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL2 - Digital Video Interface Control2 Register */
/*! @{ */
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK    (0x3FFU)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT   (0U)
#define LCDIF_DVICTRL2_V1_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK  (0xFFC00U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT (10U)
#define LCDIF_DVICTRL2_V1_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL2_F2_END_LINE_MASK          (0x3FF00000U)
#define LCDIF_DVICTRL2_F2_END_LINE_SHIFT         (20U)
#define LCDIF_DVICTRL2_F2_END_LINE(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_F2_END_LINE_SHIFT)) & LCDIF_DVICTRL2_F2_END_LINE_MASK)
#define LCDIF_DVICTRL2_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL2_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL2_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL2_RSRVD0_SHIFT)) & LCDIF_DVICTRL2_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL3 - Digital Video Interface Control3 Register */
/*! @{ */
#define LCDIF_DVICTRL3_V_LINES_CNT_MASK          (0x3FFU)
#define LCDIF_DVICTRL3_V_LINES_CNT_SHIFT         (0U)
#define LCDIF_DVICTRL3_V_LINES_CNT(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V_LINES_CNT_SHIFT)) & LCDIF_DVICTRL3_V_LINES_CNT_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK    (0xFFC00U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT   (10U)
#define LCDIF_DVICTRL3_V2_BLANK_END_LINE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK  (0x3FF00000U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT (20U)
#define LCDIF_DVICTRL3_V2_BLANK_START_LINE(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT)) & LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK)
#define LCDIF_DVICTRL3_RSRVD0_MASK               (0xC0000000U)
#define LCDIF_DVICTRL3_RSRVD0_SHIFT              (30U)
#define LCDIF_DVICTRL3_RSRVD0(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL3_RSRVD0_SHIFT)) & LCDIF_DVICTRL3_RSRVD0_MASK)
/*! @} */

/*! @name DVICTRL4 - Digital Video Interface Control4 Register */
/*! @{ */
#define LCDIF_DVICTRL4_H_FILL_CNT_MASK           (0xFFU)
#define LCDIF_DVICTRL4_H_FILL_CNT_SHIFT          (0U)
#define LCDIF_DVICTRL4_H_FILL_CNT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_H_FILL_CNT_SHIFT)) & LCDIF_DVICTRL4_H_FILL_CNT_MASK)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_MASK        (0xFF00U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT       (8U)
#define LCDIF_DVICTRL4_CR_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CR_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_MASK        (0xFF0000U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT       (16U)
#define LCDIF_DVICTRL4_CB_FILL_VALUE(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_CB_FILL_VALUE_MASK)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_MASK         (0xFF000000U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT        (24U)
#define LCDIF_DVICTRL4_Y_FILL_VALUE(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT)) & LCDIF_DVICTRL4_Y_FILL_VALUE_MASK)
/*! @} */

/*! @name CSC_COEFF0 - RGB to YCbCr 4:2:2 CSC Coefficient0 Register */
/*! @{ */
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK (0x3U)
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT (0U)
/*! CSC_SUBSAMPLE_FILTER
 *  0b00..No filtering, simply keep every chroma value for samples numbered 2n and discard chroma values associated with all samples numbered 2n+1.
 *  0b01..Reserved
 *  0b10..Chroma samples numbered 2n and 2n+1 are averaged (weights 1/2, 1/2) and that chroma value replaces the
 *        two chroma values at 2n and 2n+1. This chroma now exists horizontally halfway between the two luma samples.
 *  0b11..Chroma samples numbered 2n-1, 2n, and 2n+1 are averaged (weights 1/4, 1/2, 1/4) and that chroma value
 *        exists at the same site as the luma sample numbered 2n and the chroma samples at 2n+1 are discarded.
 */
#define LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT)) & LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK)
#define LCDIF_CSC_COEFF0_RSRVD0_MASK             (0xFFFCU)
#define LCDIF_CSC_COEFF0_RSRVD0_SHIFT            (2U)
#define LCDIF_CSC_COEFF0_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD0_MASK)
#define LCDIF_CSC_COEFF0_C0_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF0_C0_SHIFT                (16U)
#define LCDIF_CSC_COEFF0_C0(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_C0_SHIFT)) & LCDIF_CSC_COEFF0_C0_MASK)
#define LCDIF_CSC_COEFF0_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF0_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF0_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF0_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF0_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF1 - RGB to YCbCr 4:2:2 CSC Coefficient1 Register */
/*! @{ */
#define LCDIF_CSC_COEFF1_C1_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF1_C1_SHIFT                (0U)
#define LCDIF_CSC_COEFF1_C1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C1_SHIFT)) & LCDIF_CSC_COEFF1_C1_MASK)
#define LCDIF_CSC_COEFF1_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF1_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF1_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD0_MASK)
#define LCDIF_CSC_COEFF1_C2_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF1_C2_SHIFT                (16U)
#define LCDIF_CSC_COEFF1_C2(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_C2_SHIFT)) & LCDIF_CSC_COEFF1_C2_MASK)
#define LCDIF_CSC_COEFF1_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF1_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF1_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF1_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF1_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF2 - RGB to YCbCr 4:2:2 CSC Coefficent2 Register */
/*! @{ */
#define LCDIF_CSC_COEFF2_C3_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF2_C3_SHIFT                (0U)
#define LCDIF_CSC_COEFF2_C3(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C3_SHIFT)) & LCDIF_CSC_COEFF2_C3_MASK)
#define LCDIF_CSC_COEFF2_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF2_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF2_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD0_MASK)
#define LCDIF_CSC_COEFF2_C4_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF2_C4_SHIFT                (16U)
#define LCDIF_CSC_COEFF2_C4(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_C4_SHIFT)) & LCDIF_CSC_COEFF2_C4_MASK)
#define LCDIF_CSC_COEFF2_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF2_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF2_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF2_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF2_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF3 - RGB to YCbCr 4:2:2 CSC Coefficient3 Register */
/*! @{ */
#define LCDIF_CSC_COEFF3_C5_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF3_C5_SHIFT                (0U)
#define LCDIF_CSC_COEFF3_C5(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C5_SHIFT)) & LCDIF_CSC_COEFF3_C5_MASK)
#define LCDIF_CSC_COEFF3_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF3_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF3_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD0_MASK)
#define LCDIF_CSC_COEFF3_C6_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF3_C6_SHIFT                (16U)
#define LCDIF_CSC_COEFF3_C6(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_C6_SHIFT)) & LCDIF_CSC_COEFF3_C6_MASK)
#define LCDIF_CSC_COEFF3_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF3_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF3_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF3_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF3_RSRVD1_MASK)
/*! @} */

/*! @name CSC_COEFF4 - RGB to YCbCr 4:2:2 CSC Coefficient4 Register */
/*! @{ */
#define LCDIF_CSC_COEFF4_C7_MASK                 (0x3FFU)
#define LCDIF_CSC_COEFF4_C7_SHIFT                (0U)
#define LCDIF_CSC_COEFF4_C7(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C7_SHIFT)) & LCDIF_CSC_COEFF4_C7_MASK)
#define LCDIF_CSC_COEFF4_RSRVD0_MASK             (0xFC00U)
#define LCDIF_CSC_COEFF4_RSRVD0_SHIFT            (10U)
#define LCDIF_CSC_COEFF4_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD0_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD0_MASK)
#define LCDIF_CSC_COEFF4_C8_MASK                 (0x3FF0000U)
#define LCDIF_CSC_COEFF4_C8_SHIFT                (16U)
#define LCDIF_CSC_COEFF4_C8(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_C8_SHIFT)) & LCDIF_CSC_COEFF4_C8_MASK)
#define LCDIF_CSC_COEFF4_RSRVD1_MASK             (0xFC000000U)
#define LCDIF_CSC_COEFF4_RSRVD1_SHIFT            (26U)
#define LCDIF_CSC_COEFF4_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_COEFF4_RSRVD1_SHIFT)) & LCDIF_CSC_COEFF4_RSRVD1_MASK)
/*! @} */

/*! @name CSC_OFFSET - RGB to YCbCr 4:2:2 CSC Offset Register */
/*! @{ */
#define LCDIF_CSC_OFFSET_Y_OFFSET_MASK           (0x1FFU)
#define LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT          (0U)
#define LCDIF_CSC_OFFSET_Y_OFFSET(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_Y_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD0_MASK             (0xFE00U)
#define LCDIF_CSC_OFFSET_RSRVD0_SHIFT            (9U)
#define LCDIF_CSC_OFFSET_RSRVD0(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD0_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD0_MASK)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK        (0x1FF0000U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT       (16U)
#define LCDIF_CSC_OFFSET_CBCR_OFFSET(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT)) & LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK)
#define LCDIF_CSC_OFFSET_RSRVD1_MASK             (0xFE000000U)
#define LCDIF_CSC_OFFSET_RSRVD1_SHIFT            (25U)
#define LCDIF_CSC_OFFSET_RSRVD1(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_OFFSET_RSRVD1_SHIFT)) & LCDIF_CSC_OFFSET_RSRVD1_MASK)
/*! @} */

/*! @name CSC_LIMIT - RGB to YCbCr 4:2:2 CSC Limit Register */
/*! @{ */
#define LCDIF_CSC_LIMIT_Y_MAX_MASK               (0xFFU)
#define LCDIF_CSC_LIMIT_Y_MAX_SHIFT              (0U)
#define LCDIF_CSC_LIMIT_Y_MAX(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MAX_SHIFT)) & LCDIF_CSC_LIMIT_Y_MAX_MASK)
#define LCDIF_CSC_LIMIT_Y_MIN_MASK               (0xFF00U)
#define LCDIF_CSC_LIMIT_Y_MIN_SHIFT              (8U)
#define LCDIF_CSC_LIMIT_Y_MIN(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_Y_MIN_SHIFT)) & LCDIF_CSC_LIMIT_Y_MIN_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MAX_MASK            (0xFF0000U)
#define LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT           (16U)
#define LCDIF_CSC_LIMIT_CBCR_MAX(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MAX_MASK)
#define LCDIF_CSC_LIMIT_CBCR_MIN_MASK            (0xFF000000U)
#define LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT           (24U)
#define LCDIF_CSC_LIMIT_CBCR_MIN(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT)) & LCDIF_CSC_LIMIT_CBCR_MIN_MASK)
/*! @} */

/*! @name DATA - LCD Interface Data Register */
/*! @{ */
#define LCDIF_DATA_DATA_ZERO_MASK                (0xFFU)
#define LCDIF_DATA_DATA_ZERO_SHIFT               (0U)
#define LCDIF_DATA_DATA_ZERO(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ZERO_SHIFT)) & LCDIF_DATA_DATA_ZERO_MASK)
#define LCDIF_DATA_DATA_ONE_MASK                 (0xFF00U)
#define LCDIF_DATA_DATA_ONE_SHIFT                (8U)
#define LCDIF_DATA_DATA_ONE(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_ONE_SHIFT)) & LCDIF_DATA_DATA_ONE_MASK)
#define LCDIF_DATA_DATA_TWO_MASK                 (0xFF0000U)
#define LCDIF_DATA_DATA_TWO_SHIFT                (16U)
#define LCDIF_DATA_DATA_TWO(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_TWO_SHIFT)) & LCDIF_DATA_DATA_TWO_MASK)
#define LCDIF_DATA_DATA_THREE_MASK               (0xFF000000U)
#define LCDIF_DATA_DATA_THREE_SHIFT              (24U)
#define LCDIF_DATA_DATA_THREE(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_DATA_DATA_THREE_SHIFT)) & LCDIF_DATA_DATA_THREE_MASK)
/*! @} */

/*! @name BM_ERROR_STAT - Bus Master Error Status Register */
/*! @{ */
#define LCDIF_BM_ERROR_STAT_ADDR_MASK            (0xFFFFFFFFU)
#define LCDIF_BM_ERROR_STAT_ADDR_SHIFT           (0U)
#define LCDIF_BM_ERROR_STAT_ADDR(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_BM_ERROR_STAT_ADDR_SHIFT)) & LCDIF_BM_ERROR_STAT_ADDR_MASK)
/*! @} */

/*! @name CRC_STAT - CRC Status Register */
/*! @{ */
#define LCDIF_CRC_STAT_CRC_VALUE_MASK            (0xFFFFFFFFU)
#define LCDIF_CRC_STAT_CRC_VALUE_SHIFT           (0U)
#define LCDIF_CRC_STAT_CRC_VALUE(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_CRC_STAT_CRC_VALUE_SHIFT)) & LCDIF_CRC_STAT_CRC_VALUE_MASK)
/*! @} */

/*! @name STAT - LCD Interface Status Register */
/*! @{ */
#define LCDIF_STAT_LFIFO_COUNT_MASK              (0x1FFU)
#define LCDIF_STAT_LFIFO_COUNT_SHIFT             (0U)
#define LCDIF_STAT_LFIFO_COUNT(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_LFIFO_COUNT_SHIFT)) & LCDIF_STAT_LFIFO_COUNT_MASK)
#define LCDIF_STAT_RSRVD0_MASK                   (0xFFFE00U)
#define LCDIF_STAT_RSRVD0_SHIFT                  (9U)
#define LCDIF_STAT_RSRVD0(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_STAT_RSRVD0_SHIFT)) & LCDIF_STAT_RSRVD0_MASK)
#define LCDIF_STAT_DVI_CURRENT_FIELD_MASK        (0x1000000U)
#define LCDIF_STAT_DVI_CURRENT_FIELD_SHIFT       (24U)
#define LCDIF_STAT_BUSY_MASK                     (0x2000000U)
#define LCDIF_STAT_BUSY_SHIFT                    (25U)
#define LCDIF_STAT_TXFIFO_EMPTY_MASK             (0x4000000U)
#define LCDIF_STAT_TXFIFO_EMPTY_SHIFT            (26U)
#define LCDIF_STAT_TXFIFO_FULL_MASK              (0x8000000U)
#define LCDIF_STAT_TXFIFO_FULL_SHIFT             (27U)
#define LCDIF_STAT_LFIFO_EMPTY_MASK              (0x10000000U)
#define LCDIF_STAT_LFIFO_EMPTY_SHIFT             (28U)
#define LCDIF_STAT_LFIFO_FULL_MASK               (0x20000000U)
#define LCDIF_STAT_LFIFO_FULL_SHIFT              (29U)
#define LCDIF_STAT_PRESENT_MASK                  (0x80000000U)
#define LCDIF_STAT_PRESENT_SHIFT                 (31U)
/*! @} */

/*! @name THRES - LCDIF Threshold Register */
/*! @{ */
#define LCDIF_THRES_PANIC_MASK                   (0x1FFU)
#define LCDIF_THRES_PANIC_SHIFT                  (0U)
#define LCDIF_THRES_PANIC(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_PANIC_SHIFT)) & LCDIF_THRES_PANIC_MASK)
#define LCDIF_THRES_RSRVD1_MASK                  (0xFE00U)
#define LCDIF_THRES_RSRVD1_SHIFT                 (9U)
#define LCDIF_THRES_RSRVD1(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD1_SHIFT)) & LCDIF_THRES_RSRVD1_MASK)
#define LCDIF_THRES_FASTCLOCK_MASK               (0x1FF0000U)
#define LCDIF_THRES_FASTCLOCK_SHIFT              (16U)
#define LCDIF_THRES_FASTCLOCK(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_FASTCLOCK_SHIFT)) & LCDIF_THRES_FASTCLOCK_MASK)
#define LCDIF_THRES_RSRVD2_MASK                  (0xFE000000U)
#define LCDIF_THRES_RSRVD2_SHIFT                 (25U)
#define LCDIF_THRES_RSRVD2(x)                    (((uint32_t)(((uint32_t)(x)) << LCDIF_THRES_RSRVD2_SHIFT)) & LCDIF_THRES_RSRVD2_MASK)
/*! @} */

/*! @name AS_CTRL - LCDIF AS Buffer Control Register */
/*! @{ */
#define LCDIF_AS_CTRL_AS_ENABLE_MASK             (0x1U)
#define LCDIF_AS_CTRL_AS_ENABLE_SHIFT            (0U)
#define LCDIF_AS_CTRL_ALPHA_CTRL_MASK            (0x6U)
#define LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT           (1U)
#define LCDIF_AS_CTRL_ALPHA_CTRL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT)) & LCDIF_AS_CTRL_ALPHA_CTRL_MASK)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_MASK       (0x8U)
#define LCDIF_AS_CTRL_ENABLE_COLORKEY_SHIFT      (3U)
#define LCDIF_AS_CTRL_FORMAT_MASK                (0xF0U)
#define LCDIF_AS_CTRL_FORMAT_SHIFT               (4U)
#define LCDIF_AS_CTRL_FORMAT(x)                  (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_FORMAT_SHIFT)) & LCDIF_AS_CTRL_FORMAT_MASK)
#define LCDIF_AS_CTRL_ALPHA_MASK                 (0xFF00U)
#define LCDIF_AS_CTRL_ALPHA_SHIFT                (8U)
#define LCDIF_AS_CTRL_ALPHA(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ALPHA_SHIFT)) & LCDIF_AS_CTRL_ALPHA_MASK)
#define LCDIF_AS_CTRL_ROP_MASK                   (0xF0000U)
#define LCDIF_AS_CTRL_ROP_SHIFT                  (16U)
#define LCDIF_AS_CTRL_ROP(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_ROP_SHIFT)) & LCDIF_AS_CTRL_ROP_MASK)
#define LCDIF_AS_CTRL_ALPHA_INVERT_MASK          (0x100000U)
#define LCDIF_AS_CTRL_ALPHA_INVERT_SHIFT         (20U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK    (0x600000U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT   (21U)
#define LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE(x)      (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT)) & LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK)
#define LCDIF_AS_CTRL_PS_DISABLE_MASK            (0x800000U)
#define LCDIF_AS_CTRL_PS_DISABLE_SHIFT           (23U)
#define LCDIF_AS_CTRL_RVDS1_MASK                 (0x7000000U)
#define LCDIF_AS_CTRL_RVDS1_SHIFT                (24U)
#define LCDIF_AS_CTRL_RVDS1(x)                   (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CTRL_RVDS1_SHIFT)) & LCDIF_AS_CTRL_RVDS1_MASK)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_MASK       (0x8000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_SHIFT      (27U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_MASK    (0x10000000U)
#define LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_SHIFT   (28U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_MASK        (0x20000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_MODE_SHIFT       (29U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_MASK         (0x40000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_POL_SHIFT        (30U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_MASK      (0x80000000U)
#define LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_SHIFT     (31U)
/*! @} */

/*! @name AS_BUF - Alpha Surface Buffer Pointer */
/*! @{ */
#define LCDIF_AS_BUF_ADDR_MASK                   (0xFFFFFFFFU)
#define LCDIF_AS_BUF_ADDR_SHIFT                  (0U)
#define LCDIF_AS_BUF_ADDR(x)                     (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_BUF_ADDR_SHIFT)) & LCDIF_AS_BUF_ADDR_MASK)
/*! @} */

/*! @name AS_NEXT_BUF -  */
/*! @{ */
#define LCDIF_AS_NEXT_BUF_ADDR_MASK              (0xFFFFFFFFU)
#define LCDIF_AS_NEXT_BUF_ADDR_SHIFT             (0U)
#define LCDIF_AS_NEXT_BUF_ADDR(x)                (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_NEXT_BUF_ADDR_SHIFT)) & LCDIF_AS_NEXT_BUF_ADDR_MASK)
/*! @} */

/*! @name AS_CLRKEYLOW - LCDIF Overlay Color Key Low */
/*! @{ */
#define LCDIF_AS_CLRKEYLOW_PIXEL_MASK            (0xFFFFFFU)
#define LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT           (0U)
#define LCDIF_AS_CLRKEYLOW_PIXEL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYLOW_PIXEL_MASK)
#define LCDIF_AS_CLRKEYLOW_RSVD1_MASK            (0xFF000000U)
#define LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT           (24U)
#define LCDIF_AS_CLRKEYLOW_RSVD1(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYLOW_RSVD1_MASK)
/*! @} */

/*! @name AS_CLRKEYHIGH - LCDIF Overlay Color Key High */
/*! @{ */
#define LCDIF_AS_CLRKEYHIGH_PIXEL_MASK           (0xFFFFFFU)
#define LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT          (0U)
#define LCDIF_AS_CLRKEYHIGH_PIXEL(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT)) & LCDIF_AS_CLRKEYHIGH_PIXEL_MASK)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_MASK           (0xFF000000U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT          (24U)
#define LCDIF_AS_CLRKEYHIGH_RSVD1(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT)) & LCDIF_AS_CLRKEYHIGH_RSVD1_MASK)
/*! @} */

/*! @name SYNC_DELAY - LCD working insync mode with CSI for VSYNC delay */
/*! @{ */
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK      (0xFFFFU)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT     (0U)
#define LCDIF_SYNC_DELAY_H_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK      (0xFFFF0000U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT     (16U)
#define LCDIF_SYNC_DELAY_V_COUNT_DELAY(x)        (((uint32_t)(((uint32_t)(x)) << LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT)) & LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK)
/*! @} */

/*! @name PIGEONCTRL0 - LCDIF Pigeon Mode Control0 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL0_FD_PERIOD_MASK         (0xFFFU)
#define LCDIF_PIGEONCTRL0_FD_PERIOD_SHIFT        (0U)
#define LCDIF_PIGEONCTRL0_FD_PERIOD(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_FD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_FD_PERIOD_MASK)
#define LCDIF_PIGEONCTRL0_LD_PERIOD_MASK         (0xFFF0000U)
#define LCDIF_PIGEONCTRL0_LD_PERIOD_SHIFT        (16U)
#define LCDIF_PIGEONCTRL0_LD_PERIOD(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_LD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_LD_PERIOD_MASK)
/*! @} */

/*! @name PIGEONCTRL0_SET - LCDIF Pigeon Mode Control0 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL0_SET_FD_PERIOD_MASK     (0xFFFU)
#define LCDIF_PIGEONCTRL0_SET_FD_PERIOD_SHIFT    (0U)
#define LCDIF_PIGEONCTRL0_SET_FD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_SET_FD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_SET_FD_PERIOD_MASK)
#define LCDIF_PIGEONCTRL0_SET_LD_PERIOD_MASK     (0xFFF0000U)
#define LCDIF_PIGEONCTRL0_SET_LD_PERIOD_SHIFT    (16U)
#define LCDIF_PIGEONCTRL0_SET_LD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_SET_LD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_SET_LD_PERIOD_MASK)
/*! @} */

/*! @name PIGEONCTRL0_CLR - LCDIF Pigeon Mode Control0 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL0_CLR_FD_PERIOD_MASK     (0xFFFU)
#define LCDIF_PIGEONCTRL0_CLR_FD_PERIOD_SHIFT    (0U)
#define LCDIF_PIGEONCTRL0_CLR_FD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_CLR_FD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_CLR_FD_PERIOD_MASK)
#define LCDIF_PIGEONCTRL0_CLR_LD_PERIOD_MASK     (0xFFF0000U)
#define LCDIF_PIGEONCTRL0_CLR_LD_PERIOD_SHIFT    (16U)
#define LCDIF_PIGEONCTRL0_CLR_LD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_CLR_LD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_CLR_LD_PERIOD_MASK)
/*! @} */

/*! @name PIGEONCTRL0_TOG - LCDIF Pigeon Mode Control0 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL0_TOG_FD_PERIOD_MASK     (0xFFFU)
#define LCDIF_PIGEONCTRL0_TOG_FD_PERIOD_SHIFT    (0U)
#define LCDIF_PIGEONCTRL0_TOG_FD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_TOG_FD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_TOG_FD_PERIOD_MASK)
#define LCDIF_PIGEONCTRL0_TOG_LD_PERIOD_MASK     (0xFFF0000U)
#define LCDIF_PIGEONCTRL0_TOG_LD_PERIOD_SHIFT    (16U)
#define LCDIF_PIGEONCTRL0_TOG_LD_PERIOD(x)       (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL0_TOG_LD_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL0_TOG_LD_PERIOD_MASK)
/*! @} */

/*! @name PIGEONCTRL1 - LCDIF Pigeon Mode Control1 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL1_FRAME_CNT_PERIOD_MASK  (0xFFFU)
#define LCDIF_PIGEONCTRL1_FRAME_CNT_PERIOD_SHIFT (0U)
#define LCDIF_PIGEONCTRL1_FRAME_CNT_PERIOD(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_FRAME_CNT_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL1_FRAME_CNT_PERIOD_MASK)
#define LCDIF_PIGEONCTRL1_FRAME_CNT_CYCLES_MASK  (0xFFF0000U)
#define LCDIF_PIGEONCTRL1_FRAME_CNT_CYCLES_SHIFT (16U)
#define LCDIF_PIGEONCTRL1_FRAME_CNT_CYCLES(x)    (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_FRAME_CNT_CYCLES_SHIFT)) & LCDIF_PIGEONCTRL1_FRAME_CNT_CYCLES_MASK)
/*! @} */

/*! @name PIGEONCTRL1_SET - LCDIF Pigeon Mode Control1 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_PERIOD_MASK (0xFFFU)
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_PERIOD_SHIFT (0U)
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_PERIOD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_SET_FRAME_CNT_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL1_SET_FRAME_CNT_PERIOD_MASK)
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_CYCLES_MASK (0xFFF0000U)
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_CYCLES_SHIFT (16U)
#define LCDIF_PIGEONCTRL1_SET_FRAME_CNT_CYCLES(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_SET_FRAME_CNT_CYCLES_SHIFT)) & LCDIF_PIGEONCTRL1_SET_FRAME_CNT_CYCLES_MASK)
/*! @} */

/*! @name PIGEONCTRL1_CLR - LCDIF Pigeon Mode Control1 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_PERIOD_MASK (0xFFFU)
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_PERIOD_SHIFT (0U)
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_PERIOD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_PERIOD_MASK)
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_CYCLES_MASK (0xFFF0000U)
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_CYCLES_SHIFT (16U)
#define LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_CYCLES(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_CYCLES_SHIFT)) & LCDIF_PIGEONCTRL1_CLR_FRAME_CNT_CYCLES_MASK)
/*! @} */

/*! @name PIGEONCTRL1_TOG - LCDIF Pigeon Mode Control1 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_PERIOD_MASK (0xFFFU)
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_PERIOD_SHIFT (0U)
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_PERIOD(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_PERIOD_SHIFT)) & LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_PERIOD_MASK)
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_CYCLES_MASK (0xFFF0000U)
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_CYCLES_SHIFT (16U)
#define LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_CYCLES(x) (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_CYCLES_SHIFT)) & LCDIF_PIGEONCTRL1_TOG_FRAME_CNT_CYCLES_MASK)
/*! @} */

/*! @name PIGEONCTRL2 - LCDIF Pigeon Mode Control2 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL2_PIGEON_DATA_EN_MASK    (0x1U)
#define LCDIF_PIGEONCTRL2_PIGEON_DATA_EN_SHIFT   (0U)
#define LCDIF_PIGEONCTRL2_PIGEON_CLK_GATE_MASK   (0x2U)
#define LCDIF_PIGEONCTRL2_PIGEON_CLK_GATE_SHIFT  (1U)
/*! @} */

/*! @name PIGEONCTRL2_SET - LCDIF Pigeon Mode Control2 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL2_SET_PIGEON_DATA_EN_MASK (0x1U)
#define LCDIF_PIGEONCTRL2_SET_PIGEON_DATA_EN_SHIFT (0U)
#define LCDIF_PIGEONCTRL2_SET_PIGEON_CLK_GATE_MASK (0x2U)
#define LCDIF_PIGEONCTRL2_SET_PIGEON_CLK_GATE_SHIFT (1U)
/*! @} */

/*! @name PIGEONCTRL2_CLR - LCDIF Pigeon Mode Control2 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL2_CLR_PIGEON_DATA_EN_MASK (0x1U)
#define LCDIF_PIGEONCTRL2_CLR_PIGEON_DATA_EN_SHIFT (0U)
#define LCDIF_PIGEONCTRL2_CLR_PIGEON_CLK_GATE_MASK (0x2U)
#define LCDIF_PIGEONCTRL2_CLR_PIGEON_CLK_GATE_SHIFT (1U)
/*! @} */

/*! @name PIGEONCTRL2_TOG - LCDIF Pigeon Mode Control2 Register */
/*! @{ */
#define LCDIF_PIGEONCTRL2_TOG_PIGEON_DATA_EN_MASK (0x1U)
#define LCDIF_PIGEONCTRL2_TOG_PIGEON_DATA_EN_SHIFT (0U)
#define LCDIF_PIGEONCTRL2_TOG_PIGEON_CLK_GATE_MASK (0x2U)
#define LCDIF_PIGEONCTRL2_TOG_PIGEON_CLK_GATE_SHIFT (1U)
/*! @} */

/*! @name PIGEON_n_0 - Panel Interface Signal Generator Register */
/*! @{ */
#define LCDIF_PIGEON_n_0_EN_MASK                 (0x1U)
#define LCDIF_PIGEON_n_0_EN_SHIFT                (0U)
#define LCDIF_PIGEON_n_0_POL_MASK                (0x2U)
#define LCDIF_PIGEON_n_0_POL_SHIFT               (1U)
#define LCDIF_PIGEON_n_0_INC_SEL_MASK            (0xCU)
#define LCDIF_PIGEON_n_0_INC_SEL_SHIFT           (2U)
/*! INC_SEL
 *  0b00..pclk
 *  0b01..Line start pulse
 *  0b10..Frame start pulse
 *  0b11..Use another signal as tick event
 */
#define LCDIF_PIGEON_n_0_INC_SEL(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_0_INC_SEL_SHIFT)) & LCDIF_PIGEON_n_0_INC_SEL_MASK)
#define LCDIF_PIGEON_n_0_OFFSET_MASK             (0xF0U)
#define LCDIF_PIGEON_n_0_OFFSET_SHIFT            (4U)
#define LCDIF_PIGEON_n_0_OFFSET(x)               (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_0_OFFSET_SHIFT)) & LCDIF_PIGEON_n_0_OFFSET_MASK)
#define LCDIF_PIGEON_n_0_MASK_CNT_SEL_MASK       (0xF00U)
#define LCDIF_PIGEON_n_0_MASK_CNT_SEL_SHIFT      (8U)
/*! MASK_CNT_SEL
 *  0b0000..pclk counter within one hscan state
 *  0b0001..pclk cycle within one hscan state
 *  0b0010..line counter within one vscan state
 *  0b0011..line cycle within one vscan state
 *  0b0100..frame counter
 *  0b0101..frame cycle
 *  0b0110..horizontal counter (pclk counter within one line )
 *  0b0111..vertical counter (line counter within one frame)
 */
#define LCDIF_PIGEON_n_0_MASK_CNT_SEL(x)         (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_0_MASK_CNT_SEL_SHIFT)) & LCDIF_PIGEON_n_0_MASK_CNT_SEL_MASK)
#define LCDIF_PIGEON_n_0_MASK_CNT_MASK           (0xFFF000U)
#define LCDIF_PIGEON_n_0_MASK_CNT_SHIFT          (12U)
#define LCDIF_PIGEON_n_0_MASK_CNT(x)             (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_0_MASK_CNT_SHIFT)) & LCDIF_PIGEON_n_0_MASK_CNT_MASK)
#define LCDIF_PIGEON_n_0_STATE_MASK_MASK         (0xFF000000U)
#define LCDIF_PIGEON_n_0_STATE_MASK_SHIFT        (24U)
/*! STATE_MASK
 *  0b00000001..FRAME SYNC
 *  0b00000010..FRAME BEGIN
 *  0b00000100..FRAME DATA
 *  0b00001000..FRAME END
 *  0b00010000..LINE SYNC
 *  0b00100000..LINE BEGIN
 *  0b01000000..LINE DATA
 *  0b10000000..LINE END
 */
#define LCDIF_PIGEON_n_0_STATE_MASK(x)           (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_0_STATE_MASK_SHIFT)) & LCDIF_PIGEON_n_0_STATE_MASK_MASK)
/*! @} */

/* The count of LCDIF_PIGEON_n_0 */
#define LCDIF_PIGEON_n_0_COUNT                   (12U)

/*! @name PIGEON_n_1 - Panel Interface Signal Generator Register */
/*! @{ */
#define LCDIF_PIGEON_n_1_SET_CNT_MASK            (0xFFFFU)
#define LCDIF_PIGEON_n_1_SET_CNT_SHIFT           (0U)
/*! SET_CNT
 *  0b0000000000000000..Start as active
 */
#define LCDIF_PIGEON_n_1_SET_CNT(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_1_SET_CNT_SHIFT)) & LCDIF_PIGEON_n_1_SET_CNT_MASK)
#define LCDIF_PIGEON_n_1_CLR_CNT_MASK            (0xFFFF0000U)
#define LCDIF_PIGEON_n_1_CLR_CNT_SHIFT           (16U)
/*! CLR_CNT
 *  0b0000000000000000..Keep active until mask off
 */
#define LCDIF_PIGEON_n_1_CLR_CNT(x)              (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_1_CLR_CNT_SHIFT)) & LCDIF_PIGEON_n_1_CLR_CNT_MASK)
/*! @} */

/* The count of LCDIF_PIGEON_n_1 */
#define LCDIF_PIGEON_n_1_COUNT                   (12U)

/*! @name PIGEON_n_2 - Panel Interface Signal Generator Register */
/*! @{ */
#define LCDIF_PIGEON_n_2_SIG_LOGIC_MASK          (0xFU)
#define LCDIF_PIGEON_n_2_SIG_LOGIC_SHIFT         (0U)
/*! SIG_LOGIC
 *  0b0000..No logic operation
 *  0b0001..sigout = sig_another AND this_sig
 *  0b0010..sigout = sig_another OR this_sig
 *  0b0011..mask = sig_another AND other_masks
 */
#define LCDIF_PIGEON_n_2_SIG_LOGIC(x)            (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_2_SIG_LOGIC_SHIFT)) & LCDIF_PIGEON_n_2_SIG_LOGIC_MASK)
#define LCDIF_PIGEON_n_2_SIG_ANOTHER_MASK        (0x1F0U)
#define LCDIF_PIGEON_n_2_SIG_ANOTHER_SHIFT       (4U)
/*! SIG_ANOTHER
 *  0b00000..Keep active until mask off
 */
#define LCDIF_PIGEON_n_2_SIG_ANOTHER(x)          (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_2_SIG_ANOTHER_SHIFT)) & LCDIF_PIGEON_n_2_SIG_ANOTHER_MASK)
#define LCDIF_PIGEON_n_2_RSVD_MASK               (0xFFFFFE00U)
#define LCDIF_PIGEON_n_2_RSVD_SHIFT              (9U)
#define LCDIF_PIGEON_n_2_RSVD(x)                 (((uint32_t)(((uint32_t)(x)) << LCDIF_PIGEON_n_2_RSVD_SHIFT)) & LCDIF_PIGEON_n_2_RSVD_MASK)
/*! @} */

/* The count of LCDIF_PIGEON_n_2 */
#define LCDIF_PIGEON_n_2_COUNT                   (12U)


/*!
 * @}
 */ /* end of group LCDIF_Register_Masks */


/* LCDIF - Peripheral instance base addresses */
/** Peripheral LCDIF base pointer */
#define LCDIF_BASE_PTR                           ((LCDIF_MemMapPtr)0x32E00000u)
/** Array initializer of LCDIF peripheral base pointers */
#define LCDIF_BASE_PTRS                          { LCDIF_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- LCDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup LCDIF_Register_Accessor_Macros LCDIF - Register accessor macros
 * @{
 */


/* LCDIF - Register instance definitions */
/* LCDIF */
#define LCDIF_CTRL                               LCDIF_CTRL_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_SET                           LCDIF_CTRL_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_CLR                           LCDIF_CTRL_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL_TOG                           LCDIF_CTRL_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1                              LCDIF_CTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_SET                          LCDIF_CTRL1_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_CLR                          LCDIF_CTRL1_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL1_TOG                          LCDIF_CTRL1_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2                              LCDIF_CTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_SET                          LCDIF_CTRL2_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_CLR                          LCDIF_CTRL2_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_CTRL2_TOG                          LCDIF_CTRL2_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_TRANSFER_COUNT                     LCDIF_TRANSFER_COUNT_REG(LCDIF_BASE_PTR)
#define LCDIF_CUR_BUF                            LCDIF_CUR_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_NEXT_BUF                           LCDIF_NEXT_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_TIMING                             LCDIF_TIMING_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0                            LCDIF_VDCTRL0_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_SET                        LCDIF_VDCTRL0_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_CLR                        LCDIF_VDCTRL0_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL0_TOG                        LCDIF_VDCTRL0_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL1                            LCDIF_VDCTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL2                            LCDIF_VDCTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL3                            LCDIF_VDCTRL3_REG(LCDIF_BASE_PTR)
#define LCDIF_VDCTRL4                            LCDIF_VDCTRL4_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL0                           LCDIF_DVICTRL0_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL1                           LCDIF_DVICTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL2                           LCDIF_DVICTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL3                           LCDIF_DVICTRL3_REG(LCDIF_BASE_PTR)
#define LCDIF_DVICTRL4                           LCDIF_DVICTRL4_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF0                         LCDIF_CSC_COEFF0_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF1                         LCDIF_CSC_COEFF1_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF2                         LCDIF_CSC_COEFF2_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF3                         LCDIF_CSC_COEFF3_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_COEFF4                         LCDIF_CSC_COEFF4_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_OFFSET                         LCDIF_CSC_OFFSET_REG(LCDIF_BASE_PTR)
#define LCDIF_CSC_LIMIT                          LCDIF_CSC_LIMIT_REG(LCDIF_BASE_PTR)
#define LCDIF_DATA                               LCDIF_DATA_REG(LCDIF_BASE_PTR)
#define LCDIF_BM_ERROR_STAT                      LCDIF_BM_ERROR_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_CRC_STAT                           LCDIF_CRC_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_STAT                               LCDIF_STAT_REG(LCDIF_BASE_PTR)
#define LCDIF_THRES                              LCDIF_THRES_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CTRL                            LCDIF_AS_CTRL_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_BUF                             LCDIF_AS_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_NEXT_BUF                        LCDIF_AS_NEXT_BUF_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CLRKEYLOW                       LCDIF_AS_CLRKEYLOW_REG(LCDIF_BASE_PTR)
#define LCDIF_AS_CLRKEYHIGH                      LCDIF_AS_CLRKEYHIGH_REG(LCDIF_BASE_PTR)
#define LCDIF_SYNC_DELAY                         LCDIF_SYNC_DELAY_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL0                        LCDIF_PIGEONCTRL0_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL0_SET                    LCDIF_PIGEONCTRL0_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL0_CLR                    LCDIF_PIGEONCTRL0_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL0_TOG                    LCDIF_PIGEONCTRL0_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL1                        LCDIF_PIGEONCTRL1_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL1_SET                    LCDIF_PIGEONCTRL1_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL1_CLR                    LCDIF_PIGEONCTRL1_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL1_TOG                    LCDIF_PIGEONCTRL1_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL2                        LCDIF_PIGEONCTRL2_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL2_SET                    LCDIF_PIGEONCTRL2_SET_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL2_CLR                    LCDIF_PIGEONCTRL2_CLR_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEONCTRL2_TOG                    LCDIF_PIGEONCTRL2_TOG_REG(LCDIF_BASE_PTR)
#define LCDIF_PIGEON_0_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,0)
#define LCDIF_PIGEON_0_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,0)
#define LCDIF_PIGEON_0_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,0)
#define LCDIF_PIGEON_1_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,1)
#define LCDIF_PIGEON_1_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,1)
#define LCDIF_PIGEON_1_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,1)
#define LCDIF_PIGEON_2_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,2)
#define LCDIF_PIGEON_2_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,2)
#define LCDIF_PIGEON_2_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,2)
#define LCDIF_PIGEON_3_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,3)
#define LCDIF_PIGEON_3_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,3)
#define LCDIF_PIGEON_3_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,3)
#define LCDIF_PIGEON_4_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,4)
#define LCDIF_PIGEON_4_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,4)
#define LCDIF_PIGEON_4_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,4)
#define LCDIF_PIGEON_5_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,5)
#define LCDIF_PIGEON_5_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,5)
#define LCDIF_PIGEON_5_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,5)
#define LCDIF_PIGEON_6_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,6)
#define LCDIF_PIGEON_6_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,6)
#define LCDIF_PIGEON_6_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,6)
#define LCDIF_PIGEON_7_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,7)
#define LCDIF_PIGEON_7_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,7)
#define LCDIF_PIGEON_7_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,7)
#define LCDIF_PIGEON_8_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,8)
#define LCDIF_PIGEON_8_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,8)
#define LCDIF_PIGEON_8_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,8)
#define LCDIF_PIGEON_9_0                         LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,9)
#define LCDIF_PIGEON_9_1                         LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,9)
#define LCDIF_PIGEON_9_2                         LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,9)
#define LCDIF_PIGEON_10_0                        LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,10)
#define LCDIF_PIGEON_10_1                        LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,10)
#define LCDIF_PIGEON_10_2                        LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,10)
#define LCDIF_PIGEON_11_0                        LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,11)
#define LCDIF_PIGEON_11_1                        LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,11)
#define LCDIF_PIGEON_11_2                        LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,11)

/* LCDIF - Register array accessors */
#define LCDIF_PIGEON_n_0(index)                  LCDIF_PIGEON_n_0_REG(LCDIF_BASE_PTR,index)
#define LCDIF_PIGEON_n_1(index)                  LCDIF_PIGEON_n_1_REG(LCDIF_BASE_PTR,index)
#define LCDIF_PIGEON_n_2(index)                  LCDIF_PIGEON_n_2_REG(LCDIF_BASE_PTR,index)

/*!
 * @}
 */ /* end of group LCDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group LCDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_CSI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Peripheral MIPI_CSI
 * @{
 */

/** MIPI_CSI - Peripheral register structure */
typedef struct MIPI_CSI_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t CSIS_COMMON_CTRL;                       /**< CSIS Common Control Register, offset: 0x4 */
  uint32_t CSIS_CLOCK_CTRL;                        /**< CSIS Clock Control Register, offset: 0x8 */
  uint8_t RESERVED_1[4];
  uint32_t INTERRUPT_MASK_0;                       /**< Interrupt mask register 0, offset: 0x10 */
  uint32_t INTERRUPT_SOURCE_0;                     /**< Interrupt source register 0, offset: 0x14 */
  uint32_t INTERRUPT_MASK_1;                       /**< Interrupt mask register 1, offset: 0x18 */
  uint32_t INTERRUPT_SOURCE_1;                     /**< Interrupt source register 1, offset: 0x1C */
  uint32_t DPHY_STATUS;                            /**< D-PHY status register, offset: 0x20 */
  uint32_t DPHY_COMMON_CTRL;                       /**< D-PHY common control register, offset: 0x24 */
  uint8_t RESERVED_2[8];
  uint32_t DPHY_MASTER_SLAVE_CTRL_LOW;             /**< D-PHY Master and Slave Control register Low, offset: 0x30 */
  uint32_t DPHY_MASTER_SLAVE_CTRL_HIGH;            /**< D-PHY Master and Slave Control register HIGH, offset: 0x34 */
  uint32_t DPHY_SLAVE_CTRL_LOW;                    /**< D-PHY Slave Control register Low, offset: 0x38 */
  uint32_t DPHY_SLAVE_CTRL_HIGH;                   /**< D-PHY Slave Control register HIGH, offset: 0x3C */
  struct {                                         /* offset: 0x40, array step: 0x10 */
    uint32_t ISP_CONFIG;                             /**< ISP Configuration Register, array offset: 0x40, array step: 0x10 */
    uint32_t ISP_RESOLUTION;                         /**< ISP Resolution Register, array offset: 0x44, array step: 0x10 */
    uint32_t ISP_SYNC;                               /**< ISP SYNC Register, array offset: 0x48, array step: 0x10 */
    uint8_t RESERVED_0[4];
  } ISP_CONFIGn[4];
  struct {                                         /* offset: 0x80, array step: 0x10 */
    uint32_t SHADOW_CONFIG;                          /**< Shadow Configuration Register, array offset: 0x80, array step: 0x10 */
    uint32_t SHADOW_RESOLUTION;                      /**< Shadow Resolution Register, array offset: 0x84, array step: 0x10 */
    uint32_t SHADOW_SYNC;                            /**< Shadow SYNC Register, array offset: 0x88, array step: 0x10 */
    uint8_t RESERVED_0[4];
  } SHADOW_CONFIGn[4];
  uint8_t RESERVED_3[64];
  uint32_t FRAME_COUNTER[4];                       /**< Frame Counter, array offset: 0x100, array step: 0x4 */
  uint32_t LINE_INTERRUPT_RATIO[4];                /**< Line Interrupt Ratio, array offset: 0x110, array step: 0x4 */
} volatile *MIPI_CSI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_CSI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Register_Accessor_Macros MIPI_CSI - Register accessor macros
 * @{
 */


/* MIPI_CSI - Register accessors */
#define MIPI_CSI_CSIS_COMMON_CTRL_REG(base)      ((base)->CSIS_COMMON_CTRL)
#define MIPI_CSI_CSIS_CLOCK_CTRL_REG(base)       ((base)->CSIS_CLOCK_CTRL)
#define MIPI_CSI_INTERRUPT_MASK_0_REG(base)      ((base)->INTERRUPT_MASK_0)
#define MIPI_CSI_INTERRUPT_SOURCE_0_REG(base)    ((base)->INTERRUPT_SOURCE_0)
#define MIPI_CSI_INTERRUPT_MASK_1_REG(base)      ((base)->INTERRUPT_MASK_1)
#define MIPI_CSI_INTERRUPT_SOURCE_1_REG(base)    ((base)->INTERRUPT_SOURCE_1)
#define MIPI_CSI_DPHY_STATUS_REG(base)           ((base)->DPHY_STATUS)
#define MIPI_CSI_DPHY_COMMON_CTRL_REG(base)      ((base)->DPHY_COMMON_CTRL)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG(base) ((base)->DPHY_MASTER_SLAVE_CTRL_LOW)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_REG(base) ((base)->DPHY_MASTER_SLAVE_CTRL_HIGH)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_REG(base)   ((base)->DPHY_SLAVE_CTRL_LOW)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_REG(base)  ((base)->DPHY_SLAVE_CTRL_HIGH)
#define MIPI_CSI_ISP_CONFIG_REG(base,index)      ((base)->ISP_CONFIGn[index].ISP_CONFIG)
#define MIPI_CSI_ISP_RESOLUTION_REG(base,index)  ((base)->ISP_CONFIGn[index].ISP_RESOLUTION)
#define MIPI_CSI_ISP_SYNC_REG(base,index)        ((base)->ISP_CONFIGn[index].ISP_SYNC)
#define MIPI_CSI_SHADOW_CONFIG_REG(base,index)   ((base)->SHADOW_CONFIGn[index].SHADOW_CONFIG)
#define MIPI_CSI_SHADOW_RESOLUTION_REG(base,index) ((base)->SHADOW_CONFIGn[index].SHADOW_RESOLUTION)
#define MIPI_CSI_SHADOW_SYNC_REG(base,index)     ((base)->SHADOW_CONFIGn[index].SHADOW_SYNC)
#define MIPI_CSI_FRAME_COUNTER_REG(base,index)   ((base)->FRAME_COUNTER[index])
#define MIPI_CSI_LINE_INTERRUPT_RATIO_REG(base,index) ((base)->LINE_INTERRUPT_RATIO[index])

/*!
 * @}
 */ /* end of group MIPI_CSI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_CSI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Register_Masks MIPI_CSI Register Masks
 * @{
 */

/*! @name CSIS_COMMON_CTRL - CSIS Common Control Register */
/*! @{ */
#define MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_MASK    (0x1U)
#define MIPI_CSI_CSIS_COMMON_CTRL_CSI_EN_SHIFT   (0U)
#define MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_MASK  (0x2U)
#define MIPI_CSI_CSIS_COMMON_CTRL_SW_RESET_SHIFT (1U)
#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_MASK (0x300U)
#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_SHIFT (8U)
/*! LANE_NUMBER
 *  0b00..1 data lane
 *  0b01..2 data lane
 *  0b10..3 data lane
 *  0b11..4 data lane
 */
#define MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_LANE_NUMBER_MASK)
#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_MASK (0xF0000U)
#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_SHIFT (16U)
#define MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_SHIFT)) & MIPI_CSI_CSIS_COMMON_CTRL_UPDATE_SHADOW_MASK)
/*! @} */

/*! @name CSIS_CLOCK_CTRL - CSIS Clock Control Register */
/*! @{ */
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_MASK (0xF0U)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_SHIFT (4U)
/*! CLKGATE_EN
 *  0b0000..Pixel clock is always alive
 *  0b0001..Pixel clock is alive during the interval of frame [7] CH3 [6] CH2 [5] CH1 [4] CH0 (Refer 2.9)
 */
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_SHIFT)) & MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_EN_MASK)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_MASK (0xFFFF0000U)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_SHIFT (16U)
#define MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_SHIFT)) & MIPI_CSI_CSIS_CLOCK_CTRL_CLKGATE_TRAIL_MASK)
/*! @} */

/*! @name INTERRUPT_MASK_0 - Interrupt mask register 0 */
/*! @{ */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_MASK (0x1U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ID_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_MASK (0x2U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_CRC_SHIFT (1U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_MASK (0x4U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_ECC_SHIFT (2U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_MASK (0x8U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_WRONG_CFG_SHIFT (3U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_MASK (0x10U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_OVER_SHIFT (4U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_MASK (0xF00U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_SHIFT (8U)
/*! MSK_ERR_LOST_FE - Lost of Frame End packet, [CH3,CH2,CH1,CH0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FE_MASK)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_MASK (0xF000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_SHIFT (12U)
/*! MSK_ERR_LOST_FS - Lost of Frame Start packet, [CH3,CH2,CH1,CH0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_LOST_FS_MASK)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_MASK (0xF0000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_SHIFT (16U)
/*! MSK_ERR_SOT_HS - Start of transmission error [Lane3, Lane2, Lane1, Lane0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_ERR_SOT_HS_MASK)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_MASK (0xF00000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_SHIFT (20U)
/*! MSK_FRAMEEND - FE packet is received, [CH3,CH2,CH1,CH0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMEEND_MASK)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_MASK (0xF000000U)
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_SHIFT (24U)
/*! MSK_FRAMESTART - FS packet is received, [CH3,CH2,CH1,CH0]
 *  0b0000..Disable (masked)
 *  0b0001..Enable (unmasked)
 */
#define MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_0_MSK_FRAMESTART_MASK)
/*! @} */

/*! @name INTERRUPT_SOURCE_0 - Interrupt source register 0 */
/*! @{ */
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_MASK  (0x1U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ID_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_MASK (0x2U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_CRC_SHIFT (1U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_MASK (0x4U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_ECC_SHIFT (2U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_MASK (0x8U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_WRONG_CFG_SHIFT (3U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_MASK (0x10U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_OVER_SHIFT (4U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_MASK (0xF00U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_SHIFT (8U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FE_MASK)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_MASK (0xF000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_SHIFT (12U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_LOST_FS_MASK)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_MASK (0xF0000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_SHIFT (16U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_ERR_SOT_HS_MASK)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_MASK (0xF00000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_SHIFT (20U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_END_MASK)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_MASK (0xF000000U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_SHIFT (24U)
#define MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_0_FRAME_START_MASK)
/*! @} */

/*! @name INTERRUPT_MASK_1 - Interrupt mask register 1 */
/*! @{ */
#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_MASK (0xFU)
#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_SHIFT)) & MIPI_CSI_INTERRUPT_MASK_1_MSK_LINE_END_MASK)
/*! @} */

/*! @name INTERRUPT_SOURCE_1 - Interrupt source register 1 */
/*! @{ */
#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_MASK (0xFU)
#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_SHIFT (0U)
#define MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_SHIFT)) & MIPI_CSI_INTERRUPT_SOURCE_1_LINE_END_MASK)
/*! @} */

/*! @name DPHY_STATUS - D-PHY status register */
/*! @{ */
#define MIPI_CSI_DPHY_STATUS_STOPSTATECLK_MASK   (0x1U)
#define MIPI_CSI_DPHY_STATUS_STOPSTATECLK_SHIFT  (0U)
#define MIPI_CSI_DPHY_STATUS_ULPSCLK_MASK        (0x2U)
#define MIPI_CSI_DPHY_STATUS_ULPSCLK_SHIFT       (1U)
#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_MASK   (0xF0U)
#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_SHIFT  (4U)
/*! STOPSTATEDAT - Data lane [3:0] is in Stop State
 *  0b0000..Not Stop state
 *  0b0001..Stop state
 */
#define MIPI_CSI_DPHY_STATUS_STOPSTATEDAT(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_SHIFT)) & MIPI_CSI_DPHY_STATUS_STOPSTATEDAT_MASK)
#define MIPI_CSI_DPHY_STATUS_ULPSDAT_MASK        (0xF00U)
#define MIPI_CSI_DPHY_STATUS_ULPSDAT_SHIFT       (8U)
/*! ULPSDAT - Data lane [3:0] is in ULPS
 *  0b0000..Not ULPS
 *  0b0001..ULPS
 */
#define MIPI_CSI_DPHY_STATUS_ULPSDAT(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_STATUS_ULPSDAT_SHIFT)) & MIPI_CSI_DPHY_STATUS_ULPSDAT_MASK)
/*! @} */

/*! @name DPHY_COMMON_CTRL - D-PHY common control register */
/*! @{ */
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_MASK (0x1U)
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_CLK_SHIFT (0U)
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_MASK (0x1EU)
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_SHIFT (1U)
/*! ENABLE_DAT - D-PHY enable
 *  0b0000..Disable
 *  0b0001..Enable
 */
#define MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_ENABLE_DAT_MASK)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_MASK (0x20U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_DAT_SHIFT (5U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_MASK (0x40U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_DPDN_SWAP_CLK_SHIFT (6U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_MASK (0xC00000U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_SHIFT (22U)
#define MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_S_CLKSETTLECTL_MASK)
#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_MASK  (0xFF000000U)
#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_SHIFT (24U)
#define MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_SHIFT)) & MIPI_CSI_DPHY_COMMON_CTRL_HSSETTLE_MASK)
/*! @} */

/*! @name DPHY_MASTER_SLAVE_CTRL_LOW - D-PHY Master and Slave Control register Low */
/*! @{ */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_MASK (0xFFFFFFFFU)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_SHIFT (0U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_B_DPHYCTRL_MASK)
/*! @} */

/*! @name DPHY_MASTER_SLAVE_CTRL_HIGH - D-PHY Master and Slave Control register HIGH */
/*! @{ */
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_B_DPHYCTRL_MASK (0xFFFFFFFFU)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_B_DPHYCTRL_SHIFT (0U)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_B_DPHYCTRL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_B_DPHYCTRL_SHIFT)) & MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_B_DPHYCTRL_MASK)
/*! @} */

/*! @name DPHY_SLAVE_CTRL_LOW - D-PHY Slave Control register Low */
/*! @{ */
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_S_DPHYCTRL_MASK (0xFFFFFFFFU)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_S_DPHYCTRL_SHIFT (0U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW_S_DPHYCTRL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_LOW_S_DPHYCTRL_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_LOW_S_DPHYCTRL_MASK)
/*! @} */

/*! @name DPHY_SLAVE_CTRL_HIGH - D-PHY Slave Control register HIGH */
/*! @{ */
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_S_DPHYCTRL_MASK (0xFFFFFFFFU)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_S_DPHYCTRL_SHIFT (0U)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_S_DPHYCTRL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_S_DPHYCTRL_SHIFT)) & MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_S_DPHYCTRL_MASK)
/*! @} */

/*! @name ISP_CONFIG - ISP Configuration Register */
/*! @{ */
#define MIPI_CSI_ISP_CONFIG_DATAFORMAT_MASK      (0xFCU)
#define MIPI_CSI_ISP_CONFIG_DATAFORMAT_SHIFT     (2U)
#define MIPI_CSI_ISP_CONFIG_DATAFORMAT(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_DATAFORMAT_SHIFT)) & MIPI_CSI_ISP_CONFIG_DATAFORMAT_MASK)
#define MIPI_CSI_ISP_CONFIG_RGB_SWAP_MASK        (0x400U)
#define MIPI_CSI_ISP_CONFIG_RGB_SWAP_SHIFT       (10U)
#define MIPI_CSI_ISP_CONFIG_PARALLEL_MASK        (0x800U)
#define MIPI_CSI_ISP_CONFIG_PARALLEL_SHIFT       (11U)
#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE_MASK      (0x3000U)
#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE_SHIFT     (12U)
#define MIPI_CSI_ISP_CONFIG_PIXEL_MODE(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_CONFIG_PIXEL_MODE_SHIFT)) & MIPI_CSI_ISP_CONFIG_PIXEL_MODE_MASK)
/*! @} */

/* The count of MIPI_CSI_ISP_CONFIG */
#define MIPI_CSI_ISP_CONFIG_COUNT                (4U)

/*! @name ISP_RESOLUTION - ISP Resolution Register */
/*! @{ */
#define MIPI_CSI_ISP_RESOLUTION_HRESOL_MASK      (0xFFFFU)
#define MIPI_CSI_ISP_RESOLUTION_HRESOL_SHIFT     (0U)
#define MIPI_CSI_ISP_RESOLUTION_HRESOL(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_RESOLUTION_HRESOL_SHIFT)) & MIPI_CSI_ISP_RESOLUTION_HRESOL_MASK)
#define MIPI_CSI_ISP_RESOLUTION_VRESOL_MASK      (0xFFFF0000U)
#define MIPI_CSI_ISP_RESOLUTION_VRESOL_SHIFT     (16U)
#define MIPI_CSI_ISP_RESOLUTION_VRESOL(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_RESOLUTION_VRESOL_SHIFT)) & MIPI_CSI_ISP_RESOLUTION_VRESOL_MASK)
/*! @} */

/* The count of MIPI_CSI_ISP_RESOLUTION */
#define MIPI_CSI_ISP_RESOLUTION_COUNT            (4U)

/*! @name ISP_SYNC - ISP SYNC Register */
/*! @{ */
#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV_MASK       (0xFC0000U)
#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV_SHIFT      (18U)
#define MIPI_CSI_ISP_SYNC_HSYNC_LINTV(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_ISP_SYNC_HSYNC_LINTV_SHIFT)) & MIPI_CSI_ISP_SYNC_HSYNC_LINTV_MASK)
/*! @} */

/* The count of MIPI_CSI_ISP_SYNC */
#define MIPI_CSI_ISP_SYNC_COUNT                  (4U)

/*! @name SHADOW_CONFIG - Shadow Configuration Register */
/*! @{ */
#define MIPI_CSI_SHADOW_CONFIG_VIRTUAL_CHANNEL_MASK (0x3U)
#define MIPI_CSI_SHADOW_CONFIG_VIRTUAL_CHANNEL_SHIFT (0U)
#define MIPI_CSI_SHADOW_CONFIG_VIRTUAL_CHANNEL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_VIRTUAL_CHANNEL_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_VIRTUAL_CHANNEL_MASK)
#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_MASK   (0xFCU)
#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_SHIFT  (2U)
#define MIPI_CSI_SHADOW_CONFIG_DATAFORMAT(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_DATAFORMAT_MASK)
#define MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_MASK (0x400U)
#define MIPI_CSI_SHADOW_CONFIG_RGB_SWAP_SDW_SHIFT (10U)
#define MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_MASK (0x800U)
#define MIPI_CSI_SHADOW_CONFIG_PARALLEL_SDW_SHIFT (11U)
#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_MASK   (0x3000U)
#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_SHIFT  (12U)
#define MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_SHIFT)) & MIPI_CSI_SHADOW_CONFIG_PIXEL_MODE_MASK)
/*! @} */

/* The count of MIPI_CSI_SHADOW_CONFIG */
#define MIPI_CSI_SHADOW_CONFIG_COUNT             (4U)

/*! @name SHADOW_RESOLUTION - Shadow Resolution Register */
/*! @{ */
#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_MASK (0xFFFFU)
#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_SHIFT (0U)
#define MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_SHIFT)) & MIPI_CSI_SHADOW_RESOLUTION_HRESOL_SDW_MASK)
#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_MASK (0xFFFF0000U)
#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_SHIFT (16U)
#define MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_SHIFT)) & MIPI_CSI_SHADOW_RESOLUTION_VRESOL_SDW_MASK)
/*! @} */

/* The count of MIPI_CSI_SHADOW_RESOLUTION */
#define MIPI_CSI_SHADOW_RESOLUTION_COUNT         (4U)

/*! @name SHADOW_SYNC - Shadow SYNC Register */
/*! @{ */
#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_MASK (0xFC0000U)
#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_SHIFT (18U)
#define MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_SHIFT)) & MIPI_CSI_SHADOW_SYNC_HSYNC_LINTV_SDW_MASK)
/*! @} */

/* The count of MIPI_CSI_SHADOW_SYNC */
#define MIPI_CSI_SHADOW_SYNC_COUNT               (4U)

/*! @name FRAME_COUNTER - Frame Counter */
/*! @{ */
#define MIPI_CSI_FRAME_COUNTER_FRM_CNT_MASK      (0xFFFFFFFFU)
#define MIPI_CSI_FRAME_COUNTER_FRM_CNT_SHIFT     (0U)
#define MIPI_CSI_FRAME_COUNTER_FRM_CNT(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_FRAME_COUNTER_FRM_CNT_SHIFT)) & MIPI_CSI_FRAME_COUNTER_FRM_CNT_MASK)
/*! @} */

/* The count of MIPI_CSI_FRAME_COUNTER */
#define MIPI_CSI_FRAME_COUNTER_COUNT             (4U)

/*! @name LINE_INTERRUPT_RATIO - Line Interrupt Ratio */
/*! @{ */
#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_MASK (0xFFFFFFFFU)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_SHIFT (0U)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR(x) (((uint32_t)(((uint32_t)(x)) << MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_SHIFT)) & MIPI_CSI_LINE_INTERRUPT_RATIO_LINE_INTR_MASK)
/*! @} */

/* The count of MIPI_CSI_LINE_INTERRUPT_RATIO */
#define MIPI_CSI_LINE_INTERRUPT_RATIO_COUNT      (4U)


/*!
 * @}
 */ /* end of group MIPI_CSI_Register_Masks */


/* MIPI_CSI - Peripheral instance base addresses */
/** Peripheral MIPI_CSI base pointer */
#define MIPI_CSI_BASE_PTR                        ((MIPI_CSI_MemMapPtr)0x32E30000u)
/** Array initializer of MIPI_CSI peripheral base pointers */
#define MIPI_CSI_BASE_PTRS                       { MIPI_CSI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_CSI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_CSI_Register_Accessor_Macros MIPI_CSI - Register accessor macros
 * @{
 */


/* MIPI_CSI - Register instance definitions */
/* MIPI_CSI */
#define MIPI_CSI_CSIS_COMMON_CTRL                MIPI_CSI_CSIS_COMMON_CTRL_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_CSIS_CLOCK_CTRL                 MIPI_CSI_CSIS_CLOCK_CTRL_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_INTERRUPT_MASK_0                MIPI_CSI_INTERRUPT_MASK_0_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_INTERRUPT_SOURCE_0              MIPI_CSI_INTERRUPT_SOURCE_0_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_INTERRUPT_MASK_1                MIPI_CSI_INTERRUPT_MASK_1_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_INTERRUPT_SOURCE_1              MIPI_CSI_INTERRUPT_SOURCE_1_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_STATUS                     MIPI_CSI_DPHY_STATUS_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_COMMON_CTRL                MIPI_CSI_DPHY_COMMON_CTRL_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW      MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_LOW_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH     MIPI_CSI_DPHY_MASTER_SLAVE_CTRL_HIGH_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_SLAVE_CTRL_LOW             MIPI_CSI_DPHY_SLAVE_CTRL_LOW_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_DPHY_SLAVE_CTRL_HIGH            MIPI_CSI_DPHY_SLAVE_CTRL_HIGH_REG(MIPI_CSI_BASE_PTR)
#define MIPI_CSI_ISP_CONFIG_CH0                  MIPI_CSI_ISP_CONFIG_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_ISP_RESOLUTION_CH0              MIPI_CSI_ISP_RESOLUTION_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_ISP_SYNC_CH0                    MIPI_CSI_ISP_SYNC_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_ISP_CONFIG_CH1                  MIPI_CSI_ISP_CONFIG_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_ISP_RESOLUTION_CH1              MIPI_CSI_ISP_RESOLUTION_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_ISP_SYNC_CH1                    MIPI_CSI_ISP_SYNC_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_ISP_CONFIG_CH2                  MIPI_CSI_ISP_CONFIG_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_ISP_RESOLUTION_CH2              MIPI_CSI_ISP_RESOLUTION_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_ISP_SYNC_CH2                    MIPI_CSI_ISP_SYNC_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_ISP_CONFIG_CH3                  MIPI_CSI_ISP_CONFIG_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_ISP_RESOLUTION_CH3              MIPI_CSI_ISP_RESOLUTION_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_ISP_SYNC_CH3                    MIPI_CSI_ISP_SYNC_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_SHADOW_CONFIG_CH0               MIPI_CSI_SHADOW_CONFIG_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_SHADOW_RESOLUTION_CH0           MIPI_CSI_SHADOW_RESOLUTION_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_SHADOW_SYNC_CH0                 MIPI_CSI_SHADOW_SYNC_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_SHADOW_CONFIG_CH1               MIPI_CSI_SHADOW_CONFIG_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_SHADOW_RESOLUTION_CH1           MIPI_CSI_SHADOW_RESOLUTION_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_SHADOW_SYNC_CH1                 MIPI_CSI_SHADOW_SYNC_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_SHADOW_CONFIG_CH2               MIPI_CSI_SHADOW_CONFIG_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_SHADOW_RESOLUTION_CH2           MIPI_CSI_SHADOW_RESOLUTION_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_SHADOW_SYNC_CH2                 MIPI_CSI_SHADOW_SYNC_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_SHADOW_CONFIG_CH3               MIPI_CSI_SHADOW_CONFIG_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_SHADOW_RESOLUTION_CH3           MIPI_CSI_SHADOW_RESOLUTION_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_SHADOW_SYNC_CH3                 MIPI_CSI_SHADOW_SYNC_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_FRAME_COUNTER_CH0               MIPI_CSI_FRAME_COUNTER_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_FRAME_COUNTER_CH1               MIPI_CSI_FRAME_COUNTER_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_FRAME_COUNTER_CH2               MIPI_CSI_FRAME_COUNTER_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_FRAME_COUNTER_CH3               MIPI_CSI_FRAME_COUNTER_REG(MIPI_CSI_BASE_PTR,3)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_CH0        MIPI_CSI_LINE_INTERRUPT_RATIO_REG(MIPI_CSI_BASE_PTR,0)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_CH1        MIPI_CSI_LINE_INTERRUPT_RATIO_REG(MIPI_CSI_BASE_PTR,1)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_CH2        MIPI_CSI_LINE_INTERRUPT_RATIO_REG(MIPI_CSI_BASE_PTR,2)
#define MIPI_CSI_LINE_INTERRUPT_RATIO_CH3        MIPI_CSI_LINE_INTERRUPT_RATIO_REG(MIPI_CSI_BASE_PTR,3)

/* MIPI_CSI - Register array accessors */
#define MIPI_CSI_ISP_CONFIG(index)               MIPI_CSI_ISP_CONFIG_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_ISP_RESOLUTION(index)           MIPI_CSI_ISP_RESOLUTION_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_ISP_SYNC(index)                 MIPI_CSI_ISP_SYNC_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_SHADOW_CONFIG(index)            MIPI_CSI_SHADOW_CONFIG_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_SHADOW_RESOLUTION(index)        MIPI_CSI_SHADOW_RESOLUTION_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_SHADOW_SYNC(index)              MIPI_CSI_SHADOW_SYNC_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_FRAME_COUNTER(index)            MIPI_CSI_FRAME_COUNTER_REG(MIPI_CSI_BASE_PTR,index)
#define MIPI_CSI_LINE_INTERRUPT_RATIO(index)     MIPI_CSI_LINE_INTERRUPT_RATIO_REG(MIPI_CSI_BASE_PTR,index)

/*!
 * @}
 */ /* end of group MIPI_CSI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_CSI_Peripheral */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_Peripheral MIPI_DSI
 * @{
 */

/** MIPI_DSI - Peripheral register structure */
typedef struct MIPI_DSI_MemMap {
  uint32_t DSI_VERSION;                            /**< Specifies the DSI version register., offset: 0x0 */
  uint32_t DSI_STATUS;                             /**< Specifies the status register., offset: 0x4 */
  uint32_t DSI_RGB_STATUS;                         /**< Specifies the RGB FSM status register., offset: 0x8 */
  uint32_t DSI_SWRST;                              /**< Specifies the software reset register., offset: 0xC */
  uint32_t DSI_CLKCTRL;                            /**< Specifies the clock control register., offset: 0x10 */
  uint32_t DSI_TIMEOUT;                            /**< Specifies the time out register., offset: 0x14 */
  uint32_t DSI_CONFIG;                             /**< Specifies the configuration register., offset: 0x18 */
  uint32_t DSI_ESCMODE;                            /**< Specifies the escape mode register., offset: 0x1C */
  uint32_t DSI_MDRESOL;                            /**< Specifies the main display image resolution register., offset: 0x20 */
  uint32_t DSI_MVPORCH;                            /**< Specifies the main display Vporch register., offset: 0x24 */
  uint32_t DSI_MHPORCH;                            /**< Specifies the main display Hporch register., offset: 0x28 */
  uint32_t DSI_MSYNC;                              /**< Specifies the main display Sync Area register., offset: 0x2C */
  uint32_t DSI_SDRESOL;                            /**< Specifies the sub display image resolution register., offset: 0x30 */
  uint32_t DSI_INTSRC;                             /**< Specifies the interrupt source register., offset: 0x34 */
  uint32_t DSI_INTMSK;                             /**< Specifies the interrupt mask register., offset: 0x38 */
  uint32_t DSI_PKTHDR;                             /**< Specifies the packet header FIFO register., offset: 0x3C */
  uint32_t DSI_PAYLOAD;                            /**< Specifies the payload FIFO register., offset: 0x40 */
  uint32_t DSI_RXFIFO;                             /**< Specifies the read FIFO register., offset: 0x44 */
  uint32_t DSI_FIFOTHLD;                           /**< Specifies the FIFO threshold level register., offset: 0x48 */
  uint32_t DSI_FIFOCTRL;                           /**< Specifies the FIFO status and control register., offset: 0x4C */
  uint32_t DSI_MEMACCHR;                           /**< Specifies the FIFO memory AC characteristic register., offset: 0x50 */
  uint8_t RESERVED_0[36];
  uint32_t DSI_MULTI_PKT;                          /**< Specifies the Multi Packet, Packet Go register., offset: 0x78 */
  uint8_t RESERVED_1[20];
  uint32_t DSI_PLLCTRL_1G;                         /**< Specifies the 1Gbps D-PHY PLL control register., offset: 0x90 */
  uint32_t DSI_PLLCTRL;                            /**< Specifies the PLL control register., offset: 0x94 */
  uint32_t DSI_PLLCTRL1;                           /**< Specifies the PLL control register 1., offset: 0x98 */
  uint32_t DSI_PLLCTRL2;                           /**< Specifies the PLL control register 2., offset: 0x9C */
  uint32_t DSI_PLLTMR;                             /**< Specifies the PLL timer register., offset: 0xA0 */
  uint32_t DSI_PHYCTRL_B1;                         /**< Specifies the D-PHY control register 1., offset: 0xA4 */
  uint32_t DSI_PHYCTRL_B2;                         /**< Specifies the D-PHY control register 2., offset: 0xA8 */
  uint32_t DSI_PHYCTRL_M1;                         /**< Specifies the D-PHY control register 1., offset: 0xAC */
  uint32_t DSI_PHYCTRL_M2;                         /**< Specifies the D-PHY control register 2., offset: 0xB0 */
  uint32_t DSI_PHYTIMING;                          /**< Specifies the D-PHY timing register., offset: 0xB4 */
  uint32_t DSI_PHYTIMING1;                         /**< Specifies the D-PHY timing register 1., offset: 0xB8 */
  uint32_t DSI_PHYTIMING2;                         /**< Specifies the D-PHY timing register 2., offset: 0xBC */
} volatile *MIPI_DSI_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MIPI_DSI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_Register_Accessor_Macros MIPI_DSI - Register accessor macros
 * @{
 */


/* MIPI_DSI - Register accessors */
#define MIPI_DSI_DSI_VERSION_REG(base)           ((base)->DSI_VERSION)
#define MIPI_DSI_DSI_STATUS_REG(base)            ((base)->DSI_STATUS)
#define MIPI_DSI_DSI_RGB_STATUS_REG(base)        ((base)->DSI_RGB_STATUS)
#define MIPI_DSI_DSI_SWRST_REG(base)             ((base)->DSI_SWRST)
#define MIPI_DSI_DSI_CLKCTRL_REG(base)           ((base)->DSI_CLKCTRL)
#define MIPI_DSI_DSI_TIMEOUT_REG(base)           ((base)->DSI_TIMEOUT)
#define MIPI_DSI_DSI_CONFIG_REG(base)            ((base)->DSI_CONFIG)
#define MIPI_DSI_DSI_ESCMODE_REG(base)           ((base)->DSI_ESCMODE)
#define MIPI_DSI_DSI_MDRESOL_REG(base)           ((base)->DSI_MDRESOL)
#define MIPI_DSI_DSI_MVPORCH_REG(base)           ((base)->DSI_MVPORCH)
#define MIPI_DSI_DSI_MHPORCH_REG(base)           ((base)->DSI_MHPORCH)
#define MIPI_DSI_DSI_MSYNC_REG(base)             ((base)->DSI_MSYNC)
#define MIPI_DSI_DSI_SDRESOL_REG(base)           ((base)->DSI_SDRESOL)
#define MIPI_DSI_DSI_INTSRC_REG(base)            ((base)->DSI_INTSRC)
#define MIPI_DSI_DSI_INTMSK_REG(base)            ((base)->DSI_INTMSK)
#define MIPI_DSI_DSI_PKTHDR_REG(base)            ((base)->DSI_PKTHDR)
#define MIPI_DSI_DSI_PAYLOAD_REG(base)           ((base)->DSI_PAYLOAD)
#define MIPI_DSI_DSI_RXFIFO_REG(base)            ((base)->DSI_RXFIFO)
#define MIPI_DSI_DSI_FIFOTHLD_REG(base)          ((base)->DSI_FIFOTHLD)
#define MIPI_DSI_DSI_FIFOCTRL_REG(base)          ((base)->DSI_FIFOCTRL)
#define MIPI_DSI_DSI_MEMACCHR_REG(base)          ((base)->DSI_MEMACCHR)
#define MIPI_DSI_DSI_MULTI_PKT_REG(base)         ((base)->DSI_MULTI_PKT)
#define MIPI_DSI_DSI_PLLCTRL_1G_REG(base)        ((base)->DSI_PLLCTRL_1G)
#define MIPI_DSI_DSI_PLLCTRL_REG(base)           ((base)->DSI_PLLCTRL)
#define MIPI_DSI_DSI_PLLCTRL1_REG(base)          ((base)->DSI_PLLCTRL1)
#define MIPI_DSI_DSI_PLLCTRL2_REG(base)          ((base)->DSI_PLLCTRL2)
#define MIPI_DSI_DSI_PLLTMR_REG(base)            ((base)->DSI_PLLTMR)
#define MIPI_DSI_DSI_PHYCTRL_B1_REG(base)        ((base)->DSI_PHYCTRL_B1)
#define MIPI_DSI_DSI_PHYCTRL_B2_REG(base)        ((base)->DSI_PHYCTRL_B2)
#define MIPI_DSI_DSI_PHYCTRL_M1_REG(base)        ((base)->DSI_PHYCTRL_M1)
#define MIPI_DSI_DSI_PHYCTRL_M2_REG(base)        ((base)->DSI_PHYCTRL_M2)
#define MIPI_DSI_DSI_PHYTIMING_REG(base)         ((base)->DSI_PHYTIMING)
#define MIPI_DSI_DSI_PHYTIMING1_REG(base)        ((base)->DSI_PHYTIMING1)
#define MIPI_DSI_DSI_PHYTIMING2_REG(base)        ((base)->DSI_PHYTIMING2)

/*!
 * @}
 */ /* end of group MIPI_DSI_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MIPI_DSI Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_Register_Masks MIPI_DSI Register Masks
 * @{
 */

/*! @name DSI_VERSION - Specifies the DSI version register. */
/*! @{ */
#define MIPI_DSI_DSI_VERSION_Version_MASK        (0xFFFFFFFFU)
#define MIPI_DSI_DSI_VERSION_Version_SHIFT       (0U)
#define MIPI_DSI_DSI_VERSION_Version(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_VERSION_Version_SHIFT)) & MIPI_DSI_DSI_VERSION_Version_MASK)
/*! @} */

/*! @name DSI_STATUS - Specifies the status register. */
/*! @{ */
#define MIPI_DSI_DSI_STATUS_StopstateDat_MASK    (0xFU)
#define MIPI_DSI_DSI_STATUS_StopstateDat_SHIFT   (0U)
#define MIPI_DSI_DSI_STATUS_StopstateDat(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_STATUS_StopstateDat_SHIFT)) & MIPI_DSI_DSI_STATUS_StopstateDat_MASK)
#define MIPI_DSI_DSI_STATUS_UlpsDat_MASK         (0xF0U)
#define MIPI_DSI_DSI_STATUS_UlpsDat_SHIFT        (4U)
#define MIPI_DSI_DSI_STATUS_UlpsDat(x)           (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_STATUS_UlpsDat_SHIFT)) & MIPI_DSI_DSI_STATUS_UlpsDat_MASK)
#define MIPI_DSI_DSI_STATUS_StopstateClk_MASK    (0x100U)
#define MIPI_DSI_DSI_STATUS_StopstateClk_SHIFT   (8U)
#define MIPI_DSI_DSI_STATUS_UlpsClk_MASK         (0x200U)
#define MIPI_DSI_DSI_STATUS_UlpsClk_SHIFT        (9U)
#define MIPI_DSI_DSI_STATUS_TxReadyHsClk_MASK    (0x400U)
#define MIPI_DSI_DSI_STATUS_TxReadyHsClk_SHIFT   (10U)
#define MIPI_DSI_DSI_STATUS_Direction_MASK       (0x10000U)
#define MIPI_DSI_DSI_STATUS_Direction_SHIFT      (16U)
#define MIPI_DSI_DSI_STATUS_SwRstRls_MASK        (0x100000U)
#define MIPI_DSI_DSI_STATUS_SwRstRls_SHIFT       (20U)
#define MIPI_DSI_DSI_STATUS_PllStable_MASK       (0x80000000U)
#define MIPI_DSI_DSI_STATUS_PllStable_SHIFT      (31U)
/*! @} */

/*! @name DSI_RGB_STATUS - Specifies the RGB FSM status register. */
/*! @{ */
#define MIPI_DSI_DSI_RGB_STATUS_RGBstate_MASK    (0x1FFFU)
#define MIPI_DSI_DSI_RGB_STATUS_RGBstate_SHIFT   (0U)
#define MIPI_DSI_DSI_RGB_STATUS_RGBstate(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_RGB_STATUS_RGBstate_SHIFT)) & MIPI_DSI_DSI_RGB_STATUS_RGBstate_MASK)
#define MIPI_DSI_DSI_RGB_STATUS_CmdMode_InSel_MASK (0x80000000U)
#define MIPI_DSI_DSI_RGB_STATUS_CmdMode_InSel_SHIFT (31U)
/*! @} */

/*! @name DSI_SWRST - Specifies the software reset register. */
/*! @{ */
#define MIPI_DSI_DSI_SWRST_SwRst_MASK            (0x1U)
#define MIPI_DSI_DSI_SWRST_SwRst_SHIFT           (0U)
#define MIPI_DSI_DSI_SWRST_FuncRst_MASK          (0x10000U)
#define MIPI_DSI_DSI_SWRST_FuncRst_SHIFT         (16U)
/*! @} */

/*! @name DSI_CLKCTRL - Specifies the clock control register. */
/*! @{ */
#define MIPI_DSI_DSI_CLKCTRL_EscPrescaler_MASK   (0xFFFFU)
#define MIPI_DSI_DSI_CLKCTRL_EscPrescaler_SHIFT  (0U)
#define MIPI_DSI_DSI_CLKCTRL_EscPrescaler(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CLKCTRL_EscPrescaler_SHIFT)) & MIPI_DSI_DSI_CLKCTRL_EscPrescaler_MASK)
#define MIPI_DSI_DSI_CLKCTRL_LaneEscClkEn_MASK   (0xF80000U)
#define MIPI_DSI_DSI_CLKCTRL_LaneEscClkEn_SHIFT  (19U)
#define MIPI_DSI_DSI_CLKCTRL_LaneEscClkEn(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CLKCTRL_LaneEscClkEn_SHIFT)) & MIPI_DSI_DSI_CLKCTRL_LaneEscClkEn_MASK)
#define MIPI_DSI_DSI_CLKCTRL_ByteClkEn_MASK      (0x1000000U)
#define MIPI_DSI_DSI_CLKCTRL_ByteClkEn_SHIFT     (24U)
#define MIPI_DSI_DSI_CLKCTRL_ByteClkSrc_MASK     (0x6000000U)
#define MIPI_DSI_DSI_CLKCTRL_ByteClkSrc_SHIFT    (25U)
#define MIPI_DSI_DSI_CLKCTRL_ByteClkSrc(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CLKCTRL_ByteClkSrc_SHIFT)) & MIPI_DSI_DSI_CLKCTRL_ByteClkSrc_MASK)
#define MIPI_DSI_DSI_CLKCTRL_PLLBypass_MASK      (0x8000000U)
#define MIPI_DSI_DSI_CLKCTRL_PLLBypass_SHIFT     (27U)
#define MIPI_DSI_DSI_CLKCTRL_EscClkEn_MASK       (0x10000000U)
#define MIPI_DSI_DSI_CLKCTRL_EscClkEn_SHIFT      (28U)
#define MIPI_DSI_DSI_CLKCTRL_Dphy_sel_MASK       (0x20000000U)
#define MIPI_DSI_DSI_CLKCTRL_Dphy_sel_SHIFT      (29U)
#define MIPI_DSI_DSI_CLKCTRL_TxRequestHsClk_MASK (0x80000000U)
#define MIPI_DSI_DSI_CLKCTRL_TxRequestHsClk_SHIFT (31U)
/*! @} */

/*! @name DSI_TIMEOUT - Specifies the time out register. */
/*! @{ */
#define MIPI_DSI_DSI_TIMEOUT_LpdrTout_MASK       (0xFFFFU)
#define MIPI_DSI_DSI_TIMEOUT_LpdrTout_SHIFT      (0U)
#define MIPI_DSI_DSI_TIMEOUT_LpdrTout(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_TIMEOUT_LpdrTout_SHIFT)) & MIPI_DSI_DSI_TIMEOUT_LpdrTout_MASK)
#define MIPI_DSI_DSI_TIMEOUT_BtaTout_MASK        (0xFF0000U)
#define MIPI_DSI_DSI_TIMEOUT_BtaTout_SHIFT       (16U)
#define MIPI_DSI_DSI_TIMEOUT_BtaTout(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_TIMEOUT_BtaTout_SHIFT)) & MIPI_DSI_DSI_TIMEOUT_BtaTout_MASK)
/*! @} */

/*! @name DSI_CONFIG - Specifies the configuration register. */
/*! @{ */
#define MIPI_DSI_DSI_CONFIG_LaneEn_MASK          (0x1FU)
#define MIPI_DSI_DSI_CONFIG_LaneEn_SHIFT         (0U)
#define MIPI_DSI_DSI_CONFIG_LaneEn(x)            (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_LaneEn_SHIFT)) & MIPI_DSI_DSI_CONFIG_LaneEn_MASK)
#define MIPI_DSI_DSI_CONFIG_NumOfDatLane_MASK    (0x60U)
#define MIPI_DSI_DSI_CONFIG_NumOfDatLane_SHIFT   (5U)
#define MIPI_DSI_DSI_CONFIG_NumOfDatLane(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_NumOfDatLane_SHIFT)) & MIPI_DSI_DSI_CONFIG_NumOfDatLane_MASK)
#define MIPI_DSI_DSI_CONFIG_SubPixFormat_MASK    (0x700U)
#define MIPI_DSI_DSI_CONFIG_SubPixFormat_SHIFT   (8U)
#define MIPI_DSI_DSI_CONFIG_SubPixFormat(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_SubPixFormat_SHIFT)) & MIPI_DSI_DSI_CONFIG_SubPixFormat_MASK)
#define MIPI_DSI_DSI_CONFIG_MainPixFormat_MASK   (0x7000U)
#define MIPI_DSI_DSI_CONFIG_MainPixFormat_SHIFT  (12U)
#define MIPI_DSI_DSI_CONFIG_MainPixFormat(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_MainPixFormat_SHIFT)) & MIPI_DSI_DSI_CONFIG_MainPixFormat_MASK)
#define MIPI_DSI_DSI_CONFIG_SubVc_MASK           (0x30000U)
#define MIPI_DSI_DSI_CONFIG_SubVc_SHIFT          (16U)
#define MIPI_DSI_DSI_CONFIG_SubVc(x)             (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_SubVc_SHIFT)) & MIPI_DSI_DSI_CONFIG_SubVc_MASK)
#define MIPI_DSI_DSI_CONFIG_MainVc_MASK          (0xC0000U)
#define MIPI_DSI_DSI_CONFIG_MainVc_SHIFT         (18U)
#define MIPI_DSI_DSI_CONFIG_MainVc(x)            (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_CONFIG_MainVc_SHIFT)) & MIPI_DSI_DSI_CONFIG_MainVc_MASK)
#define MIPI_DSI_DSI_CONFIG_HsaDisableMode_MASK  (0x100000U)
#define MIPI_DSI_DSI_CONFIG_HsaDisableMode_SHIFT (20U)
#define MIPI_DSI_DSI_CONFIG_HbpDisableMode_MASK  (0x200000U)
#define MIPI_DSI_DSI_CONFIG_HbpDisableMode_SHIFT (21U)
#define MIPI_DSI_DSI_CONFIG_HfpDisableMode_MASK  (0x400000U)
#define MIPI_DSI_DSI_CONFIG_HfpDisableMode_SHIFT (22U)
#define MIPI_DSI_DSI_CONFIG_HseDisableMode_MASK  (0x800000U)
#define MIPI_DSI_DSI_CONFIG_HseDisableMode_SHIFT (23U)
#define MIPI_DSI_DSI_CONFIG_AutoMode_MASK        (0x1000000U)
#define MIPI_DSI_DSI_CONFIG_AutoMode_SHIFT       (24U)
#define MIPI_DSI_DSI_CONFIG_VideoMode_MASK       (0x2000000U)
#define MIPI_DSI_DSI_CONFIG_VideoMode_SHIFT      (25U)
#define MIPI_DSI_DSI_CONFIG_BurstMode_MASK       (0x4000000U)
#define MIPI_DSI_DSI_CONFIG_BurstMode_SHIFT      (26U)
#define MIPI_DSI_DSI_CONFIG_SyncInform_MASK      (0x8000000U)
#define MIPI_DSI_DSI_CONFIG_SyncInform_SHIFT     (27U)
#define MIPI_DSI_DSI_CONFIG_EoT_r03_MASK         (0x10000000U)
#define MIPI_DSI_DSI_CONFIG_EoT_r03_SHIFT        (28U)
#define MIPI_DSI_DSI_CONFIG_Mflush_VS_MASK       (0x20000000U)
#define MIPI_DSI_DSI_CONFIG_Mflush_VS_SHIFT      (29U)
#define MIPI_DSI_DSI_CONFIG_Clklane_Stop_Start_MASK (0x40000000U)
#define MIPI_DSI_DSI_CONFIG_Clklane_Stop_Start_SHIFT (30U)
#define MIPI_DSI_DSI_CONFIG_Non_Continuous_clock_lane_MASK (0x80000000U)
#define MIPI_DSI_DSI_CONFIG_Non_Continuous_clock_lane_SHIFT (31U)
/*! @} */

/*! @name DSI_ESCMODE - Specifies the escape mode register. */
/*! @{ */
#define MIPI_DSI_DSI_ESCMODE_TxUlpsClkExit_MASK  (0x1U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsClkExit_SHIFT (0U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsClk_MASK      (0x2U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsClk_SHIFT     (1U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsExit_MASK     (0x4U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsExit_SHIFT    (2U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsDat_MASK      (0x8U)
#define MIPI_DSI_DSI_ESCMODE_TxUlpsDat_SHIFT     (3U)
#define MIPI_DSI_DSI_ESCMODE_TxTriggerRst_MASK   (0x10U)
#define MIPI_DSI_DSI_ESCMODE_TxTriggerRst_SHIFT  (4U)
#define MIPI_DSI_DSI_ESCMODE_TxLpdt_MASK         (0x40U)
#define MIPI_DSI_DSI_ESCMODE_TxLpdt_SHIFT        (6U)
#define MIPI_DSI_DSI_ESCMODE_CmdLpdt_MASK        (0x80U)
#define MIPI_DSI_DSI_ESCMODE_CmdLpdt_SHIFT       (7U)
#define MIPI_DSI_DSI_ESCMODE_ForceBta_MASK       (0x10000U)
#define MIPI_DSI_DSI_ESCMODE_ForceBta_SHIFT      (16U)
#define MIPI_DSI_DSI_ESCMODE_ForceStopstate__MASK (0x100000U)
#define MIPI_DSI_DSI_ESCMODE_ForceStopstate__SHIFT (20U)
#define MIPI_DSI_DSI_ESCMODE_STOPstate_Cnt_MASK  (0xFFE00000U)
#define MIPI_DSI_DSI_ESCMODE_STOPstate_Cnt_SHIFT (21U)
#define MIPI_DSI_DSI_ESCMODE_STOPstate_Cnt(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_ESCMODE_STOPstate_Cnt_SHIFT)) & MIPI_DSI_DSI_ESCMODE_STOPstate_Cnt_MASK)
/*! @} */

/*! @name DSI_MDRESOL - Specifies the main display image resolution register. */
/*! @{ */
#define MIPI_DSI_DSI_MDRESOL_MainHResol_MASK     (0xFFFU)
#define MIPI_DSI_DSI_MDRESOL_MainHResol_SHIFT    (0U)
#define MIPI_DSI_DSI_MDRESOL_MainHResol(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MDRESOL_MainHResol_SHIFT)) & MIPI_DSI_DSI_MDRESOL_MainHResol_MASK)
#define MIPI_DSI_DSI_MDRESOL_MainVResol_MASK     (0xFFF0000U)
#define MIPI_DSI_DSI_MDRESOL_MainVResol_SHIFT    (16U)
#define MIPI_DSI_DSI_MDRESOL_MainVResol(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MDRESOL_MainVResol_SHIFT)) & MIPI_DSI_DSI_MDRESOL_MainVResol_MASK)
#define MIPI_DSI_DSI_MDRESOL_MainStandby_MASK    (0x80000000U)
#define MIPI_DSI_DSI_MDRESOL_MainStandby_SHIFT   (31U)
/*! @} */

/*! @name DSI_MVPORCH - Specifies the main display Vporch register. */
/*! @{ */
#define MIPI_DSI_DSI_MVPORCH_MainVbp_MASK        (0x7FFU)
#define MIPI_DSI_DSI_MVPORCH_MainVbp_SHIFT       (0U)
#define MIPI_DSI_DSI_MVPORCH_MainVbp(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MVPORCH_MainVbp_SHIFT)) & MIPI_DSI_DSI_MVPORCH_MainVbp_MASK)
#define MIPI_DSI_DSI_MVPORCH_StableVfp_MASK      (0x7FF0000U)
#define MIPI_DSI_DSI_MVPORCH_StableVfp_SHIFT     (16U)
#define MIPI_DSI_DSI_MVPORCH_StableVfp(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MVPORCH_StableVfp_SHIFT)) & MIPI_DSI_DSI_MVPORCH_StableVfp_MASK)
#define MIPI_DSI_DSI_MVPORCH_CmdAllow_MASK       (0xF0000000U)
#define MIPI_DSI_DSI_MVPORCH_CmdAllow_SHIFT      (28U)
#define MIPI_DSI_DSI_MVPORCH_CmdAllow(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MVPORCH_CmdAllow_SHIFT)) & MIPI_DSI_DSI_MVPORCH_CmdAllow_MASK)
/*! @} */

/*! @name DSI_MHPORCH - Specifies the main display Hporch register. */
/*! @{ */
#define MIPI_DSI_DSI_MHPORCH_MainHbp_MASK        (0xFFFFU)
#define MIPI_DSI_DSI_MHPORCH_MainHbp_SHIFT       (0U)
#define MIPI_DSI_DSI_MHPORCH_MainHbp(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MHPORCH_MainHbp_SHIFT)) & MIPI_DSI_DSI_MHPORCH_MainHbp_MASK)
#define MIPI_DSI_DSI_MHPORCH_MainHfp_MASK        (0xFFFF0000U)
#define MIPI_DSI_DSI_MHPORCH_MainHfp_SHIFT       (16U)
#define MIPI_DSI_DSI_MHPORCH_MainHfp(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MHPORCH_MainHfp_SHIFT)) & MIPI_DSI_DSI_MHPORCH_MainHfp_MASK)
/*! @} */

/*! @name DSI_MSYNC - Specifies the main display Sync Area register. */
/*! @{ */
#define MIPI_DSI_DSI_MSYNC_MainHsa_MASK          (0xFFFFU)
#define MIPI_DSI_DSI_MSYNC_MainHsa_SHIFT         (0U)
#define MIPI_DSI_DSI_MSYNC_MainHsa(x)            (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MSYNC_MainHsa_SHIFT)) & MIPI_DSI_DSI_MSYNC_MainHsa_MASK)
#define MIPI_DSI_DSI_MSYNC_MainVsa_MASK          (0xFFC00000U)
#define MIPI_DSI_DSI_MSYNC_MainVsa_SHIFT         (22U)
#define MIPI_DSI_DSI_MSYNC_MainVsa(x)            (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MSYNC_MainVsa_SHIFT)) & MIPI_DSI_DSI_MSYNC_MainVsa_MASK)
/*! @} */

/*! @name DSI_SDRESOL - Specifies the sub display image resolution register. */
/*! @{ */
#define MIPI_DSI_DSI_SDRESOL_SubHResol_MASK      (0x7FFU)
#define MIPI_DSI_DSI_SDRESOL_SubHResol_SHIFT     (0U)
#define MIPI_DSI_DSI_SDRESOL_SubHResol(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_SDRESOL_SubHResol_SHIFT)) & MIPI_DSI_DSI_SDRESOL_SubHResol_MASK)
#define MIPI_DSI_DSI_SDRESOL_SubVResol_MASK      (0x7FF0000U)
#define MIPI_DSI_DSI_SDRESOL_SubVResol_SHIFT     (16U)
#define MIPI_DSI_DSI_SDRESOL_SubVResol(x)        (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_SDRESOL_SubVResol_SHIFT)) & MIPI_DSI_DSI_SDRESOL_SubVResol_MASK)
#define MIPI_DSI_DSI_SDRESOL_SubStandby_MASK     (0x80000000U)
#define MIPI_DSI_DSI_SDRESOL_SubStandby_SHIFT    (31U)
/*! @} */

/*! @name DSI_INTSRC - Specifies the interrupt source register. */
/*! @{ */
#define MIPI_DSI_DSI_INTSRC_ErrContentLP1_MASK   (0x1U)
#define MIPI_DSI_DSI_INTSRC_ErrContentLP1_SHIFT  (0U)
#define MIPI_DSI_DSI_INTSRC_ErrContentLP0_MASK   (0x2U)
#define MIPI_DSI_DSI_INTSRC_ErrContentLP0_SHIFT  (1U)
#define MIPI_DSI_DSI_INTSRC_ErrControl0_MASK     (0x4U)
#define MIPI_DSI_DSI_INTSRC_ErrControl0_SHIFT    (2U)
#define MIPI_DSI_DSI_INTSRC_ErrControl1_MASK     (0x8U)
#define MIPI_DSI_DSI_INTSRC_ErrControl1_SHIFT    (3U)
#define MIPI_DSI_DSI_INTSRC_ErrControl2_MASK     (0x10U)
#define MIPI_DSI_DSI_INTSRC_ErrControl2_SHIFT    (4U)
#define MIPI_DSI_DSI_INTSRC_ErrControl3_MASK     (0x20U)
#define MIPI_DSI_DSI_INTSRC_ErrControl3_SHIFT    (5U)
#define MIPI_DSI_DSI_INTSRC_ErrSync0_MASK        (0x40U)
#define MIPI_DSI_DSI_INTSRC_ErrSync0_SHIFT       (6U)
#define MIPI_DSI_DSI_INTSRC_ErrSync1_MASK        (0x80U)
#define MIPI_DSI_DSI_INTSRC_ErrSync1_SHIFT       (7U)
#define MIPI_DSI_DSI_INTSRC_ErrSync2_MASK        (0x100U)
#define MIPI_DSI_DSI_INTSRC_ErrSync2_SHIFT       (8U)
#define MIPI_DSI_DSI_INTSRC_ErrSync3_MASK        (0x200U)
#define MIPI_DSI_DSI_INTSRC_ErrSync3_SHIFT       (9U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc0_MASK         (0x400U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc0_SHIFT        (10U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc1_MASK         (0x800U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc1_SHIFT        (11U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc2_MASK         (0x1000U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc2_SHIFT        (12U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc3_MASK         (0x2000U)
#define MIPI_DSI_DSI_INTSRC_ErrEsc3_SHIFT        (13U)
#define MIPI_DSI_DSI_INTSRC_ErrRxCRC_MASK        (0x4000U)
#define MIPI_DSI_DSI_INTSRC_ErrRxCRC_SHIFT       (14U)
#define MIPI_DSI_DSI_INTSRC_ErrRxECC_MASK        (0x8000U)
#define MIPI_DSI_DSI_INTSRC_ErrRxECC_SHIFT       (15U)
#define MIPI_DSI_DSI_INTSRC_RxAck_MASK           (0x10000U)
#define MIPI_DSI_DSI_INTSRC_RxAck_SHIFT          (16U)
#define MIPI_DSI_DSI_INTSRC_RxTE_MASK            (0x20000U)
#define MIPI_DSI_DSI_INTSRC_RxTE_SHIFT           (17U)
#define MIPI_DSI_DSI_INTSRC_RxDatDone_MASK       (0x40000U)
#define MIPI_DSI_DSI_INTSRC_RxDatDone_SHIFT      (18U)
#define MIPI_DSI_DSI_INTSRC_TaTout_MASK          (0x100000U)
#define MIPI_DSI_DSI_INTSRC_TaTout_SHIFT         (20U)
#define MIPI_DSI_DSI_INTSRC_LpdrTout_MASK        (0x200000U)
#define MIPI_DSI_DSI_INTSRC_LpdrTout_SHIFT       (21U)
#define MIPI_DSI_DSI_INTSRC_FrameDone_MASK       (0x1000000U)
#define MIPI_DSI_DSI_INTSRC_FrameDone_SHIFT      (24U)
#define MIPI_DSI_DSI_INTSRC_BusTurnOver_MASK     (0x2000000U)
#define MIPI_DSI_DSI_INTSRC_BusTurnOver_SHIFT    (25U)
#define MIPI_DSI_DSI_INTSRC_SyncOverride_MASK    (0x8000000U)
#define MIPI_DSI_DSI_INTSRC_SyncOverride_SHIFT   (27U)
#define MIPI_DSI_DSI_INTSRC_SFRPHFifoEmpty_MASK  (0x10000000U)
#define MIPI_DSI_DSI_INTSRC_SFRPHFifoEmpty_SHIFT (28U)
#define MIPI_DSI_DSI_INTSRC_SFRPLFifoEmpty_MASK  (0x20000000U)
#define MIPI_DSI_DSI_INTSRC_SFRPLFifoEmpty_SHIFT (29U)
#define MIPI_DSI_DSI_INTSRC_SwRstRelease_MASK    (0x40000000U)
#define MIPI_DSI_DSI_INTSRC_SwRstRelease_SHIFT   (30U)
#define MIPI_DSI_DSI_INTSRC_PllStable_MASK       (0x80000000U)
#define MIPI_DSI_DSI_INTSRC_PllStable_SHIFT      (31U)
/*! @} */

/*! @name DSI_INTMSK - Specifies the interrupt mask register. */
/*! @{ */
#define MIPI_DSI_DSI_INTMSK_MskContentLP1_MASK   (0x1U)
#define MIPI_DSI_DSI_INTMSK_MskContentLP1_SHIFT  (0U)
#define MIPI_DSI_DSI_INTMSK_MskContentLP0_MASK   (0x2U)
#define MIPI_DSI_DSI_INTMSK_MskContentLP0_SHIFT  (1U)
#define MIPI_DSI_DSI_INTMSK_MskControl0_MASK     (0x4U)
#define MIPI_DSI_DSI_INTMSK_MskControl0_SHIFT    (2U)
#define MIPI_DSI_DSI_INTMSK_MskControl1_MASK     (0x8U)
#define MIPI_DSI_DSI_INTMSK_MskControl1_SHIFT    (3U)
#define MIPI_DSI_DSI_INTMSK_MskControl2_MASK     (0x10U)
#define MIPI_DSI_DSI_INTMSK_MskControl2_SHIFT    (4U)
#define MIPI_DSI_DSI_INTMSK_MskControl3_MASK     (0x20U)
#define MIPI_DSI_DSI_INTMSK_MskControl3_SHIFT    (5U)
#define MIPI_DSI_DSI_INTMSK_MskSync0_MASK        (0x40U)
#define MIPI_DSI_DSI_INTMSK_MskSync0_SHIFT       (6U)
#define MIPI_DSI_DSI_INTMSK_MskSync1_MASK        (0x80U)
#define MIPI_DSI_DSI_INTMSK_MskSync1_SHIFT       (7U)
#define MIPI_DSI_DSI_INTMSK_MskSync2_MASK        (0x100U)
#define MIPI_DSI_DSI_INTMSK_MskSync2_SHIFT       (8U)
#define MIPI_DSI_DSI_INTMSK_MskSync3_MASK        (0x200U)
#define MIPI_DSI_DSI_INTMSK_MskSync3_SHIFT       (9U)
#define MIPI_DSI_DSI_INTMSK_MskEsc0_MASK         (0x400U)
#define MIPI_DSI_DSI_INTMSK_MskEsc0_SHIFT        (10U)
#define MIPI_DSI_DSI_INTMSK_MskEsc1_MASK         (0x800U)
#define MIPI_DSI_DSI_INTMSK_MskEsc1_SHIFT        (11U)
#define MIPI_DSI_DSI_INTMSK_MskEsc2_MASK         (0x1000U)
#define MIPI_DSI_DSI_INTMSK_MskEsc2_SHIFT        (12U)
#define MIPI_DSI_DSI_INTMSK_MskEsc3_MASK         (0x2000U)
#define MIPI_DSI_DSI_INTMSK_MskEsc3_SHIFT        (13U)
#define MIPI_DSI_DSI_INTMSK_MskRxCRC_MASK        (0x4000U)
#define MIPI_DSI_DSI_INTMSK_MskRxCRC_SHIFT       (14U)
#define MIPI_DSI_DSI_INTMSK_MskRxECC_MASK        (0x8000U)
#define MIPI_DSI_DSI_INTMSK_MskRxECC_SHIFT       (15U)
#define MIPI_DSI_DSI_INTMSK_MskRxAck_MASK        (0x10000U)
#define MIPI_DSI_DSI_INTMSK_MskRxAck_SHIFT       (16U)
#define MIPI_DSI_DSI_INTMSK_MskRxTE_MASK         (0x20000U)
#define MIPI_DSI_DSI_INTMSK_MskRxTE_SHIFT        (17U)
#define MIPI_DSI_DSI_INTMSK_MskRxDatDone_MASK    (0x40000U)
#define MIPI_DSI_DSI_INTMSK_MskRxDatDone_SHIFT   (18U)
#define MIPI_DSI_DSI_INTMSK_MskTaTout_MASK       (0x100000U)
#define MIPI_DSI_DSI_INTMSK_MskTaTout_SHIFT      (20U)
#define MIPI_DSI_DSI_INTMSK_MskLpdrTout_MASK     (0x200000U)
#define MIPI_DSI_DSI_INTMSK_MskLpdrTout_SHIFT    (21U)
#define MIPI_DSI_DSI_INTMSK_MskFrameDone_MASK    (0x1000000U)
#define MIPI_DSI_DSI_INTMSK_MskFrameDone_SHIFT   (24U)
#define MIPI_DSI_DSI_INTMSK_MskBusTurnOver_MASK  (0x2000000U)
#define MIPI_DSI_DSI_INTMSK_MskBusTurnOver_SHIFT (25U)
#define MIPI_DSI_DSI_INTMSK_MskSyncOverride_MASK (0x8000000U)
#define MIPI_DSI_DSI_INTMSK_MskSyncOverride_SHIFT (27U)
#define MIPI_DSI_DSI_INTMSK_MskSFRPHFifoEmpty_MASK (0x10000000U)
#define MIPI_DSI_DSI_INTMSK_MskSFRPHFifoEmpty_SHIFT (28U)
#define MIPI_DSI_DSI_INTMSK_MskSFRPLFifoEmpty_MASK (0x20000000U)
#define MIPI_DSI_DSI_INTMSK_MskSFRPLFifoEmpty_SHIFT (29U)
#define MIPI_DSI_DSI_INTMSK_MskSwRstRelease_MASK (0x40000000U)
#define MIPI_DSI_DSI_INTMSK_MskSwRstRelease_SHIFT (30U)
#define MIPI_DSI_DSI_INTMSK_MskPllStable_MASK    (0x80000000U)
#define MIPI_DSI_DSI_INTMSK_MskPllStable_SHIFT   (31U)
/*! @} */

/*! @name DSI_PKTHDR - Specifies the packet header FIFO register. */
/*! @{ */
#define MIPI_DSI_DSI_PKTHDR_PacketHeader_MASK    (0xFFFFFFU)
#define MIPI_DSI_DSI_PKTHDR_PacketHeader_SHIFT   (0U)
#define MIPI_DSI_DSI_PKTHDR_PacketHeader(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PKTHDR_PacketHeader_SHIFT)) & MIPI_DSI_DSI_PKTHDR_PacketHeader_MASK)
/*! @} */

/*! @name DSI_PAYLOAD - Specifies the payload FIFO register. */
/*! @{ */
#define MIPI_DSI_DSI_PAYLOAD_Payload_MASK        (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PAYLOAD_Payload_SHIFT       (0U)
#define MIPI_DSI_DSI_PAYLOAD_Payload(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PAYLOAD_Payload_SHIFT)) & MIPI_DSI_DSI_PAYLOAD_Payload_MASK)
/*! @} */

/*! @name DSI_RXFIFO - Specifies the read FIFO register. */
/*! @{ */
#define MIPI_DSI_DSI_RXFIFO_RxDat_MASK           (0xFFFFFFFFU)
#define MIPI_DSI_DSI_RXFIFO_RxDat_SHIFT          (0U)
#define MIPI_DSI_DSI_RXFIFO_RxDat(x)             (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_RXFIFO_RxDat_SHIFT)) & MIPI_DSI_DSI_RXFIFO_RxDat_MASK)
/*! @} */

/*! @name DSI_FIFOTHLD - Specifies the FIFO threshold level register. */
/*! @{ */
#define MIPI_DSI_DSI_FIFOTHLD_WfullLevelSfr_MASK (0x1FFU)
#define MIPI_DSI_DSI_FIFOTHLD_WfullLevelSfr_SHIFT (0U)
#define MIPI_DSI_DSI_FIFOTHLD_WfullLevelSfr(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_FIFOTHLD_WfullLevelSfr_SHIFT)) & MIPI_DSI_DSI_FIFOTHLD_WfullLevelSfr_MASK)
/*! @} */

/*! @name DSI_FIFOCTRL - Specifies the FIFO status and control register. */
/*! @{ */
#define MIPI_DSI_DSI_FIFOCTRL_nInitMain_MASK     (0x1U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitMain_SHIFT    (0U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitSub_MASK      (0x2U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitSub_SHIFT     (1U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitI80_MASK      (0x4U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitI80_SHIFT     (2U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitSfr_MASK      (0x8U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitSfr_SHIFT     (3U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitRx_MASK       (0x10U)
#define MIPI_DSI_DSI_FIFOCTRL_nInitRx_SHIFT      (4U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLMain_MASK    (0x100U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLMain_SHIFT   (8U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLMain_MASK     (0x200U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLMain_SHIFT    (9U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHMain_MASK    (0x400U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHMain_SHIFT   (10U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHMain_MASK     (0x800U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHMain_SHIFT    (11U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLSub_MASK     (0x1000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLSub_SHIFT    (12U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLSub_MASK      (0x2000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLSub_SHIFT     (13U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHSub_MASK     (0x4000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHSub_SHIFT    (14U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHSub_MASK      (0x8000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHSub_SHIFT     (15U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLI80_MASK     (0x10000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLI80_SHIFT    (16U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLI80_MASK      (0x20000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLI80_SHIFT     (17U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHI80_MASK     (0x40000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHI80_SHIFT    (18U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHI80_MASK      (0x80000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHI80_SHIFT     (19U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLSfr_MASK     (0x100000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyLSfr_SHIFT    (20U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLSfr_MASK      (0x200000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullLSfr_SHIFT     (21U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHSfr_MASK     (0x400000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyHSfr_SHIFT    (22U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHSfr_MASK      (0x800000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullHSfr_SHIFT     (23U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyRx_MASK       (0x1000000U)
#define MIPI_DSI_DSI_FIFOCTRL_EmptyRx_SHIFT      (24U)
#define MIPI_DSI_DSI_FIFOCTRL_FullRx_MASK        (0x2000000U)
#define MIPI_DSI_DSI_FIFOCTRL_FullRx_SHIFT       (25U)
/*! @} */

/*! @name DSI_MEMACCHR - Specifies the FIFO memory AC characteristic register. */
/*! @{ */
#define MIPI_DSI_DSI_MEMACCHR_EMAA_MD_MASK       (0x7U)
#define MIPI_DSI_DSI_MEMACCHR_EMAA_MD_SHIFT      (0U)
#define MIPI_DSI_DSI_MEMACCHR_EMAA_MD(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MEMACCHR_EMAA_MD_SHIFT)) & MIPI_DSI_DSI_MEMACCHR_EMAA_MD_MASK)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_MD_MASK       (0x38U)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_MD_SHIFT      (3U)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_MD(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MEMACCHR_EMAB_MD_SHIFT)) & MIPI_DSI_DSI_MEMACCHR_EMAB_MD_MASK)
#define MIPI_DSI_DSI_MEMACCHR_RETN_MD_MASK       (0x40U)
#define MIPI_DSI_DSI_MEMACCHR_RETN_MD_SHIFT      (6U)
#define MIPI_DSI_DSI_MEMACCHR_PGEN_MD_MASK       (0x80U)
#define MIPI_DSI_DSI_MEMACCHR_PGEN_MD_SHIFT      (7U)
#define MIPI_DSI_DSI_MEMACCHR_EMAA_SD_MASK       (0x700U)
#define MIPI_DSI_DSI_MEMACCHR_EMAA_SD_SHIFT      (8U)
#define MIPI_DSI_DSI_MEMACCHR_EMAA_SD(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MEMACCHR_EMAA_SD_SHIFT)) & MIPI_DSI_DSI_MEMACCHR_EMAA_SD_MASK)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_SD_MASK       (0x3800U)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_SD_SHIFT      (11U)
#define MIPI_DSI_DSI_MEMACCHR_EMAB_SD(x)         (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MEMACCHR_EMAB_SD_SHIFT)) & MIPI_DSI_DSI_MEMACCHR_EMAB_SD_MASK)
#define MIPI_DSI_DSI_MEMACCHR_RETN_SD_MASK       (0x4000U)
#define MIPI_DSI_DSI_MEMACCHR_RETN_SD_SHIFT      (14U)
#define MIPI_DSI_DSI_MEMACCHR_PGEN_SD_MASK       (0x8000U)
#define MIPI_DSI_DSI_MEMACCHR_PGEN_SD_SHIFT      (15U)
/*! @} */

/*! @name DSI_MULTI_PKT - Specifies the Multi Packet, Packet Go register. */
/*! @{ */
#define MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_Cnt_Ref_MASK (0xFFFFU)
#define MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_Cnt_Ref_SHIFT (0U)
#define MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_Cnt_Ref(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_Cnt_Ref_SHIFT)) & MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_Cnt_Ref_MASK)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Send_Cnt_Ref_MASK (0xFFF0000U)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Send_Cnt_Ref_SHIFT (16U)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Send_Cnt_Ref(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_MULTI_PKT_PKT_Send_Cnt_Ref_SHIFT)) & MIPI_DSI_DSI_MULTI_PKT_PKT_Send_Cnt_Ref_MASK)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Go_Rdy_MASK   (0x10000000U)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Go_Rdy_SHIFT  (28U)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Go_EN_MASK    (0x20000000U)
#define MIPI_DSI_DSI_MULTI_PKT_PKT_Go_EN_SHIFT   (29U)
#define MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_EN_MASK (0x40000000U)
#define MIPI_DSI_DSI_MULTI_PKT_Multi_PKT_EN_SHIFT (30U)
/*! @} */

/*! @name DSI_PLLCTRL_1G - Specifies the 1Gbps D-PHY PLL control register. */
/*! @{ */
#define MIPI_DSI_DSI_PLLCTRL_1G_PRPRCtlClk_MASK  (0x7U)
#define MIPI_DSI_DSI_PLLCTRL_1G_PRPRCtlClk_SHIFT (0U)
#define MIPI_DSI_DSI_PLLCTRL_1G_PRPRCtlClk(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL_1G_PRPRCtlClk_SHIFT)) & MIPI_DSI_DSI_PLLCTRL_1G_PRPRCtlClk_MASK)
#define MIPI_DSI_DSI_PLLCTRL_1G_PREPRCtl_MASK    (0x70U)
#define MIPI_DSI_DSI_PLLCTRL_1G_PREPRCtl_SHIFT   (4U)
#define MIPI_DSI_DSI_PLLCTRL_1G_PREPRCtl(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL_1G_PREPRCtl_SHIFT)) & MIPI_DSI_DSI_PLLCTRL_1G_PREPRCtl_MASK)
#define MIPI_DSI_DSI_PLLCTRL_1G_Freq_Band_MASK   (0xF00U)
#define MIPI_DSI_DSI_PLLCTRL_1G_Freq_Band_SHIFT  (8U)
#define MIPI_DSI_DSI_PLLCTRL_1G_Freq_Band(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL_1G_Freq_Band_SHIFT)) & MIPI_DSI_DSI_PLLCTRL_1G_Freq_Band_MASK)
#define MIPI_DSI_DSI_PLLCTRL_1G_HSzeroCtl_MASK   (0xF000U)
#define MIPI_DSI_DSI_PLLCTRL_1G_HSzeroCtl_SHIFT  (12U)
#define MIPI_DSI_DSI_PLLCTRL_1G_HSzeroCtl(x)     (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL_1G_HSzeroCtl_SHIFT)) & MIPI_DSI_DSI_PLLCTRL_1G_HSzeroCtl_MASK)
/*! @} */

/*! @name DSI_PLLCTRL - Specifies the PLL control register. */
/*! @{ */
#define MIPI_DSI_DSI_PLLCTRL_PMS_MASK            (0xFFFFEU)
#define MIPI_DSI_DSI_PLLCTRL_PMS_SHIFT           (1U)
#define MIPI_DSI_DSI_PLLCTRL_PMS(x)              (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL_PMS_SHIFT)) & MIPI_DSI_DSI_PLLCTRL_PMS_MASK)
#define MIPI_DSI_DSI_PLLCTRL_PllEn_MASK          (0x800000U)
#define MIPI_DSI_DSI_PLLCTRL_PllEn_SHIFT         (23U)
#define MIPI_DSI_DSI_PLLCTRL_DpDnSwap_DAT_MASK   (0x1000000U)
#define MIPI_DSI_DSI_PLLCTRL_DpDnSwap_DAT_SHIFT  (24U)
#define MIPI_DSI_DSI_PLLCTRL_DpDnSwap_CLK_MASK   (0x2000000U)
#define MIPI_DSI_DSI_PLLCTRL_DpDnSwap_CLK_SHIFT  (25U)
/*! @} */

/*! @name DSI_PLLCTRL1 - Specifies the PLL control register 1. */
/*! @{ */
#define MIPI_DSI_DSI_PLLCTRL1_M_PLLCTL0_MASK     (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PLLCTRL1_M_PLLCTL0_SHIFT    (0U)
#define MIPI_DSI_DSI_PLLCTRL1_M_PLLCTL0(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL1_M_PLLCTL0_SHIFT)) & MIPI_DSI_DSI_PLLCTRL1_M_PLLCTL0_MASK)
/*! @} */

/*! @name DSI_PLLCTRL2 - Specifies the PLL control register 2. */
/*! @{ */
#define MIPI_DSI_DSI_PLLCTRL2_M_PLLCTL1_MASK     (0xFFU)
#define MIPI_DSI_DSI_PLLCTRL2_M_PLLCTL1_SHIFT    (0U)
#define MIPI_DSI_DSI_PLLCTRL2_M_PLLCTL1(x)       (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLCTRL2_M_PLLCTL1_SHIFT)) & MIPI_DSI_DSI_PLLCTRL2_M_PLLCTL1_MASK)
/*! @} */

/*! @name DSI_PLLTMR - Specifies the PLL timer register. */
/*! @{ */
#define MIPI_DSI_DSI_PLLTMR_PllTimer_MASK        (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PLLTMR_PllTimer_SHIFT       (0U)
#define MIPI_DSI_DSI_PLLTMR_PllTimer(x)          (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PLLTMR_PllTimer_SHIFT)) & MIPI_DSI_DSI_PLLTMR_PllTimer_MASK)
/*! @} */

/*! @name DSI_PHYCTRL_B1 - Specifies the D-PHY control register 1. */
/*! @{ */
#define MIPI_DSI_DSI_PHYCTRL_B1_B_DPHYCTL0_MASK  (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PHYCTRL_B1_B_DPHYCTL0_SHIFT (0U)
#define MIPI_DSI_DSI_PHYCTRL_B1_B_DPHYCTL0(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYCTRL_B1_B_DPHYCTL0_SHIFT)) & MIPI_DSI_DSI_PHYCTRL_B1_B_DPHYCTL0_MASK)
/*! @} */

/*! @name DSI_PHYCTRL_B2 - Specifies the D-PHY control register 2. */
/*! @{ */
#define MIPI_DSI_DSI_PHYCTRL_B2_B_DPHYCTL1_MASK  (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PHYCTRL_B2_B_DPHYCTL1_SHIFT (0U)
#define MIPI_DSI_DSI_PHYCTRL_B2_B_DPHYCTL1(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYCTRL_B2_B_DPHYCTL1_SHIFT)) & MIPI_DSI_DSI_PHYCTRL_B2_B_DPHYCTL1_MASK)
/*! @} */

/*! @name DSI_PHYCTRL_M1 - Specifies the D-PHY control register 1. */
/*! @{ */
#define MIPI_DSI_DSI_PHYCTRL_M1_M_DPHYCTL0_MASK  (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PHYCTRL_M1_M_DPHYCTL0_SHIFT (0U)
#define MIPI_DSI_DSI_PHYCTRL_M1_M_DPHYCTL0(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYCTRL_M1_M_DPHYCTL0_SHIFT)) & MIPI_DSI_DSI_PHYCTRL_M1_M_DPHYCTL0_MASK)
/*! @} */

/*! @name DSI_PHYCTRL_M2 - Specifies the D-PHY control register 2. */
/*! @{ */
#define MIPI_DSI_DSI_PHYCTRL_M2_M_DPHYCTL1_MASK  (0xFFFFFFFFU)
#define MIPI_DSI_DSI_PHYCTRL_M2_M_DPHYCTL1_SHIFT (0U)
#define MIPI_DSI_DSI_PHYCTRL_M2_M_DPHYCTL1(x)    (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYCTRL_M2_M_DPHYCTL1_SHIFT)) & MIPI_DSI_DSI_PHYCTRL_M2_M_DPHYCTL1_MASK)
/*! @} */

/*! @name DSI_PHYTIMING - Specifies the D-PHY timing register. */
/*! @{ */
#define MIPI_DSI_DSI_PHYTIMING_M_THSEXITCTL_MASK (0xFFU)
#define MIPI_DSI_DSI_PHYTIMING_M_THSEXITCTL_SHIFT (0U)
#define MIPI_DSI_DSI_PHYTIMING_M_THSEXITCTL(x)   (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING_M_THSEXITCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING_M_THSEXITCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING_M_TLPXCTL_MASK    (0xFF00U)
#define MIPI_DSI_DSI_PHYTIMING_M_TLPXCTL_SHIFT   (8U)
#define MIPI_DSI_DSI_PHYTIMING_M_TLPXCTL(x)      (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING_M_TLPXCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING_M_TLPXCTL_MASK)
/*! @} */

/*! @name DSI_PHYTIMING1 - Specifies the D-PHY timing register 1. */
/*! @{ */
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKTRAILCTL_MASK (0xFFU)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKTRAILCTL_SHIFT (0U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKTRAILCTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING1_M_TCLKTRAILCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING1_M_TCLKTRAILCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPOSTCTL_MASK (0xFF00U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPOSTCTL_SHIFT (8U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPOSTCTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING1_M_TCLKPOSTCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING1_M_TCLKPOSTCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKZEROCTL_MASK (0xFF0000U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKZEROCTL_SHIFT (16U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKZEROCTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING1_M_TCLKZEROCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING1_M_TCLKZEROCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPRPRCTL_MASK (0xFF000000U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPRPRCTL_SHIFT (24U)
#define MIPI_DSI_DSI_PHYTIMING1_M_TCLKPRPRCTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING1_M_TCLKPRPRCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING1_M_TCLKPRPRCTL_MASK)
/*! @} */

/*! @name DSI_PHYTIMING2 - Specifies the D-PHY timing register 2. */
/*! @{ */
#define MIPI_DSI_DSI_PHYTIMING2_M_THSTRAILCTL_MASK (0xFFU)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSTRAILCTL_SHIFT (0U)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSTRAILCTL(x) (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING2_M_THSTRAILCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING2_M_THSTRAILCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSZEROCTL_MASK (0xFF00U)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSZEROCTL_SHIFT (8U)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSZEROCTL(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING2_M_THSZEROCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING2_M_THSZEROCTL_MASK)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSPRPRCTL_MASK (0xFF0000U)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSPRPRCTL_SHIFT (16U)
#define MIPI_DSI_DSI_PHYTIMING2_M_THSPRPRCTL(x)  (((uint32_t)(((uint32_t)(x)) << MIPI_DSI_DSI_PHYTIMING2_M_THSPRPRCTL_SHIFT)) & MIPI_DSI_DSI_PHYTIMING2_M_THSPRPRCTL_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MIPI_DSI_Register_Masks */


/* MIPI_DSI - Peripheral instance base addresses */
/** Peripheral MIPI_DSI base pointer */
#define MIPI_DSI_BASE_PTR                        ((MIPI_DSI_MemMapPtr)0x32E10000u)
/** Array initializer of MIPI_DSI peripheral base pointers */
#define MIPI_DSI_BASE_PTRS                       { MIPI_DSI_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MIPI_DSI - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MIPI_DSI_Register_Accessor_Macros MIPI_DSI - Register accessor macros
 * @{
 */


/* MIPI_DSI - Register instance definitions */
/* MIPI_DSI */
#define MIPI_DSI_DSI_VERSION                     MIPI_DSI_DSI_VERSION_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_STATUS                      MIPI_DSI_DSI_STATUS_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_RGB_STATUS                  MIPI_DSI_DSI_RGB_STATUS_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_SWRST                       MIPI_DSI_DSI_SWRST_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_CLKCTRL                     MIPI_DSI_DSI_CLKCTRL_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_TIMEOUT                     MIPI_DSI_DSI_TIMEOUT_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_CONFIG                      MIPI_DSI_DSI_CONFIG_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_ESCMODE                     MIPI_DSI_DSI_ESCMODE_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MDRESOL                     MIPI_DSI_DSI_MDRESOL_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MVPORCH                     MIPI_DSI_DSI_MVPORCH_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MHPORCH                     MIPI_DSI_DSI_MHPORCH_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MSYNC                       MIPI_DSI_DSI_MSYNC_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_SDRESOL                     MIPI_DSI_DSI_SDRESOL_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_INTSRC                      MIPI_DSI_DSI_INTSRC_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_INTMSK                      MIPI_DSI_DSI_INTMSK_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PKTHDR                      MIPI_DSI_DSI_PKTHDR_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PAYLOAD                     MIPI_DSI_DSI_PAYLOAD_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_RXFIFO                      MIPI_DSI_DSI_RXFIFO_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_FIFOTHLD                    MIPI_DSI_DSI_FIFOTHLD_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_FIFOCTRL                    MIPI_DSI_DSI_FIFOCTRL_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MEMACCHR                    MIPI_DSI_DSI_MEMACCHR_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_MULTI_PKT                   MIPI_DSI_DSI_MULTI_PKT_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PLLCTRL_1G                  MIPI_DSI_DSI_PLLCTRL_1G_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PLLCTRL                     MIPI_DSI_DSI_PLLCTRL_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PLLCTRL1                    MIPI_DSI_DSI_PLLCTRL1_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PLLCTRL2                    MIPI_DSI_DSI_PLLCTRL2_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PLLTMR                      MIPI_DSI_DSI_PLLTMR_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYCTRL_B1                  MIPI_DSI_DSI_PHYCTRL_B1_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYCTRL_B2                  MIPI_DSI_DSI_PHYCTRL_B2_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYCTRL_M1                  MIPI_DSI_DSI_PHYCTRL_M1_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYCTRL_M2                  MIPI_DSI_DSI_PHYCTRL_M2_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYTIMING                   MIPI_DSI_DSI_PHYTIMING_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYTIMING1                  MIPI_DSI_DSI_PHYTIMING1_REG(MIPI_DSI_BASE_PTR)
#define MIPI_DSI_DSI_PHYTIMING2                  MIPI_DSI_DSI_PHYTIMING2_REG(MIPI_DSI_BASE_PTR)

/*!
 * @}
 */ /* end of group MIPI_DSI_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MIPI_DSI_Peripheral */


/* ----------------------------------------------------------------------------
   -- MU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Peripheral MU
 * @{
 */

/** MU - Peripheral register structure */
typedef struct MU_MemMap {
  uint32_t TR[4];                                  /**< Processor B Transmit Register 0..Processor B Transmit Register 3, array offset: 0x0, array step: 0x4 */
  uint32_t RR[4];                                  /**< Processor B Receive Register 0..Processor B Receive Register 3, array offset: 0x10, array step: 0x4 */
  uint32_t SR;                                     /**< Processor B Status Register, offset: 0x20 */
  uint32_t CR;                                     /**< Processor B Control Register, offset: 0x24 */
} volatile *MU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register accessors */
#define MU_TR_REG(base,index)                    ((base)->TR[index])
#define MU_RR_REG(base,index)                    ((base)->RR[index])
#define MU_SR_REG(base)                          ((base)->SR)
#define MU_CR_REG(base)                          ((base)->CR)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- MU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Masks MU Register Masks
 * @{
 */

/*! @name TR - Processor B Transmit Register 0..Processor B Transmit Register 3 */
/*! @{ */
#define MU_TR_BTR0_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR0_SHIFT                         (0U)
#define MU_TR_BTR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR0_SHIFT)) & MU_TR_BTR0_MASK)
#define MU_TR_BTR1_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR1_SHIFT                         (0U)
#define MU_TR_BTR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR1_SHIFT)) & MU_TR_BTR1_MASK)
#define MU_TR_BTR2_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR2_SHIFT                         (0U)
#define MU_TR_BTR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR2_SHIFT)) & MU_TR_BTR2_MASK)
#define MU_TR_BTR3_MASK                          (0xFFFFFFFFU)
#define MU_TR_BTR3_SHIFT                         (0U)
#define MU_TR_BTR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_TR_BTR3_SHIFT)) & MU_TR_BTR3_MASK)
/*! @} */

/* The count of MU_TR */
#define MU_TR_COUNT                              (4U)

/*! @name RR - Processor B Receive Register 0..Processor B Receive Register 3 */
/*! @{ */
#define MU_RR_BRR0_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR0_SHIFT                         (0U)
#define MU_RR_BRR0(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR0_SHIFT)) & MU_RR_BRR0_MASK)
#define MU_RR_BRR1_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR1_SHIFT                         (0U)
#define MU_RR_BRR1(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR1_SHIFT)) & MU_RR_BRR1_MASK)
#define MU_RR_BRR2_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR2_SHIFT                         (0U)
#define MU_RR_BRR2(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR2_SHIFT)) & MU_RR_BRR2_MASK)
#define MU_RR_BRR3_MASK                          (0xFFFFFFFFU)
#define MU_RR_BRR3_SHIFT                         (0U)
#define MU_RR_BRR3(x)                            (((uint32_t)(((uint32_t)(x)) << MU_RR_BRR3_SHIFT)) & MU_RR_BRR3_MASK)
/*! @} */

/* The count of MU_RR */
#define MU_RR_COUNT                              (4U)

/*! @name SR - Processor B Status Register */
/*! @{ */
#define MU_SR_Fn_MASK                            (0x7U)
#define MU_SR_Fn_SHIFT                           (0U)
/*! Fn
 *  0b000..ABFn bit in ACR register is written 0 (default).
 *  0b001..ABFn bit in ACR register is written 1.
 */
#define MU_SR_Fn(x)                              (((uint32_t)(((uint32_t)(x)) << MU_SR_Fn_SHIFT)) & MU_SR_Fn_MASK)
#define MU_SR_EP_MASK                            (0x10U)
#define MU_SR_EP_SHIFT                           (4U)
#define MU_SR_APM_MASK                           (0x60U)
#define MU_SR_APM_SHIFT                          (5U)
/*! APM
 *  0b00..The System is in Run Mode.
 *  0b01..The System is in WAIT Mode.
 *  0b10..Reserved.
 *  0b11..The System is in STOP Mode.
 */
#define MU_SR_APM(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_APM_SHIFT)) & MU_SR_APM_MASK)
#define MU_SR_ARS_MASK                           (0x80U)
#define MU_SR_ARS_SHIFT                          (7U)
#define MU_SR_FUP_MASK                           (0x100U)
#define MU_SR_FUP_SHIFT                          (8U)
#define MU_SR_TEn_MASK                           (0xF00000U)
#define MU_SR_TEn_SHIFT                          (20U)
/*! TEn
 *  0b0000..BTRn register is not empty.
 *  0b0001..BTRn register is empty (default).
 */
#define MU_SR_TEn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_TEn_SHIFT)) & MU_SR_TEn_MASK)
#define MU_SR_RFn_MASK                           (0xF000000U)
#define MU_SR_RFn_SHIFT                          (24U)
/*! RFn
 *  0b0000..BRRn register is not full (default).
 *  0b0001..BRRn register has received data from ATRn register and is ready to be read by the Processor B.
 */
#define MU_SR_RFn(x)                             (((uint32_t)(((uint32_t)(x)) << MU_SR_RFn_SHIFT)) & MU_SR_RFn_MASK)
#define MU_SR_GIPn_MASK                          (0xF0000000U)
#define MU_SR_GIPn_SHIFT                         (28U)
/*! GIPn
 *  0b0000..Processor B general purpose interrupt n is not pending. (default)
 *  0b0001..Processor B general purpose interrupt n is pending.
 */
#define MU_SR_GIPn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_SR_GIPn_SHIFT)) & MU_SR_GIPn_MASK)
/*! @} */

/*! @name CR - Processor B Control Register */
/*! @{ */
#define MU_CR_BAFn_MASK                          (0x7U)
#define MU_CR_BAFn_SHIFT                         (0U)
/*! BAFn
 *  0b000..Clears the Fn bit in the ASR register.
 *  0b001..Sets the Fn bit in the ASR register.
 */
#define MU_CR_BAFn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_BAFn_SHIFT)) & MU_CR_BAFn_MASK)
#define MU_CR_HRM_MASK                           (0x10U)
#define MU_CR_HRM_SHIFT                          (4U)
#define MU_CR_GIRn_MASK                          (0xF0000U)
#define MU_CR_GIRn_SHIFT                         (16U)
/*! GIRn
 *  0b0000..Processor B General Interrupt n is not requested to the Processor A (default).
 *  0b0001..Processor B General Interrupt n is requested to the Processor A.
 */
#define MU_CR_GIRn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIRn_SHIFT)) & MU_CR_GIRn_MASK)
#define MU_CR_TIEn_MASK                          (0xF00000U)
#define MU_CR_TIEn_SHIFT                         (20U)
/*! TIEn
 *  0b0000..Disables Processor B Transmit Interrupt n. (default)
 *  0b0001..Enables Processor B Transmit Interrupt n.
 */
#define MU_CR_TIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_TIEn_SHIFT)) & MU_CR_TIEn_MASK)
#define MU_CR_RIEn_MASK                          (0xF000000U)
#define MU_CR_RIEn_SHIFT                         (24U)
/*! RIEn
 *  0b0000..Disables Processor B Receive Interrupt n. (default)
 *  0b0001..Enables Processor B Receive Interrupt n.
 */
#define MU_CR_RIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_RIEn_SHIFT)) & MU_CR_RIEn_MASK)
#define MU_CR_GIEn_MASK                          (0xF0000000U)
#define MU_CR_GIEn_SHIFT                         (28U)
/*! GIEn
 *  0b0000..Disables Processor B General Interrupt n. (default)
 *  0b0001..Enables Processor B General Interrupt n.
 */
#define MU_CR_GIEn(x)                            (((uint32_t)(((uint32_t)(x)) << MU_CR_GIEn_SHIFT)) & MU_CR_GIEn_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group MU_Register_Masks */


/* MU - Peripheral instance base addresses */
/** Peripheral MUB base pointer */
#define MUB_BASE_PTR                             ((MU_MemMapPtr)0x30AB0000u)
/** Array initializer of MU peripheral base pointers */
#define MU_BASE_PTRS                             { MUB_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- MU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup MU_Register_Accessor_Macros MU - Register accessor macros
 * @{
 */


/* MU - Register instance definitions */
/* MUB */
#define MUB_BTR0                                 MU_TR_REG(MUB_BASE_PTR,0)
#define MUB_BTR1                                 MU_TR_REG(MUB_BASE_PTR,1)
#define MUB_BTR2                                 MU_TR_REG(MUB_BASE_PTR,2)
#define MUB_BTR3                                 MU_TR_REG(MUB_BASE_PTR,3)
#define MUB_BRR0                                 MU_RR_REG(MUB_BASE_PTR,0)
#define MUB_BRR1                                 MU_RR_REG(MUB_BASE_PTR,1)
#define MUB_BRR2                                 MU_RR_REG(MUB_BASE_PTR,2)
#define MUB_BRR3                                 MU_RR_REG(MUB_BASE_PTR,3)
#define MUB_BSR                                  MU_SR_REG(MUB_BASE_PTR)
#define MUB_BCR                                  MU_CR_REG(MUB_BASE_PTR)

/* MU - Register array accessors */
#define MUB_TR(index)                            MU_TR_REG(MUB_BASE_PTR,index)
#define MUB_RR(index)                            MU_RR_REG(MUB_BASE_PTR,index)

/*!
 * @}
 */ /* end of group MU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group MU_Peripheral */


/* ----------------------------------------------------------------------------
   -- OCOTP
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Peripheral OCOTP
 * @{
 */

/** OCOTP - Peripheral register structure */
typedef struct OCOTP_MemMap {
  uint32_t HW_OCOTP_CTRL;                          /**< OTP Controller Control Register, offset: 0x0 */
  uint32_t HW_OCOTP_CTRL_SET;                      /**< OTP Controller Control Register, offset: 0x4 */
  uint32_t HW_OCOTP_CTRL_CLR;                      /**< OTP Controller Control Register, offset: 0x8 */
  uint32_t HW_OCOTP_CTRL_TOG;                      /**< OTP Controller Control Register, offset: 0xC */
  uint32_t HW_OCOTP_TIMING;                        /**< OTP Controller Timing Register, offset: 0x10 */
  uint8_t RESERVED_0[12];
  uint32_t HW_OCOTP_DATA;                          /**< OTP Controller Write Data Register, offset: 0x20 */
  uint8_t RESERVED_1[12];
  uint32_t HW_OCOTP_READ_CTRL;                     /**< OTP Controller Write Data Register, offset: 0x30 */
  uint8_t RESERVED_2[12];
  uint32_t HW_OCOTP_READ_FUSE_DATA;                /**< OTP Controller Read Data Register, offset: 0x40 */
  uint8_t RESERVED_3[12];
  uint32_t HW_OCOTP_SW_STICKY;                     /**< Sticky bit Register, offset: 0x50 */
  uint8_t RESERVED_4[12];
  uint32_t HW_OCOTP_SCS;                           /**< Software Controllable Signals Register, offset: 0x60 */
  uint32_t HW_OCOTP_SCS_SET;                       /**< Software Controllable Signals Register, offset: 0x64 */
  uint32_t HW_OCOTP_SCS_CLR;                       /**< Software Controllable Signals Register, offset: 0x68 */
  uint32_t HW_OCOTP_SCS_TOG;                       /**< Software Controllable Signals Register, offset: 0x6C */
  uint8_t RESERVED_5[32];
  uint32_t HW_OCOTP_VERSION;                       /**< OTP Controller Version Register, offset: 0x90 */
  uint8_t RESERVED_6[876];
  uint32_t HW_OCOTP_LOCK;                          /**< Value of OTP Bank0 Word0 (Lock controls), offset: 0x400 */
  uint8_t RESERVED_7[12];
  uint32_t HW_OCOTP_TESTER0;                       /**< Value of OTP Bank0 Word1 (Tester Info.), offset: 0x410 */
  uint8_t RESERVED_8[12];
  uint32_t HW_OCOTP_TESTER1;                       /**< Value of OTP Bank0 Word2 (tester Info.), offset: 0x420 */
  uint8_t RESERVED_9[12];
  uint32_t HW_OCOTP_TESTER2;                       /**< Value of OTP Bank0 Word3 (Tester Info.), offset: 0x430 */
  uint8_t RESERVED_10[12];
  uint32_t HW_OCOTP_TESTER3;                       /**< Value of OTP Bank1 Word0 (Tester Info.), offset: 0x440 */
  uint8_t RESERVED_11[12];
  uint32_t HW_OCOTP_TESTER4;                       /**< Value of OTP Bank1 Word1 (Tester Info.), offset: 0x450 */
  uint8_t RESERVED_12[12];
  uint32_t HW_OCOTP_TESTER5;                       /**< Value of OTP Bank1 Word2 (Tester Info.), offset: 0x460 */
  uint8_t RESERVED_13[12];
  uint32_t HW_OCOTP_BOOT_CFG0;                     /**< Value of OTP Bank1 Word3 (Boot Configuration Info.), offset: 0x470 */
  uint8_t RESERVED_14[12];
  uint32_t HW_OCOTP_BOOT_CFG1;                     /**< Value of OTP Bank2 Word0 (Boot Configuration Info.), offset: 0x480 */
  uint8_t RESERVED_15[12];
  uint32_t HW_OCOTP_BOOT_CFG2;                     /**< Value of OTP Bank2 Word1 (Boot Configuration Info.), offset: 0x490 */
  uint8_t RESERVED_16[12];
  uint32_t HW_OCOTP_BOOT_CFG3;                     /**< Value of OTP Bank2 Word2 (Boot Configuration Info.), offset: 0x4A0 */
  uint8_t RESERVED_17[12];
  uint32_t HW_OCOTP_BOOT_CFG4;                     /**< Value of OTP Bank2 Word3 (BOOT Configuration Info.), offset: 0x4B0 */
  uint8_t RESERVED_18[12];
  uint32_t HW_OCOTP_MEM_TRIM0;                     /**< Value of OTP Bank3 Word0 (Memory Related Info.), offset: 0x4C0 */
  uint8_t RESERVED_19[12];
  uint32_t HW_OCOTP_MEM_TRIM1;                     /**< Value of OTP Bank3 Word1 (Memory Related Info.), offset: 0x4D0 */
  uint8_t RESERVED_20[12];
  uint32_t HW_OCOTP_ANA0;                          /**< Value of OTP Bank3 Word2 (Analog Info.), offset: 0x4E0 */
  uint8_t RESERVED_21[12];
  uint32_t HW_OCOTP_ANA1;                          /**< Value of OTP Bank3 Word3 (Analog Info.), offset: 0x4F0 */
  uint8_t RESERVED_22[140];
  uint32_t HW_OCOTP_SRK0;                          /**< Shadow Register for OTP Bank6 Word0 (SRK Hash), offset: 0x580 */
  uint8_t RESERVED_23[12];
  uint32_t HW_OCOTP_SRK1;                          /**< Shadow Register for OTP Bank6 Word1 (SRK Hash), offset: 0x590 */
  uint8_t RESERVED_24[12];
  uint32_t HW_OCOTP_SRK2;                          /**< Shadow Register for OTP Bank6 Word2 (SRK Hash), offset: 0x5A0 */
  uint8_t RESERVED_25[12];
  uint32_t HW_OCOTP_SRK3;                          /**< Shadow Register for OTP Bank6 Word3 (SRK Hash), offset: 0x5B0 */
  uint8_t RESERVED_26[12];
  uint32_t HW_OCOTP_SRK4;                          /**< Shadow Register for OTP Bank7 Word0 (SRK Hash), offset: 0x5C0 */
  uint8_t RESERVED_27[12];
  uint32_t HW_OCOTP_SRK5;                          /**< Shadow Register for OTP Bank7 Word1 (SRK Hash), offset: 0x5D0 */
  uint8_t RESERVED_28[12];
  uint32_t HW_OCOTP_SRK6;                          /**< Shadow Register for OTP Bank7 Word2 (SRK Hash), offset: 0x5E0 */
  uint8_t RESERVED_29[12];
  uint32_t HW_OCOTP_SRK7;                          /**< Shadow Register for OTP Bank7 Word3 (SRK Hash), offset: 0x5F0 */
  uint8_t RESERVED_30[12];
  uint32_t HW_OCOTP_SJC_RESP0;                     /**< Value of OTP Bank8 Word0 (Secure JTAG Response Field), offset: 0x600 */
  uint8_t RESERVED_31[12];
  uint32_t HW_OCOTP_SJC_RESP1;                     /**< Value of OTP Bank8 Word1 (Secure JTAG Response Field), offset: 0x610 */
  uint8_t RESERVED_32[12];
  uint32_t HW_OCOTP_USB_ID;                        /**< Value of OTP Bank8 Word2 (USB ID info), offset: 0x620 */
  uint8_t RESERVED_33[12];
  uint32_t HW_OCOTP_FIELD_RETURN;                  /**< Value of OTP Bank5 Word6 (Field Return), offset: 0x630 */
  uint8_t RESERVED_34[12];
  uint32_t HW_OCOTP_MAC_ADDR0;                     /**< Value of OTP Bank9 Word0 (MAC Address), offset: 0x640 */
  uint8_t RESERVED_35[12];
  uint32_t HW_OCOTP_MAC_ADDR1;                     /**< Value of OTP Bank9 Word1 (MAC Address), offset: 0x650 */
  uint8_t RESERVED_36[12];
  uint32_t HW_OCOTP_MAC_ADDR2;                     /**< Value of OTP Bank9 Word2 (MAC Address), offset: 0x660 */
  uint8_t RESERVED_37[12];
  uint32_t HW_OCOTP_SRK_REVOKE;                    /**< Value of OTP Bank9 Word3 (SRK Revoke), offset: 0x670 */
  uint8_t RESERVED_38[12];
  uint32_t HW_OCOTP_MAU_KEY0;                      /**< Shadow Register for OTP Bank10 Word0 (MAU Key), offset: 0x680 */
  uint8_t RESERVED_39[12];
  uint32_t HW_OCOTP_MAU_KEY1;                      /**< Shadow Register for OTP Bank10 Word1 (MAU Key), offset: 0x690 */
  uint8_t RESERVED_40[12];
  uint32_t HW_OCOTP_MAU_KEY2;                      /**< Shadow Register for OTP Bank10 Word2 (MAU Key), offset: 0x6A0 */
  uint8_t RESERVED_41[12];
  uint32_t HW_OCOTP_MAU_KEY3;                      /**< Shadow Register for OTP Bank10 Word3 (MAU Key), offset: 0x6B0 */
  uint8_t RESERVED_42[12];
  uint32_t HW_OCOTP_MAU_KEY4;                      /**< Shadow Register for OTP Bank11 Word0 (MAU Key), offset: 0x6C0 */
  uint8_t RESERVED_43[12];
  uint32_t HW_OCOTP_MAU_KEY5;                      /**< Shadow Register for OTP Bank11 Word1 (MAU Key), offset: 0x6D0 */
  uint8_t RESERVED_44[12];
  uint32_t HW_OCOTP_MAU_KEY6;                      /**< Shadow Register for OTP Bank11 Word2 (MAU Key), offset: 0x6E0 */
  uint8_t RESERVED_45[12];
  uint32_t HW_OCOTP_MAU_KEY7;                      /**< Shadow Register for OTP Bank11 Word3 (MAU Key), offset: 0x6F0 */
  uint8_t RESERVED_46[140];
  uint32_t HW_OCOTP_GP10;                          /**< Value of OTP Bank14 Word0 (), offset: 0x780 */
  uint8_t RESERVED_47[12];
  uint32_t HW_OCOTP_GP11;                          /**< Value of OTP Bank14 Word1 (), offset: 0x790 */
  uint8_t RESERVED_48[12];
  uint32_t HW_OCOTP_GP20;                          /**< Value of OTP Bank14 Word2 (), offset: 0x7A0 */
  uint8_t RESERVED_49[12];
  uint32_t HW_OCOTP_GP21;                          /**< Value of OTP Bank14 Word3 (), offset: 0x7B0 */
} volatile *OCOTP_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register accessors */
#define OCOTP_HW_OCOTP_CTRL_REG(base)            ((base)->HW_OCOTP_CTRL)
#define OCOTP_HW_OCOTP_CTRL_SET_REG(base)        ((base)->HW_OCOTP_CTRL_SET)
#define OCOTP_HW_OCOTP_CTRL_CLR_REG(base)        ((base)->HW_OCOTP_CTRL_CLR)
#define OCOTP_HW_OCOTP_CTRL_TOG_REG(base)        ((base)->HW_OCOTP_CTRL_TOG)
#define OCOTP_HW_OCOTP_TIMING_REG(base)          ((base)->HW_OCOTP_TIMING)
#define OCOTP_HW_OCOTP_DATA_REG(base)            ((base)->HW_OCOTP_DATA)
#define OCOTP_HW_OCOTP_READ_CTRL_REG(base)       ((base)->HW_OCOTP_READ_CTRL)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_REG(base)  ((base)->HW_OCOTP_READ_FUSE_DATA)
#define OCOTP_HW_OCOTP_SW_STICKY_REG(base)       ((base)->HW_OCOTP_SW_STICKY)
#define OCOTP_HW_OCOTP_SCS_REG(base)             ((base)->HW_OCOTP_SCS)
#define OCOTP_HW_OCOTP_SCS_SET_REG(base)         ((base)->HW_OCOTP_SCS_SET)
#define OCOTP_HW_OCOTP_SCS_CLR_REG(base)         ((base)->HW_OCOTP_SCS_CLR)
#define OCOTP_HW_OCOTP_SCS_TOG_REG(base)         ((base)->HW_OCOTP_SCS_TOG)
#define OCOTP_HW_OCOTP_VERSION_REG(base)         ((base)->HW_OCOTP_VERSION)
#define OCOTP_HW_OCOTP_LOCK_REG(base)            ((base)->HW_OCOTP_LOCK)
#define OCOTP_HW_OCOTP_TESTER0_REG(base)         ((base)->HW_OCOTP_TESTER0)
#define OCOTP_HW_OCOTP_TESTER1_REG(base)         ((base)->HW_OCOTP_TESTER1)
#define OCOTP_HW_OCOTP_TESTER2_REG(base)         ((base)->HW_OCOTP_TESTER2)
#define OCOTP_HW_OCOTP_TESTER3_REG(base)         ((base)->HW_OCOTP_TESTER3)
#define OCOTP_HW_OCOTP_TESTER4_REG(base)         ((base)->HW_OCOTP_TESTER4)
#define OCOTP_HW_OCOTP_TESTER5_REG(base)         ((base)->HW_OCOTP_TESTER5)
#define OCOTP_HW_OCOTP_BOOT_CFG0_REG(base)       ((base)->HW_OCOTP_BOOT_CFG0)
#define OCOTP_HW_OCOTP_BOOT_CFG1_REG(base)       ((base)->HW_OCOTP_BOOT_CFG1)
#define OCOTP_HW_OCOTP_BOOT_CFG2_REG(base)       ((base)->HW_OCOTP_BOOT_CFG2)
#define OCOTP_HW_OCOTP_BOOT_CFG3_REG(base)       ((base)->HW_OCOTP_BOOT_CFG3)
#define OCOTP_HW_OCOTP_BOOT_CFG4_REG(base)       ((base)->HW_OCOTP_BOOT_CFG4)
#define OCOTP_HW_OCOTP_MEM_TRIM0_REG(base)       ((base)->HW_OCOTP_MEM_TRIM0)
#define OCOTP_HW_OCOTP_MEM_TRIM1_REG(base)       ((base)->HW_OCOTP_MEM_TRIM1)
#define OCOTP_HW_OCOTP_ANA0_REG(base)            ((base)->HW_OCOTP_ANA0)
#define OCOTP_HW_OCOTP_ANA1_REG(base)            ((base)->HW_OCOTP_ANA1)
#define OCOTP_HW_OCOTP_SRK0_REG(base)            ((base)->HW_OCOTP_SRK0)
#define OCOTP_HW_OCOTP_SRK1_REG(base)            ((base)->HW_OCOTP_SRK1)
#define OCOTP_HW_OCOTP_SRK2_REG(base)            ((base)->HW_OCOTP_SRK2)
#define OCOTP_HW_OCOTP_SRK3_REG(base)            ((base)->HW_OCOTP_SRK3)
#define OCOTP_HW_OCOTP_SRK4_REG(base)            ((base)->HW_OCOTP_SRK4)
#define OCOTP_HW_OCOTP_SRK5_REG(base)            ((base)->HW_OCOTP_SRK5)
#define OCOTP_HW_OCOTP_SRK6_REG(base)            ((base)->HW_OCOTP_SRK6)
#define OCOTP_HW_OCOTP_SRK7_REG(base)            ((base)->HW_OCOTP_SRK7)
#define OCOTP_HW_OCOTP_SJC_RESP0_REG(base)       ((base)->HW_OCOTP_SJC_RESP0)
#define OCOTP_HW_OCOTP_SJC_RESP1_REG(base)       ((base)->HW_OCOTP_SJC_RESP1)
#define OCOTP_HW_OCOTP_USB_ID_REG(base)          ((base)->HW_OCOTP_USB_ID)
#define OCOTP_HW_OCOTP_FIELD_RETURN_REG(base)    ((base)->HW_OCOTP_FIELD_RETURN)
#define OCOTP_HW_OCOTP_MAC_ADDR0_REG(base)       ((base)->HW_OCOTP_MAC_ADDR0)
#define OCOTP_HW_OCOTP_MAC_ADDR1_REG(base)       ((base)->HW_OCOTP_MAC_ADDR1)
#define OCOTP_HW_OCOTP_MAC_ADDR2_REG(base)       ((base)->HW_OCOTP_MAC_ADDR2)
#define OCOTP_HW_OCOTP_SRK_REVOKE_REG(base)      ((base)->HW_OCOTP_SRK_REVOKE)
#define OCOTP_HW_OCOTP_MAU_KEY0_REG(base)        ((base)->HW_OCOTP_MAU_KEY0)
#define OCOTP_HW_OCOTP_MAU_KEY1_REG(base)        ((base)->HW_OCOTP_MAU_KEY1)
#define OCOTP_HW_OCOTP_MAU_KEY2_REG(base)        ((base)->HW_OCOTP_MAU_KEY2)
#define OCOTP_HW_OCOTP_MAU_KEY3_REG(base)        ((base)->HW_OCOTP_MAU_KEY3)
#define OCOTP_HW_OCOTP_MAU_KEY4_REG(base)        ((base)->HW_OCOTP_MAU_KEY4)
#define OCOTP_HW_OCOTP_MAU_KEY5_REG(base)        ((base)->HW_OCOTP_MAU_KEY5)
#define OCOTP_HW_OCOTP_MAU_KEY6_REG(base)        ((base)->HW_OCOTP_MAU_KEY6)
#define OCOTP_HW_OCOTP_MAU_KEY7_REG(base)        ((base)->HW_OCOTP_MAU_KEY7)
#define OCOTP_HW_OCOTP_GP10_REG(base)            ((base)->HW_OCOTP_GP10)
#define OCOTP_HW_OCOTP_GP11_REG(base)            ((base)->HW_OCOTP_GP11)
#define OCOTP_HW_OCOTP_GP20_REG(base)            ((base)->HW_OCOTP_GP20)
#define OCOTP_HW_OCOTP_GP21_REG(base)            ((base)->HW_OCOTP_GP21)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- OCOTP Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Masks OCOTP Register Masks
 * @{
 */

/*! @name HW_OCOTP_CTRL - OTP Controller Control Register */
/*! @{ */
#define OCOTP_HW_OCOTP_CTRL_ADDR_MASK            (0xFFU)
#define OCOTP_HW_OCOTP_CTRL_ADDR_SHIFT           (0U)
#define OCOTP_HW_OCOTP_CTRL_ADDR(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_ADDR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_ADDR_MASK)
#define OCOTP_HW_OCOTP_CTRL_BUSY_MASK            (0x100U)
#define OCOTP_HW_OCOTP_CTRL_BUSY_SHIFT           (8U)
#define OCOTP_HW_OCOTP_CTRL_ERROR_MASK           (0x200U)
#define OCOTP_HW_OCOTP_CTRL_ERROR_SHIFT          (9U)
#define OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_MASK  (0x400U)
#define OCOTP_HW_OCOTP_CTRL_RELOAD_SHADOWS_SHIFT (10U)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_MASK       (0xFFFF0000U)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_SHIFT      (16U)
#define OCOTP_HW_OCOTP_CTRL_WR_UNLOCK(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_SHIFT)) & OCOTP_HW_OCOTP_CTRL_WR_UNLOCK_MASK)
/*! @} */

/*! @name HW_OCOTP_CTRL_SET - OTP Controller Control Register */
/*! @{ */
#define OCOTP_HW_OCOTP_CTRL_SET_ADDR_MASK        (0xFFU)
#define OCOTP_HW_OCOTP_CTRL_SET_ADDR_SHIFT       (0U)
#define OCOTP_HW_OCOTP_CTRL_SET_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_SET_ADDR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_SET_ADDR_MASK)
#define OCOTP_HW_OCOTP_CTRL_SET_BUSY_MASK        (0x100U)
#define OCOTP_HW_OCOTP_CTRL_SET_BUSY_SHIFT       (8U)
#define OCOTP_HW_OCOTP_CTRL_SET_ERROR_MASK       (0x200U)
#define OCOTP_HW_OCOTP_CTRL_SET_ERROR_SHIFT      (9U)
#define OCOTP_HW_OCOTP_CTRL_SET_RELOAD_SHADOWS_MASK (0x400U)
#define OCOTP_HW_OCOTP_CTRL_SET_RELOAD_SHADOWS_SHIFT (10U)
#define OCOTP_HW_OCOTP_CTRL_SET_WR_UNLOCK_MASK   (0xFFFF0000U)
#define OCOTP_HW_OCOTP_CTRL_SET_WR_UNLOCK_SHIFT  (16U)
#define OCOTP_HW_OCOTP_CTRL_SET_WR_UNLOCK(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_SET_WR_UNLOCK_SHIFT)) & OCOTP_HW_OCOTP_CTRL_SET_WR_UNLOCK_MASK)
/*! @} */

/*! @name HW_OCOTP_CTRL_CLR - OTP Controller Control Register */
/*! @{ */
#define OCOTP_HW_OCOTP_CTRL_CLR_ADDR_MASK        (0xFFU)
#define OCOTP_HW_OCOTP_CTRL_CLR_ADDR_SHIFT       (0U)
#define OCOTP_HW_OCOTP_CTRL_CLR_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_CLR_ADDR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_CLR_ADDR_MASK)
#define OCOTP_HW_OCOTP_CTRL_CLR_BUSY_MASK        (0x100U)
#define OCOTP_HW_OCOTP_CTRL_CLR_BUSY_SHIFT       (8U)
#define OCOTP_HW_OCOTP_CTRL_CLR_ERROR_MASK       (0x200U)
#define OCOTP_HW_OCOTP_CTRL_CLR_ERROR_SHIFT      (9U)
#define OCOTP_HW_OCOTP_CTRL_CLR_RELOAD_SHADOWS_MASK (0x400U)
#define OCOTP_HW_OCOTP_CTRL_CLR_RELOAD_SHADOWS_SHIFT (10U)
#define OCOTP_HW_OCOTP_CTRL_CLR_WR_UNLOCK_MASK   (0xFFFF0000U)
#define OCOTP_HW_OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT  (16U)
#define OCOTP_HW_OCOTP_CTRL_CLR_WR_UNLOCK(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT)) & OCOTP_HW_OCOTP_CTRL_CLR_WR_UNLOCK_MASK)
/*! @} */

/*! @name HW_OCOTP_CTRL_TOG - OTP Controller Control Register */
/*! @{ */
#define OCOTP_HW_OCOTP_CTRL_TOG_ADDR_MASK        (0xFFU)
#define OCOTP_HW_OCOTP_CTRL_TOG_ADDR_SHIFT       (0U)
#define OCOTP_HW_OCOTP_CTRL_TOG_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_TOG_ADDR_SHIFT)) & OCOTP_HW_OCOTP_CTRL_TOG_ADDR_MASK)
#define OCOTP_HW_OCOTP_CTRL_TOG_BUSY_MASK        (0x100U)
#define OCOTP_HW_OCOTP_CTRL_TOG_BUSY_SHIFT       (8U)
#define OCOTP_HW_OCOTP_CTRL_TOG_ERROR_MASK       (0x200U)
#define OCOTP_HW_OCOTP_CTRL_TOG_ERROR_SHIFT      (9U)
#define OCOTP_HW_OCOTP_CTRL_TOG_RELOAD_SHADOWS_MASK (0x400U)
#define OCOTP_HW_OCOTP_CTRL_TOG_RELOAD_SHADOWS_SHIFT (10U)
#define OCOTP_HW_OCOTP_CTRL_TOG_WR_UNLOCK_MASK   (0xFFFF0000U)
#define OCOTP_HW_OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT  (16U)
#define OCOTP_HW_OCOTP_CTRL_TOG_WR_UNLOCK(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT)) & OCOTP_HW_OCOTP_CTRL_TOG_WR_UNLOCK_MASK)
/*! @} */

/*! @name HW_OCOTP_TIMING - OTP Controller Timing Register */
/*! @{ */
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG_MASK   (0xFFFU)
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG_SHIFT  (0U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_PROG(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_STROBE_PROG_SHIFT)) & OCOTP_HW_OCOTP_TIMING_STROBE_PROG_MASK)
#define OCOTP_HW_OCOTP_TIMING_RELAX_MASK         (0xF000U)
#define OCOTP_HW_OCOTP_TIMING_RELAX_SHIFT        (12U)
#define OCOTP_HW_OCOTP_TIMING_RELAX(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_RELAX_SHIFT)) & OCOTP_HW_OCOTP_TIMING_RELAX_MASK)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ_MASK   (0x3F0000U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ_SHIFT  (16U)
#define OCOTP_HW_OCOTP_TIMING_STROBE_READ(x)     (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_STROBE_READ_SHIFT)) & OCOTP_HW_OCOTP_TIMING_STROBE_READ_MASK)
#define OCOTP_HW_OCOTP_TIMING_WAIT_MASK          (0xFC00000U)
#define OCOTP_HW_OCOTP_TIMING_WAIT_SHIFT         (22U)
#define OCOTP_HW_OCOTP_TIMING_WAIT(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_WAIT_SHIFT)) & OCOTP_HW_OCOTP_TIMING_WAIT_MASK)
#define OCOTP_HW_OCOTP_TIMING_RSRVD0_MASK        (0xF0000000U)
#define OCOTP_HW_OCOTP_TIMING_RSRVD0_SHIFT       (28U)
#define OCOTP_HW_OCOTP_TIMING_RSRVD0(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TIMING_RSRVD0_SHIFT)) & OCOTP_HW_OCOTP_TIMING_RSRVD0_MASK)
/*! @} */

/*! @name HW_OCOTP_DATA - OTP Controller Write Data Register */
/*! @{ */
#define OCOTP_HW_OCOTP_DATA_DATA_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_DATA_DATA_SHIFT           (0U)
#define OCOTP_HW_OCOTP_DATA_DATA(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_DATA_DATA_SHIFT)) & OCOTP_HW_OCOTP_DATA_DATA_MASK)
/*! @} */

/*! @name HW_OCOTP_READ_CTRL - OTP Controller Write Data Register */
/*! @{ */
#define OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_MASK  (0x1U)
#define OCOTP_HW_OCOTP_READ_CTRL_READ_FUSE_SHIFT (0U)
#define OCOTP_HW_OCOTP_READ_CTRL_RSVD0_MASK      (0xFFFFFFFEU)
#define OCOTP_HW_OCOTP_READ_CTRL_RSVD0_SHIFT     (1U)
#define OCOTP_HW_OCOTP_READ_CTRL_RSVD0(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_READ_CTRL_RSVD0_SHIFT)) & OCOTP_HW_OCOTP_READ_CTRL_RSVD0_MASK)
/*! @} */

/*! @name HW_OCOTP_READ_FUSE_DATA - OTP Controller Read Data Register */
/*! @{ */
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_MASK  (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_SHIFT (0U)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA(x)    (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_SHIFT)) & OCOTP_HW_OCOTP_READ_FUSE_DATA_DATA_MASK)
/*! @} */

/*! @name HW_OCOTP_SW_STICKY - Sticky bit Register */
/*! @{ */
#define OCOTP_HW_OCOTP_SW_STICKY_RSVD0_MASK      (0x1U)
#define OCOTP_HW_OCOTP_SW_STICKY_RSVD0_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK (0x2U)
#define OCOTP_HW_OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT (1U)
#define OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK (0x4U)
#define OCOTP_HW_OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT (2U)
#define OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK (0x8U)
#define OCOTP_HW_OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT (3U)
#define OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK (0x10U)
#define OCOTP_HW_OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT (4U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_MASK (0x20U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_GROUP_MASK_SHIFT (5U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_MASK (0x40U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_FW_SRK_SHIFT (6U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_MASK (0x80U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDMI_KMEK_SHIFT (7U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_MASK (0x100U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_GLOBAL_CONSTANT_SHIFT (8U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_MASK (0x200U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_TX_CERT_SHIFT (9U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_MASK (0x400U)
#define OCOTP_HW_OCOTP_SW_STICKY_DISABLE_READ_HDCP_DEVICE_KEY_SHIFT (10U)
#define OCOTP_HW_OCOTP_SW_STICKY_RSVD1_MASK      (0xFFFFF800U)
#define OCOTP_HW_OCOTP_SW_STICKY_RSVD1_SHIFT     (11U)
#define OCOTP_HW_OCOTP_SW_STICKY_RSVD1(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SW_STICKY_RSVD1_SHIFT)) & OCOTP_HW_OCOTP_SW_STICKY_RSVD1_MASK)
/*! @} */

/*! @name HW_OCOTP_SCS - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_HW_OCOTP_SCS_HAB_JDE_MASK          (0x1U)
#define OCOTP_HW_OCOTP_SCS_HAB_JDE_SHIFT         (0U)
#define OCOTP_HW_OCOTP_SCS_SPARE_MASK            (0x7FFFFFFEU)
#define OCOTP_HW_OCOTP_SCS_SPARE_SHIFT           (1U)
#define OCOTP_HW_OCOTP_SCS_SPARE(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_SPARE_SHIFT)) & OCOTP_HW_OCOTP_SCS_SPARE_MASK)
#define OCOTP_HW_OCOTP_SCS_LOCK_MASK             (0x80000000U)
#define OCOTP_HW_OCOTP_SCS_LOCK_SHIFT            (31U)
/*! @} */

/*! @name HW_OCOTP_SCS_SET - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_HW_OCOTP_SCS_SET_HAB_JDE_MASK      (0x1U)
#define OCOTP_HW_OCOTP_SCS_SET_HAB_JDE_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SCS_SET_SPARE_MASK        (0x7FFFFFFEU)
#define OCOTP_HW_OCOTP_SCS_SET_SPARE_SHIFT       (1U)
#define OCOTP_HW_OCOTP_SCS_SET_SPARE(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_SET_SPARE_SHIFT)) & OCOTP_HW_OCOTP_SCS_SET_SPARE_MASK)
#define OCOTP_HW_OCOTP_SCS_SET_LOCK_MASK         (0x80000000U)
#define OCOTP_HW_OCOTP_SCS_SET_LOCK_SHIFT        (31U)
/*! @} */

/*! @name HW_OCOTP_SCS_CLR - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_HW_OCOTP_SCS_CLR_HAB_JDE_MASK      (0x1U)
#define OCOTP_HW_OCOTP_SCS_CLR_HAB_JDE_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SCS_CLR_SPARE_MASK        (0x7FFFFFFEU)
#define OCOTP_HW_OCOTP_SCS_CLR_SPARE_SHIFT       (1U)
#define OCOTP_HW_OCOTP_SCS_CLR_SPARE(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_CLR_SPARE_SHIFT)) & OCOTP_HW_OCOTP_SCS_CLR_SPARE_MASK)
#define OCOTP_HW_OCOTP_SCS_CLR_LOCK_MASK         (0x80000000U)
#define OCOTP_HW_OCOTP_SCS_CLR_LOCK_SHIFT        (31U)
/*! @} */

/*! @name HW_OCOTP_SCS_TOG - Software Controllable Signals Register */
/*! @{ */
#define OCOTP_HW_OCOTP_SCS_TOG_HAB_JDE_MASK      (0x1U)
#define OCOTP_HW_OCOTP_SCS_TOG_HAB_JDE_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SCS_TOG_SPARE_MASK        (0x7FFFFFFEU)
#define OCOTP_HW_OCOTP_SCS_TOG_SPARE_SHIFT       (1U)
#define OCOTP_HW_OCOTP_SCS_TOG_SPARE(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SCS_TOG_SPARE_SHIFT)) & OCOTP_HW_OCOTP_SCS_TOG_SPARE_MASK)
#define OCOTP_HW_OCOTP_SCS_TOG_LOCK_MASK         (0x80000000U)
#define OCOTP_HW_OCOTP_SCS_TOG_LOCK_SHIFT        (31U)
/*! @} */

/*! @name HW_OCOTP_VERSION - OTP Controller Version Register */
/*! @{ */
#define OCOTP_HW_OCOTP_VERSION_STEP_MASK         (0xFFFFU)
#define OCOTP_HW_OCOTP_VERSION_STEP_SHIFT        (0U)
#define OCOTP_HW_OCOTP_VERSION_STEP(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_STEP_SHIFT)) & OCOTP_HW_OCOTP_VERSION_STEP_MASK)
#define OCOTP_HW_OCOTP_VERSION_MINOR_MASK        (0xFF0000U)
#define OCOTP_HW_OCOTP_VERSION_MINOR_SHIFT       (16U)
#define OCOTP_HW_OCOTP_VERSION_MINOR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_MINOR_SHIFT)) & OCOTP_HW_OCOTP_VERSION_MINOR_MASK)
#define OCOTP_HW_OCOTP_VERSION_MAJOR_MASK        (0xFF000000U)
#define OCOTP_HW_OCOTP_VERSION_MAJOR_SHIFT       (24U)
#define OCOTP_HW_OCOTP_VERSION_MAJOR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_VERSION_MAJOR_SHIFT)) & OCOTP_HW_OCOTP_VERSION_MAJOR_MASK)
/*! @} */

/*! @name HW_OCOTP_LOCK - Value of OTP Bank0 Word0 (Lock controls) */
/*! @{ */
#define OCOTP_HW_OCOTP_LOCK_TESTER_MASK          (0x3U)
#define OCOTP_HW_OCOTP_LOCK_TESTER_SHIFT         (0U)
#define OCOTP_HW_OCOTP_LOCK_TESTER(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_TESTER_SHIFT)) & OCOTP_HW_OCOTP_LOCK_TESTER_MASK)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG_MASK        (0xCU)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG_SHIFT       (2U)
#define OCOTP_HW_OCOTP_LOCK_BOOT_CFG(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_BOOT_CFG_SHIFT)) & OCOTP_HW_OCOTP_LOCK_BOOT_CFG_MASK)
#define OCOTP_HW_OCOTP_LOCK_SRK_MASK             (0x200U)
#define OCOTP_HW_OCOTP_LOCK_SRK_SHIFT            (9U)
#define OCOTP_HW_OCOTP_LOCK_SJC_RESP_MASK        (0x400U)
#define OCOTP_HW_OCOTP_LOCK_SJC_RESP_SHIFT       (10U)
#define OCOTP_HW_OCOTP_LOCK_USB_ID_MASK          (0x3000U)
#define OCOTP_HW_OCOTP_LOCK_USB_ID_SHIFT         (12U)
#define OCOTP_HW_OCOTP_LOCK_USB_ID(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_USB_ID_SHIFT)) & OCOTP_HW_OCOTP_LOCK_USB_ID_MASK)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR_MASK        (0xC000U)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR_SHIFT       (14U)
#define OCOTP_HW_OCOTP_LOCK_MAC_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_MAC_ADDR_SHIFT)) & OCOTP_HW_OCOTP_LOCK_MAC_ADDR_MASK)
#define OCOTP_HW_OCOTP_LOCK_GP1_MASK             (0x300000U)
#define OCOTP_HW_OCOTP_LOCK_GP1_SHIFT            (20U)
#define OCOTP_HW_OCOTP_LOCK_GP1(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GP1_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GP1_MASK)
#define OCOTP_HW_OCOTP_LOCK_GP2_MASK             (0xC00000U)
#define OCOTP_HW_OCOTP_LOCK_GP2_SHIFT            (22U)
#define OCOTP_HW_OCOTP_LOCK_GP2(x)               (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_LOCK_GP2_SHIFT)) & OCOTP_HW_OCOTP_LOCK_GP2_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER0 - Value of OTP Bank0 Word1 (Tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER0_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER0_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER0_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER0_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER1 - Value of OTP Bank0 Word2 (tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER1_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER1_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER1_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER1_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER2 - Value of OTP Bank0 Word3 (Tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER2_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER2_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER2_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER2_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER2_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER3 - Value of OTP Bank1 Word0 (Tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER3_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER3_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER3_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER3_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER3_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER4 - Value of OTP Bank1 Word1 (Tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER4_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER4_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER4_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER4_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER4_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_TESTER5 - Value of OTP Bank1 Word2 (Tester Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_TESTER5_BITS_MASK         (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_TESTER5_BITS_SHIFT        (0U)
#define OCOTP_HW_OCOTP_TESTER5_BITS(x)           (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_TESTER5_BITS_SHIFT)) & OCOTP_HW_OCOTP_TESTER5_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_BOOT_CFG0 - Value of OTP Bank1 Word3 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG0_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_BOOT_CFG1 - Value of OTP Bank2 Word0 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG1_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_BOOT_CFG2 - Value of OTP Bank2 Word1 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG2_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG2_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG2_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_BOOT_CFG3 - Value of OTP Bank2 Word2 (Boot Configuration Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG3_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG3_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG3_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_BOOT_CFG4 - Value of OTP Bank2 Word3 (BOOT Configuration Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_BOOT_CFG4_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_BOOT_CFG4_BITS_SHIFT)) & OCOTP_HW_OCOTP_BOOT_CFG4_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MEM_TRIM0 - Value of OTP Bank3 Word0 (Memory Related Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MEM_TRIM0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MEM_TRIM0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MEM_TRIM0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MEM_TRIM1 - Value of OTP Bank3 Word1 (Memory Related Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MEM_TRIM1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MEM_TRIM1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MEM_TRIM1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_ANA0 - Value of OTP Bank3 Word2 (Analog Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_ANA0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_ANA0_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_ANA0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_ANA0_BITS_SHIFT)) & OCOTP_HW_OCOTP_ANA0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_ANA1 - Value of OTP Bank3 Word3 (Analog Info.) */
/*! @{ */
#define OCOTP_HW_OCOTP_ANA1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_ANA1_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_ANA1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_ANA1_BITS_SHIFT)) & OCOTP_HW_OCOTP_ANA1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK0 - Shadow Register for OTP Bank6 Word0 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK0_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK0_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK0_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK0_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK1 - Shadow Register for OTP Bank6 Word1 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK1_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK1_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK1_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK1_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK2 - Shadow Register for OTP Bank6 Word2 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK2_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK2_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK2_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK2_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK2_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK3 - Shadow Register for OTP Bank6 Word3 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK3_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK3_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK3_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK3_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK3_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK4 - Shadow Register for OTP Bank7 Word0 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK4_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK4_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK4_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK4_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK4_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK5 - Shadow Register for OTP Bank7 Word1 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK5_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK5_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK5_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK5_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK5_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK6 - Shadow Register for OTP Bank7 Word2 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK6_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK6_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK6_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK6_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK6_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK7 - Shadow Register for OTP Bank7 Word3 (SRK Hash) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK7_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK7_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_SRK7_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK7_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK7_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SJC_RESP0 - Value of OTP Bank8 Word0 (Secure JTAG Response Field) */
/*! @{ */
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_SJC_RESP0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SJC_RESP0_BITS_SHIFT)) & OCOTP_HW_OCOTP_SJC_RESP0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SJC_RESP1 - Value of OTP Bank8 Word1 (Secure JTAG Response Field) */
/*! @{ */
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_SJC_RESP1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SJC_RESP1_BITS_SHIFT)) & OCOTP_HW_OCOTP_SJC_RESP1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_USB_ID - Value of OTP Bank8 Word2 (USB ID info) */
/*! @{ */
#define OCOTP_HW_OCOTP_USB_ID_BITS_MASK          (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_USB_ID_BITS_SHIFT         (0U)
#define OCOTP_HW_OCOTP_USB_ID_BITS(x)            (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_USB_ID_BITS_SHIFT)) & OCOTP_HW_OCOTP_USB_ID_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_FIELD_RETURN - Value of OTP Bank5 Word6 (Field Return) */
/*! @{ */
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS_MASK    (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS_SHIFT   (0U)
#define OCOTP_HW_OCOTP_FIELD_RETURN_BITS(x)      (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_FIELD_RETURN_BITS_SHIFT)) & OCOTP_HW_OCOTP_FIELD_RETURN_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAC_ADDR0 - Value of OTP Bank9 Word0 (MAC Address) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR0_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAC_ADDR1 - Value of OTP Bank9 Word1 (MAC Address) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR1_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAC_ADDR2 - Value of OTP Bank9 Word2 (MAC Address) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS_MASK       (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS_SHIFT      (0U)
#define OCOTP_HW_OCOTP_MAC_ADDR2_BITS(x)         (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAC_ADDR2_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAC_ADDR2_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_SRK_REVOKE - Value of OTP Bank9 Word3 (SRK Revoke) */
/*! @{ */
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS_MASK      (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS_SHIFT     (0U)
#define OCOTP_HW_OCOTP_SRK_REVOKE_BITS(x)        (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_SRK_REVOKE_BITS_SHIFT)) & OCOTP_HW_OCOTP_SRK_REVOKE_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY0 - Shadow Register for OTP Bank10 Word0 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY0_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY0_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY0_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY1 - Shadow Register for OTP Bank10 Word1 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY1_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY1_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY1_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY2 - Shadow Register for OTP Bank10 Word2 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY2_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY2_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY2_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY3 - Shadow Register for OTP Bank10 Word3 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY3_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY3_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY3_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY4 - Shadow Register for OTP Bank11 Word0 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY4_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY4_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY4_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY5 - Shadow Register for OTP Bank11 Word1 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY5_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY5_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY5_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY6 - Shadow Register for OTP Bank11 Word2 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY6_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY6_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY6_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_MAU_KEY7 - Shadow Register for OTP Bank11 Word3 (MAU Key) */
/*! @{ */
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS_MASK        (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS_SHIFT       (0U)
#define OCOTP_HW_OCOTP_MAU_KEY7_BITS(x)          (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_MAU_KEY7_BITS_SHIFT)) & OCOTP_HW_OCOTP_MAU_KEY7_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_GP10 - Value of OTP Bank14 Word0 () */
/*! @{ */
#define OCOTP_HW_OCOTP_GP10_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP10_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP10_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP10_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP10_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_GP11 - Value of OTP Bank14 Word1 () */
/*! @{ */
#define OCOTP_HW_OCOTP_GP11_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP11_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP11_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP11_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP11_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_GP20 - Value of OTP Bank14 Word2 () */
/*! @{ */
#define OCOTP_HW_OCOTP_GP20_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP20_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP20_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP20_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP20_BITS_MASK)
/*! @} */

/*! @name HW_OCOTP_GP21 - Value of OTP Bank14 Word3 () */
/*! @{ */
#define OCOTP_HW_OCOTP_GP21_BITS_MASK            (0xFFFFFFFFU)
#define OCOTP_HW_OCOTP_GP21_BITS_SHIFT           (0U)
#define OCOTP_HW_OCOTP_GP21_BITS(x)              (((uint32_t)(((uint32_t)(x)) << OCOTP_HW_OCOTP_GP21_BITS_SHIFT)) & OCOTP_HW_OCOTP_GP21_BITS_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group OCOTP_Register_Masks */


/* OCOTP - Peripheral instance base addresses */
/** Peripheral OCOTP base pointer */
#define OCOTP_BASE_PTR                           ((OCOTP_MemMapPtr)0x30350000u)
/** Array initializer of OCOTP peripheral base pointers */
#define OCOTP_BASE_PTRS                          { OCOTP_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- OCOTP - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup OCOTP_Register_Accessor_Macros OCOTP - Register accessor macros
 * @{
 */


/* OCOTP - Register instance definitions */
/* OCOTP */
#define OCOTP_HW_OCOTP_CTRL                      OCOTP_HW_OCOTP_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_SET                  OCOTP_HW_OCOTP_CTRL_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_CLR                  OCOTP_HW_OCOTP_CTRL_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_CTRL_TOG                  OCOTP_HW_OCOTP_CTRL_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TIMING                    OCOTP_HW_OCOTP_TIMING_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_DATA                      OCOTP_HW_OCOTP_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_CTRL                 OCOTP_HW_OCOTP_READ_CTRL_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_READ_FUSE_DATA            OCOTP_HW_OCOTP_READ_FUSE_DATA_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SW_STICKY                 OCOTP_HW_OCOTP_SW_STICKY_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS                       OCOTP_HW_OCOTP_SCS_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_SET                   OCOTP_HW_OCOTP_SCS_SET_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_CLR                   OCOTP_HW_OCOTP_SCS_CLR_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SCS_TOG                   OCOTP_HW_OCOTP_SCS_TOG_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_VERSION                   OCOTP_HW_OCOTP_VERSION_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_LOCK                      OCOTP_HW_OCOTP_LOCK_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER0                   OCOTP_HW_OCOTP_TESTER0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER1                   OCOTP_HW_OCOTP_TESTER1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER2                   OCOTP_HW_OCOTP_TESTER2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER3                   OCOTP_HW_OCOTP_TESTER3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER4                   OCOTP_HW_OCOTP_TESTER4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_TESTER5                   OCOTP_HW_OCOTP_TESTER5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG0                 OCOTP_HW_OCOTP_BOOT_CFG0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG1                 OCOTP_HW_OCOTP_BOOT_CFG1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG2                 OCOTP_HW_OCOTP_BOOT_CFG2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG3                 OCOTP_HW_OCOTP_BOOT_CFG3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_BOOT_CFG4                 OCOTP_HW_OCOTP_BOOT_CFG4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM_TRIM0                 OCOTP_HW_OCOTP_MEM_TRIM0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MEM_TRIM1                 OCOTP_HW_OCOTP_MEM_TRIM1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA0                      OCOTP_HW_OCOTP_ANA0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_ANA1                      OCOTP_HW_OCOTP_ANA1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK0                      OCOTP_HW_OCOTP_SRK0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK1                      OCOTP_HW_OCOTP_SRK1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK2                      OCOTP_HW_OCOTP_SRK2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK3                      OCOTP_HW_OCOTP_SRK3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK4                      OCOTP_HW_OCOTP_SRK4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK5                      OCOTP_HW_OCOTP_SRK5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK6                      OCOTP_HW_OCOTP_SRK6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK7                      OCOTP_HW_OCOTP_SRK7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP0                 OCOTP_HW_OCOTP_SJC_RESP0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SJC_RESP1                 OCOTP_HW_OCOTP_SJC_RESP1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_USB_ID                    OCOTP_HW_OCOTP_USB_ID_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_FIELD_RETURN              OCOTP_HW_OCOTP_FIELD_RETURN_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR0                 OCOTP_HW_OCOTP_MAC_ADDR0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR1                 OCOTP_HW_OCOTP_MAC_ADDR1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAC_ADDR2                 OCOTP_HW_OCOTP_MAC_ADDR2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_SRK_REVOKE                OCOTP_HW_OCOTP_SRK_REVOKE_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY0                  OCOTP_HW_OCOTP_MAU_KEY0_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY1                  OCOTP_HW_OCOTP_MAU_KEY1_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY2                  OCOTP_HW_OCOTP_MAU_KEY2_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY3                  OCOTP_HW_OCOTP_MAU_KEY3_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY4                  OCOTP_HW_OCOTP_MAU_KEY4_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY5                  OCOTP_HW_OCOTP_MAU_KEY5_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY6                  OCOTP_HW_OCOTP_MAU_KEY6_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_MAU_KEY7                  OCOTP_HW_OCOTP_MAU_KEY7_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP10                      OCOTP_HW_OCOTP_GP10_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP11                      OCOTP_HW_OCOTP_GP11_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP20                      OCOTP_HW_OCOTP_GP20_REG(OCOTP_BASE_PTR)
#define OCOTP_HW_OCOTP_GP21                      OCOTP_HW_OCOTP_GP21_REG(OCOTP_BASE_PTR)

/*!
 * @}
 */ /* end of group OCOTP_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group OCOTP_Peripheral */


/* ----------------------------------------------------------------------------
   -- PDM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PDM_Peripheral PDM
 * @{
 */

/** PDM - Peripheral register structure */
typedef struct PDM_MemMap {
  uint32_t CTRL_1;                                 /**< MICFIL Control register 1, offset: 0x0 */
  uint32_t CTRL_2;                                 /**< MICFIL Control register 2, offset: 0x4 */
  uint32_t STAT;                                   /**< MICFIL Status register, offset: 0x8 */
  uint8_t RESERVED_0[4];
  uint32_t FIFO_CTRL;                              /**< MICFIL FIFO Control register, offset: 0x10 */
  uint32_t FIFO_STAT;                              /**< MICFIL FIFO Status register, offset: 0x14 */
  uint8_t RESERVED_1[12];
  uint32_t DATACH[8];                              /**< MICFIL Output Result Register, array offset: 0x24, array step: 0x4 */
  uint8_t RESERVED_2[32];
  uint32_t DC_CTRL;                                /**< MICFIL DC Remover Control register, offset: 0x64 */
  uint8_t RESERVED_3[12];
  uint32_t OUT_CTRL;                               /**< MICFIL Output Control register, offset: 0x74 */
  uint8_t RESERVED_4[4];
  uint32_t OUT_STAT;                               /**< MICFIL Output Status register, offset: 0x7C */
  uint8_t RESERVED_5[16];
  uint32_t VAD0_CTRL_1;                            /**< Voice Activity Detector 0 Control register, offset: 0x90 */
  uint32_t VAD0_CTRL_2;                            /**< Voice Activity Detector 0 Control register, offset: 0x94 */
  uint32_t VAD0_STAT;                              /**< Voice Activity Detector 0 Status register, offset: 0x98 */
  uint32_t VAD0_SCONFIG;                           /**< Voice Activity Detector 0 Signal Configuration, offset: 0x9C */
  uint32_t VAD0_NCONFIG;                           /**< Voice Activity Detector 0 Noise Configuration, offset: 0xA0 */
  uint32_t VAD0_NDATA;                             /**< Voice Activity Detector 0 Noise Data, offset: 0xA4 */
  uint32_t VAD0_ZCD;                               /**< Voice Activity Detector 0 Zero-Crossing Detector, offset: 0xA8 */
} volatile *PDM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PDM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PDM_Register_Accessor_Macros PDM - Register accessor macros
 * @{
 */


/* PDM - Register accessors */
#define PDM_CTRL_1_REG(base)                     ((base)->CTRL_1)
#define PDM_CTRL_2_REG(base)                     ((base)->CTRL_2)
#define PDM_STAT_REG(base)                       ((base)->STAT)
#define PDM_FIFO_CTRL_REG(base)                  ((base)->FIFO_CTRL)
#define PDM_FIFO_STAT_REG(base)                  ((base)->FIFO_STAT)
#define PDM_DATACH_REG(base,index)               ((base)->DATACH[index])
#define PDM_DC_CTRL_REG(base)                    ((base)->DC_CTRL)
#define PDM_OUT_CTRL_REG(base)                   ((base)->OUT_CTRL)
#define PDM_OUT_STAT_REG(base)                   ((base)->OUT_STAT)
#define PDM_VAD0_CTRL_1_REG(base)                ((base)->VAD0_CTRL_1)
#define PDM_VAD0_CTRL_2_REG(base)                ((base)->VAD0_CTRL_2)
#define PDM_VAD0_STAT_REG(base)                  ((base)->VAD0_STAT)
#define PDM_VAD0_SCONFIG_REG(base)               ((base)->VAD0_SCONFIG)
#define PDM_VAD0_NCONFIG_REG(base)               ((base)->VAD0_NCONFIG)
#define PDM_VAD0_NDATA_REG(base)                 ((base)->VAD0_NDATA)
#define PDM_VAD0_ZCD_REG(base)                   ((base)->VAD0_ZCD)

/*!
 * @}
 */ /* end of group PDM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PDM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PDM_Register_Masks PDM Register Masks
 * @{
 */

/*! @name CTRL_1 - MICFIL Control register 1 */
/*! @{ */
#define PDM_CTRL_1_CH0EN_MASK                    (0x1U)
#define PDM_CTRL_1_CH0EN_SHIFT                   (0U)
#define PDM_CTRL_1_CH1EN_MASK                    (0x2U)
#define PDM_CTRL_1_CH1EN_SHIFT                   (1U)
#define PDM_CTRL_1_CH2EN_MASK                    (0x4U)
#define PDM_CTRL_1_CH2EN_SHIFT                   (2U)
#define PDM_CTRL_1_CH3EN_MASK                    (0x8U)
#define PDM_CTRL_1_CH3EN_SHIFT                   (3U)
#define PDM_CTRL_1_CH4EN_MASK                    (0x10U)
#define PDM_CTRL_1_CH4EN_SHIFT                   (4U)
#define PDM_CTRL_1_CH5EN_MASK                    (0x20U)
#define PDM_CTRL_1_CH5EN_SHIFT                   (5U)
#define PDM_CTRL_1_CH6EN_MASK                    (0x40U)
#define PDM_CTRL_1_CH6EN_SHIFT                   (6U)
#define PDM_CTRL_1_CH7EN_MASK                    (0x80U)
#define PDM_CTRL_1_CH7EN_SHIFT                   (7U)
#define PDM_CTRL_1_ERREN_MASK                    (0x800000U)
#define PDM_CTRL_1_ERREN_SHIFT                   (23U)
#define PDM_CTRL_1_DISEL_MASK                    (0x3000000U)
#define PDM_CTRL_1_DISEL_SHIFT                   (24U)
/*! DISEL - DMA Interrupt Selection
 *  0b00..DMA and interrupt requests disabled
 *  0b01..DMA requests enabled
 *  0b10..Interrupt requests enabled
 *  0b11..Reserved
 */
#define PDM_CTRL_1_DISEL(x)                      (((uint32_t)(((uint32_t)(x)) << PDM_CTRL_1_DISEL_SHIFT)) & PDM_CTRL_1_DISEL_MASK)
#define PDM_CTRL_1_DBGE_MASK                     (0x4000000U)
#define PDM_CTRL_1_DBGE_SHIFT                    (26U)
#define PDM_CTRL_1_SRES_MASK                     (0x8000000U)
#define PDM_CTRL_1_SRES_SHIFT                    (27U)
#define PDM_CTRL_1_DBG_MASK                      (0x10000000U)
#define PDM_CTRL_1_DBG_SHIFT                     (28U)
#define PDM_CTRL_1_PDMIEN_MASK                   (0x20000000U)
#define PDM_CTRL_1_PDMIEN_SHIFT                  (29U)
#define PDM_CTRL_1_DOZEN_MASK                    (0x40000000U)
#define PDM_CTRL_1_DOZEN_SHIFT                   (30U)
#define PDM_CTRL_1_MDIS_MASK                     (0x80000000U)
#define PDM_CTRL_1_MDIS_SHIFT                    (31U)
/*! @} */

/*! @name CTRL_2 - MICFIL Control register 2 */
/*! @{ */
#define PDM_CTRL_2_CLKDIV_MASK                   (0xFFU)
#define PDM_CTRL_2_CLKDIV_SHIFT                  (0U)
#define PDM_CTRL_2_CLKDIV(x)                     (((uint32_t)(((uint32_t)(x)) << PDM_CTRL_2_CLKDIV_SHIFT)) & PDM_CTRL_2_CLKDIV_MASK)
#define PDM_CTRL_2_CICOSR_MASK                   (0xF0000U)
#define PDM_CTRL_2_CICOSR_SHIFT                  (16U)
#define PDM_CTRL_2_CICOSR(x)                     (((uint32_t)(((uint32_t)(x)) << PDM_CTRL_2_CICOSR_SHIFT)) & PDM_CTRL_2_CICOSR_MASK)
#define PDM_CTRL_2_QSEL_MASK                     (0xE000000U)
#define PDM_CTRL_2_QSEL_SHIFT                    (25U)
/*! QSEL - Quality Select
 *  0b001..High quality mode.
 *  0b000..Medium quality mode.
 *  0b111..Low quality mode.
 *  0b110..Very low quality 0 mode.
 *  0b101..Very low quality 1 mode.
 *  0b100..Very low quality 2 mode.
 */
#define PDM_CTRL_2_QSEL(x)                       (((uint32_t)(((uint32_t)(x)) << PDM_CTRL_2_QSEL_SHIFT)) & PDM_CTRL_2_QSEL_MASK)
/*! @} */

/*! @name STAT - MICFIL Status register */
/*! @{ */
#define PDM_STAT_CH0F_MASK                       (0x1U)
#define PDM_STAT_CH0F_SHIFT                      (0U)
#define PDM_STAT_CH1F_MASK                       (0x2U)
#define PDM_STAT_CH1F_SHIFT                      (1U)
#define PDM_STAT_CH2F_MASK                       (0x4U)
#define PDM_STAT_CH2F_SHIFT                      (2U)
#define PDM_STAT_CH3F_MASK                       (0x8U)
#define PDM_STAT_CH3F_SHIFT                      (3U)
#define PDM_STAT_CH4F_MASK                       (0x10U)
#define PDM_STAT_CH4F_SHIFT                      (4U)
#define PDM_STAT_CH5F_MASK                       (0x20U)
#define PDM_STAT_CH5F_SHIFT                      (5U)
#define PDM_STAT_CH6F_MASK                       (0x40U)
#define PDM_STAT_CH6F_SHIFT                      (6U)
#define PDM_STAT_CH7F_MASK                       (0x80U)
#define PDM_STAT_CH7F_SHIFT                      (7U)
#define PDM_STAT_LOWFREQF_MASK                   (0x20000000U)
#define PDM_STAT_LOWFREQF_SHIFT                  (29U)
#define PDM_STAT_FIR_RDY_MASK                    (0x40000000U)
#define PDM_STAT_FIR_RDY_SHIFT                   (30U)
#define PDM_STAT_BSY_FIL_MASK                    (0x80000000U)
#define PDM_STAT_BSY_FIL_SHIFT                   (31U)
/*! @} */

/*! @name FIFO_CTRL - MICFIL FIFO Control register */
/*! @{ */
#define PDM_FIFO_CTRL_FIFOWMK_MASK               (0x7U)
#define PDM_FIFO_CTRL_FIFOWMK_SHIFT              (0U)
#define PDM_FIFO_CTRL_FIFOWMK(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_FIFO_CTRL_FIFOWMK_SHIFT)) & PDM_FIFO_CTRL_FIFOWMK_MASK)
/*! @} */

/*! @name FIFO_STAT - MICFIL FIFO Status register */
/*! @{ */
#define PDM_FIFO_STAT_FIFOOVF0_MASK              (0x1U)
#define PDM_FIFO_STAT_FIFOOVF0_SHIFT             (0U)
#define PDM_FIFO_STAT_FIFOOVF1_MASK              (0x2U)
#define PDM_FIFO_STAT_FIFOOVF1_SHIFT             (1U)
#define PDM_FIFO_STAT_FIFOOVF2_MASK              (0x4U)
#define PDM_FIFO_STAT_FIFOOVF2_SHIFT             (2U)
#define PDM_FIFO_STAT_FIFOOVF3_MASK              (0x8U)
#define PDM_FIFO_STAT_FIFOOVF3_SHIFT             (3U)
#define PDM_FIFO_STAT_FIFOOVF4_MASK              (0x10U)
#define PDM_FIFO_STAT_FIFOOVF4_SHIFT             (4U)
#define PDM_FIFO_STAT_FIFOOVF5_MASK              (0x20U)
#define PDM_FIFO_STAT_FIFOOVF5_SHIFT             (5U)
#define PDM_FIFO_STAT_FIFOOVF6_MASK              (0x40U)
#define PDM_FIFO_STAT_FIFOOVF6_SHIFT             (6U)
#define PDM_FIFO_STAT_FIFOOVF7_MASK              (0x80U)
#define PDM_FIFO_STAT_FIFOOVF7_SHIFT             (7U)
#define PDM_FIFO_STAT_FIFOUND0_MASK              (0x100U)
#define PDM_FIFO_STAT_FIFOUND0_SHIFT             (8U)
#define PDM_FIFO_STAT_FIFOUND1_MASK              (0x200U)
#define PDM_FIFO_STAT_FIFOUND1_SHIFT             (9U)
#define PDM_FIFO_STAT_FIFOUND2_MASK              (0x400U)
#define PDM_FIFO_STAT_FIFOUND2_SHIFT             (10U)
#define PDM_FIFO_STAT_FIFOUND3_MASK              (0x800U)
#define PDM_FIFO_STAT_FIFOUND3_SHIFT             (11U)
#define PDM_FIFO_STAT_FIFOUND4_MASK              (0x1000U)
#define PDM_FIFO_STAT_FIFOUND4_SHIFT             (12U)
#define PDM_FIFO_STAT_FIFOUND5_MASK              (0x2000U)
#define PDM_FIFO_STAT_FIFOUND5_SHIFT             (13U)
#define PDM_FIFO_STAT_FIFOUND6_MASK              (0x4000U)
#define PDM_FIFO_STAT_FIFOUND6_SHIFT             (14U)
#define PDM_FIFO_STAT_FIFOUND7_MASK              (0x8000U)
#define PDM_FIFO_STAT_FIFOUND7_SHIFT             (15U)
/*! @} */

/*! @name DATACH - MICFIL Output Result Register */
/*! @{ */
#define PDM_DATACH_DATA_MASK                     (0xFFFFU)
#define PDM_DATACH_DATA_SHIFT                    (0U)
#define PDM_DATACH_DATA(x)                       (((uint32_t)(((uint32_t)(x)) << PDM_DATACH_DATA_SHIFT)) & PDM_DATACH_DATA_MASK)
/*! @} */

/* The count of PDM_DATACH */
#define PDM_DATACH_COUNT                         (8U)

/*! @name DC_CTRL - MICFIL DC Remover Control register */
/*! @{ */
#define PDM_DC_CTRL_DCCONFIG0_MASK               (0x3U)
#define PDM_DC_CTRL_DCCONFIG0_SHIFT              (0U)
/*! DCCONFIG0 - Channel 0 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG0(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG0_SHIFT)) & PDM_DC_CTRL_DCCONFIG0_MASK)
#define PDM_DC_CTRL_DCCONFIG1_MASK               (0xCU)
#define PDM_DC_CTRL_DCCONFIG1_SHIFT              (2U)
/*! DCCONFIG1 - Channel 1 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG1(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG1_SHIFT)) & PDM_DC_CTRL_DCCONFIG1_MASK)
#define PDM_DC_CTRL_DCCONFIG2_MASK               (0x30U)
#define PDM_DC_CTRL_DCCONFIG2_SHIFT              (4U)
/*! DCCONFIG2 - Channel 2 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG2(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG2_SHIFT)) & PDM_DC_CTRL_DCCONFIG2_MASK)
#define PDM_DC_CTRL_DCCONFIG3_MASK               (0xC0U)
#define PDM_DC_CTRL_DCCONFIG3_SHIFT              (6U)
/*! DCCONFIG3 - Channel 3 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG3(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG3_SHIFT)) & PDM_DC_CTRL_DCCONFIG3_MASK)
#define PDM_DC_CTRL_DCCONFIG4_MASK               (0x300U)
#define PDM_DC_CTRL_DCCONFIG4_SHIFT              (8U)
/*! DCCONFIG4 - Channel 4 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG4(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG4_SHIFT)) & PDM_DC_CTRL_DCCONFIG4_MASK)
#define PDM_DC_CTRL_DCCONFIG5_MASK               (0xC00U)
#define PDM_DC_CTRL_DCCONFIG5_SHIFT              (10U)
/*! DCCONFIG5 - Channel 5 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG5(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG5_SHIFT)) & PDM_DC_CTRL_DCCONFIG5_MASK)
#define PDM_DC_CTRL_DCCONFIG6_MASK               (0x3000U)
#define PDM_DC_CTRL_DCCONFIG6_SHIFT              (12U)
/*! DCCONFIG6 - Channel 6 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG6(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG6_SHIFT)) & PDM_DC_CTRL_DCCONFIG6_MASK)
#define PDM_DC_CTRL_DCCONFIG7_MASK               (0xC000U)
#define PDM_DC_CTRL_DCCONFIG7_SHIFT              (14U)
/*! DCCONFIG7 - Channel 7 DC Remover Configuration
 *  0b11..DC Remover is bypassed.
 *  0b00..DC Remover cut-off at 21Hz.
 *  0b01..DC Remover cut-off at 83Hz.
 *  0b10..DC Remover cut-off at 152Hz.
 */
#define PDM_DC_CTRL_DCCONFIG7(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_DC_CTRL_DCCONFIG7_SHIFT)) & PDM_DC_CTRL_DCCONFIG7_MASK)
/*! @} */

/*! @name OUT_CTRL - MICFIL Output Control register */
/*! @{ */
#define PDM_OUT_CTRL_OUTGAIN0_MASK               (0xFU)
#define PDM_OUT_CTRL_OUTGAIN0_SHIFT              (0U)
#define PDM_OUT_CTRL_OUTGAIN0(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN0_SHIFT)) & PDM_OUT_CTRL_OUTGAIN0_MASK)
#define PDM_OUT_CTRL_OUTGAIN1_MASK               (0xF0U)
#define PDM_OUT_CTRL_OUTGAIN1_SHIFT              (4U)
#define PDM_OUT_CTRL_OUTGAIN1(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN1_SHIFT)) & PDM_OUT_CTRL_OUTGAIN1_MASK)
#define PDM_OUT_CTRL_OUTGAIN2_MASK               (0xF00U)
#define PDM_OUT_CTRL_OUTGAIN2_SHIFT              (8U)
#define PDM_OUT_CTRL_OUTGAIN2(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN2_SHIFT)) & PDM_OUT_CTRL_OUTGAIN2_MASK)
#define PDM_OUT_CTRL_OUTGAIN3_MASK               (0xF000U)
#define PDM_OUT_CTRL_OUTGAIN3_SHIFT              (12U)
#define PDM_OUT_CTRL_OUTGAIN3(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN3_SHIFT)) & PDM_OUT_CTRL_OUTGAIN3_MASK)
#define PDM_OUT_CTRL_OUTGAIN4_MASK               (0xF0000U)
#define PDM_OUT_CTRL_OUTGAIN4_SHIFT              (16U)
#define PDM_OUT_CTRL_OUTGAIN4(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN4_SHIFT)) & PDM_OUT_CTRL_OUTGAIN4_MASK)
#define PDM_OUT_CTRL_OUTGAIN5_MASK               (0xF00000U)
#define PDM_OUT_CTRL_OUTGAIN5_SHIFT              (20U)
#define PDM_OUT_CTRL_OUTGAIN5(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN5_SHIFT)) & PDM_OUT_CTRL_OUTGAIN5_MASK)
#define PDM_OUT_CTRL_OUTGAIN6_MASK               (0xF000000U)
#define PDM_OUT_CTRL_OUTGAIN6_SHIFT              (24U)
#define PDM_OUT_CTRL_OUTGAIN6(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN6_SHIFT)) & PDM_OUT_CTRL_OUTGAIN6_MASK)
#define PDM_OUT_CTRL_OUTGAIN7_MASK               (0xF0000000U)
#define PDM_OUT_CTRL_OUTGAIN7_SHIFT              (28U)
#define PDM_OUT_CTRL_OUTGAIN7(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_OUT_CTRL_OUTGAIN7_SHIFT)) & PDM_OUT_CTRL_OUTGAIN7_MASK)
/*! @} */

/*! @name OUT_STAT - MICFIL Output Status register */
/*! @{ */
#define PDM_OUT_STAT_OUTOVF0_MASK                (0x1U)
#define PDM_OUT_STAT_OUTOVF0_SHIFT               (0U)
#define PDM_OUT_STAT_OUTOVF1_MASK                (0x2U)
#define PDM_OUT_STAT_OUTOVF1_SHIFT               (1U)
#define PDM_OUT_STAT_OUTOVF2_MASK                (0x4U)
#define PDM_OUT_STAT_OUTOVF2_SHIFT               (2U)
#define PDM_OUT_STAT_OUTOVF3_MASK                (0x8U)
#define PDM_OUT_STAT_OUTOVF3_SHIFT               (3U)
#define PDM_OUT_STAT_OUTOVF4_MASK                (0x10U)
#define PDM_OUT_STAT_OUTOVF4_SHIFT               (4U)
#define PDM_OUT_STAT_OUTOVF5_MASK                (0x20U)
#define PDM_OUT_STAT_OUTOVF5_SHIFT               (5U)
#define PDM_OUT_STAT_OUTOVF6_MASK                (0x40U)
#define PDM_OUT_STAT_OUTOVF6_SHIFT               (6U)
#define PDM_OUT_STAT_OUTOVF7_MASK                (0x80U)
#define PDM_OUT_STAT_OUTOVF7_SHIFT               (7U)
#define PDM_OUT_STAT_OUTUNF0_MASK                (0x10000U)
#define PDM_OUT_STAT_OUTUNF0_SHIFT               (16U)
#define PDM_OUT_STAT_OUTUNF1_MASK                (0x20000U)
#define PDM_OUT_STAT_OUTUNF1_SHIFT               (17U)
#define PDM_OUT_STAT_OUTUNF2_MASK                (0x40000U)
#define PDM_OUT_STAT_OUTUNF2_SHIFT               (18U)
#define PDM_OUT_STAT_OUTUNF3_MASK                (0x80000U)
#define PDM_OUT_STAT_OUTUNF3_SHIFT               (19U)
#define PDM_OUT_STAT_OUTUNF4_MASK                (0x100000U)
#define PDM_OUT_STAT_OUTUNF4_SHIFT               (20U)
#define PDM_OUT_STAT_OUTUNF5_MASK                (0x200000U)
#define PDM_OUT_STAT_OUTUNF5_SHIFT               (21U)
#define PDM_OUT_STAT_OUTUNF6_MASK                (0x400000U)
#define PDM_OUT_STAT_OUTUNF6_SHIFT               (22U)
#define PDM_OUT_STAT_OUTUNF7_MASK                (0x800000U)
#define PDM_OUT_STAT_OUTUNF7_SHIFT               (23U)
/*! @} */

/*! @name VAD0_CTRL_1 - Voice Activity Detector 0 Control register */
/*! @{ */
#define PDM_VAD0_CTRL_1_VADEN_MASK               (0x1U)
#define PDM_VAD0_CTRL_1_VADEN_SHIFT              (0U)
#define PDM_VAD0_CTRL_1_VADRST_MASK              (0x2U)
#define PDM_VAD0_CTRL_1_VADRST_SHIFT             (1U)
#define PDM_VAD0_CTRL_1_VADIE_MASK               (0x4U)
#define PDM_VAD0_CTRL_1_VADIE_SHIFT              (2U)
#define PDM_VAD0_CTRL_1_VADERIE_MASK             (0x8U)
#define PDM_VAD0_CTRL_1_VADERIE_SHIFT            (3U)
#define PDM_VAD0_CTRL_1_VADST10_MASK             (0x10U)
#define PDM_VAD0_CTRL_1_VADST10_SHIFT            (4U)
#define PDM_VAD0_CTRL_1_VADINITT_MASK            (0x1F00U)
#define PDM_VAD0_CTRL_1_VADINITT_SHIFT           (8U)
#define PDM_VAD0_CTRL_1_VADINITT(x)              (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_1_VADINITT_SHIFT)) & PDM_VAD0_CTRL_1_VADINITT_MASK)
#define PDM_VAD0_CTRL_1_VADCICOSR_MASK           (0xF0000U)
#define PDM_VAD0_CTRL_1_VADCICOSR_SHIFT          (16U)
#define PDM_VAD0_CTRL_1_VADCICOSR(x)             (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_1_VADCICOSR_SHIFT)) & PDM_VAD0_CTRL_1_VADCICOSR_MASK)
#define PDM_VAD0_CTRL_1_VADCHSEL_MASK            (0x7000000U)
#define PDM_VAD0_CTRL_1_VADCHSEL_SHIFT           (24U)
#define PDM_VAD0_CTRL_1_VADCHSEL(x)              (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_1_VADCHSEL_SHIFT)) & PDM_VAD0_CTRL_1_VADCHSEL_MASK)
/*! @} */

/*! @name VAD0_CTRL_2 - Voice Activity Detector 0 Control register */
/*! @{ */
#define PDM_VAD0_CTRL_2_VADHPF_MASK              (0x3U)
#define PDM_VAD0_CTRL_2_VADHPF_SHIFT             (0U)
/*! VADHPF - Voice Activity Detector High-Pass Filter
 *  0b00..Filter bypassed.
 *  0b01..Cut-off frequency at 1750Hz.
 *  0b10..Cut-off frequency at 215Hz.
 *  0b11..Cut-off frequency at 102Hz.
 */
#define PDM_VAD0_CTRL_2_VADHPF(x)                (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_2_VADHPF_SHIFT)) & PDM_VAD0_CTRL_2_VADHPF_MASK)
#define PDM_VAD0_CTRL_2_VADINPGAIN_MASK          (0xF00U)
#define PDM_VAD0_CTRL_2_VADINPGAIN_SHIFT         (8U)
#define PDM_VAD0_CTRL_2_VADINPGAIN(x)            (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_2_VADINPGAIN_SHIFT)) & PDM_VAD0_CTRL_2_VADINPGAIN_MASK)
#define PDM_VAD0_CTRL_2_VADFRAMET_MASK           (0x3F0000U)
#define PDM_VAD0_CTRL_2_VADFRAMET_SHIFT          (16U)
#define PDM_VAD0_CTRL_2_VADFRAMET(x)             (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_CTRL_2_VADFRAMET_SHIFT)) & PDM_VAD0_CTRL_2_VADFRAMET_MASK)
#define PDM_VAD0_CTRL_2_VADFOUTDIS_MASK          (0x10000000U)
#define PDM_VAD0_CTRL_2_VADFOUTDIS_SHIFT         (28U)
#define PDM_VAD0_CTRL_2_VADPREFEN_MASK           (0x40000000U)
#define PDM_VAD0_CTRL_2_VADPREFEN_SHIFT          (30U)
#define PDM_VAD0_CTRL_2_VADFRENDIS_MASK          (0x80000000U)
#define PDM_VAD0_CTRL_2_VADFRENDIS_SHIFT         (31U)
/*! @} */

/*! @name VAD0_STAT - Voice Activity Detector 0 Status register */
/*! @{ */
#define PDM_VAD0_STAT_VADIF_MASK                 (0x1U)
#define PDM_VAD0_STAT_VADIF_SHIFT                (0U)
#define PDM_VAD0_STAT_VADEF_MASK                 (0x8000U)
#define PDM_VAD0_STAT_VADEF_SHIFT                (15U)
#define PDM_VAD0_STAT_VADINSATF_MASK             (0x10000U)
#define PDM_VAD0_STAT_VADINSATF_SHIFT            (16U)
#define PDM_VAD0_STAT_VADINITF_MASK              (0x80000000U)
#define PDM_VAD0_STAT_VADINITF_SHIFT             (31U)
/*! @} */

/*! @name VAD0_SCONFIG - Voice Activity Detector 0 Signal Configuration */
/*! @{ */
#define PDM_VAD0_SCONFIG_VADSGAIN_MASK           (0xFU)
#define PDM_VAD0_SCONFIG_VADSGAIN_SHIFT          (0U)
#define PDM_VAD0_SCONFIG_VADSGAIN(x)             (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_SCONFIG_VADSGAIN_SHIFT)) & PDM_VAD0_SCONFIG_VADSGAIN_MASK)
#define PDM_VAD0_SCONFIG_VADSMAXEN_MASK          (0x40000000U)
#define PDM_VAD0_SCONFIG_VADSMAXEN_SHIFT         (30U)
#define PDM_VAD0_SCONFIG_VADSFILEN_MASK          (0x80000000U)
#define PDM_VAD0_SCONFIG_VADSFILEN_SHIFT         (31U)
/*! @} */

/*! @name VAD0_NCONFIG - Voice Activity Detector 0 Noise Configuration */
/*! @{ */
#define PDM_VAD0_NCONFIG_VADNGAIN_MASK           (0xFU)
#define PDM_VAD0_NCONFIG_VADNGAIN_SHIFT          (0U)
#define PDM_VAD0_NCONFIG_VADNGAIN(x)             (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_NCONFIG_VADNGAIN_SHIFT)) & PDM_VAD0_NCONFIG_VADNGAIN_MASK)
#define PDM_VAD0_NCONFIG_VADNFILADJ_MASK         (0x1F00U)
#define PDM_VAD0_NCONFIG_VADNFILADJ_SHIFT        (8U)
#define PDM_VAD0_NCONFIG_VADNFILADJ(x)           (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_NCONFIG_VADNFILADJ_SHIFT)) & PDM_VAD0_NCONFIG_VADNFILADJ_MASK)
#define PDM_VAD0_NCONFIG_VADNOREN_MASK           (0x10000000U)
#define PDM_VAD0_NCONFIG_VADNOREN_SHIFT          (28U)
#define PDM_VAD0_NCONFIG_VADNDECEN_MASK          (0x20000000U)
#define PDM_VAD0_NCONFIG_VADNDECEN_SHIFT         (29U)
#define PDM_VAD0_NCONFIG_VADNMINEN_MASK          (0x40000000U)
#define PDM_VAD0_NCONFIG_VADNMINEN_SHIFT         (30U)
#define PDM_VAD0_NCONFIG_VADNFILAUTO_MASK        (0x80000000U)
#define PDM_VAD0_NCONFIG_VADNFILAUTO_SHIFT       (31U)
/*! @} */

/*! @name VAD0_NDATA - Voice Activity Detector 0 Noise Data */
/*! @{ */
#define PDM_VAD0_NDATA_VADNDATA_MASK             (0xFFFFU)
#define PDM_VAD0_NDATA_VADNDATA_SHIFT            (0U)
#define PDM_VAD0_NDATA_VADNDATA(x)               (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_NDATA_VADNDATA_SHIFT)) & PDM_VAD0_NDATA_VADNDATA_MASK)
/*! @} */

/*! @name VAD0_ZCD - Voice Activity Detector 0 Zero-Crossing Detector */
/*! @{ */
#define PDM_VAD0_ZCD_VADZCDEN_MASK               (0x1U)
#define PDM_VAD0_ZCD_VADZCDEN_SHIFT              (0U)
#define PDM_VAD0_ZCD_VADZCDAUTO_MASK             (0x4U)
#define PDM_VAD0_ZCD_VADZCDAUTO_SHIFT            (2U)
#define PDM_VAD0_ZCD_VADZCDAND_MASK              (0x10U)
#define PDM_VAD0_ZCD_VADZCDAND_SHIFT             (4U)
#define PDM_VAD0_ZCD_VADZCDADJ_MASK              (0xF00U)
#define PDM_VAD0_ZCD_VADZCDADJ_SHIFT             (8U)
#define PDM_VAD0_ZCD_VADZCDADJ(x)                (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_ZCD_VADZCDADJ_SHIFT)) & PDM_VAD0_ZCD_VADZCDADJ_MASK)
#define PDM_VAD0_ZCD_VADZCDTH_MASK               (0x3FF0000U)
#define PDM_VAD0_ZCD_VADZCDTH_SHIFT              (16U)
#define PDM_VAD0_ZCD_VADZCDTH(x)                 (((uint32_t)(((uint32_t)(x)) << PDM_VAD0_ZCD_VADZCDTH_SHIFT)) & PDM_VAD0_ZCD_VADZCDTH_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PDM_Register_Masks */


/* PDM - Peripheral instance base addresses */
/** Peripheral PDM base pointer */
#define PDM_BASE_PTR                             ((PDM_MemMapPtr)0x30080000u)
/** Array initializer of PDM peripheral base pointers */
#define PDM_BASE_PTRS                            { PDM_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PDM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PDM_Register_Accessor_Macros PDM - Register accessor macros
 * @{
 */


/* PDM - Register instance definitions */
/* PDM */
#define PDM_CTRL_1                               PDM_CTRL_1_REG(PDM_BASE_PTR)
#define PDM_CTRL_2                               PDM_CTRL_2_REG(PDM_BASE_PTR)
#define PDM_STAT                                 PDM_STAT_REG(PDM_BASE_PTR)
#define PDM_FIFO_CTRL                            PDM_FIFO_CTRL_REG(PDM_BASE_PTR)
#define PDM_FIFO_STAT                            PDM_FIFO_STAT_REG(PDM_BASE_PTR)
#define PDM_DATACH0                              PDM_DATACH_REG(PDM_BASE_PTR,0)
#define PDM_DATACH1                              PDM_DATACH_REG(PDM_BASE_PTR,1)
#define PDM_DATACH2                              PDM_DATACH_REG(PDM_BASE_PTR,2)
#define PDM_DATACH3                              PDM_DATACH_REG(PDM_BASE_PTR,3)
#define PDM_DATACH4                              PDM_DATACH_REG(PDM_BASE_PTR,4)
#define PDM_DATACH5                              PDM_DATACH_REG(PDM_BASE_PTR,5)
#define PDM_DATACH6                              PDM_DATACH_REG(PDM_BASE_PTR,6)
#define PDM_DATACH7                              PDM_DATACH_REG(PDM_BASE_PTR,7)
#define PDM_DC_CTRL                              PDM_DC_CTRL_REG(PDM_BASE_PTR)
#define PDM_OUT_CTRL                             PDM_OUT_CTRL_REG(PDM_BASE_PTR)
#define PDM_OUT_STAT                             PDM_OUT_STAT_REG(PDM_BASE_PTR)
#define PDM_VAD0_CTRL_1                          PDM_VAD0_CTRL_1_REG(PDM_BASE_PTR)
#define PDM_VAD0_CTRL_2                          PDM_VAD0_CTRL_2_REG(PDM_BASE_PTR)
#define PDM_VAD0_STAT                            PDM_VAD0_STAT_REG(PDM_BASE_PTR)
#define PDM_VAD0_SCONFIG                         PDM_VAD0_SCONFIG_REG(PDM_BASE_PTR)
#define PDM_VAD0_NCONFIG                         PDM_VAD0_NCONFIG_REG(PDM_BASE_PTR)
#define PDM_VAD0_NDATA                           PDM_VAD0_NDATA_REG(PDM_BASE_PTR)
#define PDM_VAD0_ZCD                             PDM_VAD0_ZCD_REG(PDM_BASE_PTR)

/* PDM - Register array accessors */
#define PDM_DATACH(index)                        PDM_DATACH_REG(PDM_BASE_PTR,index)

/*!
 * @}
 */ /* end of group PDM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PDM_Peripheral */


/* ----------------------------------------------------------------------------
   -- PWM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Peripheral PWM
 * @{
 */

/** PWM - Peripheral register structure */
typedef struct PWM_MemMap {
  uint32_t PWMCR;                                  /**< PWM Control Register, offset: 0x0 */
  uint32_t PWMSR;                                  /**< PWM Status Register, offset: 0x4 */
  uint32_t PWMIR;                                  /**< PWM Interrupt Register, offset: 0x8 */
  uint32_t PWMSAR;                                 /**< PWM Sample Register, offset: 0xC */
  uint32_t PWMPR;                                  /**< PWM Period Register, offset: 0x10 */
  uint32_t PWMCNR;                                 /**< PWM Counter Register, offset: 0x14 */
} volatile *PWM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register accessors */
#define PWM_PWMCR_REG(base)                      ((base)->PWMCR)
#define PWM_PWMSR_REG(base)                      ((base)->PWMSR)
#define PWM_PWMIR_REG(base)                      ((base)->PWMIR)
#define PWM_PWMSAR_REG(base)                     ((base)->PWMSAR)
#define PWM_PWMPR_REG(base)                      ((base)->PWMPR)
#define PWM_PWMCNR_REG(base)                     ((base)->PWMCNR)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- PWM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Masks PWM Register Masks
 * @{
 */

/*! @name PWMCR - PWM Control Register */
/*! @{ */
#define PWM_PWMCR_EN_MASK                        (0x1U)
#define PWM_PWMCR_EN_SHIFT                       (0U)
#define PWM_PWMCR_REPEAT_MASK                    (0x6U)
#define PWM_PWMCR_REPEAT_SHIFT                   (1U)
/*! REPEAT
 *  0b00..Use each sample once
 *  0b01..Use each sample twice
 *  0b10..Use each sample four times
 *  0b11..Use each sample eight times
 */
#define PWM_PWMCR_REPEAT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_REPEAT_SHIFT)) & PWM_PWMCR_REPEAT_MASK)
#define PWM_PWMCR_SWR_MASK                       (0x8U)
#define PWM_PWMCR_SWR_SHIFT                      (3U)
#define PWM_PWMCR_PRESCALER_MASK                 (0xFFF0U)
#define PWM_PWMCR_PRESCALER_SHIFT                (4U)
/*! PRESCALER
 *  0b000000000000..Divide by 1
 *  0b000000000001..Divide by 2
 *  0b111111111111..Divide by 4096
 */
#define PWM_PWMCR_PRESCALER(x)                   (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_PRESCALER_SHIFT)) & PWM_PWMCR_PRESCALER_MASK)
#define PWM_PWMCR_CLKSRC_MASK                    (0x30000U)
#define PWM_PWMCR_CLKSRC_SHIFT                   (16U)
/*! CLKSRC
 *  0b00..Clock is off
 *  0b01..ipg_clk
 *  0b10..ipg_clk_highfreq
 *  0b11..ipg_clk_32k
 */
#define PWM_PWMCR_CLKSRC(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_CLKSRC_SHIFT)) & PWM_PWMCR_CLKSRC_MASK)
#define PWM_PWMCR_POUTC_MASK                     (0xC0000U)
#define PWM_PWMCR_POUTC_SHIFT                    (18U)
/*! POUTC
 *  0b00..Output pin is set at rollover and cleared at comparison
 *  0b01..Output pin is cleared at rollover and set at comparison
 *  0b10..PWM output is disconnected
 *  0b11..PWM output is disconnected
 */
#define PWM_PWMCR_POUTC(x)                       (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_POUTC_SHIFT)) & PWM_PWMCR_POUTC_MASK)
#define PWM_PWMCR_HCTR_MASK                      (0x100000U)
#define PWM_PWMCR_HCTR_SHIFT                     (20U)
#define PWM_PWMCR_BCTR_MASK                      (0x200000U)
#define PWM_PWMCR_BCTR_SHIFT                     (21U)
#define PWM_PWMCR_DBGEN_MASK                     (0x400000U)
#define PWM_PWMCR_DBGEN_SHIFT                    (22U)
#define PWM_PWMCR_WAITEN_MASK                    (0x800000U)
#define PWM_PWMCR_WAITEN_SHIFT                   (23U)
#define PWM_PWMCR_DOZEN_MASK                     (0x1000000U)
#define PWM_PWMCR_DOZEN_SHIFT                    (24U)
#define PWM_PWMCR_STOPEN_MASK                    (0x2000000U)
#define PWM_PWMCR_STOPEN_SHIFT                   (25U)
#define PWM_PWMCR_FWM_MASK                       (0xC000000U)
#define PWM_PWMCR_FWM_SHIFT                      (26U)
/*! FWM
 *  0b00..FIFO empty flag is set when there are more than or equal to 1 empty slots in FIFO
 *  0b01..FIFO empty flag is set when there are more than or equal to 2 empty slots in FIFO
 *  0b10..FIFO empty flag is set when there are more than or equal to 3 empty slots in FIFO
 *  0b11..FIFO empty flag is set when there are more than or equal to 4 empty slots in FIFO
 */
#define PWM_PWMCR_FWM(x)                         (((uint32_t)(((uint32_t)(x)) << PWM_PWMCR_FWM_SHIFT)) & PWM_PWMCR_FWM_MASK)
/*! @} */

/*! @name PWMSR - PWM Status Register */
/*! @{ */
#define PWM_PWMSR_FIFOAV_MASK                    (0x7U)
#define PWM_PWMSR_FIFOAV_SHIFT                   (0U)
/*! FIFOAV
 *  0b000..No data available
 *  0b001..1 word of data in FIFO
 *  0b010..2 words of data in FIFO
 *  0b011..3 words of data in FIFO
 *  0b100..4 words of data in FIFO
 *  0b101..unused
 *  0b110..unused
 *  0b111..unused
 */
#define PWM_PWMSR_FIFOAV(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMSR_FIFOAV_SHIFT)) & PWM_PWMSR_FIFOAV_MASK)
#define PWM_PWMSR_FE_MASK                        (0x8U)
#define PWM_PWMSR_FE_SHIFT                       (3U)
#define PWM_PWMSR_ROV_MASK                       (0x10U)
#define PWM_PWMSR_ROV_SHIFT                      (4U)
#define PWM_PWMSR_CMP_MASK                       (0x20U)
#define PWM_PWMSR_CMP_SHIFT                      (5U)
#define PWM_PWMSR_FWE_MASK                       (0x40U)
#define PWM_PWMSR_FWE_SHIFT                      (6U)
/*! @} */

/*! @name PWMIR - PWM Interrupt Register */
/*! @{ */
#define PWM_PWMIR_FIE_MASK                       (0x1U)
#define PWM_PWMIR_FIE_SHIFT                      (0U)
#define PWM_PWMIR_RIE_MASK                       (0x2U)
#define PWM_PWMIR_RIE_SHIFT                      (1U)
#define PWM_PWMIR_CIE_MASK                       (0x4U)
#define PWM_PWMIR_CIE_SHIFT                      (2U)
/*! @} */

/*! @name PWMSAR - PWM Sample Register */
/*! @{ */
#define PWM_PWMSAR_SAMPLE_MASK                   (0xFFFFU)
#define PWM_PWMSAR_SAMPLE_SHIFT                  (0U)
#define PWM_PWMSAR_SAMPLE(x)                     (((uint32_t)(((uint32_t)(x)) << PWM_PWMSAR_SAMPLE_SHIFT)) & PWM_PWMSAR_SAMPLE_MASK)
/*! @} */

/*! @name PWMPR - PWM Period Register */
/*! @{ */
#define PWM_PWMPR_PERIOD_MASK                    (0xFFFFU)
#define PWM_PWMPR_PERIOD_SHIFT                   (0U)
#define PWM_PWMPR_PERIOD(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMPR_PERIOD_SHIFT)) & PWM_PWMPR_PERIOD_MASK)
/*! @} */

/*! @name PWMCNR - PWM Counter Register */
/*! @{ */
#define PWM_PWMCNR_COUNT_MASK                    (0xFFFFU)
#define PWM_PWMCNR_COUNT_SHIFT                   (0U)
#define PWM_PWMCNR_COUNT(x)                      (((uint32_t)(((uint32_t)(x)) << PWM_PWMCNR_COUNT_SHIFT)) & PWM_PWMCNR_COUNT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group PWM_Register_Masks */


/* PWM - Peripheral instance base addresses */
/** Peripheral PWM1 base pointer */
#define PWM1_BASE_PTR                            ((PWM_MemMapPtr)0x30660000u)
/** Peripheral PWM2 base pointer */
#define PWM2_BASE_PTR                            ((PWM_MemMapPtr)0x30670000u)
/** Peripheral PWM3 base pointer */
#define PWM3_BASE_PTR                            ((PWM_MemMapPtr)0x30680000u)
/** Peripheral PWM4 base pointer */
#define PWM4_BASE_PTR                            ((PWM_MemMapPtr)0x30690000u)
/** Array initializer of PWM peripheral base pointers */
#define PWM_BASE_PTRS                            { PWM1_BASE_PTR, PWM2_BASE_PTR, PWM3_BASE_PTR, PWM4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- PWM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup PWM_Register_Accessor_Macros PWM - Register accessor macros
 * @{
 */


/* PWM - Register instance definitions */
/* PWM1 */
#define PWM1_PWMCR                               PWM_PWMCR_REG(PWM1_BASE_PTR)
#define PWM1_PWMSR                               PWM_PWMSR_REG(PWM1_BASE_PTR)
#define PWM1_PWMIR                               PWM_PWMIR_REG(PWM1_BASE_PTR)
#define PWM1_PWMSAR                              PWM_PWMSAR_REG(PWM1_BASE_PTR)
#define PWM1_PWMPR                               PWM_PWMPR_REG(PWM1_BASE_PTR)
#define PWM1_PWMCNR                              PWM_PWMCNR_REG(PWM1_BASE_PTR)
/* PWM2 */
#define PWM2_PWMCR                               PWM_PWMCR_REG(PWM2_BASE_PTR)
#define PWM2_PWMSR                               PWM_PWMSR_REG(PWM2_BASE_PTR)
#define PWM2_PWMIR                               PWM_PWMIR_REG(PWM2_BASE_PTR)
#define PWM2_PWMSAR                              PWM_PWMSAR_REG(PWM2_BASE_PTR)
#define PWM2_PWMPR                               PWM_PWMPR_REG(PWM2_BASE_PTR)
#define PWM2_PWMCNR                              PWM_PWMCNR_REG(PWM2_BASE_PTR)
/* PWM3 */
#define PWM3_PWMCR                               PWM_PWMCR_REG(PWM3_BASE_PTR)
#define PWM3_PWMSR                               PWM_PWMSR_REG(PWM3_BASE_PTR)
#define PWM3_PWMIR                               PWM_PWMIR_REG(PWM3_BASE_PTR)
#define PWM3_PWMSAR                              PWM_PWMSAR_REG(PWM3_BASE_PTR)
#define PWM3_PWMPR                               PWM_PWMPR_REG(PWM3_BASE_PTR)
#define PWM3_PWMCNR                              PWM_PWMCNR_REG(PWM3_BASE_PTR)
/* PWM4 */
#define PWM4_PWMCR                               PWM_PWMCR_REG(PWM4_BASE_PTR)
#define PWM4_PWMSR                               PWM_PWMSR_REG(PWM4_BASE_PTR)
#define PWM4_PWMIR                               PWM_PWMIR_REG(PWM4_BASE_PTR)
#define PWM4_PWMSAR                              PWM_PWMSAR_REG(PWM4_BASE_PTR)
#define PWM4_PWMPR                               PWM_PWMPR_REG(PWM4_BASE_PTR)
#define PWM4_PWMCNR                              PWM_PWMCNR_REG(PWM4_BASE_PTR)

/*!
 * @}
 */ /* end of group PWM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group PWM_Peripheral */


/* ----------------------------------------------------------------------------
   -- RDC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Peripheral RDC
 * @{
 */

/** RDC - Peripheral register structure */
typedef struct RDC_MemMap {
  uint32_t VIR;                                    /**< Version Information, offset: 0x0 */
  uint8_t RESERVED_0[32];
  uint32_t STAT;                                   /**< Status, offset: 0x24 */
  uint32_t INTCTRL;                                /**< Interrupt and Control, offset: 0x28 */
  uint32_t INTSTAT;                                /**< Interrupt Status, offset: 0x2C */
  uint8_t RESERVED_1[464];
  uint32_t MDA[27];                                /**< Master Domain Assignment, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_2[404];
  uint32_t PDAP[118];                              /**< Peripheral Domain Access Permissions, array offset: 0x400, array step: 0x4 */
  uint8_t RESERVED_3[552];
  struct {                                         /* offset: 0x800, array step: 0x10 */
    uint32_t MRSA;                                   /**< Memory Region Start Address, array offset: 0x800, array step: 0x10 */
    uint32_t MREA;                                   /**< Memory Region End Address, array offset: 0x804, array step: 0x10 */
    uint32_t MRC;                                    /**< Memory Region Control, array offset: 0x808, array step: 0x10 */
    uint32_t MRVS;                                   /**< Memory Region Violation Status, array offset: 0x80C, array step: 0x10 */
  } MR[52];
} volatile *RDC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Accessor_Macros RDC - Register accessor macros
 * @{
 */


/* RDC - Register accessors */
#define RDC_VIR_REG(base)                        ((base)->VIR)
#define RDC_STAT_REG(base)                       ((base)->STAT)
#define RDC_INTCTRL_REG(base)                    ((base)->INTCTRL)
#define RDC_INTSTAT_REG(base)                    ((base)->INTSTAT)
#define RDC_MDA_REG(base,index)                  ((base)->MDA[index])
#define RDC_PDAP_REG(base,index)                 ((base)->PDAP[index])
#define RDC_MRSA_REG(base,index)                 ((base)->MR[index].MRSA)
#define RDC_MREA_REG(base,index)                 ((base)->MR[index].MREA)
#define RDC_MRC_REG(base,index)                  ((base)->MR[index].MRC)
#define RDC_MRVS_REG(base,index)                 ((base)->MR[index].MRVS)

/*!
 * @}
 */ /* end of group RDC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RDC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Masks RDC Register Masks
 * @{
 */

/*! @name VIR - Version Information */
/*! @{ */
#define RDC_VIR_NDID_MASK                        (0xFU)
#define RDC_VIR_NDID_SHIFT                       (0U)
#define RDC_VIR_NDID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NDID_SHIFT)) & RDC_VIR_NDID_MASK)
#define RDC_VIR_NMSTR_MASK                       (0xFF0U)
#define RDC_VIR_NMSTR_SHIFT                      (4U)
#define RDC_VIR_NMSTR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NMSTR_SHIFT)) & RDC_VIR_NMSTR_MASK)
#define RDC_VIR_NPER_MASK                        (0xFF000U)
#define RDC_VIR_NPER_SHIFT                       (12U)
#define RDC_VIR_NPER(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NPER_SHIFT)) & RDC_VIR_NPER_MASK)
#define RDC_VIR_NRGN_MASK                        (0xFF00000U)
#define RDC_VIR_NRGN_SHIFT                       (20U)
#define RDC_VIR_NRGN(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_VIR_NRGN_SHIFT)) & RDC_VIR_NRGN_MASK)
/*! @} */

/*! @name STAT - Status */
/*! @{ */
#define RDC_STAT_DID_MASK                        (0xFU)
#define RDC_STAT_DID_SHIFT                       (0U)
#define RDC_STAT_DID(x)                          (((uint32_t)(((uint32_t)(x)) << RDC_STAT_DID_SHIFT)) & RDC_STAT_DID_MASK)
#define RDC_STAT_PDS_MASK                        (0x100U)
#define RDC_STAT_PDS_SHIFT                       (8U)
/*! @} */

/*! @name INTCTRL - Interrupt and Control */
/*! @{ */
#define RDC_INTCTRL_RCI_EN_MASK                  (0x1U)
#define RDC_INTCTRL_RCI_EN_SHIFT                 (0U)
/*! @} */

/*! @name INTSTAT - Interrupt Status */
/*! @{ */
#define RDC_INTSTAT_INT_MASK                     (0x1U)
#define RDC_INTSTAT_INT_SHIFT                    (0U)
/*! @} */

/*! @name MDA - Master Domain Assignment */
/*! @{ */
#define RDC_MDA_DID_MASK                         (0x3U)
#define RDC_MDA_DID_SHIFT                        (0U)
/*! DID - Domain ID
 *  0b00..Master assigned to Processing Domain 0
 *  0b01..Master assigned to Processing Domain 1
 *  0b10..Master assigned to Processing Domain 2
 *  0b11..Master assigned to Processing Domain 3
 */
#define RDC_MDA_DID(x)                           (((uint32_t)(((uint32_t)(x)) << RDC_MDA_DID_SHIFT)) & RDC_MDA_DID_MASK)
#define RDC_MDA_LCK_MASK                         (0x80000000U)
#define RDC_MDA_LCK_SHIFT                        (31U)
/*! @} */

/* The count of RDC_MDA */
#define RDC_MDA_COUNT                            (27U)

/*! @name PDAP - Peripheral Domain Access Permissions */
/*! @{ */
#define RDC_PDAP_D0W_MASK                        (0x1U)
#define RDC_PDAP_D0W_SHIFT                       (0U)
#define RDC_PDAP_D0R_MASK                        (0x2U)
#define RDC_PDAP_D0R_SHIFT                       (1U)
#define RDC_PDAP_D1W_MASK                        (0x4U)
#define RDC_PDAP_D1W_SHIFT                       (2U)
#define RDC_PDAP_D1R_MASK                        (0x8U)
#define RDC_PDAP_D1R_SHIFT                       (3U)
#define RDC_PDAP_D2W_MASK                        (0x10U)
#define RDC_PDAP_D2W_SHIFT                       (4U)
#define RDC_PDAP_D2R_MASK                        (0x20U)
#define RDC_PDAP_D2R_SHIFT                       (5U)
#define RDC_PDAP_D3W_MASK                        (0x40U)
#define RDC_PDAP_D3W_SHIFT                       (6U)
#define RDC_PDAP_D3R_MASK                        (0x80U)
#define RDC_PDAP_D3R_SHIFT                       (7U)
#define RDC_PDAP_SREQ_MASK                       (0x40000000U)
#define RDC_PDAP_SREQ_SHIFT                      (30U)
#define RDC_PDAP_LCK_MASK                        (0x80000000U)
#define RDC_PDAP_LCK_SHIFT                       (31U)
/*! @} */

/* The count of RDC_PDAP */
#define RDC_PDAP_COUNT                           (118U)

/*! @name MRSA - Memory Region Start Address */
/*! @{ */
#define RDC_MRSA_SADR_MASK                       (0xFFFFFF80U)
#define RDC_MRSA_SADR_SHIFT                      (7U)
#define RDC_MRSA_SADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRSA_SADR_SHIFT)) & RDC_MRSA_SADR_MASK)
/*! @} */

/* The count of RDC_MRSA */
#define RDC_MRSA_COUNT                           (52U)

/*! @name MREA - Memory Region End Address */
/*! @{ */
#define RDC_MREA_EADR_MASK                       (0xFFFFFF80U)
#define RDC_MREA_EADR_SHIFT                      (7U)
#define RDC_MREA_EADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MREA_EADR_SHIFT)) & RDC_MREA_EADR_MASK)
/*! @} */

/* The count of RDC_MREA */
#define RDC_MREA_COUNT                           (52U)

/*! @name MRC - Memory Region Control */
/*! @{ */
#define RDC_MRC_D0W_MASK                         (0x1U)
#define RDC_MRC_D0W_SHIFT                        (0U)
#define RDC_MRC_D0R_MASK                         (0x2U)
#define RDC_MRC_D0R_SHIFT                        (1U)
#define RDC_MRC_D1W_MASK                         (0x4U)
#define RDC_MRC_D1W_SHIFT                        (2U)
#define RDC_MRC_D1R_MASK                         (0x8U)
#define RDC_MRC_D1R_SHIFT                        (3U)
#define RDC_MRC_D2W_MASK                         (0x10U)
#define RDC_MRC_D2W_SHIFT                        (4U)
#define RDC_MRC_D2R_MASK                         (0x20U)
#define RDC_MRC_D2R_SHIFT                        (5U)
#define RDC_MRC_D3W_MASK                         (0x40U)
#define RDC_MRC_D3W_SHIFT                        (6U)
#define RDC_MRC_D3R_MASK                         (0x80U)
#define RDC_MRC_D3R_SHIFT                        (7U)
#define RDC_MRC_ENA_MASK                         (0x40000000U)
#define RDC_MRC_ENA_SHIFT                        (30U)
#define RDC_MRC_LCK_MASK                         (0x80000000U)
#define RDC_MRC_LCK_SHIFT                        (31U)
/*! @} */

/* The count of RDC_MRC */
#define RDC_MRC_COUNT                            (52U)

/*! @name MRVS - Memory Region Violation Status */
/*! @{ */
#define RDC_MRVS_VDID_MASK                       (0x3U)
#define RDC_MRVS_VDID_SHIFT                      (0U)
/*! VDID - Violating Domain ID
 *  0b00..Processing Domain 0
 *  0b01..Processing Domain 1
 *  0b10..Processing Domain 2
 *  0b11..Processing Domain 3
 */
#define RDC_MRVS_VDID(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VDID_SHIFT)) & RDC_MRVS_VDID_MASK)
#define RDC_MRVS_AD_MASK                         (0x10U)
#define RDC_MRVS_AD_SHIFT                        (4U)
#define RDC_MRVS_VADR_MASK                       (0xFFFFFFE0U)
#define RDC_MRVS_VADR_SHIFT                      (5U)
#define RDC_MRVS_VADR(x)                         (((uint32_t)(((uint32_t)(x)) << RDC_MRVS_VADR_SHIFT)) & RDC_MRVS_VADR_MASK)
/*! @} */

/* The count of RDC_MRVS */
#define RDC_MRVS_COUNT                           (52U)


/*!
 * @}
 */ /* end of group RDC_Register_Masks */


/* RDC - Peripheral instance base addresses */
/** Peripheral RDC base pointer */
#define RDC_BASE_PTR                             ((RDC_MemMapPtr)0x303D0000u)
/** Array initializer of RDC peripheral base pointers */
#define RDC_BASE_PTRS                            { RDC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RDC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_Register_Accessor_Macros RDC - Register accessor macros
 * @{
 */


/* RDC - Register instance definitions */
/* RDC */
#define RDC_VIR                                  RDC_VIR_REG(RDC_BASE_PTR)
#define RDC_STAT                                 RDC_STAT_REG(RDC_BASE_PTR)
#define RDC_INTCTRL                              RDC_INTCTRL_REG(RDC_BASE_PTR)
#define RDC_INTSTAT                              RDC_INTSTAT_REG(RDC_BASE_PTR)
#define RDC_MDA0                                 RDC_MDA_REG(RDC_BASE_PTR,0)
#define RDC_MDA1                                 RDC_MDA_REG(RDC_BASE_PTR,1)
#define RDC_MDA2                                 RDC_MDA_REG(RDC_BASE_PTR,2)
#define RDC_MDA3                                 RDC_MDA_REG(RDC_BASE_PTR,3)
#define RDC_MDA4                                 RDC_MDA_REG(RDC_BASE_PTR,4)
#define RDC_MDA5                                 RDC_MDA_REG(RDC_BASE_PTR,5)
#define RDC_MDA6                                 RDC_MDA_REG(RDC_BASE_PTR,6)
#define RDC_MDA7                                 RDC_MDA_REG(RDC_BASE_PTR,7)
#define RDC_MDA8                                 RDC_MDA_REG(RDC_BASE_PTR,8)
#define RDC_MDA9                                 RDC_MDA_REG(RDC_BASE_PTR,9)
#define RDC_MDA10                                RDC_MDA_REG(RDC_BASE_PTR,10)
#define RDC_MDA11                                RDC_MDA_REG(RDC_BASE_PTR,11)
#define RDC_MDA12                                RDC_MDA_REG(RDC_BASE_PTR,12)
#define RDC_MDA13                                RDC_MDA_REG(RDC_BASE_PTR,13)
#define RDC_MDA14                                RDC_MDA_REG(RDC_BASE_PTR,14)
#define RDC_MDA15                                RDC_MDA_REG(RDC_BASE_PTR,15)
#define RDC_MDA16                                RDC_MDA_REG(RDC_BASE_PTR,16)
#define RDC_MDA17                                RDC_MDA_REG(RDC_BASE_PTR,17)
#define RDC_MDA18                                RDC_MDA_REG(RDC_BASE_PTR,18)
#define RDC_MDA19                                RDC_MDA_REG(RDC_BASE_PTR,19)
#define RDC_MDA20                                RDC_MDA_REG(RDC_BASE_PTR,20)
#define RDC_MDA21                                RDC_MDA_REG(RDC_BASE_PTR,21)
#define RDC_MDA22                                RDC_MDA_REG(RDC_BASE_PTR,22)
#define RDC_MDA23                                RDC_MDA_REG(RDC_BASE_PTR,23)
#define RDC_MDA24                                RDC_MDA_REG(RDC_BASE_PTR,24)
#define RDC_MDA25                                RDC_MDA_REG(RDC_BASE_PTR,25)
#define RDC_MDA26                                RDC_MDA_REG(RDC_BASE_PTR,26)
#define RDC_PDAP0                                RDC_PDAP_REG(RDC_BASE_PTR,0)
#define RDC_PDAP1                                RDC_PDAP_REG(RDC_BASE_PTR,1)
#define RDC_PDAP2                                RDC_PDAP_REG(RDC_BASE_PTR,2)
#define RDC_PDAP3                                RDC_PDAP_REG(RDC_BASE_PTR,3)
#define RDC_PDAP4                                RDC_PDAP_REG(RDC_BASE_PTR,4)
#define RDC_PDAP5                                RDC_PDAP_REG(RDC_BASE_PTR,5)
#define RDC_PDAP6                                RDC_PDAP_REG(RDC_BASE_PTR,6)
#define RDC_PDAP7                                RDC_PDAP_REG(RDC_BASE_PTR,7)
#define RDC_PDAP8                                RDC_PDAP_REG(RDC_BASE_PTR,8)
#define RDC_PDAP9                                RDC_PDAP_REG(RDC_BASE_PTR,9)
#define RDC_PDAP10                               RDC_PDAP_REG(RDC_BASE_PTR,10)
#define RDC_PDAP11                               RDC_PDAP_REG(RDC_BASE_PTR,11)
#define RDC_PDAP12                               RDC_PDAP_REG(RDC_BASE_PTR,12)
#define RDC_PDAP13                               RDC_PDAP_REG(RDC_BASE_PTR,13)
#define RDC_PDAP14                               RDC_PDAP_REG(RDC_BASE_PTR,14)
#define RDC_PDAP15                               RDC_PDAP_REG(RDC_BASE_PTR,15)
#define RDC_PDAP16                               RDC_PDAP_REG(RDC_BASE_PTR,16)
#define RDC_PDAP17                               RDC_PDAP_REG(RDC_BASE_PTR,17)
#define RDC_PDAP18                               RDC_PDAP_REG(RDC_BASE_PTR,18)
#define RDC_PDAP19                               RDC_PDAP_REG(RDC_BASE_PTR,19)
#define RDC_PDAP20                               RDC_PDAP_REG(RDC_BASE_PTR,20)
#define RDC_PDAP21                               RDC_PDAP_REG(RDC_BASE_PTR,21)
#define RDC_PDAP22                               RDC_PDAP_REG(RDC_BASE_PTR,22)
#define RDC_PDAP23                               RDC_PDAP_REG(RDC_BASE_PTR,23)
#define RDC_PDAP24                               RDC_PDAP_REG(RDC_BASE_PTR,24)
#define RDC_PDAP25                               RDC_PDAP_REG(RDC_BASE_PTR,25)
#define RDC_PDAP26                               RDC_PDAP_REG(RDC_BASE_PTR,26)
#define RDC_PDAP27                               RDC_PDAP_REG(RDC_BASE_PTR,27)
#define RDC_PDAP28                               RDC_PDAP_REG(RDC_BASE_PTR,28)
#define RDC_PDAP29                               RDC_PDAP_REG(RDC_BASE_PTR,29)
#define RDC_PDAP30                               RDC_PDAP_REG(RDC_BASE_PTR,30)
#define RDC_PDAP31                               RDC_PDAP_REG(RDC_BASE_PTR,31)
#define RDC_PDAP32                               RDC_PDAP_REG(RDC_BASE_PTR,32)
#define RDC_PDAP33                               RDC_PDAP_REG(RDC_BASE_PTR,33)
#define RDC_PDAP34                               RDC_PDAP_REG(RDC_BASE_PTR,34)
#define RDC_PDAP35                               RDC_PDAP_REG(RDC_BASE_PTR,35)
#define RDC_PDAP36                               RDC_PDAP_REG(RDC_BASE_PTR,36)
#define RDC_PDAP37                               RDC_PDAP_REG(RDC_BASE_PTR,37)
#define RDC_PDAP38                               RDC_PDAP_REG(RDC_BASE_PTR,38)
#define RDC_PDAP39                               RDC_PDAP_REG(RDC_BASE_PTR,39)
#define RDC_PDAP40                               RDC_PDAP_REG(RDC_BASE_PTR,40)
#define RDC_PDAP41                               RDC_PDAP_REG(RDC_BASE_PTR,41)
#define RDC_PDAP42                               RDC_PDAP_REG(RDC_BASE_PTR,42)
#define RDC_PDAP43                               RDC_PDAP_REG(RDC_BASE_PTR,43)
#define RDC_PDAP44                               RDC_PDAP_REG(RDC_BASE_PTR,44)
#define RDC_PDAP45                               RDC_PDAP_REG(RDC_BASE_PTR,45)
#define RDC_PDAP46                               RDC_PDAP_REG(RDC_BASE_PTR,46)
#define RDC_PDAP47                               RDC_PDAP_REG(RDC_BASE_PTR,47)
#define RDC_PDAP48                               RDC_PDAP_REG(RDC_BASE_PTR,48)
#define RDC_PDAP49                               RDC_PDAP_REG(RDC_BASE_PTR,49)
#define RDC_PDAP50                               RDC_PDAP_REG(RDC_BASE_PTR,50)
#define RDC_PDAP51                               RDC_PDAP_REG(RDC_BASE_PTR,51)
#define RDC_PDAP52                               RDC_PDAP_REG(RDC_BASE_PTR,52)
#define RDC_PDAP53                               RDC_PDAP_REG(RDC_BASE_PTR,53)
#define RDC_PDAP54                               RDC_PDAP_REG(RDC_BASE_PTR,54)
#define RDC_PDAP55                               RDC_PDAP_REG(RDC_BASE_PTR,55)
#define RDC_PDAP56                               RDC_PDAP_REG(RDC_BASE_PTR,56)
#define RDC_PDAP57                               RDC_PDAP_REG(RDC_BASE_PTR,57)
#define RDC_PDAP58                               RDC_PDAP_REG(RDC_BASE_PTR,58)
#define RDC_PDAP59                               RDC_PDAP_REG(RDC_BASE_PTR,59)
#define RDC_PDAP60                               RDC_PDAP_REG(RDC_BASE_PTR,60)
#define RDC_PDAP61                               RDC_PDAP_REG(RDC_BASE_PTR,61)
#define RDC_PDAP62                               RDC_PDAP_REG(RDC_BASE_PTR,62)
#define RDC_PDAP63                               RDC_PDAP_REG(RDC_BASE_PTR,63)
#define RDC_PDAP64                               RDC_PDAP_REG(RDC_BASE_PTR,64)
#define RDC_PDAP65                               RDC_PDAP_REG(RDC_BASE_PTR,65)
#define RDC_PDAP66                               RDC_PDAP_REG(RDC_BASE_PTR,66)
#define RDC_PDAP67                               RDC_PDAP_REG(RDC_BASE_PTR,67)
#define RDC_PDAP68                               RDC_PDAP_REG(RDC_BASE_PTR,68)
#define RDC_PDAP69                               RDC_PDAP_REG(RDC_BASE_PTR,69)
#define RDC_PDAP70                               RDC_PDAP_REG(RDC_BASE_PTR,70)
#define RDC_PDAP71                               RDC_PDAP_REG(RDC_BASE_PTR,71)
#define RDC_PDAP72                               RDC_PDAP_REG(RDC_BASE_PTR,72)
#define RDC_PDAP73                               RDC_PDAP_REG(RDC_BASE_PTR,73)
#define RDC_PDAP74                               RDC_PDAP_REG(RDC_BASE_PTR,74)
#define RDC_PDAP75                               RDC_PDAP_REG(RDC_BASE_PTR,75)
#define RDC_PDAP76                               RDC_PDAP_REG(RDC_BASE_PTR,76)
#define RDC_PDAP77                               RDC_PDAP_REG(RDC_BASE_PTR,77)
#define RDC_PDAP78                               RDC_PDAP_REG(RDC_BASE_PTR,78)
#define RDC_PDAP79                               RDC_PDAP_REG(RDC_BASE_PTR,79)
#define RDC_PDAP80                               RDC_PDAP_REG(RDC_BASE_PTR,80)
#define RDC_PDAP81                               RDC_PDAP_REG(RDC_BASE_PTR,81)
#define RDC_PDAP82                               RDC_PDAP_REG(RDC_BASE_PTR,82)
#define RDC_PDAP83                               RDC_PDAP_REG(RDC_BASE_PTR,83)
#define RDC_PDAP84                               RDC_PDAP_REG(RDC_BASE_PTR,84)
#define RDC_PDAP85                               RDC_PDAP_REG(RDC_BASE_PTR,85)
#define RDC_PDAP86                               RDC_PDAP_REG(RDC_BASE_PTR,86)
#define RDC_PDAP87                               RDC_PDAP_REG(RDC_BASE_PTR,87)
#define RDC_PDAP88                               RDC_PDAP_REG(RDC_BASE_PTR,88)
#define RDC_PDAP89                               RDC_PDAP_REG(RDC_BASE_PTR,89)
#define RDC_PDAP90                               RDC_PDAP_REG(RDC_BASE_PTR,90)
#define RDC_PDAP91                               RDC_PDAP_REG(RDC_BASE_PTR,91)
#define RDC_PDAP92                               RDC_PDAP_REG(RDC_BASE_PTR,92)
#define RDC_PDAP93                               RDC_PDAP_REG(RDC_BASE_PTR,93)
#define RDC_PDAP94                               RDC_PDAP_REG(RDC_BASE_PTR,94)
#define RDC_PDAP95                               RDC_PDAP_REG(RDC_BASE_PTR,95)
#define RDC_PDAP96                               RDC_PDAP_REG(RDC_BASE_PTR,96)
#define RDC_PDAP97                               RDC_PDAP_REG(RDC_BASE_PTR,97)
#define RDC_PDAP98                               RDC_PDAP_REG(RDC_BASE_PTR,98)
#define RDC_PDAP99                               RDC_PDAP_REG(RDC_BASE_PTR,99)
#define RDC_PDAP100                              RDC_PDAP_REG(RDC_BASE_PTR,100)
#define RDC_PDAP101                              RDC_PDAP_REG(RDC_BASE_PTR,101)
#define RDC_PDAP102                              RDC_PDAP_REG(RDC_BASE_PTR,102)
#define RDC_PDAP103                              RDC_PDAP_REG(RDC_BASE_PTR,103)
#define RDC_PDAP104                              RDC_PDAP_REG(RDC_BASE_PTR,104)
#define RDC_PDAP105                              RDC_PDAP_REG(RDC_BASE_PTR,105)
#define RDC_PDAP106                              RDC_PDAP_REG(RDC_BASE_PTR,106)
#define RDC_PDAP107                              RDC_PDAP_REG(RDC_BASE_PTR,107)
#define RDC_PDAP108                              RDC_PDAP_REG(RDC_BASE_PTR,108)
#define RDC_PDAP109                              RDC_PDAP_REG(RDC_BASE_PTR,109)
#define RDC_PDAP110                              RDC_PDAP_REG(RDC_BASE_PTR,110)
#define RDC_PDAP111                              RDC_PDAP_REG(RDC_BASE_PTR,111)
#define RDC_PDAP112                              RDC_PDAP_REG(RDC_BASE_PTR,112)
#define RDC_PDAP113                              RDC_PDAP_REG(RDC_BASE_PTR,113)
#define RDC_PDAP114                              RDC_PDAP_REG(RDC_BASE_PTR,114)
#define RDC_PDAP115                              RDC_PDAP_REG(RDC_BASE_PTR,115)
#define RDC_PDAP116                              RDC_PDAP_REG(RDC_BASE_PTR,116)
#define RDC_PDAP117                              RDC_PDAP_REG(RDC_BASE_PTR,117)
#define RDC_MRSA0                                RDC_MRSA_REG(RDC_BASE_PTR,0)
#define RDC_MREA0                                RDC_MREA_REG(RDC_BASE_PTR,0)
#define RDC_MRC0                                 RDC_MRC_REG(RDC_BASE_PTR,0)
#define RDC_MRVS0                                RDC_MRVS_REG(RDC_BASE_PTR,0)
#define RDC_MRSA1                                RDC_MRSA_REG(RDC_BASE_PTR,1)
#define RDC_MREA1                                RDC_MREA_REG(RDC_BASE_PTR,1)
#define RDC_MRC1                                 RDC_MRC_REG(RDC_BASE_PTR,1)
#define RDC_MRVS1                                RDC_MRVS_REG(RDC_BASE_PTR,1)
#define RDC_MRSA2                                RDC_MRSA_REG(RDC_BASE_PTR,2)
#define RDC_MREA2                                RDC_MREA_REG(RDC_BASE_PTR,2)
#define RDC_MRC2                                 RDC_MRC_REG(RDC_BASE_PTR,2)
#define RDC_MRVS2                                RDC_MRVS_REG(RDC_BASE_PTR,2)
#define RDC_MRSA3                                RDC_MRSA_REG(RDC_BASE_PTR,3)
#define RDC_MREA3                                RDC_MREA_REG(RDC_BASE_PTR,3)
#define RDC_MRC3                                 RDC_MRC_REG(RDC_BASE_PTR,3)
#define RDC_MRVS3                                RDC_MRVS_REG(RDC_BASE_PTR,3)
#define RDC_MRSA4                                RDC_MRSA_REG(RDC_BASE_PTR,4)
#define RDC_MREA4                                RDC_MREA_REG(RDC_BASE_PTR,4)
#define RDC_MRC4                                 RDC_MRC_REG(RDC_BASE_PTR,4)
#define RDC_MRVS4                                RDC_MRVS_REG(RDC_BASE_PTR,4)
#define RDC_MRSA5                                RDC_MRSA_REG(RDC_BASE_PTR,5)
#define RDC_MREA5                                RDC_MREA_REG(RDC_BASE_PTR,5)
#define RDC_MRC5                                 RDC_MRC_REG(RDC_BASE_PTR,5)
#define RDC_MRVS5                                RDC_MRVS_REG(RDC_BASE_PTR,5)
#define RDC_MRSA6                                RDC_MRSA_REG(RDC_BASE_PTR,6)
#define RDC_MREA6                                RDC_MREA_REG(RDC_BASE_PTR,6)
#define RDC_MRC6                                 RDC_MRC_REG(RDC_BASE_PTR,6)
#define RDC_MRVS6                                RDC_MRVS_REG(RDC_BASE_PTR,6)
#define RDC_MRSA7                                RDC_MRSA_REG(RDC_BASE_PTR,7)
#define RDC_MREA7                                RDC_MREA_REG(RDC_BASE_PTR,7)
#define RDC_MRC7                                 RDC_MRC_REG(RDC_BASE_PTR,7)
#define RDC_MRVS7                                RDC_MRVS_REG(RDC_BASE_PTR,7)
#define RDC_MRSA8                                RDC_MRSA_REG(RDC_BASE_PTR,8)
#define RDC_MREA8                                RDC_MREA_REG(RDC_BASE_PTR,8)
#define RDC_MRC8                                 RDC_MRC_REG(RDC_BASE_PTR,8)
#define RDC_MRVS8                                RDC_MRVS_REG(RDC_BASE_PTR,8)
#define RDC_MRSA9                                RDC_MRSA_REG(RDC_BASE_PTR,9)
#define RDC_MREA9                                RDC_MREA_REG(RDC_BASE_PTR,9)
#define RDC_MRC9                                 RDC_MRC_REG(RDC_BASE_PTR,9)
#define RDC_MRVS9                                RDC_MRVS_REG(RDC_BASE_PTR,9)
#define RDC_MRSA10                               RDC_MRSA_REG(RDC_BASE_PTR,10)
#define RDC_MREA10                               RDC_MREA_REG(RDC_BASE_PTR,10)
#define RDC_MRC10                                RDC_MRC_REG(RDC_BASE_PTR,10)
#define RDC_MRVS10                               RDC_MRVS_REG(RDC_BASE_PTR,10)
#define RDC_MRSA11                               RDC_MRSA_REG(RDC_BASE_PTR,11)
#define RDC_MREA11                               RDC_MREA_REG(RDC_BASE_PTR,11)
#define RDC_MRC11                                RDC_MRC_REG(RDC_BASE_PTR,11)
#define RDC_MRVS11                               RDC_MRVS_REG(RDC_BASE_PTR,11)
#define RDC_MRSA12                               RDC_MRSA_REG(RDC_BASE_PTR,12)
#define RDC_MREA12                               RDC_MREA_REG(RDC_BASE_PTR,12)
#define RDC_MRC12                                RDC_MRC_REG(RDC_BASE_PTR,12)
#define RDC_MRVS12                               RDC_MRVS_REG(RDC_BASE_PTR,12)
#define RDC_MRSA13                               RDC_MRSA_REG(RDC_BASE_PTR,13)
#define RDC_MREA13                               RDC_MREA_REG(RDC_BASE_PTR,13)
#define RDC_MRC13                                RDC_MRC_REG(RDC_BASE_PTR,13)
#define RDC_MRVS13                               RDC_MRVS_REG(RDC_BASE_PTR,13)
#define RDC_MRSA14                               RDC_MRSA_REG(RDC_BASE_PTR,14)
#define RDC_MREA14                               RDC_MREA_REG(RDC_BASE_PTR,14)
#define RDC_MRC14                                RDC_MRC_REG(RDC_BASE_PTR,14)
#define RDC_MRVS14                               RDC_MRVS_REG(RDC_BASE_PTR,14)
#define RDC_MRSA15                               RDC_MRSA_REG(RDC_BASE_PTR,15)
#define RDC_MREA15                               RDC_MREA_REG(RDC_BASE_PTR,15)
#define RDC_MRC15                                RDC_MRC_REG(RDC_BASE_PTR,15)
#define RDC_MRVS15                               RDC_MRVS_REG(RDC_BASE_PTR,15)
#define RDC_MRSA16                               RDC_MRSA_REG(RDC_BASE_PTR,16)
#define RDC_MREA16                               RDC_MREA_REG(RDC_BASE_PTR,16)
#define RDC_MRC16                                RDC_MRC_REG(RDC_BASE_PTR,16)
#define RDC_MRVS16                               RDC_MRVS_REG(RDC_BASE_PTR,16)
#define RDC_MRSA17                               RDC_MRSA_REG(RDC_BASE_PTR,17)
#define RDC_MREA17                               RDC_MREA_REG(RDC_BASE_PTR,17)
#define RDC_MRC17                                RDC_MRC_REG(RDC_BASE_PTR,17)
#define RDC_MRVS17                               RDC_MRVS_REG(RDC_BASE_PTR,17)
#define RDC_MRSA18                               RDC_MRSA_REG(RDC_BASE_PTR,18)
#define RDC_MREA18                               RDC_MREA_REG(RDC_BASE_PTR,18)
#define RDC_MRC18                                RDC_MRC_REG(RDC_BASE_PTR,18)
#define RDC_MRVS18                               RDC_MRVS_REG(RDC_BASE_PTR,18)
#define RDC_MRSA19                               RDC_MRSA_REG(RDC_BASE_PTR,19)
#define RDC_MREA19                               RDC_MREA_REG(RDC_BASE_PTR,19)
#define RDC_MRC19                                RDC_MRC_REG(RDC_BASE_PTR,19)
#define RDC_MRVS19                               RDC_MRVS_REG(RDC_BASE_PTR,19)
#define RDC_MRSA20                               RDC_MRSA_REG(RDC_BASE_PTR,20)
#define RDC_MREA20                               RDC_MREA_REG(RDC_BASE_PTR,20)
#define RDC_MRC20                                RDC_MRC_REG(RDC_BASE_PTR,20)
#define RDC_MRVS20                               RDC_MRVS_REG(RDC_BASE_PTR,20)
#define RDC_MRSA21                               RDC_MRSA_REG(RDC_BASE_PTR,21)
#define RDC_MREA21                               RDC_MREA_REG(RDC_BASE_PTR,21)
#define RDC_MRC21                                RDC_MRC_REG(RDC_BASE_PTR,21)
#define RDC_MRVS21                               RDC_MRVS_REG(RDC_BASE_PTR,21)
#define RDC_MRSA22                               RDC_MRSA_REG(RDC_BASE_PTR,22)
#define RDC_MREA22                               RDC_MREA_REG(RDC_BASE_PTR,22)
#define RDC_MRC22                                RDC_MRC_REG(RDC_BASE_PTR,22)
#define RDC_MRVS22                               RDC_MRVS_REG(RDC_BASE_PTR,22)
#define RDC_MRSA23                               RDC_MRSA_REG(RDC_BASE_PTR,23)
#define RDC_MREA23                               RDC_MREA_REG(RDC_BASE_PTR,23)
#define RDC_MRC23                                RDC_MRC_REG(RDC_BASE_PTR,23)
#define RDC_MRVS23                               RDC_MRVS_REG(RDC_BASE_PTR,23)
#define RDC_MRSA24                               RDC_MRSA_REG(RDC_BASE_PTR,24)
#define RDC_MREA24                               RDC_MREA_REG(RDC_BASE_PTR,24)
#define RDC_MRC24                                RDC_MRC_REG(RDC_BASE_PTR,24)
#define RDC_MRVS24                               RDC_MRVS_REG(RDC_BASE_PTR,24)
#define RDC_MRSA25                               RDC_MRSA_REG(RDC_BASE_PTR,25)
#define RDC_MREA25                               RDC_MREA_REG(RDC_BASE_PTR,25)
#define RDC_MRC25                                RDC_MRC_REG(RDC_BASE_PTR,25)
#define RDC_MRVS25                               RDC_MRVS_REG(RDC_BASE_PTR,25)
#define RDC_MRSA26                               RDC_MRSA_REG(RDC_BASE_PTR,26)
#define RDC_MREA26                               RDC_MREA_REG(RDC_BASE_PTR,26)
#define RDC_MRC26                                RDC_MRC_REG(RDC_BASE_PTR,26)
#define RDC_MRVS26                               RDC_MRVS_REG(RDC_BASE_PTR,26)
#define RDC_MRSA27                               RDC_MRSA_REG(RDC_BASE_PTR,27)
#define RDC_MREA27                               RDC_MREA_REG(RDC_BASE_PTR,27)
#define RDC_MRC27                                RDC_MRC_REG(RDC_BASE_PTR,27)
#define RDC_MRVS27                               RDC_MRVS_REG(RDC_BASE_PTR,27)
#define RDC_MRSA28                               RDC_MRSA_REG(RDC_BASE_PTR,28)
#define RDC_MREA28                               RDC_MREA_REG(RDC_BASE_PTR,28)
#define RDC_MRC28                                RDC_MRC_REG(RDC_BASE_PTR,28)
#define RDC_MRVS28                               RDC_MRVS_REG(RDC_BASE_PTR,28)
#define RDC_MRSA29                               RDC_MRSA_REG(RDC_BASE_PTR,29)
#define RDC_MREA29                               RDC_MREA_REG(RDC_BASE_PTR,29)
#define RDC_MRC29                                RDC_MRC_REG(RDC_BASE_PTR,29)
#define RDC_MRVS29                               RDC_MRVS_REG(RDC_BASE_PTR,29)
#define RDC_MRSA30                               RDC_MRSA_REG(RDC_BASE_PTR,30)
#define RDC_MREA30                               RDC_MREA_REG(RDC_BASE_PTR,30)
#define RDC_MRC30                                RDC_MRC_REG(RDC_BASE_PTR,30)
#define RDC_MRVS30                               RDC_MRVS_REG(RDC_BASE_PTR,30)
#define RDC_MRSA31                               RDC_MRSA_REG(RDC_BASE_PTR,31)
#define RDC_MREA31                               RDC_MREA_REG(RDC_BASE_PTR,31)
#define RDC_MRC31                                RDC_MRC_REG(RDC_BASE_PTR,31)
#define RDC_MRVS31                               RDC_MRVS_REG(RDC_BASE_PTR,31)
#define RDC_MRSA32                               RDC_MRSA_REG(RDC_BASE_PTR,32)
#define RDC_MREA32                               RDC_MREA_REG(RDC_BASE_PTR,32)
#define RDC_MRC32                                RDC_MRC_REG(RDC_BASE_PTR,32)
#define RDC_MRVS32                               RDC_MRVS_REG(RDC_BASE_PTR,32)
#define RDC_MRSA33                               RDC_MRSA_REG(RDC_BASE_PTR,33)
#define RDC_MREA33                               RDC_MREA_REG(RDC_BASE_PTR,33)
#define RDC_MRC33                                RDC_MRC_REG(RDC_BASE_PTR,33)
#define RDC_MRVS33                               RDC_MRVS_REG(RDC_BASE_PTR,33)
#define RDC_MRSA34                               RDC_MRSA_REG(RDC_BASE_PTR,34)
#define RDC_MREA34                               RDC_MREA_REG(RDC_BASE_PTR,34)
#define RDC_MRC34                                RDC_MRC_REG(RDC_BASE_PTR,34)
#define RDC_MRVS34                               RDC_MRVS_REG(RDC_BASE_PTR,34)
#define RDC_MRSA35                               RDC_MRSA_REG(RDC_BASE_PTR,35)
#define RDC_MREA35                               RDC_MREA_REG(RDC_BASE_PTR,35)
#define RDC_MRC35                                RDC_MRC_REG(RDC_BASE_PTR,35)
#define RDC_MRVS35                               RDC_MRVS_REG(RDC_BASE_PTR,35)
#define RDC_MRSA36                               RDC_MRSA_REG(RDC_BASE_PTR,36)
#define RDC_MREA36                               RDC_MREA_REG(RDC_BASE_PTR,36)
#define RDC_MRC36                                RDC_MRC_REG(RDC_BASE_PTR,36)
#define RDC_MRVS36                               RDC_MRVS_REG(RDC_BASE_PTR,36)
#define RDC_MRSA37                               RDC_MRSA_REG(RDC_BASE_PTR,37)
#define RDC_MREA37                               RDC_MREA_REG(RDC_BASE_PTR,37)
#define RDC_MRC37                                RDC_MRC_REG(RDC_BASE_PTR,37)
#define RDC_MRVS37                               RDC_MRVS_REG(RDC_BASE_PTR,37)
#define RDC_MRSA38                               RDC_MRSA_REG(RDC_BASE_PTR,38)
#define RDC_MREA38                               RDC_MREA_REG(RDC_BASE_PTR,38)
#define RDC_MRC38                                RDC_MRC_REG(RDC_BASE_PTR,38)
#define RDC_MRVS38                               RDC_MRVS_REG(RDC_BASE_PTR,38)
#define RDC_MRSA39                               RDC_MRSA_REG(RDC_BASE_PTR,39)
#define RDC_MREA39                               RDC_MREA_REG(RDC_BASE_PTR,39)
#define RDC_MRC39                                RDC_MRC_REG(RDC_BASE_PTR,39)
#define RDC_MRVS39                               RDC_MRVS_REG(RDC_BASE_PTR,39)
#define RDC_MRSA40                               RDC_MRSA_REG(RDC_BASE_PTR,40)
#define RDC_MREA40                               RDC_MREA_REG(RDC_BASE_PTR,40)
#define RDC_MRC40                                RDC_MRC_REG(RDC_BASE_PTR,40)
#define RDC_MRVS40                               RDC_MRVS_REG(RDC_BASE_PTR,40)
#define RDC_MRSA41                               RDC_MRSA_REG(RDC_BASE_PTR,41)
#define RDC_MREA41                               RDC_MREA_REG(RDC_BASE_PTR,41)
#define RDC_MRC41                                RDC_MRC_REG(RDC_BASE_PTR,41)
#define RDC_MRVS41                               RDC_MRVS_REG(RDC_BASE_PTR,41)
#define RDC_MRSA42                               RDC_MRSA_REG(RDC_BASE_PTR,42)
#define RDC_MREA42                               RDC_MREA_REG(RDC_BASE_PTR,42)
#define RDC_MRC42                                RDC_MRC_REG(RDC_BASE_PTR,42)
#define RDC_MRVS42                               RDC_MRVS_REG(RDC_BASE_PTR,42)
#define RDC_MRSA43                               RDC_MRSA_REG(RDC_BASE_PTR,43)
#define RDC_MREA43                               RDC_MREA_REG(RDC_BASE_PTR,43)
#define RDC_MRC43                                RDC_MRC_REG(RDC_BASE_PTR,43)
#define RDC_MRVS43                               RDC_MRVS_REG(RDC_BASE_PTR,43)
#define RDC_MRSA44                               RDC_MRSA_REG(RDC_BASE_PTR,44)
#define RDC_MREA44                               RDC_MREA_REG(RDC_BASE_PTR,44)
#define RDC_MRC44                                RDC_MRC_REG(RDC_BASE_PTR,44)
#define RDC_MRVS44                               RDC_MRVS_REG(RDC_BASE_PTR,44)
#define RDC_MRSA45                               RDC_MRSA_REG(RDC_BASE_PTR,45)
#define RDC_MREA45                               RDC_MREA_REG(RDC_BASE_PTR,45)
#define RDC_MRC45                                RDC_MRC_REG(RDC_BASE_PTR,45)
#define RDC_MRVS45                               RDC_MRVS_REG(RDC_BASE_PTR,45)
#define RDC_MRSA46                               RDC_MRSA_REG(RDC_BASE_PTR,46)
#define RDC_MREA46                               RDC_MREA_REG(RDC_BASE_PTR,46)
#define RDC_MRC46                                RDC_MRC_REG(RDC_BASE_PTR,46)
#define RDC_MRVS46                               RDC_MRVS_REG(RDC_BASE_PTR,46)
#define RDC_MRSA47                               RDC_MRSA_REG(RDC_BASE_PTR,47)
#define RDC_MREA47                               RDC_MREA_REG(RDC_BASE_PTR,47)
#define RDC_MRC47                                RDC_MRC_REG(RDC_BASE_PTR,47)
#define RDC_MRVS47                               RDC_MRVS_REG(RDC_BASE_PTR,47)
#define RDC_MRSA48                               RDC_MRSA_REG(RDC_BASE_PTR,48)
#define RDC_MREA48                               RDC_MREA_REG(RDC_BASE_PTR,48)
#define RDC_MRC48                                RDC_MRC_REG(RDC_BASE_PTR,48)
#define RDC_MRVS48                               RDC_MRVS_REG(RDC_BASE_PTR,48)
#define RDC_MRSA49                               RDC_MRSA_REG(RDC_BASE_PTR,49)
#define RDC_MREA49                               RDC_MREA_REG(RDC_BASE_PTR,49)
#define RDC_MRC49                                RDC_MRC_REG(RDC_BASE_PTR,49)
#define RDC_MRVS49                               RDC_MRVS_REG(RDC_BASE_PTR,49)
#define RDC_MRSA50                               RDC_MRSA_REG(RDC_BASE_PTR,50)
#define RDC_MREA50                               RDC_MREA_REG(RDC_BASE_PTR,50)
#define RDC_MRC50                                RDC_MRC_REG(RDC_BASE_PTR,50)
#define RDC_MRVS50                               RDC_MRVS_REG(RDC_BASE_PTR,50)
#define RDC_MRSA51                               RDC_MRSA_REG(RDC_BASE_PTR,51)
#define RDC_MREA51                               RDC_MREA_REG(RDC_BASE_PTR,51)
#define RDC_MRC51                                RDC_MRC_REG(RDC_BASE_PTR,51)
#define RDC_MRVS51                               RDC_MRVS_REG(RDC_BASE_PTR,51)

/* RDC - Register array accessors */
#define RDC_MDA(index)                           RDC_MDA_REG(RDC_BASE_PTR,index)
#define RDC_PDAP(index)                          RDC_PDAP_REG(RDC_BASE_PTR,index)
#define RDC_MRSA(index)                          RDC_MRSA_REG(RDC_BASE_PTR,index)
#define RDC_MREA(index)                          RDC_MREA_REG(RDC_BASE_PTR,index)
#define RDC_MRC(index)                           RDC_MRC_REG(RDC_BASE_PTR,index)
#define RDC_MRVS(index)                          RDC_MRVS_REG(RDC_BASE_PTR,index)

/*!
 * @}
 */ /* end of group RDC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RDC_Peripheral */


/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Peripheral RDC_SEMAPHORE
 * @{
 */

/** RDC_SEMAPHORE - Peripheral register structure */
typedef struct RDC_SEMAPHORE_MemMap {
  uint8_t GATE0;                                   /**< Gate Register, offset: 0x0 */
  uint8_t GATE1;                                   /**< Gate Register, offset: 0x1 */
  uint8_t GATE2;                                   /**< Gate Register, offset: 0x2 */
  uint8_t GATE3;                                   /**< Gate Register, offset: 0x3 */
  uint8_t GATE4;                                   /**< Gate Register, offset: 0x4 */
  uint8_t GATE5;                                   /**< Gate Register, offset: 0x5 */
  uint8_t GATE6;                                   /**< Gate Register, offset: 0x6 */
  uint8_t GATE7;                                   /**< Gate Register, offset: 0x7 */
  uint8_t GATE8;                                   /**< Gate Register, offset: 0x8 */
  uint8_t GATE9;                                   /**< Gate Register, offset: 0x9 */
  uint8_t GATE10;                                  /**< Gate Register, offset: 0xA */
  uint8_t GATE11;                                  /**< Gate Register, offset: 0xB */
  uint8_t GATE12;                                  /**< Gate Register, offset: 0xC */
  uint8_t GATE13;                                  /**< Gate Register, offset: 0xD */
  uint8_t GATE14;                                  /**< Gate Register, offset: 0xE */
  uint8_t GATE15;                                  /**< Gate Register, offset: 0xF */
  uint8_t GATE16;                                  /**< Gate Register, offset: 0x10 */
  uint8_t GATE17;                                  /**< Gate Register, offset: 0x11 */
  uint8_t GATE18;                                  /**< Gate Register, offset: 0x12 */
  uint8_t GATE19;                                  /**< Gate Register, offset: 0x13 */
  uint8_t GATE20;                                  /**< Gate Register, offset: 0x14 */
  uint8_t GATE21;                                  /**< Gate Register, offset: 0x15 */
  uint8_t GATE22;                                  /**< Gate Register, offset: 0x16 */
  uint8_t GATE23;                                  /**< Gate Register, offset: 0x17 */
  uint8_t GATE24;                                  /**< Gate Register, offset: 0x18 */
  uint8_t GATE25;                                  /**< Gate Register, offset: 0x19 */
  uint8_t GATE26;                                  /**< Gate Register, offset: 0x1A */
  uint8_t GATE27;                                  /**< Gate Register, offset: 0x1B */
  uint8_t GATE28;                                  /**< Gate Register, offset: 0x1C */
  uint8_t GATE29;                                  /**< Gate Register, offset: 0x1D */
  uint8_t GATE30;                                  /**< Gate Register, offset: 0x1E */
  uint8_t GATE31;                                  /**< Gate Register, offset: 0x1F */
  uint8_t GATE32;                                  /**< Gate Register, offset: 0x20 */
  uint8_t GATE33;                                  /**< Gate Register, offset: 0x21 */
  uint8_t GATE34;                                  /**< Gate Register, offset: 0x22 */
  uint8_t GATE35;                                  /**< Gate Register, offset: 0x23 */
  uint8_t GATE36;                                  /**< Gate Register, offset: 0x24 */
  uint8_t GATE37;                                  /**< Gate Register, offset: 0x25 */
  uint8_t GATE38;                                  /**< Gate Register, offset: 0x26 */
  uint8_t GATE39;                                  /**< Gate Register, offset: 0x27 */
  uint8_t GATE40;                                  /**< Gate Register, offset: 0x28 */
  uint8_t GATE41;                                  /**< Gate Register, offset: 0x29 */
  uint8_t GATE42;                                  /**< Gate Register, offset: 0x2A */
  uint8_t GATE43;                                  /**< Gate Register, offset: 0x2B */
  uint8_t GATE44;                                  /**< Gate Register, offset: 0x2C */
  uint8_t GATE45;                                  /**< Gate Register, offset: 0x2D */
  uint8_t GATE46;                                  /**< Gate Register, offset: 0x2E */
  uint8_t GATE47;                                  /**< Gate Register, offset: 0x2F */
  uint8_t GATE48;                                  /**< Gate Register, offset: 0x30 */
  uint8_t GATE49;                                  /**< Gate Register, offset: 0x31 */
  uint8_t GATE50;                                  /**< Gate Register, offset: 0x32 */
  uint8_t GATE51;                                  /**< Gate Register, offset: 0x33 */
  uint8_t GATE52;                                  /**< Gate Register, offset: 0x34 */
  uint8_t GATE53;                                  /**< Gate Register, offset: 0x35 */
  uint8_t GATE54;                                  /**< Gate Register, offset: 0x36 */
  uint8_t GATE55;                                  /**< Gate Register, offset: 0x37 */
  uint8_t GATE56;                                  /**< Gate Register, offset: 0x38 */
  uint8_t GATE57;                                  /**< Gate Register, offset: 0x39 */
  uint8_t GATE58;                                  /**< Gate Register, offset: 0x3A */
  uint8_t GATE59;                                  /**< Gate Register, offset: 0x3B */
  uint8_t GATE60;                                  /**< Gate Register, offset: 0x3C */
  uint8_t GATE61;                                  /**< Gate Register, offset: 0x3D */
  uint8_t GATE62;                                  /**< Gate Register, offset: 0x3E */
  uint8_t GATE63;                                  /**< Gate Register, offset: 0x3F */
  union {                                          /* offset: 0x40 */
    uint16_t RSTGT_R;                                /**< Reset Gate Read, offset: 0x40 */
    uint16_t RSTGT_W;                                /**< Reset Gate Write, offset: 0x40 */
  };
} volatile *RDC_SEMAPHORE_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Accessor_Macros RDC_SEMAPHORE - Register accessor macros
 * @{
 */


/* RDC_SEMAPHORE - Register accessors */
#define RDC_SEMAPHORE_GATE0_REG(base)            ((base)->GATE0)
#define RDC_SEMAPHORE_GATE1_REG(base)            ((base)->GATE1)
#define RDC_SEMAPHORE_GATE2_REG(base)            ((base)->GATE2)
#define RDC_SEMAPHORE_GATE3_REG(base)            ((base)->GATE3)
#define RDC_SEMAPHORE_GATE4_REG(base)            ((base)->GATE4)
#define RDC_SEMAPHORE_GATE5_REG(base)            ((base)->GATE5)
#define RDC_SEMAPHORE_GATE6_REG(base)            ((base)->GATE6)
#define RDC_SEMAPHORE_GATE7_REG(base)            ((base)->GATE7)
#define RDC_SEMAPHORE_GATE8_REG(base)            ((base)->GATE8)
#define RDC_SEMAPHORE_GATE9_REG(base)            ((base)->GATE9)
#define RDC_SEMAPHORE_GATE10_REG(base)           ((base)->GATE10)
#define RDC_SEMAPHORE_GATE11_REG(base)           ((base)->GATE11)
#define RDC_SEMAPHORE_GATE12_REG(base)           ((base)->GATE12)
#define RDC_SEMAPHORE_GATE13_REG(base)           ((base)->GATE13)
#define RDC_SEMAPHORE_GATE14_REG(base)           ((base)->GATE14)
#define RDC_SEMAPHORE_GATE15_REG(base)           ((base)->GATE15)
#define RDC_SEMAPHORE_GATE16_REG(base)           ((base)->GATE16)
#define RDC_SEMAPHORE_GATE17_REG(base)           ((base)->GATE17)
#define RDC_SEMAPHORE_GATE18_REG(base)           ((base)->GATE18)
#define RDC_SEMAPHORE_GATE19_REG(base)           ((base)->GATE19)
#define RDC_SEMAPHORE_GATE20_REG(base)           ((base)->GATE20)
#define RDC_SEMAPHORE_GATE21_REG(base)           ((base)->GATE21)
#define RDC_SEMAPHORE_GATE22_REG(base)           ((base)->GATE22)
#define RDC_SEMAPHORE_GATE23_REG(base)           ((base)->GATE23)
#define RDC_SEMAPHORE_GATE24_REG(base)           ((base)->GATE24)
#define RDC_SEMAPHORE_GATE25_REG(base)           ((base)->GATE25)
#define RDC_SEMAPHORE_GATE26_REG(base)           ((base)->GATE26)
#define RDC_SEMAPHORE_GATE27_REG(base)           ((base)->GATE27)
#define RDC_SEMAPHORE_GATE28_REG(base)           ((base)->GATE28)
#define RDC_SEMAPHORE_GATE29_REG(base)           ((base)->GATE29)
#define RDC_SEMAPHORE_GATE30_REG(base)           ((base)->GATE30)
#define RDC_SEMAPHORE_GATE31_REG(base)           ((base)->GATE31)
#define RDC_SEMAPHORE_GATE32_REG(base)           ((base)->GATE32)
#define RDC_SEMAPHORE_GATE33_REG(base)           ((base)->GATE33)
#define RDC_SEMAPHORE_GATE34_REG(base)           ((base)->GATE34)
#define RDC_SEMAPHORE_GATE35_REG(base)           ((base)->GATE35)
#define RDC_SEMAPHORE_GATE36_REG(base)           ((base)->GATE36)
#define RDC_SEMAPHORE_GATE37_REG(base)           ((base)->GATE37)
#define RDC_SEMAPHORE_GATE38_REG(base)           ((base)->GATE38)
#define RDC_SEMAPHORE_GATE39_REG(base)           ((base)->GATE39)
#define RDC_SEMAPHORE_GATE40_REG(base)           ((base)->GATE40)
#define RDC_SEMAPHORE_GATE41_REG(base)           ((base)->GATE41)
#define RDC_SEMAPHORE_GATE42_REG(base)           ((base)->GATE42)
#define RDC_SEMAPHORE_GATE43_REG(base)           ((base)->GATE43)
#define RDC_SEMAPHORE_GATE44_REG(base)           ((base)->GATE44)
#define RDC_SEMAPHORE_GATE45_REG(base)           ((base)->GATE45)
#define RDC_SEMAPHORE_GATE46_REG(base)           ((base)->GATE46)
#define RDC_SEMAPHORE_GATE47_REG(base)           ((base)->GATE47)
#define RDC_SEMAPHORE_GATE48_REG(base)           ((base)->GATE48)
#define RDC_SEMAPHORE_GATE49_REG(base)           ((base)->GATE49)
#define RDC_SEMAPHORE_GATE50_REG(base)           ((base)->GATE50)
#define RDC_SEMAPHORE_GATE51_REG(base)           ((base)->GATE51)
#define RDC_SEMAPHORE_GATE52_REG(base)           ((base)->GATE52)
#define RDC_SEMAPHORE_GATE53_REG(base)           ((base)->GATE53)
#define RDC_SEMAPHORE_GATE54_REG(base)           ((base)->GATE54)
#define RDC_SEMAPHORE_GATE55_REG(base)           ((base)->GATE55)
#define RDC_SEMAPHORE_GATE56_REG(base)           ((base)->GATE56)
#define RDC_SEMAPHORE_GATE57_REG(base)           ((base)->GATE57)
#define RDC_SEMAPHORE_GATE58_REG(base)           ((base)->GATE58)
#define RDC_SEMAPHORE_GATE59_REG(base)           ((base)->GATE59)
#define RDC_SEMAPHORE_GATE60_REG(base)           ((base)->GATE60)
#define RDC_SEMAPHORE_GATE61_REG(base)           ((base)->GATE61)
#define RDC_SEMAPHORE_GATE62_REG(base)           ((base)->GATE62)
#define RDC_SEMAPHORE_GATE63_REG(base)           ((base)->GATE63)
#define RDC_SEMAPHORE_RSTGT_R_REG(base)          ((base)->RSTGT_R)
#define RDC_SEMAPHORE_RSTGT_W_REG(base)          ((base)->RSTGT_W)

/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Masks RDC_SEMAPHORE Register Masks
 * @{
 */

/*! @name GATE0 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE0_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE0_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE0_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE0_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE0_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE0_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE0_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE0_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE0_LDOM_MASK)
/*! @} */

/*! @name GATE1 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE1_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE1_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE1_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE1_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE1_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE1_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE1_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE1_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE1_LDOM_MASK)
/*! @} */

/*! @name GATE2 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE2_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE2_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE2_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE2_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE2_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE2_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE2_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE2_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE2_LDOM_MASK)
/*! @} */

/*! @name GATE3 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE3_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE3_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE3_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE3_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE3_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE3_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE3_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE3_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE3_LDOM_MASK)
/*! @} */

/*! @name GATE4 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE4_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE4_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE4_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE4_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE4_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE4_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE4_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE4_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE4_LDOM_MASK)
/*! @} */

/*! @name GATE5 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE5_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE5_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE5_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE5_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE5_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE5_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE5_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE5_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE5_LDOM_MASK)
/*! @} */

/*! @name GATE6 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE6_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE6_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE6_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE6_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE6_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE6_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE6_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE6_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE6_LDOM_MASK)
/*! @} */

/*! @name GATE7 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE7_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE7_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE7_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE7_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE7_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE7_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE7_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE7_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE7_LDOM_MASK)
/*! @} */

/*! @name GATE8 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE8_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE8_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE8_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE8_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE8_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE8_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE8_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE8_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE8_LDOM_MASK)
/*! @} */

/*! @name GATE9 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE9_GTFSM_MASK           (0xFU)
#define RDC_SEMAPHORE_GATE9_GTFSM_SHIFT          (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE9_GTFSM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE9_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE9_LDOM_MASK            (0x30U)
#define RDC_SEMAPHORE_GATE9_LDOM_SHIFT           (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE9_LDOM(x)              (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE9_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE9_LDOM_MASK)
/*! @} */

/*! @name GATE10 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE10_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE10_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE10_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE10_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE10_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE10_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE10_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE10_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE10_LDOM_MASK)
/*! @} */

/*! @name GATE11 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE11_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE11_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE11_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE11_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE11_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE11_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE11_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE11_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE11_LDOM_MASK)
/*! @} */

/*! @name GATE12 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE12_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE12_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE12_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE12_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE12_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE12_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE12_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE12_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE12_LDOM_MASK)
/*! @} */

/*! @name GATE13 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE13_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE13_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE13_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE13_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE13_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE13_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE13_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE13_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE13_LDOM_MASK)
/*! @} */

/*! @name GATE14 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE14_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE14_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE14_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE14_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE14_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE14_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE14_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE14_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE14_LDOM_MASK)
/*! @} */

/*! @name GATE15 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE15_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE15_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE15_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE15_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE15_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE15_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE15_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE15_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE15_LDOM_MASK)
/*! @} */

/*! @name GATE16 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE16_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE16_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE16_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE16_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE16_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE16_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE16_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE16_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE16_LDOM_MASK)
/*! @} */

/*! @name GATE17 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE17_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE17_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE17_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE17_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE17_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE17_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE17_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE17_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE17_LDOM_MASK)
/*! @} */

/*! @name GATE18 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE18_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE18_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE18_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE18_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE18_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE18_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE18_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE18_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE18_LDOM_MASK)
/*! @} */

/*! @name GATE19 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE19_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE19_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE19_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE19_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE19_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE19_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE19_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE19_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE19_LDOM_MASK)
/*! @} */

/*! @name GATE20 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE20_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE20_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE20_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE20_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE20_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE20_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE20_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE20_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE20_LDOM_MASK)
/*! @} */

/*! @name GATE21 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE21_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE21_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE21_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE21_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE21_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE21_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE21_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE21_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE21_LDOM_MASK)
/*! @} */

/*! @name GATE22 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE22_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE22_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE22_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE22_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE22_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE22_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE22_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE22_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE22_LDOM_MASK)
/*! @} */

/*! @name GATE23 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE23_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE23_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE23_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE23_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE23_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE23_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE23_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE23_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE23_LDOM_MASK)
/*! @} */

/*! @name GATE24 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE24_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE24_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE24_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE24_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE24_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE24_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE24_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE24_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE24_LDOM_MASK)
/*! @} */

/*! @name GATE25 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE25_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE25_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE25_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE25_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE25_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE25_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE25_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE25_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE25_LDOM_MASK)
/*! @} */

/*! @name GATE26 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE26_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE26_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE26_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE26_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE26_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE26_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE26_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE26_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE26_LDOM_MASK)
/*! @} */

/*! @name GATE27 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE27_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE27_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE27_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE27_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE27_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE27_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE27_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE27_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE27_LDOM_MASK)
/*! @} */

/*! @name GATE28 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE28_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE28_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE28_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE28_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE28_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE28_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE28_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE28_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE28_LDOM_MASK)
/*! @} */

/*! @name GATE29 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE29_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE29_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE29_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE29_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE29_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE29_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE29_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE29_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE29_LDOM_MASK)
/*! @} */

/*! @name GATE30 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE30_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE30_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE30_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE30_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE30_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE30_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE30_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE30_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE30_LDOM_MASK)
/*! @} */

/*! @name GATE31 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE31_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE31_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE31_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE31_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE31_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE31_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE31_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE31_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE31_LDOM_MASK)
/*! @} */

/*! @name GATE32 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE32_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE32_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE32_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE32_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE32_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE32_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE32_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE32_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE32_LDOM_MASK)
/*! @} */

/*! @name GATE33 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE33_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE33_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE33_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE33_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE33_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE33_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE33_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE33_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE33_LDOM_MASK)
/*! @} */

/*! @name GATE34 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE34_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE34_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE34_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE34_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE34_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE34_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE34_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE34_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE34_LDOM_MASK)
/*! @} */

/*! @name GATE35 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE35_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE35_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE35_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE35_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE35_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE35_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE35_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE35_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE35_LDOM_MASK)
/*! @} */

/*! @name GATE36 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE36_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE36_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE36_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE36_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE36_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE36_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE36_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE36_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE36_LDOM_MASK)
/*! @} */

/*! @name GATE37 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE37_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE37_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE37_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE37_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE37_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE37_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE37_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE37_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE37_LDOM_MASK)
/*! @} */

/*! @name GATE38 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE38_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE38_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE38_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE38_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE38_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE38_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE38_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE38_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE38_LDOM_MASK)
/*! @} */

/*! @name GATE39 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE39_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE39_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE39_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE39_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE39_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE39_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE39_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE39_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE39_LDOM_MASK)
/*! @} */

/*! @name GATE40 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE40_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE40_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE40_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE40_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE40_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE40_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE40_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE40_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE40_LDOM_MASK)
/*! @} */

/*! @name GATE41 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE41_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE41_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE41_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE41_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE41_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE41_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE41_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE41_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE41_LDOM_MASK)
/*! @} */

/*! @name GATE42 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE42_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE42_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE42_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE42_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE42_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE42_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE42_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE42_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE42_LDOM_MASK)
/*! @} */

/*! @name GATE43 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE43_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE43_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE43_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE43_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE43_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE43_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE43_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE43_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE43_LDOM_MASK)
/*! @} */

/*! @name GATE44 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE44_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE44_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE44_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE44_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE44_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE44_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE44_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE44_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE44_LDOM_MASK)
/*! @} */

/*! @name GATE45 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE45_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE45_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE45_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE45_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE45_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE45_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE45_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE45_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE45_LDOM_MASK)
/*! @} */

/*! @name GATE46 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE46_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE46_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE46_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE46_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE46_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE46_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE46_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE46_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE46_LDOM_MASK)
/*! @} */

/*! @name GATE47 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE47_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE47_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE47_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE47_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE47_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE47_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE47_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE47_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE47_LDOM_MASK)
/*! @} */

/*! @name GATE48 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE48_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE48_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE48_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE48_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE48_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE48_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE48_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE48_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE48_LDOM_MASK)
/*! @} */

/*! @name GATE49 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE49_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE49_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE49_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE49_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE49_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE49_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE49_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE49_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE49_LDOM_MASK)
/*! @} */

/*! @name GATE50 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE50_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE50_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE50_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE50_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE50_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE50_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE50_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE50_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE50_LDOM_MASK)
/*! @} */

/*! @name GATE51 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE51_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE51_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE51_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE51_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE51_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE51_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE51_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE51_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE51_LDOM_MASK)
/*! @} */

/*! @name GATE52 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE52_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE52_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE52_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE52_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE52_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE52_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE52_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE52_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE52_LDOM_MASK)
/*! @} */

/*! @name GATE53 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE53_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE53_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE53_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE53_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE53_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE53_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE53_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE53_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE53_LDOM_MASK)
/*! @} */

/*! @name GATE54 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE54_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE54_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE54_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE54_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE54_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE54_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE54_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE54_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE54_LDOM_MASK)
/*! @} */

/*! @name GATE55 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE55_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE55_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE55_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE55_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE55_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE55_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE55_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE55_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE55_LDOM_MASK)
/*! @} */

/*! @name GATE56 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE56_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE56_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE56_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE56_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE56_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE56_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE56_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE56_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE56_LDOM_MASK)
/*! @} */

/*! @name GATE57 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE57_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE57_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE57_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE57_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE57_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE57_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE57_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE57_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE57_LDOM_MASK)
/*! @} */

/*! @name GATE58 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE58_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE58_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE58_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE58_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE58_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE58_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE58_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE58_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE58_LDOM_MASK)
/*! @} */

/*! @name GATE59 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE59_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE59_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE59_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE59_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE59_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE59_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE59_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE59_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE59_LDOM_MASK)
/*! @} */

/*! @name GATE60 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE60_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE60_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE60_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE60_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE60_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE60_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE60_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE60_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE60_LDOM_MASK)
/*! @} */

/*! @name GATE61 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE61_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE61_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE61_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE61_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE61_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE61_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE61_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE61_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE61_LDOM_MASK)
/*! @} */

/*! @name GATE62 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE62_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE62_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE62_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE62_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE62_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE62_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE62_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE62_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE62_LDOM_MASK)
/*! @} */

/*! @name GATE63 - Gate Register */
/*! @{ */
#define RDC_SEMAPHORE_GATE63_GTFSM_MASK          (0xFU)
#define RDC_SEMAPHORE_GATE63_GTFSM_SHIFT         (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b0000..The gate is unlocked (free).
 *  0b0001..The gate has been locked by processor with master_index = 0.
 *  0b0010..The gate has been locked by processor with master_index = 1.
 *  0b0011..The gate has been locked by processor with master_index = 2.
 *  0b0100..The gate has been locked by processor with master_index = 3.
 *  0b0101..The gate has been locked by processor with master_index = 4.
 *  0b0110..The gate has been locked by processor with master_index = 5.
 *  0b0111..The gate has been locked by processor with master_index = 6.
 *  0b1000..The gate has been locked by processor with master_index = 7.
 *  0b1001..The gate has been locked by processor with master_index = 8.
 *  0b1010..The gate has been locked by processor with master_index = 9.
 *  0b1011..The gate has been locked by processor with master_index = 10.
 *  0b1100..The gate has been locked by processor with master_index = 11.
 *  0b1101..The gate has been locked by processor with master_index = 12.
 *  0b1110..The gate has been locked by processor with master_index = 13.
 *  0b1111..The gate has been locked by processor with master_index = 14.
 */
#define RDC_SEMAPHORE_GATE63_GTFSM(x)            (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_GTFSM_SHIFT)) & RDC_SEMAPHORE_GATE63_GTFSM_MASK)
#define RDC_SEMAPHORE_GATE63_LDOM_MASK           (0x30U)
#define RDC_SEMAPHORE_GATE63_LDOM_SHIFT          (4U)
/*! LDOM
 *  0b00..The gate is locked by domain 0. (True if bits [3:0] do not equal 0000.)
 *  0b01..The gate has been locked by domain 1.
 *  0b10..The gate has been locked by domain 2.
 *  0b11..The gate has been locked by domain 3.
 */
#define RDC_SEMAPHORE_GATE63_LDOM(x)             (((uint8_t)(((uint8_t)(x)) << RDC_SEMAPHORE_GATE63_LDOM_SHIFT)) & RDC_SEMAPHORE_GATE63_LDOM_MASK)
/*! @} */

/*! @name RSTGT_R - Reset Gate Read */
/*! @{ */
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK        (0xFU)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGMS(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK        (0x30U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT       (4U)
/*! RSTGSM
 *  0b00..Idle, waiting for the first data pattern write.
 *  0b01..Waiting for the second data pattern write.
 *  0b10..The 2-write sequence has completed. Generate the specified gate reset(s). After the reset is performed,
 *        this machine returns to the idle (waiting for first data pattern write) state. The "01" state persists
 *        for only one clock cycle. Software will never be able to observe this state.
 *  0b11..This state encoding is never used and therefore reserved.
 */
#define RDC_SEMAPHORE_RSTGT_R_RSTGSM(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_R_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK)
/*! @} */

/*! @name RSTGT_W - Reset Gate Write */
/*! @{ */
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK        (0xFFU)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT       (0U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGDP(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK        (0xFF00U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT       (8U)
#define RDC_SEMAPHORE_RSTGT_W_RSTGTN(x)          (((uint16_t)(((uint16_t)(x)) << RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT)) & RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Masks */


/* RDC_SEMAPHORE - Peripheral instance base addresses */
/** Peripheral RDC_SEMAPHORE1 base pointer */
#define RDC_SEMAPHORE1_BASE_PTR                  ((RDC_SEMAPHORE_MemMapPtr)0x303B0000u)
/** Peripheral RDC_SEMAPHORE2 base pointer */
#define RDC_SEMAPHORE2_BASE_PTR                  ((RDC_SEMAPHORE_MemMapPtr)0x303C0000u)
/** Array initializer of RDC_SEMAPHORE peripheral base pointers */
#define RDC_SEMAPHORE_BASE_PTRS                  { RDC_SEMAPHORE1_BASE_PTR, RDC_SEMAPHORE2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- RDC_SEMAPHORE - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup RDC_SEMAPHORE_Register_Accessor_Macros RDC_SEMAPHORE - Register accessor macros
 * @{
 */


/* RDC_SEMAPHORE - Register instance definitions */
/* RDC_SEMAPHORE1 */
#define RDC_SEMAPHORE1_GATE0                     RDC_SEMAPHORE_GATE0_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE1                     RDC_SEMAPHORE_GATE1_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE2                     RDC_SEMAPHORE_GATE2_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE3                     RDC_SEMAPHORE_GATE3_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE4                     RDC_SEMAPHORE_GATE4_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE5                     RDC_SEMAPHORE_GATE5_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE6                     RDC_SEMAPHORE_GATE6_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE7                     RDC_SEMAPHORE_GATE7_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE8                     RDC_SEMAPHORE_GATE8_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE9                     RDC_SEMAPHORE_GATE9_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE10                    RDC_SEMAPHORE_GATE10_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE11                    RDC_SEMAPHORE_GATE11_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE12                    RDC_SEMAPHORE_GATE12_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE13                    RDC_SEMAPHORE_GATE13_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE14                    RDC_SEMAPHORE_GATE14_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE15                    RDC_SEMAPHORE_GATE15_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE16                    RDC_SEMAPHORE_GATE16_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE17                    RDC_SEMAPHORE_GATE17_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE18                    RDC_SEMAPHORE_GATE18_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE19                    RDC_SEMAPHORE_GATE19_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE20                    RDC_SEMAPHORE_GATE20_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE21                    RDC_SEMAPHORE_GATE21_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE22                    RDC_SEMAPHORE_GATE22_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE23                    RDC_SEMAPHORE_GATE23_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE24                    RDC_SEMAPHORE_GATE24_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE25                    RDC_SEMAPHORE_GATE25_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE26                    RDC_SEMAPHORE_GATE26_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE27                    RDC_SEMAPHORE_GATE27_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE28                    RDC_SEMAPHORE_GATE28_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE29                    RDC_SEMAPHORE_GATE29_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE30                    RDC_SEMAPHORE_GATE30_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE31                    RDC_SEMAPHORE_GATE31_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE32                    RDC_SEMAPHORE_GATE32_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE33                    RDC_SEMAPHORE_GATE33_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE34                    RDC_SEMAPHORE_GATE34_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE35                    RDC_SEMAPHORE_GATE35_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE36                    RDC_SEMAPHORE_GATE36_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE37                    RDC_SEMAPHORE_GATE37_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE38                    RDC_SEMAPHORE_GATE38_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE39                    RDC_SEMAPHORE_GATE39_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE40                    RDC_SEMAPHORE_GATE40_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE41                    RDC_SEMAPHORE_GATE41_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE42                    RDC_SEMAPHORE_GATE42_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE43                    RDC_SEMAPHORE_GATE43_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE44                    RDC_SEMAPHORE_GATE44_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE45                    RDC_SEMAPHORE_GATE45_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE46                    RDC_SEMAPHORE_GATE46_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE47                    RDC_SEMAPHORE_GATE47_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE48                    RDC_SEMAPHORE_GATE48_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE49                    RDC_SEMAPHORE_GATE49_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE50                    RDC_SEMAPHORE_GATE50_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE51                    RDC_SEMAPHORE_GATE51_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE52                    RDC_SEMAPHORE_GATE52_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE53                    RDC_SEMAPHORE_GATE53_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE54                    RDC_SEMAPHORE_GATE54_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE55                    RDC_SEMAPHORE_GATE55_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE56                    RDC_SEMAPHORE_GATE56_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE57                    RDC_SEMAPHORE_GATE57_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE58                    RDC_SEMAPHORE_GATE58_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE59                    RDC_SEMAPHORE_GATE59_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE60                    RDC_SEMAPHORE_GATE60_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE61                    RDC_SEMAPHORE_GATE61_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE62                    RDC_SEMAPHORE_GATE62_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_GATE63                    RDC_SEMAPHORE_GATE63_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_RSTGT_R                   RDC_SEMAPHORE_RSTGT_R_REG(RDC_SEMAPHORE1_BASE_PTR)
#define RDC_SEMAPHORE1_RSTGT_W                   RDC_SEMAPHORE_RSTGT_W_REG(RDC_SEMAPHORE1_BASE_PTR)
/* RDC_SEMAPHORE2 */
#define RDC_SEMAPHORE2_GATE0                     RDC_SEMAPHORE_GATE0_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE1                     RDC_SEMAPHORE_GATE1_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE2                     RDC_SEMAPHORE_GATE2_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE3                     RDC_SEMAPHORE_GATE3_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE4                     RDC_SEMAPHORE_GATE4_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE5                     RDC_SEMAPHORE_GATE5_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE6                     RDC_SEMAPHORE_GATE6_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE7                     RDC_SEMAPHORE_GATE7_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE8                     RDC_SEMAPHORE_GATE8_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE9                     RDC_SEMAPHORE_GATE9_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE10                    RDC_SEMAPHORE_GATE10_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE11                    RDC_SEMAPHORE_GATE11_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE12                    RDC_SEMAPHORE_GATE12_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE13                    RDC_SEMAPHORE_GATE13_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE14                    RDC_SEMAPHORE_GATE14_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE15                    RDC_SEMAPHORE_GATE15_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE16                    RDC_SEMAPHORE_GATE16_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE17                    RDC_SEMAPHORE_GATE17_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE18                    RDC_SEMAPHORE_GATE18_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE19                    RDC_SEMAPHORE_GATE19_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE20                    RDC_SEMAPHORE_GATE20_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE21                    RDC_SEMAPHORE_GATE21_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE22                    RDC_SEMAPHORE_GATE22_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE23                    RDC_SEMAPHORE_GATE23_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE24                    RDC_SEMAPHORE_GATE24_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE25                    RDC_SEMAPHORE_GATE25_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE26                    RDC_SEMAPHORE_GATE26_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE27                    RDC_SEMAPHORE_GATE27_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE28                    RDC_SEMAPHORE_GATE28_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE29                    RDC_SEMAPHORE_GATE29_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE30                    RDC_SEMAPHORE_GATE30_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE31                    RDC_SEMAPHORE_GATE31_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE32                    RDC_SEMAPHORE_GATE32_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE33                    RDC_SEMAPHORE_GATE33_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE34                    RDC_SEMAPHORE_GATE34_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE35                    RDC_SEMAPHORE_GATE35_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE36                    RDC_SEMAPHORE_GATE36_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE37                    RDC_SEMAPHORE_GATE37_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE38                    RDC_SEMAPHORE_GATE38_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE39                    RDC_SEMAPHORE_GATE39_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE40                    RDC_SEMAPHORE_GATE40_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE41                    RDC_SEMAPHORE_GATE41_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE42                    RDC_SEMAPHORE_GATE42_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE43                    RDC_SEMAPHORE_GATE43_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE44                    RDC_SEMAPHORE_GATE44_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE45                    RDC_SEMAPHORE_GATE45_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE46                    RDC_SEMAPHORE_GATE46_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE47                    RDC_SEMAPHORE_GATE47_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE48                    RDC_SEMAPHORE_GATE48_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE49                    RDC_SEMAPHORE_GATE49_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE50                    RDC_SEMAPHORE_GATE50_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE51                    RDC_SEMAPHORE_GATE51_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE52                    RDC_SEMAPHORE_GATE52_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE53                    RDC_SEMAPHORE_GATE53_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE54                    RDC_SEMAPHORE_GATE54_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE55                    RDC_SEMAPHORE_GATE55_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE56                    RDC_SEMAPHORE_GATE56_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE57                    RDC_SEMAPHORE_GATE57_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE58                    RDC_SEMAPHORE_GATE58_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE59                    RDC_SEMAPHORE_GATE59_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE60                    RDC_SEMAPHORE_GATE60_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE61                    RDC_SEMAPHORE_GATE61_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE62                    RDC_SEMAPHORE_GATE62_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_GATE63                    RDC_SEMAPHORE_GATE63_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_RSTGT_R                   RDC_SEMAPHORE_RSTGT_R_REG(RDC_SEMAPHORE2_BASE_PTR)
#define RDC_SEMAPHORE2_RSTGT_W                   RDC_SEMAPHORE_RSTGT_W_REG(RDC_SEMAPHORE2_BASE_PTR)

/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group RDC_SEMAPHORE_Peripheral */


/* ----------------------------------------------------------------------------
   -- SDMAARM
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Peripheral SDMAARM
 * @{
 */

/** SDMAARM - Peripheral register structure */
typedef struct SDMAARM_MemMap {
  uint32_t MC0PTR;                                 /**< Arm platform Channel 0 Pointer, offset: 0x0 */
  uint32_t INTR;                                   /**< Channel Interrupts, offset: 0x4 */
  uint32_t STOP_STAT;                              /**< Channel Stop/Channel Status, offset: 0x8 */
  uint32_t HSTART;                                 /**< Channel Start, offset: 0xC */
  uint32_t EVTOVR;                                 /**< Channel Event Override, offset: 0x10 */
  uint32_t DSPOVR;                                 /**< Channel BP Override, offset: 0x14 */
  uint32_t HOSTOVR;                                /**< Channel Arm platform Override, offset: 0x18 */
  uint32_t EVTPEND;                                /**< Channel Event Pending, offset: 0x1C */
  uint8_t RESERVED_0[4];
  uint32_t RESET;                                  /**< Reset Register, offset: 0x24 */
  uint32_t EVTERR;                                 /**< DMA Request Error Register, offset: 0x28 */
  uint32_t INTRMASK;                               /**< Channel Arm platform Interrupt Mask, offset: 0x2C */
  uint32_t PSW;                                    /**< Schedule Status, offset: 0x30 */
  uint32_t EVTERRDBG;                              /**< DMA Request Error Register, offset: 0x34 */
  uint32_t CONFIG;                                 /**< Configuration Register, offset: 0x38 */
  uint32_t SDMA_LOCK;                              /**< SDMA LOCK, offset: 0x3C */
  uint32_t ONCE_ENB;                               /**< OnCE Enable, offset: 0x40 */
  uint32_t ONCE_DATA;                              /**< OnCE Data Register, offset: 0x44 */
  uint32_t ONCE_INSTR;                             /**< OnCE Instruction Register, offset: 0x48 */
  uint32_t ONCE_STAT;                              /**< OnCE Status Register, offset: 0x4C */
  uint32_t ONCE_CMD;                               /**< OnCE Command Register, offset: 0x50 */
  uint8_t RESERVED_1[4];
  uint32_t ILLINSTADDR;                            /**< Illegal Instruction Trap Address, offset: 0x58 */
  uint32_t CHN0ADDR;                               /**< Channel 0 Boot Address, offset: 0x5C */
  uint32_t EVT_MIRROR;                             /**< DMA Requests, offset: 0x60 */
  uint32_t EVT_MIRROR2;                            /**< DMA Requests 2, offset: 0x64 */
  uint8_t RESERVED_2[8];
  uint32_t XTRIG_CONF1;                            /**< Cross-Trigger Events Configuration Register 1, offset: 0x70 */
  uint32_t XTRIG_CONF2;                            /**< Cross-Trigger Events Configuration Register 2, offset: 0x74 */
  uint8_t RESERVED_3[136];
  uint32_t SDMA_CHNPRI[32];                        /**< Channel Priority Registers, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_4[128];
  uint32_t CHNENBL[48];                            /**< Channel Enable RAM, array offset: 0x200, array step: 0x4 */
  uint8_t RESERVED_5[3392];
  uint32_t DONE0_CONFIG;                           /**< SDMA DONE0 Configuration, offset: 0x1000 */
  uint32_t DONE1_CONFIG;                           /**< SDMA DONE1 Configuration, offset: 0x1004 */
} volatile *SDMAARM_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SDMAARM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Accessor_Macros SDMAARM - Register accessor macros
 * @{
 */


/* SDMAARM - Register accessors */
#define SDMAARM_MC0PTR_REG(base)                 ((base)->MC0PTR)
#define SDMAARM_INTR_REG(base)                   ((base)->INTR)
#define SDMAARM_STOP_STAT_REG(base)              ((base)->STOP_STAT)
#define SDMAARM_HSTART_REG(base)                 ((base)->HSTART)
#define SDMAARM_EVTOVR_REG(base)                 ((base)->EVTOVR)
#define SDMAARM_DSPOVR_REG(base)                 ((base)->DSPOVR)
#define SDMAARM_HOSTOVR_REG(base)                ((base)->HOSTOVR)
#define SDMAARM_EVTPEND_REG(base)                ((base)->EVTPEND)
#define SDMAARM_RESET_REG(base)                  ((base)->RESET)
#define SDMAARM_EVTERR_REG(base)                 ((base)->EVTERR)
#define SDMAARM_INTRMASK_REG(base)               ((base)->INTRMASK)
#define SDMAARM_PSW_REG(base)                    ((base)->PSW)
#define SDMAARM_EVTERRDBG_REG(base)              ((base)->EVTERRDBG)
#define SDMAARM_CONFIG_REG(base)                 ((base)->CONFIG)
#define SDMAARM_SDMA_LOCK_REG(base)              ((base)->SDMA_LOCK)
#define SDMAARM_ONCE_ENB_REG(base)               ((base)->ONCE_ENB)
#define SDMAARM_ONCE_DATA_REG(base)              ((base)->ONCE_DATA)
#define SDMAARM_ONCE_INSTR_REG(base)             ((base)->ONCE_INSTR)
#define SDMAARM_ONCE_STAT_REG(base)              ((base)->ONCE_STAT)
#define SDMAARM_ONCE_CMD_REG(base)               ((base)->ONCE_CMD)
#define SDMAARM_ILLINSTADDR_REG(base)            ((base)->ILLINSTADDR)
#define SDMAARM_CHN0ADDR_REG(base)               ((base)->CHN0ADDR)
#define SDMAARM_EVT_MIRROR_REG(base)             ((base)->EVT_MIRROR)
#define SDMAARM_EVT_MIRROR2_REG(base)            ((base)->EVT_MIRROR2)
#define SDMAARM_XTRIG_CONF1_REG(base)            ((base)->XTRIG_CONF1)
#define SDMAARM_XTRIG_CONF2_REG(base)            ((base)->XTRIG_CONF2)
#define SDMAARM_SDMA_CHNPRI_REG(base,index)      ((base)->SDMA_CHNPRI[index])
#define SDMAARM_CHNENBL_REG(base,index)          ((base)->CHNENBL[index])
#define SDMAARM_DONE0_CONFIG_REG(base)           ((base)->DONE0_CONFIG)
#define SDMAARM_DONE1_CONFIG_REG(base)           ((base)->DONE1_CONFIG)

/*!
 * @}
 */ /* end of group SDMAARM_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SDMAARM Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Masks SDMAARM Register Masks
 * @{
 */

/*! @name MC0PTR - Arm platform Channel 0 Pointer */
/*! @{ */
#define SDMAARM_MC0PTR_MC0PTR_MASK               (0xFFFFFFFFU)
#define SDMAARM_MC0PTR_MC0PTR_SHIFT              (0U)
#define SDMAARM_MC0PTR_MC0PTR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_MC0PTR_MC0PTR_SHIFT)) & SDMAARM_MC0PTR_MC0PTR_MASK)
/*! @} */

/*! @name INTR - Channel Interrupts */
/*! @{ */
#define SDMAARM_INTR_HI_MASK                     (0xFFFFFFFFU)
#define SDMAARM_INTR_HI_SHIFT                    (0U)
#define SDMAARM_INTR_HI(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTR_HI_SHIFT)) & SDMAARM_INTR_HI_MASK)
/*! @} */

/*! @name STOP_STAT - Channel Stop/Channel Status */
/*! @{ */
#define SDMAARM_STOP_STAT_HE_MASK                (0xFFFFFFFFU)
#define SDMAARM_STOP_STAT_HE_SHIFT               (0U)
#define SDMAARM_STOP_STAT_HE(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_STOP_STAT_HE_SHIFT)) & SDMAARM_STOP_STAT_HE_MASK)
/*! @} */

/*! @name HSTART - Channel Start */
/*! @{ */
#define SDMAARM_HSTART_HSTART_HE_MASK            (0xFFFFFFFFU)
#define SDMAARM_HSTART_HSTART_HE_SHIFT           (0U)
#define SDMAARM_HSTART_HSTART_HE(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_HSTART_HSTART_HE_SHIFT)) & SDMAARM_HSTART_HSTART_HE_MASK)
/*! @} */

/*! @name EVTOVR - Channel Event Override */
/*! @{ */
#define SDMAARM_EVTOVR_EO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_EVTOVR_EO_SHIFT                  (0U)
#define SDMAARM_EVTOVR_EO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTOVR_EO_SHIFT)) & SDMAARM_EVTOVR_EO_MASK)
/*! @} */

/*! @name DSPOVR - Channel BP Override */
/*! @{ */
#define SDMAARM_DSPOVR_DO_MASK                   (0xFFFFFFFFU)
#define SDMAARM_DSPOVR_DO_SHIFT                  (0U)
/*! DO
 *  0b00000000000000000000000000000000..- Reserved
 *  0b00000000000000000000000000000001..- Reset value.
 */
#define SDMAARM_DSPOVR_DO(x)                     (((uint32_t)(((uint32_t)(x)) << SDMAARM_DSPOVR_DO_SHIFT)) & SDMAARM_DSPOVR_DO_MASK)
/*! @} */

/*! @name HOSTOVR - Channel Arm platform Override */
/*! @{ */
#define SDMAARM_HOSTOVR_HO_MASK                  (0xFFFFFFFFU)
#define SDMAARM_HOSTOVR_HO_SHIFT                 (0U)
#define SDMAARM_HOSTOVR_HO(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_HOSTOVR_HO_SHIFT)) & SDMAARM_HOSTOVR_HO_MASK)
/*! @} */

/*! @name EVTPEND - Channel Event Pending */
/*! @{ */
#define SDMAARM_EVTPEND_EP_MASK                  (0xFFFFFFFFU)
#define SDMAARM_EVTPEND_EP_SHIFT                 (0U)
#define SDMAARM_EVTPEND_EP(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTPEND_EP_SHIFT)) & SDMAARM_EVTPEND_EP_MASK)
/*! @} */

/*! @name RESET - Reset Register */
/*! @{ */
#define SDMAARM_RESET_RESET_MASK                 (0x1U)
#define SDMAARM_RESET_RESET_SHIFT                (0U)
#define SDMAARM_RESET_RESCHED_MASK               (0x2U)
#define SDMAARM_RESET_RESCHED_SHIFT              (1U)
/*! @} */

/*! @name EVTERR - DMA Request Error Register */
/*! @{ */
#define SDMAARM_EVTERR_CHNERR_MASK               (0xFFFFFFFFU)
#define SDMAARM_EVTERR_CHNERR_SHIFT              (0U)
#define SDMAARM_EVTERR_CHNERR(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERR_CHNERR_SHIFT)) & SDMAARM_EVTERR_CHNERR_MASK)
/*! @} */

/*! @name INTRMASK - Channel Arm platform Interrupt Mask */
/*! @{ */
#define SDMAARM_INTRMASK_HIMASK_MASK             (0xFFFFFFFFU)
#define SDMAARM_INTRMASK_HIMASK_SHIFT            (0U)
#define SDMAARM_INTRMASK_HIMASK(x)               (((uint32_t)(((uint32_t)(x)) << SDMAARM_INTRMASK_HIMASK_SHIFT)) & SDMAARM_INTRMASK_HIMASK_MASK)
/*! @} */

/*! @name PSW - Schedule Status */
/*! @{ */
#define SDMAARM_PSW_CCR_MASK                     (0xFU)
#define SDMAARM_PSW_CCR_SHIFT                    (0U)
#define SDMAARM_PSW_CCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCR_SHIFT)) & SDMAARM_PSW_CCR_MASK)
#define SDMAARM_PSW_CCP_MASK                     (0xF0U)
#define SDMAARM_PSW_CCP_SHIFT                    (4U)
/*! CCP
 *  0b0000..No running channel
 *  0b0001..Active channel priority
 */
#define SDMAARM_PSW_CCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_CCP_SHIFT)) & SDMAARM_PSW_CCP_MASK)
#define SDMAARM_PSW_NCR_MASK                     (0x1F00U)
#define SDMAARM_PSW_NCR_SHIFT                    (8U)
#define SDMAARM_PSW_NCR(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCR_SHIFT)) & SDMAARM_PSW_NCR_MASK)
#define SDMAARM_PSW_NCP_MASK                     (0xE000U)
#define SDMAARM_PSW_NCP_SHIFT                    (13U)
/*! NCP
 *  0b000..No running channel
 *  0b001..Active channel priority
 */
#define SDMAARM_PSW_NCP(x)                       (((uint32_t)(((uint32_t)(x)) << SDMAARM_PSW_NCP_SHIFT)) & SDMAARM_PSW_NCP_MASK)
/*! @} */

/*! @name EVTERRDBG - DMA Request Error Register */
/*! @{ */
#define SDMAARM_EVTERRDBG_CHNERR_MASK            (0xFFFFFFFFU)
#define SDMAARM_EVTERRDBG_CHNERR_SHIFT           (0U)
#define SDMAARM_EVTERRDBG_CHNERR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVTERRDBG_CHNERR_SHIFT)) & SDMAARM_EVTERRDBG_CHNERR_MASK)
/*! @} */

/*! @name CONFIG - Configuration Register */
/*! @{ */
#define SDMAARM_CONFIG_CSM_MASK                  (0x3U)
#define SDMAARM_CONFIG_CSM_SHIFT                 (0U)
/*! CSM
 *  0b00..static
 *  0b01..dynamic low power
 *  0b10..dynamic with no loop
 *  0b11..dynamic
 */
#define SDMAARM_CONFIG_CSM(x)                    (((uint32_t)(((uint32_t)(x)) << SDMAARM_CONFIG_CSM_SHIFT)) & SDMAARM_CONFIG_CSM_MASK)
#define SDMAARM_CONFIG_ACR_MASK                  (0x10U)
#define SDMAARM_CONFIG_ACR_SHIFT                 (4U)
#define SDMAARM_CONFIG_RTDOBS_MASK               (0x800U)
#define SDMAARM_CONFIG_RTDOBS_SHIFT              (11U)
#define SDMAARM_CONFIG_DSPDMA_MASK               (0x1000U)
#define SDMAARM_CONFIG_DSPDMA_SHIFT              (12U)
/*! @} */

/*! @name SDMA_LOCK - SDMA LOCK */
/*! @{ */
#define SDMAARM_SDMA_LOCK_LOCK_MASK              (0x1U)
#define SDMAARM_SDMA_LOCK_LOCK_SHIFT             (0U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_MASK   (0x2U)
#define SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_SHIFT  (1U)
/*! @} */

/*! @name ONCE_ENB - OnCE Enable */
/*! @{ */
#define SDMAARM_ONCE_ENB_ENB_MASK                (0x1U)
#define SDMAARM_ONCE_ENB_ENB_SHIFT               (0U)
/*! @} */

/*! @name ONCE_DATA - OnCE Data Register */
/*! @{ */
#define SDMAARM_ONCE_DATA_DATA_MASK              (0xFFFFFFFFU)
#define SDMAARM_ONCE_DATA_DATA_SHIFT             (0U)
#define SDMAARM_ONCE_DATA_DATA(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_DATA_DATA_SHIFT)) & SDMAARM_ONCE_DATA_DATA_MASK)
/*! @} */

/*! @name ONCE_INSTR - OnCE Instruction Register */
/*! @{ */
#define SDMAARM_ONCE_INSTR_INSTR_MASK            (0xFFFFU)
#define SDMAARM_ONCE_INSTR_INSTR_SHIFT           (0U)
#define SDMAARM_ONCE_INSTR_INSTR(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_INSTR_INSTR_SHIFT)) & SDMAARM_ONCE_INSTR_INSTR_MASK)
/*! @} */

/*! @name ONCE_STAT - OnCE Status Register */
/*! @{ */
#define SDMAARM_ONCE_STAT_ECDR_MASK              (0x7U)
#define SDMAARM_ONCE_STAT_ECDR_SHIFT             (0U)
/*! ECDR
 *  0b000..1 matched addra_cond
 *  0b001..1 matched addrb_cond
 *  0b010..1 matched data_cond
 */
#define SDMAARM_ONCE_STAT_ECDR(x)                (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_ECDR_SHIFT)) & SDMAARM_ONCE_STAT_ECDR_MASK)
#define SDMAARM_ONCE_STAT_MST_MASK               (0x80U)
#define SDMAARM_ONCE_STAT_MST_SHIFT              (7U)
#define SDMAARM_ONCE_STAT_SWB_MASK               (0x100U)
#define SDMAARM_ONCE_STAT_SWB_SHIFT              (8U)
#define SDMAARM_ONCE_STAT_ODR_MASK               (0x200U)
#define SDMAARM_ONCE_STAT_ODR_SHIFT              (9U)
#define SDMAARM_ONCE_STAT_EDR_MASK               (0x400U)
#define SDMAARM_ONCE_STAT_EDR_SHIFT              (10U)
#define SDMAARM_ONCE_STAT_RCV_MASK               (0x800U)
#define SDMAARM_ONCE_STAT_RCV_SHIFT              (11U)
#define SDMAARM_ONCE_STAT_PST_MASK               (0xF000U)
#define SDMAARM_ONCE_STAT_PST_SHIFT              (12U)
/*! PST
 *  0b0000..Program
 *  0b0001..Data
 *  0b0010..Change of Flow
 *  0b0011..Change of Flow in Loop
 *  0b0100..Debug
 *  0b0101..Functional Unit
 *  0b0110..Sleep
 *  0b0111..Save
 *  0b1000..Program in Sleep
 *  0b1001..Data in Sleep
 *  0b0010..Change of Flow in Sleep
 *  0b0011..Change Flow in Loop in Sleep
 *  0b1100..Debug in Sleep
 *  0b1101..Functional Unit in Sleep
 *  0b1110..Sleep after Reset
 *  0b1111..Restore
 */
#define SDMAARM_ONCE_STAT_PST(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_STAT_PST_SHIFT)) & SDMAARM_ONCE_STAT_PST_MASK)
/*! @} */

/*! @name ONCE_CMD - OnCE Command Register */
/*! @{ */
#define SDMAARM_ONCE_CMD_CMD_MASK                (0xFU)
#define SDMAARM_ONCE_CMD_CMD_SHIFT               (0U)
/*! CMD
 *  0b0000..rstatus
 *  0b0001..dmov
 *  0b0010..exec_once
 *  0b0011..run_core
 *  0b0100..exec_core
 *  0b0101..debug_rqst
 *  0b0110..rbuffer
 */
#define SDMAARM_ONCE_CMD_CMD(x)                  (((uint32_t)(((uint32_t)(x)) << SDMAARM_ONCE_CMD_CMD_SHIFT)) & SDMAARM_ONCE_CMD_CMD_MASK)
/*! @} */

/*! @name ILLINSTADDR - Illegal Instruction Trap Address */
/*! @{ */
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK     (0x3FFFU)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT    (0U)
#define SDMAARM_ILLINSTADDR_ILLINSTADDR(x)       (((uint32_t)(((uint32_t)(x)) << SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT)) & SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK)
/*! @} */

/*! @name CHN0ADDR - Channel 0 Boot Address */
/*! @{ */
#define SDMAARM_CHN0ADDR_CHN0ADDR_MASK           (0x3FFFU)
#define SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT          (0U)
#define SDMAARM_CHN0ADDR_CHN0ADDR(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT)) & SDMAARM_CHN0ADDR_CHN0ADDR_MASK)
#define SDMAARM_CHN0ADDR_SMSZ_MASK               (0x4000U)
#define SDMAARM_CHN0ADDR_SMSZ_SHIFT              (14U)
/*! @} */

/*! @name EVT_MIRROR - DMA Requests */
/*! @{ */
#define SDMAARM_EVT_MIRROR_EVENTS_MASK           (0xFFFFFFFFU)
#define SDMAARM_EVT_MIRROR_EVENTS_SHIFT          (0U)
/*! EVENTS
 *  0b00000000000000000000000000000000..DMA request event not pending
 *  0b00000000000000000000000000000001..DMA request event pending
 */
#define SDMAARM_EVT_MIRROR_EVENTS(x)             (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR_EVENTS_MASK)
/*! @} */

/*! @name EVT_MIRROR2 - DMA Requests 2 */
/*! @{ */
#define SDMAARM_EVT_MIRROR2_EVENTS_MASK          (0xFFFFU)
#define SDMAARM_EVT_MIRROR2_EVENTS_SHIFT         (0U)
/*! EVENTS
 *  0b0000000000000000..- DMA request event not pending
 */
#define SDMAARM_EVT_MIRROR2_EVENTS(x)            (((uint32_t)(((uint32_t)(x)) << SDMAARM_EVT_MIRROR2_EVENTS_SHIFT)) & SDMAARM_EVT_MIRROR2_EVENTS_MASK)
/*! @} */

/*! @name XTRIG_CONF1 - Cross-Trigger Events Configuration Register 1 */
/*! @{ */
#define SDMAARM_XTRIG_CONF1_NUM0_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF1_NUM0_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF1_NUM0(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM0_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM0_MASK)
#define SDMAARM_XTRIG_CONF1_CNF0_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF1_CNF0_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF1_NUM1_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF1_NUM1_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF1_NUM1(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM1_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM1_MASK)
#define SDMAARM_XTRIG_CONF1_CNF1_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF1_CNF1_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF1_NUM2_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF1_NUM2_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF1_NUM2(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM2_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM2_MASK)
#define SDMAARM_XTRIG_CONF1_CNF2_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF1_CNF2_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF1_NUM3_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF1_NUM3_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF1_NUM3(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF1_NUM3_SHIFT)) & SDMAARM_XTRIG_CONF1_NUM3_MASK)
#define SDMAARM_XTRIG_CONF1_CNF3_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF1_CNF3_SHIFT           (30U)
/*! @} */

/*! @name XTRIG_CONF2 - Cross-Trigger Events Configuration Register 2 */
/*! @{ */
#define SDMAARM_XTRIG_CONF2_NUM4_MASK            (0x3FU)
#define SDMAARM_XTRIG_CONF2_NUM4_SHIFT           (0U)
#define SDMAARM_XTRIG_CONF2_NUM4(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM4_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM4_MASK)
#define SDMAARM_XTRIG_CONF2_CNF4_MASK            (0x40U)
#define SDMAARM_XTRIG_CONF2_CNF4_SHIFT           (6U)
#define SDMAARM_XTRIG_CONF2_NUM5_MASK            (0x3F00U)
#define SDMAARM_XTRIG_CONF2_NUM5_SHIFT           (8U)
#define SDMAARM_XTRIG_CONF2_NUM5(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM5_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM5_MASK)
#define SDMAARM_XTRIG_CONF2_CNF5_MASK            (0x4000U)
#define SDMAARM_XTRIG_CONF2_CNF5_SHIFT           (14U)
#define SDMAARM_XTRIG_CONF2_NUM6_MASK            (0x3F0000U)
#define SDMAARM_XTRIG_CONF2_NUM6_SHIFT           (16U)
#define SDMAARM_XTRIG_CONF2_NUM6(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM6_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM6_MASK)
#define SDMAARM_XTRIG_CONF2_CNF6_MASK            (0x400000U)
#define SDMAARM_XTRIG_CONF2_CNF6_SHIFT           (22U)
#define SDMAARM_XTRIG_CONF2_NUM7_MASK            (0x3F000000U)
#define SDMAARM_XTRIG_CONF2_NUM7_SHIFT           (24U)
#define SDMAARM_XTRIG_CONF2_NUM7(x)              (((uint32_t)(((uint32_t)(x)) << SDMAARM_XTRIG_CONF2_NUM7_SHIFT)) & SDMAARM_XTRIG_CONF2_NUM7_MASK)
#define SDMAARM_XTRIG_CONF2_CNF7_MASK            (0x40000000U)
#define SDMAARM_XTRIG_CONF2_CNF7_SHIFT           (30U)
/*! @} */

/*! @name SDMA_CHNPRI - Channel Priority Registers */
/*! @{ */
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK         (0x7U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT        (0U)
#define SDMAARM_SDMA_CHNPRI_CHNPRIn(x)           (((uint32_t)(((uint32_t)(x)) << SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT)) & SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK)
/*! @} */

/* The count of SDMAARM_SDMA_CHNPRI */
#define SDMAARM_SDMA_CHNPRI_COUNT                (32U)

/*! @name CHNENBL - Channel Enable RAM */
/*! @{ */
#define SDMAARM_CHNENBL_ENBLn_MASK               (0xFFFFFFFFU)
#define SDMAARM_CHNENBL_ENBLn_SHIFT              (0U)
#define SDMAARM_CHNENBL_ENBLn(x)                 (((uint32_t)(((uint32_t)(x)) << SDMAARM_CHNENBL_ENBLn_SHIFT)) & SDMAARM_CHNENBL_ENBLn_MASK)
/*! @} */

/* The count of SDMAARM_CHNENBL */
#define SDMAARM_CHNENBL_COUNT                    (48U)

/*! @name DONE0_CONFIG - SDMA DONE0 Configuration */
/*! @{ */
#define SDMAARM_DONE0_CONFIG_CH_SEL0_MASK        (0x1FU)
#define SDMAARM_DONE0_CONFIG_CH_SEL0_SHIFT       (0U)
#define SDMAARM_DONE0_CONFIG_CH_SEL0(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE0_CONFIG_CH_SEL0_SHIFT)) & SDMAARM_DONE0_CONFIG_CH_SEL0_MASK)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS0_MASK   (0x40U)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS0_SHIFT  (6U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL0_MASK      (0x80U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL0_SHIFT     (7U)
#define SDMAARM_DONE0_CONFIG_CH_SEL1_MASK        (0x1F00U)
#define SDMAARM_DONE0_CONFIG_CH_SEL1_SHIFT       (8U)
#define SDMAARM_DONE0_CONFIG_CH_SEL1(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE0_CONFIG_CH_SEL1_SHIFT)) & SDMAARM_DONE0_CONFIG_CH_SEL1_MASK)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS1_MASK   (0x4000U)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS1_SHIFT  (14U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL1_MASK      (0x8000U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL1_SHIFT     (15U)
#define SDMAARM_DONE0_CONFIG_CH_SEL2_MASK        (0x1F0000U)
#define SDMAARM_DONE0_CONFIG_CH_SEL2_SHIFT       (16U)
#define SDMAARM_DONE0_CONFIG_CH_SEL2(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE0_CONFIG_CH_SEL2_SHIFT)) & SDMAARM_DONE0_CONFIG_CH_SEL2_MASK)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS2_MASK   (0x400000U)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS2_SHIFT  (22U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL2_MASK      (0x800000U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL2_SHIFT     (23U)
#define SDMAARM_DONE0_CONFIG_CH_SEL3_MASK        (0x1F000000U)
#define SDMAARM_DONE0_CONFIG_CH_SEL3_SHIFT       (24U)
#define SDMAARM_DONE0_CONFIG_CH_SEL3(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE0_CONFIG_CH_SEL3_SHIFT)) & SDMAARM_DONE0_CONFIG_CH_SEL3_MASK)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS3_MASK   (0x40000000U)
#define SDMAARM_DONE0_CONFIG_SW_DONE_DIS3_SHIFT  (30U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL3_MASK      (0x80000000U)
#define SDMAARM_DONE0_CONFIG_DONE_SEL3_SHIFT     (31U)
/*! @} */

/*! @name DONE1_CONFIG - SDMA DONE1 Configuration */
/*! @{ */
#define SDMAARM_DONE1_CONFIG_CH_SEL4_MASK        (0x1FU)
#define SDMAARM_DONE1_CONFIG_CH_SEL4_SHIFT       (0U)
#define SDMAARM_DONE1_CONFIG_CH_SEL4(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE1_CONFIG_CH_SEL4_SHIFT)) & SDMAARM_DONE1_CONFIG_CH_SEL4_MASK)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS4_MASK   (0x40U)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS4_SHIFT  (6U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL4_MASK      (0x80U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL4_SHIFT     (7U)
#define SDMAARM_DONE1_CONFIG_CH_SEL5_MASK        (0x1F00U)
#define SDMAARM_DONE1_CONFIG_CH_SEL5_SHIFT       (8U)
#define SDMAARM_DONE1_CONFIG_CH_SEL5(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE1_CONFIG_CH_SEL5_SHIFT)) & SDMAARM_DONE1_CONFIG_CH_SEL5_MASK)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS5_MASK   (0x4000U)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS5_SHIFT  (14U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL5_MASK      (0x8000U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL5_SHIFT     (15U)
#define SDMAARM_DONE1_CONFIG_CH_SEL6_MASK        (0x1F0000U)
#define SDMAARM_DONE1_CONFIG_CH_SEL6_SHIFT       (16U)
#define SDMAARM_DONE1_CONFIG_CH_SEL6(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE1_CONFIG_CH_SEL6_SHIFT)) & SDMAARM_DONE1_CONFIG_CH_SEL6_MASK)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS6_MASK   (0x400000U)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS6_SHIFT  (22U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL6_MASK      (0x800000U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL6_SHIFT     (23U)
#define SDMAARM_DONE1_CONFIG_CH_SEL7_MASK        (0x1F000000U)
#define SDMAARM_DONE1_CONFIG_CH_SEL7_SHIFT       (24U)
#define SDMAARM_DONE1_CONFIG_CH_SEL7(x)          (((uint32_t)(((uint32_t)(x)) << SDMAARM_DONE1_CONFIG_CH_SEL7_SHIFT)) & SDMAARM_DONE1_CONFIG_CH_SEL7_MASK)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS7_MASK   (0x40000000U)
#define SDMAARM_DONE1_CONFIG_SW_DONE_DIS7_SHIFT  (30U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL7_MASK      (0x80000000U)
#define SDMAARM_DONE1_CONFIG_DONE_SEL7_SHIFT     (31U)
/*! @} */


/*!
 * @}
 */ /* end of group SDMAARM_Register_Masks */


/* SDMAARM - Peripheral instance base addresses */
/** Peripheral SDMAARM1 base pointer */
#define SDMAARM1_BASE_PTR                        ((SDMAARM_MemMapPtr)0x30BD0000u)
/** Peripheral SDMAARM2 base pointer */
#define SDMAARM2_BASE_PTR                        ((SDMAARM_MemMapPtr)0x302C0000u)
/** Peripheral SDMAARM3 base pointer */
#define SDMAARM3_BASE_PTR                        ((SDMAARM_MemMapPtr)0x302B0000u)
/** Array initializer of SDMAARM peripheral base pointers */
#define SDMAARM_BASE_PTRS                        { SDMAARM1_BASE_PTR, SDMAARM2_BASE_PTR, SDMAARM3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SDMAARM - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDMAARM_Register_Accessor_Macros SDMAARM - Register accessor macros
 * @{
 */


/* SDMAARM - Register instance definitions */
/* SDMAARM1 */
#define SDMAARM1_MC0PTR                          SDMAARM_MC0PTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_INTR                            SDMAARM_INTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_STOP_STAT                       SDMAARM_STOP_STAT_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_HSTART                          SDMAARM_HSTART_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTOVR                          SDMAARM_EVTOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_DSPOVR                          SDMAARM_DSPOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_HOSTOVR                         SDMAARM_HOSTOVR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTPEND                         SDMAARM_EVTPEND_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_RESET                           SDMAARM_RESET_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTERR                          SDMAARM_EVTERR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_INTRMASK                        SDMAARM_INTRMASK_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_PSW                             SDMAARM_PSW_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVTERRDBG                       SDMAARM_EVTERRDBG_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_CONFIG                          SDMAARM_CONFIG_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_SDMA_LOCK                       SDMAARM_SDMA_LOCK_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_ENB                        SDMAARM_ONCE_ENB_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_DATA                       SDMAARM_ONCE_DATA_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_INSTR                      SDMAARM_ONCE_INSTR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_STAT                       SDMAARM_ONCE_STAT_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ONCE_CMD                        SDMAARM_ONCE_CMD_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_ILLINSTADDR                     SDMAARM_ILLINSTADDR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_CHN0ADDR                        SDMAARM_CHN0ADDR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVT_MIRROR                      SDMAARM_EVT_MIRROR_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_EVT_MIRROR2                     SDMAARM_EVT_MIRROR2_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_XTRIG_CONF1                     SDMAARM_XTRIG_CONF1_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_XTRIG_CONF2                     SDMAARM_XTRIG_CONF2_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_SDMA_CHNPRI0                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,0)
#define SDMAARM1_SDMA_CHNPRI1                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,1)
#define SDMAARM1_SDMA_CHNPRI2                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,2)
#define SDMAARM1_SDMA_CHNPRI3                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,3)
#define SDMAARM1_SDMA_CHNPRI4                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,4)
#define SDMAARM1_SDMA_CHNPRI5                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,5)
#define SDMAARM1_SDMA_CHNPRI6                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,6)
#define SDMAARM1_SDMA_CHNPRI7                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,7)
#define SDMAARM1_SDMA_CHNPRI8                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,8)
#define SDMAARM1_SDMA_CHNPRI9                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,9)
#define SDMAARM1_SDMA_CHNPRI10                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,10)
#define SDMAARM1_SDMA_CHNPRI11                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,11)
#define SDMAARM1_SDMA_CHNPRI12                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,12)
#define SDMAARM1_SDMA_CHNPRI13                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,13)
#define SDMAARM1_SDMA_CHNPRI14                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,14)
#define SDMAARM1_SDMA_CHNPRI15                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,15)
#define SDMAARM1_SDMA_CHNPRI16                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,16)
#define SDMAARM1_SDMA_CHNPRI17                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,17)
#define SDMAARM1_SDMA_CHNPRI18                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,18)
#define SDMAARM1_SDMA_CHNPRI19                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,19)
#define SDMAARM1_SDMA_CHNPRI20                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,20)
#define SDMAARM1_SDMA_CHNPRI21                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,21)
#define SDMAARM1_SDMA_CHNPRI22                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,22)
#define SDMAARM1_SDMA_CHNPRI23                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,23)
#define SDMAARM1_SDMA_CHNPRI24                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,24)
#define SDMAARM1_SDMA_CHNPRI25                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,25)
#define SDMAARM1_SDMA_CHNPRI26                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,26)
#define SDMAARM1_SDMA_CHNPRI27                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,27)
#define SDMAARM1_SDMA_CHNPRI28                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,28)
#define SDMAARM1_SDMA_CHNPRI29                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,29)
#define SDMAARM1_SDMA_CHNPRI30                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,30)
#define SDMAARM1_SDMA_CHNPRI31                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,31)
#define SDMAARM1_CHNENBL0                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,0)
#define SDMAARM1_CHNENBL1                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,1)
#define SDMAARM1_CHNENBL2                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,2)
#define SDMAARM1_CHNENBL3                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,3)
#define SDMAARM1_CHNENBL4                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,4)
#define SDMAARM1_CHNENBL5                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,5)
#define SDMAARM1_CHNENBL6                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,6)
#define SDMAARM1_CHNENBL7                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,7)
#define SDMAARM1_CHNENBL8                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,8)
#define SDMAARM1_CHNENBL9                        SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,9)
#define SDMAARM1_CHNENBL10                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,10)
#define SDMAARM1_CHNENBL11                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,11)
#define SDMAARM1_CHNENBL12                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,12)
#define SDMAARM1_CHNENBL13                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,13)
#define SDMAARM1_CHNENBL14                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,14)
#define SDMAARM1_CHNENBL15                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,15)
#define SDMAARM1_CHNENBL16                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,16)
#define SDMAARM1_CHNENBL17                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,17)
#define SDMAARM1_CHNENBL18                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,18)
#define SDMAARM1_CHNENBL19                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,19)
#define SDMAARM1_CHNENBL20                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,20)
#define SDMAARM1_CHNENBL21                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,21)
#define SDMAARM1_CHNENBL22                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,22)
#define SDMAARM1_CHNENBL23                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,23)
#define SDMAARM1_CHNENBL24                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,24)
#define SDMAARM1_CHNENBL25                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,25)
#define SDMAARM1_CHNENBL26                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,26)
#define SDMAARM1_CHNENBL27                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,27)
#define SDMAARM1_CHNENBL28                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,28)
#define SDMAARM1_CHNENBL29                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,29)
#define SDMAARM1_CHNENBL30                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,30)
#define SDMAARM1_CHNENBL31                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,31)
#define SDMAARM1_CHNENBL32                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,32)
#define SDMAARM1_CHNENBL33                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,33)
#define SDMAARM1_CHNENBL34                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,34)
#define SDMAARM1_CHNENBL35                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,35)
#define SDMAARM1_CHNENBL36                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,36)
#define SDMAARM1_CHNENBL37                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,37)
#define SDMAARM1_CHNENBL38                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,38)
#define SDMAARM1_CHNENBL39                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,39)
#define SDMAARM1_CHNENBL40                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,40)
#define SDMAARM1_CHNENBL41                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,41)
#define SDMAARM1_CHNENBL42                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,42)
#define SDMAARM1_CHNENBL43                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,43)
#define SDMAARM1_CHNENBL44                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,44)
#define SDMAARM1_CHNENBL45                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,45)
#define SDMAARM1_CHNENBL46                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,46)
#define SDMAARM1_CHNENBL47                       SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,47)
#define SDMAARM1_DONE0_CONFIG                    SDMAARM_DONE0_CONFIG_REG(SDMAARM1_BASE_PTR)
#define SDMAARM1_DONE1_CONFIG                    SDMAARM_DONE1_CONFIG_REG(SDMAARM1_BASE_PTR)
/* SDMAARM2 */
#define SDMAARM2_MC0PTR                          SDMAARM_MC0PTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_INTR                            SDMAARM_INTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_STOP_STAT                       SDMAARM_STOP_STAT_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_HSTART                          SDMAARM_HSTART_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTOVR                          SDMAARM_EVTOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_DSPOVR                          SDMAARM_DSPOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_HOSTOVR                         SDMAARM_HOSTOVR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTPEND                         SDMAARM_EVTPEND_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_RESET                           SDMAARM_RESET_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTERR                          SDMAARM_EVTERR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_INTRMASK                        SDMAARM_INTRMASK_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_PSW                             SDMAARM_PSW_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVTERRDBG                       SDMAARM_EVTERRDBG_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_CONFIG                          SDMAARM_CONFIG_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_SDMA_LOCK                       SDMAARM_SDMA_LOCK_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_ENB                        SDMAARM_ONCE_ENB_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_DATA                       SDMAARM_ONCE_DATA_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_INSTR                      SDMAARM_ONCE_INSTR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_STAT                       SDMAARM_ONCE_STAT_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ONCE_CMD                        SDMAARM_ONCE_CMD_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_ILLINSTADDR                     SDMAARM_ILLINSTADDR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_CHN0ADDR                        SDMAARM_CHN0ADDR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVT_MIRROR                      SDMAARM_EVT_MIRROR_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_EVT_MIRROR2                     SDMAARM_EVT_MIRROR2_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_XTRIG_CONF1                     SDMAARM_XTRIG_CONF1_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_XTRIG_CONF2                     SDMAARM_XTRIG_CONF2_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_SDMA_CHNPRI0                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,0)
#define SDMAARM2_SDMA_CHNPRI1                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,1)
#define SDMAARM2_SDMA_CHNPRI2                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,2)
#define SDMAARM2_SDMA_CHNPRI3                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,3)
#define SDMAARM2_SDMA_CHNPRI4                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,4)
#define SDMAARM2_SDMA_CHNPRI5                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,5)
#define SDMAARM2_SDMA_CHNPRI6                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,6)
#define SDMAARM2_SDMA_CHNPRI7                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,7)
#define SDMAARM2_SDMA_CHNPRI8                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,8)
#define SDMAARM2_SDMA_CHNPRI9                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,9)
#define SDMAARM2_SDMA_CHNPRI10                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,10)
#define SDMAARM2_SDMA_CHNPRI11                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,11)
#define SDMAARM2_SDMA_CHNPRI12                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,12)
#define SDMAARM2_SDMA_CHNPRI13                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,13)
#define SDMAARM2_SDMA_CHNPRI14                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,14)
#define SDMAARM2_SDMA_CHNPRI15                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,15)
#define SDMAARM2_SDMA_CHNPRI16                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,16)
#define SDMAARM2_SDMA_CHNPRI17                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,17)
#define SDMAARM2_SDMA_CHNPRI18                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,18)
#define SDMAARM2_SDMA_CHNPRI19                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,19)
#define SDMAARM2_SDMA_CHNPRI20                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,20)
#define SDMAARM2_SDMA_CHNPRI21                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,21)
#define SDMAARM2_SDMA_CHNPRI22                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,22)
#define SDMAARM2_SDMA_CHNPRI23                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,23)
#define SDMAARM2_SDMA_CHNPRI24                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,24)
#define SDMAARM2_SDMA_CHNPRI25                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,25)
#define SDMAARM2_SDMA_CHNPRI26                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,26)
#define SDMAARM2_SDMA_CHNPRI27                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,27)
#define SDMAARM2_SDMA_CHNPRI28                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,28)
#define SDMAARM2_SDMA_CHNPRI29                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,29)
#define SDMAARM2_SDMA_CHNPRI30                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,30)
#define SDMAARM2_SDMA_CHNPRI31                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,31)
#define SDMAARM2_CHNENBL0                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,0)
#define SDMAARM2_CHNENBL1                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,1)
#define SDMAARM2_CHNENBL2                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,2)
#define SDMAARM2_CHNENBL3                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,3)
#define SDMAARM2_CHNENBL4                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,4)
#define SDMAARM2_CHNENBL5                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,5)
#define SDMAARM2_CHNENBL6                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,6)
#define SDMAARM2_CHNENBL7                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,7)
#define SDMAARM2_CHNENBL8                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,8)
#define SDMAARM2_CHNENBL9                        SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,9)
#define SDMAARM2_CHNENBL10                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,10)
#define SDMAARM2_CHNENBL11                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,11)
#define SDMAARM2_CHNENBL12                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,12)
#define SDMAARM2_CHNENBL13                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,13)
#define SDMAARM2_CHNENBL14                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,14)
#define SDMAARM2_CHNENBL15                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,15)
#define SDMAARM2_CHNENBL16                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,16)
#define SDMAARM2_CHNENBL17                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,17)
#define SDMAARM2_CHNENBL18                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,18)
#define SDMAARM2_CHNENBL19                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,19)
#define SDMAARM2_CHNENBL20                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,20)
#define SDMAARM2_CHNENBL21                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,21)
#define SDMAARM2_CHNENBL22                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,22)
#define SDMAARM2_CHNENBL23                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,23)
#define SDMAARM2_CHNENBL24                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,24)
#define SDMAARM2_CHNENBL25                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,25)
#define SDMAARM2_CHNENBL26                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,26)
#define SDMAARM2_CHNENBL27                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,27)
#define SDMAARM2_CHNENBL28                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,28)
#define SDMAARM2_CHNENBL29                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,29)
#define SDMAARM2_CHNENBL30                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,30)
#define SDMAARM2_CHNENBL31                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,31)
#define SDMAARM2_CHNENBL32                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,32)
#define SDMAARM2_CHNENBL33                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,33)
#define SDMAARM2_CHNENBL34                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,34)
#define SDMAARM2_CHNENBL35                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,35)
#define SDMAARM2_CHNENBL36                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,36)
#define SDMAARM2_CHNENBL37                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,37)
#define SDMAARM2_CHNENBL38                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,38)
#define SDMAARM2_CHNENBL39                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,39)
#define SDMAARM2_CHNENBL40                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,40)
#define SDMAARM2_CHNENBL41                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,41)
#define SDMAARM2_CHNENBL42                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,42)
#define SDMAARM2_CHNENBL43                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,43)
#define SDMAARM2_CHNENBL44                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,44)
#define SDMAARM2_CHNENBL45                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,45)
#define SDMAARM2_CHNENBL46                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,46)
#define SDMAARM2_CHNENBL47                       SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,47)
#define SDMAARM2_DONE0_CONFIG                    SDMAARM_DONE0_CONFIG_REG(SDMAARM2_BASE_PTR)
#define SDMAARM2_DONE1_CONFIG                    SDMAARM_DONE1_CONFIG_REG(SDMAARM2_BASE_PTR)
/* SDMAARM3 */
#define SDMAARM3_MC0PTR                          SDMAARM_MC0PTR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_INTR                            SDMAARM_INTR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_STOP_STAT                       SDMAARM_STOP_STAT_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_HSTART                          SDMAARM_HSTART_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVTOVR                          SDMAARM_EVTOVR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_DSPOVR                          SDMAARM_DSPOVR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_HOSTOVR                         SDMAARM_HOSTOVR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVTPEND                         SDMAARM_EVTPEND_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_RESET                           SDMAARM_RESET_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVTERR                          SDMAARM_EVTERR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_INTRMASK                        SDMAARM_INTRMASK_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_PSW                             SDMAARM_PSW_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVTERRDBG                       SDMAARM_EVTERRDBG_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_CONFIG                          SDMAARM_CONFIG_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_SDMA_LOCK                       SDMAARM_SDMA_LOCK_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ONCE_ENB                        SDMAARM_ONCE_ENB_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ONCE_DATA                       SDMAARM_ONCE_DATA_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ONCE_INSTR                      SDMAARM_ONCE_INSTR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ONCE_STAT                       SDMAARM_ONCE_STAT_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ONCE_CMD                        SDMAARM_ONCE_CMD_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_ILLINSTADDR                     SDMAARM_ILLINSTADDR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_CHN0ADDR                        SDMAARM_CHN0ADDR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVT_MIRROR                      SDMAARM_EVT_MIRROR_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_EVT_MIRROR2                     SDMAARM_EVT_MIRROR2_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_XTRIG_CONF1                     SDMAARM_XTRIG_CONF1_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_XTRIG_CONF2                     SDMAARM_XTRIG_CONF2_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_SDMA_CHNPRI0                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,0)
#define SDMAARM3_SDMA_CHNPRI1                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,1)
#define SDMAARM3_SDMA_CHNPRI2                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,2)
#define SDMAARM3_SDMA_CHNPRI3                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,3)
#define SDMAARM3_SDMA_CHNPRI4                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,4)
#define SDMAARM3_SDMA_CHNPRI5                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,5)
#define SDMAARM3_SDMA_CHNPRI6                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,6)
#define SDMAARM3_SDMA_CHNPRI7                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,7)
#define SDMAARM3_SDMA_CHNPRI8                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,8)
#define SDMAARM3_SDMA_CHNPRI9                    SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,9)
#define SDMAARM3_SDMA_CHNPRI10                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,10)
#define SDMAARM3_SDMA_CHNPRI11                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,11)
#define SDMAARM3_SDMA_CHNPRI12                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,12)
#define SDMAARM3_SDMA_CHNPRI13                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,13)
#define SDMAARM3_SDMA_CHNPRI14                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,14)
#define SDMAARM3_SDMA_CHNPRI15                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,15)
#define SDMAARM3_SDMA_CHNPRI16                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,16)
#define SDMAARM3_SDMA_CHNPRI17                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,17)
#define SDMAARM3_SDMA_CHNPRI18                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,18)
#define SDMAARM3_SDMA_CHNPRI19                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,19)
#define SDMAARM3_SDMA_CHNPRI20                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,20)
#define SDMAARM3_SDMA_CHNPRI21                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,21)
#define SDMAARM3_SDMA_CHNPRI22                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,22)
#define SDMAARM3_SDMA_CHNPRI23                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,23)
#define SDMAARM3_SDMA_CHNPRI24                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,24)
#define SDMAARM3_SDMA_CHNPRI25                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,25)
#define SDMAARM3_SDMA_CHNPRI26                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,26)
#define SDMAARM3_SDMA_CHNPRI27                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,27)
#define SDMAARM3_SDMA_CHNPRI28                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,28)
#define SDMAARM3_SDMA_CHNPRI29                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,29)
#define SDMAARM3_SDMA_CHNPRI30                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,30)
#define SDMAARM3_SDMA_CHNPRI31                   SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,31)
#define SDMAARM3_CHNENBL0                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,0)
#define SDMAARM3_CHNENBL1                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,1)
#define SDMAARM3_CHNENBL2                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,2)
#define SDMAARM3_CHNENBL3                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,3)
#define SDMAARM3_CHNENBL4                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,4)
#define SDMAARM3_CHNENBL5                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,5)
#define SDMAARM3_CHNENBL6                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,6)
#define SDMAARM3_CHNENBL7                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,7)
#define SDMAARM3_CHNENBL8                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,8)
#define SDMAARM3_CHNENBL9                        SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,9)
#define SDMAARM3_CHNENBL10                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,10)
#define SDMAARM3_CHNENBL11                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,11)
#define SDMAARM3_CHNENBL12                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,12)
#define SDMAARM3_CHNENBL13                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,13)
#define SDMAARM3_CHNENBL14                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,14)
#define SDMAARM3_CHNENBL15                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,15)
#define SDMAARM3_CHNENBL16                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,16)
#define SDMAARM3_CHNENBL17                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,17)
#define SDMAARM3_CHNENBL18                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,18)
#define SDMAARM3_CHNENBL19                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,19)
#define SDMAARM3_CHNENBL20                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,20)
#define SDMAARM3_CHNENBL21                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,21)
#define SDMAARM3_CHNENBL22                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,22)
#define SDMAARM3_CHNENBL23                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,23)
#define SDMAARM3_CHNENBL24                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,24)
#define SDMAARM3_CHNENBL25                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,25)
#define SDMAARM3_CHNENBL26                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,26)
#define SDMAARM3_CHNENBL27                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,27)
#define SDMAARM3_CHNENBL28                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,28)
#define SDMAARM3_CHNENBL29                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,29)
#define SDMAARM3_CHNENBL30                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,30)
#define SDMAARM3_CHNENBL31                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,31)
#define SDMAARM3_CHNENBL32                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,32)
#define SDMAARM3_CHNENBL33                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,33)
#define SDMAARM3_CHNENBL34                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,34)
#define SDMAARM3_CHNENBL35                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,35)
#define SDMAARM3_CHNENBL36                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,36)
#define SDMAARM3_CHNENBL37                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,37)
#define SDMAARM3_CHNENBL38                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,38)
#define SDMAARM3_CHNENBL39                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,39)
#define SDMAARM3_CHNENBL40                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,40)
#define SDMAARM3_CHNENBL41                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,41)
#define SDMAARM3_CHNENBL42                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,42)
#define SDMAARM3_CHNENBL43                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,43)
#define SDMAARM3_CHNENBL44                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,44)
#define SDMAARM3_CHNENBL45                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,45)
#define SDMAARM3_CHNENBL46                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,46)
#define SDMAARM3_CHNENBL47                       SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,47)
#define SDMAARM3_DONE0_CONFIG                    SDMAARM_DONE0_CONFIG_REG(SDMAARM3_BASE_PTR)
#define SDMAARM3_DONE1_CONFIG                    SDMAARM_DONE1_CONFIG_REG(SDMAARM3_BASE_PTR)

/* SDMAARM - Register array accessors */
#define SDMAARM1_SDMA_CHNPRI(index)              SDMAARM_SDMA_CHNPRI_REG(SDMAARM1_BASE_PTR,index)
#define SDMAARM2_SDMA_CHNPRI(index)              SDMAARM_SDMA_CHNPRI_REG(SDMAARM2_BASE_PTR,index)
#define SDMAARM3_SDMA_CHNPRI(index)              SDMAARM_SDMA_CHNPRI_REG(SDMAARM3_BASE_PTR,index)
#define SDMAARM1_CHNENBL(index)                  SDMAARM_CHNENBL_REG(SDMAARM1_BASE_PTR,index)
#define SDMAARM2_CHNENBL(index)                  SDMAARM_CHNENBL_REG(SDMAARM2_BASE_PTR,index)
#define SDMAARM3_CHNENBL(index)                  SDMAARM_CHNENBL_REG(SDMAARM3_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SDMAARM_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SDMAARM_Peripheral */


/* ----------------------------------------------------------------------------
   -- SEMA4
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Peripheral SEMA4
 * @{
 */

/** SEMA4 - Peripheral register structure */
typedef struct SEMA4_MemMap {
  uint8_t Gate00;                                  /**< Semaphores Gate 0 Register, offset: 0x0 */
  uint8_t Gate01;                                  /**< Semaphores Gate 1 Register, offset: 0x1 */
  uint8_t Gate02;                                  /**< Semaphores Gate 2 Register, offset: 0x2 */
  uint8_t Gate03;                                  /**< Semaphores Gate 3 Register, offset: 0x3 */
  uint8_t Gate04;                                  /**< Semaphores Gate 4 Register, offset: 0x4 */
  uint8_t Gate05;                                  /**< Semaphores Gate 5 Register, offset: 0x5 */
  uint8_t Gate06;                                  /**< Semaphores Gate 6 Register, offset: 0x6 */
  uint8_t Gate07;                                  /**< Semaphores Gate 7 Register, offset: 0x7 */
  uint8_t Gate08;                                  /**< Semaphores Gate 8 Register, offset: 0x8 */
  uint8_t Gate09;                                  /**< Semaphores Gate 9 Register, offset: 0x9 */
  uint8_t Gate10;                                  /**< Semaphores Gate 10 Register, offset: 0xA */
  uint8_t Gate11;                                  /**< Semaphores Gate 11 Register, offset: 0xB */
  uint8_t Gate12;                                  /**< Semaphores Gate 12 Register, offset: 0xC */
  uint8_t Gate13;                                  /**< Semaphores Gate 13 Register, offset: 0xD */
  uint8_t Gate14;                                  /**< Semaphores Gate 14 Register, offset: 0xE */
  uint8_t Gate15;                                  /**< Semaphores Gate 15 Register, offset: 0xF */
  uint8_t RESERVED_0[48];
  struct {                                         /* offset: 0x40, array step: 0x8 */
    uint16_t CPINE;                                  /**< Semaphores Processor n IRQ Notification Enable, array offset: 0x40, array step: 0x8 */
    uint8_t RESERVED_0[6];
  } CPINE[2];
  uint8_t RESERVED_1[48];
  struct {                                         /* offset: 0x80, array step: 0x8 */
    uint16_t CPNTF;                                  /**< Semaphores Processor n IRQ Notification, array offset: 0x80, array step: 0x8 */
    uint8_t RESERVED_0[6];
  } CPNTF[2];
  uint8_t RESERVED_2[112];
  uint16_t RSTGT;                                  /**< Semaphores (Secure) Reset Gate n, offset: 0x100 */
  uint8_t RESERVED_3[2];
  uint16_t RSTNTF;                                 /**< Semaphores (Secure) Reset IRQ Notification, offset: 0x104 */
} volatile *SEMA4_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SEMA4 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Accessor_Macros SEMA4 - Register accessor macros
 * @{
 */


/* SEMA4 - Register accessors */
#define SEMA4_Gate00_REG(base)                   ((base)->Gate00)
#define SEMA4_Gate01_REG(base)                   ((base)->Gate01)
#define SEMA4_Gate02_REG(base)                   ((base)->Gate02)
#define SEMA4_Gate03_REG(base)                   ((base)->Gate03)
#define SEMA4_Gate04_REG(base)                   ((base)->Gate04)
#define SEMA4_Gate05_REG(base)                   ((base)->Gate05)
#define SEMA4_Gate06_REG(base)                   ((base)->Gate06)
#define SEMA4_Gate07_REG(base)                   ((base)->Gate07)
#define SEMA4_Gate08_REG(base)                   ((base)->Gate08)
#define SEMA4_Gate09_REG(base)                   ((base)->Gate09)
#define SEMA4_Gate10_REG(base)                   ((base)->Gate10)
#define SEMA4_Gate11_REG(base)                   ((base)->Gate11)
#define SEMA4_Gate12_REG(base)                   ((base)->Gate12)
#define SEMA4_Gate13_REG(base)                   ((base)->Gate13)
#define SEMA4_Gate14_REG(base)                   ((base)->Gate14)
#define SEMA4_Gate15_REG(base)                   ((base)->Gate15)
#define SEMA4_CPINE_REG(base,index)              ((base)->CPINE[index].CPINE)
#define SEMA4_CPNTF_REG(base,index)              ((base)->CPNTF[index].CPNTF)
#define SEMA4_RSTGT_REG(base)                    ((base)->RSTGT)
#define SEMA4_RSTNTF_REG(base)                   ((base)->RSTNTF)

/*!
 * @}
 */ /* end of group SEMA4_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SEMA4 Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Masks SEMA4 Register Masks
 * @{
 */

/*! @name Gate00 - Semaphores Gate 0 Register */
/*! @{ */
#define SEMA4_Gate00_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate00_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate00_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate00_GTFSM_SHIFT)) & SEMA4_Gate00_GTFSM_MASK)
/*! @} */

/*! @name Gate01 - Semaphores Gate 1 Register */
/*! @{ */
#define SEMA4_Gate01_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate01_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate01_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate01_GTFSM_SHIFT)) & SEMA4_Gate01_GTFSM_MASK)
/*! @} */

/*! @name Gate02 - Semaphores Gate 2 Register */
/*! @{ */
#define SEMA4_Gate02_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate02_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate02_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate02_GTFSM_SHIFT)) & SEMA4_Gate02_GTFSM_MASK)
/*! @} */

/*! @name Gate03 - Semaphores Gate 3 Register */
/*! @{ */
#define SEMA4_Gate03_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate03_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate03_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate03_GTFSM_SHIFT)) & SEMA4_Gate03_GTFSM_MASK)
/*! @} */

/*! @name Gate04 - Semaphores Gate 4 Register */
/*! @{ */
#define SEMA4_Gate04_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate04_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate04_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate04_GTFSM_SHIFT)) & SEMA4_Gate04_GTFSM_MASK)
/*! @} */

/*! @name Gate05 - Semaphores Gate 5 Register */
/*! @{ */
#define SEMA4_Gate05_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate05_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate05_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate05_GTFSM_SHIFT)) & SEMA4_Gate05_GTFSM_MASK)
/*! @} */

/*! @name Gate06 - Semaphores Gate 6 Register */
/*! @{ */
#define SEMA4_Gate06_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate06_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate06_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate06_GTFSM_SHIFT)) & SEMA4_Gate06_GTFSM_MASK)
/*! @} */

/*! @name Gate07 - Semaphores Gate 7 Register */
/*! @{ */
#define SEMA4_Gate07_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate07_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate07_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate07_GTFSM_SHIFT)) & SEMA4_Gate07_GTFSM_MASK)
/*! @} */

/*! @name Gate08 - Semaphores Gate 8 Register */
/*! @{ */
#define SEMA4_Gate08_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate08_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate08_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate08_GTFSM_SHIFT)) & SEMA4_Gate08_GTFSM_MASK)
/*! @} */

/*! @name Gate09 - Semaphores Gate 9 Register */
/*! @{ */
#define SEMA4_Gate09_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate09_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate09_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate09_GTFSM_SHIFT)) & SEMA4_Gate09_GTFSM_MASK)
/*! @} */

/*! @name Gate10 - Semaphores Gate 10 Register */
/*! @{ */
#define SEMA4_Gate10_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate10_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate10_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate10_GTFSM_SHIFT)) & SEMA4_Gate10_GTFSM_MASK)
/*! @} */

/*! @name Gate11 - Semaphores Gate 11 Register */
/*! @{ */
#define SEMA4_Gate11_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate11_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate11_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate11_GTFSM_SHIFT)) & SEMA4_Gate11_GTFSM_MASK)
/*! @} */

/*! @name Gate12 - Semaphores Gate 12 Register */
/*! @{ */
#define SEMA4_Gate12_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate12_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate12_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate12_GTFSM_SHIFT)) & SEMA4_Gate12_GTFSM_MASK)
/*! @} */

/*! @name Gate13 - Semaphores Gate 13 Register */
/*! @{ */
#define SEMA4_Gate13_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate13_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate13_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate13_GTFSM_SHIFT)) & SEMA4_Gate13_GTFSM_MASK)
/*! @} */

/*! @name Gate14 - Semaphores Gate 14 Register */
/*! @{ */
#define SEMA4_Gate14_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate14_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate14_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate14_GTFSM_SHIFT)) & SEMA4_Gate14_GTFSM_MASK)
/*! @} */

/*! @name Gate15 - Semaphores Gate 15 Register */
/*! @{ */
#define SEMA4_Gate15_GTFSM_MASK                  (0x3U)
#define SEMA4_Gate15_GTFSM_SHIFT                 (0U)
/*! GTFSM - Gate Finite State Machine.
 *  0b00..The gate is unlocked (free).
 *  0b01..The gate has been locked by processor 0.
 *  0b10..The gate has been locked by processor 1.
 *  0b11..This state encoding is never used and therefore reserved. Attempted writes of 0x03 are treated as "no
 *        operation" and do not affect the gate state machine.
 */
#define SEMA4_Gate15_GTFSM(x)                    (((uint8_t)(((uint8_t)(x)) << SEMA4_Gate15_GTFSM_SHIFT)) & SEMA4_Gate15_GTFSM_MASK)
/*! @} */

/*! @name CPINE - Semaphores Processor n IRQ Notification Enable */
/*! @{ */
#define SEMA4_CPINE_INE7_MASK                    (0x1U)
#define SEMA4_CPINE_INE7_SHIFT                   (0U)
#define SEMA4_CPINE_INE6_MASK                    (0x2U)
#define SEMA4_CPINE_INE6_SHIFT                   (1U)
#define SEMA4_CPINE_INE5_MASK                    (0x4U)
#define SEMA4_CPINE_INE5_SHIFT                   (2U)
#define SEMA4_CPINE_INE4_MASK                    (0x8U)
#define SEMA4_CPINE_INE4_SHIFT                   (3U)
#define SEMA4_CPINE_INE3_MASK                    (0x10U)
#define SEMA4_CPINE_INE3_SHIFT                   (4U)
#define SEMA4_CPINE_INE2_MASK                    (0x20U)
#define SEMA4_CPINE_INE2_SHIFT                   (5U)
#define SEMA4_CPINE_INE1_MASK                    (0x40U)
#define SEMA4_CPINE_INE1_SHIFT                   (6U)
#define SEMA4_CPINE_INE0_MASK                    (0x80U)
#define SEMA4_CPINE_INE0_SHIFT                   (7U)
#define SEMA4_CPINE_INE15_MASK                   (0x100U)
#define SEMA4_CPINE_INE15_SHIFT                  (8U)
#define SEMA4_CPINE_INE14_MASK                   (0x200U)
#define SEMA4_CPINE_INE14_SHIFT                  (9U)
#define SEMA4_CPINE_INE13_MASK                   (0x400U)
#define SEMA4_CPINE_INE13_SHIFT                  (10U)
#define SEMA4_CPINE_INE12_MASK                   (0x800U)
#define SEMA4_CPINE_INE12_SHIFT                  (11U)
#define SEMA4_CPINE_INE11_MASK                   (0x1000U)
#define SEMA4_CPINE_INE11_SHIFT                  (12U)
#define SEMA4_CPINE_INE10_MASK                   (0x2000U)
#define SEMA4_CPINE_INE10_SHIFT                  (13U)
#define SEMA4_CPINE_INE9_MASK                    (0x4000U)
#define SEMA4_CPINE_INE9_SHIFT                   (14U)
#define SEMA4_CPINE_INE8_MASK                    (0x8000U)
#define SEMA4_CPINE_INE8_SHIFT                   (15U)
/*! @} */

/* The count of SEMA4_CPINE */
#define SEMA4_CPINE_COUNT                        (2U)

/*! @name CPNTF - Semaphores Processor n IRQ Notification */
/*! @{ */
#define SEMA4_CPNTF_GN7_MASK                     (0x1U)
#define SEMA4_CPNTF_GN7_SHIFT                    (0U)
#define SEMA4_CPNTF_GN6_MASK                     (0x2U)
#define SEMA4_CPNTF_GN6_SHIFT                    (1U)
#define SEMA4_CPNTF_GN5_MASK                     (0x4U)
#define SEMA4_CPNTF_GN5_SHIFT                    (2U)
#define SEMA4_CPNTF_GN4_MASK                     (0x8U)
#define SEMA4_CPNTF_GN4_SHIFT                    (3U)
#define SEMA4_CPNTF_GN3_MASK                     (0x10U)
#define SEMA4_CPNTF_GN3_SHIFT                    (4U)
#define SEMA4_CPNTF_GN2_MASK                     (0x20U)
#define SEMA4_CPNTF_GN2_SHIFT                    (5U)
#define SEMA4_CPNTF_GN1_MASK                     (0x40U)
#define SEMA4_CPNTF_GN1_SHIFT                    (6U)
#define SEMA4_CPNTF_GN0_MASK                     (0x80U)
#define SEMA4_CPNTF_GN0_SHIFT                    (7U)
#define SEMA4_CPNTF_GN15_MASK                    (0x100U)
#define SEMA4_CPNTF_GN15_SHIFT                   (8U)
#define SEMA4_CPNTF_GN14_MASK                    (0x200U)
#define SEMA4_CPNTF_GN14_SHIFT                   (9U)
#define SEMA4_CPNTF_GN13_MASK                    (0x400U)
#define SEMA4_CPNTF_GN13_SHIFT                   (10U)
#define SEMA4_CPNTF_GN12_MASK                    (0x800U)
#define SEMA4_CPNTF_GN12_SHIFT                   (11U)
#define SEMA4_CPNTF_GN11_MASK                    (0x1000U)
#define SEMA4_CPNTF_GN11_SHIFT                   (12U)
#define SEMA4_CPNTF_GN10_MASK                    (0x2000U)
#define SEMA4_CPNTF_GN10_SHIFT                   (13U)
#define SEMA4_CPNTF_GN9_MASK                     (0x4000U)
#define SEMA4_CPNTF_GN9_SHIFT                    (14U)
#define SEMA4_CPNTF_GN8_MASK                     (0x8000U)
#define SEMA4_CPNTF_GN8_SHIFT                    (15U)
/*! @} */

/* The count of SEMA4_CPNTF */
#define SEMA4_CPNTF_COUNT                        (2U)

/*! @name RSTGT - Semaphores (Secure) Reset Gate n */
/*! @{ */
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK    (0xFFU)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT   (0U)
#define SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP(x)      (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT)) & SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK)
#define SEMA4_RSTGT_RSTGTN_MASK                  (0xFF00U)
#define SEMA4_RSTGT_RSTGTN_SHIFT                 (8U)
#define SEMA4_RSTGT_RSTGTN(x)                    (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTGT_RSTGTN_SHIFT)) & SEMA4_RSTGT_RSTGTN_MASK)
/*! @} */

/*! @name RSTNTF - Semaphores (Secure) Reset IRQ Notification */
/*! @{ */
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK   (0xFFU)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT  (0U)
#define SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP(x)     (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT)) & SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK)
#define SEMA4_RSTNTF_RSTNTN_MASK                 (0xFF00U)
#define SEMA4_RSTNTF_RSTNTN_SHIFT                (8U)
#define SEMA4_RSTNTF_RSTNTN(x)                   (((uint16_t)(((uint16_t)(x)) << SEMA4_RSTNTF_RSTNTN_SHIFT)) & SEMA4_RSTNTF_RSTNTN_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SEMA4_Register_Masks */


/* SEMA4 - Peripheral instance base addresses */
/** Peripheral SEMA4 base pointer */
#define SEMA4_BASE_PTR                           ((SEMA4_MemMapPtr)0x30AC0000u)
/** Array initializer of SEMA4 peripheral base pointers */
#define SEMA4_BASE_PTRS                          { SEMA4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SEMA4 - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SEMA4_Register_Accessor_Macros SEMA4 - Register accessor macros
 * @{
 */


/* SEMA4 - Register instance definitions */
/* SEMA4 */
#define SEMA4_Gate00                             SEMA4_Gate00_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate01                             SEMA4_Gate01_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate02                             SEMA4_Gate02_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate03                             SEMA4_Gate03_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate04                             SEMA4_Gate04_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate05                             SEMA4_Gate05_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate06                             SEMA4_Gate06_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate07                             SEMA4_Gate07_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate08                             SEMA4_Gate08_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate09                             SEMA4_Gate09_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate10                             SEMA4_Gate10_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate11                             SEMA4_Gate11_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate12                             SEMA4_Gate12_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate13                             SEMA4_Gate13_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate14                             SEMA4_Gate14_REG(SEMA4_BASE_PTR)
#define SEMA4_Gate15                             SEMA4_Gate15_REG(SEMA4_BASE_PTR)
#define SEMA4_CP0INE                             SEMA4_CPINE_REG(SEMA4_BASE_PTR,0)
#define SEMA4_CP1INE                             SEMA4_CPINE_REG(SEMA4_BASE_PTR,1)
#define SEMA4_CP0NTF                             SEMA4_CPNTF_REG(SEMA4_BASE_PTR,0)
#define SEMA4_CP1NTF                             SEMA4_CPNTF_REG(SEMA4_BASE_PTR,1)
#define SEMA4_RSTGT                              SEMA4_RSTGT_REG(SEMA4_BASE_PTR)
#define SEMA4_RSTNTF                             SEMA4_RSTNTF_REG(SEMA4_BASE_PTR)

/* SEMA4 - Register array accessors */
#define SEMA4_CPINE(index)                       SEMA4_CPINE_REG(SEMA4_BASE_PTR,index)
#define SEMA4_CPNTF(index)                       SEMA4_CPNTF_REG(SEMA4_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SEMA4_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SEMA4_Peripheral */


/* ----------------------------------------------------------------------------
   -- SNVS
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Peripheral SNVS
 * @{
 */

/** SNVS - Peripheral register structure */
typedef struct SNVS_MemMap {
  uint8_t RESERVED_0[4];
  uint32_t HPCOMR;                                 /**< SNVS_HP Command Register, offset: 0x4 */
  uint32_t HPCR;                                   /**< SNVS_HP Control Register, offset: 0x8 */
  uint8_t RESERVED_1[8];
  uint32_t HPSR;                                   /**< SNVS_HP Status Register, offset: 0x14 */
  uint8_t RESERVED_2[12];
  uint32_t HPRTCMR;                                /**< SNVS_HP Real Time Counter MSB Register, offset: 0x24 */
  uint32_t HPRTCLR;                                /**< SNVS_HP Real Time Counter LSB Register, offset: 0x28 */
  uint32_t HPTAMR;                                 /**< SNVS_HP Time Alarm MSB Register, offset: 0x2C */
  uint32_t HPTALR;                                 /**< SNVS_HP Time Alarm LSB Register, offset: 0x30 */
  uint32_t LPLR;                                   /**< SNVS_LP Lock Register, offset: 0x34 */
  uint32_t LPCR;                                   /**< SNVS_LP Control Register, offset: 0x38 */
  uint8_t RESERVED_3[16];
  uint32_t LPSR;                                   /**< SNVS_LP Status Register, offset: 0x4C */
  uint8_t RESERVED_4[12];
  uint32_t LPSMCMR;                                /**< SNVS_LP Secure Monotonic Counter MSB Register, offset: 0x5C */
  uint32_t LPSMCLR;                                /**< SNVS_LP Secure Monotonic Counter LSB Register, offset: 0x60 */
  uint32_t LPPGDR;                                 /**< SNVS_LP Power Glitch Detector Register, offset: 0x64 */
  uint32_t LPGPR0_LEGACY_ALIAS;                    /**< SNVS_LP General Purpose Register 0 (legacy alias), offset: 0x68 */
  uint8_t RESERVED_5[36];
  uint32_t LPGPR_ALIAS[4];                         /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x90, array step: 0x4 */
  uint8_t RESERVED_6[96];
  uint32_t LPGPR[4];                               /**< SNVS_LP General Purpose Registers 0 .. 3, array offset: 0x100, array step: 0x4 */
  uint8_t RESERVED_7[2792];
  uint32_t HPVIDR1;                                /**< SNVS_HP Version ID Register 1, offset: 0xBF8 */
  uint32_t HPVIDR2;                                /**< SNVS_HP Version ID Register 2, offset: 0xBFC */
} volatile *SNVS_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register accessors */
#define SNVS_HPCOMR_REG(base)                    ((base)->HPCOMR)
#define SNVS_HPCR_REG(base)                      ((base)->HPCR)
#define SNVS_HPSR_REG(base)                      ((base)->HPSR)
#define SNVS_HPRTCMR_REG(base)                   ((base)->HPRTCMR)
#define SNVS_HPRTCLR_REG(base)                   ((base)->HPRTCLR)
#define SNVS_HPTAMR_REG(base)                    ((base)->HPTAMR)
#define SNVS_HPTALR_REG(base)                    ((base)->HPTALR)
#define SNVS_LPLR_REG(base)                      ((base)->LPLR)
#define SNVS_LPCR_REG(base)                      ((base)->LPCR)
#define SNVS_LPSR_REG(base)                      ((base)->LPSR)
#define SNVS_LPSMCMR_REG(base)                   ((base)->LPSMCMR)
#define SNVS_LPSMCLR_REG(base)                   ((base)->LPSMCLR)
#define SNVS_LPPGDR_REG(base)                    ((base)->LPPGDR)
#define SNVS_LPGPR0_LEGACY_ALIAS_REG(base)       ((base)->LPGPR0_LEGACY_ALIAS)
#define SNVS_LPGPR_ALIAS_REG(base,index)         ((base)->LPGPR_ALIAS[index])
#define SNVS_LPGPR_REG(base,index)               ((base)->LPGPR[index])
#define SNVS_HPVIDR1_REG(base)                   ((base)->HPVIDR1)
#define SNVS_HPVIDR2_REG(base)                   ((base)->HPVIDR2)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SNVS Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Masks SNVS Register Masks
 * @{
 */

/*! @name HPCOMR - SNVS_HP Command Register */
/*! @{ */
#define SNVS_HPCOMR_LP_SWR_MASK                  (0x10U)
#define SNVS_HPCOMR_LP_SWR_SHIFT                 (4U)
#define SNVS_HPCOMR_LP_SWR_DIS_MASK              (0x20U)
#define SNVS_HPCOMR_LP_SWR_DIS_SHIFT             (5U)
#define SNVS_HPCOMR_NPSWA_EN_MASK                (0x80000000U)
#define SNVS_HPCOMR_NPSWA_EN_SHIFT               (31U)
/*! @} */

/*! @name HPCR - SNVS_HP Control Register */
/*! @{ */
#define SNVS_HPCR_RTC_EN_MASK                    (0x1U)
#define SNVS_HPCR_RTC_EN_SHIFT                   (0U)
#define SNVS_HPCR_HPTA_EN_MASK                   (0x2U)
#define SNVS_HPCR_HPTA_EN_SHIFT                  (1U)
#define SNVS_HPCR_HPCALB_EN_MASK                 (0x100U)
#define SNVS_HPCR_HPCALB_EN_SHIFT                (8U)
#define SNVS_HPCR_HPCALB_VAL_MASK                (0x7C00U)
#define SNVS_HPCR_HPCALB_VAL_SHIFT               (10U)
/*! HPCALB_VAL
 *  0b00000..+0 counts per each 32768 ticks of the counter
 *  0b00001..+1 counts per each 32768 ticks of the counter
 *  0b00010..+2 counts per each 32768 ticks of the counter
 *  0b01111..+15 counts per each 32768 ticks of the counter
 *  0b10000..-16 counts per each 32768 ticks of the counter
 *  0b10001..-15 counts per each 32768 ticks of the counter
 *  0b11110..-2 counts per each 32768 ticks of the counter
 *  0b11111..-1 counts per each 32768 ticks of the counter
 */
#define SNVS_HPCR_HPCALB_VAL(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_HPCALB_VAL_SHIFT)) & SNVS_HPCR_HPCALB_VAL_MASK)
#define SNVS_HPCR_BTN_CONFIG_MASK                (0x7000000U)
#define SNVS_HPCR_BTN_CONFIG_SHIFT               (24U)
#define SNVS_HPCR_BTN_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPCR_BTN_CONFIG_SHIFT)) & SNVS_HPCR_BTN_CONFIG_MASK)
#define SNVS_HPCR_BTN_MASK_MASK                  (0x8000000U)
#define SNVS_HPCR_BTN_MASK_SHIFT                 (27U)
/*! @} */

/*! @name HPSR - SNVS_HP Status Register */
/*! @{ */
#define SNVS_HPSR_HPTA_MASK                      (0x1U)
#define SNVS_HPSR_HPTA_SHIFT                     (0U)
#define SNVS_HPSR_LPDIS_MASK                     (0x10U)
#define SNVS_HPSR_LPDIS_SHIFT                    (4U)
#define SNVS_HPSR_BTN_MASK                       (0x40U)
#define SNVS_HPSR_BTN_SHIFT                      (6U)
#define SNVS_HPSR_BI_MASK                        (0x80U)
#define SNVS_HPSR_BI_SHIFT                       (7U)
/*! @} */

/*! @name HPRTCMR - SNVS_HP Real Time Counter MSB Register */
/*! @{ */
#define SNVS_HPRTCMR_RTC_MASK                    (0x7FFFU)
#define SNVS_HPRTCMR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCMR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCMR_RTC_SHIFT)) & SNVS_HPRTCMR_RTC_MASK)
/*! @} */

/*! @name HPRTCLR - SNVS_HP Real Time Counter LSB Register */
/*! @{ */
#define SNVS_HPRTCLR_RTC_MASK                    (0xFFFFFFFFU)
#define SNVS_HPRTCLR_RTC_SHIFT                   (0U)
#define SNVS_HPRTCLR_RTC(x)                      (((uint32_t)(((uint32_t)(x)) << SNVS_HPRTCLR_RTC_SHIFT)) & SNVS_HPRTCLR_RTC_MASK)
/*! @} */

/*! @name HPTAMR - SNVS_HP Time Alarm MSB Register */
/*! @{ */
#define SNVS_HPTAMR_HPTA_MS_MASK                 (0x7FFFU)
#define SNVS_HPTAMR_HPTA_MS_SHIFT                (0U)
#define SNVS_HPTAMR_HPTA_MS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTAMR_HPTA_MS_SHIFT)) & SNVS_HPTAMR_HPTA_MS_MASK)
/*! @} */

/*! @name HPTALR - SNVS_HP Time Alarm LSB Register */
/*! @{ */
#define SNVS_HPTALR_HPTA_LS_MASK                 (0xFFFFFFFFU)
#define SNVS_HPTALR_HPTA_LS_SHIFT                (0U)
#define SNVS_HPTALR_HPTA_LS(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPTALR_HPTA_LS_SHIFT)) & SNVS_HPTALR_HPTA_LS_MASK)
/*! @} */

/*! @name LPLR - SNVS_LP Lock Register */
/*! @{ */
#define SNVS_LPLR_MC_HL_MASK                     (0x10U)
#define SNVS_LPLR_MC_HL_SHIFT                    (4U)
#define SNVS_LPLR_GPR_HL_MASK                    (0x20U)
#define SNVS_LPLR_GPR_HL_SHIFT                   (5U)
/*! @} */

/*! @name LPCR - SNVS_LP Control Register */
/*! @{ */
#define SNVS_LPCR_MC_ENV_MASK                    (0x4U)
#define SNVS_LPCR_MC_ENV_SHIFT                   (2U)
#define SNVS_LPCR_LPWUI_EN_MASK                  (0x8U)
#define SNVS_LPCR_LPWUI_EN_SHIFT                 (3U)
#define SNVS_LPCR_DP_EN_MASK                     (0x20U)
#define SNVS_LPCR_DP_EN_SHIFT                    (5U)
#define SNVS_LPCR_TOP_MASK                       (0x40U)
#define SNVS_LPCR_TOP_SHIFT                      (6U)
#define SNVS_LPCR_PWR_GLITCH_EN_MASK             (0x80U)
#define SNVS_LPCR_PWR_GLITCH_EN_SHIFT            (7U)
#define SNVS_LPCR_BTN_PRESS_TIME_MASK            (0x30000U)
#define SNVS_LPCR_BTN_PRESS_TIME_SHIFT           (16U)
#define SNVS_LPCR_BTN_PRESS_TIME(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_BTN_PRESS_TIME_SHIFT)) & SNVS_LPCR_BTN_PRESS_TIME_MASK)
#define SNVS_LPCR_DEBOUNCE_MASK                  (0xC0000U)
#define SNVS_LPCR_DEBOUNCE_SHIFT                 (18U)
#define SNVS_LPCR_DEBOUNCE(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_DEBOUNCE_SHIFT)) & SNVS_LPCR_DEBOUNCE_MASK)
#define SNVS_LPCR_ON_TIME_MASK                   (0x300000U)
#define SNVS_LPCR_ON_TIME_SHIFT                  (20U)
#define SNVS_LPCR_ON_TIME(x)                     (((uint32_t)(((uint32_t)(x)) << SNVS_LPCR_ON_TIME_SHIFT)) & SNVS_LPCR_ON_TIME_MASK)
#define SNVS_LPCR_PK_EN_MASK                     (0x400000U)
#define SNVS_LPCR_PK_EN_SHIFT                    (22U)
#define SNVS_LPCR_PK_OVERRIDE_MASK               (0x800000U)
#define SNVS_LPCR_PK_OVERRIDE_SHIFT              (23U)
/*! @} */

/*! @name LPSR - SNVS_LP Status Register */
/*! @{ */
#define SNVS_LPSR_MCR_MASK                       (0x4U)
#define SNVS_LPSR_MCR_SHIFT                      (2U)
#define SNVS_LPSR_EO_MASK                        (0x20000U)
#define SNVS_LPSR_EO_SHIFT                       (17U)
#define SNVS_LPSR_SPO_MASK                       (0x40000U)
#define SNVS_LPSR_SPO_SHIFT                      (18U)
/*! @} */

/*! @name LPSMCMR - SNVS_LP Secure Monotonic Counter MSB Register */
/*! @{ */
#define SNVS_LPSMCMR_MON_COUNTER_MASK            (0xFFFFU)
#define SNVS_LPSMCMR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCMR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MON_COUNTER_SHIFT)) & SNVS_LPSMCMR_MON_COUNTER_MASK)
#define SNVS_LPSMCMR_MC_ERA_BITS_MASK            (0xFFFF0000U)
#define SNVS_LPSMCMR_MC_ERA_BITS_SHIFT           (16U)
#define SNVS_LPSMCMR_MC_ERA_BITS(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCMR_MC_ERA_BITS_SHIFT)) & SNVS_LPSMCMR_MC_ERA_BITS_MASK)
/*! @} */

/*! @name LPSMCLR - SNVS_LP Secure Monotonic Counter LSB Register */
/*! @{ */
#define SNVS_LPSMCLR_MON_COUNTER_MASK            (0xFFFFFFFFU)
#define SNVS_LPSMCLR_MON_COUNTER_SHIFT           (0U)
#define SNVS_LPSMCLR_MON_COUNTER(x)              (((uint32_t)(((uint32_t)(x)) << SNVS_LPSMCLR_MON_COUNTER_SHIFT)) & SNVS_LPSMCLR_MON_COUNTER_MASK)
/*! @} */

/*! @name LPPGDR - SNVS_LP Power Glitch Detector Register */
/*! @{ */
#define SNVS_LPPGDR_PGD_MASK                     (0xFFFFFFFFU)
#define SNVS_LPPGDR_PGD_SHIFT                    (0U)
#define SNVS_LPPGDR_PGD(x)                       (((uint32_t)(((uint32_t)(x)) << SNVS_LPPGDR_PGD_SHIFT)) & SNVS_LPPGDR_PGD_MASK)
/*! @} */

/*! @name LPGPR0_LEGACY_ALIAS - SNVS_LP General Purpose Register 0 (legacy alias) */
/*! @{ */
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK        (0xFFFFFFFFU)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT       (0U)
#define SNVS_LPGPR0_LEGACY_ALIAS_GPR(x)          (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR0_LEGACY_ALIAS_GPR_SHIFT)) & SNVS_LPGPR0_LEGACY_ALIAS_GPR_MASK)
/*! @} */

/*! @name LPGPR_ALIAS - SNVS_LP General Purpose Registers 0 .. 3 */
/*! @{ */
#define SNVS_LPGPR_ALIAS_GPR_MASK                (0xFFFFFFFFU)
#define SNVS_LPGPR_ALIAS_GPR_SHIFT               (0U)
#define SNVS_LPGPR_ALIAS_GPR(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_ALIAS_GPR_SHIFT)) & SNVS_LPGPR_ALIAS_GPR_MASK)
/*! @} */

/* The count of SNVS_LPGPR_ALIAS */
#define SNVS_LPGPR_ALIAS_COUNT                   (4U)

/*! @name LPGPR - SNVS_LP General Purpose Registers 0 .. 3 */
/*! @{ */
#define SNVS_LPGPR_GPR_MASK                      (0xFFFFFFFFU)
#define SNVS_LPGPR_GPR_SHIFT                     (0U)
#define SNVS_LPGPR_GPR(x)                        (((uint32_t)(((uint32_t)(x)) << SNVS_LPGPR_GPR_SHIFT)) & SNVS_LPGPR_GPR_MASK)
/*! @} */

/* The count of SNVS_LPGPR */
#define SNVS_LPGPR_COUNT                         (4U)

/*! @name HPVIDR1 - SNVS_HP Version ID Register 1 */
/*! @{ */
#define SNVS_HPVIDR1_MINOR_REV_MASK              (0xFFU)
#define SNVS_HPVIDR1_MINOR_REV_SHIFT             (0U)
#define SNVS_HPVIDR1_MINOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MINOR_REV_SHIFT)) & SNVS_HPVIDR1_MINOR_REV_MASK)
#define SNVS_HPVIDR1_MAJOR_REV_MASK              (0xFF00U)
#define SNVS_HPVIDR1_MAJOR_REV_SHIFT             (8U)
#define SNVS_HPVIDR1_MAJOR_REV(x)                (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_MAJOR_REV_SHIFT)) & SNVS_HPVIDR1_MAJOR_REV_MASK)
#define SNVS_HPVIDR1_IP_ID_MASK                  (0xFFFF0000U)
#define SNVS_HPVIDR1_IP_ID_SHIFT                 (16U)
#define SNVS_HPVIDR1_IP_ID(x)                    (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR1_IP_ID_SHIFT)) & SNVS_HPVIDR1_IP_ID_MASK)
/*! @} */

/*! @name HPVIDR2 - SNVS_HP Version ID Register 2 */
/*! @{ */
#define SNVS_HPVIDR2_CONFIG_OPT_MASK             (0xFFU)
#define SNVS_HPVIDR2_CONFIG_OPT_SHIFT            (0U)
#define SNVS_HPVIDR2_CONFIG_OPT(x)               (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_CONFIG_OPT_SHIFT)) & SNVS_HPVIDR2_CONFIG_OPT_MASK)
#define SNVS_HPVIDR2_ECO_REV_MASK                (0xFF00U)
#define SNVS_HPVIDR2_ECO_REV_SHIFT               (8U)
#define SNVS_HPVIDR2_ECO_REV(x)                  (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_ECO_REV_SHIFT)) & SNVS_HPVIDR2_ECO_REV_MASK)
#define SNVS_HPVIDR2_INTG_OPT_MASK               (0xFF0000U)
#define SNVS_HPVIDR2_INTG_OPT_SHIFT              (16U)
#define SNVS_HPVIDR2_INTG_OPT(x)                 (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_INTG_OPT_SHIFT)) & SNVS_HPVIDR2_INTG_OPT_MASK)
#define SNVS_HPVIDR2_IP_ERA_MASK                 (0xFF000000U)
#define SNVS_HPVIDR2_IP_ERA_SHIFT                (24U)
#define SNVS_HPVIDR2_IP_ERA(x)                   (((uint32_t)(((uint32_t)(x)) << SNVS_HPVIDR2_IP_ERA_SHIFT)) & SNVS_HPVIDR2_IP_ERA_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SNVS_Register_Masks */


/* SNVS - Peripheral instance base addresses */
/** Peripheral SNVS base pointer */
#define SNVS_BASE_PTR                            ((SNVS_MemMapPtr)0x30370000u)
/** Array initializer of SNVS peripheral base pointers */
#define SNVS_BASE_PTRS                           { SNVS_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SNVS - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SNVS_Register_Accessor_Macros SNVS - Register accessor macros
 * @{
 */


/* SNVS - Register instance definitions */
/* SNVS */
#define SNVS_HPCOMR                              SNVS_HPCOMR_REG(SNVS_BASE_PTR)
#define SNVS_HPCR                                SNVS_HPCR_REG(SNVS_BASE_PTR)
#define SNVS_HPSR                                SNVS_HPSR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCMR                             SNVS_HPRTCMR_REG(SNVS_BASE_PTR)
#define SNVS_HPRTCLR                             SNVS_HPRTCLR_REG(SNVS_BASE_PTR)
#define SNVS_HPTAMR                              SNVS_HPTAMR_REG(SNVS_BASE_PTR)
#define SNVS_HPTALR                              SNVS_HPTALR_REG(SNVS_BASE_PTR)
#define SNVS_LPLR                                SNVS_LPLR_REG(SNVS_BASE_PTR)
#define SNVS_LPCR                                SNVS_LPCR_REG(SNVS_BASE_PTR)
#define SNVS_LPSR                                SNVS_LPSR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCMR                             SNVS_LPSMCMR_REG(SNVS_BASE_PTR)
#define SNVS_LPSMCLR                             SNVS_LPSMCLR_REG(SNVS_BASE_PTR)
#define SNVS_LPPGDR                              SNVS_LPPGDR_REG(SNVS_BASE_PTR)
#define SNVS_LPGPR0_LEGACY_ALIAS                 SNVS_LPGPR0_LEGACY_ALIAS_REG(SNVS_BASE_PTR)
#define SNVS_LPGPR0_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3_ALIAS                        SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,3)
#define SNVS_LPGPR0                              SNVS_LPGPR_REG(SNVS_BASE_PTR,0)
#define SNVS_LPGPR1                              SNVS_LPGPR_REG(SNVS_BASE_PTR,1)
#define SNVS_LPGPR2                              SNVS_LPGPR_REG(SNVS_BASE_PTR,2)
#define SNVS_LPGPR3                              SNVS_LPGPR_REG(SNVS_BASE_PTR,3)
#define SNVS_HPVIDR1                             SNVS_HPVIDR1_REG(SNVS_BASE_PTR)
#define SNVS_HPVIDR2                             SNVS_HPVIDR2_REG(SNVS_BASE_PTR)

/* SNVS - Register array accessors */
#define SNVS_LPGPR_ALIAS(index)                  SNVS_LPGPR_ALIAS_REG(SNVS_BASE_PTR,index)
#define SNVS_LPGPR(index)                        SNVS_LPGPR_REG(SNVS_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SNVS_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SNVS_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPBA
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Peripheral SPBA
 * @{
 */

/** SPBA - Peripheral register structure */
typedef struct SPBA_MemMap {
  uint32_t PRR[32];                                /**< Peripheral Rights Register, array offset: 0x0, array step: 0x4 */
} volatile *SPBA_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPBA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Accessor_Macros SPBA - Register accessor macros
 * @{
 */


/* SPBA - Register accessors */
#define SPBA_PRR_REG(base,index)                 ((base)->PRR[index])

/*!
 * @}
 */ /* end of group SPBA_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPBA Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Masks SPBA Register Masks
 * @{
 */

/*! @name PRR - Peripheral Rights Register */
/*! @{ */
#define SPBA_PRR_RARA_MASK                       (0x1U)
#define SPBA_PRR_RARA_SHIFT                      (0U)
#define SPBA_PRR_RARB_MASK                       (0x2U)
#define SPBA_PRR_RARB_SHIFT                      (1U)
#define SPBA_PRR_RARC_MASK                       (0x4U)
#define SPBA_PRR_RARC_SHIFT                      (2U)
#define SPBA_PRR_ROI_MASK                        (0x30000U)
#define SPBA_PRR_ROI_SHIFT                       (16U)
/*! ROI
 *  0b00..Unowned resource.
 *  0b01..The resource is owned by master A port.
 *  0b10..The resource is owned by master B port.
 *  0b11..The resource is owned by master C port.
 */
#define SPBA_PRR_ROI(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_ROI_SHIFT)) & SPBA_PRR_ROI_MASK)
#define SPBA_PRR_RMO_MASK                        (0xC0000000U)
#define SPBA_PRR_RMO_SHIFT                       (30U)
/*! RMO
 *  0b00..The resource is unowned.
 *  0b01..Reserved.
 *  0b10..The resource is owned by another master.
 *  0b11..The resource is owned by the requesting master.
 */
#define SPBA_PRR_RMO(x)                          (((uint32_t)(((uint32_t)(x)) << SPBA_PRR_RMO_SHIFT)) & SPBA_PRR_RMO_MASK)
/*! @} */

/* The count of SPBA_PRR */
#define SPBA_PRR_COUNT                           (32U)


/*!
 * @}
 */ /* end of group SPBA_Register_Masks */


/* SPBA - Peripheral instance base addresses */
/** Peripheral SPBA1 base pointer */
#define SPBA1_BASE_PTR                           ((SPBA_MemMapPtr)0x308F0000u)
/** Peripheral SPBA2 base pointer */
#define SPBA2_BASE_PTR                           ((SPBA_MemMapPtr)0x300F0000u)
/** Array initializer of SPBA peripheral base pointers */
#define SPBA_BASE_PTRS                           { SPBA1_BASE_PTR, SPBA2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SPBA - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPBA_Register_Accessor_Macros SPBA - Register accessor macros
 * @{
 */


/* SPBA - Register instance definitions */
/* SPBA1 */
#define SPBA1_PRR0                               SPBA_PRR_REG(SPBA1_BASE_PTR,0)
#define SPBA1_PRR1                               SPBA_PRR_REG(SPBA1_BASE_PTR,1)
#define SPBA1_PRR2                               SPBA_PRR_REG(SPBA1_BASE_PTR,2)
#define SPBA1_PRR3                               SPBA_PRR_REG(SPBA1_BASE_PTR,3)
#define SPBA1_PRR4                               SPBA_PRR_REG(SPBA1_BASE_PTR,4)
#define SPBA1_PRR5                               SPBA_PRR_REG(SPBA1_BASE_PTR,5)
#define SPBA1_PRR6                               SPBA_PRR_REG(SPBA1_BASE_PTR,6)
#define SPBA1_PRR7                               SPBA_PRR_REG(SPBA1_BASE_PTR,7)
#define SPBA1_PRR8                               SPBA_PRR_REG(SPBA1_BASE_PTR,8)
#define SPBA1_PRR9                               SPBA_PRR_REG(SPBA1_BASE_PTR,9)
#define SPBA1_PRR10                              SPBA_PRR_REG(SPBA1_BASE_PTR,10)
#define SPBA1_PRR11                              SPBA_PRR_REG(SPBA1_BASE_PTR,11)
#define SPBA1_PRR12                              SPBA_PRR_REG(SPBA1_BASE_PTR,12)
#define SPBA1_PRR13                              SPBA_PRR_REG(SPBA1_BASE_PTR,13)
#define SPBA1_PRR14                              SPBA_PRR_REG(SPBA1_BASE_PTR,14)
#define SPBA1_PRR15                              SPBA_PRR_REG(SPBA1_BASE_PTR,15)
#define SPBA1_PRR16                              SPBA_PRR_REG(SPBA1_BASE_PTR,16)
#define SPBA1_PRR17                              SPBA_PRR_REG(SPBA1_BASE_PTR,17)
#define SPBA1_PRR18                              SPBA_PRR_REG(SPBA1_BASE_PTR,18)
#define SPBA1_PRR19                              SPBA_PRR_REG(SPBA1_BASE_PTR,19)
#define SPBA1_PRR20                              SPBA_PRR_REG(SPBA1_BASE_PTR,20)
#define SPBA1_PRR21                              SPBA_PRR_REG(SPBA1_BASE_PTR,21)
#define SPBA1_PRR22                              SPBA_PRR_REG(SPBA1_BASE_PTR,22)
#define SPBA1_PRR23                              SPBA_PRR_REG(SPBA1_BASE_PTR,23)
#define SPBA1_PRR24                              SPBA_PRR_REG(SPBA1_BASE_PTR,24)
#define SPBA1_PRR25                              SPBA_PRR_REG(SPBA1_BASE_PTR,25)
#define SPBA1_PRR26                              SPBA_PRR_REG(SPBA1_BASE_PTR,26)
#define SPBA1_PRR27                              SPBA_PRR_REG(SPBA1_BASE_PTR,27)
#define SPBA1_PRR28                              SPBA_PRR_REG(SPBA1_BASE_PTR,28)
#define SPBA1_PRR29                              SPBA_PRR_REG(SPBA1_BASE_PTR,29)
#define SPBA1_PRR30                              SPBA_PRR_REG(SPBA1_BASE_PTR,30)
#define SPBA1_PRR31                              SPBA_PRR_REG(SPBA1_BASE_PTR,31)
/* SPBA2 */
#define SPBA2_PRR0                               SPBA_PRR_REG(SPBA2_BASE_PTR,0)
#define SPBA2_PRR1                               SPBA_PRR_REG(SPBA2_BASE_PTR,1)
#define SPBA2_PRR2                               SPBA_PRR_REG(SPBA2_BASE_PTR,2)
#define SPBA2_PRR3                               SPBA_PRR_REG(SPBA2_BASE_PTR,3)
#define SPBA2_PRR4                               SPBA_PRR_REG(SPBA2_BASE_PTR,4)
#define SPBA2_PRR5                               SPBA_PRR_REG(SPBA2_BASE_PTR,5)
#define SPBA2_PRR6                               SPBA_PRR_REG(SPBA2_BASE_PTR,6)
#define SPBA2_PRR7                               SPBA_PRR_REG(SPBA2_BASE_PTR,7)
#define SPBA2_PRR8                               SPBA_PRR_REG(SPBA2_BASE_PTR,8)
#define SPBA2_PRR9                               SPBA_PRR_REG(SPBA2_BASE_PTR,9)
#define SPBA2_PRR10                              SPBA_PRR_REG(SPBA2_BASE_PTR,10)
#define SPBA2_PRR11                              SPBA_PRR_REG(SPBA2_BASE_PTR,11)
#define SPBA2_PRR12                              SPBA_PRR_REG(SPBA2_BASE_PTR,12)
#define SPBA2_PRR13                              SPBA_PRR_REG(SPBA2_BASE_PTR,13)
#define SPBA2_PRR14                              SPBA_PRR_REG(SPBA2_BASE_PTR,14)
#define SPBA2_PRR15                              SPBA_PRR_REG(SPBA2_BASE_PTR,15)
#define SPBA2_PRR16                              SPBA_PRR_REG(SPBA2_BASE_PTR,16)
#define SPBA2_PRR17                              SPBA_PRR_REG(SPBA2_BASE_PTR,17)
#define SPBA2_PRR18                              SPBA_PRR_REG(SPBA2_BASE_PTR,18)
#define SPBA2_PRR19                              SPBA_PRR_REG(SPBA2_BASE_PTR,19)
#define SPBA2_PRR20                              SPBA_PRR_REG(SPBA2_BASE_PTR,20)
#define SPBA2_PRR21                              SPBA_PRR_REG(SPBA2_BASE_PTR,21)
#define SPBA2_PRR22                              SPBA_PRR_REG(SPBA2_BASE_PTR,22)
#define SPBA2_PRR23                              SPBA_PRR_REG(SPBA2_BASE_PTR,23)
#define SPBA2_PRR24                              SPBA_PRR_REG(SPBA2_BASE_PTR,24)
#define SPBA2_PRR25                              SPBA_PRR_REG(SPBA2_BASE_PTR,25)
#define SPBA2_PRR26                              SPBA_PRR_REG(SPBA2_BASE_PTR,26)
#define SPBA2_PRR27                              SPBA_PRR_REG(SPBA2_BASE_PTR,27)
#define SPBA2_PRR28                              SPBA_PRR_REG(SPBA2_BASE_PTR,28)
#define SPBA2_PRR29                              SPBA_PRR_REG(SPBA2_BASE_PTR,29)
#define SPBA2_PRR30                              SPBA_PRR_REG(SPBA2_BASE_PTR,30)
#define SPBA2_PRR31                              SPBA_PRR_REG(SPBA2_BASE_PTR,31)

/* SPBA - Register array accessors */
#define SPBA1_PRR(index)                         SPBA_PRR_REG(SPBA1_BASE_PTR,index)
#define SPBA2_PRR(index)                         SPBA_PRR_REG(SPBA2_BASE_PTR,index)

/*!
 * @}
 */ /* end of group SPBA_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPBA_Peripheral */


/* ----------------------------------------------------------------------------
   -- SPDIF
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Peripheral SPDIF
 * @{
 */

/** SPDIF - Peripheral register structure */
typedef struct SPDIF_MemMap {
  uint32_t SCR;                                    /**< SPDIF Configuration Register, offset: 0x0 */
  uint32_t SRCD;                                   /**< CDText Control Register, offset: 0x4 */
  uint32_t SRPC;                                   /**< PhaseConfig Register, offset: 0x8 */
  uint32_t SIE;                                    /**< InterruptEn Register, offset: 0xC */
  union {                                          /* offset: 0x10 */
    uint32_t SIC;                                    /**< InterruptClear Register, offset: 0x10 */
    uint32_t SIS;                                    /**< InterruptStat Register, offset: 0x10 */
  };
  uint32_t SRL;                                    /**< SPDIFRxLeft Register, offset: 0x14 */
  uint32_t SRR;                                    /**< SPDIFRxRight Register, offset: 0x18 */
  uint32_t SRCSH;                                  /**< SPDIFRxCChannel_h Register, offset: 0x1C */
  uint32_t SRCSL;                                  /**< SPDIFRxCChannel_l Register, offset: 0x20 */
  uint32_t SRU;                                    /**< UchannelRx Register, offset: 0x24 */
  uint32_t SRQ;                                    /**< QchannelRx Register, offset: 0x28 */
  uint32_t STL;                                    /**< SPDIFTxLeft Register, offset: 0x2C */
  uint32_t STR;                                    /**< SPDIFTxRight Register, offset: 0x30 */
  uint32_t STCSCH;                                 /**< SPDIFTxCChannelCons_h Register, offset: 0x34 */
  uint32_t STCSCL;                                 /**< SPDIFTxCChannelCons_l Register, offset: 0x38 */
  uint8_t RESERVED_0[8];
  uint32_t SRFM;                                   /**< FreqMeas Register, offset: 0x44 */
  uint8_t RESERVED_1[8];
  uint32_t STC;                                    /**< SPDIFTxClk Register, offset: 0x50 */
} volatile *SPDIF_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register accessors */
#define SPDIF_SCR_REG(base)                      ((base)->SCR)
#define SPDIF_SRCD_REG(base)                     ((base)->SRCD)
#define SPDIF_SRPC_REG(base)                     ((base)->SRPC)
#define SPDIF_SIE_REG(base)                      ((base)->SIE)
#define SPDIF_SIC_REG(base)                      ((base)->SIC)
#define SPDIF_SIS_REG(base)                      ((base)->SIS)
#define SPDIF_SRL_REG(base)                      ((base)->SRL)
#define SPDIF_SRR_REG(base)                      ((base)->SRR)
#define SPDIF_SRCSH_REG(base)                    ((base)->SRCSH)
#define SPDIF_SRCSL_REG(base)                    ((base)->SRCSL)
#define SPDIF_SRU_REG(base)                      ((base)->SRU)
#define SPDIF_SRQ_REG(base)                      ((base)->SRQ)
#define SPDIF_STL_REG(base)                      ((base)->STL)
#define SPDIF_STR_REG(base)                      ((base)->STR)
#define SPDIF_STCSCH_REG(base)                   ((base)->STCSCH)
#define SPDIF_STCSCL_REG(base)                   ((base)->STCSCL)
#define SPDIF_SRFM_REG(base)                     ((base)->SRFM)
#define SPDIF_STC_REG(base)                      ((base)->STC)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SPDIF Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Masks SPDIF Register Masks
 * @{
 */

/*! @name SCR - SPDIF Configuration Register */
/*! @{ */
#define SPDIF_SCR_USrc_Sel_MASK                  (0x3U)
#define SPDIF_SCR_USrc_Sel_SHIFT                 (0U)
/*! USrc_Sel - USrc_Sel
 *  0b00..No embedded U channel
 *  0b01..U channel from SPDIF receive block (CD mode)
 *  0b10..Reserved
 *  0b11..U channel from on chip transmitter
 */
#define SPDIF_SCR_USrc_Sel(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_USrc_Sel_SHIFT)) & SPDIF_SCR_USrc_Sel_MASK)
#define SPDIF_SCR_TxSel_MASK                     (0x1CU)
#define SPDIF_SCR_TxSel_SHIFT                    (2U)
/*! TxSel - TxSel
 *  0b000..Off and output 0
 *  0b001..Feed-through SPDIFIN
 *  0b101..Tx Normal operation
 */
#define SPDIF_SCR_TxSel(x)                       (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TxSel_SHIFT)) & SPDIF_SCR_TxSel_MASK)
#define SPDIF_SCR_ValCtrl_MASK                   (0x20U)
#define SPDIF_SCR_ValCtrl_SHIFT                  (5U)
#define SPDIF_SCR_DMA_TX_En_MASK                 (0x100U)
#define SPDIF_SCR_DMA_TX_En_SHIFT                (8U)
#define SPDIF_SCR_DMA_Rx_En_MASK                 (0x200U)
#define SPDIF_SCR_DMA_Rx_En_SHIFT                (9U)
#define SPDIF_SCR_TxFIFO_Ctrl_MASK               (0xC00U)
#define SPDIF_SCR_TxFIFO_Ctrl_SHIFT              (10U)
/*! TxFIFO_Ctrl - TxFIFO_Ctrl
 *  0b00..Send out digital zero on SPDIF Tx
 *  0b01..Tx Normal operation
 *  0b10..Reset to 1 sample remaining
 *  0b11..Reserved
 */
#define SPDIF_SCR_TxFIFO_Ctrl(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TxFIFO_Ctrl_SHIFT)) & SPDIF_SCR_TxFIFO_Ctrl_MASK)
#define SPDIF_SCR_soft_reset_MASK                (0x1000U)
#define SPDIF_SCR_soft_reset_SHIFT               (12U)
#define SPDIF_SCR_LOW_POWER_MASK                 (0x2000U)
#define SPDIF_SCR_LOW_POWER_SHIFT                (13U)
#define SPDIF_SCR_RAW_CAPTURE_MODE_MASK          (0x4000U)
#define SPDIF_SCR_RAW_CAPTURE_MODE_SHIFT         (14U)
#define SPDIF_SCR_TxFIFOEmpty_Sel_MASK           (0x18000U)
#define SPDIF_SCR_TxFIFOEmpty_Sel_SHIFT          (15U)
/*! TxFIFOEmpty_Sel - TxFIFOEmpty_Sel
 *  0b00..Empty interrupt if 0 sample in Tx left and right FIFOs
 *  0b01..Empty interrupt if at most 4 sample in Tx left and right FIFOs
 *  0b10..Empty interrupt if at most 8 sample in Tx left and right FIFOs
 *  0b11..Empty interrupt if at most 12 sample in Tx left and right FIFOs
 */
#define SPDIF_SCR_TxFIFOEmpty_Sel(x)             (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_TxFIFOEmpty_Sel_SHIFT)) & SPDIF_SCR_TxFIFOEmpty_Sel_MASK)
#define SPDIF_SCR_TxAutoSync_MASK                (0x20000U)
#define SPDIF_SCR_TxAutoSync_SHIFT               (17U)
#define SPDIF_SCR_RxAutoSync_MASK                (0x40000U)
#define SPDIF_SCR_RxAutoSync_SHIFT               (18U)
#define SPDIF_SCR_RxFIFOFull_Sel_MASK            (0x180000U)
#define SPDIF_SCR_RxFIFOFull_Sel_SHIFT           (19U)
/*! RxFIFOFull_Sel - RxFIFOFull_Sel
 *  0b00..Full interrupt if at least 1 sample in Rx left and right FIFOs
 *  0b01..Full interrupt if at least 4 sample in Rx left and right FIFOs
 *  0b10..Full interrupt if at least 8 sample in Rx left and right FIFOs
 *  0b11..Full interrupt if at least 16 sample in Rx left and right FIFO
 */
#define SPDIF_SCR_RxFIFOFull_Sel(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SCR_RxFIFOFull_Sel_SHIFT)) & SPDIF_SCR_RxFIFOFull_Sel_MASK)
#define SPDIF_SCR_RxFIFO_Rst_MASK                (0x200000U)
#define SPDIF_SCR_RxFIFO_Rst_SHIFT               (21U)
#define SPDIF_SCR_RxFIFO_Off_On_MASK             (0x400000U)
#define SPDIF_SCR_RxFIFO_Off_On_SHIFT            (22U)
#define SPDIF_SCR_RxFIFO_Ctrl_MASK               (0x800000U)
#define SPDIF_SCR_RxFIFO_Ctrl_SHIFT              (23U)
/*! @} */

/*! @name SRCD - CDText Control Register */
/*! @{ */
#define SPDIF_SRCD_USyncMode_MASK                (0x2U)
#define SPDIF_SRCD_USyncMode_SHIFT               (1U)
/*! @} */

/*! @name SRPC - PhaseConfig Register */
/*! @{ */
#define SPDIF_SRPC_GainSel_MASK                  (0x38U)
#define SPDIF_SRPC_GainSel_SHIFT                 (3U)
/*! GainSel - GainSel
 *  0b000..24*(2**10)
 *  0b001..16*(2**10)
 *  0b010..12*(2**10)
 *  0b011..8*(2**10)
 *  0b100..6*(2**10)
 *  0b101..4*(2**10)
 *  0b110..3*(2**10)
 */
#define SPDIF_SRPC_GainSel(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_GainSel_SHIFT)) & SPDIF_SRPC_GainSel_MASK)
#define SPDIF_SRPC_LOCK_MASK                     (0x40U)
#define SPDIF_SRPC_LOCK_SHIFT                    (6U)
#define SPDIF_SRPC_ClkSrc_Sel_MASK               (0x780U)
#define SPDIF_SRPC_ClkSrc_Sel_SHIFT              (7U)
/*! ClkSrc_Sel - ClkSrc_Sel
 *  0b0000..Clock Selection from Audio Clock Mux (ACM)
 */
#define SPDIF_SRPC_ClkSrc_Sel(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRPC_ClkSrc_Sel_SHIFT)) & SPDIF_SRPC_ClkSrc_Sel_MASK)
/*! @} */

/*! @name SIE - InterruptEn Register */
/*! @{ */
#define SPDIF_SIE_RxFIFOFul_MASK                 (0x1U)
#define SPDIF_SIE_RxFIFOFul_SHIFT                (0U)
#define SPDIF_SIE_TxEm_MASK                      (0x2U)
#define SPDIF_SIE_TxEm_SHIFT                     (1U)
#define SPDIF_SIE_LockLoss_MASK                  (0x4U)
#define SPDIF_SIE_LockLoss_SHIFT                 (2U)
#define SPDIF_SIE_RxFIFOResyn_MASK               (0x8U)
#define SPDIF_SIE_RxFIFOResyn_SHIFT              (3U)
#define SPDIF_SIE_RxFIFOUnOv_MASK                (0x10U)
#define SPDIF_SIE_RxFIFOUnOv_SHIFT               (4U)
#define SPDIF_SIE_UQErr_MASK                     (0x20U)
#define SPDIF_SIE_UQErr_SHIFT                    (5U)
#define SPDIF_SIE_UQSync_MASK                    (0x40U)
#define SPDIF_SIE_UQSync_SHIFT                   (6U)
#define SPDIF_SIE_QRxOv_MASK                     (0x80U)
#define SPDIF_SIE_QRxOv_SHIFT                    (7U)
#define SPDIF_SIE_QRxFul_MASK                    (0x100U)
#define SPDIF_SIE_QRxFul_SHIFT                   (8U)
#define SPDIF_SIE_URxOv_MASK                     (0x200U)
#define SPDIF_SIE_URxOv_SHIFT                    (9U)
#define SPDIF_SIE_URxFul_MASK                    (0x400U)
#define SPDIF_SIE_URxFul_SHIFT                   (10U)
#define SPDIF_SIE_BitErr_MASK                    (0x4000U)
#define SPDIF_SIE_BitErr_SHIFT                   (14U)
#define SPDIF_SIE_SymErr_MASK                    (0x8000U)
#define SPDIF_SIE_SymErr_SHIFT                   (15U)
#define SPDIF_SIE_ValNoGood_MASK                 (0x10000U)
#define SPDIF_SIE_ValNoGood_SHIFT                (16U)
#define SPDIF_SIE_CNew_MASK                      (0x20000U)
#define SPDIF_SIE_CNew_SHIFT                     (17U)
#define SPDIF_SIE_TxResyn_MASK                   (0x40000U)
#define SPDIF_SIE_TxResyn_SHIFT                  (18U)
#define SPDIF_SIE_TxUnOv_MASK                    (0x80000U)
#define SPDIF_SIE_TxUnOv_SHIFT                   (19U)
#define SPDIF_SIE_Lock_MASK                      (0x100000U)
#define SPDIF_SIE_Lock_SHIFT                     (20U)
/*! @} */

/*! @name SIC - InterruptClear Register */
/*! @{ */
#define SPDIF_SIC_LockLoss_MASK                  (0x4U)
#define SPDIF_SIC_LockLoss_SHIFT                 (2U)
#define SPDIF_SIC_RxFIFOResyn_MASK               (0x8U)
#define SPDIF_SIC_RxFIFOResyn_SHIFT              (3U)
#define SPDIF_SIC_RxFIFOUnOv_MASK                (0x10U)
#define SPDIF_SIC_RxFIFOUnOv_SHIFT               (4U)
#define SPDIF_SIC_UQErr_MASK                     (0x20U)
#define SPDIF_SIC_UQErr_SHIFT                    (5U)
#define SPDIF_SIC_UQSync_MASK                    (0x40U)
#define SPDIF_SIC_UQSync_SHIFT                   (6U)
#define SPDIF_SIC_QRxOv_MASK                     (0x80U)
#define SPDIF_SIC_QRxOv_SHIFT                    (7U)
#define SPDIF_SIC_URxOv_MASK                     (0x200U)
#define SPDIF_SIC_URxOv_SHIFT                    (9U)
#define SPDIF_SIC_BitErr_MASK                    (0x4000U)
#define SPDIF_SIC_BitErr_SHIFT                   (14U)
#define SPDIF_SIC_SymErr_MASK                    (0x8000U)
#define SPDIF_SIC_SymErr_SHIFT                   (15U)
#define SPDIF_SIC_ValNoGood_MASK                 (0x10000U)
#define SPDIF_SIC_ValNoGood_SHIFT                (16U)
#define SPDIF_SIC_CNew_MASK                      (0x20000U)
#define SPDIF_SIC_CNew_SHIFT                     (17U)
#define SPDIF_SIC_TxResyn_MASK                   (0x40000U)
#define SPDIF_SIC_TxResyn_SHIFT                  (18U)
#define SPDIF_SIC_TxUnOv_MASK                    (0x80000U)
#define SPDIF_SIC_TxUnOv_SHIFT                   (19U)
#define SPDIF_SIC_Lock_MASK                      (0x100000U)
#define SPDIF_SIC_Lock_SHIFT                     (20U)
/*! @} */

/*! @name SIS - InterruptStat Register */
/*! @{ */
#define SPDIF_SIS_RxFIFOFul_MASK                 (0x1U)
#define SPDIF_SIS_RxFIFOFul_SHIFT                (0U)
#define SPDIF_SIS_TxEm_MASK                      (0x2U)
#define SPDIF_SIS_TxEm_SHIFT                     (1U)
#define SPDIF_SIS_LockLoss_MASK                  (0x4U)
#define SPDIF_SIS_LockLoss_SHIFT                 (2U)
#define SPDIF_SIS_RxFIFOResyn_MASK               (0x8U)
#define SPDIF_SIS_RxFIFOResyn_SHIFT              (3U)
#define SPDIF_SIS_RxFIFOUnOv_MASK                (0x10U)
#define SPDIF_SIS_RxFIFOUnOv_SHIFT               (4U)
#define SPDIF_SIS_UQErr_MASK                     (0x20U)
#define SPDIF_SIS_UQErr_SHIFT                    (5U)
#define SPDIF_SIS_UQSync_MASK                    (0x40U)
#define SPDIF_SIS_UQSync_SHIFT                   (6U)
#define SPDIF_SIS_QRxOv_MASK                     (0x80U)
#define SPDIF_SIS_QRxOv_SHIFT                    (7U)
#define SPDIF_SIS_QRxFul_MASK                    (0x100U)
#define SPDIF_SIS_QRxFul_SHIFT                   (8U)
#define SPDIF_SIS_URxOv_MASK                     (0x200U)
#define SPDIF_SIS_URxOv_SHIFT                    (9U)
#define SPDIF_SIS_URxFul_MASK                    (0x400U)
#define SPDIF_SIS_URxFul_SHIFT                   (10U)
#define SPDIF_SIS_BitErr_MASK                    (0x4000U)
#define SPDIF_SIS_BitErr_SHIFT                   (14U)
#define SPDIF_SIS_SymErr_MASK                    (0x8000U)
#define SPDIF_SIS_SymErr_SHIFT                   (15U)
#define SPDIF_SIS_ValNoGood_MASK                 (0x10000U)
#define SPDIF_SIS_ValNoGood_SHIFT                (16U)
#define SPDIF_SIS_CNew_MASK                      (0x20000U)
#define SPDIF_SIS_CNew_SHIFT                     (17U)
#define SPDIF_SIS_TxResyn_MASK                   (0x40000U)
#define SPDIF_SIS_TxResyn_SHIFT                  (18U)
#define SPDIF_SIS_TxUnOv_MASK                    (0x80000U)
#define SPDIF_SIS_TxUnOv_SHIFT                   (19U)
#define SPDIF_SIS_Lock_MASK                      (0x100000U)
#define SPDIF_SIS_Lock_SHIFT                     (20U)
/*! @} */

/*! @name SRL - SPDIFRxLeft Register */
/*! @{ */
#define SPDIF_SRL_RxDataLeft_MASK                (0xFFFFFFU)
#define SPDIF_SRL_RxDataLeft_SHIFT               (0U)
#define SPDIF_SRL_RxDataLeft(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRL_RxDataLeft_SHIFT)) & SPDIF_SRL_RxDataLeft_MASK)
/*! @} */

/*! @name SRR - SPDIFRxRight Register */
/*! @{ */
#define SPDIF_SRR_RxDataRight_MASK               (0xFFFFFFU)
#define SPDIF_SRR_RxDataRight_SHIFT              (0U)
#define SPDIF_SRR_RxDataRight(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_SRR_RxDataRight_SHIFT)) & SPDIF_SRR_RxDataRight_MASK)
/*! @} */

/*! @name SRCSH - SPDIFRxCChannel_h Register */
/*! @{ */
#define SPDIF_SRCSH_RxCChannel_h_MASK            (0xFFFFFFU)
#define SPDIF_SRCSH_RxCChannel_h_SHIFT           (0U)
#define SPDIF_SRCSH_RxCChannel_h(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSH_RxCChannel_h_SHIFT)) & SPDIF_SRCSH_RxCChannel_h_MASK)
/*! @} */

/*! @name SRCSL - SPDIFRxCChannel_l Register */
/*! @{ */
#define SPDIF_SRCSL_RxCChannel_l_MASK            (0xFFFFFFU)
#define SPDIF_SRCSL_RxCChannel_l_SHIFT           (0U)
#define SPDIF_SRCSL_RxCChannel_l(x)              (((uint32_t)(((uint32_t)(x)) << SPDIF_SRCSL_RxCChannel_l_SHIFT)) & SPDIF_SRCSL_RxCChannel_l_MASK)
/*! @} */

/*! @name SRU - UchannelRx Register */
/*! @{ */
#define SPDIF_SRU_RxUChannel_MASK                (0xFFFFFFU)
#define SPDIF_SRU_RxUChannel_SHIFT               (0U)
#define SPDIF_SRU_RxUChannel(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRU_RxUChannel_SHIFT)) & SPDIF_SRU_RxUChannel_MASK)
/*! @} */

/*! @name SRQ - QchannelRx Register */
/*! @{ */
#define SPDIF_SRQ_RxQChannel_MASK                (0xFFFFFFU)
#define SPDIF_SRQ_RxQChannel_SHIFT               (0U)
#define SPDIF_SRQ_RxQChannel(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_SRQ_RxQChannel_SHIFT)) & SPDIF_SRQ_RxQChannel_MASK)
/*! @} */

/*! @name STL - SPDIFTxLeft Register */
/*! @{ */
#define SPDIF_STL_TxDataLeft_MASK                (0xFFFFFFU)
#define SPDIF_STL_TxDataLeft_SHIFT               (0U)
#define SPDIF_STL_TxDataLeft(x)                  (((uint32_t)(((uint32_t)(x)) << SPDIF_STL_TxDataLeft_SHIFT)) & SPDIF_STL_TxDataLeft_MASK)
/*! @} */

/*! @name STR - SPDIFTxRight Register */
/*! @{ */
#define SPDIF_STR_TxDataRight_MASK               (0xFFFFFFU)
#define SPDIF_STR_TxDataRight_SHIFT              (0U)
#define SPDIF_STR_TxDataRight(x)                 (((uint32_t)(((uint32_t)(x)) << SPDIF_STR_TxDataRight_SHIFT)) & SPDIF_STR_TxDataRight_MASK)
/*! @} */

/*! @name STCSCH - SPDIFTxCChannelCons_h Register */
/*! @{ */
#define SPDIF_STCSCH_TxCChannelCons_h_MASK       (0xFFFFFFU)
#define SPDIF_STCSCH_TxCChannelCons_h_SHIFT      (0U)
#define SPDIF_STCSCH_TxCChannelCons_h(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCH_TxCChannelCons_h_SHIFT)) & SPDIF_STCSCH_TxCChannelCons_h_MASK)
/*! @} */

/*! @name STCSCL - SPDIFTxCChannelCons_l Register */
/*! @{ */
#define SPDIF_STCSCL_TxCChannelCons_l_MASK       (0xFFFFFFU)
#define SPDIF_STCSCL_TxCChannelCons_l_SHIFT      (0U)
#define SPDIF_STCSCL_TxCChannelCons_l(x)         (((uint32_t)(((uint32_t)(x)) << SPDIF_STCSCL_TxCChannelCons_l_SHIFT)) & SPDIF_STCSCL_TxCChannelCons_l_MASK)
/*! @} */

/*! @name SRFM - FreqMeas Register */
/*! @{ */
#define SPDIF_SRFM_FreqMeas_MASK                 (0xFFFFFFU)
#define SPDIF_SRFM_FreqMeas_SHIFT                (0U)
#define SPDIF_SRFM_FreqMeas(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_SRFM_FreqMeas_SHIFT)) & SPDIF_SRFM_FreqMeas_MASK)
/*! @} */

/*! @name STC - SPDIFTxClk Register */
/*! @{ */
#define SPDIF_STC_TxClk_DF_MASK                  (0x7FU)
#define SPDIF_STC_TxClk_DF_SHIFT                 (0U)
/*! TxClk_DF - TxClk_DF
 *  0b0000000..divider factor is 1
 *  0b0000001..divider factor is 2
 *  0b1111111..divider factor is 128
 */
#define SPDIF_STC_TxClk_DF(x)                    (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TxClk_DF_SHIFT)) & SPDIF_STC_TxClk_DF_MASK)
#define SPDIF_STC_tx_all_clk_en_MASK             (0x80U)
#define SPDIF_STC_tx_all_clk_en_SHIFT            (7U)
#define SPDIF_STC_TxClk_Source_MASK              (0x700U)
#define SPDIF_STC_TxClk_Source_SHIFT             (8U)
/*! TxClk_Source - TxClk_Source
 *  0b000..Clock Selection from Audio Clock Mux (ACM)
 */
#define SPDIF_STC_TxClk_Source(x)                (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_TxClk_Source_SHIFT)) & SPDIF_STC_TxClk_Source_MASK)
#define SPDIF_STC_SYSCLK_DF_MASK                 (0xFF800U)
#define SPDIF_STC_SYSCLK_DF_SHIFT                (11U)
/*! SYSCLK_DF - SYSCLK_DF
 *  0b000000000..no clock signal
 *  0b000000001..divider factor is 2
 *  0b111111111..divider factor is 512
 */
#define SPDIF_STC_SYSCLK_DF(x)                   (((uint32_t)(((uint32_t)(x)) << SPDIF_STC_SYSCLK_DF_SHIFT)) & SPDIF_STC_SYSCLK_DF_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group SPDIF_Register_Masks */


/* SPDIF - Peripheral instance base addresses */
/** Peripheral SPDIF1 base pointer */
#define SPDIF1_BASE_PTR                          ((SPDIF_MemMapPtr)0x30090000u)
/** Peripheral SPDIF2 base pointer */
#define SPDIF2_BASE_PTR                          ((SPDIF_MemMapPtr)0x300A0000u)
/** Array initializer of SPDIF peripheral base pointers */
#define SPDIF_BASE_PTRS                          { SPDIF1_BASE_PTR, SPDIF2_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SPDIF - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SPDIF_Register_Accessor_Macros SPDIF - Register accessor macros
 * @{
 */


/* SPDIF - Register instance definitions */
/* SPDIF1 */
#define SPDIF1_SCR                               SPDIF_SCR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCD                              SPDIF_SRCD_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRPC                              SPDIF_SRPC_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIE                               SPDIF_SIE_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIC                               SPDIF_SIC_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SIS                               SPDIF_SIS_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRL                               SPDIF_SRL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRR                               SPDIF_SRR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCSH                             SPDIF_SRCSH_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRCSL                             SPDIF_SRCSL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRU                               SPDIF_SRU_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRQ                               SPDIF_SRQ_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STL                               SPDIF_STL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STR                               SPDIF_STR_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STCSCH                            SPDIF_STCSCH_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STCSCL                            SPDIF_STCSCL_REG(SPDIF1_BASE_PTR)
#define SPDIF1_SRFM                              SPDIF_SRFM_REG(SPDIF1_BASE_PTR)
#define SPDIF1_STC                               SPDIF_STC_REG(SPDIF1_BASE_PTR)
/* SPDIF2 */
#define SPDIF2_SCR                               SPDIF_SCR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCD                              SPDIF_SRCD_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRPC                              SPDIF_SRPC_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIE                               SPDIF_SIE_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIC                               SPDIF_SIC_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SIS                               SPDIF_SIS_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRL                               SPDIF_SRL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRR                               SPDIF_SRR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCSH                             SPDIF_SRCSH_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRCSL                             SPDIF_SRCSL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRU                               SPDIF_SRU_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRQ                               SPDIF_SRQ_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STL                               SPDIF_STL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STR                               SPDIF_STR_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STCSCH                            SPDIF_STCSCH_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STCSCL                            SPDIF_STCSCL_REG(SPDIF2_BASE_PTR)
#define SPDIF2_SRFM                              SPDIF_SRFM_REG(SPDIF2_BASE_PTR)
#define SPDIF2_STC                               SPDIF_STC_REG(SPDIF2_BASE_PTR)

/*!
 * @}
 */ /* end of group SPDIF_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SPDIF_Peripheral */


/* ----------------------------------------------------------------------------
   -- SRC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Peripheral SRC
 * @{
 */

/** SRC - Peripheral register structure */
typedef struct SRC_MemMap {
  uint32_t SCR;                                    /**< SRC Reset Control Register, offset: 0x0 */
  uint32_t A53RCR0;                                /**< A53 Reset Control Register, offset: 0x4 */
  uint32_t A53RCR1;                                /**< A53 Reset Control Register, offset: 0x8 */
  uint32_t M7RCR;                                  /**< M7 Reset Control Register, offset: 0xC */
  uint8_t RESERVED_0[16];
  uint32_t USBOPHY1_RCR;                           /**< USB OTG PHY1 Reset Control Register, offset: 0x20 */
  uint8_t RESERVED_1[4];
  uint32_t MIPIPHY_RCR;                            /**< MIPI PHY Reset Control Register, offset: 0x28 */
  uint8_t RESERVED_2[8];
  uint32_t DISP_RCR;                               /**< DISPLAY Reset Control Register, offset: 0x34 */
  uint8_t RESERVED_3[8];
  uint32_t GPU_RCR;                                /**< GPU Reset Control Register, offset: 0x40 */
  uint8_t RESERVED_4[20];
  uint32_t SBMR1;                                  /**< SRC Boot Mode Register 1, offset: 0x58 */
  uint32_t SRSR;                                   /**< SRC Reset Status Register, offset: 0x5C */
  uint8_t RESERVED_5[8];
  uint32_t SISR;                                   /**< SRC Interrupt Status Register, offset: 0x68 */
  uint32_t SIMR;                                   /**< SRC Interrupt Mask Register, offset: 0x6C */
  uint32_t SBMR2;                                  /**< SRC Boot Mode Register 2, offset: 0x70 */
  uint32_t GPR1;                                   /**< SRC General Purpose Register 1, offset: 0x74 */
  uint32_t GPR2;                                   /**< SRC General Purpose Register 2, offset: 0x78 */
  uint32_t GPR3;                                   /**< SRC General Purpose Register 3, offset: 0x7C */
  uint32_t GPR4;                                   /**< SRC General Purpose Register 4, offset: 0x80 */
  uint32_t GPR5;                                   /**< SRC General Purpose Register 5, offset: 0x84 */
  uint32_t GPR6;                                   /**< SRC General Purpose Register 6, offset: 0x88 */
  uint32_t GPR7;                                   /**< SRC General Purpose Register 7, offset: 0x8C */
  uint32_t GPR8;                                   /**< SRC General Purpose Register 8, offset: 0x90 */
  uint32_t GPR9;                                   /**< SRC General Purpose Register 9, offset: 0x94 */
  uint32_t GPR10;                                  /**< SRC General Purpose Register 10, offset: 0x98 */
  uint8_t RESERVED_6[3940];
  uint32_t DDRC_RCR;                               /**< SRC DDR Controller Reset Control Register, offset: 0x1000 */
} volatile *SRC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register accessors */
#define SRC_SCR_REG(base)                        ((base)->SCR)
#define SRC_A53RCR0_REG(base)                    ((base)->A53RCR0)
#define SRC_A53RCR1_REG(base)                    ((base)->A53RCR1)
#define SRC_M7RCR_REG(base)                      ((base)->M7RCR)
#define SRC_USBOPHY1_RCR_REG(base)               ((base)->USBOPHY1_RCR)
#define SRC_MIPIPHY_RCR_REG(base)                ((base)->MIPIPHY_RCR)
#define SRC_DISP_RCR_REG(base)                   ((base)->DISP_RCR)
#define SRC_GPU_RCR_REG(base)                    ((base)->GPU_RCR)
#define SRC_SBMR1_REG(base)                      ((base)->SBMR1)
#define SRC_SRSR_REG(base)                       ((base)->SRSR)
#define SRC_SISR_REG(base)                       ((base)->SISR)
#define SRC_SIMR_REG(base)                       ((base)->SIMR)
#define SRC_SBMR2_REG(base)                      ((base)->SBMR2)
#define SRC_GPR1_REG(base)                       ((base)->GPR1)
#define SRC_GPR2_REG(base)                       ((base)->GPR2)
#define SRC_GPR3_REG(base)                       ((base)->GPR3)
#define SRC_GPR4_REG(base)                       ((base)->GPR4)
#define SRC_GPR5_REG(base)                       ((base)->GPR5)
#define SRC_GPR6_REG(base)                       ((base)->GPR6)
#define SRC_GPR7_REG(base)                       ((base)->GPR7)
#define SRC_GPR8_REG(base)                       ((base)->GPR8)
#define SRC_GPR9_REG(base)                       ((base)->GPR9)
#define SRC_GPR10_REG(base)                      ((base)->GPR10)
#define SRC_DDRC_RCR_REG(base)                   ((base)->DDRC_RCR)

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- SRC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Masks SRC Register Masks
 * @{
 */

/*! @name SCR - SRC Reset Control Register */
/*! @{ */
#define SRC_SCR_MASK_TEMPSENSE_RESET_MASK        (0xF0U)
#define SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT       (4U)
/*! MASK_TEMPSENSE_RESET
 *  0b0101..tempsense_reset is masked
 *  0b1010..tempsense_reset is not masked
 */
#define SRC_SCR_MASK_TEMPSENSE_RESET(x)          (((uint32_t)(((uint32_t)(x)) << SRC_SCR_MASK_TEMPSENSE_RESET_SHIFT)) & SRC_SCR_MASK_TEMPSENSE_RESET_MASK)
#define SRC_SCR_DOMAIN0_MASK                     (0x1000000U)
#define SRC_SCR_DOMAIN0_SHIFT                    (24U)
#define SRC_SCR_DOMAIN1_MASK                     (0x2000000U)
#define SRC_SCR_DOMAIN1_SHIFT                    (25U)
#define SRC_SCR_DOMAIN2_MASK                     (0x4000000U)
#define SRC_SCR_DOMAIN2_SHIFT                    (26U)
#define SRC_SCR_DOMAIN3_MASK                     (0x8000000U)
#define SRC_SCR_DOMAIN3_SHIFT                    (27U)
#define SRC_SCR_LOCK_MASK                        (0x40000000U)
#define SRC_SCR_LOCK_SHIFT                       (30U)
#define SRC_SCR_DOM_EN_MASK                      (0x80000000U)
#define SRC_SCR_DOM_EN_SHIFT                     (31U)
/*! @} */

/*! @name A53RCR0 - A53 Reset Control Register */
/*! @{ */
#define SRC_A53RCR0_A53_CORE_POR_RESET0_MASK     (0x1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET0_SHIFT    (0U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_MASK     (0x2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET1_SHIFT    (1U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_MASK     (0x4U)
#define SRC_A53RCR0_A53_CORE_POR_RESET2_SHIFT    (2U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_MASK     (0x8U)
#define SRC_A53RCR0_A53_CORE_POR_RESET3_SHIFT    (3U)
#define SRC_A53RCR0_A53_CORE_RESET0_MASK         (0x10U)
#define SRC_A53RCR0_A53_CORE_RESET0_SHIFT        (4U)
#define SRC_A53RCR0_A53_CORE_RESET1_MASK         (0x20U)
#define SRC_A53RCR0_A53_CORE_RESET1_SHIFT        (5U)
#define SRC_A53RCR0_A53_CORE_RESET2_MASK         (0x40U)
#define SRC_A53RCR0_A53_CORE_RESET2_SHIFT        (6U)
#define SRC_A53RCR0_A53_CORE_RESET3_MASK         (0x80U)
#define SRC_A53RCR0_A53_CORE_RESET3_SHIFT        (7U)
#define SRC_A53RCR0_A53_DBG_RESET0_MASK          (0x100U)
#define SRC_A53RCR0_A53_DBG_RESET0_SHIFT         (8U)
#define SRC_A53RCR0_A53_DBG_RESET1_MASK          (0x200U)
#define SRC_A53RCR0_A53_DBG_RESET1_SHIFT         (9U)
#define SRC_A53RCR0_A53_DBG_RESET2_MASK          (0x400U)
#define SRC_A53RCR0_A53_DBG_RESET2_SHIFT         (10U)
#define SRC_A53RCR0_A53_DBG_RESET3_MASK          (0x800U)
#define SRC_A53RCR0_A53_DBG_RESET3_SHIFT         (11U)
#define SRC_A53RCR0_A53_ETM_RESET0_MASK          (0x1000U)
#define SRC_A53RCR0_A53_ETM_RESET0_SHIFT         (12U)
#define SRC_A53RCR0_A53_ETM_RESET1_MASK          (0x2000U)
#define SRC_A53RCR0_A53_ETM_RESET1_SHIFT         (13U)
#define SRC_A53RCR0_A53_ETM_RESET2_MASK          (0x4000U)
#define SRC_A53RCR0_A53_ETM_RESET2_SHIFT         (14U)
#define SRC_A53RCR0_A53_ETM_RESET3_MASK          (0x8000U)
#define SRC_A53RCR0_A53_ETM_RESET3_SHIFT         (15U)
#define SRC_A53RCR0_MASK_WDOG1_RST_MASK          (0xF0000U)
#define SRC_A53RCR0_MASK_WDOG1_RST_SHIFT         (16U)
/*! MASK_WDOG1_RST
 *  0b0101..wdog1_rst_b is masked
 *  0b1010..wdog1_rst_b is not masked
 */
#define SRC_A53RCR0_MASK_WDOG1_RST(x)            (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR0_MASK_WDOG1_RST_SHIFT)) & SRC_A53RCR0_MASK_WDOG1_RST_MASK)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_MASK       (0x100000U)
#define SRC_A53RCR0_A53_SOC_DBG_RESET_SHIFT      (20U)
#define SRC_A53RCR0_A53_L2RESET_MASK             (0x200000U)
#define SRC_A53RCR0_A53_L2RESET_SHIFT            (21U)
#define SRC_A53RCR0_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR0_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR0_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR0_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR0_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR0_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR0_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR0_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR0_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR0_LOCK_SHIFT                   (30U)
#define SRC_A53RCR0_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR0_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name A53RCR1 - A53 Reset Control Register */
/*! @{ */
#define SRC_A53RCR1_A53_CORE0_ENABLE_MASK        (0x1U)
#define SRC_A53RCR1_A53_CORE0_ENABLE_SHIFT       (0U)
#define SRC_A53RCR1_A53_CORE1_ENABLE_MASK        (0x2U)
#define SRC_A53RCR1_A53_CORE1_ENABLE_SHIFT       (1U)
#define SRC_A53RCR1_A53_CORE2_ENABLE_MASK        (0x4U)
#define SRC_A53RCR1_A53_CORE2_ENABLE_SHIFT       (2U)
#define SRC_A53RCR1_A53_CORE3_ENABLE_MASK        (0x8U)
#define SRC_A53RCR1_A53_CORE3_ENABLE_SHIFT       (3U)
#define SRC_A53RCR1_A53_RST_SLOW_MASK            (0x70U)
#define SRC_A53RCR1_A53_RST_SLOW_SHIFT           (4U)
#define SRC_A53RCR1_A53_RST_SLOW(x)              (((uint32_t)(((uint32_t)(x)) << SRC_A53RCR1_A53_RST_SLOW_SHIFT)) & SRC_A53RCR1_A53_RST_SLOW_MASK)
#define SRC_A53RCR1_DOMAIN0_MASK                 (0x1000000U)
#define SRC_A53RCR1_DOMAIN0_SHIFT                (24U)
#define SRC_A53RCR1_DOMAIN1_MASK                 (0x2000000U)
#define SRC_A53RCR1_DOMAIN1_SHIFT                (25U)
#define SRC_A53RCR1_DOMAIN2_MASK                 (0x4000000U)
#define SRC_A53RCR1_DOMAIN2_SHIFT                (26U)
#define SRC_A53RCR1_DOMAIN3_MASK                 (0x8000000U)
#define SRC_A53RCR1_DOMAIN3_SHIFT                (27U)
#define SRC_A53RCR1_LOCK_MASK                    (0x40000000U)
#define SRC_A53RCR1_LOCK_SHIFT                   (30U)
#define SRC_A53RCR1_DOM_EN_MASK                  (0x80000000U)
#define SRC_A53RCR1_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name M7RCR - M7 Reset Control Register */
/*! @{ */
#define SRC_M7RCR_SW_M7C_NON_SCLR_RST_MASK       (0x1U)
#define SRC_M7RCR_SW_M7C_NON_SCLR_RST_SHIFT      (0U)
#define SRC_M7RCR_SW_M7C_RST_MASK                (0x2U)
#define SRC_M7RCR_SW_M7C_RST_SHIFT               (1U)
#define SRC_M7RCR_ENABLE_M7_MASK                 (0x8U)
#define SRC_M7RCR_ENABLE_M7_SHIFT                (3U)
#define SRC_M7RCR_MASK_WDOG3_RST_MASK            (0xF0U)
#define SRC_M7RCR_MASK_WDOG3_RST_SHIFT           (4U)
/*! MASK_WDOG3_RST
 *  0b0101..wdog3_rst_b is masked
 *  0b1010..wdog3_rst_b is not masked
 */
#define SRC_M7RCR_MASK_WDOG3_RST(x)              (((uint32_t)(((uint32_t)(x)) << SRC_M7RCR_MASK_WDOG3_RST_SHIFT)) & SRC_M7RCR_MASK_WDOG3_RST_MASK)
#define SRC_M7RCR_WDOG3_RST_OPTION_M7_MASK       (0x100U)
#define SRC_M7RCR_WDOG3_RST_OPTION_M7_SHIFT      (8U)
#define SRC_M7RCR_WDOG3_RST_OPTION_MASK          (0x200U)
#define SRC_M7RCR_WDOG3_RST_OPTION_SHIFT         (9U)
#define SRC_M7RCR_DOMAIN0_MASK                   (0x1000000U)
#define SRC_M7RCR_DOMAIN0_SHIFT                  (24U)
#define SRC_M7RCR_DOMAIN1_MASK                   (0x2000000U)
#define SRC_M7RCR_DOMAIN1_SHIFT                  (25U)
#define SRC_M7RCR_DOMAIN2_MASK                   (0x4000000U)
#define SRC_M7RCR_DOMAIN2_SHIFT                  (26U)
#define SRC_M7RCR_DOMAIN3_MASK                   (0x8000000U)
#define SRC_M7RCR_DOMAIN3_SHIFT                  (27U)
#define SRC_M7RCR_LOCK_MASK                      (0x40000000U)
#define SRC_M7RCR_LOCK_SHIFT                     (30U)
#define SRC_M7RCR_DOM_EN_MASK                    (0x80000000U)
#define SRC_M7RCR_DOM_EN_SHIFT                   (31U)
/*! @} */

/*! @name USBOPHY1_RCR - USB OTG PHY1 Reset Control Register */
/*! @{ */
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_MASK     (0x1U)
#define SRC_USBOPHY1_RCR_OTG1_PHY_RESET_SHIFT    (0U)
#define SRC_USBOPHY1_RCR_DOMAIN0_MASK            (0x1000000U)
#define SRC_USBOPHY1_RCR_DOMAIN0_SHIFT           (24U)
#define SRC_USBOPHY1_RCR_DOMAIN1_MASK            (0x2000000U)
#define SRC_USBOPHY1_RCR_DOMAIN1_SHIFT           (25U)
#define SRC_USBOPHY1_RCR_DOMAIN2_MASK            (0x4000000U)
#define SRC_USBOPHY1_RCR_DOMAIN2_SHIFT           (26U)
#define SRC_USBOPHY1_RCR_DOMAIN3_MASK            (0x8000000U)
#define SRC_USBOPHY1_RCR_DOMAIN3_SHIFT           (27U)
#define SRC_USBOPHY1_RCR_LOCK_MASK               (0x40000000U)
#define SRC_USBOPHY1_RCR_LOCK_SHIFT              (30U)
#define SRC_USBOPHY1_RCR_DOM_EN_MASK             (0x80000000U)
#define SRC_USBOPHY1_RCR_DOM_EN_SHIFT            (31U)
/*! @} */

/*! @name MIPIPHY_RCR - MIPI PHY Reset Control Register */
/*! @{ */
#define SRC_MIPIPHY_RCR_DOMAIN0_MASK             (0x1000000U)
#define SRC_MIPIPHY_RCR_DOMAIN0_SHIFT            (24U)
#define SRC_MIPIPHY_RCR_DOMAIN1_MASK             (0x2000000U)
#define SRC_MIPIPHY_RCR_DOMAIN1_SHIFT            (25U)
#define SRC_MIPIPHY_RCR_DOMAIN2_MASK             (0x4000000U)
#define SRC_MIPIPHY_RCR_DOMAIN2_SHIFT            (26U)
#define SRC_MIPIPHY_RCR_DOMAIN3_MASK             (0x8000000U)
#define SRC_MIPIPHY_RCR_DOMAIN3_SHIFT            (27U)
#define SRC_MIPIPHY_RCR_LOCK_MASK                (0x40000000U)
#define SRC_MIPIPHY_RCR_LOCK_SHIFT               (30U)
#define SRC_MIPIPHY_RCR_DOM_EN_MASK              (0x80000000U)
#define SRC_MIPIPHY_RCR_DOM_EN_SHIFT             (31U)
/*! @} */

/*! @name DISP_RCR - DISPLAY Reset Control Register */
/*! @{ */
#define SRC_DISP_RCR_DISP_RESET_MASK             (0x1U)
#define SRC_DISP_RCR_DISP_RESET_SHIFT            (0U)
#define SRC_DISP_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DISP_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DISP_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DISP_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DISP_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DISP_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DISP_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DISP_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DISP_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DISP_RCR_LOCK_SHIFT                  (30U)
#define SRC_DISP_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DISP_RCR_DOM_EN_SHIFT                (31U)
/*! @} */

/*! @name GPU_RCR - GPU Reset Control Register */
/*! @{ */
#define SRC_GPU_RCR_GPU_RESET_MASK               (0x1U)
#define SRC_GPU_RCR_GPU_RESET_SHIFT              (0U)
#define SRC_GPU_RCR_DOMAIN0_MASK                 (0x1000000U)
#define SRC_GPU_RCR_DOMAIN0_SHIFT                (24U)
#define SRC_GPU_RCR_DOMAIN1_MASK                 (0x2000000U)
#define SRC_GPU_RCR_DOMAIN1_SHIFT                (25U)
#define SRC_GPU_RCR_DOMAIN2_MASK                 (0x4000000U)
#define SRC_GPU_RCR_DOMAIN2_SHIFT                (26U)
#define SRC_GPU_RCR_DOMAIN3_MASK                 (0x8000000U)
#define SRC_GPU_RCR_DOMAIN3_SHIFT                (27U)
#define SRC_GPU_RCR_LOCK_MASK                    (0x40000000U)
#define SRC_GPU_RCR_LOCK_SHIFT                   (30U)
#define SRC_GPU_RCR_DOM_EN_MASK                  (0x80000000U)
#define SRC_GPU_RCR_DOM_EN_SHIFT                 (31U)
/*! @} */

/*! @name SBMR1 - SRC Boot Mode Register 1 */
/*! @{ */
#define SRC_SBMR1_BOOT_CFG_MASK                  (0xFFFFFU)
#define SRC_SBMR1_BOOT_CFG_SHIFT                 (0U)
#define SRC_SBMR1_BOOT_CFG(x)                    (((uint32_t)(((uint32_t)(x)) << SRC_SBMR1_BOOT_CFG_SHIFT)) & SRC_SBMR1_BOOT_CFG_MASK)
/*! @} */

/*! @name SRSR - SRC Reset Status Register */
/*! @{ */
#define SRC_SRSR_ipp_reset_b_MASK                (0x1U)
#define SRC_SRSR_ipp_reset_b_SHIFT               (0U)
#define SRC_SRSR_csu_reset_b_MASK                (0x4U)
#define SRC_SRSR_csu_reset_b_SHIFT               (2U)
#define SRC_SRSR_ipp_user_reset_b_MASK           (0x8U)
#define SRC_SRSR_ipp_user_reset_b_SHIFT          (3U)
#define SRC_SRSR_wdog1_rst_b_MASK                (0x10U)
#define SRC_SRSR_wdog1_rst_b_SHIFT               (4U)
#define SRC_SRSR_jtag_rst_b_MASK                 (0x20U)
#define SRC_SRSR_jtag_rst_b_SHIFT                (5U)
#define SRC_SRSR_jtag_sw_rst_MASK                (0x40U)
#define SRC_SRSR_jtag_sw_rst_SHIFT               (6U)
#define SRC_SRSR_wdog3_rst_b_MASK                (0x80U)
#define SRC_SRSR_wdog3_rst_b_SHIFT               (7U)
#define SRC_SRSR_wdog2_rst_b_MASK                (0x100U)
#define SRC_SRSR_wdog2_rst_b_SHIFT               (8U)
#define SRC_SRSR_tempsense_rst_b_MASK            (0x200U)
#define SRC_SRSR_tempsense_rst_b_SHIFT           (9U)
/*! @} */

/*! @name SISR - SRC Interrupt Status Register */
/*! @{ */
#define SRC_SISR_OTGPHY1_PASSED_RESET_MASK       (0x4U)
#define SRC_SISR_OTGPHY1_PASSED_RESET_SHIFT      (2U)
#define SRC_SISR_DISPLAY_PASSED_RESET_MASK       (0x80U)
#define SRC_SISR_DISPLAY_PASSED_RESET_SHIFT      (7U)
#define SRC_SISR_M7_PASSED_RESET_MASK            (0x100U)
#define SRC_SISR_M7_PASSED_RESET_SHIFT           (8U)
#define SRC_SISR_GPU_PASSED_RESET_MASK           (0x400U)
#define SRC_SISR_GPU_PASSED_RESET_SHIFT          (10U)
/*! @} */

/*! @name SIMR - SRC Interrupt Mask Register */
/*! @{ */
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_MASK  (0x4U)
#define SRC_SIMR_MASK_OTGPHY1_PASSED_RESET_SHIFT (2U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_MASK  (0x80U)
#define SRC_SIMR_MASK_DISPLAY_PASSED_RESET_SHIFT (7U)
#define SRC_SIMR_MASK_M7_PASSED_RESET_MASK       (0x100U)
#define SRC_SIMR_MASK_M7_PASSED_RESET_SHIFT      (8U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_MASK      (0x400U)
#define SRC_SIMR_MASK_GPU_PASSED_RESET_SHIFT     (10U)
/*! @} */

/*! @name SBMR2 - SRC Boot Mode Register 2 */
/*! @{ */
#define SRC_SBMR2_SEC_CONFIG_MASK                (0x3U)
#define SRC_SBMR2_SEC_CONFIG_SHIFT               (0U)
#define SRC_SBMR2_SEC_CONFIG(x)                  (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_SEC_CONFIG_SHIFT)) & SRC_SBMR2_SEC_CONFIG_MASK)
#define SRC_SBMR2_DIR_BT_DIS_MASK                (0x8U)
#define SRC_SBMR2_DIR_BT_DIS_SHIFT               (3U)
#define SRC_SBMR2_BT_FUSE_SEL_MASK               (0x10U)
#define SRC_SBMR2_BT_FUSE_SEL_SHIFT              (4U)
#define SRC_SBMR2_FORCE_COLD_BOOT_MASK           (0xE0U)
#define SRC_SBMR2_FORCE_COLD_BOOT_SHIFT          (5U)
#define SRC_SBMR2_FORCE_COLD_BOOT(x)             (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_FORCE_COLD_BOOT_SHIFT)) & SRC_SBMR2_FORCE_COLD_BOOT_MASK)
#define SRC_SBMR2_IPP_BOOT_MODE_MASK             (0x3F000000U)
#define SRC_SBMR2_IPP_BOOT_MODE_SHIFT            (24U)
#define SRC_SBMR2_IPP_BOOT_MODE(x)               (((uint32_t)(((uint32_t)(x)) << SRC_SBMR2_IPP_BOOT_MODE_SHIFT)) & SRC_SBMR2_IPP_BOOT_MODE_MASK)
/*! @} */

/*! @name GPR1 - SRC General Purpose Register 1 */
/*! @{ */
#define SRC_GPR1_C0_START_ADDRH_MASK             (0xFFFFU)
#define SRC_GPR1_C0_START_ADDRH_SHIFT            (0U)
#define SRC_GPR1_C0_START_ADDRH(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR1_C0_START_ADDRH_SHIFT)) & SRC_GPR1_C0_START_ADDRH_MASK)
/*! @} */

/*! @name GPR2 - SRC General Purpose Register 2 */
/*! @{ */
#define SRC_GPR2_C0_START_ADDRL_MASK             (0x3FFFFFU)
#define SRC_GPR2_C0_START_ADDRL_SHIFT            (0U)
#define SRC_GPR2_C0_START_ADDRL(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR2_C0_START_ADDRL_SHIFT)) & SRC_GPR2_C0_START_ADDRL_MASK)
/*! @} */

/*! @name GPR3 - SRC General Purpose Register 3 */
/*! @{ */
#define SRC_GPR3_C1_START_ADDRH_MASK             (0xFFFFU)
#define SRC_GPR3_C1_START_ADDRH_SHIFT            (0U)
#define SRC_GPR3_C1_START_ADDRH(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR3_C1_START_ADDRH_SHIFT)) & SRC_GPR3_C1_START_ADDRH_MASK)
/*! @} */

/*! @name GPR4 - SRC General Purpose Register 4 */
/*! @{ */
#define SRC_GPR4_C1_START_ADDRL_MASK             (0x3FFFFFU)
#define SRC_GPR4_C1_START_ADDRL_SHIFT            (0U)
#define SRC_GPR4_C1_START_ADDRL(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR4_C1_START_ADDRL_SHIFT)) & SRC_GPR4_C1_START_ADDRL_MASK)
/*! @} */

/*! @name GPR5 - SRC General Purpose Register 5 */
/*! @{ */
#define SRC_GPR5_C2_START_ADDRH_MASK             (0xFFFFU)
#define SRC_GPR5_C2_START_ADDRH_SHIFT            (0U)
#define SRC_GPR5_C2_START_ADDRH(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR5_C2_START_ADDRH_SHIFT)) & SRC_GPR5_C2_START_ADDRH_MASK)
/*! @} */

/*! @name GPR6 - SRC General Purpose Register 6 */
/*! @{ */
#define SRC_GPR6_C2_START_ADDRL_MASK             (0x3FFFFFU)
#define SRC_GPR6_C2_START_ADDRL_SHIFT            (0U)
#define SRC_GPR6_C2_START_ADDRL(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR6_C2_START_ADDRL_SHIFT)) & SRC_GPR6_C2_START_ADDRL_MASK)
/*! @} */

/*! @name GPR7 - SRC General Purpose Register 7 */
/*! @{ */
#define SRC_GPR7_C3_START_ADDRH_MASK             (0xFFFFU)
#define SRC_GPR7_C3_START_ADDRH_SHIFT            (0U)
#define SRC_GPR7_C3_START_ADDRH(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR7_C3_START_ADDRH_SHIFT)) & SRC_GPR7_C3_START_ADDRH_MASK)
/*! @} */

/*! @name GPR8 - SRC General Purpose Register 8 */
/*! @{ */
#define SRC_GPR8_C3_START_ADDRL_MASK             (0x3FFFFFU)
#define SRC_GPR8_C3_START_ADDRL_SHIFT            (0U)
#define SRC_GPR8_C3_START_ADDRL(x)               (((uint32_t)(((uint32_t)(x)) << SRC_GPR8_C3_START_ADDRL_SHIFT)) & SRC_GPR8_C3_START_ADDRL_MASK)
/*! @} */

/*! @name DDRC_RCR - SRC DDR Controller Reset Control Register */
/*! @{ */
#define SRC_DDRC_RCR_DDRC1_PRST_MASK             (0x1U)
#define SRC_DDRC_RCR_DDRC1_PRST_SHIFT            (0U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_MASK         (0x2U)
#define SRC_DDRC_RCR_DDRC1_CORE_RST_SHIFT        (1U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_MASK        (0x4U)
#define SRC_DDRC_RCR_DDRC1_PHY_RESET_SHIFT       (2U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_MASK      (0x8U)
#define SRC_DDRC_RCR_DDRC1_PHY_PWROKIN_SHIFT     (3U)
#define SRC_DDRC_RCR_DDRC1_SYS_RST_MASK          (0x10U)
#define SRC_DDRC_RCR_DDRC1_SYS_RST_SHIFT         (4U)
#define SRC_DDRC_RCR_DDRC1_PHY_WRST_MASK         (0x20U)
#define SRC_DDRC_RCR_DDRC1_PHY_WRST_SHIFT        (5U)
#define SRC_DDRC_RCR_DOMAIN0_MASK                (0x1000000U)
#define SRC_DDRC_RCR_DOMAIN0_SHIFT               (24U)
#define SRC_DDRC_RCR_DOMAIN1_MASK                (0x2000000U)
#define SRC_DDRC_RCR_DOMAIN1_SHIFT               (25U)
#define SRC_DDRC_RCR_DOMAIN2_MASK                (0x4000000U)
#define SRC_DDRC_RCR_DOMAIN2_SHIFT               (26U)
#define SRC_DDRC_RCR_DOMAIN3_MASK                (0x8000000U)
#define SRC_DDRC_RCR_DOMAIN3_SHIFT               (27U)
#define SRC_DDRC_RCR_LOCK_MASK                   (0x40000000U)
#define SRC_DDRC_RCR_LOCK_SHIFT                  (30U)
#define SRC_DDRC_RCR_DOM_EN_MASK                 (0x80000000U)
#define SRC_DDRC_RCR_DOM_EN_SHIFT                (31U)
/*! @} */


/*!
 * @}
 */ /* end of group SRC_Register_Masks */


/* SRC - Peripheral instance base addresses */
/** Peripheral SRC base pointer */
#define SRC_BASE_PTR                             ((SRC_MemMapPtr)0x30390000u)
/** Array initializer of SRC peripheral base pointers */
#define SRC_BASE_PTRS                            { SRC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- SRC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SRC_Register_Accessor_Macros SRC - Register accessor macros
 * @{
 */


/* SRC - Register instance definitions */
/* SRC */
#define SRC_SCR                                  SRC_SCR_REG(SRC_BASE_PTR)
#define SRC_A53RCR0                              SRC_A53RCR0_REG(SRC_BASE_PTR)
#define SRC_A53RCR1                              SRC_A53RCR1_REG(SRC_BASE_PTR)
#define SRC_M7RCR                                SRC_M7RCR_REG(SRC_BASE_PTR)
#define SRC_USBOPHY1_RCR                         SRC_USBOPHY1_RCR_REG(SRC_BASE_PTR)
#define SRC_MIPIPHY_RCR                          SRC_MIPIPHY_RCR_REG(SRC_BASE_PTR)
#define SRC_DISP_RCR                             SRC_DISP_RCR_REG(SRC_BASE_PTR)
#define SRC_GPU_RCR                              SRC_GPU_RCR_REG(SRC_BASE_PTR)
#define SRC_SBMR1                                SRC_SBMR1_REG(SRC_BASE_PTR)
#define SRC_SRSR                                 SRC_SRSR_REG(SRC_BASE_PTR)
#define SRC_SISR                                 SRC_SISR_REG(SRC_BASE_PTR)
#define SRC_SIMR                                 SRC_SIMR_REG(SRC_BASE_PTR)
#define SRC_SBMR2                                SRC_SBMR2_REG(SRC_BASE_PTR)
#define SRC_GPR1                                 SRC_GPR1_REG(SRC_BASE_PTR)
#define SRC_GPR2                                 SRC_GPR2_REG(SRC_BASE_PTR)
#define SRC_GPR3                                 SRC_GPR3_REG(SRC_BASE_PTR)
#define SRC_GPR4                                 SRC_GPR4_REG(SRC_BASE_PTR)
#define SRC_GPR5                                 SRC_GPR5_REG(SRC_BASE_PTR)
#define SRC_GPR6                                 SRC_GPR6_REG(SRC_BASE_PTR)
#define SRC_GPR7                                 SRC_GPR7_REG(SRC_BASE_PTR)
#define SRC_GPR8                                 SRC_GPR8_REG(SRC_BASE_PTR)
#define SRC_GPR9                                 SRC_GPR9_REG(SRC_BASE_PTR)
#define SRC_GPR10                                SRC_GPR10_REG(SRC_BASE_PTR)
#define SRC_DDRC_RCR                             SRC_DDRC_RCR_REG(SRC_BASE_PTR)

/*!
 * @}
 */ /* end of group SRC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group SRC_Peripheral */


/* ----------------------------------------------------------------------------
   -- TMU
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Peripheral TMU
 * @{
 */

/** TMU - Peripheral register structure */
typedef struct TMU_MemMap {
  uint32_t TER;                                    /**< TMU Enable Register, offset: 0x0 */
  uint32_t TSR;                                    /**< TMU Status register, offset: 0x4 */
  uint32_t TIER;                                   /**< TMU Interrupt Enable register, offset: 0x8 */
  uint32_t TIDR;                                   /**< TMU Interrupt Detect register, offset: 0xC */
  uint32_t TMHTITR;                                /**< TMU Monitor High Temperature Immediate Threshold register, offset: 0x10 */
  uint32_t TMHTATR;                                /**< TMU Monitor High Temperature Average threshold register, offset: 0x14 */
  uint32_t TMHTACTR;                               /**< TMU Monitor High Temperature Average Critical Threshold register, offset: 0x18 */
  uint32_t TSCR;                                   /**< TMU Sensor Calibration register, offset: 0x1C */
  uint32_t TRITSR;                                 /**< TMU Report Immediate Temperature Site register n, offset: 0x20 */
  uint32_t TRATSR;                                 /**< TMU Report Average Temperature Site register n, offset: 0x24 */
  uint32_t TASR;                                   /**< , offset: 0x28 */
  uint32_t TTMC;                                   /**< , offset: 0x2C */
  uint32_t TCALIV;                                 /**< , offset: 0x30 */
} volatile *TMU_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- TMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Accessor_Macros TMU - Register accessor macros
 * @{
 */


/* TMU - Register accessors */
#define TMU_TER_REG(base)                        ((base)->TER)
#define TMU_TSR_REG(base)                        ((base)->TSR)
#define TMU_TIER_REG(base)                       ((base)->TIER)
#define TMU_TIDR_REG(base)                       ((base)->TIDR)
#define TMU_TMHTITR_REG(base)                    ((base)->TMHTITR)
#define TMU_TMHTATR_REG(base)                    ((base)->TMHTATR)
#define TMU_TMHTACTR_REG(base)                   ((base)->TMHTACTR)
#define TMU_TSCR_REG(base)                       ((base)->TSCR)
#define TMU_TRITSR_REG(base)                     ((base)->TRITSR)
#define TMU_TRATSR_REG(base)                     ((base)->TRATSR)
#define TMU_TASR_REG(base)                       ((base)->TASR)
#define TMU_TTMC_REG(base)                       ((base)->TTMC)
#define TMU_TCALIV_REG(base)                     ((base)->TCALIV)

/*!
 * @}
 */ /* end of group TMU_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- TMU Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Masks TMU Register Masks
 * @{
 */

/*! @name TER - TMU Enable Register */
/*! @{ */
#define TMU_TER_ALPF_MASK                        (0x3U)
#define TMU_TER_ALPF_SHIFT                       (0U)
/*! ALPF
 *  0b00..1.0
 *  0b01..0.5
 *  0b10..0.25
 *  0b11..0.125
 */
#define TMU_TER_ALPF(x)                          (((uint32_t)(((uint32_t)(x)) << TMU_TER_ALPF_SHIFT)) & TMU_TER_ALPF_MASK)
#define TMU_TER_EN_MASK                          (0x80000000U)
#define TMU_TER_EN_SHIFT                         (31U)
/*! @} */

/*! @name TSR - TMU Status register */
/*! @{ */
#define TMU_TSR_TB_MASK                          (0x80000000U)
#define TMU_TSR_TB_SHIFT                         (31U)
/*! @} */

/*! @name TIER - TMU Interrupt Enable register */
/*! @{ */
#define TMU_TIER_ATCTEIE_MASK                    (0x20000000U)
#define TMU_TIER_ATCTEIE_SHIFT                   (29U)
#define TMU_TIER_ATTEIE_MASK                     (0x40000000U)
#define TMU_TIER_ATTEIE_SHIFT                    (30U)
#define TMU_TIER_ITTEIE_MASK                     (0x80000000U)
#define TMU_TIER_ITTEIE_SHIFT                    (31U)
/*! @} */

/*! @name TIDR - TMU Interrupt Detect register */
/*! @{ */
#define TMU_TIDR_ATCTE_MASK                      (0x10000000U)
#define TMU_TIDR_ATCTE_SHIFT                     (28U)
#define TMU_TIDR_ATTE_MASK                       (0x20000000U)
#define TMU_TIDR_ATTE_SHIFT                      (29U)
#define TMU_TIDR_ITTE_MASK                       (0x40000000U)
#define TMU_TIDR_ITTE_SHIFT                      (30U)
/*! @} */

/*! @name TMHTITR - TMU Monitor High Temperature Immediate Threshold register */
/*! @{ */
#define TMU_TMHTITR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTITR_TEMP_SHIFT                   (0U)
#define TMU_TMHTITR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTITR_TEMP_SHIFT)) & TMU_TMHTITR_TEMP_MASK)
#define TMU_TMHTITR_EN_MASK                      (0x80000000U)
#define TMU_TMHTITR_EN_SHIFT                     (31U)
/*! @} */

/*! @name TMHTATR - TMU Monitor High Temperature Average threshold register */
/*! @{ */
#define TMU_TMHTATR_TEMP_MASK                    (0xFFU)
#define TMU_TMHTATR_TEMP_SHIFT                   (0U)
#define TMU_TMHTATR_TEMP(x)                      (((uint32_t)(((uint32_t)(x)) << TMU_TMHTATR_TEMP_SHIFT)) & TMU_TMHTATR_TEMP_MASK)
#define TMU_TMHTATR_EN_MASK                      (0x80000000U)
#define TMU_TMHTATR_EN_SHIFT                     (31U)
/*! @} */

/*! @name TMHTACTR - TMU Monitor High Temperature Average Critical Threshold register */
/*! @{ */
#define TMU_TMHTACTR_TEMP_MASK                   (0xFFU)
#define TMU_TMHTACTR_TEMP_SHIFT                  (0U)
#define TMU_TMHTACTR_TEMP(x)                     (((uint32_t)(((uint32_t)(x)) << TMU_TMHTACTR_TEMP_SHIFT)) & TMU_TMHTACTR_TEMP_MASK)
#define TMU_TMHTACTR_EN_MASK                     (0x80000000U)
#define TMU_TMHTACTR_EN_SHIFT                    (31U)
/*! @} */

/*! @name TSCR - TMU Sensor Calibration register */
/*! @{ */
#define TMU_TSCR_SENSOR_MASK                     (0xFFU)
#define TMU_TSCR_SENSOR_SHIFT                    (0U)
#define TMU_TSCR_SENSOR(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TSCR_SENSOR_SHIFT)) & TMU_TSCR_SENSOR_MASK)
#define TMU_TSCR_BSR_MASK                        (0x80000000U)
#define TMU_TSCR_BSR_SHIFT                       (31U)
/*! @} */

/*! @name TRITSR - TMU Report Immediate Temperature Site register n */
/*! @{ */
#define TMU_TRITSR_TEMP_MASK                     (0xFFU)
#define TMU_TRITSR_TEMP_SHIFT                    (0U)
#define TMU_TRITSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRITSR_TEMP_SHIFT)) & TMU_TRITSR_TEMP_MASK)
#define TMU_TRITSR_V_MASK                        (0x80000000U)
#define TMU_TRITSR_V_SHIFT                       (31U)
/*! @} */

/*! @name TRATSR - TMU Report Average Temperature Site register n */
/*! @{ */
#define TMU_TRATSR_TEMP_MASK                     (0xFFU)
#define TMU_TRATSR_TEMP_SHIFT                    (0U)
#define TMU_TRATSR_TEMP(x)                       (((uint32_t)(((uint32_t)(x)) << TMU_TRATSR_TEMP_SHIFT)) & TMU_TRATSR_TEMP_MASK)
#define TMU_TRATSR_V_MASK                        (0x80000000U)
#define TMU_TRATSR_V_SHIFT                       (31U)
/*! @} */

/*! @name TASR -  */
/*! @{ */
#define TMU_TASR_BUF_VERF_SEL_MASK               (0x1FU)
#define TMU_TASR_BUF_VERF_SEL_SHIFT              (0U)
#define TMU_TASR_BUF_VERF_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << TMU_TASR_BUF_VERF_SEL_SHIFT)) & TMU_TASR_BUF_VERF_SEL_MASK)
#define TMU_TASR_BUF_SLOP_SEL_MASK               (0xF0000U)
#define TMU_TASR_BUF_SLOP_SEL_SHIFT              (16U)
#define TMU_TASR_BUF_SLOP_SEL(x)                 (((uint32_t)(((uint32_t)(x)) << TMU_TASR_BUF_SLOP_SEL_SHIFT)) & TMU_TASR_BUF_SLOP_SEL_MASK)
/*! @} */

/*! @name TTMC -  */
/*! @{ */
#define TMU_TTMC_TMUX_MASK                       (0x7U)
#define TMU_TTMC_TMUX_SHIFT                      (0U)
#define TMU_TTMC_TMUX(x)                         (((uint32_t)(((uint32_t)(x)) << TMU_TTMC_TMUX_SHIFT)) & TMU_TTMC_TMUX_MASK)
/*! @} */

/*! @name TCALIV -  */
/*! @{ */
#define TMU_TCALIV_SNSR25C_MASK                  (0xFFU)
#define TMU_TCALIV_SNSR25C_SHIFT                 (0U)
#define TMU_TCALIV_SNSR25C(x)                    (((uint32_t)(((uint32_t)(x)) << TMU_TCALIV_SNSR25C_SHIFT)) & TMU_TCALIV_SNSR25C_MASK)
#define TMU_TCALIV_SNSR85C_MASK                  (0xFF0000U)
#define TMU_TCALIV_SNSR85C_SHIFT                 (16U)
#define TMU_TCALIV_SNSR85C(x)                    (((uint32_t)(((uint32_t)(x)) << TMU_TCALIV_SNSR85C_SHIFT)) & TMU_TCALIV_SNSR85C_MASK)
#define TMU_TCALIV_EN_MASK                       (0x80000000U)
#define TMU_TCALIV_EN_SHIFT                      (31U)
/*! @} */


/*!
 * @}
 */ /* end of group TMU_Register_Masks */


/* TMU - Peripheral instance base addresses */
/** Peripheral TMU base pointer */
#define TMU_BASE_PTR                             ((TMU_MemMapPtr)0x30260000u)
/** Array initializer of TMU peripheral base pointers */
#define TMU_BASE_PTRS                            { TMU_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- TMU - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup TMU_Register_Accessor_Macros TMU - Register accessor macros
 * @{
 */


/* TMU - Register instance definitions */
/* TMU */
#define TMU_TER                                  TMU_TER_REG(TMU_BASE_PTR)
#define TMU_TSR                                  TMU_TSR_REG(TMU_BASE_PTR)
#define TMU_TIER                                 TMU_TIER_REG(TMU_BASE_PTR)
#define TMU_TIDR                                 TMU_TIDR_REG(TMU_BASE_PTR)
#define TMU_TMHTITR                              TMU_TMHTITR_REG(TMU_BASE_PTR)
#define TMU_TMHTATR                              TMU_TMHTATR_REG(TMU_BASE_PTR)
#define TMU_TMHTACTR                             TMU_TMHTACTR_REG(TMU_BASE_PTR)
#define TMU_TSCR                                 TMU_TSCR_REG(TMU_BASE_PTR)
#define TMU_TRITSR                               TMU_TRITSR_REG(TMU_BASE_PTR)
#define TMU_TRATSR                               TMU_TRATSR_REG(TMU_BASE_PTR)
#define TMU_TASR                                 TMU_TASR_REG(TMU_BASE_PTR)
#define TMU_TTMC                                 TMU_TTMC_REG(TMU_BASE_PTR)
#define TMU_TCALIV                               TMU_TCALIV_REG(TMU_BASE_PTR)

/*!
 * @}
 */ /* end of group TMU_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group TMU_Peripheral */


/* ----------------------------------------------------------------------------
   -- UART
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Peripheral UART
 * @{
 */

/** UART - Peripheral register structure */
typedef struct UART_MemMap {
  uint32_t URXD;                                   /**< UART Receiver Register, offset: 0x0 */
  uint8_t RESERVED_0[60];
  uint32_t UTXD;                                   /**< UART Transmitter Register, offset: 0x40 */
  uint8_t RESERVED_1[60];
  uint32_t UCR1;                                   /**< UART Control Register 1, offset: 0x80 */
  uint32_t UCR2;                                   /**< UART Control Register 2, offset: 0x84 */
  uint32_t UCR3;                                   /**< UART Control Register 3, offset: 0x88 */
  uint32_t UCR4;                                   /**< UART Control Register 4, offset: 0x8C */
  uint32_t UFCR;                                   /**< UART FIFO Control Register, offset: 0x90 */
  uint32_t USR1;                                   /**< UART Status Register 1, offset: 0x94 */
  uint32_t USR2;                                   /**< UART Status Register 2, offset: 0x98 */
  uint32_t UESC;                                   /**< UART Escape Character Register, offset: 0x9C */
  uint32_t UTIM;                                   /**< UART Escape Timer Register, offset: 0xA0 */
  uint32_t UBIR;                                   /**< UART BRM Incremental Register, offset: 0xA4 */
  uint32_t UBMR;                                   /**< UART BRM Modulator Register, offset: 0xA8 */
  uint32_t UBRC;                                   /**< UART Baud Rate Count Register, offset: 0xAC */
  uint32_t ONEMS;                                  /**< UART One Millisecond Register, offset: 0xB0 */
  uint32_t UTS;                                    /**< UART Test Register, offset: 0xB4 */
  uint32_t UMCR;                                   /**< UART RS-485 Mode Control Register, offset: 0xB8 */
} volatile *UART_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- UART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */


/* UART - Register accessors */
#define UART_URXD_REG(base)                      ((base)->URXD)
#define UART_UTXD_REG(base)                      ((base)->UTXD)
#define UART_UCR1_REG(base)                      ((base)->UCR1)
#define UART_UCR2_REG(base)                      ((base)->UCR2)
#define UART_UCR3_REG(base)                      ((base)->UCR3)
#define UART_UCR4_REG(base)                      ((base)->UCR4)
#define UART_UFCR_REG(base)                      ((base)->UFCR)
#define UART_USR1_REG(base)                      ((base)->USR1)
#define UART_USR2_REG(base)                      ((base)->USR2)
#define UART_UESC_REG(base)                      ((base)->UESC)
#define UART_UTIM_REG(base)                      ((base)->UTIM)
#define UART_UBIR_REG(base)                      ((base)->UBIR)
#define UART_UBMR_REG(base)                      ((base)->UBMR)
#define UART_UBRC_REG(base)                      ((base)->UBRC)
#define UART_ONEMS_REG(base)                     ((base)->ONEMS)
#define UART_UTS_REG(base)                       ((base)->UTS)
#define UART_UMCR_REG(base)                      ((base)->UMCR)

/*!
 * @}
 */ /* end of group UART_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- UART Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Masks UART Register Masks
 * @{
 */

/*! @name URXD - UART Receiver Register */
/*! @{ */
#define UART_URXD_RX_DATA_MASK                   (0xFFU)
#define UART_URXD_RX_DATA_SHIFT                  (0U)
#define UART_URXD_RX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_URXD_RX_DATA_SHIFT)) & UART_URXD_RX_DATA_MASK)
#define UART_URXD_PRERR_MASK                     (0x400U)
#define UART_URXD_PRERR_SHIFT                    (10U)
#define UART_URXD_BRK_MASK                       (0x800U)
#define UART_URXD_BRK_SHIFT                      (11U)
#define UART_URXD_FRMERR_MASK                    (0x1000U)
#define UART_URXD_FRMERR_SHIFT                   (12U)
#define UART_URXD_OVRRUN_MASK                    (0x2000U)
#define UART_URXD_OVRRUN_SHIFT                   (13U)
#define UART_URXD_ERR_MASK                       (0x4000U)
#define UART_URXD_ERR_SHIFT                      (14U)
#define UART_URXD_CHARRDY_MASK                   (0x8000U)
#define UART_URXD_CHARRDY_SHIFT                  (15U)
/*! @} */

/*! @name UTXD - UART Transmitter Register */
/*! @{ */
#define UART_UTXD_TX_DATA_MASK                   (0xFFU)
#define UART_UTXD_TX_DATA_SHIFT                  (0U)
#define UART_UTXD_TX_DATA(x)                     (((uint32_t)(((uint32_t)(x)) << UART_UTXD_TX_DATA_SHIFT)) & UART_UTXD_TX_DATA_MASK)
/*! @} */

/*! @name UCR1 - UART Control Register 1 */
/*! @{ */
#define UART_UCR1_UARTEN_MASK                    (0x1U)
#define UART_UCR1_UARTEN_SHIFT                   (0U)
#define UART_UCR1_DOZE_MASK                      (0x2U)
#define UART_UCR1_DOZE_SHIFT                     (1U)
#define UART_UCR1_ATDMAEN_MASK                   (0x4U)
#define UART_UCR1_ATDMAEN_SHIFT                  (2U)
#define UART_UCR1_TXDMAEN_MASK                   (0x8U)
#define UART_UCR1_TXDMAEN_SHIFT                  (3U)
#define UART_UCR1_SNDBRK_MASK                    (0x10U)
#define UART_UCR1_SNDBRK_SHIFT                   (4U)
#define UART_UCR1_RTSDEN_MASK                    (0x20U)
#define UART_UCR1_RTSDEN_SHIFT                   (5U)
#define UART_UCR1_TXMPTYEN_MASK                  (0x40U)
#define UART_UCR1_TXMPTYEN_SHIFT                 (6U)
#define UART_UCR1_IREN_MASK                      (0x80U)
#define UART_UCR1_IREN_SHIFT                     (7U)
#define UART_UCR1_RXDMAEN_MASK                   (0x100U)
#define UART_UCR1_RXDMAEN_SHIFT                  (8U)
#define UART_UCR1_RRDYEN_MASK                    (0x200U)
#define UART_UCR1_RRDYEN_SHIFT                   (9U)
#define UART_UCR1_ICD_MASK                       (0xC00U)
#define UART_UCR1_ICD_SHIFT                      (10U)
/*! ICD
 *  0b00..Idle for more than 4 frames
 *  0b01..Idle for more than 8 frames
 *  0b10..Idle for more than 16 frames
 *  0b11..Idle for more than 32 frames
 */
#define UART_UCR1_ICD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UCR1_ICD_SHIFT)) & UART_UCR1_ICD_MASK)
#define UART_UCR1_IDEN_MASK                      (0x1000U)
#define UART_UCR1_IDEN_SHIFT                     (12U)
#define UART_UCR1_TRDYEN_MASK                    (0x2000U)
#define UART_UCR1_TRDYEN_SHIFT                   (13U)
#define UART_UCR1_ADBR_MASK                      (0x4000U)
#define UART_UCR1_ADBR_SHIFT                     (14U)
#define UART_UCR1_ADEN_MASK                      (0x8000U)
#define UART_UCR1_ADEN_SHIFT                     (15U)
/*! @} */

/*! @name UCR2 - UART Control Register 2 */
/*! @{ */
#define UART_UCR2_SRST_MASK                      (0x1U)
#define UART_UCR2_SRST_SHIFT                     (0U)
#define UART_UCR2_RXEN_MASK                      (0x2U)
#define UART_UCR2_RXEN_SHIFT                     (1U)
#define UART_UCR2_TXEN_MASK                      (0x4U)
#define UART_UCR2_TXEN_SHIFT                     (2U)
#define UART_UCR2_ATEN_MASK                      (0x8U)
#define UART_UCR2_ATEN_SHIFT                     (3U)
#define UART_UCR2_RTSEN_MASK                     (0x10U)
#define UART_UCR2_RTSEN_SHIFT                    (4U)
#define UART_UCR2_WS_MASK                        (0x20U)
#define UART_UCR2_WS_SHIFT                       (5U)
#define UART_UCR2_STPB_MASK                      (0x40U)
#define UART_UCR2_STPB_SHIFT                     (6U)
#define UART_UCR2_PROE_MASK                      (0x80U)
#define UART_UCR2_PROE_SHIFT                     (7U)
#define UART_UCR2_PREN_MASK                      (0x100U)
#define UART_UCR2_PREN_SHIFT                     (8U)
#define UART_UCR2_RTEC_MASK                      (0x600U)
#define UART_UCR2_RTEC_SHIFT                     (9U)
/*! RTEC
 *  0b00..Trigger interrupt on a rising edge
 *  0b01..Trigger interrupt on a falling edge
 *  0b1x..Trigger interrupt on any edge
 */
#define UART_UCR2_RTEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR2_RTEC_SHIFT)) & UART_UCR2_RTEC_MASK)
#define UART_UCR2_ESCEN_MASK                     (0x800U)
#define UART_UCR2_ESCEN_SHIFT                    (11U)
#define UART_UCR2_CTS_MASK                       (0x1000U)
#define UART_UCR2_CTS_SHIFT                      (12U)
#define UART_UCR2_CTSC_MASK                      (0x2000U)
#define UART_UCR2_CTSC_SHIFT                     (13U)
#define UART_UCR2_IRTS_MASK                      (0x4000U)
#define UART_UCR2_IRTS_SHIFT                     (14U)
#define UART_UCR2_ESCI_MASK                      (0x8000U)
#define UART_UCR2_ESCI_SHIFT                     (15U)
/*! @} */

/*! @name UCR3 - UART Control Register 3 */
/*! @{ */
#define UART_UCR3_ACIEN_MASK                     (0x1U)
#define UART_UCR3_ACIEN_SHIFT                    (0U)
#define UART_UCR3_INVT_MASK                      (0x2U)
#define UART_UCR3_INVT_SHIFT                     (1U)
#define UART_UCR3_RXDMUXSEL_MASK                 (0x4U)
#define UART_UCR3_RXDMUXSEL_SHIFT                (2U)
#define UART_UCR3_DTRDEN_MASK                    (0x8U)
#define UART_UCR3_DTRDEN_SHIFT                   (3U)
#define UART_UCR3_AWAKEN_MASK                    (0x10U)
#define UART_UCR3_AWAKEN_SHIFT                   (4U)
#define UART_UCR3_AIRINTEN_MASK                  (0x20U)
#define UART_UCR3_AIRINTEN_SHIFT                 (5U)
#define UART_UCR3_RXDSEN_MASK                    (0x40U)
#define UART_UCR3_RXDSEN_SHIFT                   (6U)
#define UART_UCR3_ADNIMP_MASK                    (0x80U)
#define UART_UCR3_ADNIMP_SHIFT                   (7U)
#define UART_UCR3_RI_MASK                        (0x100U)
#define UART_UCR3_RI_SHIFT                       (8U)
#define UART_UCR3_DCD_MASK                       (0x200U)
#define UART_UCR3_DCD_SHIFT                      (9U)
#define UART_UCR3_DSR_MASK                       (0x400U)
#define UART_UCR3_DSR_SHIFT                      (10U)
#define UART_UCR3_FRAERREN_MASK                  (0x800U)
#define UART_UCR3_FRAERREN_SHIFT                 (11U)
#define UART_UCR3_PARERREN_MASK                  (0x1000U)
#define UART_UCR3_PARERREN_SHIFT                 (12U)
#define UART_UCR3_DTREN_MASK                     (0x2000U)
#define UART_UCR3_DTREN_SHIFT                    (13U)
#define UART_UCR3_DPEC_MASK                      (0xC000U)
#define UART_UCR3_DPEC_SHIFT                     (14U)
#define UART_UCR3_DPEC(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UCR3_DPEC_SHIFT)) & UART_UCR3_DPEC_MASK)
/*! @} */

/*! @name UCR4 - UART Control Register 4 */
/*! @{ */
#define UART_UCR4_DREN_MASK                      (0x1U)
#define UART_UCR4_DREN_SHIFT                     (0U)
#define UART_UCR4_OREN_MASK                      (0x2U)
#define UART_UCR4_OREN_SHIFT                     (1U)
#define UART_UCR4_BKEN_MASK                      (0x4U)
#define UART_UCR4_BKEN_SHIFT                     (2U)
#define UART_UCR4_TCEN_MASK                      (0x8U)
#define UART_UCR4_TCEN_SHIFT                     (3U)
#define UART_UCR4_LPBYP_MASK                     (0x10U)
#define UART_UCR4_LPBYP_SHIFT                    (4U)
#define UART_UCR4_IRSC_MASK                      (0x20U)
#define UART_UCR4_IRSC_SHIFT                     (5U)
#define UART_UCR4_IDDMAEN_MASK                   (0x40U)
#define UART_UCR4_IDDMAEN_SHIFT                  (6U)
#define UART_UCR4_WKEN_MASK                      (0x80U)
#define UART_UCR4_WKEN_SHIFT                     (7U)
#define UART_UCR4_ENIRI_MASK                     (0x100U)
#define UART_UCR4_ENIRI_SHIFT                    (8U)
#define UART_UCR4_INVR_MASK                      (0x200U)
#define UART_UCR4_INVR_SHIFT                     (9U)
#define UART_UCR4_CTSTL_MASK                     (0xFC00U)
#define UART_UCR4_CTSTL_SHIFT                    (10U)
/*! CTSTL
 *  0b000000..0 characters received
 *  0b000001..1 characters in the RxFIFO
 *  0b100000..32 characters in the RxFIFO (maximum)
 */
#define UART_UCR4_CTSTL(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UCR4_CTSTL_SHIFT)) & UART_UCR4_CTSTL_MASK)
/*! @} */

/*! @name UFCR - UART FIFO Control Register */
/*! @{ */
#define UART_UFCR_RXTL_MASK                      (0x3FU)
#define UART_UFCR_RXTL_SHIFT                     (0U)
/*! RXTL
 *  0b000000..0 characters received
 *  0b000001..RxFIFO has 1 character
 *  0b011111..RxFIFO has 31 characters
 *  0b100000..RxFIFO has 32 characters (maximum)
 */
#define UART_UFCR_RXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RXTL_SHIFT)) & UART_UFCR_RXTL_MASK)
#define UART_UFCR_DCEDTE_MASK                    (0x40U)
#define UART_UFCR_DCEDTE_SHIFT                   (6U)
#define UART_UFCR_RFDIV_MASK                     (0x380U)
#define UART_UFCR_RFDIV_SHIFT                    (7U)
/*! RFDIV
 *  0b000..Divide input clock by 6
 *  0b001..Divide input clock by 5
 *  0b010..Divide input clock by 4
 *  0b011..Divide input clock by 3
 *  0b100..Divide input clock by 2
 *  0b101..Divide input clock by 1
 *  0b110..Divide input clock by 7
 *  0b111..Reserved
 */
#define UART_UFCR_RFDIV(x)                       (((uint32_t)(((uint32_t)(x)) << UART_UFCR_RFDIV_SHIFT)) & UART_UFCR_RFDIV_MASK)
#define UART_UFCR_TXTL_MASK                      (0xFC00U)
#define UART_UFCR_TXTL_SHIFT                     (10U)
/*! TXTL
 *  0b000000..Reserved
 *  0b000001..Reserved
 *  0b000010..TxFIFO has 2 or fewer characters
 *  0b011111..TxFIFO has 31 or fewer characters
 *  0b100000..TxFIFO has 32 characters (maximum)
 */
#define UART_UFCR_TXTL(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UFCR_TXTL_SHIFT)) & UART_UFCR_TXTL_MASK)
/*! @} */

/*! @name USR1 - UART Status Register 1 */
/*! @{ */
#define UART_USR1_SAD_MASK                       (0x8U)
#define UART_USR1_SAD_SHIFT                      (3U)
#define UART_USR1_AWAKE_MASK                     (0x10U)
#define UART_USR1_AWAKE_SHIFT                    (4U)
#define UART_USR1_AIRINT_MASK                    (0x20U)
#define UART_USR1_AIRINT_SHIFT                   (5U)
#define UART_USR1_RXDS_MASK                      (0x40U)
#define UART_USR1_RXDS_SHIFT                     (6U)
#define UART_USR1_DTRD_MASK                      (0x80U)
#define UART_USR1_DTRD_SHIFT                     (7U)
#define UART_USR1_AGTIM_MASK                     (0x100U)
#define UART_USR1_AGTIM_SHIFT                    (8U)
#define UART_USR1_RRDY_MASK                      (0x200U)
#define UART_USR1_RRDY_SHIFT                     (9U)
#define UART_USR1_FRAMERR_MASK                   (0x400U)
#define UART_USR1_FRAMERR_SHIFT                  (10U)
#define UART_USR1_ESCF_MASK                      (0x800U)
#define UART_USR1_ESCF_SHIFT                     (11U)
#define UART_USR1_RTSD_MASK                      (0x1000U)
#define UART_USR1_RTSD_SHIFT                     (12U)
#define UART_USR1_TRDY_MASK                      (0x2000U)
#define UART_USR1_TRDY_SHIFT                     (13U)
#define UART_USR1_RTSS_MASK                      (0x4000U)
#define UART_USR1_RTSS_SHIFT                     (14U)
#define UART_USR1_PARITYERR_MASK                 (0x8000U)
#define UART_USR1_PARITYERR_SHIFT                (15U)
/*! @} */

/*! @name USR2 - UART Status Register 2 */
/*! @{ */
#define UART_USR2_RDR_MASK                       (0x1U)
#define UART_USR2_RDR_SHIFT                      (0U)
#define UART_USR2_ORE_MASK                       (0x2U)
#define UART_USR2_ORE_SHIFT                      (1U)
#define UART_USR2_BRCD_MASK                      (0x4U)
#define UART_USR2_BRCD_SHIFT                     (2U)
#define UART_USR2_TXDC_MASK                      (0x8U)
#define UART_USR2_TXDC_SHIFT                     (3U)
#define UART_USR2_RTSF_MASK                      (0x10U)
#define UART_USR2_RTSF_SHIFT                     (4U)
#define UART_USR2_DCDIN_MASK                     (0x20U)
#define UART_USR2_DCDIN_SHIFT                    (5U)
#define UART_USR2_DCDDELT_MASK                   (0x40U)
#define UART_USR2_DCDDELT_SHIFT                  (6U)
#define UART_USR2_WAKE_MASK                      (0x80U)
#define UART_USR2_WAKE_SHIFT                     (7U)
#define UART_USR2_IRINT_MASK                     (0x100U)
#define UART_USR2_IRINT_SHIFT                    (8U)
#define UART_USR2_RIIN_MASK                      (0x200U)
#define UART_USR2_RIIN_SHIFT                     (9U)
#define UART_USR2_RIDELT_MASK                    (0x400U)
#define UART_USR2_RIDELT_SHIFT                   (10U)
#define UART_USR2_ACST_MASK                      (0x800U)
#define UART_USR2_ACST_SHIFT                     (11U)
#define UART_USR2_IDLE_MASK                      (0x1000U)
#define UART_USR2_IDLE_SHIFT                     (12U)
#define UART_USR2_DTRF_MASK                      (0x2000U)
#define UART_USR2_DTRF_SHIFT                     (13U)
#define UART_USR2_TXFE_MASK                      (0x4000U)
#define UART_USR2_TXFE_SHIFT                     (14U)
#define UART_USR2_ADET_MASK                      (0x8000U)
#define UART_USR2_ADET_SHIFT                     (15U)
/*! @} */

/*! @name UESC - UART Escape Character Register */
/*! @{ */
#define UART_UESC_ESC_CHAR_MASK                  (0xFFU)
#define UART_UESC_ESC_CHAR_SHIFT                 (0U)
#define UART_UESC_ESC_CHAR(x)                    (((uint32_t)(((uint32_t)(x)) << UART_UESC_ESC_CHAR_SHIFT)) & UART_UESC_ESC_CHAR_MASK)
/*! @} */

/*! @name UTIM - UART Escape Timer Register */
/*! @{ */
#define UART_UTIM_TIM_MASK                       (0xFFFU)
#define UART_UTIM_TIM_SHIFT                      (0U)
#define UART_UTIM_TIM(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UTIM_TIM_SHIFT)) & UART_UTIM_TIM_MASK)
/*! @} */

/*! @name UBIR - UART BRM Incremental Register */
/*! @{ */
#define UART_UBIR_INC_MASK                       (0xFFFFU)
#define UART_UBIR_INC_SHIFT                      (0U)
#define UART_UBIR_INC(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBIR_INC_SHIFT)) & UART_UBIR_INC_MASK)
/*! @} */

/*! @name UBMR - UART BRM Modulator Register */
/*! @{ */
#define UART_UBMR_MOD_MASK                       (0xFFFFU)
#define UART_UBMR_MOD_SHIFT                      (0U)
#define UART_UBMR_MOD(x)                         (((uint32_t)(((uint32_t)(x)) << UART_UBMR_MOD_SHIFT)) & UART_UBMR_MOD_MASK)
/*! @} */

/*! @name UBRC - UART Baud Rate Count Register */
/*! @{ */
#define UART_UBRC_BCNT_MASK                      (0xFFFFU)
#define UART_UBRC_BCNT_SHIFT                     (0U)
#define UART_UBRC_BCNT(x)                        (((uint32_t)(((uint32_t)(x)) << UART_UBRC_BCNT_SHIFT)) & UART_UBRC_BCNT_MASK)
/*! @} */

/*! @name ONEMS - UART One Millisecond Register */
/*! @{ */
#define UART_ONEMS_ONEMS_MASK                    (0xFFFFFFU)
#define UART_ONEMS_ONEMS_SHIFT                   (0U)
#define UART_ONEMS_ONEMS(x)                      (((uint32_t)(((uint32_t)(x)) << UART_ONEMS_ONEMS_SHIFT)) & UART_ONEMS_ONEMS_MASK)
/*! @} */

/*! @name UTS - UART Test Register */
/*! @{ */
#define UART_UTS_SOFTRST_MASK                    (0x1U)
#define UART_UTS_SOFTRST_SHIFT                   (0U)
#define UART_UTS_RXFULL_MASK                     (0x8U)
#define UART_UTS_RXFULL_SHIFT                    (3U)
#define UART_UTS_TXFULL_MASK                     (0x10U)
#define UART_UTS_TXFULL_SHIFT                    (4U)
#define UART_UTS_RXEMPTY_MASK                    (0x20U)
#define UART_UTS_RXEMPTY_SHIFT                   (5U)
#define UART_UTS_TXEMPTY_MASK                    (0x40U)
#define UART_UTS_TXEMPTY_SHIFT                   (6U)
#define UART_UTS_RXDBG_MASK                      (0x200U)
#define UART_UTS_RXDBG_SHIFT                     (9U)
#define UART_UTS_LOOPIR_MASK                     (0x400U)
#define UART_UTS_LOOPIR_SHIFT                    (10U)
#define UART_UTS_DBGEN_MASK                      (0x800U)
#define UART_UTS_DBGEN_SHIFT                     (11U)
#define UART_UTS_LOOP_MASK                       (0x1000U)
#define UART_UTS_LOOP_SHIFT                      (12U)
#define UART_UTS_FRCPERR_MASK                    (0x2000U)
#define UART_UTS_FRCPERR_SHIFT                   (13U)
/*! @} */

/*! @name UMCR - UART RS-485 Mode Control Register */
/*! @{ */
#define UART_UMCR_MDEN_MASK                      (0x1U)
#define UART_UMCR_MDEN_SHIFT                     (0U)
#define UART_UMCR_SLAM_MASK                      (0x2U)
#define UART_UMCR_SLAM_SHIFT                     (1U)
#define UART_UMCR_TXB8_MASK                      (0x4U)
#define UART_UMCR_TXB8_SHIFT                     (2U)
#define UART_UMCR_SADEN_MASK                     (0x8U)
#define UART_UMCR_SADEN_SHIFT                    (3U)
#define UART_UMCR_SLADDR_MASK                    (0xFF00U)
#define UART_UMCR_SLADDR_SHIFT                   (8U)
#define UART_UMCR_SLADDR(x)                      (((uint32_t)(((uint32_t)(x)) << UART_UMCR_SLADDR_SHIFT)) & UART_UMCR_SLADDR_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group UART_Register_Masks */


/* UART - Peripheral instance base addresses */
/** Peripheral UART1 base pointer */
#define UART1_BASE_PTR                           ((UART_MemMapPtr)0x30860000u)
/** Peripheral UART2 base pointer */
#define UART2_BASE_PTR                           ((UART_MemMapPtr)0x30890000u)
/** Peripheral UART3 base pointer */
#define UART3_BASE_PTR                           ((UART_MemMapPtr)0x30880000u)
/** Peripheral UART4 base pointer */
#define UART4_BASE_PTR                           ((UART_MemMapPtr)0x30A60000u)
/** Array initializer of UART peripheral base pointers */
#define UART_BASE_PTRS                           { UART1_BASE_PTR, UART2_BASE_PTR, UART3_BASE_PTR, UART4_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- UART - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup UART_Register_Accessor_Macros UART - Register accessor macros
 * @{
 */


/* UART - Register instance definitions */
/* UART1 */
#define UART1_URXD                               UART_URXD_REG(UART1_BASE_PTR)
#define UART1_UTXD                               UART_UTXD_REG(UART1_BASE_PTR)
#define UART1_UCR1                               UART_UCR1_REG(UART1_BASE_PTR)
#define UART1_UCR2                               UART_UCR2_REG(UART1_BASE_PTR)
#define UART1_UCR3                               UART_UCR3_REG(UART1_BASE_PTR)
#define UART1_UCR4                               UART_UCR4_REG(UART1_BASE_PTR)
#define UART1_UFCR                               UART_UFCR_REG(UART1_BASE_PTR)
#define UART1_USR1                               UART_USR1_REG(UART1_BASE_PTR)
#define UART1_USR2                               UART_USR2_REG(UART1_BASE_PTR)
#define UART1_UESC                               UART_UESC_REG(UART1_BASE_PTR)
#define UART1_UTIM                               UART_UTIM_REG(UART1_BASE_PTR)
#define UART1_UBIR                               UART_UBIR_REG(UART1_BASE_PTR)
#define UART1_UBMR                               UART_UBMR_REG(UART1_BASE_PTR)
#define UART1_UBRC                               UART_UBRC_REG(UART1_BASE_PTR)
#define UART1_ONEMS                              UART_ONEMS_REG(UART1_BASE_PTR)
#define UART1_UTS                                UART_UTS_REG(UART1_BASE_PTR)
#define UART1_UMCR                               UART_UMCR_REG(UART1_BASE_PTR)
/* UART2 */
#define UART2_URXD                               UART_URXD_REG(UART2_BASE_PTR)
#define UART2_UTXD                               UART_UTXD_REG(UART2_BASE_PTR)
#define UART2_UCR1                               UART_UCR1_REG(UART2_BASE_PTR)
#define UART2_UCR2                               UART_UCR2_REG(UART2_BASE_PTR)
#define UART2_UCR3                               UART_UCR3_REG(UART2_BASE_PTR)
#define UART2_UCR4                               UART_UCR4_REG(UART2_BASE_PTR)
#define UART2_UFCR                               UART_UFCR_REG(UART2_BASE_PTR)
#define UART2_USR1                               UART_USR1_REG(UART2_BASE_PTR)
#define UART2_USR2                               UART_USR2_REG(UART2_BASE_PTR)
#define UART2_UESC                               UART_UESC_REG(UART2_BASE_PTR)
#define UART2_UTIM                               UART_UTIM_REG(UART2_BASE_PTR)
#define UART2_UBIR                               UART_UBIR_REG(UART2_BASE_PTR)
#define UART2_UBMR                               UART_UBMR_REG(UART2_BASE_PTR)
#define UART2_UBRC                               UART_UBRC_REG(UART2_BASE_PTR)
#define UART2_ONEMS                              UART_ONEMS_REG(UART2_BASE_PTR)
#define UART2_UTS                                UART_UTS_REG(UART2_BASE_PTR)
#define UART2_UMCR                               UART_UMCR_REG(UART2_BASE_PTR)
/* UART3 */
#define UART3_URXD                               UART_URXD_REG(UART3_BASE_PTR)
#define UART3_UTXD                               UART_UTXD_REG(UART3_BASE_PTR)
#define UART3_UCR1                               UART_UCR1_REG(UART3_BASE_PTR)
#define UART3_UCR2                               UART_UCR2_REG(UART3_BASE_PTR)
#define UART3_UCR3                               UART_UCR3_REG(UART3_BASE_PTR)
#define UART3_UCR4                               UART_UCR4_REG(UART3_BASE_PTR)
#define UART3_UFCR                               UART_UFCR_REG(UART3_BASE_PTR)
#define UART3_USR1                               UART_USR1_REG(UART3_BASE_PTR)
#define UART3_USR2                               UART_USR2_REG(UART3_BASE_PTR)
#define UART3_UESC                               UART_UESC_REG(UART3_BASE_PTR)
#define UART3_UTIM                               UART_UTIM_REG(UART3_BASE_PTR)
#define UART3_UBIR                               UART_UBIR_REG(UART3_BASE_PTR)
#define UART3_UBMR                               UART_UBMR_REG(UART3_BASE_PTR)
#define UART3_UBRC                               UART_UBRC_REG(UART3_BASE_PTR)
#define UART3_ONEMS                              UART_ONEMS_REG(UART3_BASE_PTR)
#define UART3_UTS                                UART_UTS_REG(UART3_BASE_PTR)
#define UART3_UMCR                               UART_UMCR_REG(UART3_BASE_PTR)
/* UART4 */
#define UART4_URXD                               UART_URXD_REG(UART4_BASE_PTR)
#define UART4_UTXD                               UART_UTXD_REG(UART4_BASE_PTR)
#define UART4_UCR1                               UART_UCR1_REG(UART4_BASE_PTR)
#define UART4_UCR2                               UART_UCR2_REG(UART4_BASE_PTR)
#define UART4_UCR3                               UART_UCR3_REG(UART4_BASE_PTR)
#define UART4_UCR4                               UART_UCR4_REG(UART4_BASE_PTR)
#define UART4_UFCR                               UART_UFCR_REG(UART4_BASE_PTR)
#define UART4_USR1                               UART_USR1_REG(UART4_BASE_PTR)
#define UART4_USR2                               UART_USR2_REG(UART4_BASE_PTR)
#define UART4_UESC                               UART_UESC_REG(UART4_BASE_PTR)
#define UART4_UTIM                               UART_UTIM_REG(UART4_BASE_PTR)
#define UART4_UBIR                               UART_UBIR_REG(UART4_BASE_PTR)
#define UART4_UBMR                               UART_UBMR_REG(UART4_BASE_PTR)
#define UART4_UBRC                               UART_UBRC_REG(UART4_BASE_PTR)
#define UART4_ONEMS                              UART_ONEMS_REG(UART4_BASE_PTR)
#define UART4_UTS                                UART_UTS_REG(UART4_BASE_PTR)
#define UART4_UMCR                               UART_UMCR_REG(UART4_BASE_PTR)

/*!
 * @}
 */ /* end of group UART_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group UART_Peripheral */


/* ----------------------------------------------------------------------------
   -- USB
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Peripheral USB
 * @{
 */

/** USB - Peripheral register structure */
typedef struct USB_MemMap {
  uint32_t ID;                                     /**< Identification register, offset: 0x0 */
  uint32_t HWGENERAL;                              /**< Hardware General, offset: 0x4 */
  uint32_t HWHOST;                                 /**< Host Hardware Parameters, offset: 0x8 */
  uint32_t HWDEVICE;                               /**< Device Hardware Parameters, offset: 0xC */
  uint32_t HWTXBUF;                                /**< TX Buffer Hardware Parameters, offset: 0x10 */
  uint32_t HWRXBUF;                                /**< RX Buffer Hardware Parameters, offset: 0x14 */
  uint8_t RESERVED_0[104];
  uint32_t GPTIMER0LD;                             /**< General Purpose Timer #0 Load, offset: 0x80 */
  uint32_t GPTIMER0CTRL;                           /**< General Purpose Timer #0 Controller, offset: 0x84 */
  uint32_t GPTIMER1LD;                             /**< General Purpose Timer #1 Load, offset: 0x88 */
  uint32_t GPTIMER1CTRL;                           /**< General Purpose Timer #1 Controller, offset: 0x8C */
  uint32_t SBUSCFG;                                /**< System Bus Config, offset: 0x90 */
  uint8_t RESERVED_1[108];
  uint8_t CAPLENGTH;                               /**< Capability Registers Length, offset: 0x100 */
  uint8_t RESERVED_2[1];
  uint16_t HCIVERSION;                             /**< Host Controller Interface Version, offset: 0x102 */
  uint32_t HCSPARAMS;                              /**< Host Controller Structural Parameters, offset: 0x104 */
  uint32_t HCCPARAMS;                              /**< Host Controller Capability Parameters, offset: 0x108 */
  uint8_t RESERVED_3[20];
  uint16_t DCIVERSION;                             /**< Device Controller Interface Version, offset: 0x120 */
  uint8_t RESERVED_4[2];
  uint32_t DCCPARAMS;                              /**< Device Controller Capability Parameters, offset: 0x124 */
  uint8_t RESERVED_5[24];
  uint32_t USBCMD;                                 /**< USB Command Register, offset: 0x140 */
  uint32_t USBSTS;                                 /**< USB Status Register, offset: 0x144 */
  uint32_t USBINTR;                                /**< Interrupt Enable Register, offset: 0x148 */
  uint32_t FRINDEX;                                /**< USB Frame Index, offset: 0x14C */
  uint8_t RESERVED_6[4];
  union {                                          /* offset: 0x154 */
    uint32_t DEVICEADDR;                             /**< Device Address, offset: 0x154 */
    uint32_t PERIODICLISTBASE;                       /**< Frame List Base Address, offset: 0x154 */
  };
  union {                                          /* offset: 0x158 */
    uint32_t ASYNCLISTADDR;                          /**< Next Asynch. Address, offset: 0x158 */
    uint32_t ENDPTLISTADDR;                          /**< Endpoint List Address, offset: 0x158 */
  };
  uint8_t RESERVED_7[4];
  uint32_t BURSTSIZE;                              /**< Programmable Burst Size, offset: 0x160 */
  uint32_t TXFILLTUNING;                           /**< TX FIFO Fill Tuning, offset: 0x164 */
  uint8_t RESERVED_8[16];
  uint32_t ENDPTNAK;                               /**< Endpoint NAK, offset: 0x178 */
  uint32_t ENDPTNAKEN;                             /**< Endpoint NAK Enable, offset: 0x17C */
  uint32_t CONFIGFLAG;                             /**< Configure Flag Register, offset: 0x180 */
  uint32_t PORTSC1;                                /**< Port Status & Control, offset: 0x184 */
  uint8_t RESERVED_9[28];
  uint32_t OTGSC;                                  /**< On-The-Go Status & control, offset: 0x1A4 */
  uint32_t USBMODE;                                /**< USB Device Mode, offset: 0x1A8 */
  uint32_t ENDPTSETUPSTAT;                         /**< Endpoint Setup Status, offset: 0x1AC */
  uint32_t ENDPTPRIME;                             /**< Endpoint Prime, offset: 0x1B0 */
  uint32_t ENDPTFLUSH;                             /**< Endpoint Flush, offset: 0x1B4 */
  uint32_t ENDPTSTAT;                              /**< Endpoint Status, offset: 0x1B8 */
  uint32_t ENDPTCOMPLETE;                          /**< Endpoint Complete, offset: 0x1BC */
  uint32_t ENDPTCTRL[8];                           /**< Endpoint Control0..Endpoint Control 7, array offset: 0x1C0, array step: 0x4 */
} volatile *USB_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
 * @{
 */


/* USB - Register accessors */
#define USB_ID_REG(base)                         ((base)->ID)
#define USB_HWGENERAL_REG(base)                  ((base)->HWGENERAL)
#define USB_HWHOST_REG(base)                     ((base)->HWHOST)
#define USB_HWDEVICE_REG(base)                   ((base)->HWDEVICE)
#define USB_HWTXBUF_REG(base)                    ((base)->HWTXBUF)
#define USB_HWRXBUF_REG(base)                    ((base)->HWRXBUF)
#define USB_GPTIMER0LD_REG(base)                 ((base)->GPTIMER0LD)
#define USB_GPTIMER0CTRL_REG(base)               ((base)->GPTIMER0CTRL)
#define USB_GPTIMER1LD_REG(base)                 ((base)->GPTIMER1LD)
#define USB_GPTIMER1CTRL_REG(base)               ((base)->GPTIMER1CTRL)
#define USB_SBUSCFG_REG(base)                    ((base)->SBUSCFG)
#define USB_CAPLENGTH_REG(base)                  ((base)->CAPLENGTH)
#define USB_HCIVERSION_REG(base)                 ((base)->HCIVERSION)
#define USB_HCSPARAMS_REG(base)                  ((base)->HCSPARAMS)
#define USB_HCCPARAMS_REG(base)                  ((base)->HCCPARAMS)
#define USB_DCIVERSION_REG(base)                 ((base)->DCIVERSION)
#define USB_DCCPARAMS_REG(base)                  ((base)->DCCPARAMS)
#define USB_USBCMD_REG(base)                     ((base)->USBCMD)
#define USB_USBSTS_REG(base)                     ((base)->USBSTS)
#define USB_USBINTR_REG(base)                    ((base)->USBINTR)
#define USB_FRINDEX_REG(base)                    ((base)->FRINDEX)
#define USB_DEVICEADDR_REG(base)                 ((base)->DEVICEADDR)
#define USB_PERIODICLISTBASE_REG(base)           ((base)->PERIODICLISTBASE)
#define USB_ASYNCLISTADDR_REG(base)              ((base)->ASYNCLISTADDR)
#define USB_ENDPTLISTADDR_REG(base)              ((base)->ENDPTLISTADDR)
#define USB_BURSTSIZE_REG(base)                  ((base)->BURSTSIZE)
#define USB_TXFILLTUNING_REG(base)               ((base)->TXFILLTUNING)
#define USB_ENDPTNAK_REG(base)                   ((base)->ENDPTNAK)
#define USB_ENDPTNAKEN_REG(base)                 ((base)->ENDPTNAKEN)
#define USB_CONFIGFLAG_REG(base)                 ((base)->CONFIGFLAG)
#define USB_PORTSC1_REG(base)                    ((base)->PORTSC1)
#define USB_OTGSC_REG(base)                      ((base)->OTGSC)
#define USB_USBMODE_REG(base)                    ((base)->USBMODE)
#define USB_ENDPTSETUPSTAT_REG(base)             ((base)->ENDPTSETUPSTAT)
#define USB_ENDPTPRIME_REG(base)                 ((base)->ENDPTPRIME)
#define USB_ENDPTFLUSH_REG(base)                 ((base)->ENDPTFLUSH)
#define USB_ENDPTSTAT_REG(base)                  ((base)->ENDPTSTAT)
#define USB_ENDPTCOMPLETE_REG(base)              ((base)->ENDPTCOMPLETE)
#define USB_ENDPTCTRL_REG(base,index)            ((base)->ENDPTCTRL[index])

/*!
 * @}
 */ /* end of group USB_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USB Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Masks USB Register Masks
 * @{
 */

/*! @name ID - Identification register */
/*! @{ */
#define USB_ID_ID_MASK                           (0x3FU)
#define USB_ID_ID_SHIFT                          (0U)
#define USB_ID_ID(x)                             (((uint32_t)(((uint32_t)(x)) << USB_ID_ID_SHIFT)) & USB_ID_ID_MASK)
#define USB_ID_NID_MASK                          (0x3F00U)
#define USB_ID_NID_SHIFT                         (8U)
#define USB_ID_NID(x)                            (((uint32_t)(((uint32_t)(x)) << USB_ID_NID_SHIFT)) & USB_ID_NID_MASK)
#define USB_ID_REVISION_MASK                     (0xFF0000U)
#define USB_ID_REVISION_SHIFT                    (16U)
#define USB_ID_REVISION(x)                       (((uint32_t)(((uint32_t)(x)) << USB_ID_REVISION_SHIFT)) & USB_ID_REVISION_MASK)
/*! @} */

/*! @name HWGENERAL - Hardware General */
/*! @{ */
#define USB_HWGENERAL_PHYW_MASK                  (0x30U)
#define USB_HWGENERAL_PHYW_SHIFT                 (4U)
/*! PHYW
 *  0b11..Reset to 16 bit wide data bus Software programmable
 */
#define USB_HWGENERAL_PHYW(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_PHYW_SHIFT)) & USB_HWGENERAL_PHYW_MASK)
#define USB_HWGENERAL_PHYM_MASK                  (0x1C0U)
#define USB_HWGENERAL_PHYM_SHIFT                 (6U)
/*! PHYM
 *  0b000..UTMI/UMTI+
 *  0b001..ULPI DDR
 *  0b010..ULPI
 *  0b011..Serial Only
 *  0b100..Software programmable - reset to UTMI/UTMI+
 *  0b101..Software programmable - reset to ULPI DDR
 *  0b110..Software programmable - reset to ULPI
 *  0b111..Software programmable - reset to Serial
 */
#define USB_HWGENERAL_PHYM(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_PHYM_SHIFT)) & USB_HWGENERAL_PHYM_MASK)
#define USB_HWGENERAL_SM_MASK                    (0x600U)
#define USB_HWGENERAL_SM_SHIFT                   (9U)
/*! SM
 *  0b00..No Serial Engine, always use parallel signalling.
 *  0b01..Serial Engine present, always use serial signalling for FS/LS.
 *  0b10..Software programmable - Reset to use parallel signalling for FS/LS
 *  0b11..Software programmable - Reset to use serial signalling for FS/LS
 */
#define USB_HWGENERAL_SM(x)                      (((uint32_t)(((uint32_t)(x)) << USB_HWGENERAL_SM_SHIFT)) & USB_HWGENERAL_SM_MASK)
/*! @} */

/*! @name HWHOST - Host Hardware Parameters */
/*! @{ */
#define USB_HWHOST_HC_MASK                       (0x1U)
#define USB_HWHOST_HC_SHIFT                      (0U)
#define USB_HWHOST_NPORT_MASK                    (0xEU)
#define USB_HWHOST_NPORT_SHIFT                   (1U)
#define USB_HWHOST_NPORT(x)                      (((uint32_t)(((uint32_t)(x)) << USB_HWHOST_NPORT_SHIFT)) & USB_HWHOST_NPORT_MASK)
/*! @} */

/*! @name HWDEVICE - Device Hardware Parameters */
/*! @{ */
#define USB_HWDEVICE_DC_MASK                     (0x1U)
#define USB_HWDEVICE_DC_SHIFT                    (0U)
#define USB_HWDEVICE_DEVEP_MASK                  (0x3EU)
#define USB_HWDEVICE_DEVEP_SHIFT                 (1U)
#define USB_HWDEVICE_DEVEP(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HWDEVICE_DEVEP_SHIFT)) & USB_HWDEVICE_DEVEP_MASK)
/*! @} */

/*! @name HWTXBUF - TX Buffer Hardware Parameters */
/*! @{ */
#define USB_HWTXBUF_TXBURST_MASK                 (0xFFU)
#define USB_HWTXBUF_TXBURST_SHIFT                (0U)
#define USB_HWTXBUF_TXBURST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HWTXBUF_TXBURST_SHIFT)) & USB_HWTXBUF_TXBURST_MASK)
#define USB_HWTXBUF_TXCHANADD_MASK               (0xFF0000U)
#define USB_HWTXBUF_TXCHANADD_SHIFT              (16U)
#define USB_HWTXBUF_TXCHANADD(x)                 (((uint32_t)(((uint32_t)(x)) << USB_HWTXBUF_TXCHANADD_SHIFT)) & USB_HWTXBUF_TXCHANADD_MASK)
/*! @} */

/*! @name HWRXBUF - RX Buffer Hardware Parameters */
/*! @{ */
#define USB_HWRXBUF_RXBURST_MASK                 (0xFFU)
#define USB_HWRXBUF_RXBURST_SHIFT                (0U)
#define USB_HWRXBUF_RXBURST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HWRXBUF_RXBURST_SHIFT)) & USB_HWRXBUF_RXBURST_MASK)
#define USB_HWRXBUF_RXADD_MASK                   (0xFF00U)
#define USB_HWRXBUF_RXADD_SHIFT                  (8U)
#define USB_HWRXBUF_RXADD(x)                     (((uint32_t)(((uint32_t)(x)) << USB_HWRXBUF_RXADD_SHIFT)) & USB_HWRXBUF_RXADD_MASK)
/*! @} */

/*! @name GPTIMER0LD - General Purpose Timer #0 Load */
/*! @{ */
#define USB_GPTIMER0LD_GPTLD_MASK                (0xFFFFFFU)
#define USB_GPTIMER0LD_GPTLD_SHIFT               (0U)
#define USB_GPTIMER0LD_GPTLD(x)                  (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER0LD_GPTLD_SHIFT)) & USB_GPTIMER0LD_GPTLD_MASK)
/*! @} */

/*! @name GPTIMER0CTRL - General Purpose Timer #0 Controller */
/*! @{ */
#define USB_GPTIMER0CTRL_GPTCNT_MASK             (0xFFFFFFU)
#define USB_GPTIMER0CTRL_GPTCNT_SHIFT            (0U)
#define USB_GPTIMER0CTRL_GPTCNT(x)               (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER0CTRL_GPTCNT_SHIFT)) & USB_GPTIMER0CTRL_GPTCNT_MASK)
#define USB_GPTIMER0CTRL_GPTMODE_MASK            (0x1000000U)
#define USB_GPTIMER0CTRL_GPTMODE_SHIFT           (24U)
#define USB_GPTIMER0CTRL_GPTRST_MASK             (0x40000000U)
#define USB_GPTIMER0CTRL_GPTRST_SHIFT            (30U)
#define USB_GPTIMER0CTRL_GPTRUN_MASK             (0x80000000U)
#define USB_GPTIMER0CTRL_GPTRUN_SHIFT            (31U)
/*! @} */

/*! @name GPTIMER1LD - General Purpose Timer #1 Load */
/*! @{ */
#define USB_GPTIMER1LD_GPTLD_MASK                (0xFFFFFFU)
#define USB_GPTIMER1LD_GPTLD_SHIFT               (0U)
#define USB_GPTIMER1LD_GPTLD(x)                  (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER1LD_GPTLD_SHIFT)) & USB_GPTIMER1LD_GPTLD_MASK)
/*! @} */

/*! @name GPTIMER1CTRL - General Purpose Timer #1 Controller */
/*! @{ */
#define USB_GPTIMER1CTRL_GPTCNT_MASK             (0xFFFFFFU)
#define USB_GPTIMER1CTRL_GPTCNT_SHIFT            (0U)
#define USB_GPTIMER1CTRL_GPTCNT(x)               (((uint32_t)(((uint32_t)(x)) << USB_GPTIMER1CTRL_GPTCNT_SHIFT)) & USB_GPTIMER1CTRL_GPTCNT_MASK)
#define USB_GPTIMER1CTRL_GPTMODE_MASK            (0x1000000U)
#define USB_GPTIMER1CTRL_GPTMODE_SHIFT           (24U)
#define USB_GPTIMER1CTRL_GPTRST_MASK             (0x40000000U)
#define USB_GPTIMER1CTRL_GPTRST_SHIFT            (30U)
#define USB_GPTIMER1CTRL_GPTRUN_MASK             (0x80000000U)
#define USB_GPTIMER1CTRL_GPTRUN_SHIFT            (31U)
/*! @} */

/*! @name SBUSCFG - System Bus Config */
/*! @{ */
#define USB_SBUSCFG_AHBBRST_MASK                 (0x7U)
#define USB_SBUSCFG_AHBBRST_SHIFT                (0U)
/*! AHBBRST
 *  0b000..Incremental burst of unspecified length only
 *  0b001..INCR4 burst, then single transfer
 *  0b010..INCR8 burst, INCR4 burst, then single transfer
 *  0b011..INCR16 burst, INCR8 burst, INCR4 burst, then single transfer
 *  0b100..Reserved, don't use
 *  0b101..INCR4 burst, then incremental burst of unspecified length
 *  0b110..INCR8 burst, INCR4 burst, then incremental burst of unspecified length
 *  0b111..INCR16 burst, INCR8 burst, INCR4 burst, then incremental burst of unspecified length
 */
#define USB_SBUSCFG_AHBBRST(x)                   (((uint32_t)(((uint32_t)(x)) << USB_SBUSCFG_AHBBRST_SHIFT)) & USB_SBUSCFG_AHBBRST_MASK)
/*! @} */

/*! @name CAPLENGTH - Capability Registers Length */
/*! @{ */
#define USB_CAPLENGTH_CAPLENGTH_MASK             (0xFFU)
#define USB_CAPLENGTH_CAPLENGTH_SHIFT            (0U)
#define USB_CAPLENGTH_CAPLENGTH(x)               (((uint8_t)(((uint8_t)(x)) << USB_CAPLENGTH_CAPLENGTH_SHIFT)) & USB_CAPLENGTH_CAPLENGTH_MASK)
/*! @} */

/*! @name HCIVERSION - Host Controller Interface Version */
/*! @{ */
#define USB_HCIVERSION_HCIVERSION_MASK           (0xFFFFU)
#define USB_HCIVERSION_HCIVERSION_SHIFT          (0U)
#define USB_HCIVERSION_HCIVERSION(x)             (((uint16_t)(((uint16_t)(x)) << USB_HCIVERSION_HCIVERSION_SHIFT)) & USB_HCIVERSION_HCIVERSION_MASK)
/*! @} */

/*! @name HCSPARAMS - Host Controller Structural Parameters */
/*! @{ */
#define USB_HCSPARAMS_N_PORTS_MASK               (0xFU)
#define USB_HCSPARAMS_N_PORTS_SHIFT              (0U)
#define USB_HCSPARAMS_N_PORTS(x)                 (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PORTS_SHIFT)) & USB_HCSPARAMS_N_PORTS_MASK)
#define USB_HCSPARAMS_PPC_MASK                   (0x10U)
#define USB_HCSPARAMS_PPC_SHIFT                  (4U)
#define USB_HCSPARAMS_N_PCC_MASK                 (0xF00U)
#define USB_HCSPARAMS_N_PCC_SHIFT                (8U)
#define USB_HCSPARAMS_N_PCC(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PCC_SHIFT)) & USB_HCSPARAMS_N_PCC_MASK)
#define USB_HCSPARAMS_N_CC_MASK                  (0xF000U)
#define USB_HCSPARAMS_N_CC_SHIFT                 (12U)
/*! N_CC
 *  0b0000..There is no internal Companion Controller and port-ownership hand-off is not supported.
 *  0b0001..There are internal companion controller(s) and port-ownership hand-offs is supported.
 */
#define USB_HCSPARAMS_N_CC(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_CC_SHIFT)) & USB_HCSPARAMS_N_CC_MASK)
#define USB_HCSPARAMS_PI_MASK                    (0x10000U)
#define USB_HCSPARAMS_PI_SHIFT                   (16U)
#define USB_HCSPARAMS_N_PTT_MASK                 (0xF00000U)
#define USB_HCSPARAMS_N_PTT_SHIFT                (20U)
#define USB_HCSPARAMS_N_PTT(x)                   (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_PTT_SHIFT)) & USB_HCSPARAMS_N_PTT_MASK)
#define USB_HCSPARAMS_N_TT_MASK                  (0xF000000U)
#define USB_HCSPARAMS_N_TT_SHIFT                 (24U)
#define USB_HCSPARAMS_N_TT(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCSPARAMS_N_TT_SHIFT)) & USB_HCSPARAMS_N_TT_MASK)
/*! @} */

/*! @name HCCPARAMS - Host Controller Capability Parameters */
/*! @{ */
#define USB_HCCPARAMS_ADC_MASK                   (0x1U)
#define USB_HCCPARAMS_ADC_SHIFT                  (0U)
#define USB_HCCPARAMS_PFL_MASK                   (0x2U)
#define USB_HCCPARAMS_PFL_SHIFT                  (1U)
#define USB_HCCPARAMS_ASP_MASK                   (0x4U)
#define USB_HCCPARAMS_ASP_SHIFT                  (2U)
#define USB_HCCPARAMS_IST_MASK                   (0xF0U)
#define USB_HCCPARAMS_IST_SHIFT                  (4U)
#define USB_HCCPARAMS_IST(x)                     (((uint32_t)(((uint32_t)(x)) << USB_HCCPARAMS_IST_SHIFT)) & USB_HCCPARAMS_IST_MASK)
#define USB_HCCPARAMS_EECP_MASK                  (0xFF00U)
#define USB_HCCPARAMS_EECP_SHIFT                 (8U)
#define USB_HCCPARAMS_EECP(x)                    (((uint32_t)(((uint32_t)(x)) << USB_HCCPARAMS_EECP_SHIFT)) & USB_HCCPARAMS_EECP_MASK)
/*! @} */

/*! @name DCIVERSION - Device Controller Interface Version */
/*! @{ */
#define USB_DCIVERSION_DCIVERSION_MASK           (0xFFFFU)
#define USB_DCIVERSION_DCIVERSION_SHIFT          (0U)
#define USB_DCIVERSION_DCIVERSION(x)             (((uint16_t)(((uint16_t)(x)) << USB_DCIVERSION_DCIVERSION_SHIFT)) & USB_DCIVERSION_DCIVERSION_MASK)
/*! @} */

/*! @name DCCPARAMS - Device Controller Capability Parameters */
/*! @{ */
#define USB_DCCPARAMS_DEN_MASK                   (0x1FU)
#define USB_DCCPARAMS_DEN_SHIFT                  (0U)
#define USB_DCCPARAMS_DEN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_DCCPARAMS_DEN_SHIFT)) & USB_DCCPARAMS_DEN_MASK)
#define USB_DCCPARAMS_DC_MASK                    (0x80U)
#define USB_DCCPARAMS_DC_SHIFT                   (7U)
#define USB_DCCPARAMS_HC_MASK                    (0x100U)
#define USB_DCCPARAMS_HC_SHIFT                   (8U)
/*! @} */

/*! @name USBCMD - USB Command Register */
/*! @{ */
#define USB_USBCMD_RS_MASK                       (0x1U)
#define USB_USBCMD_RS_SHIFT                      (0U)
#define USB_USBCMD_RST_MASK                      (0x2U)
#define USB_USBCMD_RST_SHIFT                     (1U)
#define USB_USBCMD_FS_1_MASK                     (0xCU)
#define USB_USBCMD_FS_1_SHIFT                    (2U)
#define USB_USBCMD_FS_1(x)                       (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_FS_1_SHIFT)) & USB_USBCMD_FS_1_MASK)
#define USB_USBCMD_PSE_MASK                      (0x10U)
#define USB_USBCMD_PSE_SHIFT                     (4U)
#define USB_USBCMD_ASE_MASK                      (0x20U)
#define USB_USBCMD_ASE_SHIFT                     (5U)
#define USB_USBCMD_IAA_MASK                      (0x40U)
#define USB_USBCMD_IAA_SHIFT                     (6U)
#define USB_USBCMD_ASP_MASK                      (0x300U)
#define USB_USBCMD_ASP_SHIFT                     (8U)
#define USB_USBCMD_ASP(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_ASP_SHIFT)) & USB_USBCMD_ASP_MASK)
#define USB_USBCMD_ASPE_MASK                     (0x800U)
#define USB_USBCMD_ASPE_SHIFT                    (11U)
#define USB_USBCMD_SUTW_MASK                     (0x2000U)
#define USB_USBCMD_SUTW_SHIFT                    (13U)
#define USB_USBCMD_ATDTW_MASK                    (0x4000U)
#define USB_USBCMD_ATDTW_SHIFT                   (14U)
#define USB_USBCMD_FS_2_MASK                     (0x8000U)
#define USB_USBCMD_FS_2_SHIFT                    (15U)
#define USB_USBCMD_ITC_MASK                      (0xFF0000U)
#define USB_USBCMD_ITC_SHIFT                     (16U)
/*! ITC
 *  0b00000000..Immediate (no threshold)
 *  0b00000001..1 micro-frame
 *  0b00000010..2 micro-frames
 *  0b00000100..4 micro-frames
 *  0b00001000..8 micro-frames
 *  0b00010000..16 micro-frames
 *  0b00100000..32 micro-frames
 *  0b01000000..64 micro-frames
 */
#define USB_USBCMD_ITC(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBCMD_ITC_SHIFT)) & USB_USBCMD_ITC_MASK)
/*! @} */

/*! @name USBSTS - USB Status Register */
/*! @{ */
#define USB_USBSTS_UI_MASK                       (0x1U)
#define USB_USBSTS_UI_SHIFT                      (0U)
#define USB_USBSTS_UEI_MASK                      (0x2U)
#define USB_USBSTS_UEI_SHIFT                     (1U)
#define USB_USBSTS_PCI_MASK                      (0x4U)
#define USB_USBSTS_PCI_SHIFT                     (2U)
#define USB_USBSTS_FRI_MASK                      (0x8U)
#define USB_USBSTS_FRI_SHIFT                     (3U)
#define USB_USBSTS_SEI_MASK                      (0x10U)
#define USB_USBSTS_SEI_SHIFT                     (4U)
#define USB_USBSTS_AAI_MASK                      (0x20U)
#define USB_USBSTS_AAI_SHIFT                     (5U)
#define USB_USBSTS_URI_MASK                      (0x40U)
#define USB_USBSTS_URI_SHIFT                     (6U)
#define USB_USBSTS_SRI_MASK                      (0x80U)
#define USB_USBSTS_SRI_SHIFT                     (7U)
#define USB_USBSTS_SLI_MASK                      (0x100U)
#define USB_USBSTS_SLI_SHIFT                     (8U)
#define USB_USBSTS_ULPII_MASK                    (0x400U)
#define USB_USBSTS_ULPII_SHIFT                   (10U)
#define USB_USBSTS_HCH_MASK                      (0x1000U)
#define USB_USBSTS_HCH_SHIFT                     (12U)
#define USB_USBSTS_RCL_MASK                      (0x2000U)
#define USB_USBSTS_RCL_SHIFT                     (13U)
#define USB_USBSTS_PS_MASK                       (0x4000U)
#define USB_USBSTS_PS_SHIFT                      (14U)
#define USB_USBSTS_AS_MASK                       (0x8000U)
#define USB_USBSTS_AS_SHIFT                      (15U)
#define USB_USBSTS_NAKI_MASK                     (0x10000U)
#define USB_USBSTS_NAKI_SHIFT                    (16U)
#define USB_USBSTS_TI0_MASK                      (0x1000000U)
#define USB_USBSTS_TI0_SHIFT                     (24U)
#define USB_USBSTS_TI1_MASK                      (0x2000000U)
#define USB_USBSTS_TI1_SHIFT                     (25U)
/*! @} */

/*! @name USBINTR - Interrupt Enable Register */
/*! @{ */
#define USB_USBINTR_UE_MASK                      (0x1U)
#define USB_USBINTR_UE_SHIFT                     (0U)
#define USB_USBINTR_UEE_MASK                     (0x2U)
#define USB_USBINTR_UEE_SHIFT                    (1U)
#define USB_USBINTR_PCE_MASK                     (0x4U)
#define USB_USBINTR_PCE_SHIFT                    (2U)
#define USB_USBINTR_FRE_MASK                     (0x8U)
#define USB_USBINTR_FRE_SHIFT                    (3U)
#define USB_USBINTR_SEE_MASK                     (0x10U)
#define USB_USBINTR_SEE_SHIFT                    (4U)
#define USB_USBINTR_AAE_MASK                     (0x20U)
#define USB_USBINTR_AAE_SHIFT                    (5U)
#define USB_USBINTR_URE_MASK                     (0x40U)
#define USB_USBINTR_URE_SHIFT                    (6U)
#define USB_USBINTR_SRE_MASK                     (0x80U)
#define USB_USBINTR_SRE_SHIFT                    (7U)
#define USB_USBINTR_SLE_MASK                     (0x100U)
#define USB_USBINTR_SLE_SHIFT                    (8U)
#define USB_USBINTR_ULPIE_MASK                   (0x400U)
#define USB_USBINTR_ULPIE_SHIFT                  (10U)
#define USB_USBINTR_NAKE_MASK                    (0x10000U)
#define USB_USBINTR_NAKE_SHIFT                   (16U)
#define USB_USBINTR_UAIE_MASK                    (0x40000U)
#define USB_USBINTR_UAIE_SHIFT                   (18U)
#define USB_USBINTR_UPIE_MASK                    (0x80000U)
#define USB_USBINTR_UPIE_SHIFT                   (19U)
#define USB_USBINTR_TIE0_MASK                    (0x1000000U)
#define USB_USBINTR_TIE0_SHIFT                   (24U)
#define USB_USBINTR_TIE1_MASK                    (0x2000000U)
#define USB_USBINTR_TIE1_SHIFT                   (25U)
/*! @} */

/*! @name FRINDEX - USB Frame Index */
/*! @{ */
#define USB_FRINDEX_FRINDEX_MASK                 (0x3FFFU)
#define USB_FRINDEX_FRINDEX_SHIFT                (0U)
/*! FRINDEX
 *  0b00000000000000..(1024) 12
 *  0b00000000000001..(512) 11
 *  0b00000000000010..(256) 10
 *  0b00000000000011..(128) 9
 *  0b00000000000100..(64) 8
 *  0b00000000000101..(32) 7
 *  0b00000000000110..(16) 6
 *  0b00000000000111..(8) 5
 */
#define USB_FRINDEX_FRINDEX(x)                   (((uint32_t)(((uint32_t)(x)) << USB_FRINDEX_FRINDEX_SHIFT)) & USB_FRINDEX_FRINDEX_MASK)
/*! @} */

/*! @name DEVICEADDR - Device Address */
/*! @{ */
#define USB_DEVICEADDR_USBADRA_MASK              (0x1000000U)
#define USB_DEVICEADDR_USBADRA_SHIFT             (24U)
#define USB_DEVICEADDR_USBADR_MASK               (0xFE000000U)
#define USB_DEVICEADDR_USBADR_SHIFT              (25U)
#define USB_DEVICEADDR_USBADR(x)                 (((uint32_t)(((uint32_t)(x)) << USB_DEVICEADDR_USBADR_SHIFT)) & USB_DEVICEADDR_USBADR_MASK)
/*! @} */

/*! @name PERIODICLISTBASE - Frame List Base Address */
/*! @{ */
#define USB_PERIODICLISTBASE_BASEADR_MASK        (0xFFFFF000U)
#define USB_PERIODICLISTBASE_BASEADR_SHIFT       (12U)
#define USB_PERIODICLISTBASE_BASEADR(x)          (((uint32_t)(((uint32_t)(x)) << USB_PERIODICLISTBASE_BASEADR_SHIFT)) & USB_PERIODICLISTBASE_BASEADR_MASK)
/*! @} */

/*! @name ASYNCLISTADDR - Next Asynch. Address */
/*! @{ */
#define USB_ASYNCLISTADDR_ASYBASE_MASK           (0xFFFFFFE0U)
#define USB_ASYNCLISTADDR_ASYBASE_SHIFT          (5U)
#define USB_ASYNCLISTADDR_ASYBASE(x)             (((uint32_t)(((uint32_t)(x)) << USB_ASYNCLISTADDR_ASYBASE_SHIFT)) & USB_ASYNCLISTADDR_ASYBASE_MASK)
/*! @} */

/*! @name ENDPTLISTADDR - Endpoint List Address */
/*! @{ */
#define USB_ENDPTLISTADDR_EPBASE_MASK            (0xFFFFF800U)
#define USB_ENDPTLISTADDR_EPBASE_SHIFT           (11U)
#define USB_ENDPTLISTADDR_EPBASE(x)              (((uint32_t)(((uint32_t)(x)) << USB_ENDPTLISTADDR_EPBASE_SHIFT)) & USB_ENDPTLISTADDR_EPBASE_MASK)
/*! @} */

/*! @name BURSTSIZE - Programmable Burst Size */
/*! @{ */
#define USB_BURSTSIZE_RXPBURST_MASK              (0xFFU)
#define USB_BURSTSIZE_RXPBURST_SHIFT             (0U)
#define USB_BURSTSIZE_RXPBURST(x)                (((uint32_t)(((uint32_t)(x)) << USB_BURSTSIZE_RXPBURST_SHIFT)) & USB_BURSTSIZE_RXPBURST_MASK)
#define USB_BURSTSIZE_TXPBURST_MASK              (0x1FF00U)
#define USB_BURSTSIZE_TXPBURST_SHIFT             (8U)
#define USB_BURSTSIZE_TXPBURST(x)                (((uint32_t)(((uint32_t)(x)) << USB_BURSTSIZE_TXPBURST_SHIFT)) & USB_BURSTSIZE_TXPBURST_MASK)
/*! @} */

/*! @name TXFILLTUNING - TX FIFO Fill Tuning */
/*! @{ */
#define USB_TXFILLTUNING_TXSCHOH_MASK            (0xFFU)
#define USB_TXFILLTUNING_TXSCHOH_SHIFT           (0U)
#define USB_TXFILLTUNING_TXSCHOH(x)              (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXSCHOH_SHIFT)) & USB_TXFILLTUNING_TXSCHOH_MASK)
#define USB_TXFILLTUNING_TXSCHHEALTH_MASK        (0x1F00U)
#define USB_TXFILLTUNING_TXSCHHEALTH_SHIFT       (8U)
#define USB_TXFILLTUNING_TXSCHHEALTH(x)          (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXSCHHEALTH_SHIFT)) & USB_TXFILLTUNING_TXSCHHEALTH_MASK)
#define USB_TXFILLTUNING_TXFIFOTHRES_MASK        (0x3F0000U)
#define USB_TXFILLTUNING_TXFIFOTHRES_SHIFT       (16U)
#define USB_TXFILLTUNING_TXFIFOTHRES(x)          (((uint32_t)(((uint32_t)(x)) << USB_TXFILLTUNING_TXFIFOTHRES_SHIFT)) & USB_TXFILLTUNING_TXFIFOTHRES_MASK)
/*! @} */

/*! @name ENDPTNAK - Endpoint NAK */
/*! @{ */
#define USB_ENDPTNAK_EPRN_MASK                   (0xFFU)
#define USB_ENDPTNAK_EPRN_SHIFT                  (0U)
#define USB_ENDPTNAK_EPRN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAK_EPRN_SHIFT)) & USB_ENDPTNAK_EPRN_MASK)
#define USB_ENDPTNAK_EPTN_MASK                   (0xFF0000U)
#define USB_ENDPTNAK_EPTN_SHIFT                  (16U)
#define USB_ENDPTNAK_EPTN(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAK_EPTN_SHIFT)) & USB_ENDPTNAK_EPTN_MASK)
/*! @} */

/*! @name ENDPTNAKEN - Endpoint NAK Enable */
/*! @{ */
#define USB_ENDPTNAKEN_EPRNE_MASK                (0xFFU)
#define USB_ENDPTNAKEN_EPRNE_SHIFT               (0U)
#define USB_ENDPTNAKEN_EPRNE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAKEN_EPRNE_SHIFT)) & USB_ENDPTNAKEN_EPRNE_MASK)
#define USB_ENDPTNAKEN_EPTNE_MASK                (0xFF0000U)
#define USB_ENDPTNAKEN_EPTNE_SHIFT               (16U)
#define USB_ENDPTNAKEN_EPTNE(x)                  (((uint32_t)(((uint32_t)(x)) << USB_ENDPTNAKEN_EPTNE_SHIFT)) & USB_ENDPTNAKEN_EPTNE_MASK)
/*! @} */

/*! @name CONFIGFLAG - Configure Flag Register */
/*! @{ */
#define USB_CONFIGFLAG_CF_MASK                   (0x1U)
#define USB_CONFIGFLAG_CF_SHIFT                  (0U)
/*! @} */

/*! @name PORTSC1 - Port Status & Control */
/*! @{ */
#define USB_PORTSC1_CCS_MASK                     (0x1U)
#define USB_PORTSC1_CCS_SHIFT                    (0U)
#define USB_PORTSC1_CSC_MASK                     (0x2U)
#define USB_PORTSC1_CSC_SHIFT                    (1U)
#define USB_PORTSC1_PE_MASK                      (0x4U)
#define USB_PORTSC1_PE_SHIFT                     (2U)
#define USB_PORTSC1_PEC_MASK                     (0x8U)
#define USB_PORTSC1_PEC_SHIFT                    (3U)
#define USB_PORTSC1_OCA_MASK                     (0x10U)
#define USB_PORTSC1_OCA_SHIFT                    (4U)
#define USB_PORTSC1_OCC_MASK                     (0x20U)
#define USB_PORTSC1_OCC_SHIFT                    (5U)
#define USB_PORTSC1_FPR_MASK                     (0x40U)
#define USB_PORTSC1_FPR_SHIFT                    (6U)
#define USB_PORTSC1_SUSP_MASK                    (0x80U)
#define USB_PORTSC1_SUSP_SHIFT                   (7U)
#define USB_PORTSC1_PR_MASK                      (0x100U)
#define USB_PORTSC1_PR_SHIFT                     (8U)
#define USB_PORTSC1_HSP_MASK                     (0x200U)
#define USB_PORTSC1_HSP_SHIFT                    (9U)
#define USB_PORTSC1_LS_MASK                      (0xC00U)
#define USB_PORTSC1_LS_SHIFT                     (10U)
/*! LS
 *  0b00..SE0
 *  0b10..J-state
 *  0b01..K-state
 *  0b11..Undefined
 */
#define USB_PORTSC1_LS(x)                        (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_LS_SHIFT)) & USB_PORTSC1_LS_MASK)
#define USB_PORTSC1_PP_MASK                      (0x1000U)
#define USB_PORTSC1_PP_SHIFT                     (12U)
#define USB_PORTSC1_PO_MASK                      (0x2000U)
#define USB_PORTSC1_PO_SHIFT                     (13U)
#define USB_PORTSC1_PIC_MASK                     (0xC000U)
#define USB_PORTSC1_PIC_SHIFT                    (14U)
/*! PIC
 *  0b00..Port indicators are off
 *  0b01..Amber
 *  0b10..Green
 *  0b11..Undefined
 */
#define USB_PORTSC1_PIC(x)                       (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PIC_SHIFT)) & USB_PORTSC1_PIC_MASK)
#define USB_PORTSC1_PTC_MASK                     (0xF0000U)
#define USB_PORTSC1_PTC_SHIFT                    (16U)
/*! PTC
 *  0b0000..TEST_MODE_DISABLE
 *  0b0001..J_STATE
 *  0b0010..K_STATE
 *  0b0011..SE0 (host) / NAK (device)
 *  0b0100..Packet
 *  0b0101..FORCE_ENABLE_HS
 *  0b0110..FORCE_ENABLE_FS
 *  0b0111..FORCE_ENABLE_LS
 */
#define USB_PORTSC1_PTC(x)                       (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PTC_SHIFT)) & USB_PORTSC1_PTC_MASK)
#define USB_PORTSC1_WKCN_MASK                    (0x100000U)
#define USB_PORTSC1_WKCN_SHIFT                   (20U)
#define USB_PORTSC1_WKDC_MASK                    (0x200000U)
#define USB_PORTSC1_WKDC_SHIFT                   (21U)
#define USB_PORTSC1_WKOC_MASK                    (0x400000U)
#define USB_PORTSC1_WKOC_SHIFT                   (22U)
#define USB_PORTSC1_PHCD_MASK                    (0x800000U)
#define USB_PORTSC1_PHCD_SHIFT                   (23U)
#define USB_PORTSC1_PFSC_MASK                    (0x1000000U)
#define USB_PORTSC1_PFSC_SHIFT                   (24U)
#define USB_PORTSC1_PTS_2_MASK                   (0x2000000U)
#define USB_PORTSC1_PTS_2_SHIFT                  (25U)
#define USB_PORTSC1_PSPD_MASK                    (0xC000000U)
#define USB_PORTSC1_PSPD_SHIFT                   (26U)
/*! PSPD
 *  0b00..Full Speed
 *  0b01..Low Speed
 *  0b10..High Speed
 *  0b11..Undefined
 */
#define USB_PORTSC1_PSPD(x)                      (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PSPD_SHIFT)) & USB_PORTSC1_PSPD_MASK)
#define USB_PORTSC1_PTW_MASK                     (0x10000000U)
#define USB_PORTSC1_PTW_SHIFT                    (28U)
#define USB_PORTSC1_STS_MASK                     (0x20000000U)
#define USB_PORTSC1_STS_SHIFT                    (29U)
#define USB_PORTSC1_PTS_1_MASK                   (0xC0000000U)
#define USB_PORTSC1_PTS_1_SHIFT                  (30U)
#define USB_PORTSC1_PTS_1(x)                     (((uint32_t)(((uint32_t)(x)) << USB_PORTSC1_PTS_1_SHIFT)) & USB_PORTSC1_PTS_1_MASK)
/*! @} */

/*! @name OTGSC - On-The-Go Status & control */
/*! @{ */
#define USB_OTGSC_VD_MASK                        (0x1U)
#define USB_OTGSC_VD_SHIFT                       (0U)
#define USB_OTGSC_VC_MASK                        (0x2U)
#define USB_OTGSC_VC_SHIFT                       (1U)
#define USB_OTGSC_OT_MASK                        (0x8U)
#define USB_OTGSC_OT_SHIFT                       (3U)
#define USB_OTGSC_DP_MASK                        (0x10U)
#define USB_OTGSC_DP_SHIFT                       (4U)
#define USB_OTGSC_IDPU_MASK                      (0x20U)
#define USB_OTGSC_IDPU_SHIFT                     (5U)
#define USB_OTGSC_ID_MASK                        (0x100U)
#define USB_OTGSC_ID_SHIFT                       (8U)
#define USB_OTGSC_AVV_MASK                       (0x200U)
#define USB_OTGSC_AVV_SHIFT                      (9U)
#define USB_OTGSC_ASV_MASK                       (0x400U)
#define USB_OTGSC_ASV_SHIFT                      (10U)
#define USB_OTGSC_BSV_MASK                       (0x800U)
#define USB_OTGSC_BSV_SHIFT                      (11U)
#define USB_OTGSC_BSE_MASK                       (0x1000U)
#define USB_OTGSC_BSE_SHIFT                      (12U)
#define USB_OTGSC_TOG_1MS_MASK                   (0x2000U)
#define USB_OTGSC_TOG_1MS_SHIFT                  (13U)
#define USB_OTGSC_DPS_MASK                       (0x4000U)
#define USB_OTGSC_DPS_SHIFT                      (14U)
#define USB_OTGSC_IDIS_MASK                      (0x10000U)
#define USB_OTGSC_IDIS_SHIFT                     (16U)
#define USB_OTGSC_AVVIS_MASK                     (0x20000U)
#define USB_OTGSC_AVVIS_SHIFT                    (17U)
#define USB_OTGSC_ASVIS_MASK                     (0x40000U)
#define USB_OTGSC_ASVIS_SHIFT                    (18U)
#define USB_OTGSC_BSVIS_MASK                     (0x80000U)
#define USB_OTGSC_BSVIS_SHIFT                    (19U)
#define USB_OTGSC_BSEIS_MASK                     (0x100000U)
#define USB_OTGSC_BSEIS_SHIFT                    (20U)
#define USB_OTGSC_STATUS_1MS_MASK                (0x200000U)
#define USB_OTGSC_STATUS_1MS_SHIFT               (21U)
#define USB_OTGSC_DPIS_MASK                      (0x400000U)
#define USB_OTGSC_DPIS_SHIFT                     (22U)
#define USB_OTGSC_IDIE_MASK                      (0x1000000U)
#define USB_OTGSC_IDIE_SHIFT                     (24U)
#define USB_OTGSC_AVVIE_MASK                     (0x2000000U)
#define USB_OTGSC_AVVIE_SHIFT                    (25U)
#define USB_OTGSC_ASVIE_MASK                     (0x4000000U)
#define USB_OTGSC_ASVIE_SHIFT                    (26U)
#define USB_OTGSC_BSVIE_MASK                     (0x8000000U)
#define USB_OTGSC_BSVIE_SHIFT                    (27U)
#define USB_OTGSC_BSEIE_MASK                     (0x10000000U)
#define USB_OTGSC_BSEIE_SHIFT                    (28U)
#define USB_OTGSC_EN_1MS_MASK                    (0x20000000U)
#define USB_OTGSC_EN_1MS_SHIFT                   (29U)
#define USB_OTGSC_DPIE_MASK                      (0x40000000U)
#define USB_OTGSC_DPIE_SHIFT                     (30U)
/*! @} */

/*! @name USBMODE - USB Device Mode */
/*! @{ */
#define USB_USBMODE_CM_MASK                      (0x3U)
#define USB_USBMODE_CM_SHIFT                     (0U)
/*! CM
 *  0b00..Idle [Default for combination host/device]
 *  0b01..Reserved
 *  0b10..Device Controller [Default for device only controller]
 *  0b11..Host Controller [Default for host only controller]
 */
#define USB_USBMODE_CM(x)                        (((uint32_t)(((uint32_t)(x)) << USB_USBMODE_CM_SHIFT)) & USB_USBMODE_CM_MASK)
#define USB_USBMODE_ES_MASK                      (0x4U)
#define USB_USBMODE_ES_SHIFT                     (2U)
#define USB_USBMODE_SLOM_MASK                    (0x8U)
#define USB_USBMODE_SLOM_SHIFT                   (3U)
#define USB_USBMODE_SDIS_MASK                    (0x10U)
#define USB_USBMODE_SDIS_SHIFT                   (4U)
/*! @} */

/*! @name ENDPTSETUPSTAT - Endpoint Setup Status */
/*! @{ */
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK   (0xFFFFU)
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT  (0U)
#define USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT(x)     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT)) & USB_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK)
/*! @} */

/*! @name ENDPTPRIME - Endpoint Prime */
/*! @{ */
#define USB_ENDPTPRIME_PERB_MASK                 (0xFFU)
#define USB_ENDPTPRIME_PERB_SHIFT                (0U)
#define USB_ENDPTPRIME_PERB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTPRIME_PERB_SHIFT)) & USB_ENDPTPRIME_PERB_MASK)
#define USB_ENDPTPRIME_PETB_MASK                 (0xFF0000U)
#define USB_ENDPTPRIME_PETB_SHIFT                (16U)
#define USB_ENDPTPRIME_PETB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTPRIME_PETB_SHIFT)) & USB_ENDPTPRIME_PETB_MASK)
/*! @} */

/*! @name ENDPTFLUSH - Endpoint Flush */
/*! @{ */
#define USB_ENDPTFLUSH_FERB_MASK                 (0xFFU)
#define USB_ENDPTFLUSH_FERB_SHIFT                (0U)
#define USB_ENDPTFLUSH_FERB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTFLUSH_FERB_SHIFT)) & USB_ENDPTFLUSH_FERB_MASK)
#define USB_ENDPTFLUSH_FETB_MASK                 (0xFF0000U)
#define USB_ENDPTFLUSH_FETB_SHIFT                (16U)
#define USB_ENDPTFLUSH_FETB(x)                   (((uint32_t)(((uint32_t)(x)) << USB_ENDPTFLUSH_FETB_SHIFT)) & USB_ENDPTFLUSH_FETB_MASK)
/*! @} */

/*! @name ENDPTSTAT - Endpoint Status */
/*! @{ */
#define USB_ENDPTSTAT_ERBR_MASK                  (0xFFU)
#define USB_ENDPTSTAT_ERBR_SHIFT                 (0U)
#define USB_ENDPTSTAT_ERBR(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSTAT_ERBR_SHIFT)) & USB_ENDPTSTAT_ERBR_MASK)
#define USB_ENDPTSTAT_ETBR_MASK                  (0xFF0000U)
#define USB_ENDPTSTAT_ETBR_SHIFT                 (16U)
#define USB_ENDPTSTAT_ETBR(x)                    (((uint32_t)(((uint32_t)(x)) << USB_ENDPTSTAT_ETBR_SHIFT)) & USB_ENDPTSTAT_ETBR_MASK)
/*! @} */

/*! @name ENDPTCOMPLETE - Endpoint Complete */
/*! @{ */
#define USB_ENDPTCOMPLETE_ERCE_MASK              (0xFFU)
#define USB_ENDPTCOMPLETE_ERCE_SHIFT             (0U)
#define USB_ENDPTCOMPLETE_ERCE(x)                (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCOMPLETE_ERCE_SHIFT)) & USB_ENDPTCOMPLETE_ERCE_MASK)
#define USB_ENDPTCOMPLETE_ETCE_MASK              (0xFF0000U)
#define USB_ENDPTCOMPLETE_ETCE_SHIFT             (16U)
#define USB_ENDPTCOMPLETE_ETCE(x)                (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCOMPLETE_ETCE_SHIFT)) & USB_ENDPTCOMPLETE_ETCE_MASK)
/*! @} */

/*! @name ENDPTCTRL - Endpoint Control0..Endpoint Control 7 */
/*! @{ */
#define USB_ENDPTCTRL_RXS_MASK                   (0x1U)
#define USB_ENDPTCTRL_RXS_SHIFT                  (0U)
#define USB_ENDPTCTRL_RXD_MASK                   (0x2U)
#define USB_ENDPTCTRL_RXD_SHIFT                  (1U)
#define USB_ENDPTCTRL_RXT_MASK                   (0xCU)
#define USB_ENDPTCTRL_RXT_SHIFT                  (2U)
#define USB_ENDPTCTRL_RXT(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL_RXT_SHIFT)) & USB_ENDPTCTRL_RXT_MASK)
#define USB_ENDPTCTRL_RXI_MASK                   (0x20U)
#define USB_ENDPTCTRL_RXI_SHIFT                  (5U)
#define USB_ENDPTCTRL_RXR_MASK                   (0x40U)
#define USB_ENDPTCTRL_RXR_SHIFT                  (6U)
#define USB_ENDPTCTRL_RXE_MASK                   (0x80U)
#define USB_ENDPTCTRL_RXE_SHIFT                  (7U)
#define USB_ENDPTCTRL_TXS_MASK                   (0x10000U)
#define USB_ENDPTCTRL_TXS_SHIFT                  (16U)
#define USB_ENDPTCTRL_TXD_MASK                   (0x20000U)
#define USB_ENDPTCTRL_TXD_SHIFT                  (17U)
#define USB_ENDPTCTRL_TXT_MASK                   (0xC0000U)
#define USB_ENDPTCTRL_TXT_SHIFT                  (18U)
#define USB_ENDPTCTRL_TXT(x)                     (((uint32_t)(((uint32_t)(x)) << USB_ENDPTCTRL_TXT_SHIFT)) & USB_ENDPTCTRL_TXT_MASK)
#define USB_ENDPTCTRL_TXI_MASK                   (0x200000U)
#define USB_ENDPTCTRL_TXI_SHIFT                  (21U)
#define USB_ENDPTCTRL_TXR_MASK                   (0x400000U)
#define USB_ENDPTCTRL_TXR_SHIFT                  (22U)
#define USB_ENDPTCTRL_TXE_MASK                   (0x800000U)
#define USB_ENDPTCTRL_TXE_SHIFT                  (23U)
/*! @} */

/* The count of USB_ENDPTCTRL */
#define USB_ENDPTCTRL_COUNT                      (8U)


/*!
 * @}
 */ /* end of group USB_Register_Masks */


/* USB - Peripheral instance base addresses */
/** Peripheral USB base pointer */
#define USB_BASE_PTR                             ((USB_MemMapPtr)0x32E40000u)
/** Array initializer of USB peripheral base pointers */
#define USB_BASE_PTRS                            { USB_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USB - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USB_Register_Accessor_Macros USB - Register accessor macros
 * @{
 */


/* USB - Register instance definitions */
/* USB */
#define USB_UOG1_ID                              USB_ID_REG(USB_BASE_PTR)
#define USB_UOG1_HWGENERAL                       USB_HWGENERAL_REG(USB_BASE_PTR)
#define USB_UOG1_HWHOST                          USB_HWHOST_REG(USB_BASE_PTR)
#define USB_UOG1_HWDEVICE                        USB_HWDEVICE_REG(USB_BASE_PTR)
#define USB_UOG1_HWTXBUF                         USB_HWTXBUF_REG(USB_BASE_PTR)
#define USB_UOG1_HWRXBUF                         USB_HWRXBUF_REG(USB_BASE_PTR)
#define USB_UOG1_GPTIMER0LD                      USB_GPTIMER0LD_REG(USB_BASE_PTR)
#define USB_UOG1_GPTIMER0CTRL                    USB_GPTIMER0CTRL_REG(USB_BASE_PTR)
#define USB_UOG1_GPTIMER1LD                      USB_GPTIMER1LD_REG(USB_BASE_PTR)
#define USB_UOG1_GPTIMER1CTRL                    USB_GPTIMER1CTRL_REG(USB_BASE_PTR)
#define USB_UOG1_SBUSCFG                         USB_SBUSCFG_REG(USB_BASE_PTR)
#define USB_UOG1_CAPLENGTH                       USB_CAPLENGTH_REG(USB_BASE_PTR)
#define USB_UOG1_HCIVERSION                      USB_HCIVERSION_REG(USB_BASE_PTR)
#define USB_UOG1_HCSPARAMS                       USB_HCSPARAMS_REG(USB_BASE_PTR)
#define USB_UOG1_HCCPARAMS                       USB_HCCPARAMS_REG(USB_BASE_PTR)
#define USB_UOG1_DCIVERSION                      USB_DCIVERSION_REG(USB_BASE_PTR)
#define USB_UOG1_DCCPARAMS                       USB_DCCPARAMS_REG(USB_BASE_PTR)
#define USB_UOG1_USBCMD                          USB_USBCMD_REG(USB_BASE_PTR)
#define USB_UOG1_USBSTS                          USB_USBSTS_REG(USB_BASE_PTR)
#define USB_UOG1_USBINTR                         USB_USBINTR_REG(USB_BASE_PTR)
#define USB_UOG1_FRINDEX                         USB_FRINDEX_REG(USB_BASE_PTR)
#define USB_UOG1_DEVICEADDR                      USB_DEVICEADDR_REG(USB_BASE_PTR)
#define USB_UOG1_PERIODICLISTBASE                USB_PERIODICLISTBASE_REG(USB_BASE_PTR)
#define USB_UOG1_ASYNCLISTADDR                   USB_ASYNCLISTADDR_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTLISTADDR                   USB_ENDPTLISTADDR_REG(USB_BASE_PTR)
#define USB_UOG1_BURSTSIZE                       USB_BURSTSIZE_REG(USB_BASE_PTR)
#define USB_UOG1_TXFILLTUNING                    USB_TXFILLTUNING_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTNAK                        USB_ENDPTNAK_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTNAKEN                      USB_ENDPTNAKEN_REG(USB_BASE_PTR)
#define USB_UOG1_CONFIGFLAG                      USB_CONFIGFLAG_REG(USB_BASE_PTR)
#define USB_UOG1_PORTSC1                         USB_PORTSC1_REG(USB_BASE_PTR)
#define USB_UOG1_OTGSC                           USB_OTGSC_REG(USB_BASE_PTR)
#define USB_UOG1_USBMODE                         USB_USBMODE_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTSETUPSTAT                  USB_ENDPTSETUPSTAT_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTPRIME                      USB_ENDPTPRIME_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTFLUSH                      USB_ENDPTFLUSH_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTSTAT                       USB_ENDPTSTAT_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTCOMPLETE                   USB_ENDPTCOMPLETE_REG(USB_BASE_PTR)
#define USB_UOG1_ENDPTCTRL0                      USB_ENDPTCTRL_REG(USB_BASE_PTR,0)
#define USB_UOG1_ENDPTCTRL1                      USB_ENDPTCTRL_REG(USB_BASE_PTR,1)
#define USB_UOG1_ENDPTCTRL2                      USB_ENDPTCTRL_REG(USB_BASE_PTR,2)
#define USB_UOG1_ENDPTCTRL3                      USB_ENDPTCTRL_REG(USB_BASE_PTR,3)
#define USB_UOG1_ENDPTCTRL4                      USB_ENDPTCTRL_REG(USB_BASE_PTR,4)
#define USB_UOG1_ENDPTCTRL5                      USB_ENDPTCTRL_REG(USB_BASE_PTR,5)
#define USB_UOG1_ENDPTCTRL6                      USB_ENDPTCTRL_REG(USB_BASE_PTR,6)
#define USB_UOG1_ENDPTCTRL7                      USB_ENDPTCTRL_REG(USB_BASE_PTR,7)

/* USB - Register array accessors */
#define USB_ENDPTCTRL(index)                     USB_ENDPTCTRL_REG(USB_BASE_PTR,index)

/*!
 * @}
 */ /* end of group USB_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USB_Peripheral */


/* ----------------------------------------------------------------------------
   -- USBNC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Peripheral USBNC
 * @{
 */

/** USBNC - Peripheral register structure */
typedef struct USBNC_MemMap {
  uint8_t RESERVED_0[512];
  uint32_t OTG1_CTRL1;                             /**< , offset: 0x200 */
  uint32_t OTG1_CTRL2;                             /**< , offset: 0x204 */
  uint8_t RESERVED_1[40];
  uint32_t OTG1_PHY_CFG1;                          /**< USB OTG PHY Configuration Register 1, offset: 0x230 */
  uint32_t OTG1_PHY_CFG2;                          /**< USB OTG PHY Configuration Register 2, offset: 0x234 */
  uint8_t RESERVED_2[4];
  uint32_t OTG1_PHY_STATUS;                        /**< USB OTG PHY Status Register, offset: 0x23C */
  uint8_t RESERVED_3[16];
  uint32_t ADP_CFG1;                               /**< , offset: 0x250 */
  uint32_t ADP_CFG2;                               /**< , offset: 0x254 */
  uint32_t ADP_STATUS;                             /**< , offset: 0x258 */
} volatile *USBNC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USBNC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Accessor_Macros USBNC - Register accessor macros
 * @{
 */


/* USBNC - Register accessors */
#define USBNC_OTG1_CTRL1_REG(base)               ((base)->OTG1_CTRL1)
#define USBNC_OTG1_CTRL2_REG(base)               ((base)->OTG1_CTRL2)
#define USBNC_OTG1_PHY_CFG1_REG(base)            ((base)->OTG1_PHY_CFG1)
#define USBNC_OTG1_PHY_CFG2_REG(base)            ((base)->OTG1_PHY_CFG2)
#define USBNC_OTG1_PHY_STATUS_REG(base)          ((base)->OTG1_PHY_STATUS)
#define USBNC_ADP_CFG1_REG(base)                 ((base)->ADP_CFG1)
#define USBNC_ADP_CFG2_REG(base)                 ((base)->ADP_CFG2)
#define USBNC_ADP_STATUS_REG(base)               ((base)->ADP_STATUS)

/*!
 * @}
 */ /* end of group USBNC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USBNC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Masks USBNC Register Masks
 * @{
 */

/*! @name OTG1_CTRL1 -  */
/*! @{ */
#define USBNC_OTG1_CTRL1_OVER_CUR_DIS_MASK       (0x80U)
#define USBNC_OTG1_CTRL1_OVER_CUR_DIS_SHIFT      (7U)
#define USBNC_OTG1_CTRL1_OVER_CUR_POL_MASK       (0x100U)
#define USBNC_OTG1_CTRL1_OVER_CUR_POL_SHIFT      (8U)
#define USBNC_OTG1_CTRL1_PWR_POL_MASK            (0x200U)
#define USBNC_OTG1_CTRL1_PWR_POL_SHIFT           (9U)
#define USBNC_OTG1_CTRL1_WIE_MASK                (0x400U)
#define USBNC_OTG1_CTRL1_WIE_SHIFT               (10U)
#define USBNC_OTG1_CTRL1_WKUP_SW_EN_MASK         (0x4000U)
#define USBNC_OTG1_CTRL1_WKUP_SW_EN_SHIFT        (14U)
#define USBNC_OTG1_CTRL1_WKUP_SW_MASK            (0x8000U)
#define USBNC_OTG1_CTRL1_WKUP_SW_SHIFT           (15U)
#define USBNC_OTG1_CTRL1_WKUP_ID_EN_MASK         (0x10000U)
#define USBNC_OTG1_CTRL1_WKUP_ID_EN_SHIFT        (16U)
#define USBNC_OTG1_CTRL1_WKUP_VBUS_EN_MASK       (0x20000U)
#define USBNC_OTG1_CTRL1_WKUP_VBUS_EN_SHIFT      (17U)
#define USBNC_OTG1_CTRL1_WKUP_DPDM_EN_MASK       (0x20000000U)
#define USBNC_OTG1_CTRL1_WKUP_DPDM_EN_SHIFT      (29U)
#define USBNC_OTG1_CTRL1_WIR_MASK                (0x80000000U)
#define USBNC_OTG1_CTRL1_WIR_SHIFT               (31U)
/*! @} */

/*! @name OTG1_CTRL2 -  */
/*! @{ */
#define USBNC_OTG1_CTRL2_VBUS_SOURCE_SEL_MASK    (0x3U)
#define USBNC_OTG1_CTRL2_VBUS_SOURCE_SEL_SHIFT   (0U)
#define USBNC_OTG1_CTRL2_VBUS_SOURCE_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_CTRL2_VBUS_SOURCE_SEL_SHIFT)) & USBNC_OTG1_CTRL2_VBUS_SOURCE_SEL_MASK)
#define USBNC_OTG1_CTRL2_AUTURESUME_EN_MASK      (0x4U)
#define USBNC_OTG1_CTRL2_AUTURESUME_EN_SHIFT     (2U)
#define USBNC_OTG1_CTRL2_LOWSPEED_EN_MASK        (0x8U)
#define USBNC_OTG1_CTRL2_LOWSPEED_EN_SHIFT       (3U)
#define USBNC_OTG1_CTRL2_TERMSEL_OVERRIDE_MASK   (0x10U)
#define USBNC_OTG1_CTRL2_TERMSEL_OVERRIDE_SHIFT  (4U)
#define USBNC_OTG1_CTRL2_TERMSEL_OVERRIDEEN_MASK (0x20U)
#define USBNC_OTG1_CTRL2_TERMSEL_OVERRIDEEN_SHIFT (5U)
#define USBNC_OTG1_CTRL2_OPMODE_OVERRIDE_MASK    (0xC0U)
#define USBNC_OTG1_CTRL2_OPMODE_OVERRIDE_SHIFT   (6U)
#define USBNC_OTG1_CTRL2_OPMODE_OVERRIDE(x)      (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_CTRL2_OPMODE_OVERRIDE_SHIFT)) & USBNC_OTG1_CTRL2_OPMODE_OVERRIDE_MASK)
#define USBNC_OTG1_CTRL2_OPMODE_OVERRIDEEN_MASK  (0x100U)
#define USBNC_OTG1_CTRL2_OPMODE_OVERRIDEEN_SHIFT (8U)
#define USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDE_MASK   (0x600U)
#define USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDE_SHIFT  (9U)
#define USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDE(x)     (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDE_SHIFT)) & USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDE_MASK)
#define USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDEEN_MASK (0x800U)
#define USBNC_OTG1_CTRL2_XCVRSEL_OVERRIDEEN_SHIFT (11U)
#define USBNC_OTG1_CTRL2_DPPULLDOWN_OVERRIDE_MASK (0x1000U)
#define USBNC_OTG1_CTRL2_DPPULLDOWN_OVERRIDE_SHIFT (12U)
#define USBNC_OTG1_CTRL2_DPPULLDOWN_OVERRIDEEN_MASK (0x2000U)
#define USBNC_OTG1_CTRL2_DPPULLDOWN_OVERRIDEEN_SHIFT (13U)
#define USBNC_OTG1_CTRL2_DMPULLDOWN_OVERRIDE_MASK (0x4000U)
#define USBNC_OTG1_CTRL2_DMPULLDOWN_OVERRIDE_SHIFT (14U)
#define USBNC_OTG1_CTRL2_DMPULLDOWN_OVERRIDEEN_MASK (0x8000U)
#define USBNC_OTG1_CTRL2_DMPULLDOWN_OVERRIDEEN_SHIFT (15U)
#define USBNC_OTG1_CTRL2_DIG_ID_SEL_MASK         (0x100000U)
#define USBNC_OTG1_CTRL2_DIG_ID_SEL_SHIFT        (20U)
#define USBNC_OTG1_CTRL2_UTMI_CLK_VLD_MASK       (0x80000000U)
#define USBNC_OTG1_CTRL2_UTMI_CLK_VLD_SHIFT      (31U)
/*! @} */

/*! @name OTG1_PHY_CFG1 - USB OTG PHY Configuration Register 1 */
/*! @{ */
#define USBNC_OTG1_PHY_CFG1_COMMONONN_MASK       (0x1U)
#define USBNC_OTG1_PHY_CFG1_COMMONONN_SHIFT      (0U)
#define USBNC_OTG1_PHY_CFG1_FSEL_MASK            (0xEU)
#define USBNC_OTG1_PHY_CFG1_FSEL_SHIFT           (1U)
/*! FSEL - Reference Clock Frequency Select
 *  0b000..9.6 MHz
 *  0b001..10 MHz
 *  0b010..12 MHz
 *  0b011..19.2 MHz
 *  0b100..20 MHz
 *  0b101..24 MHz (only valid setting for this SOC)
 *  0b110..Reserved
 *  0b111..50 MHz
 */
#define USBNC_OTG1_PHY_CFG1_FSEL(x)              (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_FSEL_SHIFT)) & USBNC_OTG1_PHY_CFG1_FSEL_MASK)
#define USBNC_OTG1_PHY_CFG1_COMPDISTUNE0_MASK    (0x70U)
#define USBNC_OTG1_PHY_CFG1_COMPDISTUNE0_SHIFT   (4U)
/*! COMPDISTUNE0 - Disconnect Threshold Adjustment
 *  0b000..-6%
 *  0b001..-4.5%
 *  0b010..-3%
 *  0b011..-1.5%
 *  0b100..Design default
 *  0b101..+1.5%
 *  0b110..+3%
 *  0b111..+4.5%
 */
#define USBNC_OTG1_PHY_CFG1_COMPDISTUNE0(x)      (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_COMPDISTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_COMPDISTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_SQRXTUNE0_MASK       (0x380U)
#define USBNC_OTG1_PHY_CFG1_SQRXTUNE0_SHIFT      (7U)
/*! SQRXTUNE0 - Squelch Threshold Adjustment
 *  0b000..+15%
 *  0b001..+10%
 *  0b010..+5%
 *  0b011..Design default
 *  0b100..-5%
 *  0b101..-10%
 *  0b110..-15%
 *  0b111..-20%
 */
#define USBNC_OTG1_PHY_CFG1_SQRXTUNE0(x)         (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_SQRXTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_SQRXTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_OTGTUNE0_MASK        (0x1C00U)
#define USBNC_OTG1_PHY_CFG1_OTGTUNE0_SHIFT       (10U)
/*! OTGTUNE0 - VBUS Valid Threshold Adjustment
 *  0b000..-6%
 *  0b001..-4.5%
 *  0b010..-3%
 *  0b011..-1.5%
 *  0b100..Design default
 *  0b101..+1.5%
 *  0b110..+3%
 *  0b111..+4.5%
 */
#define USBNC_OTG1_PHY_CFG1_OTGTUNE0(x)          (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_OTGTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_OTGTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXHSXVTUNE0_MASK     (0x6000U)
#define USBNC_OTG1_PHY_CFG1_TXHSXVTUNE0_SHIFT    (13U)
/*! TXHSXVTUNE0 - Transmitter High-Speed Crossover Adjustment
 *  0b00..Reserved
 *  0b01..-15mV
 *  0b10..+15mV
 *  0b11..Design default
 */
#define USBNC_OTG1_PHY_CFG1_TXHSXVTUNE0(x)       (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXHSXVTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXHSXVTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXFSLSTUNE0_MASK     (0xF0000U)
#define USBNC_OTG1_PHY_CFG1_TXFSLSTUNE0_SHIFT    (16U)
/*! TXFSLSTUNE0 - FS/LS Source Impedance Adjustment
 *  0b0000..+5%
 *  0b0001..+2.5%
 *  0b0011..Design default
 *  0b0111..-2.5%
 *  0b1111..-5%
 */
#define USBNC_OTG1_PHY_CFG1_TXFSLSTUNE0(x)       (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXFSLSTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXFSLSTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXVREFTUNE0_MASK     (0xF00000U)
#define USBNC_OTG1_PHY_CFG1_TXVREFTUNE0_SHIFT    (20U)
/*! TXVREFTUNE0 - HS DC Voltage Level Adjustment
 *  0b0000..-6%
 *  0b0001..-4%
 *  0b0010..-2%
 *  0b0011..Design default
 *  0b0100..+2%
 *  0b0101..+4%
 *  0b0110..+6%
 *  0b0111..+8%
 *  0b1000..+10%
 *  0b1001..+12%
 *  0b1010..+14%
 *  0b1011..+16%
 *  0b1100..+18%
 *  0b1101..+20%
 *  0b1110..+22%
 *  0b1111..+24%
 */
#define USBNC_OTG1_PHY_CFG1_TXVREFTUNE0(x)       (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXVREFTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXVREFTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXRISETUNE0_MASK     (0x3000000U)
#define USBNC_OTG1_PHY_CFG1_TXRISETUNE0_SHIFT    (24U)
/*! TXRISETUNE0 - HS Transmitter Rise/Fall Time Adjustment
 *  0b00..-10%
 *  0b01..Design default
 *  0b10..+15%
 *  0b11..+20%
 */
#define USBNC_OTG1_PHY_CFG1_TXRISETUNE0(x)       (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXRISETUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXRISETUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXRESTUNE0_MASK      (0xC000000U)
#define USBNC_OTG1_PHY_CFG1_TXRESTUNE0_SHIFT     (26U)
/*! TXRESTUNE0 - USB Source Impedance Adjustment
 *  0b00..Source impedance is increased by approximately 1.5 ohm
 *  0b01..Design default
 *  0b10..Source impedance is decreased by approximately 2 ohm
 *  0b11..Source impedance is decreased by approximately 4 ohm
 */
#define USBNC_OTG1_PHY_CFG1_TXRESTUNE0(x)        (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXRESTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXRESTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXPREEMPAMPTUNE0_MASK (0x30000000U)
#define USBNC_OTG1_PHY_CFG1_TXPREEMPAMPTUNE0_SHIFT (28U)
/*! TXPREEMPAMPTUNE0 - HS Treansmitter Pre-Emphasis Current Control
 *  0b00..HS Transmitter pre-emphasis is disabled
 *  0b01..HS Transmitter pre-emphasis circuit sources 1X pre-emphasis current (design default)
 *  0b10..HS Transmitter pre-emphasis circuit sources 2X pre-emphasis current
 *  0b11..HS Transmitter pre-emphasis circuit sources 3X pre-emphasis current
 */
#define USBNC_OTG1_PHY_CFG1_TXPREEMPAMPTUNE0(x)  (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_CFG1_TXPREEMPAMPTUNE0_SHIFT)) & USBNC_OTG1_PHY_CFG1_TXPREEMPAMPTUNE0_MASK)
#define USBNC_OTG1_PHY_CFG1_TXPREEMPPULSETUNE0_MASK (0x40000000U)
#define USBNC_OTG1_PHY_CFG1_TXPREEMPPULSETUNE0_SHIFT (30U)
#define USBNC_OTG1_PHY_CFG1_CHRGDET_Megamix_MASK (0x80000000U)
#define USBNC_OTG1_PHY_CFG1_CHRGDET_Megamix_SHIFT (31U)
/*! @} */

/*! @name OTG1_PHY_CFG2 - USB OTG PHY Configuration Register 2 */
/*! @{ */
#define USBNC_OTG1_PHY_CFG2_CHRGSEL_MASK         (0x1U)
#define USBNC_OTG1_PHY_CFG2_CHRGSEL_SHIFT        (0U)
#define USBNC_OTG1_PHY_CFG2_VDATDETENB0_MASK     (0x2U)
#define USBNC_OTG1_PHY_CFG2_VDATDETENB0_SHIFT    (1U)
#define USBNC_OTG1_PHY_CFG2_VDATSRCENB0_MASK     (0x4U)
#define USBNC_OTG1_PHY_CFG2_VDATSRCENB0_SHIFT    (2U)
#define USBNC_OTG1_PHY_CFG2_DCDENB_MASK          (0x8U)
#define USBNC_OTG1_PHY_CFG2_DCDENB_SHIFT         (3U)
#define USBNC_OTG1_PHY_CFG2_ACAENB0_MASK         (0x10U)
#define USBNC_OTG1_PHY_CFG2_ACAENB0_SHIFT        (4U)
#define USBNC_OTG1_PHY_CFG2_SLEEPM0_MASK         (0x20U)
#define USBNC_OTG1_PHY_CFG2_SLEEPM0_SHIFT        (5U)
#define USBNC_OTG1_PHY_CFG2_LOOPBACKENB0_MASK    (0x40U)
#define USBNC_OTG1_PHY_CFG2_LOOPBACKENB0_SHIFT   (6U)
#define USBNC_OTG1_PHY_CFG2_TXBITSTUFFEN0_MASK   (0x100U)
#define USBNC_OTG1_PHY_CFG2_TXBITSTUFFEN0_SHIFT  (8U)
#define USBNC_OTG1_PHY_CFG2_TXBITSTUFFENH0_MASK  (0x200U)
#define USBNC_OTG1_PHY_CFG2_TXBITSTUFFENH0_SHIFT (9U)
#define USBNC_OTG1_PHY_CFG2_OTGDISABLE0_MASK     (0x400U)
#define USBNC_OTG1_PHY_CFG2_OTGDISABLE0_SHIFT    (10U)
#define USBNC_OTG1_PHY_CFG2_ADPCHRG0_MASK        (0x800U)
#define USBNC_OTG1_PHY_CFG2_ADPCHRG0_SHIFT       (11U)
#define USBNC_OTG1_PHY_CFG2_ADPDISCHRG0_MASK     (0x1000U)
#define USBNC_OTG1_PHY_CFG2_ADPDISCHRG0_SHIFT    (12U)
#define USBNC_OTG1_PHY_CFG2_ADPPRBENB0_MASK      (0x2000U)
#define USBNC_OTG1_PHY_CFG2_ADPPRBENB0_SHIFT     (13U)
#define USBNC_OTG1_PHY_CFG2_VBUSVLDEXTSEL0_MASK  (0x4000U)
#define USBNC_OTG1_PHY_CFG2_VBUSVLDEXTSEL0_SHIFT (14U)
#define USBNC_OTG1_PHY_CFG2_VBUSVLDEXT_MASK      (0x8000U)
#define USBNC_OTG1_PHY_CFG2_VBUSVLDEXT_SHIFT     (15U)
#define USBNC_OTG1_PHY_CFG2_DRVVBUS0_MASK        (0x10000U)
#define USBNC_OTG1_PHY_CFG2_DRVVBUS0_SHIFT       (16U)
/*! @} */

/*! @name OTG1_PHY_STATUS - USB OTG PHY Status Register */
/*! @{ */
#define USBNC_OTG1_PHY_STATUS_LINE_STATE_MASK    (0x3U)
#define USBNC_OTG1_PHY_STATUS_LINE_STATE_SHIFT   (0U)
/*! LINE_STATE - Line State Indicator outputs from USB OTG PHY
 *  0b00..SE0 (DP low, DN low)
 *  0b01..J state for high-speed and full-speed USB traffic; K state for low-speed USB traffic (DP high, DN low)
 *  0b10..K state for high-speed and full-speed USB traffic; J state for low-speed USB traffic (DP low, DN high)
 *  0b11..SE1 (DP high, DN high)
 */
#define USBNC_OTG1_PHY_STATUS_LINE_STATE(x)      (((uint32_t)(((uint32_t)(x)) << USBNC_OTG1_PHY_STATUS_LINE_STATE_SHIFT)) & USBNC_OTG1_PHY_STATUS_LINE_STATE_MASK)
#define USBNC_OTG1_PHY_STATUS_SESS_VLD_MASK      (0x4U)
#define USBNC_OTG1_PHY_STATUS_SESS_VLD_SHIFT     (2U)
#define USBNC_OTG1_PHY_STATUS_VBUS_VLD_MASK      (0x8U)
#define USBNC_OTG1_PHY_STATUS_VBUS_VLD_SHIFT     (3U)
#define USBNC_OTG1_PHY_STATUS_ID_DIG_MASK        (0x10U)
#define USBNC_OTG1_PHY_STATUS_ID_DIG_SHIFT       (4U)
#define USBNC_OTG1_PHY_STATUS_HOST_DISCONNECT_MASK (0x20U)
#define USBNC_OTG1_PHY_STATUS_HOST_DISCONNECT_SHIFT (5U)
#define USBNC_OTG1_PHY_STATUS_RIDC0_MASK         (0x1000000U)
#define USBNC_OTG1_PHY_STATUS_RIDC0_SHIFT        (24U)
#define USBNC_OTG1_PHY_STATUS_RIDB0_MASK         (0x2000000U)
#define USBNC_OTG1_PHY_STATUS_RIDB0_SHIFT        (25U)
#define USBNC_OTG1_PHY_STATUS_RIDA0_MASK         (0x4000000U)
#define USBNC_OTG1_PHY_STATUS_RIDA0_SHIFT        (26U)
#define USBNC_OTG1_PHY_STATUS_RIDGND0_MASK       (0x8000000U)
#define USBNC_OTG1_PHY_STATUS_RIDGND0_SHIFT      (27U)
#define USBNC_OTG1_PHY_STATUS_RIDFLOAT0_MASK     (0x10000000U)
#define USBNC_OTG1_PHY_STATUS_RIDFLOAT0_SHIFT    (28U)
#define USBNC_OTG1_PHY_STATUS_CHRGDET_MASK       (0x20000000U)
#define USBNC_OTG1_PHY_STATUS_CHRGDET_SHIFT      (29U)
#define USBNC_OTG1_PHY_STATUS_ADPPRB0_MASK       (0x40000000U)
#define USBNC_OTG1_PHY_STATUS_ADPPRB0_SHIFT      (30U)
#define USBNC_OTG1_PHY_STATUS_ADPSNS0_MASK       (0x80000000U)
#define USBNC_OTG1_PHY_STATUS_ADPSNS0_SHIFT      (31U)
/*! @} */

/*! @name ADP_CFG1 -  */
/*! @{ */
#define USBNC_ADP_CFG1_ADP_WAIT_MASK             (0x3FFFFU)
#define USBNC_ADP_CFG1_ADP_WAIT_SHIFT            (0U)
/*! ADP_WAIT
 *  0b001100000000000000..Default
 */
#define USBNC_ADP_CFG1_ADP_WAIT(x)               (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_CFG1_ADP_WAIT_SHIFT)) & USBNC_ADP_CFG1_ADP_WAIT_MASK)
#define USBNC_ADP_CFG1_TIMER_EN_MASK             (0x100000U)
#define USBNC_ADP_CFG1_TIMER_EN_SHIFT            (20U)
#define USBNC_ADP_CFG1_ADP_SNS_INT_EN_MASK       (0x200000U)
#define USBNC_ADP_CFG1_ADP_SNS_INT_EN_SHIFT      (21U)
#define USBNC_ADP_CFG1_ADP_PRB_INT_EN_MASK       (0x400000U)
#define USBNC_ADP_CFG1_ADP_PRB_INT_EN_SHIFT      (22U)
#define USBNC_ADP_CFG1_ADP_PRB_EN_MASK           (0x800000U)
#define USBNC_ADP_CFG1_ADP_PRB_EN_SHIFT          (23U)
/*! @} */

/*! @name ADP_CFG2 -  */
/*! @{ */
#define USBNC_ADP_CFG2_ADP_CHRG_DELTA_MASK       (0x7FU)
#define USBNC_ADP_CFG2_ADP_CHRG_DELTA_SHIFT      (0U)
/*! ADP_CHRG_DELTA
 *  0b0010000..Default
 */
#define USBNC_ADP_CFG2_ADP_CHRG_DELTA(x)         (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_CFG2_ADP_CHRG_DELTA_SHIFT)) & USBNC_ADP_CFG2_ADP_CHRG_DELTA_MASK)
#define USBNC_ADP_CFG2_ADP_CHRG_SWCMP_MASK       (0x80U)
#define USBNC_ADP_CFG2_ADP_CHRG_SWCMP_SHIFT      (7U)
#define USBNC_ADP_CFG2_ADP_CHRG_SWTIME_MASK      (0xFF00U)
#define USBNC_ADP_CFG2_ADP_CHRG_SWTIME_SHIFT     (8U)
/*! ADP_CHRG_SWTIME
 *  0b01000000..Default
 */
#define USBNC_ADP_CFG2_ADP_CHRG_SWTIME(x)        (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_CFG2_ADP_CHRG_SWTIME_SHIFT)) & USBNC_ADP_CFG2_ADP_CHRG_SWTIME_MASK)
#define USBNC_ADP_CFG2_ADP_DISCHG_TIME_MASK      (0xFF0000U)
#define USBNC_ADP_CFG2_ADP_DISCHG_TIME_SHIFT     (16U)
/*! ADP_DISCHG_TIME - ADP Discharge time
 *  0b01000110..Default
 */
#define USBNC_ADP_CFG2_ADP_DISCHG_TIME(x)        (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_CFG2_ADP_DISCHG_TIME_SHIFT)) & USBNC_ADP_CFG2_ADP_DISCHG_TIME_MASK)
/*! @} */

/*! @name ADP_STATUS -  */
/*! @{ */
#define USBNC_ADP_STATUS_ADP_PRB_TIMR_MASK       (0xFFU)
#define USBNC_ADP_STATUS_ADP_PRB_TIMR_SHIFT      (0U)
/*! ADP_PRB_TIMR - ADP Probe Time
 *  0b00000000..Default
 */
#define USBNC_ADP_STATUS_ADP_PRB_TIMR(x)         (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_STATUS_ADP_PRB_TIMR_SHIFT)) & USBNC_ADP_STATUS_ADP_PRB_TIMR_MASK)
#define USBNC_ADP_STATUS_ADP_CNT_MASK            (0x3FFFF00U)
#define USBNC_ADP_STATUS_ADP_CNT_SHIFT           (8U)
#define USBNC_ADP_STATUS_ADP_CNT(x)              (((uint32_t)(((uint32_t)(x)) << USBNC_ADP_STATUS_ADP_CNT_SHIFT)) & USBNC_ADP_STATUS_ADP_CNT_MASK)
#define USBNC_ADP_STATUS_ADP_SNS_INT_MASK        (0x4000000U)
#define USBNC_ADP_STATUS_ADP_SNS_INT_SHIFT       (26U)
#define USBNC_ADP_STATUS_ADP_PRB_INT_MASK        (0x8000000U)
#define USBNC_ADP_STATUS_ADP_PRB_INT_SHIFT       (27U)
/*! @} */


/*!
 * @}
 */ /* end of group USBNC_Register_Masks */


/* USBNC - Peripheral instance base addresses */
/** Peripheral USBNC base pointer */
#define USBNC_BASE_PTR                           ((USBNC_MemMapPtr)0x32E40000u)
/** Array initializer of USBNC peripheral base pointers */
#define USBNC_BASE_PTRS                          { USBNC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USBNC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USBNC_Register_Accessor_Macros USBNC - Register accessor macros
 * @{
 */


/* USBNC - Register instance definitions */
/* USBNC */
#define USBNC_OTG1_CTRL1                         USBNC_OTG1_CTRL1_REG(USBNC_BASE_PTR)
#define USBNC_OTG1_CTRL2                         USBNC_OTG1_CTRL2_REG(USBNC_BASE_PTR)
#define USBNC_OTG1_PHY_CFG1                      USBNC_OTG1_PHY_CFG1_REG(USBNC_BASE_PTR)
#define USBNC_OTG1_PHY_CFG2                      USBNC_OTG1_PHY_CFG2_REG(USBNC_BASE_PTR)
#define USBNC_OTG1_PHY_STATUS                    USBNC_OTG1_PHY_STATUS_REG(USBNC_BASE_PTR)
#define USBNC_ADP_CFG1                           USBNC_ADP_CFG1_REG(USBNC_BASE_PTR)
#define USBNC_ADP_CFG2                           USBNC_ADP_CFG2_REG(USBNC_BASE_PTR)
#define USBNC_ADP_STATUS                         USBNC_ADP_STATUS_REG(USBNC_BASE_PTR)

/*!
 * @}
 */ /* end of group USBNC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USBNC_Peripheral */


/* ----------------------------------------------------------------------------
   -- USDHC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Peripheral USDHC
 * @{
 */

/** USDHC - Peripheral register structure */
typedef struct USDHC_MemMap {
  uint32_t DS_ADDR;                                /**< DMA System Address, offset: 0x0 */
  uint32_t BLK_ATT;                                /**< Block Attributes, offset: 0x4 */
  uint32_t CMD_ARG;                                /**< Command Argument, offset: 0x8 */
  uint32_t CMD_XFR_TYP;                            /**< Command Transfer Type, offset: 0xC */
  uint32_t CMD_RSP0;                               /**< Command Response0, offset: 0x10 */
  uint32_t CMD_RSP1;                               /**< Command Response1, offset: 0x14 */
  uint32_t CMD_RSP2;                               /**< Command Response2, offset: 0x18 */
  uint32_t CMD_RSP3;                               /**< Command Response3, offset: 0x1C */
  uint32_t DATA_BUFF_ACC_PORT;                     /**< Data Buffer Access Port, offset: 0x20 */
  uint32_t PRES_STATE;                             /**< Present State, offset: 0x24 */
  uint32_t PROT_CTRL;                              /**< Protocol Control, offset: 0x28 */
  uint32_t SYS_CTRL;                               /**< System Control, offset: 0x2C */
  uint32_t INT_STATUS;                             /**< Interrupt Status, offset: 0x30 */
  uint32_t INT_STATUS_EN;                          /**< Interrupt Status Enable, offset: 0x34 */
  uint32_t INT_SIGNAL_EN;                          /**< Interrupt Signal Enable, offset: 0x38 */
  uint32_t AUTOCMD12_ERR_STATUS;                   /**< Auto CMD12 Error Status, offset: 0x3C */
  uint32_t HOST_CTRL_CAP;                          /**< Host Controller Capabilities, offset: 0x40 */
  uint32_t WTMK_LVL;                               /**< Watermark Level, offset: 0x44 */
  uint32_t MIX_CTRL;                               /**< Mixer Control, offset: 0x48 */
  uint8_t RESERVED_0[4];
  uint32_t FORCE_EVENT;                            /**< Force Event, offset: 0x50 */
  uint32_t ADMA_ERR_STATUS;                        /**< ADMA Error Status Register, offset: 0x54 */
  uint32_t ADMA_SYS_ADDR;                          /**< ADMA System Address, offset: 0x58 */
  uint8_t RESERVED_1[4];
  uint32_t DLL_CTRL;                               /**< DLL (Delay Line) Control, offset: 0x60 */
  uint32_t DLL_STATUS;                             /**< DLL Status, offset: 0x64 */
  uint32_t CLK_TUNE_CTRL_STATUS;                   /**< CLK Tuning Control and Status, offset: 0x68 */
  uint8_t RESERVED_2[4];
  uint32_t STROBE_DLL_CTRL;                        /**< Strobe DLL Control, offset: 0x70 */
  uint32_t STROBE_DLL_STATUS;                      /**< Strobe DLL Status, offset: 0x74 */
  uint8_t RESERVED_3[72];
  uint32_t VEND_SPEC;                              /**< Vendor Specific Register, offset: 0xC0 */
  uint32_t MMC_BOOT;                               /**< MMC Boot Register, offset: 0xC4 */
  uint32_t VEND_SPEC2;                             /**< Vendor Specific 2 Register, offset: 0xC8 */
  uint32_t TUNING_CTRL;                            /**< Tuning Control Register, offset: 0xCC */
} volatile *USDHC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register accessors */
#define USDHC_DS_ADDR_REG(base)                  ((base)->DS_ADDR)
#define USDHC_BLK_ATT_REG(base)                  ((base)->BLK_ATT)
#define USDHC_CMD_ARG_REG(base)                  ((base)->CMD_ARG)
#define USDHC_CMD_XFR_TYP_REG(base)              ((base)->CMD_XFR_TYP)
#define USDHC_CMD_RSP0_REG(base)                 ((base)->CMD_RSP0)
#define USDHC_CMD_RSP1_REG(base)                 ((base)->CMD_RSP1)
#define USDHC_CMD_RSP2_REG(base)                 ((base)->CMD_RSP2)
#define USDHC_CMD_RSP3_REG(base)                 ((base)->CMD_RSP3)
#define USDHC_DATA_BUFF_ACC_PORT_REG(base)       ((base)->DATA_BUFF_ACC_PORT)
#define USDHC_PRES_STATE_REG(base)               ((base)->PRES_STATE)
#define USDHC_PROT_CTRL_REG(base)                ((base)->PROT_CTRL)
#define USDHC_SYS_CTRL_REG(base)                 ((base)->SYS_CTRL)
#define USDHC_INT_STATUS_REG(base)               ((base)->INT_STATUS)
#define USDHC_INT_STATUS_EN_REG(base)            ((base)->INT_STATUS_EN)
#define USDHC_INT_SIGNAL_EN_REG(base)            ((base)->INT_SIGNAL_EN)
#define USDHC_AUTOCMD12_ERR_STATUS_REG(base)     ((base)->AUTOCMD12_ERR_STATUS)
#define USDHC_HOST_CTRL_CAP_REG(base)            ((base)->HOST_CTRL_CAP)
#define USDHC_WTMK_LVL_REG(base)                 ((base)->WTMK_LVL)
#define USDHC_MIX_CTRL_REG(base)                 ((base)->MIX_CTRL)
#define USDHC_FORCE_EVENT_REG(base)              ((base)->FORCE_EVENT)
#define USDHC_ADMA_ERR_STATUS_REG(base)          ((base)->ADMA_ERR_STATUS)
#define USDHC_ADMA_SYS_ADDR_REG(base)            ((base)->ADMA_SYS_ADDR)
#define USDHC_DLL_CTRL_REG(base)                 ((base)->DLL_CTRL)
#define USDHC_DLL_STATUS_REG(base)               ((base)->DLL_STATUS)
#define USDHC_CLK_TUNE_CTRL_STATUS_REG(base)     ((base)->CLK_TUNE_CTRL_STATUS)
#define USDHC_STROBE_DLL_CTRL_REG(base)          ((base)->STROBE_DLL_CTRL)
#define USDHC_STROBE_DLL_STATUS_REG(base)        ((base)->STROBE_DLL_STATUS)
#define USDHC_VEND_SPEC_REG(base)                ((base)->VEND_SPEC)
#define USDHC_MMC_BOOT_REG(base)                 ((base)->MMC_BOOT)
#define USDHC_VEND_SPEC2_REG(base)               ((base)->VEND_SPEC2)
#define USDHC_TUNING_CTRL_REG(base)              ((base)->TUNING_CTRL)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- USDHC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Masks USDHC Register Masks
 * @{
 */

/*! @name DS_ADDR - DMA System Address */
/*! @{ */
#define USDHC_DS_ADDR_DS_ADDR_MASK               (0xFFFFFFFCU)
#define USDHC_DS_ADDR_DS_ADDR_SHIFT              (2U)
#define USDHC_DS_ADDR_DS_ADDR(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_DS_ADDR_DS_ADDR_SHIFT)) & USDHC_DS_ADDR_DS_ADDR_MASK)
/*! @} */

/*! @name BLK_ATT - Block Attributes */
/*! @{ */
#define USDHC_BLK_ATT_BLKSIZE_MASK               (0x1FFFU)
#define USDHC_BLK_ATT_BLKSIZE_SHIFT              (0U)
/*! BLKSIZE
 *  0b0000000001000..4096 Bytes
 *  0b0001100100000..2048 Bytes
 *  0b0000011001000..512 Bytes
 *  0b0000000000100..4 Bytes
 *  0b0000000000011..3 Bytes
 *  0b0000000000010..2 Bytes
 *  0b0000000000001..1 Byte
 *  0b0000000000000..No data transfer
 */
#define USDHC_BLK_ATT_BLKSIZE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKSIZE_SHIFT)) & USDHC_BLK_ATT_BLKSIZE_MASK)
#define USDHC_BLK_ATT_BLKCNT_MASK                (0xFFFF0000U)
#define USDHC_BLK_ATT_BLKCNT_SHIFT               (16U)
/*! BLKCNT
 *  0b0000000000000010..2 blocks
 *  0b0000000000000001..1 block
 *  0b0000000000000000..Stop Count
 */
#define USDHC_BLK_ATT_BLKCNT(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_BLK_ATT_BLKCNT_SHIFT)) & USDHC_BLK_ATT_BLKCNT_MASK)
/*! @} */

/*! @name CMD_ARG - Command Argument */
/*! @{ */
#define USDHC_CMD_ARG_CMDARG_MASK                (0xFFFFFFFFU)
#define USDHC_CMD_ARG_CMDARG_SHIFT               (0U)
#define USDHC_CMD_ARG_CMDARG(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_ARG_CMDARG_SHIFT)) & USDHC_CMD_ARG_CMDARG_MASK)
/*! @} */

/*! @name CMD_XFR_TYP - Command Transfer Type */
/*! @{ */
#define USDHC_CMD_XFR_TYP_RSPTYP_MASK            (0x30000U)
#define USDHC_CMD_XFR_TYP_RSPTYP_SHIFT           (16U)
/*! RSPTYP - Response Type Select
 *  0b00..No Response
 *  0b01..Response Length 136
 *  0b10..Response Length 48
 *  0b11..Response Length 48, check Busy after response
 */
#define USDHC_CMD_XFR_TYP_RSPTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_RSPTYP_SHIFT)) & USDHC_CMD_XFR_TYP_RSPTYP_MASK)
#define USDHC_CMD_XFR_TYP_CCCEN_MASK             (0x80000U)
#define USDHC_CMD_XFR_TYP_CCCEN_SHIFT            (19U)
#define USDHC_CMD_XFR_TYP_CICEN_MASK             (0x100000U)
#define USDHC_CMD_XFR_TYP_CICEN_SHIFT            (20U)
#define USDHC_CMD_XFR_TYP_DPSEL_MASK             (0x200000U)
#define USDHC_CMD_XFR_TYP_DPSEL_SHIFT            (21U)
#define USDHC_CMD_XFR_TYP_CMDTYP_MASK            (0xC00000U)
#define USDHC_CMD_XFR_TYP_CMDTYP_SHIFT           (22U)
/*! CMDTYP - Command Type
 *  0b11..Abort CMD12, CMD52 for writing I/O Abort in CCCR
 *  0b10..Resume CMD52 for writing Function Select in CCCR
 *  0b01..Suspend CMD52 for writing Bus Suspend in CCCR
 *  0b00..Normal Other commands
 */
#define USDHC_CMD_XFR_TYP_CMDTYP(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDTYP_SHIFT)) & USDHC_CMD_XFR_TYP_CMDTYP_MASK)
#define USDHC_CMD_XFR_TYP_CMDINX_MASK            (0x3F000000U)
#define USDHC_CMD_XFR_TYP_CMDINX_SHIFT           (24U)
#define USDHC_CMD_XFR_TYP_CMDINX(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_XFR_TYP_CMDINX_SHIFT)) & USDHC_CMD_XFR_TYP_CMDINX_MASK)
/*! @} */

/*! @name CMD_RSP0 - Command Response0 */
/*! @{ */
#define USDHC_CMD_RSP0_CMDRSP0_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP0_CMDRSP0_SHIFT             (0U)
#define USDHC_CMD_RSP0_CMDRSP0(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP0_CMDRSP0_SHIFT)) & USDHC_CMD_RSP0_CMDRSP0_MASK)
/*! @} */

/*! @name CMD_RSP1 - Command Response1 */
/*! @{ */
#define USDHC_CMD_RSP1_CMDRSP1_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP1_CMDRSP1_SHIFT             (0U)
#define USDHC_CMD_RSP1_CMDRSP1(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP1_CMDRSP1_SHIFT)) & USDHC_CMD_RSP1_CMDRSP1_MASK)
/*! @} */

/*! @name CMD_RSP2 - Command Response2 */
/*! @{ */
#define USDHC_CMD_RSP2_CMDRSP2_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP2_CMDRSP2_SHIFT             (0U)
#define USDHC_CMD_RSP2_CMDRSP2(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP2_CMDRSP2_SHIFT)) & USDHC_CMD_RSP2_CMDRSP2_MASK)
/*! @} */

/*! @name CMD_RSP3 - Command Response3 */
/*! @{ */
#define USDHC_CMD_RSP3_CMDRSP3_MASK              (0xFFFFFFFFU)
#define USDHC_CMD_RSP3_CMDRSP3_SHIFT             (0U)
#define USDHC_CMD_RSP3_CMDRSP3(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_CMD_RSP3_CMDRSP3_SHIFT)) & USDHC_CMD_RSP3_CMDRSP3_MASK)
/*! @} */

/*! @name DATA_BUFF_ACC_PORT - Data Buffer Access Port */
/*! @{ */
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK    (0xFFFFFFFFU)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT   (0U)
#define USDHC_DATA_BUFF_ACC_PORT_DATCONT(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT)) & USDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK)
/*! @} */

/*! @name PRES_STATE - Present State */
/*! @{ */
#define USDHC_PRES_STATE_CIHB_MASK               (0x1U)
#define USDHC_PRES_STATE_CIHB_SHIFT              (0U)
#define USDHC_PRES_STATE_CDIHB_MASK              (0x2U)
#define USDHC_PRES_STATE_CDIHB_SHIFT             (1U)
#define USDHC_PRES_STATE_DLA_MASK                (0x4U)
#define USDHC_PRES_STATE_DLA_SHIFT               (2U)
#define USDHC_PRES_STATE_SDSTB_MASK              (0x8U)
#define USDHC_PRES_STATE_SDSTB_SHIFT             (3U)
#define USDHC_PRES_STATE_IPGOFF_MASK             (0x10U)
#define USDHC_PRES_STATE_IPGOFF_SHIFT            (4U)
#define USDHC_PRES_STATE_HCKOFF_MASK             (0x20U)
#define USDHC_PRES_STATE_HCKOFF_SHIFT            (5U)
#define USDHC_PRES_STATE_PEROFF_MASK             (0x40U)
#define USDHC_PRES_STATE_PEROFF_SHIFT            (6U)
#define USDHC_PRES_STATE_SDOFF_MASK              (0x80U)
#define USDHC_PRES_STATE_SDOFF_SHIFT             (7U)
#define USDHC_PRES_STATE_WTA_MASK                (0x100U)
#define USDHC_PRES_STATE_WTA_SHIFT               (8U)
#define USDHC_PRES_STATE_RTA_MASK                (0x200U)
#define USDHC_PRES_STATE_RTA_SHIFT               (9U)
#define USDHC_PRES_STATE_BWEN_MASK               (0x400U)
#define USDHC_PRES_STATE_BWEN_SHIFT              (10U)
#define USDHC_PRES_STATE_BREN_MASK               (0x800U)
#define USDHC_PRES_STATE_BREN_SHIFT              (11U)
#define USDHC_PRES_STATE_RTR_MASK                (0x1000U)
#define USDHC_PRES_STATE_RTR_SHIFT               (12U)
#define USDHC_PRES_STATE_TSCD_MASK               (0x8000U)
#define USDHC_PRES_STATE_TSCD_SHIFT              (15U)
#define USDHC_PRES_STATE_CINST_MASK              (0x10000U)
#define USDHC_PRES_STATE_CINST_SHIFT             (16U)
#define USDHC_PRES_STATE_CDPL_MASK               (0x40000U)
#define USDHC_PRES_STATE_CDPL_SHIFT              (18U)
#define USDHC_PRES_STATE_WPSPL_MASK              (0x80000U)
#define USDHC_PRES_STATE_WPSPL_SHIFT             (19U)
#define USDHC_PRES_STATE_CLSL_MASK               (0x800000U)
#define USDHC_PRES_STATE_CLSL_SHIFT              (23U)
#define USDHC_PRES_STATE_DLSL_MASK               (0xFF000000U)
#define USDHC_PRES_STATE_DLSL_SHIFT              (24U)
#define USDHC_PRES_STATE_DLSL(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PRES_STATE_DLSL_SHIFT)) & USDHC_PRES_STATE_DLSL_MASK)
/*! @} */

/*! @name PROT_CTRL - Protocol Control */
/*! @{ */
#define USDHC_PROT_CTRL_LCTL_MASK                (0x1U)
#define USDHC_PROT_CTRL_LCTL_SHIFT               (0U)
#define USDHC_PROT_CTRL_DTW_MASK                 (0x6U)
#define USDHC_PROT_CTRL_DTW_SHIFT                (1U)
/*! DTW - Data Transfer Width
 *  0b10..8-bit mode
 *  0b01..4-bit mode
 *  0b00..1-bit mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_DTW(x)                   (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DTW_SHIFT)) & USDHC_PROT_CTRL_DTW_MASK)
#define USDHC_PROT_CTRL_D3CD_MASK                (0x8U)
#define USDHC_PROT_CTRL_D3CD_SHIFT               (3U)
#define USDHC_PROT_CTRL_EMODE_MASK               (0x30U)
#define USDHC_PROT_CTRL_EMODE_SHIFT              (4U)
/*! EMODE - Endian Mode
 *  0b00..Big Endian Mode
 *  0b01..Half Word Big Endian Mode
 *  0b10..Little Endian Mode
 *  0b11..Reserved
 */
#define USDHC_PROT_CTRL_EMODE(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_EMODE_SHIFT)) & USDHC_PROT_CTRL_EMODE_MASK)
#define USDHC_PROT_CTRL_CDTL_MASK                (0x40U)
#define USDHC_PROT_CTRL_CDTL_SHIFT               (6U)
#define USDHC_PROT_CTRL_CDSS_MASK                (0x80U)
#define USDHC_PROT_CTRL_CDSS_SHIFT               (7U)
#define USDHC_PROT_CTRL_DMASEL_MASK              (0x300U)
#define USDHC_PROT_CTRL_DMASEL_SHIFT             (8U)
/*! DMASEL - DMA Select
 *  0b00..No DMA or Simple DMA is selected
 *  0b01..ADMA1 is selected
 *  0b10..ADMA2 is selected
 *  0b11..reserved
 */
#define USDHC_PROT_CTRL_DMASEL(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_DMASEL_SHIFT)) & USDHC_PROT_CTRL_DMASEL_MASK)
#define USDHC_PROT_CTRL_SABGREQ_MASK             (0x10000U)
#define USDHC_PROT_CTRL_SABGREQ_SHIFT            (16U)
#define USDHC_PROT_CTRL_CREQ_MASK                (0x20000U)
#define USDHC_PROT_CTRL_CREQ_SHIFT               (17U)
#define USDHC_PROT_CTRL_RWCTL_MASK               (0x40000U)
#define USDHC_PROT_CTRL_RWCTL_SHIFT              (18U)
#define USDHC_PROT_CTRL_IABG_MASK                (0x80000U)
#define USDHC_PROT_CTRL_IABG_SHIFT               (19U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK     (0x100000U)
#define USDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT    (20U)
#define USDHC_PROT_CTRL_WECINT_MASK              (0x1000000U)
#define USDHC_PROT_CTRL_WECINT_SHIFT             (24U)
#define USDHC_PROT_CTRL_WECINS_MASK              (0x2000000U)
#define USDHC_PROT_CTRL_WECINS_SHIFT             (25U)
#define USDHC_PROT_CTRL_WECRM_MASK               (0x4000000U)
#define USDHC_PROT_CTRL_WECRM_SHIFT              (26U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_MASK        (0x38000000U)
#define USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT       (27U)
/*! BURST_LEN_EN - BURST length enable for INCR, INCR4 / INCR8 / INCR16, INCR4-WRAP / INCR8-WRAP / INCR16-WRAP
 *  0bxx1..Burst length is enabled for INCR
 *  0bx1x..Burst length is enabled for INCR4 / INCR8 / INCR16
 *  0b1xx..Burst length is enabled for INCR4-WRAP / INCR8-WRAP / INCR16-WRAP
 */
#define USDHC_PROT_CTRL_BURST_LEN_EN(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_PROT_CTRL_BURST_LEN_EN_SHIFT)) & USDHC_PROT_CTRL_BURST_LEN_EN_MASK)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK    (0x40000000U)
#define USDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT   (30U)
/*! @} */

/*! @name SYS_CTRL - System Control */
/*! @{ */
#define USDHC_SYS_CTRL_DVS_MASK                  (0xF0U)
#define USDHC_SYS_CTRL_DVS_SHIFT                 (4U)
/*! DVS - Divisor
 *  0b0000..Divide-by-1
 *  0b0001..Divide-by-2
 *  0b1110..Divide-by-15
 *  0b1111..Divide-by-16
 */
#define USDHC_SYS_CTRL_DVS(x)                    (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DVS_SHIFT)) & USDHC_SYS_CTRL_DVS_MASK)
#define USDHC_SYS_CTRL_SDCLKFS_MASK              (0xFF00U)
#define USDHC_SYS_CTRL_SDCLKFS_SHIFT             (8U)
#define USDHC_SYS_CTRL_SDCLKFS(x)                (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_SDCLKFS_SHIFT)) & USDHC_SYS_CTRL_SDCLKFS_MASK)
#define USDHC_SYS_CTRL_DTOCV_MASK                (0xF0000U)
#define USDHC_SYS_CTRL_DTOCV_SHIFT               (16U)
/*! DTOCV - Data Timeout Counter Value
 *  0b1111..SDCLK x 2 29
 *  0b1110..SDCLK x 2 28
 *  0b0001..SDCLK x 2 15
 *  0b0000..SDCLK x 2 14
 */
#define USDHC_SYS_CTRL_DTOCV(x)                  (((uint32_t)(((uint32_t)(x)) << USDHC_SYS_CTRL_DTOCV_SHIFT)) & USDHC_SYS_CTRL_DTOCV_MASK)
#define USDHC_SYS_CTRL_IPP_RST_N_MASK            (0x800000U)
#define USDHC_SYS_CTRL_IPP_RST_N_SHIFT           (23U)
#define USDHC_SYS_CTRL_RSTA_MASK                 (0x1000000U)
#define USDHC_SYS_CTRL_RSTA_SHIFT                (24U)
#define USDHC_SYS_CTRL_RSTC_MASK                 (0x2000000U)
#define USDHC_SYS_CTRL_RSTC_SHIFT                (25U)
#define USDHC_SYS_CTRL_RSTD_MASK                 (0x4000000U)
#define USDHC_SYS_CTRL_RSTD_SHIFT                (26U)
#define USDHC_SYS_CTRL_INITA_MASK                (0x8000000U)
#define USDHC_SYS_CTRL_INITA_SHIFT               (27U)
#define USDHC_SYS_CTRL_RSTT_MASK                 (0x10000000U)
#define USDHC_SYS_CTRL_RSTT_SHIFT                (28U)
/*! @} */

/*! @name INT_STATUS - Interrupt Status */
/*! @{ */
#define USDHC_INT_STATUS_CC_MASK                 (0x1U)
#define USDHC_INT_STATUS_CC_SHIFT                (0U)
#define USDHC_INT_STATUS_TC_MASK                 (0x2U)
#define USDHC_INT_STATUS_TC_SHIFT                (1U)
#define USDHC_INT_STATUS_BGE_MASK                (0x4U)
#define USDHC_INT_STATUS_BGE_SHIFT               (2U)
#define USDHC_INT_STATUS_DINT_MASK               (0x8U)
#define USDHC_INT_STATUS_DINT_SHIFT              (3U)
#define USDHC_INT_STATUS_BWR_MASK                (0x10U)
#define USDHC_INT_STATUS_BWR_SHIFT               (4U)
#define USDHC_INT_STATUS_BRR_MASK                (0x20U)
#define USDHC_INT_STATUS_BRR_SHIFT               (5U)
#define USDHC_INT_STATUS_CINS_MASK               (0x40U)
#define USDHC_INT_STATUS_CINS_SHIFT              (6U)
#define USDHC_INT_STATUS_CRM_MASK                (0x80U)
#define USDHC_INT_STATUS_CRM_SHIFT               (7U)
#define USDHC_INT_STATUS_CINT_MASK               (0x100U)
#define USDHC_INT_STATUS_CINT_SHIFT              (8U)
#define USDHC_INT_STATUS_RTE_MASK                (0x1000U)
#define USDHC_INT_STATUS_RTE_SHIFT               (12U)
#define USDHC_INT_STATUS_TP_MASK                 (0x2000U)
#define USDHC_INT_STATUS_TP_SHIFT                (13U)
#define USDHC_INT_STATUS_CQI_MASK                (0x4000U)
#define USDHC_INT_STATUS_CQI_SHIFT               (14U)
#define USDHC_INT_STATUS_CTOE_MASK               (0x10000U)
#define USDHC_INT_STATUS_CTOE_SHIFT              (16U)
#define USDHC_INT_STATUS_CCE_MASK                (0x20000U)
#define USDHC_INT_STATUS_CCE_SHIFT               (17U)
#define USDHC_INT_STATUS_CEBE_MASK               (0x40000U)
#define USDHC_INT_STATUS_CEBE_SHIFT              (18U)
#define USDHC_INT_STATUS_CIE_MASK                (0x80000U)
#define USDHC_INT_STATUS_CIE_SHIFT               (19U)
#define USDHC_INT_STATUS_DTOE_MASK               (0x100000U)
#define USDHC_INT_STATUS_DTOE_SHIFT              (20U)
#define USDHC_INT_STATUS_DCE_MASK                (0x200000U)
#define USDHC_INT_STATUS_DCE_SHIFT               (21U)
#define USDHC_INT_STATUS_DEBE_MASK               (0x400000U)
#define USDHC_INT_STATUS_DEBE_SHIFT              (22U)
#define USDHC_INT_STATUS_AC12E_MASK              (0x1000000U)
#define USDHC_INT_STATUS_AC12E_SHIFT             (24U)
#define USDHC_INT_STATUS_TNE_MASK                (0x4000000U)
#define USDHC_INT_STATUS_TNE_SHIFT               (26U)
#define USDHC_INT_STATUS_DMAE_MASK               (0x10000000U)
#define USDHC_INT_STATUS_DMAE_SHIFT              (28U)
/*! @} */

/*! @name INT_STATUS_EN - Interrupt Status Enable */
/*! @{ */
#define USDHC_INT_STATUS_EN_CCSEN_MASK           (0x1U)
#define USDHC_INT_STATUS_EN_CCSEN_SHIFT          (0U)
#define USDHC_INT_STATUS_EN_TCSEN_MASK           (0x2U)
#define USDHC_INT_STATUS_EN_TCSEN_SHIFT          (1U)
#define USDHC_INT_STATUS_EN_BGESEN_MASK          (0x4U)
#define USDHC_INT_STATUS_EN_BGESEN_SHIFT         (2U)
#define USDHC_INT_STATUS_EN_DINTSEN_MASK         (0x8U)
#define USDHC_INT_STATUS_EN_DINTSEN_SHIFT        (3U)
#define USDHC_INT_STATUS_EN_BWRSEN_MASK          (0x10U)
#define USDHC_INT_STATUS_EN_BWRSEN_SHIFT         (4U)
#define USDHC_INT_STATUS_EN_BRRSEN_MASK          (0x20U)
#define USDHC_INT_STATUS_EN_BRRSEN_SHIFT         (5U)
#define USDHC_INT_STATUS_EN_CINSSEN_MASK         (0x40U)
#define USDHC_INT_STATUS_EN_CINSSEN_SHIFT        (6U)
#define USDHC_INT_STATUS_EN_CRMSEN_MASK          (0x80U)
#define USDHC_INT_STATUS_EN_CRMSEN_SHIFT         (7U)
#define USDHC_INT_STATUS_EN_CINTSEN_MASK         (0x100U)
#define USDHC_INT_STATUS_EN_CINTSEN_SHIFT        (8U)
#define USDHC_INT_STATUS_EN_RTESEN_MASK          (0x1000U)
#define USDHC_INT_STATUS_EN_RTESEN_SHIFT         (12U)
#define USDHC_INT_STATUS_EN_TPSEN_MASK           (0x2000U)
#define USDHC_INT_STATUS_EN_TPSEN_SHIFT          (13U)
#define USDHC_INT_STATUS_EN_CQISEN_MASK          (0x4000U)
#define USDHC_INT_STATUS_EN_CQISEN_SHIFT         (14U)
#define USDHC_INT_STATUS_EN_CTOESEN_MASK         (0x10000U)
#define USDHC_INT_STATUS_EN_CTOESEN_SHIFT        (16U)
#define USDHC_INT_STATUS_EN_CCESEN_MASK          (0x20000U)
#define USDHC_INT_STATUS_EN_CCESEN_SHIFT         (17U)
#define USDHC_INT_STATUS_EN_CEBESEN_MASK         (0x40000U)
#define USDHC_INT_STATUS_EN_CEBESEN_SHIFT        (18U)
#define USDHC_INT_STATUS_EN_CIESEN_MASK          (0x80000U)
#define USDHC_INT_STATUS_EN_CIESEN_SHIFT         (19U)
#define USDHC_INT_STATUS_EN_DTOESEN_MASK         (0x100000U)
#define USDHC_INT_STATUS_EN_DTOESEN_SHIFT        (20U)
#define USDHC_INT_STATUS_EN_DCESEN_MASK          (0x200000U)
#define USDHC_INT_STATUS_EN_DCESEN_SHIFT         (21U)
#define USDHC_INT_STATUS_EN_DEBESEN_MASK         (0x400000U)
#define USDHC_INT_STATUS_EN_DEBESEN_SHIFT        (22U)
#define USDHC_INT_STATUS_EN_AC12ESEN_MASK        (0x1000000U)
#define USDHC_INT_STATUS_EN_AC12ESEN_SHIFT       (24U)
#define USDHC_INT_STATUS_EN_TNESEN_MASK          (0x4000000U)
#define USDHC_INT_STATUS_EN_TNESEN_SHIFT         (26U)
#define USDHC_INT_STATUS_EN_DMAESEN_MASK         (0x10000000U)
#define USDHC_INT_STATUS_EN_DMAESEN_SHIFT        (28U)
/*! @} */

/*! @name INT_SIGNAL_EN - Interrupt Signal Enable */
/*! @{ */
#define USDHC_INT_SIGNAL_EN_CCIEN_MASK           (0x1U)
#define USDHC_INT_SIGNAL_EN_CCIEN_SHIFT          (0U)
#define USDHC_INT_SIGNAL_EN_TCIEN_MASK           (0x2U)
#define USDHC_INT_SIGNAL_EN_TCIEN_SHIFT          (1U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_MASK          (0x4U)
#define USDHC_INT_SIGNAL_EN_BGEIEN_SHIFT         (2U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_MASK         (0x8U)
#define USDHC_INT_SIGNAL_EN_DINTIEN_SHIFT        (3U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_MASK          (0x10U)
#define USDHC_INT_SIGNAL_EN_BWRIEN_SHIFT         (4U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_MASK          (0x20U)
#define USDHC_INT_SIGNAL_EN_BRRIEN_SHIFT         (5U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_MASK         (0x40U)
#define USDHC_INT_SIGNAL_EN_CINSIEN_SHIFT        (6U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_MASK          (0x80U)
#define USDHC_INT_SIGNAL_EN_CRMIEN_SHIFT         (7U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_MASK         (0x100U)
#define USDHC_INT_SIGNAL_EN_CINTIEN_SHIFT        (8U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_MASK          (0x1000U)
#define USDHC_INT_SIGNAL_EN_RTEIEN_SHIFT         (12U)
#define USDHC_INT_SIGNAL_EN_TPIEN_MASK           (0x2000U)
#define USDHC_INT_SIGNAL_EN_TPIEN_SHIFT          (13U)
#define USDHC_INT_SIGNAL_EN_CQIIEN_MASK          (0x4000U)
#define USDHC_INT_SIGNAL_EN_CQIIEN_SHIFT         (14U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_MASK         (0x10000U)
#define USDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT        (16U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_MASK          (0x20000U)
#define USDHC_INT_SIGNAL_EN_CCEIEN_SHIFT         (17U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_MASK         (0x40000U)
#define USDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT        (18U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_MASK          (0x80000U)
#define USDHC_INT_SIGNAL_EN_CIEIEN_SHIFT         (19U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_MASK         (0x100000U)
#define USDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT        (20U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_MASK          (0x200000U)
#define USDHC_INT_SIGNAL_EN_DCEIEN_SHIFT         (21U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_MASK         (0x400000U)
#define USDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT        (22U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_MASK        (0x1000000U)
#define USDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT       (24U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_MASK          (0x4000000U)
#define USDHC_INT_SIGNAL_EN_TNEIEN_SHIFT         (26U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_MASK         (0x10000000U)
#define USDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT        (28U)
/*! @} */

/*! @name AUTOCMD12_ERR_STATUS - Auto CMD12 Error Status */
/*! @{ */
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK   (0x1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT  (0U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK  (0x2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT (1U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK  (0x4U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT (2U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK   (0x8U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT  (3U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK   (0x10U)
#define USDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT  (4U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK (0x80U)
#define USDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT (7U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK (0x400000U)
#define USDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT (22U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK (0x800000U)
#define USDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT (23U)
/*! @} */

/*! @name HOST_CTRL_CAP - Host Controller Capabilities */
/*! @{ */
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK   (0x1U)
#define USDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT  (0U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK  (0x2U)
#define USDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT (1U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK   (0x4U)
#define USDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT  (2U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK (0xF00U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT (8U)
#define USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING(x) (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT)) & USDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK (0x2000U)
#define USDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT (13U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK   (0xC000U)
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT  (14U)
/*! RETUNING_MODE - Retuning Mode
 *  0b00..Mode 1
 *  0b01..Mode 2
 *  0b10..Mode 3
 *  0b11..Reserved
 */
#define USDHC_HOST_CTRL_CAP_RETUNING_MODE(x)     (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT)) & USDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK)
#define USDHC_HOST_CTRL_CAP_MBL_MASK             (0x70000U)
#define USDHC_HOST_CTRL_CAP_MBL_SHIFT            (16U)
/*! MBL - Max Block Length
 *  0b000..512 bytes
 *  0b001..1024 bytes
 *  0b010..2048 bytes
 *  0b011..4096 bytes
 */
#define USDHC_HOST_CTRL_CAP_MBL(x)               (((uint32_t)(((uint32_t)(x)) << USDHC_HOST_CTRL_CAP_MBL_SHIFT)) & USDHC_HOST_CTRL_CAP_MBL_MASK)
#define USDHC_HOST_CTRL_CAP_ADMAS_MASK           (0x100000U)
#define USDHC_HOST_CTRL_CAP_ADMAS_SHIFT          (20U)
#define USDHC_HOST_CTRL_CAP_HSS_MASK             (0x200000U)
#define USDHC_HOST_CTRL_CAP_HSS_SHIFT            (21U)
#define USDHC_HOST_CTRL_CAP_DMAS_MASK            (0x400000U)
#define USDHC_HOST_CTRL_CAP_DMAS_SHIFT           (22U)
#define USDHC_HOST_CTRL_CAP_SRS_MASK             (0x800000U)
#define USDHC_HOST_CTRL_CAP_SRS_SHIFT            (23U)
#define USDHC_HOST_CTRL_CAP_VS33_MASK            (0x1000000U)
#define USDHC_HOST_CTRL_CAP_VS33_SHIFT           (24U)
#define USDHC_HOST_CTRL_CAP_VS30_MASK            (0x2000000U)
#define USDHC_HOST_CTRL_CAP_VS30_SHIFT           (25U)
#define USDHC_HOST_CTRL_CAP_VS18_MASK            (0x4000000U)
#define USDHC_HOST_CTRL_CAP_VS18_SHIFT           (26U)
/*! @} */

/*! @name WTMK_LVL - Watermark Level */
/*! @{ */
#define USDHC_WTMK_LVL_RD_WML_MASK               (0xFFU)
#define USDHC_WTMK_LVL_RD_WML_SHIFT              (0U)
#define USDHC_WTMK_LVL_RD_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_WML_SHIFT)) & USDHC_WTMK_LVL_RD_WML_MASK)
#define USDHC_WTMK_LVL_RD_BRST_LEN_MASK          (0x1F00U)
#define USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT         (8U)
#define USDHC_WTMK_LVL_RD_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_RD_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_RD_BRST_LEN_MASK)
#define USDHC_WTMK_LVL_WR_WML_MASK               (0xFF0000U)
#define USDHC_WTMK_LVL_WR_WML_SHIFT              (16U)
#define USDHC_WTMK_LVL_WR_WML(x)                 (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_WML_SHIFT)) & USDHC_WTMK_LVL_WR_WML_MASK)
#define USDHC_WTMK_LVL_WR_BRST_LEN_MASK          (0x1F000000U)
#define USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT         (24U)
#define USDHC_WTMK_LVL_WR_BRST_LEN(x)            (((uint32_t)(((uint32_t)(x)) << USDHC_WTMK_LVL_WR_BRST_LEN_SHIFT)) & USDHC_WTMK_LVL_WR_BRST_LEN_MASK)
/*! @} */

/*! @name MIX_CTRL - Mixer Control */
/*! @{ */
#define USDHC_MIX_CTRL_DMAEN_MASK                (0x1U)
#define USDHC_MIX_CTRL_DMAEN_SHIFT               (0U)
#define USDHC_MIX_CTRL_BCEN_MASK                 (0x2U)
#define USDHC_MIX_CTRL_BCEN_SHIFT                (1U)
#define USDHC_MIX_CTRL_AC12EN_MASK               (0x4U)
#define USDHC_MIX_CTRL_AC12EN_SHIFT              (2U)
#define USDHC_MIX_CTRL_DDR_EN_MASK               (0x8U)
#define USDHC_MIX_CTRL_DDR_EN_SHIFT              (3U)
#define USDHC_MIX_CTRL_DTDSEL_MASK               (0x10U)
#define USDHC_MIX_CTRL_DTDSEL_SHIFT              (4U)
#define USDHC_MIX_CTRL_MSBSEL_MASK               (0x20U)
#define USDHC_MIX_CTRL_MSBSEL_SHIFT              (5U)
#define USDHC_MIX_CTRL_NIBBLE_POS_MASK           (0x40U)
#define USDHC_MIX_CTRL_NIBBLE_POS_SHIFT          (6U)
#define USDHC_MIX_CTRL_AC23EN_MASK               (0x80U)
#define USDHC_MIX_CTRL_AC23EN_SHIFT              (7U)
#define USDHC_MIX_CTRL_EXE_TUNE_MASK             (0x400000U)
#define USDHC_MIX_CTRL_EXE_TUNE_SHIFT            (22U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_MASK          (0x800000U)
#define USDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT         (23U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_MASK         (0x1000000U)
#define USDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT        (24U)
#define USDHC_MIX_CTRL_FBCLK_SEL_MASK            (0x2000000U)
#define USDHC_MIX_CTRL_FBCLK_SEL_SHIFT           (25U)
#define USDHC_MIX_CTRL_HS400_MODE_MASK           (0x4000000U)
#define USDHC_MIX_CTRL_HS400_MODE_SHIFT          (26U)
#define USDHC_MIX_CTRL_EN_HS400_MODE_MASK        (0x8000000U)
#define USDHC_MIX_CTRL_EN_HS400_MODE_SHIFT       (27U)
/*! @} */

/*! @name FORCE_EVENT - Force Event */
/*! @{ */
#define USDHC_FORCE_EVENT_FEVTAC12NE_MASK        (0x1U)
#define USDHC_FORCE_EVENT_FEVTAC12NE_SHIFT       (0U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_MASK       (0x2U)
#define USDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT      (1U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_MASK        (0x4U)
#define USDHC_FORCE_EVENT_FEVTAC12CE_SHIFT       (2U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_MASK       (0x8U)
#define USDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT      (3U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_MASK        (0x10U)
#define USDHC_FORCE_EVENT_FEVTAC12IE_SHIFT       (4U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK     (0x80U)
#define USDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT    (7U)
#define USDHC_FORCE_EVENT_FEVTCTOE_MASK          (0x10000U)
#define USDHC_FORCE_EVENT_FEVTCTOE_SHIFT         (16U)
#define USDHC_FORCE_EVENT_FEVTCCE_MASK           (0x20000U)
#define USDHC_FORCE_EVENT_FEVTCCE_SHIFT          (17U)
#define USDHC_FORCE_EVENT_FEVTCEBE_MASK          (0x40000U)
#define USDHC_FORCE_EVENT_FEVTCEBE_SHIFT         (18U)
#define USDHC_FORCE_EVENT_FEVTCIE_MASK           (0x80000U)
#define USDHC_FORCE_EVENT_FEVTCIE_SHIFT          (19U)
#define USDHC_FORCE_EVENT_FEVTDTOE_MASK          (0x100000U)
#define USDHC_FORCE_EVENT_FEVTDTOE_SHIFT         (20U)
#define USDHC_FORCE_EVENT_FEVTDCE_MASK           (0x200000U)
#define USDHC_FORCE_EVENT_FEVTDCE_SHIFT          (21U)
#define USDHC_FORCE_EVENT_FEVTDEBE_MASK          (0x400000U)
#define USDHC_FORCE_EVENT_FEVTDEBE_SHIFT         (22U)
#define USDHC_FORCE_EVENT_FEVTAC12E_MASK         (0x1000000U)
#define USDHC_FORCE_EVENT_FEVTAC12E_SHIFT        (24U)
#define USDHC_FORCE_EVENT_FEVTTNE_MASK           (0x4000000U)
#define USDHC_FORCE_EVENT_FEVTTNE_SHIFT          (26U)
#define USDHC_FORCE_EVENT_FEVTDMAE_MASK          (0x10000000U)
#define USDHC_FORCE_EVENT_FEVTDMAE_SHIFT         (28U)
#define USDHC_FORCE_EVENT_FEVTCINT_MASK          (0x80000000U)
#define USDHC_FORCE_EVENT_FEVTCINT_SHIFT         (31U)
/*! @} */

/*! @name ADMA_ERR_STATUS - ADMA Error Status Register */
/*! @{ */
#define USDHC_ADMA_ERR_STATUS_ADMAES_MASK        (0x3U)
#define USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT       (0U)
#define USDHC_ADMA_ERR_STATUS_ADMAES(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_ERR_STATUS_ADMAES_SHIFT)) & USDHC_ADMA_ERR_STATUS_ADMAES_MASK)
#define USDHC_ADMA_ERR_STATUS_ADMALME_MASK       (0x4U)
#define USDHC_ADMA_ERR_STATUS_ADMALME_SHIFT      (2U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_MASK       (0x8U)
#define USDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT      (3U)
/*! @} */

/*! @name ADMA_SYS_ADDR - ADMA System Address */
/*! @{ */
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK        (0xFFFFFFFCU)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT       (2U)
#define USDHC_ADMA_SYS_ADDR_ADS_ADDR(x)          (((uint32_t)(((uint32_t)(x)) << USDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT)) & USDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK)
/*! @} */

/*! @name DLL_CTRL - DLL (Delay Line) Control */
/*! @{ */
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK      (0x1U)
#define USDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT     (0U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_MASK       (0x2U)
#define USDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT      (1U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK (0x78U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT (3U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK (0x80U)
#define USDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT (7U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK (0x70000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT (16U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name DLL_STATUS - DLL Status */
/*! @{ */
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK   (0x1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT  (0U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK   (0x2U)
#define USDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT  (1U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK    (0x1FCU)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT   (2U)
#define USDHC_DLL_STATUS_DLL_STS_SLV_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK    (0xFE00U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT   (9U)
#define USDHC_DLL_STATUS_DLL_STS_REF_SEL(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT)) & USDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name CLK_TUNE_CTRL_STATUS - CLK Tuning Control and Status */
/*! @{ */
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK (0xFU)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT (0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK (0xF0U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT (4U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK (0x7F00U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT (8U)
#define USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK  (0x8000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT (15U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK (0xF0000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT (16U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK (0xF00000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT (20U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK (0x7F000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT (24U)
#define USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE(x) (((uint32_t)(((uint32_t)(x)) << USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT)) & USDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK  (0x80000000U)
#define USDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT (31U)
/*! @} */

/*! @name STROBE_DLL_CTRL - Strobe DLL Control */
/*! @{ */
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_MASK (0x1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_ENABLE_SHIFT (0U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_MASK (0x2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_RESET_SHIFT (1U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_MASK (0x4U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_FORCE_UPD_SHIFT (2U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK (0x38U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT (3U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_DLY_TARGET_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_MASK (0x40U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_0_SHIFT (6U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_MASK (0x80U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_GATE_UPDATE_1_SHIFT (7U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_MASK (0x100U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_SHIFT (8U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT (9U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_OVERRIDE_VAL_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK (0xFF00000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT (20U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_SLV_UPDATE_INT_MASK)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK (0xF0000000U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT (28U)
#define USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_SHIFT)) & USDHC_STROBE_DLL_CTRL_STROBE_DLL_CTRL_REF_UPDATE_INT_MASK)
/*! @} */

/*! @name STROBE_DLL_STATUS - Strobe DLL Status */
/*! @{ */
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_MASK (0x1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_LOCK_SHIFT (0U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_MASK (0x2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_LOCK_SHIFT (1U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK (0x1FCU)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT (2U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_SLV_SEL_MASK)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK (0xFE00U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT (9U)
#define USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL(x) (((uint32_t)(((uint32_t)(x)) << USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_SHIFT)) & USDHC_STROBE_DLL_STATUS_STROBE_DLL_STS_REF_SEL_MASK)
/*! @} */

/*! @name VEND_SPEC - Vendor Specific Register */
/*! @{ */
#define USDHC_VEND_SPEC_EXT_DMA_EN_MASK          (0x1U)
#define USDHC_VEND_SPEC_EXT_DMA_EN_SHIFT         (0U)
#define USDHC_VEND_SPEC_VSELECT_MASK             (0x2U)
#define USDHC_VEND_SPEC_VSELECT_SHIFT            (1U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK     (0x4U)
#define USDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT    (2U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK  (0x8U)
#define USDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT (3U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_MASK        (0x100U)
#define USDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT       (8U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_MASK         (0x8000U)
#define USDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT        (15U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_MASK         (0x80000000U)
#define USDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT        (31U)
/*! @} */

/*! @name MMC_BOOT - MMC Boot Register */
/*! @{ */
#define USDHC_MMC_BOOT_DTOCV_ACK_MASK            (0xFU)
#define USDHC_MMC_BOOT_DTOCV_ACK_SHIFT           (0U)
/*! DTOCV_ACK
 *  0b0000..SDCLK x 2^13
 *  0b0001..SDCLK x 2^14
 *  0b0010..SDCLK x 2^15
 *  0b0011..SDCLK x 2^16
 *  0b0100..SDCLK x 2^17
 *  0b0101..SDCLK x 2^18
 *  0b0110..SDCLK x 2^19
 *  0b0111..SDCLK x 2^20
 *  0b1110..SDCLK x 2^27
 *  0b1111..SDCLK x 2^28
 */
#define USDHC_MMC_BOOT_DTOCV_ACK(x)              (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_DTOCV_ACK_SHIFT)) & USDHC_MMC_BOOT_DTOCV_ACK_MASK)
#define USDHC_MMC_BOOT_BOOT_ACK_MASK             (0x10U)
#define USDHC_MMC_BOOT_BOOT_ACK_SHIFT            (4U)
#define USDHC_MMC_BOOT_BOOT_MODE_MASK            (0x20U)
#define USDHC_MMC_BOOT_BOOT_MODE_SHIFT           (5U)
#define USDHC_MMC_BOOT_BOOT_EN_MASK              (0x40U)
#define USDHC_MMC_BOOT_BOOT_EN_SHIFT             (6U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_MASK         (0x80U)
#define USDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT        (7U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK     (0x100U)
#define USDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT    (8U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK         (0xFFFF0000U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT        (16U)
#define USDHC_MMC_BOOT_BOOT_BLK_CNT(x)           (((uint32_t)(((uint32_t)(x)) << USDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT)) & USDHC_MMC_BOOT_BOOT_BLK_CNT_MASK)
/*! @} */

/*! @name VEND_SPEC2 - Vendor Specific 2 Register */
/*! @{ */
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK   (0x8U)
#define USDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT  (3U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_MASK     (0x10U)
#define USDHC_VEND_SPEC2_TUNING_8bit_EN_SHIFT    (4U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_MASK     (0x20U)
#define USDHC_VEND_SPEC2_TUNING_1bit_EN_SHIFT    (5U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_MASK      (0x40U)
#define USDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT     (6U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_MASK (0x400U)
#define USDHC_VEND_SPEC2_HS400_WR_CLK_STOP_EN_SHIFT (10U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_MASK (0x800U)
#define USDHC_VEND_SPEC2_HS400_RD_CLK_STOP_EN_SHIFT (11U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_MASK    (0x1000U)
#define USDHC_VEND_SPEC2_ACMD23_ARGU2_EN_SHIFT   (12U)
#define USDHC_VEND_SPEC2_EN_32K_CLK_MASK         (0x8000U)
#define USDHC_VEND_SPEC2_EN_32K_CLK_SHIFT        (15U)
#define USDHC_VEND_SPEC2_FBCLK_TAP_SEL_MASK      (0xFFFF0000U)
#define USDHC_VEND_SPEC2_FBCLK_TAP_SEL_SHIFT     (16U)
#define USDHC_VEND_SPEC2_FBCLK_TAP_SEL(x)        (((uint32_t)(((uint32_t)(x)) << USDHC_VEND_SPEC2_FBCLK_TAP_SEL_SHIFT)) & USDHC_VEND_SPEC2_FBCLK_TAP_SEL_MASK)
/*! @} */

/*! @name TUNING_CTRL - Tuning Control Register */
/*! @{ */
#define USDHC_TUNING_CTRL_TUNING_START_TAP_MASK  (0xFFU)
#define USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT (0U)
#define USDHC_TUNING_CTRL_TUNING_START_TAP(x)    (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_START_TAP_MASK)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_MASK    (0xFF00U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT   (8U)
#define USDHC_TUNING_CTRL_TUNING_COUNTER(x)      (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT)) & USDHC_TUNING_CTRL_TUNING_COUNTER_MASK)
#define USDHC_TUNING_CTRL_TUNING_STEP_MASK       (0x70000U)
#define USDHC_TUNING_CTRL_TUNING_STEP_SHIFT      (16U)
#define USDHC_TUNING_CTRL_TUNING_STEP(x)         (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_STEP_SHIFT)) & USDHC_TUNING_CTRL_TUNING_STEP_MASK)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_MASK     (0x700000U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT    (20U)
#define USDHC_TUNING_CTRL_TUNING_WINDOW(x)       (((uint32_t)(((uint32_t)(x)) << USDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT)) & USDHC_TUNING_CTRL_TUNING_WINDOW_MASK)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_MASK     (0x1000000U)
#define USDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT    (24U)
/*! @} */


/*!
 * @}
 */ /* end of group USDHC_Register_Masks */


/* USDHC - Peripheral instance base addresses */
/** Peripheral uSDHC1 base pointer */
#define uSDHC1_BASE_PTR                          ((USDHC_MemMapPtr)0x30B40000u)
/** Peripheral uSDHC2 base pointer */
#define uSDHC2_BASE_PTR                          ((USDHC_MemMapPtr)0x30B50000u)
/** Peripheral uSDHC3 base pointer */
#define uSDHC3_BASE_PTR                          ((USDHC_MemMapPtr)0x30B60000u)
/** Array initializer of USDHC peripheral base pointers */
#define USDHC_BASE_PTRS                          { uSDHC1_BASE_PTR, uSDHC2_BASE_PTR, uSDHC3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- USDHC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup USDHC_Register_Accessor_Macros USDHC - Register accessor macros
 * @{
 */


/* USDHC - Register instance definitions */
/* uSDHC1 */
#define uSDHC1_DS_ADDR                           USDHC_DS_ADDR_REG(uSDHC1_BASE_PTR)
#define uSDHC1_BLK_ATT                           USDHC_BLK_ATT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_ARG                           USDHC_CMD_ARG_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP0                          USDHC_CMD_RSP0_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP1                          USDHC_CMD_RSP1_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP2                          USDHC_CMD_RSP2_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CMD_RSP3                          USDHC_CMD_RSP3_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_PRES_STATE                        USDHC_PRES_STATE_REG(uSDHC1_BASE_PTR)
#define uSDHC1_PROT_CTRL                         USDHC_PROT_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_SYS_CTRL                          USDHC_SYS_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_STATUS                        USDHC_INT_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(uSDHC1_BASE_PTR)
#define uSDHC1_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(uSDHC1_BASE_PTR)
#define uSDHC1_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(uSDHC1_BASE_PTR)
#define uSDHC1_WTMK_LVL                          USDHC_WTMK_LVL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_MIX_CTRL                          USDHC_MIX_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DLL_CTRL                          USDHC_DLL_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_DLL_STATUS                        USDHC_DLL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(uSDHC1_BASE_PTR)
#define uSDHC1_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(uSDHC1_BASE_PTR)
#define uSDHC1_VEND_SPEC                         USDHC_VEND_SPEC_REG(uSDHC1_BASE_PTR)
#define uSDHC1_MMC_BOOT                          USDHC_MMC_BOOT_REG(uSDHC1_BASE_PTR)
#define uSDHC1_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(uSDHC1_BASE_PTR)
#define uSDHC1_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(uSDHC1_BASE_PTR)
/* uSDHC2 */
#define uSDHC2_DS_ADDR                           USDHC_DS_ADDR_REG(uSDHC2_BASE_PTR)
#define uSDHC2_BLK_ATT                           USDHC_BLK_ATT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_ARG                           USDHC_CMD_ARG_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP0                          USDHC_CMD_RSP0_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP1                          USDHC_CMD_RSP1_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP2                          USDHC_CMD_RSP2_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CMD_RSP3                          USDHC_CMD_RSP3_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_PRES_STATE                        USDHC_PRES_STATE_REG(uSDHC2_BASE_PTR)
#define uSDHC2_PROT_CTRL                         USDHC_PROT_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_SYS_CTRL                          USDHC_SYS_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_STATUS                        USDHC_INT_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(uSDHC2_BASE_PTR)
#define uSDHC2_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(uSDHC2_BASE_PTR)
#define uSDHC2_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(uSDHC2_BASE_PTR)
#define uSDHC2_WTMK_LVL                          USDHC_WTMK_LVL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_MIX_CTRL                          USDHC_MIX_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DLL_CTRL                          USDHC_DLL_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_DLL_STATUS                        USDHC_DLL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(uSDHC2_BASE_PTR)
#define uSDHC2_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(uSDHC2_BASE_PTR)
#define uSDHC2_VEND_SPEC                         USDHC_VEND_SPEC_REG(uSDHC2_BASE_PTR)
#define uSDHC2_MMC_BOOT                          USDHC_MMC_BOOT_REG(uSDHC2_BASE_PTR)
#define uSDHC2_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(uSDHC2_BASE_PTR)
#define uSDHC2_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(uSDHC2_BASE_PTR)
/* uSDHC3 */
#define uSDHC3_DS_ADDR                           USDHC_DS_ADDR_REG(uSDHC3_BASE_PTR)
#define uSDHC3_BLK_ATT                           USDHC_BLK_ATT_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_ARG                           USDHC_CMD_ARG_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_XFR_TYP                       USDHC_CMD_XFR_TYP_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_RSP0                          USDHC_CMD_RSP0_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_RSP1                          USDHC_CMD_RSP1_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_RSP2                          USDHC_CMD_RSP2_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CMD_RSP3                          USDHC_CMD_RSP3_REG(uSDHC3_BASE_PTR)
#define uSDHC3_DATA_BUFF_ACC_PORT                USDHC_DATA_BUFF_ACC_PORT_REG(uSDHC3_BASE_PTR)
#define uSDHC3_PRES_STATE                        USDHC_PRES_STATE_REG(uSDHC3_BASE_PTR)
#define uSDHC3_PROT_CTRL                         USDHC_PROT_CTRL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_SYS_CTRL                          USDHC_SYS_CTRL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_INT_STATUS                        USDHC_INT_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_INT_STATUS_EN                     USDHC_INT_STATUS_EN_REG(uSDHC3_BASE_PTR)
#define uSDHC3_INT_SIGNAL_EN                     USDHC_INT_SIGNAL_EN_REG(uSDHC3_BASE_PTR)
#define uSDHC3_AUTOCMD12_ERR_STATUS              USDHC_AUTOCMD12_ERR_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_HOST_CTRL_CAP                     USDHC_HOST_CTRL_CAP_REG(uSDHC3_BASE_PTR)
#define uSDHC3_WTMK_LVL                          USDHC_WTMK_LVL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_MIX_CTRL                          USDHC_MIX_CTRL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_FORCE_EVENT                       USDHC_FORCE_EVENT_REG(uSDHC3_BASE_PTR)
#define uSDHC3_ADMA_ERR_STATUS                   USDHC_ADMA_ERR_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_ADMA_SYS_ADDR                     USDHC_ADMA_SYS_ADDR_REG(uSDHC3_BASE_PTR)
#define uSDHC3_DLL_CTRL                          USDHC_DLL_CTRL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_DLL_STATUS                        USDHC_DLL_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_CLK_TUNE_CTRL_STATUS              USDHC_CLK_TUNE_CTRL_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_STROBE_DLL_CTRL                   USDHC_STROBE_DLL_CTRL_REG(uSDHC3_BASE_PTR)
#define uSDHC3_STROBE_DLL_STATUS                 USDHC_STROBE_DLL_STATUS_REG(uSDHC3_BASE_PTR)
#define uSDHC3_VEND_SPEC                         USDHC_VEND_SPEC_REG(uSDHC3_BASE_PTR)
#define uSDHC3_MMC_BOOT                          USDHC_MMC_BOOT_REG(uSDHC3_BASE_PTR)
#define uSDHC3_VEND_SPEC2                        USDHC_VEND_SPEC2_REG(uSDHC3_BASE_PTR)
#define uSDHC3_TUNING_CTRL                       USDHC_TUNING_CTRL_REG(uSDHC3_BASE_PTR)

/*!
 * @}
 */ /* end of group USDHC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group USDHC_Peripheral */


/* ----------------------------------------------------------------------------
   -- WDOG
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Peripheral WDOG
 * @{
 */

/** WDOG - Peripheral register structure */
typedef struct WDOG_MemMap {
  uint16_t WCR;                                    /**< Watchdog Control Register, offset: 0x0 */
  uint16_t WSR;                                    /**< Watchdog Service Register, offset: 0x2 */
  uint16_t WRSR;                                   /**< Watchdog Reset Status Register, offset: 0x4 */
  uint16_t WICR;                                   /**< Watchdog Interrupt Control Register, offset: 0x6 */
  uint16_t WMCR;                                   /**< Watchdog Miscellaneous Control Register, offset: 0x8 */
} volatile *WDOG_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register accessors */
#define WDOG_WCR_REG(base)                       ((base)->WCR)
#define WDOG_WSR_REG(base)                       ((base)->WSR)
#define WDOG_WRSR_REG(base)                      ((base)->WRSR)
#define WDOG_WICR_REG(base)                      ((base)->WICR)
#define WDOG_WMCR_REG(base)                      ((base)->WMCR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- WDOG Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Masks WDOG Register Masks
 * @{
 */

/*! @name WCR - Watchdog Control Register */
/*! @{ */
#define WDOG_WCR_WDZST_MASK                      (0x1U)
#define WDOG_WCR_WDZST_SHIFT                     (0U)
#define WDOG_WCR_WDBG_MASK                       (0x2U)
#define WDOG_WCR_WDBG_SHIFT                      (1U)
#define WDOG_WCR_WDE_MASK                        (0x4U)
#define WDOG_WCR_WDE_SHIFT                       (2U)
#define WDOG_WCR_WDT_MASK                        (0x8U)
#define WDOG_WCR_WDT_SHIFT                       (3U)
#define WDOG_WCR_SRS_MASK                        (0x10U)
#define WDOG_WCR_SRS_SHIFT                       (4U)
#define WDOG_WCR_WDA_MASK                        (0x20U)
#define WDOG_WCR_WDA_SHIFT                       (5U)
#define WDOG_WCR_SRE_MASK                        (0x40U)
#define WDOG_WCR_SRE_SHIFT                       (6U)
#define WDOG_WCR_WDW_MASK                        (0x80U)
#define WDOG_WCR_WDW_SHIFT                       (7U)
#define WDOG_WCR_WT_MASK                         (0xFF00U)
#define WDOG_WCR_WT_SHIFT                        (8U)
/*! WT
 *  0b00000000..- 0.5 Seconds (Default).
 *  0b00000001..- 1.0 Seconds.
 *  0b00000010..- 1.5 Seconds.
 *  0b00000011..- 2.0 Seconds.
 *  0b11111111..- 128 Seconds.
 */
#define WDOG_WCR_WT(x)                           (((uint16_t)(((uint16_t)(x)) << WDOG_WCR_WT_SHIFT)) & WDOG_WCR_WT_MASK)
/*! @} */

/*! @name WSR - Watchdog Service Register */
/*! @{ */
#define WDOG_WSR_WSR_MASK                        (0xFFFFU)
#define WDOG_WSR_WSR_SHIFT                       (0U)
/*! WSR
 *  0b0101010101010101..Write to the Watchdog Service Register (WDOG_WSR).
 *  0b1010101010101010..Write to the Watchdog Service Register (WDOG_WSR).
 */
#define WDOG_WSR_WSR(x)                          (((uint16_t)(((uint16_t)(x)) << WDOG_WSR_WSR_SHIFT)) & WDOG_WSR_WSR_MASK)
/*! @} */

/*! @name WRSR - Watchdog Reset Status Register */
/*! @{ */
#define WDOG_WRSR_SFTW_MASK                      (0x1U)
#define WDOG_WRSR_SFTW_SHIFT                     (0U)
#define WDOG_WRSR_TOUT_MASK                      (0x2U)
#define WDOG_WRSR_TOUT_SHIFT                     (1U)
#define WDOG_WRSR_POR_MASK                       (0x10U)
#define WDOG_WRSR_POR_SHIFT                      (4U)
/*! @} */

/*! @name WICR - Watchdog Interrupt Control Register */
/*! @{ */
#define WDOG_WICR_WICT_MASK                      (0xFFU)
#define WDOG_WICR_WICT_SHIFT                     (0U)
/*! WICT
 *  0b00000000..WICT[7:0] = Time duration between interrupt and time-out is 0 seconds.
 *  0b00000001..WICT[7:0] = Time duration between interrupt and time-out is 0.5 seconds.
 *  0b00000100..WICT[7:0] = Time duration between interrupt and time-out is 2 seconds (Default).
 *  0b11111111..WICT[7:0] = Time duration between interrupt and time-out is 127.5 seconds.
 */
#define WDOG_WICR_WICT(x)                        (((uint16_t)(((uint16_t)(x)) << WDOG_WICR_WICT_SHIFT)) & WDOG_WICR_WICT_MASK)
#define WDOG_WICR_WTIS_MASK                      (0x4000U)
#define WDOG_WICR_WTIS_SHIFT                     (14U)
#define WDOG_WICR_WIE_MASK                       (0x8000U)
#define WDOG_WICR_WIE_SHIFT                      (15U)
/*! @} */

/*! @name WMCR - Watchdog Miscellaneous Control Register */
/*! @{ */
#define WDOG_WMCR_PDE_MASK                       (0x1U)
#define WDOG_WMCR_PDE_SHIFT                      (0U)
/*! @} */


/*!
 * @}
 */ /* end of group WDOG_Register_Masks */


/* WDOG - Peripheral instance base addresses */
/** Peripheral WDOG1 base pointer */
#define WDOG1_BASE_PTR                           ((WDOG_MemMapPtr)0x30280000u)
/** Peripheral WDOG2 base pointer */
#define WDOG2_BASE_PTR                           ((WDOG_MemMapPtr)0x30290000u)
/** Peripheral WDOG3 base pointer */
#define WDOG3_BASE_PTR                           ((WDOG_MemMapPtr)0x302A0000u)
/** Array initializer of WDOG peripheral base pointers */
#define WDOG_BASE_PTRS                           { WDOG1_BASE_PTR, WDOG2_BASE_PTR, WDOG3_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- WDOG - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup WDOG_Register_Accessor_Macros WDOG - Register accessor macros
 * @{
 */


/* WDOG - Register instance definitions */
/* WDOG1 */
#define WDOG1_WCR                                WDOG_WCR_REG(WDOG1_BASE_PTR)
#define WDOG1_WSR                                WDOG_WSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WRSR                               WDOG_WRSR_REG(WDOG1_BASE_PTR)
#define WDOG1_WICR                               WDOG_WICR_REG(WDOG1_BASE_PTR)
#define WDOG1_WMCR                               WDOG_WMCR_REG(WDOG1_BASE_PTR)
/* WDOG2 */
#define WDOG2_WCR                                WDOG_WCR_REG(WDOG2_BASE_PTR)
#define WDOG2_WSR                                WDOG_WSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WRSR                               WDOG_WRSR_REG(WDOG2_BASE_PTR)
#define WDOG2_WICR                               WDOG_WICR_REG(WDOG2_BASE_PTR)
#define WDOG2_WMCR                               WDOG_WMCR_REG(WDOG2_BASE_PTR)
/* WDOG3 */
#define WDOG3_WCR                                WDOG_WCR_REG(WDOG3_BASE_PTR)
#define WDOG3_WSR                                WDOG_WSR_REG(WDOG3_BASE_PTR)
#define WDOG3_WRSR                               WDOG_WRSR_REG(WDOG3_BASE_PTR)
#define WDOG3_WICR                               WDOG_WICR_REG(WDOG3_BASE_PTR)
#define WDOG3_WMCR                               WDOG_WMCR_REG(WDOG3_BASE_PTR)

/*!
 * @}
 */ /* end of group WDOG_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group WDOG_Peripheral */


/* ----------------------------------------------------------------------------
   -- XTALOSC
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Peripheral XTALOSC
 * @{
 */

/** XTALOSC - Peripheral register structure */
typedef struct XTALOSC_MemMap {
  uint32_t SYS_OSCNML_CTL0;                        /**< OSC Normal Clock Generation Control Register0, offset: 0x0 */
  uint32_t SYS_OSCNML_CTL1;                        /**< OSC Normal Clock Generation Control Register1, offset: 0x4 */
} volatile *XTALOSC_MemMapPtr;

/* ----------------------------------------------------------------------------
   -- XTALOSC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Accessor_Macros XTALOSC - Register accessor macros
 * @{
 */


/* XTALOSC - Register accessors */
#define XTALOSC_SYS_OSCNML_CTL0_REG(base)        ((base)->SYS_OSCNML_CTL0)
#define XTALOSC_SYS_OSCNML_CTL1_REG(base)        ((base)->SYS_OSCNML_CTL1)

/*!
 * @}
 */ /* end of group XTALOSC_Register_Accessor_Macros */


/* ----------------------------------------------------------------------------
   -- XTALOSC Register Masks
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Masks XTALOSC Register Masks
 * @{
 */

/*! @name SYS_OSCNML_CTL0 - OSC Normal Clock Generation Control Register0 */
/*! @{ */
#define XTALOSC_SYS_OSCNML_CTL0_SF0_MASK         (0x1U)
#define XTALOSC_SYS_OSCNML_CTL0_SF0_SHIFT        (0U)
#define XTALOSC_SYS_OSCNML_CTL0_SF1_MASK         (0x2U)
#define XTALOSC_SYS_OSCNML_CTL0_SF1_SHIFT        (1U)
#define XTALOSC_SYS_OSCNML_CTL0_SP_MASK          (0x4U)
#define XTALOSC_SYS_OSCNML_CTL0_SP_SHIFT         (2U)
#define XTALOSC_SYS_OSCNML_CTL0_RTO_MASK         (0x10U)
#define XTALOSC_SYS_OSCNML_CTL0_RTO_SHIFT        (4U)
#define XTALOSC_SYS_OSCNML_CTL0_EN_MASK          (0x80000000U)
#define XTALOSC_SYS_OSCNML_CTL0_EN_SHIFT         (31U)
/*! @} */

/*! @name SYS_OSCNML_CTL1 - OSC Normal Clock Generation Control Register1 */
/*! @{ */
#define XTALOSC_SYS_OSCNML_CTL1_CLK_CKE_OVERRIDE_MASK (0x2U)
#define XTALOSC_SYS_OSCNML_CTL1_CLK_CKE_OVERRIDE_SHIFT (1U)
#define XTALOSC_SYS_OSCNML_CTL1_CLK_CKE_MASK     (0x4U)
#define XTALOSC_SYS_OSCNML_CTL1_CLK_CKE_SHIFT    (2U)
#define XTALOSC_SYS_OSCNML_CTL1_LOCK_COUNT_MASK  (0xFF0U)
#define XTALOSC_SYS_OSCNML_CTL1_LOCK_COUNT_SHIFT (4U)
#define XTALOSC_SYS_OSCNML_CTL1_LOCK_COUNT(x)    (((uint32_t)(((uint32_t)(x)) << XTALOSC_SYS_OSCNML_CTL1_LOCK_COUNT_SHIFT)) & XTALOSC_SYS_OSCNML_CTL1_LOCK_COUNT_MASK)
/*! @} */


/*!
 * @}
 */ /* end of group XTALOSC_Register_Masks */


/* XTALOSC - Peripheral instance base addresses */
/** Peripheral XTALOSC base pointer */
#define XTALOSC_BASE_PTR                         ((XTALOSC_MemMapPtr)0x30270000u)
/** Array initializer of XTALOSC peripheral base pointers */
#define XTALOSC_BASE_PTRS                        { XTALOSC_BASE_PTR }

/* ----------------------------------------------------------------------------
   -- XTALOSC - Register accessor macros
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup XTALOSC_Register_Accessor_Macros XTALOSC - Register accessor macros
 * @{
 */


/* XTALOSC - Register instance definitions */
/* XTALOSC */
#define XTALOSC_SYS_OSCNML_CTL0                  XTALOSC_SYS_OSCNML_CTL0_REG(XTALOSC_BASE_PTR)
#define XTALOSC_SYS_OSCNML_CTL1                  XTALOSC_SYS_OSCNML_CTL1_REG(XTALOSC_BASE_PTR)

/*!
 * @}
 */ /* end of group XTALOSC_Register_Accessor_Macros */


/*!
 * @}
 */ /* end of group XTALOSC_Peripheral */


/*
** End of section using anonymous unions
*/

#if defined(__ARMCC_VERSION)
  #if (__ARMCC_VERSION >= 6010050)
    #pragma clang diagnostic pop
  #else
    #pragma pop
  #endif
#elif defined(__GNUC__)
  /* leave anonymous unions enabled */
#elif defined(__IAR_SYSTEMS_ICC__)
  #pragma language=default
#else
  #error Not supported compiler type
#endif

/*!
 * @}
 */ /* end of group Peripheral_defines */


/* ----------------------------------------------------------------------------
   -- SDK Compatibility
   ---------------------------------------------------------------------------- */

/*!
 * @addtogroup SDK_Compatibility_Symbols SDK Compatibility
 * @{
 */

/* No SDK compatibility issues. */

/*!
 * @}
 */ /* end of group SDK_Compatibility_Symbols */


#else /* #if !defined(MCU_MIMX8MN6_ca53) */
  /* There is already included the same memory map. Check if it is compatible (has the same major version) */
  #if (MCU_MEM_MAP_VERSION != 0x0200U)
    #if (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING))
      #warning There are included two not compatible versions of memory maps. Please check possible differences.
    #endif /* (!defined(MCU_MEM_MAP_SUPPRESS_VERSION_WARNING)) */
  #endif /* (MCU_MEM_MAP_VERSION != 0x0200U) */
#endif  /* #if !defined(MCU_MIMX8MN6_ca53) */

